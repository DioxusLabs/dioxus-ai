input,output
Navigation Menu Item Icon,"DESCRIPTION:
The UI should be a navigation menu item with an icon, which is a clickable element that represents a single item in a navigation menu. The icon should be displayed to the left of the text.
COMPONENTS:
- NavigationMenuItemIcon: A standalone component that represents a single item in a navigation menu.
HTML:
<nav><NavigationMenuItemIcon/><!-- more navigation menu items --></nav>
COMPONENT HTML:
NavigationMenuItemIcon:
<li class=""flex items-center py-2""><i class=""fas fa-{icon_type} mr-2 text-lg"" aria-hidden=""true""></i><span>{menu_item_text}</span></li>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
Track element,"DESCRIPTION:
The track element should display the track's title, artist, and album artwork. It should be responsive and accessible.
COMPONENTS:
- TrackElement: A standalone component representing a single track.
- TrackInfo: A component that displays the track's title and artist. It takes children.
- AlbumArtwork: A standalone component displaying the album artwork.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AlbumArtwork/><div class=""ml-4""><TrackInfo><TrackElement/></TrackInfo></div></div>
COMPONENT HTML:
TrackElement:
<p class=""text-lg"">{track_title}</p><p class=""text-sm"">{artist_name}</p>
TrackInfo:
<div class=""flex flex-col"">{children}</div>
AlbumArtwork:
<img src={album_artwork_url} alt=""Album Artwork""/>"
Prominent section highlighting important or trending content,"DESCRIPTION:
A prominent section that stands out from the rest of the page, highlighting important or trending content. It should have a clear heading, a short description, and a call-to-action (CTA) button. The section should be responsive, mobile-first, and accessible.
COMPONENTS:
- HeroHeader: Standalone component for the heading of the prominent section.
- HeroDescription: Standalone component for the short description of the prominent section.
- CallToActionButton: Standalone component for the CTA button.
- ProminentSection: Component that takes children, wrapping the entire prominent section.
HTML:
<div class=""max-w-md mx-auto p-4""><ProminentSection><HeroHeader/><HeroDescription/><CallToActionButton/></ProminentSection></div>
COMPONENT HTML:
HeroHeader:
<h2 class=""text-3xl font-bold"">{header_text}</h2>
HeroDescription:
<p class=""text-lg"">{description_text}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProminentSection:
<div class=""bg-gray-100 p-4 rounded shadow-md"">{children}</div>"
Slider/Carousel for Promotions,"DESCRIPTION:
The UI should be a responsive slider/carousel that displays promotions or offers with images, headings, and descriptions. It should be accessible and easy to use on various devices.
COMPONENTS:
- PromotionSlide: A standalone component that represents a single slide in the carousel. It contains an image, heading, and description.
- PromotionCarousel: A component that takes children and renders a carousel of promotion slides.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-4"">Current Promotions</h2><PromotionCarousel><PromotionSlide/><PromotionSlide/><PromotionSlide/></PromotionCarousel></section>
COMPONENT HTML:
PromotionSlide:
<div class=""flex flex-col md:flex-row items-center mb-4""><img src={image_url} alt={alt_text} class=""w-full md:w-1/2 object-cover""/><div class=""md:ml-4""><h3 class=""text-lg font-bold mb-2"">{heading}</h3><p class=""text-sm"">{description}</p></div></div>
PromotionCarousel:
<div class=""overflow-x-auto whitespace-nowrap"">{children}</div>"
Slider/Carousel for Promotions,"DESCRIPTION:
The UI should be a carousel/slider that displays multiple promotions with images, titles, and descriptions. It should be responsive, mobile-first, and accessible. On desktop, it should display 3-4 promotions at a time, and on mobile, it should display 1-2 promotions at a time. The carousel should have navigation buttons (previous and next) and indicators to show the current slide.
COMPONENTS:
- PromotionSlide: A standalone component that displays a single promotion with an image, title, and description.
- CarouselNavigation: A standalone component that displays the navigation buttons (previous and next).
- CarouselIndicators: A standalone component that displays the indicators for the current slide.
- PromotionCarousel: A component that takes children (PromotionSlide components) and renders the carousel.
HTML:
<section class=""container mx-auto p-4""><PromotionCarousel><PromotionSlide/><PromotionSlide/><PromotionSlide/><!-- Add more PromotionSlide components here --></PromotionCarousel><CarouselNavigation/><CarouselIndicators/></section>
COMPONENT HTML:
PromotionSlide:
<div class=""flex flex-col p-4""><img src={imageUrl} alt={altText} class=""w-full h-48 object-cover mb-4""/><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p></div>
CarouselNavigation:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Previous </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next </button></div>
CarouselIndicators:
<div class=""flex justify-center mb-4"">{ Array.from(Array(5).keys()).map((index) =>( <button key={index} class={`bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ${currentIndex === index ? 'bg-orange-500 text-white' : ''}`}>{index + 1} </button>))}</div>
PromotionCarousel:
<div class=""flex overflow-x-hidden"">{children}</div>"
Page Content Header,"DESCRIPTION:
The UI should be a header section that displays the title of the page content, with a responsive design that adapts to different screen sizes. It should have a clean and simple layout that makes the title stand out.
COMPONENTS:
- PageTitle: a standalone component that displays the title of the page content.
HTML:
<header class=""max-w-md mx-auto p-4""><PageTitle/></header>
COMPONENT HTML:
PageTitle:
<h1 class=""text-3xl font-bold"">{pageTitle}</h1>"
Backdrop controls,"DESCRIPTION:
The Backdrop Controls UI will feature a main control panel that provides users with interactive controls such as toggle switches or buttons. This overlay will appear above the application's main content area with a backdrop that dims the background to focus user attention on the control elements.
COMPONENTS:
- Backdrop: A standalone component that renders a semi-transparent layer between the main content and the control panel.
- ControlPanel: A standalone component that hosts the interactive controls like toggles or buttons.
HTML:
<!-- Main Container for Backdrop Controls --><div class=""relative z-10""><!-- Backdrop Overlay --><Backdrop/><!-- Control Panel with interactive controls --><ControlPanel/></div>
COMPONENT HTML:
Backdrop:
<!-- Semi-transparent backdrop to dim the content behind the control panel --><div class=""fixed inset-0 bg-black bg-opacity-50""></div>
ControlPanel:
<!-- Container for holding the control elements --><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 p-4 bg-white shadow-lg rounded-md""><button type=""button"" class=""py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-700"">Toggle</button><button type=""button"" class=""ml-4 py-2 px-4 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"">Close</button></div>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberDisplay: A standalone component that displays the company phone number.
HTML:
<div class=""flex justify-center""><PhoneNumberDisplay/></div>
COMPONENT HTML:
PhoneNumberDisplay:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_phone_number}</p>"
Error message displayed within the context of a form field or input area,"DESCRIPTION:
The UI should display an error message below a form field or input area, indicating that the user has entered invalid data. The error message should be accessible, responsive, and visually distinct from the rest of the form.
COMPONENTS:
- FormFieldError: A standalone component that displays an error message related to a form field.
HTML:
<div class=""max-w-md mx-auto p-4""><label class=""block mb-2"" for=""input-field"">Input Field</label><input class=""block w-full p-2 pl-10 text-sm text-gray-700"" id=""input-field"" type=""text""/><FormFieldError/></div>
COMPONENT HTML:
FormFieldError:
<p class=""text-xs text-red-600 mt-1"">{error_message}</p>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Career opportunities display,"DESCRIPTION:
The UI should display a list of career opportunities with their respective details, such as job title, location, and brief description. The list should be responsive, accessible, and easy to navigate on various devices.
COMPONENTS:
- CareerOpportunityCard: A standalone component to display a single career opportunity.
- CareerOpportunitiesList: A component that takes children, which will be a list of `CareerOpportunityCard` components.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Career Opportunities</h1><CareerOpportunitiesList/></section>
COMPONENT HTML:
CareerOpportunityCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{jobTitle}</h2><p class=""text-gray-600"">{location}</p><p class=""text-gray-600"">{briefDescription}</p><a class=""text-blue-600 hover:text-blue-800"" href=""{jobUrl}"">Learn More</a></div>
CareerOpportunitiesList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Rich Text Editors,"DESCRIPTION:
The UI should resemble a minimalistic rich text editor, similar to a simplified Medium editor or the GitHub comment editor. It should have a toolbar with basic formatting options, a contenteditable div for editing, and a character count indicator.
COMPONENTS:
- ToolBar: (standalone) - The top toolbar with formatting options.
- Editor: (takes children) - The contenteditable div where the user can edit the text.
- CharacterCount: (standalone) - Displays the character count of the edited text.
HTML:
<div class=""flex flex-col h-screen overflow-y-auto""><ToolBar/><Editor><!-- The user can edit the text here -->{children}
</Editor><CharacterCount/></div>
COMPONENT HTML:
ToolBar:
<div class=""bg-gray-100 py-2 px-4 flex justify-between""><button class=""text-gray-500 hover:text-gray-800""><!-- Bold formatting button --><i class=""fas fa-bold""></i></button><button class=""text-gray-500 hover:text-gray-800""><!-- Italic formatting button --><i class=""fas fa-italic""></i></button><!-- More formatting options... --></div>
Editor:
<div contentEditable=""true"" class=""px-4 py-2 w-full h-full overflow-y-auto"" aria-multiline=""true"" aria-label=""Rich text editor"">{children}</div>
CharacterCount:
<p class=""text-gray-500 text-sm"">{character_count} characters</p>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a single post or tweet embed with a username, avatar, timestamp, and content. The embed should be responsive, displaying well on both desktop and mobile devices.
COMPONENTS:
- PostHeader: Standalone component displaying the username and avatar.
- PostMeta: Standalone component displaying the timestamp.
- PostContent: Takes children, displaying the content of the post.
- PostEmbed: Takes children, wrapping the entire post embed.
HTML:
<div class=""max-w-md mx-auto p-4""><PostEmbed><PostHeader/><PostMeta/><PostContent><!-- Post content goes here --></PostContent></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={avatarUrl} alt={username} class=""w-10 h-10 rounded-full mr-2""/><p class=""font-bold"">{username}</p></div>
PostMeta:
<p class=""text-gray-500 text-sm"">{timestamp}</p>
PostContent:
<div class=""prose"">{children}</div>
PostEmbed:
<div class="" bg-white p-4 rounded shadow-md"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
A post/tweet embed component that displays a user's profile picture, username, tweet/post text, and any media (e.g. image, video) associated with the post.
COMPONENTS:
- UserProfilePicture: standalone component that displays a user's profile picture.
- Username: standalone component that displays a user's username.
- PostText: standalone component that displays the text of the post/tweet.
- PostMedia: standalone component that displays the media associated with the post (e.g. image, video).
HTML:
<div class=""flex bg-white p-4 border-b border-gray-200""><UserProfilePicture/><div class=""ml-4""><Username/><PostText/><PostMedia/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} class=""rounded-full h-10 w-10""/>
Username:
<p class=""font-bold"">{username}</p>
PostText:
<p>{post_text}</p>
PostMedia:
<img src={media_url} class=""max-w-full h-56""/>"
Header Navigation Links,"DESCRIPTION:
The UI should be a horizontal navigation bar with links to different pages. It should be responsive, accessible, and follow a mobile-first approach.
COMPONENTS:
- HeaderNav: standalone component that contains the navigation links.
- NavLink: a component that takes children (the link text) and represents a single navigation link.
HTML:
<header><nav class=""flex justify-between mb-4 lg:mb-0""><div class=""flex-1""><HeaderNav/></div></nav></header>
COMPONENT HTML:
HeaderNav:
<ul class=""flex flex-wrap justify-center lg:flex-nowrap lg:justify-start""><li class=""mr-6 lg:mr-12""><NavLink>Home</NavLink></li><li class=""mr-6 lg:mr-12""><NavLink>About</NavLink></li><li><NavLink>Contact</NavLink></li></ul>
NavLink:
<a href=""{href}"" class=""text-lg hover:text-{hover_color}"">{children}</a>"
Notification bell with unread count badge,"DESCRIPTION:
A notification bell icon with a small badge displaying the number of unread notifications. The bell should be clickable, and the badge should be highlighted if there are unread notifications.
COMPONENTS:
- NotificationBell: A standalone component that wraps a clickable bell icon and an unread count badge.
- Badge: A component that takes children (the unread count) and displays it in a highlighted circle.
HTML:
<NotificationBell/>
COMPONENT HTML:
NotificationBell:
<a href=""{notification_href}"" class=""flex items-center hover:bg-gray-100 rounded-md p-2""><i class=""fas fa-bell""></i><Badge>{unread_count}</Badge></a>
Badge:
<span class=""bg-orange-500 rounded-full text-white py-1 px-2 text-xs"">{children}</span>"
Notification bell with unread count badge,"DESCRIPTION:
The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.
COMPONENTS:
- NotificationBell: standalone component representing the notification bell icon.
- UnreadCountBadge: standalone component displaying the number of unread notifications.
HTML:
<div class=""flex items-center""><NotificationBell/><UnreadCountBadge/></div>
COMPONENT HTML:
NotificationBell:
<i class=""fa fa-bell text-lg text-gray-600""></i>
UnreadCountBadge:
<div class=""bg-red-500 text-white rounded-full text-xs p-1"">{unread_count}</div>"
Tags,"DESCRIPTION:
A horizontal list of tags, each tag being a small rectangle with a label and an optional close icon.
COMPONENTS:
- Tag: A single tag component, takes children (the tag label).
- TagList: A container component for multiple tags, takes children (array of `Tag` components).
HTML:
<TagList><Tag>Java</Tag><Tag>Python</Tag><Tag>JavaScript</Tag></TagList>
COMPONENT HTML:
Tag:
<span class=""bg-gray-200 py-1 px-2 rounded"">{children}<!-- tag label --><button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">× </button></span>
TagList:
<ul class=""flex flex-wrap items-center"">{children}<!-- array of Tag components --></ul>"
Progress bar,"DESCRIPTION:
The UI should be a horizontal progress bar that shows the progression of a task. The progress bar should be responsive, accessible, and easy to use. It should have a filled portion that indicates the progress and an unfilled portion that indicates the remaining progress.
COMPONENTS:
- ProgressBar: A standalone component that represents the entire progress bar.
HTML:
<ProgressBar/>
COMPONENT HTML:
ProgressBar:
<div class=""w-full h-4 rounded bg-gray-200""><div class=""bg-blue-500 h-4 rounded"" style={`width: ${progressPercentage}%`}></div><span class=""sr-only"">{progressPercentage}% complete</span></div>"
Featured Image Caption,"DESCRIPTION:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
COMPONENTS:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
HTML:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Scroll-to-top button with smooth animation,"DESCRIPTION:
The UI should be a scroll-to-top button that appears when the user scrolls down a certain distance from the top of the page. When clicked, it should smoothly animate back to the top of the page. The button should be circular, with an upward arrow icon and a subtle background color. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ScrollToTopButton: (standalone): a circular button with an upward arrow icon that, when clicked, scrolls the page back to the top.
HTML:
<!-- main content of the page --><main><!-- page content here --></main><!-- scroll-to-top button --><ScrollToTopButton/>
COMPONENT HTML:
ScrollToTopButton:
<button class=""fixed bottom-4 right-4 z-50 p-4 bg-gray-100 hover:bg-gray-200 rounded-full shadow-md transition duration-300"" title=""Scroll to top""><i class=""fas fa-chevron-up"" aria-hidden=""true""></i><span class=""sr-only"">Scroll to top</span></button>"
Post/Tweet Box,"DESCRIPTION:
A post/tweet box with a profile picture, username, input field, and a send button.
COMPONENTS:
- UserProfilePicture: Standalone component
- Username: Standalone component
- PostInput: Takes children
- SendButton: Standalone component
HTML:
<div class=""flex p-4""><UserProfilePicture/><div class=""flex-1 ml-4""><Username/><PostInput><PostInput/></PostInput><SendButton/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-12 h-12 rounded-full"" src={profile_picture_url} alt=""Profile Picture""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
PostInput:
<textarea class=""w-full p-2 pl-10 text-lg"" rows=""3"" placeholder=""What's on your mind?"">{children}</textarea>
SendButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send</button>"
Feed/List View of Posts,"DESCRIPTION:
The UI should be a responsive list view of posts, displaying the title, content, and metadata of each post. On smaller screens, the list items should be stacked vertically, and on larger screens, they should be displayed in a grid with multiple columns.
COMPONENTS:
- PostListItem: (standalone): a single list item representing a post
- PostList: (takes children): a container for the list of posts, which wraps the PostListItem components
HTML:
<main class=""container mx-auto p-4""><PostList><PostListItem/><PostListItem/><!-- add more PostListItem components here --></PostList></main>
COMPONENT HTML:
PostListItem:
<article class=""mb-4 bg-white rounded-lg shadow-md p-4""><h2 class=""text-lg"">{post_title}</h2><p class=""text-gray-600"">{post_excerpt}</p><p class=""text-sm text-gray-500"">{post_author} | {post_date}</p></article>
PostList:
<ul class=""flex flex-wrap justify-center lg:justify-start"">{children}</ul>"
Noise (visual),"DESCRIPTION:
The UI should be a noise (visual) component that displays a visually appealing noise pattern, commonly used as a backgrounds or overlays in digital designs. The noise pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- NoiseComponent: (standalone): The main noise component that renders the noise pattern.
HTML:
<div class=""h-screen w-full bg-cover""><NoiseComponent/></div>
COMPONENT HTML:
NoiseComponent:
<div class=""absolute inset-0 bg-noise bg-cover opacity-50""></div>"
"User profile with karma, post history, and info","DESCRIPTION:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should display a toggle button to open and close a navigation menu. The toggle button should display a text indicating its current state.
COMPONENTS:
- NavbarToggler: A standalone component that toggles the navigation menu.
- NavbarToggleText: A standalone component that displays the toggle button text.
HTML:
<nav class=""flex justify-between items-center py-4""><NavbarToggler/><NavbarToggleText/></nav>
COMPONENT HTML:
NavbarToggler:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">{toggleButtonText}</span></button>
NavbarToggleText:
<span class=""text-sm"">{toggleButtonText}</span>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Wizards,"DESCRIPTION:
The Wizard UI should be a simple, responsive, and accessible interface that guides the user through a series of steps to complete a task. It should have a clear and concise layout, with each step building upon the previous one.
COMPONENTS:
- WizardHeader: A standalone component that displays the title and navigation for the wizard.
- WizardStep: A component that takes children, representing a single step in the wizard.
- WizardStepTitle: A standalone component that displays the title of a wizard step.
- WizardStepContent: A component that takes children, representing the content of a wizard step.
- WizardFooter: A standalone component that displays the navigation and actions for the wizard.
HTML:
<div class=""max-w-md mx-auto p-4""><WizardHeader/><div class=""flex flex-wrap -mx-4""><WizardStep><WizardStepTitle/><WizardStepContent><!-- step content here --></WizardStepContent></WizardStep><!-- more wizard steps here --></div><WizardFooter/></div>
COMPONENT HTML:
WizardHeader:
<div class=""flex justify-between mb-4""><h1 class=""text-2xl"">{wizard_title}</h1><nav class=""text-sm""><ol class=""list-none""><li><a href=""#"" class=""text-blue-600"">{step_1_title}</a></li><li><a href=""#"" class=""text-blue-600"">{step_2_title}</a></li><!-- more navigation items here --></ol></nav></div>
WizardStep:
<div class=""wizard-step p-4 mb-4"">{children}</div>
WizardStepTitle:
<h2 class=""text-lg"">{step_title}</h2>
WizardStepContent:
<div class=""wizard-step-content"">{children}</div>
WizardFooter:
<div class=""flex justify-between mb-4""><button class=""btn btn-primary"">{primary_action}</button><button class=""btn btn-secondary"">{secondary_action}</button></div>"
Confetti controls,"DESCRIPTION:
The UI should display a set of confetti controls with a toggle button to show or hide the confetti, a slider to control the confetti speed, and a color picker to change the confetti color. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- ConfettiToggle: (standalone): A toggle button to show or hide the confetti.
- SpeedSlider: (standalone): A slider to control the confetti speed.
- ColorPicker: (standalone): A color picker to change the confetti color.
- ConfettiContainer: (takes children): A container that wraps the confetti elements.
HTML:
<div class=""flex flex-col justify-center p-4 lg:p-8""><ConfettiToggle/><div class=""flex justify-center mb-4""><SpeedSlider/><ColorPicker/></div><ConfettiContainer><!-- confetti elements will be rendered here --></ConfettiContainer></div>
COMPONENT HTML:
ConfettiToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{toggle_label}</button>
SpeedSlider:
<div class=""flex items-center mb-2""><label class=""mr-2"" for=""speed-slider"">Speed:</label><input id=""speed-slider"" type=""range"" min=""1"" max=""10"" value=""5"" class=""w-full""></div>
ColorPicker:
<input type=""color"" value=""{color_value}"" class=""w-full"">
ConfettiContainer:
<div class=""relative"">{children}</div>"
Hero Overlay Gradient,"DESCRIPTION:
The UI should be a hero section with a gradient overlay, typically used as a background image or video, with a clear call-to-action (CTA) on top of it.
COMPONENTS:
- HeroGradientOverlay: (standalone): The gradient overlay component.
- HeroCTA: (takes children): The call-to-action component.
HTML:
<section class=""h-screen relative""><HeroGradientOverlay/><div class=""absolute inset-0 flex items-center justify-center""><HeroCTA>Insert CTA text or button here</HeroCTA></div></section>
COMPONENT HTML:
HeroGradientOverlay:
<div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-80""></div>
HeroCTA:
<div class=""text-2xl font-bold text-white"">{children}</div>"
Wishlist/favorites feature,"DESCRIPTION:
The UI should be a card-based layout with a favorite button that toggles the favorite status of an item. When unfavorited, the button should be a hollow heart icon, and when favorited, it should be a filled heart icon. The card should display the item's name, a brief description, and a ""Learn more"" button.
COMPONENTS:
- ItemCard: A standalone component that represents a single item on the wishlist.
- FavoriteButton: A standalone component that toggles the favorite status of an item.
- LearnMoreButton: A standalone component that links to more information about the item.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ItemCard/><ItemCard/><!-- Add more ItemCard components as needed --></div>
COMPONENT HTML:
ItemCard:
<div class=""bg-white rounded shadow-md p-4 w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mb-4""><h2 class=""text-lg"">{itemName}</h2><p class=""text-gray-600"">{itemDescription}</p><div class=""flex justify-between mt-4""><FavoriteButton/><LearnMoreButton/></div></div>
FavoriteButton:
<button class=""bg-transparent border-none text-red-600 hover:text-red-900 focus:outline-none"">{isFavorited ? <span class=""fas fa-heart""></span>: <span class=""far fa-heart""></span>}</button>
LearnMoreButton:
<a href={learnMoreUrl} class=""text-blue-600 hover:text-blue-900 focus:outline-none"">Learn more</a>"
Testimonial Avatar Image,"DESCRIPTION:
The UI should display a circular image of a person, with a testimonial quote overlaid on top of it, along with the person's name and job title.
COMPONENTS:
- TestimonialAvatarImage: (standalone)
- TestimonialQuote: (takes children)
- TestimonialName: (standalone)
- TestimonialJobTitle: (standalone)
HTML:
<div class=""flex flex-col items-center""><TestimonialAvatarImage/><div class=""mt-4""><TestimonialQuote><p>{testimonial_quote}</p></TestimonialQuote><TestimonialName/><TestimonialJobTitle/></div></div>
COMPONENT HTML:
TestimonialAvatarImage:
<img src={image_url} alt={name} class=""w-24 h-24 rounded-full object-cover""/>
TestimonialQuote:
<div class=""text-lg font-light"">{children}</div>
TestimonialName:
<p class=""text-lg font-bold"">{name}</p>
TestimonialJobTitle:
<p class=""text-sm text-gray-600"">{job_title}</p>"
Testimonial Avatar Image,"DESCRIPTION:
The UI should display a circular avatar image with a testimonial quote wrapped around it.
COMPONENTS:
- TestimonialAvatarImage: standalone component that displays a circular avatar image with a testimonial quote.
- QuoteText: standalone component that displays the testimonial quote.
HTML:
<div class=""flex flex-col items-center mb-4""><TestimonialAvatarImage/><QuoteText/></div>
COMPONENT HTML:
TestimonialAvatarImage:
<img src={avatar_image_url} alt={name} class=""w-20 h-20 rounded-full object-cover""/>
QuoteText:
<blockquote class=""text-lg font-bold"">{quote}</blockquote>"
Testimonial Avatar Image,"DESCRIPTION:
The UI should display a circular avatar image with a testimonial quote and the name of the person who gave the testimonial.
COMPONENTS:
- TestimonialAvatar: Standalone component
- Quote: Standalone component
- Name: Standalone component
HTML:
<div class=""flex flex-col items-center mb-4 md:flex-row md:items-start""><TestimonialAvatar/><div class=""ml-4""><Quote/><Name/></div></div>
COMPONENT HTML:
TestimonialAvatar:
<img src={image_url} alt={name} class=""w-16 h-16 rounded-full object-cover""/>
Quote:
<blockquote class=""text-lg italic"">{testimonial_quote}</blockquote>
Name:
<p class=""text-lg"">{name}</p>"
Search bar,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: standalone component that contains the search input field and submit button.
- SearchInput: standalone component that is the text input field.
- SubmitButton: standalone component that is the submit button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center mb-4""><SearchInput/><SubmitButton/></div>
SearchInput:
<input type=""search"" class=""w-full rounded-l p-2 pl-10 text-sm"" placeholder=""Search..."">
SubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-r"">Search</button>"
Search bar,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, mobile-first, and accessible. It should be styled with tailwindcss.
COMPONENTS:
- SearchBar: (standalone) - The main search bar component that contains the input field and submit button.
- SearchInput: (standalone) - The input field for the search query.
- SearchButton: (standalone) - The submit button for the search query.
HTML:
<nav class=""flex justify-center bg-gray-100 py-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center mx-4""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""px-4 py-2 w-full rounded-md"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">Search</button>"
Footer Newsletter Success,"DESCRIPTION:
The UI should be a success message for a newsletter subscription, displayed in the footer of a website. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- FooterNewsletterSuccess: standalone component
HTML:
<footer><FooterNewsletterSuccess/></footer>
COMPONENT HTML:
FooterNewsletterSuccess:
<div class=""flex flex-wrap justify-center p-4 mb-4 bg-green-100 rounded""><h5 class=""text-xl text-green-600"">{success_message}</h5><p class=""text-sm text-gray-600"">{thank_you_message}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{unsubscribe_text} </button></div>"
Dropdown menu that expands inline within the content flow,"DESCRIPTION:
The UI should be a dropdown menu that expands inline within the content flow. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- DropdownToggle: A standalone component that triggers the dropdown menu.
- DropdownMenu: A component that takes children and contains the dropdown menu items.
- DropdownMenuItem: A standalone component that represents an individual item in the dropdown menu.
HTML:
<nav><DropdownToggle/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><!-- Add more DropdownMenuItem components here --></DropdownMenu></nav>
COMPONENT HTML:
DropdownToggle:
<button class=""text-sm font-bold py-2 px-4 rounded-md hover:bg-gray-100"">{toggle_text}</button>
DropdownMenu:
<ul class=""list-none p-0 m-0 bg-white shadow-md rounded"">{children}</ul>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{item_href}"" class=""text-sm text-gray-600"">{item_text}</a></li>"
Hero Header with Background Image,"DESCRIPTION:
The UI should be a hero header with a full-width background image that takes up the entire screen on mobile devices and scales down to a fixed height on larger screens. The header should also contain a heading and a button.
COMPONENTS:
- HeroHeader: standalone component that contains the background image, heading, and button.
- HeroHeading: standalone component that contains the heading text.
- HeroCTA: standalone component that contains the call-to-action button.
HTML:
<div class=""h-screen md:h-96 w-full""><HeroHeader/></div>
COMPONENT HTML:
HeroHeader:
<div class=""relative h-full w-full""><div class=""absolute inset-0""><img src=""{background_image_url}"" alt=""Hero background image"" class=""w-full h-full object-cover""/></div><div class=""container mx-auto p-4 pt-6 md:pt-12""><HeroHeading/><HeroCTA/></div></div>
HeroHeading:
<h1 class=""text-3xl md:text-5xl font-bold"">{hero_heading_text}</h1>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Hero Header with Background Image,"DESCRIPTION:
A hero header with a background image that takes up the full width of the screen and has a maximum height of the viewport. The header should have a title and a subtitle.
COMPONENTS:
- HeroHeader: standalone component
- HeroTitle: standalone component
- HeroSubtitle: standalone component
HTML:
<section class=""h-screen w-full relative""><HeroHeader/></section>
COMPONENT HTML:
HeroHeader:
<div class=""h-screen w-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}><div class=""absolute inset-0 flex items-center justify-center""><div class=""max-w-md""><HeroTitle/><HeroSubtitle/></div></div></div>
HeroTitle:
<h1 class=""text-4xl font-bold"">{hero_title}</h1>
HeroSubtitle:
<p class=""text-lg"">{hero_subtitle}</p>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
"Visual indicator, often a number, displaying pending notifications or messages","DESCRIPTION:
The UI should be a small, circular or rectangular badge with a number or text indicating the number of pending notifications or messages. It should be visually striking to grab the user's attention.
COMPONENTS:
- Badge: component (standalone)
HTML:
<span class=""inline-block""><!-- notification icon --><i class=""fas fa-bell text-lg""></i><Badge/></span>
COMPONENT HTML:
Badge:
<span class=""bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full"">{notification_count}</span>"
Flight booking form,"DESCRIPTION:
The UI of the flight booking form should be user-friendly and straightforward, providing fields for the user to enter details such as departure, destination, departure and return dates, and the number of passengers. It should also include a search button to submit the form data.
COMPONENTS:
- InputField: Standalone component used to render text input fields.
- DatePicker: Standalone component for selecting dates.
- NumberSelector: Standalone component for selecting numbers (like the number of passengers).
- FormButton: Standalone component representing the button to submit the form.
HTML:
<div class=""container mx-auto p-4""><form class=""space-y-4""><InputField/><InputField/><DatePicker/><DatePicker/><NumberSelector/><FormButton/></form></div>
COMPONENT HTML:
InputField:
<div class=""flex flex-col""><label for=""{input_id}"" class=""mb-2"">{label}</label><input id=""{input_id}"" type=""text"" placeholder=""{placeholder}"" class=""border p-2""/></div>
DatePicker:
<div class=""flex flex-col""><label for=""{date_picker_id}"" class=""mb-2"">{label}</label><input id=""{date_picker_id}"" type=""date"" class=""border p-2""/></div>
NumberSelector:
<div class=""flex flex-col""><label for=""{number_selector_id}"" class=""mb-2"">{label}</label><input id=""{number_selector_id}"" type=""number"" min=""1"" class=""border p-2""/></div>
FormButton:
<button type=""submit"" class=""w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Suggested products carousel,"DESCRIPTION:
A horizontal carousel displaying multiple products with images, names, and prices. The carousel should be responsive and have navigation arrows on both sides.
COMPONENTS:
- ProductCard: (standalone): Displays a single product with image, name, and price.
- CarouselNavigation: (standalone): Displays navigation arrows for the carousel.
- Carousel: (takes children): Container for the carousel, holds multiple **ProductCard** components.
HTML:
<div class=""flex justify-center""><CarouselNavigation/><Carousel><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></Carousel><CarouselNavigation/></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded""><img src=""{image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h5 class=""text-lg"">{product_name}</h5><p class=""text-gray-600"">{price}</p></div></div>
CarouselNavigation:
<button class=""bg-white border-none text-lg hover:text-gray-600 transition duration-300"">{navigation_arrow}</button>
Carousel:
<div class=""flex overflow-x-hidden"">{children}</div>"
Status indicator controls,"DESCRIPTION:
The UI should display a status indicator control that shows the current status of a task or process. The control should have different states (e.g., success, error, warning, progress) and be responsive for various screen sizes.
COMPONENTS:
- StatusIndicator: A standalone component that displays the status indicator.
- StatusLabel: A standalone component that displays a brief text label for the status.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><StatusIndicator/><StatusLabel/></div>
COMPONENT HTML:
StatusIndicator:
<span class=""inline-block w-4 h-4 rounded-full {status_color}""><!-- status icon or symbol --></span>
StatusLabel:
<span class=""text-sm text-gray-600"">{status_label}</span>"
Meter,"DESCRIPTION:
The UI will feature a simple meter component that visually represents a value as a proportion of a total. This is typically used to display statistics like disk usage, survey results, or skill levels in a graphical format. The meter should be horizontally styled with labels or markers for clarity.
COMPONENTS:
- MeterLabel: Standalone component, which displays text related to the meter (such as the title or percentage).
- MeterBar: Standalone component, which visually represents the value by varying its width according to the percentage.
HTML:
<div class=""flex flex-col space-y-2 p-4""><MeterLabel/><MeterBar/></div>
COMPONENT HTML:
MeterLabel:
<div class=""text-sm font-medium text-gray-700"">{label_text}</div>
MeterBar:
<div class=""w-full bg-gray-200 rounded-full overflow-hidden""><div class=""bg-blue-600 h-2 rounded-full"" style=""width: {percentage_value}%;""></div></div>"
"Overlay that covers the entire screen, often used for modal dialogs or notifications","DESCRIPTION:
The UI should be a full-screen overlay that covers the entire screen, used for displaying modal dialogs or notifications. It should have a dark background with an opacity to make the underlying content blurry, and a centered container with a white background to hold the modal content.
COMPONENTS:
- FullScreenOverlay: (standalone): the full-screen overlay component that covers the entire screen.
- ModalContainer: (takes children): a centered container that holds the modal content.
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><FullScreenOverlay/><ModalContainer><!-- modal content goes here --></ModalContainer></div>
COMPONENT HTML:
FullScreenOverlay:
<div class=""fixed inset-0 bg-gray-500 opacity-75""></div>
ModalContainer:
<div class=""bg-white rounded shadow-md p-4 max-w-md"">{children}</div>"
"Overlay that covers the entire screen, often used for modal dialogs or notifications","DESCRIPTION:
The UI should be a full-screen overlay that covers the entire screen, often used for modal dialogs or notifications. It should be darkened in the background to bring focus to the modal content.
COMPONENTS:
- FullScreenOverlay: a standalone component that covers the entire screen with a darkened background.
- ModalContent: a component that takes children and wraps the content of the modal dialog.
HTML:
<div class=""fixed inset-0 z-50 flex items-center justify-center""><FullScreenOverlay/><ModalContent><!-- modal content goes here --></ModalContent></div>
COMPONENT HTML:
FullScreenOverlay:
<div class=""absolute inset-0 bg-gray-700 opacity-50""></div>
ModalContent:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Featured Image Lightbox Size,"DESCRIPTION:
The UI for the Featured Image Lightbox Size should consist of a featured image that, when clicked, opens a larger version of the image in a modal (lightbox) for better viewing. The modal should also include a close button to exit the expanded view. The design should be responsive, ensuring it adapts well across devices from mobile to desktop.
COMPONENTS:
- FeaturedImage: Standalone component that displays a thumbnail version of the image.
- ModalLightbox: Component that takes children. It serves as the overlay containing the larger image and a close button.
- ImageButton: Standalone component. A button styled to be visually based on its function, such as a close button in the lightbox.
HTML:
<div><!-- Thumbnail image that opens the lightbox on click --><FeaturedImage/><!-- Modal component for the lightbox feature --><ModalLightbox><img src=""{full_image_url}"" alt=""{full_image_description}"" class=""max-w-full h-auto""/><ImageButton/></ModalLightbox></div>
COMPONENT HTML:
FeaturedImage:
<!-- Thumbnail image --><img src=""{thumbnail_image_url}"" alt=""{thumbnail_image_description}"" class=""cursor-pointer w-full""/>
ModalLightbox:
<!-- Lightbox modal that covers the screen with a semi-transparent backdrop --><div class=""fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center"">{children} </div>
ImageButton:
<!-- Button to close the modal, typically styled with an appropriate icon or text --><button class=""absolute top-2 right-2 text-white text-2xl p-2"">Close</button>"
File uploader with drag-and-drop,"DESCRIPTION:
The UI should be a rectangular box with a dashed border and a ""Drag and drop files here"" text inside. When a file is dragged over the box, the border should turn blue and the text should change to ""Drop files here"". When a file is dropped, the border should turn green and the text should change to ""File uploaded successfully"".
COMPONENTS:
- UploaderBox: standalone component that displays the drag-and-drop box
- DragAndDropText: standalone component that displays the text inside the box
HTML:
<div class=""max-w-md mx-auto p-4""><UploaderBox/></div>
COMPONENT HTML:
UploaderBox:
<div class=""h-48 w-full border-2 border-dashed border-gray-300 rounded-md p-4 hover:border-blue-500 hover:text-blue-500 drop:cursor-pointer drop:border-green-500 drop:text-green-500""><DragAndDropText/></div>
DragAndDropText:
<p class=""text-lg text-gray-600"">{drag_and_drop_text}</p>"
Testimonial Quote Box,"DESCRIPTION:
The UI should display a quote from a person, along with their name and title. The quote should be in a larger font size and have a subtle background color to make it stand out. The person's name and title should be displayed below the quote in a smaller font size. The component should be responsive and have a max width to prevent it from taking up too much horizontal space.
COMPONENTS:
- TestimonialQuoteBox: Standalone component that contains the entire testimonial quote box.
- QuoteText: Standalone component that displays the quote text.
- AuthorInfo: Standalone component that displays the author's name and title.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><TestimonialQuoteBox/></div>
COMPONENT HTML:
TestimonialQuoteBox:
<blockquote class=""bg-gray-100 p-4 md:p-6 lg:p-8 rounded-md""><QuoteText/><AuthorInfo/></blockquote>
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-bold"">{quote_text}</p>
AuthorInfo:
<p class=""text-sm md:text-base lg:text-lg"">{author_name}, {author_title}</p>"
Instructor/Author Profiles,"DESCRIPTION:
The UI should display the profile information of an instructor or author, including their name, profile picture, bio, and a list of their courses or publications.
COMPONENTS:
- ProfileHeader: A standalone component that displays the profile picture and name of the instructor/author.
- BioSection: A standalone component that displays the bio of the instructor/author.
- CourseList: A component that takes children, displaying a list of courses or publications.
HTML:
<div class=""flex flex-col items-center p-4""><ProfileHeader/><BioSection/><h2 class=""text-lg font-bold mb-2"">Courses</h2><CourseList><!-- Course items will be rendered here --></CourseList></div>
COMPONENT HTML:
ProfileHeader:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{name}"" class=""w-24 h-24 rounded-full mr-4""/><h1 class=""text-2xl font-bold"">{name}</h1></div>
BioSection:
<div class=""mb-4""><p class=""text-lg"">{bio}</p></div>
CourseList:
<ul class=""list-none mb-4"">{children}</ul>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
A simple metadata section displaying the author's name and the date of publication, aligned to the left and styled for readability.
COMPONENTS:
- AuthorMetadata: standalone component displaying the author's name.
- DateMetadata: standalone component displaying the date of publication.
- MetadataContainer: container component taking two children: AuthorMetadata and DateMetadata.
HTML:
<div class=""flex flex-wrap justify-start mb-4""><MetadataContainer><AuthorMetadata/><DateMetadata/></MetadataContainer></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-gray-600 text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-gray-600 text-sm"">{publication_date}</p>
MetadataContainer:
<div class=""flex flex-wrap items-center"">{children}</div>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication, with the author's name in a slightly larger font size than the date.
COMPONENTS:
- AuthorMetadata: standalone component that displays the author's name.
- DateMetadata: standalone component that displays the date of publication.
HTML:
<div class=""flex justify-between mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-lg"">{author_name}</p>
DateMetadata:
<p class=""text-sm text-gray-600"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display author and date metadata in a compact and readable format, typically used in blog posts, articles, or news websites. The author's name and publication date should be displayed side by side, with the author's name in a slightly larger font size.
COMPONENTS:
- AuthorMetadata: A standalone component displaying the author's name.
- DateMetadata: A standalone component displaying the publication date.
- MetadataContainer: A container component that takes children, wrapping the author and date metadata components.
HTML:
<footer class=""flex justify-between mb-4""><MetadataContainer><AuthorMetadata/><DateMetadata/></MetadataContainer></footer>
COMPONENT HTML:
AuthorMetadata:
<span class=""text-lg"">{author_name}</span>
DateMetadata:
<span class=""text-gray-600"">{publication_date}</span>
MetadataContainer:
<div class=""flex items-center"">{children}</div>"
Social Media Profile Picture,"DESCRIPTION:
A circular profile picture with a username displayed below it, responsive and mobile-first.
COMPONENTS:
- UserProfilePic: (standalone): Displays a circular profile picture.
- UsernameText: (standalone): Displays the username as text.
HTML:
<div class=""flex flex-col items-center""><UserProfilePic/><UsernameText/></div>
COMPONENT HTML:
UserProfilePic:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-48 h-48 rounded-full""/>
UsernameText:
<p class=""text-lg font-bold"">{username}</p>"
Call to Action Button Text,"DESCRIPTION:
The UI should be a call-to-action (CTA) button with custom text, responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- ActionButton: (standalone)
HTML:
<button class=""ActionButton""/>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaButtonText}</button>"
Call to Action Button Text,"DESCRIPTION:
The UI should be a responsive, mobile-first Call to Action (CTA) button with a clear and concise text.
COMPONENTS:
- CallToActionButton: A standalone component representing the CTA button.
HTML:
<button class=""cta-button""><CallToActionButton/></button>
COMPONENT HTML:
CallToActionButton:
<span class=""text-sm font-bold text-white"">{cta_text}</span>"
Audio player,"DESCRIPTION:
The UI should be a responsive audio player with a simple and clean design. It should have a play/pause button, a progress bar, and a display for the current time and duration of the audio.
COMPONENTS:
- AudioPlayer: standalone, contains the entire audio player UI
- PlayPauseButton: standalone, a button to toggle play and pause
- ProgressBar: standalone, a progress bar to display the current progress of the audio
- TimeDisplay: standalone, displays the current time and duration of the audio
HTML:
<div class=""flex flex-col items-center w-full p-4 md:p-6 lg:p-8""><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<div class=""flex flex-col items-center w-full""><PlayPauseButton/><ProgressBar/><TimeDisplay/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_text}</button>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style={{width: playback_progress + '%'}}></div></div>
TimeDisplay:
<p class=""text-sm text-gray-600"">{current_time}/ {audio_duration}</p>"
Audio player,"DESCRIPTION:
A responsive audio player with play/pause button, progress bar, and controls for volume and playback speed.
COMPONENTS:
- AudioPlayer: standalone component
- PlayPauseButton: standalone component
- ProgressBar: standalone component
- VolumeControl: standalone component
- PlaybackSpeedControl: standalone component
HTML:
<div class=""flex flex-col items-center""><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<div class=""bg-white shadow-md rounded-lg p-4""><div class=""flex justify-between mb-4""><PlayPauseButton/><ProgressBar/></div><div class=""flex justify-between mb-4""><VolumeControl/><PlaybackSpeedControl/></div><audio src={audio_source}/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon}</button>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style={{ width: `${progress_percentage}%` }}/></div>
VolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"">{volume_icon} </button><input type=""range"" min=""0"" max=""100"" value={volume_level}/></div>
PlaybackSpeedControl:
<select class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><option value=""0.5"">0.5x</option><option value=""1"">1x</option><option value=""1.5"">1.5x</option><option value=""2"">2x</option></select>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Vertical column on the side of the page containing additional navigation or information,"DESCRIPTION:
The UI should feature a vertical column, typically placed on the left or right side of the page, which functions as a sidebar. This sidebar contains navigation links or additional information related to the main content, enhancing accessibility and ease of navigation within the site.
COMPONENTS:
- Sidebar: Standalone component
- NavigationLink: Component that takes children. It represents a single navigable link within the sidebar.
HTML:
<div class=""flex""><Sidebar/><main class=""flex-1""><!-- Main content goes here --><p>This is the main content area of the page.</p></main></div>
COMPONENT HTML:
Sidebar:
<aside class=""w-64 h-full bg-gray-200 p-4""><ul><li><NavigationLink>Home</NavigationLink></li><li><NavigationLink>About</NavigationLink></li><li><NavigationLink>Services</NavigationLink></li><li><NavigationLink>Contact</NavigationLink></li></ul></aside>
NavigationLink:
<a href=""{link_href}"" class=""block p-2 hover:bg-gray-300"">{children}</a>"
Breadcrumb Separator Style,"DESCRIPTION:
The UI should display a breadcrumb separator in a horizontal layout, with each separator element separated by a vertical line. The separators should be responsive, accessible, and mobile-first.
COMPONENTS:
- BreadcrumbSeparator: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex flex-wrap""><li><a href=""#"" class=""text-gray-600 transition duration-300"">Home</a></li><li><BreadcrumbSeparator/></li><li><a href=""#"" class=""text-gray-600 transition duration-300"">About</a></li><li><BreadcrumbSeparator/></li><li><a href=""#"" class=""text-gray-600 transition duration-300"">Contact</a></li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparator:
<span aria-hidden=""true"" class=""mx-2"">/</span>"
Date picker calendar,"DESCRIPTION:
The UI should be a calendar date picker that allows users to select a date. The calendar should be responsive, mobile-friendly, and accessible. It should display a month view with days of the week at the top and a navigation system to move between months.
COMPONENTS:
- DatePickerCalendar: standalone component that contains the entire calendar interface.
- MonthNavigation: standalone component that allows users to navigate between months.
HTML:
<div class=""max-w-md mx-auto p-4""><DatePickerCalendar/></div>
COMPONENT HTML:
DatePickerCalendar:
<div class=""flex flex-col""><MonthNavigation/><table class=""w-full""><thead><tr><th class=""px-4 py-2"">Sun</th><th class=""px-4 py-2"">Mon</th><th class=""px-4 py-2"">Tue</th><th class=""px-4 py-2"">Wed</th><th class=""px-4 py-2"">Thu</th><th class=""px-4 py-2"">Fri</th><th class=""px-4 py-2"">Sat</th></tr></thead><tbody>{day_cells} </tbody></table></div>
MonthNavigation:
<div class=""flex justify-between mb-4""><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300"">❮</button><span class=""px-4 py-2"">{month_name} {year}</span><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300"">❯</button></div>"
Project showcase display,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible grid of project cards, with each card displaying a project's title, description, and tags.
COMPONENTS:
- ProjectCard: A standalone component displaying a single project's information.
- ProjectGrid: A container component taking `ProjectCard` children, displaying them in a responsive grid.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Project Showcase</h2><ProjectGrid><ProjectCard/><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectGrid></div>
COMPONENT HTML:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{project_title}</h3><p	class=""text-gray-600"">{project_description}</p><ul class=""flex flex-wrap"">{tags.map((tag) =>( <li key={tag} class=""mr-2"">{tag}</li>))} </ul></div>
ProjectGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Faceted search results display,"DESCRIPTION:
The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results. The search results should be displayed in a list with each item showing the title, description, and any other relevant information.
COMPONENTS:
- FacetContainer: A standalone component that wraps the facets.
- FacetItem: A standalone component that displays a single item within a facet (e.g. ""$0-$50"", ""Nike"", etc.).
- SearchResult: A standalone component that displays a single search result.
- SearchResults: A component that takes children and displays the list of search results.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/4 xl:w-1/5 p-4""><FacetContainer/></div><div class=""w-full md:w-3/4 xl:w-4/5 p-4""><SearchResults><!-- search results will be rendered here --></SearchResults></div></div></div>
COMPONENT HTML:
FacetContainer:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold mb-4"">Filters</h2><!-- facets will be rendered here --></div>
FacetItem:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{facet_item_id}""/><label for=""{facet_item_id}"" class=""ml-2"">{facet_item_name}</label></li>
SearchResult:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h3 class=""text-lg"">{result_title}</h3><p class=""text-sm"">{result_description}</p><!-- other result details can be added here --></div>
SearchResults:
<ul class=""list-none mb-0"">{children}</ul>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Mission statement display,"DESCRIPTION:
A clean and simple section that prominently displays the mission statement of an organization, with a background image and a call-to-action button.
COMPONENTS:
- MissionStatementBackground: standalone
- MissionStatementContent: takes children
- CallToActionButton: standalone
HTML:
<section class=""relative h-screen""><MissionStatementBackground/><div class=""absolute inset-0 flex items-center justify-center""><MissionStatementContent><!-- mission statement content goes here --></MissionStatementContent><CallToActionButton/></div></section>
COMPONENT HTML:
MissionStatementBackground:
<div class=""absolute inset-0 bg-noise bg-cover""></div>
MissionStatementContent:
<div class=""max-w-md text-lg text-center leading-relaxed"">{children}</div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button>"
Terms and conditions checkbox,"DESCRIPTION:
A checkbox with a label that says ""I agree to the terms and conditions"" and a link to the terms and conditions page.
COMPONENTS:
- TermsAndConditionsCheckbox: standalone component that includes a checkbox and a label.
- TermsLink: standalone component that is a link to the terms and conditions page.
HTML:
<div class=""flex items-center""><TermsAndConditionsCheckbox/><TermsLink/></div>
COMPONENT HTML:
TermsAndConditionsCheckbox:
<input type=""checkbox"" id=""terms-and-conditions-checkbox"" class=""mr-2""/><label for=""terms-and-conditions-checkbox"" class=""text-sm"">I agree to the {terms_and_conditions_text}</label>
TermsLink:
<a href=""{terms_and_conditions_url}"" class=""text-sm text-blue-600 hover:text-blue-900"">Read terms and conditions</a>"
Product Price Discount,"DESCRIPTION:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
COMPONENTS:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
HTML:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
COMPONENT HTML:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
User Profile and Reputation System,"DESCRIPTION:
The UI should display a user's profile information, including their username, profile picture, reputation score, and badges. The reputation score should be prominently displayed, and the badges should be displayed in a grid or list.
COMPONENTS:
- UserProfileHeader: Standalone component that displays the user's profile picture and username.
- ReputationScore: Standalone component that displays the user's reputation score.
- BadgeGrid: Component that takes children, which are `Badge` components.
- Badge: Standalone component that displays a single badge.
HTML:
<div class=""flex justify-center""><UserProfileHeader/><div class=""ml-4""><ReputationScore/><BadgeGrid><Badge/><Badge/><!-- More badges here --></BadgeGrid></div></div>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><img src=""{profile_picture_url}"" alt=""Profile Picture"" class=""w-12 h-12 rounded-full""/><h2 class=""ml-2 text-lg"">{username}</h2></div>
ReputationScore:
<h3 class=""text-lg font-bold"">{reputation_score} Reputation</h3>
BadgeGrid:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
Badge:
<li class=""mr-2 mb-2""><img src=""{badge_image_url}"" alt=""Badge"" class=""w-8 h-8""/><span class=""text-sm"">{badge_name}</span></li>"
Featured Video Play Icon,"DESCRIPTION:
The UI should display a play icon overlaid on a featured video thumbnail. The play icon should be a white triangle with a rounded rectangle background. The icon should be responsive, accessible, and mobile-first.
COMPONENTS:
- FeaturedVideoPlayIcon: (standalone): displays the play icon overlaid on a featured video thumbnail.
HTML:
<div class=""w-full h-full relative""><img src=""{thumbnail_url}"" alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/><FeaturedVideoPlayIcon/></div>
COMPONENT HTML:
FeaturedVideoPlayIcon:
<div class=""absolute inset-0 flex justify-center items-center bg-gray-800 rounded-lg p-4""><div class=""w-10 h-10 bg-white rounded-full flex justify-center items-center""><span class=""text-gray-800 text-3xl"">{<!-- play icon -->}</span></div></div>"
Location map with markers,"DESCRIPTION:
The UI should be a responsive map with markers indicating specific locations. The map should be zoomable and pannable, with a clear distinction between the map and the markers.
COMPONENTS:
- LocationMap: (standalone): The main map component that renders the map and markers.
- MapMarker: (takes children): An individual marker on the map, which can have a label or other details.
HTML:
<div class=""h-screen w-full overflow-hidden""><LocationMap/></div>
COMPONENT HTML:
LocationMap:
<div class=""h-full w-full overflow-hidden""><div class=""h-full w-full"" id=""map""><!-- map will be rendered here -->{markers} </div></div>
MapMarker:
<div class=""absolute"" style=""top: {marker_top}px; left: {marker_left}px;""><div class=""bg-red-500 h-4 w-4 rounded-full cursor-pointer""/>{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should display course recommendations in a card layout, with each card showing the course title, description, and rating. The cards should be arranged in a grid, with multiple cards per row.
COMPONENTS:
- CourseCard: A standalone component that displays a course's information, including title, description, and rating.
- CourseRecommendationsGrid: A component that takes children (multiple `CourseCard` components) and arranges them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold"">Course Recommendations</h1><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><CourseRecommendationsGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components as needed --></CourseRecommendationsGrid></div></div>
COMPONENT HTML:
CourseCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{course_title}</h2><p>{course_description}</p><p>Rating: {rating}/5</p></div>
CourseRecommendationsGrid:
<!-- Children will be placed here -->{children}"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should display a list of course recommendations with their titles, short descriptions, and ratings. The list should be responsive and accessible.
COMPONENTS:
- CourseRecommendationsList: Component that takes children (a list of `CourseRecommendationCard` components).
HTML:
<!-- The main container for the course recommendations list --><div class=""max-w-3xl mx-auto p-4""><h2>Course Recommendations</h2><!-- The list of course recommendations --><CourseRecommendationsList>{/*
This will be replaced with multiple CourseRecommendationCard components
*/}
</CourseRecommendationsList></div>
COMPONENT HTML:
CourseRecommendationsList:
<!-- The list of course recommendations --><ul class=""list-none mb-0"">{children}</ul>"
Footer Newsletter Label,"DESCRIPTION:
The UI should be a responsive footer newsletter label that is easily readable on various devices. It should have a clean and simple design, with a subtle background color and a prominent call-to-action (CTA) button. The label should be accessible and SEO-friendly.
COMPONENTS:
- FooterNewsletterLabel: standalone
- NewsletterInput: standalone
- CTAButton: standalone
HTML:
<footer class=""bg-gray-200 py-12""><div class=""max-w-md mx-auto px-4""><FooterNewsletterLabel/><form><NewsletterInput/><CTAButton/></form></div></footer>
COMPONENT HTML:
FooterNewsletterLabel:
<p class=""text-lg text-gray-600"">{newsletter_label_text}</p>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
CTAButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Modals,"DESCRIPTION:
- The UI will consist of a modal (popup dialog) that appears over the main content of the page. The modal will contain some text, a title, and two buttons: one to close the modal and another optional button that can perform another action (like ""Learn more"" or ""Confirm"").
   - The modal should have a background overlay to slightly obscure the main page content and bring focus to the modal dialog.
   - The modal should be centered on the screen and styled to be visually distinct from the rest of the page.
COMPONENTS:
- Overlay: Standalone component that renders a semi-transparent background overlay.
- Modal: Takes children. This component represents the modal dialog which contains the content and action buttons.
- ModalHeader: Standalone component for the heading section of the modal.
- ModalBody: Takes children. Used for the content area of the modal.
- ModalFooter: Takes children. Contains the action buttons of the modal.
- Button: Standalone component for the buttons.
HTML:
<div><Overlay/><Modal><ModalHeader/><ModalBody><p>{modalContent}</p></ModalBody><ModalFooter><Button/><Button/></ModalFooter></Modal></div>
COMPONENT HTML:
Overlay:
<!-- This component creates a full-screen overlay --><div class=""fixed inset-0 bg-black bg-opacity-50 z-40""></div>
Modal:
<!-- This is the main container for the modal which includes the content placed within --><div class=""fixed inset-0 z-50 flex justify-center items-center p-4""><div class=""bg-white rounded-lg shadow-lg max-w-lg w-full p-6"">{children} </div></div>
ModalHeader:
<!-- Modal header contains the title --><div class=""border-b pb-4""><h2 class=""text-lg font-semibold"">{modalTitle}</h2></div>
ModalBody:
<!-- Modal body will house the main content --><div class=""py-4"">{children}</div>
ModalFooter:
<!-- Footer area for placing action buttons --><div class=""flex justify-end space-x-2 pt-4"">{children}</div>
Button:
<!-- Reusable button component --><button class=""px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"">{buttonText}</button>"
Breadcrumb Home Icon,"DESCRIPTION:
The UI should display a breadcrumb navigation with a home icon at the beginning. The home icon should be a clickable link.
COMPONENTS:
- HomeIcon: A standalone component that displays a clickable home icon.
- Breadcrumb: A component that takes children and displays them as a breadcrumb navigation.
HTML:
<nav aria-label=""Breadcrumb"" class=""flex flex-wrap""><HomeIcon/><Breadcrumb><!-- breadcrumb items will be inserted here --></Breadcrumb></nav>
COMPONENT HTML:
HomeIcon:
<a href=""/"" class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><i class=""fas fa-home""></i></a>
Breadcrumb:
<ul class=""flex flex-wrap"">{children}</ul>"
Breadcrumb Home Icon,"DESCRIPTION:
The UI should be a breadcrumb navigation with a home icon. The home icon should be a clickable element that takes the user back to the homepage. The breadcrumb should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- BreadcrumbHomeIcon: A standalone component representing the home icon in the breadcrumb navigation.
- BreadcrumbItem: A component that takes children, representing a single item in the breadcrumb navigation.
HTML:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap -mb-4""><li><BreadcrumbHomeIcon/><BreadcrumbItem>Home</BreadcrumbItem></li><!-- more breadcrumb items here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeIcon:
<a href=""/"" aria-label=""Go to homepage""><i class=""fas fa-home"" aria-hidden=""true""></i></a>
BreadcrumbItem:
<li class=""mr-2"">{children} <span aria-hidden=""true"" class=""mx-1"">›</span></li>"
Toast/Notification Messages,"DESCRIPTION:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
COMPONENTS:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
HTML:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
COMPONENT HTML:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
Toast/Notification Messages,"DESCRIPTION:
A toast/notification message is a small, non-obtrusive message that appears at the top or bottom of the screen, informing the user of a particular event or action. It usually disappears after a few seconds.
COMPONENTS:
- NotificationToast: a standalone component that displays a single notification message.
HTML:
<div class=""fixed bottom-0 left-0 p-4""><NotificationToast/></div>
COMPONENT HTML:
NotificationToast:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4""><p class=""uppercase text-orange-500"">{notificationType}</p><p>{notificationMessage}</p></div>"
Personal quote or mantra with fade-in animation,"DESCRIPTION:
The UI should display a personal quote or mantra in a prominent and visually appealing way. The quote should fade in when the component is rendered.
COMPONENTS:
- QuoteComponent: (standalone) - displays the quote with a fade-in animation.
HTML:
<div class=""container mx-auto p-4 max-w-md""><QuoteComponent/></div>
COMPONENT HTML:
QuoteComponent:
<p class=""text-2xl font-bold animate-fade-in"">{quote_text}</p>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
Modal window with project details and images,"DESCRIPTION:
The UI should be a modal window that appears when a user clicks on a project. The modal window should have a title with the project name, a brief description of the project, and a grid of images related to the project. The modal window should be responsive and accessible.
COMPONENTS:
- ProjectModal: The main modal window component. Takes children.
- ProjectTitle: Displays the title of the project. Standalone.
- ProjectDescription: Displays a brief description of the project. Standalone.
- ProjectImageGrid: A grid of images related to the project. Takes children.
- ProjectImage: A single image related to the project. Standalone.
HTML:
<div class=""fixed top-0 left-0 w-full h-full bg-black bg-opacity-50""><div class=""flex justify-center h-full""><ProjectModal><ProjectTitle/><ProjectDescription/><ProjectImageGrid><ProjectImage/><ProjectImage/><!-- add more ProjectImage components here --></ProjectImageGrid></ProjectModal></div></div>
COMPONENT HTML:
ProjectModal:
<div class=""bg-white rounded-lg p-4"">{children}</div>
ProjectTitle:
<h2 class=""text-2xl font-bold"">{project_name}</h2>
ProjectDescription:
<p>{project_description}</p>
ProjectImageGrid:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
ProjectImage:
<li class=""w-1/2 p-2""><img src={image_url} alt={image_alt} class=""w-full h-full object-cover rounded-lg""/></li>"
Product Price Tag,"DESCRIPTION:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
COMPONENTS:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
HTML:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
COMPONENT HTML:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}${price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Project Favorites and Bookmarking,"DESCRIPTION:
The UI should display a list of favorite items with a bookmarking system. Each item should have a title, description, and an option to bookmark or unbookmark. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- BookmarkButton: Standalone component that handles bookmarking and unbookmarking.
HTML:
<main class=""max-w-md mx-auto p-4 pt-6 pb-8""><h1 class=""text-2xl font-bold mb-4"">Favorites</h1><ul class=""list-none mb-4"">{favorites_list}
</ul></main>
COMPONENT HTML:
BookmarkButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_bookmarked ? ""Unbookmark"" : ""Bookmark""}</button>"
Email Newsletter Signups,"DESCRIPTION:
The UI should be a simple, responsive form that allows users to input their email address and subscribe to a newsletter. The form should be easily accessible on various devices and screen readers.
COMPONENTS:
- NewsletterSignupForm: A standalone component that contains the email input field and submit button.
- EmailInput: A standalone component that represents the email input field.
- SubmitButton: A standalone component that represents the submit button.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md""><h2 class=""text-lg font-bold mb-4"">Stay updated with our newsletter!</h2><NewsletterSignupForm/></section>
COMPONENT HTML:
NewsletterSignupForm:
<form class=""flex flex-wrap -mx-3""><EmailInput/><SubmitButton/></form>
EmailInput:
<input type=""email"" class=""w-full px-4 py-2 text-lg"" placeholder=""Your email address"" aria-label=""Email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Image displayed within the flow of text or content,"DESCRIPTION:
The UI should display an image within the flow of text or content, likely in a blog post or article. The image should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- InlineImage: A standalone component that displays an image within the flow of text or content.
HTML:
<div class=""max-w-md mx-auto""><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p><InlineImage/><p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p></div>
COMPONENT HTML:
InlineImage:
<img src={image_url} alt={image_alt_text} class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto mb-4""/>"
Availability and Pricing Calendars,"DESCRIPTION:
The UI should display a calendar for availability and pricing, showing the dates and corresponding prices. It should have a title, a month selector, and a grid of days with prices.
COMPONENTS:
- CalendarTitle: Standalone component to display the title of the calendar.
- MonthSelector: Standalone component to select the month.
- AvailabilityGrid: Component that takes children to render the grid of days with prices.
- DayCell: Standalone component to render a single day with its price.
HTML:
<div class=""flex flex-col""><CalendarTitle/><MonthSelector/><AvailabilityGrid><!-- grid of days with prices --><DayCell/><DayCell/><DayCell/><!-- repeat for each day of the month --></AvailabilityGrid></div>
COMPONENT HTML:
CalendarTitle:
<h2 class=""text-2xl font-bold"">{calendar_title}</h2>
MonthSelector:
<select class=""py-2 pl-2 pr-4 text-gray-700""><option value=""January"">{month_name}</option><!-- repeat for each month --></select>
AvailabilityGrid:
<table class=""w-full""><tbody><tr>{children} </tr></tbody></table>
DayCell:
<td class=""px-2 py-1 border border-gray-200""><span class=""text-sm"">{day_number}</span><span class=""text-xs"">{day_price}</span></td>"
Social Media Feed,"DESCRIPTION:
The social media feed should be a scrollable list of posts, each displaying the user's profile picture, name, post content, and any accompanying media (e.g. images, videos). The feed should be responsive, with posts stacking vertically on smaller screens and displaying in a masonry layout on larger screens.
COMPONENTS:
- SocialMediaPost: a standalone component representing a single post in the feed
- UserProfilePicture: a standalone component displaying a user's profile picture
- PostContent: a standalone component displaying the text content of a post
- MediaThumbnail: a standalone component displaying a thumbnail for an image or video
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Social Media Feed</h2><div class=""flex flex-wrap -mx-2""><SocialMediaPost/><SocialMediaPost/><!-- add more posts here --></div></div>
COMPONENT HTML:
SocialMediaPost:
<div class=""w-full md:w-1/2 xl:w-1/3 px-2 mb-4""><UserProfilePicture/><div class=""px-4 py-2""><h3 class=""text-lg font-bold"">{username}</h3><PostContent/><MediaThumbnail/></div></div>
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""w-12 h-12 rounded-full mr-2""/>
PostContent:
<p>{post_content}</p>
MediaThumbnail:
<img src=""{media_thumbnail_url}"" alt=""Thumbnail for {media_type}"" class=""w-full h-48 object-cover rounded""/>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Patterns (separate),"DESCRIPTION:
- The UI will display a collection of patterns, each presented in a separate card-like component. Each pattern card will show a name, a short description, and some distinguishing graphic representation styled minimally with TailwindCSS.
COMPONENTS:
- PatternCard: (Standalone)**: Displays individual pattern information including a title, description, and a styled placeholder for a graphic.
- PatternsContainer: (Takes children)**: A container that holds all the PatternCard components, ensuring they are laid out in a responsive grid.
HTML:
<main><PatternsContainer><PatternCard/><PatternCard/><PatternCard/><!-- Additional PatternCard components can be added here --></PatternsContainer></main>
COMPONENT HTML:
PatternCard:
<div class=""max-w-sm rounded overflow-hidden shadow-lg p-4 m-2 bg-white""><div class=""px-6 py-4""><div class=""font-bold text-xl mb-2"">{patternTitle}</div><p class=""text-gray-700 text-base"">{patternDescription}</p></div><div class=""px-6 pt-4 pb-2""><div class=""h-32 w-full bg-gray-200""></div><!-- Placeholder for pattern graphic representation --></div></div>
PatternsContainer:
<div class=""container mx-auto px-4 sm:px-6 lg:px-8""><div class=""flex flex-wrap justify-center"">{children} </div></div>"
"Title displayed at the top of the browser window or tab, summarizing the content of the page","DESCRIPTION:
The UI should display a title at the top of the browser window or tab, summarizing the content of the page.
COMPONENTS:
- PageTitle: Standalone component. Displays the title of the page.
HTML:
<head><PageTitle/></head>
COMPONENT HTML:
PageTitle:
<title>{page_title}</title>"
Blog Post Comment Form Label,"DESCRIPTION:
A simple form label with a text input for commenting on a blog post. The label should be responsive, mobile-first, and accessible.
COMPONENTS:
- CommentFormLabel: A standalone component representing the label for the comment form.
- CommentInput: A standalone component representing the text input for the comment.
HTML:
<form><CommentFormLabel/><CommentInput/></form>
COMPONENT HTML:
CommentFormLabel:
<label class=""block text-sm font-medium text-gray-700 mb-2"" htmlFor=""comment"">Leave a comment:</label>
CommentInput:
<input class=""block w-full pl-10 text-sm text-gray-700"" type=""text"" id=""comment"" name=""comment""/>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that when clicked, prompts the user to confirm they want to log out. If confirmed, the logout action is performed.
COMPONENTS:
- LogoutButton: standalone, displays a button with a logout icon and text.
- ConfirmLogout: takes children, displays a confirmation prompt to the user with an OK and Cancel button.
HTML:
<div class=""flex justify-center mt-4""><LogoutButton/></div><!-- Confirmation prompt will be inserted here --><div id=""confirm-logout"" class=""hidden""><ConfirmLogout><p>Are you sure you want to log out?</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">OK</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ml-2"">Cancel</button></div></ConfirmLogout></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-sign-out-alt mr-2""/>Log Out</button>
ConfirmLogout:
<div class=""bg-white p-4 rounded shadow-md"">{children}</div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Social Sharing Network,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a feed of social media posts with user avatars, usernames, post content, and social media icons for sharing and liking. The UI should be accessible and SEO-friendly.
COMPONENTS:
- FeedItem: a standalone component that represents a single social media post.
- UserProfile: a standalone component that displays a user's avatar, username, and social media icons.
- PostContent: a standalone component that displays the content of a social media post.
- SocialMediaIcons: a standalone component that displays social media icons for sharing and liking.
- FeedList: a component that takes children and displays a list of `FeedItem` components.
HTML:
<div class=""container max-w-md mx-auto p-4 pt-6""><h1 class=""text-2xl font-bold mb-4"">Social Feed</h1><FeedList><FeedItem/><FeedItem/><!-- more FeedItem components here --></FeedList></div>
COMPONENT HTML:
FeedItem:
<div class=""flex flex-wrap mb-4""><UserProfile/><PostContent/><SocialMediaIcons/></div>
UserProfile:
<div class=""w-12 h-12 flex-shrink-0 mr-3""><img src=""{user_avatar_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full""/><span class=""text-lg"">{username}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
SocialMediaIcons:
<div class=""flex items-center justify-between""><a href=""{facebook_url}"" class=""text-lg mr-2""><i class=""fab fa-facebook-f""></i></a><a href=""{twitter_url}"" class=""text-lg mx-2""><i class=""fab fa-twitter""></i></a><a href=""{instagram_url}"" class=""text-lg ml-2""><i class=""fab fa-instagram""></i></a></div>
FeedList:
<ul class=""list-none p-0 mb-0"">{children}</ul>"
Barcode scanner input,"DESCRIPTION:
The UI should be a simple input field with a barcode scanner button next to it. The input field should be responsive and adapt to different screen sizes. The barcode scanner button should be easily clickable on mobile devices.
COMPONENTS:
- BarcodeScannerInput: A standalone component that wraps an input field and a barcode scanner button.
- BarcodeScannerButton: A standalone component that represents the barcode scanner button.
HTML:
<div class=""flex flex-col items-center w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4 mx-auto""><BarcodeScannerInput/></div>
COMPONENT HTML:
BarcodeScannerInput:
<div class=""flex flex-row items-center p-2""><input type=""text"" id=""barcode-input"" class=""w-full p-2 text-lg"" placeholder=""Scan or enter barcode""/><BarcodeScannerButton/></div>
BarcodeScannerButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Scan</button>"
Barcode scanner input,"DESCRIPTION:
The UI should resemble a simple barcode scanner input field with a placeholder text and a submit button. The input field should be responsive and mobile-friendly.
COMPONENTS:
- BarcodeInput: Standalone component that renders an input field with a placeholder text.
- SubmitButton: Standalone component that renders a submit button.
HTML:
<div class=""flex flex-col items-center justify-center h-screen""><BarcodeInput/><SubmitButton/></div>
COMPONENT HTML:
BarcodeInput:
<input type=""text"" placeholder=""Scan barcode"" class=""w-full p-2 pl-10 text-sm text-gray-700"" id={input_id}/>
SubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Scan</button>"
Badges,"DESCRIPTION:
The UI should consist of a set of badges. Each badge will have text inside that represents a status, category, or other relevant information. The badges should have a visually appealing design with rounded corners and a solid background color that differentiates them from one another.
COMPONENTS:
- Badge: (Standalone)**: A small, pill-shaped component that displays text within a colored background. It is typically used to indicate status, category, or to showcase small pieces of information like tags.
HTML:
<div class=""flex flex-wrap gap-2""><Badge/><Badge/><Badge/></div>
COMPONENT HTML:
Badge:
<span class=""text-sm font-medium px-3 py-1 bg-blue-500 text-white rounded-full"">{badge_text} </span>"
Navigation menu displayed in a vertical column alongside the main content,"DESCRIPTION:
The UI should have a navigation menu on the left side of the page, displayed in a vertical column alongside the main content. The navigation menu should be responsive, taking up the full height of the page on smaller screens and moving to a sidebar on larger screens.
COMPONENTS:
- NavigationBar: (standalone): The navigation menu component that contains the navigation links.
- MainContent: (takes children): The main content component that contains the page's main content.
HTML:
<div class=""flex h-screen""><NavigationBar/><MainContent><!-- main content goes here --></MainContent></div>
COMPONENT HTML:
NavigationBar:
<nav class=""w-48 xl:w-64 py-4 xl:py-8 bg-gray-100 xl:bg-white xl:shadow-md""><ul class=""list-none m-0 p-0"">{navLinks} </ul></nav>
MainContent:
<div class=""flex-1 p-4 xl:p-8"">{children}</div>"
Navigation menu displayed in a vertical column alongside the main content,"DESCRIPTION:
The UI should display a navigation menu in a vertical column alongside the main content. The navigation menu should be responsive, and the layout should adapt to different screen sizes.
COMPONENTS:
- SideNav: A standalone component that contains the navigation menu items.
- NavItem: A component that takes children (the link text) and represents a single navigation menu item.
- MainContent: A standalone component that contains the main content of the page.
HTML:
<div class=""flex h-screen""><SideNav/><MainContent/></div>
COMPONENT HTML:
SideNav:
<nav class=""w-64 bg-gray-100 p-4""><NavItem>Menu Item 1</NavItem><NavItem>Menu Item 2</NavItem><NavItem>Menu Item 3</NavItem><!-- Add more NavItems here --></nav>
NavItem:
<a href=""{nav_item_link}"" class=""block p-2 hover:bg-gray-200"">{children}</a>
MainContent:
<div class=""flex-1 p-4""><!-- Main content goes here -->{main_content_text}</div>"
Related Articles/Recommended Content,"DESCRIPTION:
The UI should be a section that displays a list of related articles or recommended content. It should be a Card-based layout with a header, a list of article titles, and a ""More"" button to view more articles.
COMPONENTS:
- RelatedArticles: (takes children): The container component that holds the list of `ArticleCard`s and the ""More"" button.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Related Articles</h2><RelatedArticles><!-- Article cards will be inserted here --></RelatedArticles></section>
COMPONENT HTML:
RelatedArticles:
<div class=""flex flex-wrap -mx-4"">{children} <button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">More</button></div>"
Archives: List of past articles by date,"DESCRIPTION:
The UI should display a list of past articles, grouped by year and month, with each article title linked to its corresponding page. The list should be responsive, with a compact layout on mobile devices and a more spacious layout on larger screens.
COMPONENTS:
- ArchiveList: (standalone): The main component that renders the list of archives.
- ArchiveYear: (standalone): A component that renders a single year's worth of archives.
- ArchiveMonth: (standalone): A component that renders a single month's worth of archives within an `ArchiveYear`.
- ArchiveArticle: (standalone): A component that renders a single article within an `ArchiveMonth`.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Archives</h1><ArchiveList/></div>
COMPONENT HTML:
ArchiveList:
<ul class=""list-none mb-4"">{yearList}</ul>
ArchiveYear:
<li class=""py-2 border-b border-gray-200""><h2 class=""text-lg font-bold"">{year}</h2><ul class=""list-none mb-4"">{monthList} </ul></li>
ArchiveMonth:
<li class=""py-2""><h3 class=""text-md font-bold"">{monthName} {year}</h3><ul class=""list-none mb-4"">{articleList} </ul></li>
ArchiveArticle:
<li class=""py-2""><a href=""{articleUrl}"" class=""text-blue-600 hover:text-blue-900"">{articleTitle} </a><p class=""text-gray-600"">{articleDate}</p></li>"
Telephone/Phone Number Inputs,"DESCRIPTION:
A responsive, mobile-first, accessible, and SEO-friendly phone number input field with a label and optional error message.
COMPONENTS:
- PhoneNumberInput: A standalone component that renders a phone number input field with a label.
- InputError: A standalone component that renders an error message below the input field.
HTML:
<div class=""flex flex-col mb-4""><PhoneNumberInput/><InputError/></div>
COMPONENT HTML:
PhoneNumberInput:
<label class=""block text-sm mb-1"">Phone Number <input type=""tel"" class=""block w-full pl-10 text-sm text-gray-700"" placeholder=""(___) ___-____""/></label>
InputError:
<p class=""text-sm text-red-600"">{error_message}</p>"
Price and availability information,"DESCRIPTION:
The UI should display price and availability information in a clean and easy-to-read format. The price should be prominent, and the availability information should be displayed below it.
COMPONENTS:
- PriceInfo: Standalone component to display the price information.
- AvailabilityInfo: Standalone component to display the availability information.
HTML:
<div class=""flex flex-col gap-2""><PriceInfo/><AvailabilityInfo/></div>
COMPONENT HTML:
PriceInfo:
<p class=""text-lg font-bold"">{price_amount} {currency}</p>
AvailabilityInfo:
<p>Availability: {availability_status}</p><!-- availability_status can be ""In Stock"", ""Out of Stock"", etc. --><p>Ships in {shipping_time} from {warehouse_location}</p>"
Quiz question display,"DESCRIPTION:
The UI should display a quiz question with a heading, a question text, and options to choose from. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizQuestionHeading: A standalone component that displays the question heading.
- QuestionText: A standalone component that displays the question text.
- OptionList: A component that takes children (options) and displays them as a list.
- Option: A standalone component that displays a single option.
HTML:
<div class=""max-w-md mx-auto p-4""><QuizQuestionHeading/><QuestionText/><OptionList><Option/><Option/><!-- add more options here --></OptionList></div>
COMPONENT HTML:
QuizQuestionHeading:
<h2 class=""text-2xl font-bold mb-2"">{question_heading}</h2>
QuestionText:
<p class=""text-lg"">{question_text}</p>
OptionList:
<ul class=""list-none mb-0"">{children}</ul>
Option:
<li class=""mb-2""><input type=""radio"" id=""{option_id}"" name=""options""/><label for=""{option_id}"" class=""ml-2"">{option_text}</label></li>"
Quiz question display,"DESCRIPTION:
The UI should display a quiz question with options to choose from. The question should be prominently displayed, and the options should be listed below it. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- QuizQuestion: (standalone): Displays the quiz question.
- OptionList: (takes children): Lists the options for the quiz question.
- Option: (standalone): Displays a single option.
HTML:
<div class=""md:w-1/2 xl:w-1/3 mx-auto p-4""><QuizQuestion/><OptionList><Option/><Option/><Option/><!-- Add more options here --></OptionList></div>
COMPONENT HTML:
QuizQuestion:
<h2 class=""text-2xl font-bold"">{question_text}</h2>
OptionList:
<ul class=""list-none mb-4"">{children}</ul>
Option:
<li class=""mb-2""><input type=""radio"" id=""{option_id}"" name=""option""/><label for=""{option_id}"" class=""ml-2"">{option_text}</label></li>"
Quiz question display,"DESCRIPTION:
The UI should display a single quiz question with a question text, four possible answers, and an optional image. The question and answers should be clearly readable, and the image should be displayed to the side of the question text.
COMPONENTS:
- QuizQuestion: The main component that displays a single quiz question. It takes children.
- QuizQuestionText: Displays the text of the quiz question. Standalone.
- QuizAnswerOption: Displays a single answer option. Standalone.
- QuizImage: Displays an optional image related to the quiz question. Standalone.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 md:pt-12""><QuizQuestion><div class=""flex flex-wrap -mx-4 mb-4""><QuizImage/><div class=""w-full md:w-2/3 px-4""><QuizQuestionText/></div></div><ul class=""list-none mb-4""><li><QuizAnswerOption/></li><li><QuizAnswerOption/></li><li><QuizAnswerOption/></li><li><QuizAnswerOption/></li></ul></QuizQuestion></div>
COMPONENT HTML:
QuizQuestion:
<div class=""bg-white shadow-md rounded px-4 py-6"">{children}</div>
QuizQuestionText:
<h2 class=""text-2xl mb-4"">{question_text}</h2>
QuizAnswerOption:
<li class=""mb-2""><input type=""radio"" name=""answer"" id=""{answer_id}"" class=""mr-2""/><label htmlFor=""{answer_id}"" class=""text-lg"">{answer_text}</label></li>
QuizImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-1/2 md:w-1/3 mx-auto mb-4""/>"
Quiz question display,"DESCRIPTION:
The UI should display a quiz question with options to choose from. It should be responsive, mobile-first, and accessible. The question and options should be clearly readable, with sufficient spacing and contrast.
COMPONENTS:
- QuizQuestion: standalone, displays the quiz question
- OptionButton: takes children, displays an option with a radio button
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 bg-white rounded shadow-md""><QuizQuestion/><ul class=""list-none mb-4""><li><OptionButton>Option 1</OptionButton></li><li><OptionButton>Option 2</OptionButton></li><li><OptionButton>Option 3</OptionButton></li><li><OptionButton>Option 4</OptionButton></li></ul></div>
COMPONENT HTML:
QuizQuestion:
<h2 class=""text-lg font-bold"">{question_text}</h2>
OptionButton:
<label class=""block mb-2""><input type=""radio"" name=""option"" value=""{option_value}""/><span class=""ml-2"">{children}</span></label>"
Data Importer: Upload bulk data,"DESCRIPTION:
The UI should be a simple and clean interface that allows users to upload bulk data. It should consist of a file input field, a submit button, and a section to display the upload progress.
COMPONENTS:
- FileInfoCard: A standalone component that displays information about the uploaded file, such as the file name and size.
- UploadProgressBar: A standalone component that displays the upload progress.
- BulkDataUploader: A component that takes children, which wraps the file input field and submit button.
- UploadStatusMessage: A standalone component that displays a success or error message after the upload is complete.
HTML:
<div class=""container max-w-md mx-auto p-4 pt-6""><BulkDataUploader><input type=""file"" id=""file"" class=""block w-full text-sm text-gray-700""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload</button></BulkDataUploader><FileInfoCard/><UploadProgressBar/><UploadStatusMessage/></div>
COMPONENT HTML:
FileInfoCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h5 class=""text-lg font-bold"">{fileName}</h5><p>File size: {fileSize} KB</p></div>
UploadProgressBar:
<div class=""bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style={{ width: `${progressPercentage}%` }}></div></div>
BulkDataUploader:
<div class=""flex flex-col items-center"">{children}</div>
UploadStatusMessage:
<div class=""bg-{statusColor}-100 border-{statusColor}-500 text-{statusColor}-700 px-4 py-2 rounded"">{statusMessage}</div>"
Data Importer: Upload bulk data,"DESCRIPTION:
The UI should be a simple, responsive page with a header, a form to upload a file, and a button to submit the file. The page should be accessible and mobile-friendly.
COMPONENTS:
- DataImporterHeader: Standalone component to display the page header.
- FileUploadForm: Takes children. A form component to upload a file.
- SubmitButton: Standalone component to submit the file.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><DataImporterHeader/><FileUploadForm><input type=""file"" id=""file"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer focus:outline-none""/><label for=""file"" class=""sr-only"">Select file</label><SubmitButton/></FileUploadForm><div class=""text-gray-500 text-sm"">{import_result}</div></div>
COMPONENT HTML:
DataImporterHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold mb-2"">Data Importer</h1><p class=""text-gray-500 text-sm"">Upload bulk data</p></header>
FileUploadForm:
<form class=""flex flex-col gap-4 mb-4"">{children}</form>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload</button>"
Shipping and delivery options,"DESCRIPTION:
The UI should display a list of shipping and delivery options with their respective details, such as names, prices, and estimated delivery times. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.
COMPONENTS:
- ShippingOptionList: a component that takes children, which is a list of `ShippingOptionCard` components.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionList><!-- shipping options will be rendered here --></ShippingOptionList></div>
COMPONENT HTML:
ShippingOptionList:
<ul class=""list-none mb-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Chart Builder: Visualize data trends,"DESCRIPTION:
The UI should be a responsive, mobile-first chart builder that allows users to visualize data trends. It should have a simple and clean design, with a prominent chart area and accessible interactive elements.
COMPONENTS:
- ChartHeader: A standalone component that displays the chart title and a dropdown menu for selecting the chart type.
- ChartCanvas: A standalone component that renders the chart using a third-party library (not included in this response).
- DataSelector: A component that takes children and allows users to select the data to display in the chart.
- AxisLabels: A standalone component that displays the axis labels for the chart.
- Legend: A standalone component that displays the legend for the chart.
HTML:
<div class=""flex flex-col h-screen overflow-hidden""><ChartHeader/><div class=""flex flex-grow overflow-hidden""><DataSelector><!-- data selector options will be rendered here --></DataSelector><div class=""flex-grow""><ChartCanvas/><AxisLabels/><Legend/></div></div></div>
COMPONENT HTML:
ChartHeader:
<header class=""bg-white py-4 shadow-md""><h2 class=""text-lg"">{chart_title}</h2><div class=""relative""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Chart Type</button><ul class=""absolute bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">Line Chart</a></li><li><a href=""#"" class=""block py-2 px-4"">Bar Chart</a></li><!-- more chart types --></ul></div></header>
ChartCanvas:
<div class=""flex-grow h-full""><!-- chart will be rendered here --></div>
DataSelector:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Select Data</h3><ul class=""list-none mb-4"">{children} </ul></div>
AxisLabels:
<div class=""flex justify-between mb-4""><p class=""text-sm"">{x_axis_label}</p><p class=""text-sm"">{y_axis_label}</p></div>
Legend:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Legend</h3><ul class=""list-none mb-4""><!-- legend items will be rendered here --></ul></div>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button. The topic and description should be clearly readable, and the edit button should be prominent and accessible.
COMPONENTS:
- ChannelTopic: A standalone component that displays the channel topic.
- ChannelDescription: A standalone component that displays the channel description.
- EditButton: A standalone component that displays an edit button.
HTML:
<div class=""flex flex-col gap-4 md:flex-row md:items-center""><div class=""flex-1""><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-sm"">{channel_description}</p>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button.
COMPONENTS:
- ChannelTopic: standalone component to display the channel topic
- ChannelDescription: standalone component to display the channel description
- EditButton: standalone component for the edit button
HTML:
<div class=""flex flex-col gap-2""><ChannelTopic/><ChannelDescription/><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<p class=""text-lg font-bold"">{channel_topic}</p>
ChannelDescription:
<p class=""text-sm"">{channel_description}</p>
EditButton:
<button class=""px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded"">Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button. The edit button should be aligned to the right side of the container. On smaller screens, the edit button should be aligned below the channel topic.
COMPONENTS:
- ChannelTopic: standalone - displays the channel topic
- ChannelDescription: standalone - displays the channel description
- EditButton: standalone - displays an edit button
- ChannelInfo: takes children - wraps the channel topic, description, and edit button
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><ChannelInfo><ChannelTopic/><ChannelDescription/><EditButton/></ChannelInfo></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>
ChannelInfo:
<div class=""flex flex-wrap justify-between"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Sharrre and Social Sharing,"DESCRIPTION:
The UI should display a set of social media icons with their respective share buttons. The icons should be evenly spaced and centered horizontally. On mobile devices, the icons should stack vertically.
COMPONENTS:
- SocialMediaIcon: (standalone) - An individual social media icon with a share button.
- SocialSharing: (takes children) - The container for the social media icons.
HTML:
<div class=""container mx-auto p-4""><SocialSharing><SocialMediaIcon/><SocialMediaIcon/><SocialMediaIcon/></SocialSharing></div>
COMPONENT HTML:
SocialMediaIcon:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-block p-2""><i class=""fab fa-{social_media_icon_name}"" aria-hidden=""true""/><span class=""sr-only"">{social_media_name}</span></a>
SocialSharing:
<div class=""flex flex-wrap justify-center md:flex-nowrap"">{children}</div>"
Featured Posts: Showcase of top articles,"DESCRIPTION:
The UI should display a showcase of top articles, featuring a title, image, and short description for each article. The showcase should be responsive, with a maximum of 3 articles per row on desktop and 1 article per row on mobile.
COMPONENTS:
- FeaturedPostCard: A standalone component that displays a single featured post.
- FeaturedPostsGrid: A component that takes children (`FeaturedPostCard` components) and displays them in a grid layout.
HTML:
<section class=""container mx-auto p-4""><h2>Featured Posts</h2><div class=""grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4""><FeaturedPostsGrid><FeaturedPostCard/><FeaturedPostCard/><FeaturedPostCard/><!-- Add more FeaturedPostCard components here --></FeaturedPostsGrid></div></section>
COMPONENT HTML:
FeaturedPostCard:
<article class=""bg-white rounded-lg shadow-md p-4""><img src=""{post_image}"" alt=""{post_title}"" class=""w-full h-48 object-cover rounded-t-lg""/><h3 class=""text-lg font-bold"">{post_title}</h3><p>{post_description}</p><a href=""{post_url}"" class=""text-blue-600 hover:text-blue-900"">Read more</a></article>
FeaturedPostsGrid:
<div class=""grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4"">{children}</div>"
Breadcrumbs for navigation,"DESCRIPTION:
The UI should display a sequence of breadcrumbs, each representing a navigation step, separated by a separator (e.g., `/`). The breadcrumbs should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- Breadcrumb: (standalone): Represents a single breadcrumb item.
- BreadcrumbList: (takes children): A container for a list of breadcrumbs.
HTML:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap mb-4 list-none""><BreadcrumbList><Breadcrumb/><!-- more breadcrumbs here --></BreadcrumbList></ol></nav>
COMPONENT HTML:
Breadcrumb:
<li class=""inline-flex items-center""><a href=""{breadcrumb_url}"" class=""text-gray-600 hover:text-gray-900"">{breadcrumb_label}</a><span class=""text-gray-600"">{separator}</span></li>
BreadcrumbList:
<ol class=""flex flex-wrap mb-4 list-none"">{children}</ol>"
Email subscription form,"DESCRIPTION:
The UI should be a simple email subscription form that is responsive, mobile-first, and accessible. It should have a input field for the user's email address, a subscribe button, and a success message that appears after submission.
COMPONENTS:
- EmailInput: A standalone component that renders an input field for the user's email address.
- SubscribeButton: A standalone component that renders a button to submit the form.
- SuccessMessage: A standalone component that renders a success message after form submission.
- SubscriptionForm: A component that takes children and renders the entire subscription form.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><SubscriptionForm><EmailInput/><SubscribeButton/><SuccessMessage/></SubscriptionForm></div>
COMPONENT HTML:
EmailInput:
<input type=""email"" id=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
SuccessMessage:
<p class=""text-green-600"">{success_message}</p>
SubscriptionForm:
<form class=""flex flex-col w-full max-w-md"">{children}</form>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Dynamic Product Feature List,"DESCRIPTION:
The UI should display a list of product features in a clean and organized manner, with each feature listed in a separate row. The list should be responsive and work well on mobile devices.
COMPONENTS:
- FeatureListItem: a standalone component that displays a single product feature.
- FeatureList: a component that takes children, wrapping the list of features.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><FeatureList><FeatureListItem/><FeatureListItem/><!-- Add more FeatureListItem components as needed --></FeatureList></div>
COMPONENT HTML:
FeatureListItem:
<div class=""flex items-center mb-4""><i class=""fas fa-check text-green-500 mr-2"" aria-hidden=""true""></i><p class=""text-gray-700"">{feature_name}</p><p class=""text-gray-500 text-sm"">{feature_description}</p></div>
FeatureList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Images/Zoom,"DESCRIPTION:
The UI should display a product image with a zoom feature, allowing users to hover or click on the image to view a larger, zoomed-in version of the product.
COMPONENTS:
- ProductImage: A standalone component that displays a product image with a zoom feature.
- ZoomedImage: A standalone component that displays a larger, zoomed-in version of the product image.
HTML:
<div class=""container mx-auto p-4 md:p-8""><ProductImage/></div>
COMPONENT HTML:
ProductImage:
<div class=""relative""><img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-full object-cover""/><div class=""absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 hover:bg-opacity-75 transition duration-300""><ZoomedImage/></div></div>
ZoomedImage:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-full object-contain""/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should display a profile picture and a header image, responsive and accessible on various devices.
COMPONENTS:
- ProfilePictureComponent: Standalone, displays a profile picture.
- HeaderImageComponent: Standalone, displays a header image.
- UserProfileHeader: Takes children, contains the profile picture and header image.
HTML:
<UserProfileHeader><ProfilePictureComponent/><HeaderImageComponent/></UserProfileHeader>
COMPONENT HTML:
ProfilePictureComponent:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>
HeaderImageComponent:
<img src={header_image_url} alt=""Header Image"" class=""w-full h-64 object-cover""/>
UserProfileHeader:
<header class=""flex flex-col items-center py-4"">{children}</header>"
Profile Picture and Header Image,"DESCRIPTION:
A profile page with a profile picture and a header image.
COMPONENTS:
- UserProfilePicture: Standalone component, displays a circular image.
- UserProfileHeader: Takes children, displays a header image with overlaid text.
HTML:
<div class=""flex flex-col w-full h-screen""><UserProfileHeader><h1>{username}</h1><p>{bio}</p></UserProfileHeader><UserProfilePicture/><!-- rest of the profile page content --></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-48 h-48 rounded-full""/>
UserProfileHeader:
<div class=""h-64 bg-cover bg-center"" style={{ backgroundImage: `url(${header_image_url})` }}><div class=""flex flex-col items-center justify-center h-full"">{children} </div></div>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Statistics Section: Showcase impressive metrics and data,"DESCRIPTION:
The Statistics Section should display impressive metrics and data in a visually appealing way, with clear headings, easy-to-read fonts, and sufficient whitespace to make the numbers stand out.
COMPONENTS:
- StatisticCard: a standalone component that displays a single metric, consisting of a title, value, and optional description.
- StatisticsSection: a component that takes children, wrapping multiple `StatisticCard`s in a container with a heading.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Key Statistics</h2><StatisticsSection><StatisticCard/><StatisticCard/><StatisticCard/></StatisticsSection></section>
COMPONENT HTML:
StatisticCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{statistic_title}</h3><p class=""text-3xl font-bold"">{statistic_value}</p><p class=""text-gray-600"">{statistic_description}</p></div>
StatisticsSection:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Typography/Font Styles,"DESCRIPTION:
The UI should display a selection of typography/font styles, showcasing different font sizes, weights, and styles. The layout should be clean, minimal, and responsive.
COMPONENTS:
- TypographySample: a standalone component that displays a single typography sample with a specific font style.
- TypographySection: a component that takes children, which is a collection of `TypographySample` components.
HTML:
<div class=""max-w-md mx-auto p-4""><TypographySection><TypographySample/><TypographySample/><TypographySample/><!-- Add more TypographySample components here --></TypographySection></div>
COMPONENT HTML:
TypographySample:
<p class=""text-{font_size} font-{font_weight} {font_style}"">{sample_text}</p>
TypographySection:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Upload/Progress Bars,"DESCRIPTION:
The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress bar.
- ProgressText: Standalone component that displays the progress text (e.g., ""35% complete"").
HTML:
<div class=""flex flex-col items-center py-4""><ProgressBar/><ProgressText/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 w-full rounded-md overflow-hidden""><div class=""bg-blue-500 h-4"" style={`width: ${progressPercentage}%`}></div></div>
ProgressText:
<p class=""text-lg font-bold"">{progressPercentage}% complete</p>"
Upload/Progress Bars,"DESCRIPTION:
A horizontal progress bar that fills up as the upload progresses, with a percentage indicator.
COMPONENTS:
- ProgressBar: a standalone component that displays the progress of the upload
- ProgressIndicator: a standalone component that displays the percentage of the upload
HTML:
<div class=""flex items-center gap-2""><ProgressBar/><ProgressIndicator/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-2 rounded-lg overflow-hidden""><div class=""bg-blue-500 h-2 rounded-lg"" style={{ width: `${progressPercentage}%` }}/></div>
ProgressIndicator:
<p class=""text-sm"">{progressPercentage} %</p>"
Product description and details section,"DESCRIPTION:
The UI should display a product description and details section. It should be a responsive, mobile-friendly, and accessible component that displays product information in a clear and organized manner.
COMPONENTS:
- ProductDescription: Standalone component that displays a brief summary of the product.
- ProductDetails: Standalone component that displays detailed information about the product, such as features, specifications, and reviews.
- ProductInfoSection: Takes children. A container component that wraps around the product description and details components.
HTML:
<section class=""mx-auto p-4 md:p-8""><ProductInfoSection><ProductDescription/><ProductDetails/></ProductInfoSection></section>
COMPONENT HTML:
ProductDescription:
<p class=""text-lg md:text-xl"">{product_summary}</p>
ProductDetails:
<ul class=""list-none mb-4""><li class=""mb-2""><strong>Features:</strong>{features}</li><li class=""mb-2""><strong>Specifications:</strong>{specifications}</li><li class=""mb-2""><strong>Reviews:</strong>{reviews}</li></ul>
ProductInfoSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Help center link,"DESCRIPTION:
The UI should display a link to the help center. The link should be accessible, visible, and responsive on different devices.
COMPONENTS:
- HelpCenterLink: a standalone component that renders a link to the help center.
HTML:
<nav class=""md:flex md:items-center md:justify-between p-4""><!-- other navigation links --><HelpCenterLink/></nav>
COMPONENT HTML:
HelpCenterLink:
<a href=""{help_center_url}"" class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"">Help Center</a>"
Search Input Clear Button,"DESCRIPTION:
The UI should be a search input field with a clear button on the right side. The clear button should appear only when there is text in the input field. When clicked, the clear button should clear the input field.
COMPONENTS:
- SearchInput: (standalone)
- ClearButton: (standalone)
HTML:
<div class=""flex w-full max-w-md""><SearchInput/><ClearButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full pl-4 pr-10 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"" placeholder=""Search...""/>
ClearButton:
<button class=""inline-flex justify-center w-8 h-8 bg-gray-100 text-gray-500 hover:text-gray-700 hover:bg-gray-200 transition ease-in-out duration-200""><span aria-hidden=""true"">&times;</span></button>"
Search Input Clear Button,"DESCRIPTION:
A search input with a clear button on the right side. The clear button is only visible when there's text in the input field.
COMPONENTS:
- SearchInputContainer: standalone, contains the input field and the clear button
- SearchInput: standalone, the input field
- ClearButton: standalone, the clear button
HTML:
<div class=""flex flex-wrap items-center""><SearchInputContainer/></div>
COMPONENT HTML:
SearchInputContainer:
<div class=""relative""><SearchInput/><ClearButton/></div>
SearchInput:
<input type=""search"" class=""pl-4 pr-10 py-2 w-full text-sm text-gray-700"" placeholder=""Search...""/>
ClearButton:
<button class=""absolute inset-y-0 right-0 flex items-center px-2""><i class=""fas fa-times text-gray-400 hover:text-gray-600 transition duration-300 ease-in-out""></i></button>"
Search Input Clear Button,"DESCRIPTION:
A search input field with a clear button on the right side, which appears only when the input field is not empty. The clear button is a small circle with a white ""X"" icon.
COMPONENTS:
- SearchInput: standalone component
- ClearButton: standalone component
HTML:
<div class=""flex items-center w-full""><SearchInput/><ClearButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search""/>
ClearButton:
<button aria-label=""Clear search input"" class=""w-6 h-6 text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><span class=""sr-only"">Clear search input</span><!-- X icon will be replaced with a CSS pseudo-element --><span aria-hidden=""true"">×</span></button>"
Search Input Clear Button,"DESCRIPTION:
A simple search input field with a clear button on the right side of the input field. The clear button should be visible only when there is text in the input field.
COMPONENTS:
- SearchInput: (standalone) - The search input field.
- ClearButton: (standalone) - The clear button to clear the search input field.
HTML:
<div class=""flex w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto mt-4 mb-4""><SearchInput/><ClearButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700 border border-gray-300 rounded-md"" placeholder=""Search...""/>
ClearButton:
<button class=""absolute top-0 right-0 p-2 text-gray-600 hover:text-gray-900 transition duration-300""><span aria-hidden=""true"">&times;</span></button>"
Search Input Clear Button,"DESCRIPTION:
A search input with a clear button that appears when the input is not empty. The clear button is a small ""x"" icon that clears the input when clicked. The input is responsive and accessible.
COMPONENTS:
- SearchInput: A text input that takes children (placeholder text and the clear button).
- ClearButton: A standalone button component that clears the search input when clicked.
HTML:
<div class=""flex items-center w-full md:w-1/2 lg:w-1/3 xl:w-1/4""><SearchInput><input type=""search"" id=""search"" class=""w-full pl-4 pr-10 py-2 text-lg""/><ClearButton/></SearchInput></div>
COMPONENT HTML:
SearchInput:
<div class=""flex items-center w-full"">{children}</div>
ClearButton:
<button type=""button"" class=""px-2 text-gray-500 hover:text-gray-800 transition duration-300"" aria-label=""Clear search input""><span aria-hidden=""true"">×</span></button>"
Wishlist items,"DESCRIPTION:
- The UI should display a list of wishlist items where each item contains a title, description, and a 'Remove' button.
   - The layout should be clean and spacious, with each item neatly carded.
   - Responsiveness ensures items adjust in a grid or column based on screen size.
COMPONENTS:
- Wishlist: Standalone component that contains multiple `WishlistItem` components.
- WishlistItem: Component that takes children. It displays individual item details and a remove button.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">My Wishlist</h1><Wishlist/></div>
COMPONENT HTML:
Wishlist:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><WishlistItem><h2 class=""text-lg font-semibold"">{item_title}</h2><p>{item_description}</p><button class=""mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700 transition duration-300"">Remove </button></WishlistItem><!-- Additional WishlistItem instances would be added here --></div>
WishlistItem:
<div class=""p-4 border border-gray-300 rounded shadow-sm"">{children} </div>"
Countdowns,"DESCRIPTION:
The UI will display multiple countdown timers, each representing a different event. Each countdown will show the days, hours, minutes, and seconds left until the event occurs. The timers should be listed in a clear, easy-to-read format, with the event title above each countdown.
COMPONENTS:
- CountdownList: (Standalone)**: This is the parent component that groups all individual CountdownItem components.
- CountdownItem: (Takes Children)**: This component displays the countdown for a single event, including the event title and the time left until the event (days, hours, minutes, and seconds).
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-xl font-bold text-center mb-4"">Upcoming Events Countdown</h1><CountdownList/></div>
COMPONENT HTML:
CountdownList:
<ul class=""space-y-4""><CountdownItem><h2 class=""text-lg font-semibold"">{event_title_one}</h2><p>{days_one} days, {hours_one} hours, {minutes_one} minutes, {seconds_one} seconds</p></CountdownItem><CountdownItem><h2 class=""text-lg font-semibold"">{event_title_two}</h2><p>{days_two} days, {hours_two} hours, {minutes_two} minutes, {seconds_two} seconds</p></CountdownItem><!-- Additional CountdownItem components can be added here --></ul>
CountdownItem:
<li class=""border p-3 shadow rounded"">{children} </li>"
Tweet edit button for post revisions,"DESCRIPTION:
The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- EditButton: A standalone component that displays an edit icon and allows users to edit a tweet revision.
HTML:
<div class=""flex justify-end mb-2""><EditButton/></div>
COMPONENT HTML:
EditButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full""><i class=""fas fa-pencil-alt text-sm"" aria-label=""Edit tweet revision""></i></button>"
Customer review and rating summaries,"DESCRIPTION:
The UI should display a summary of customer reviews, including the average rating and total number of reviews. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- CustomerReviewSummary: standalone component
- RatingSummary: standalone component
- ReviewCount: standalone component
HTML:
<div class=""max-w-md mx-auto py-4""><CustomerReviewSummary/><div class=""flex justify-between mb-4""><RatingSummary/><ReviewCount/></div></div>
COMPONENT HTML:
CustomerReviewSummary:
<div class=""text-lg font-bold"">{average_rating} out of 5 stars</div>
RatingSummary:
<div class=""flex items-center""><span class=""text-yellow-500"">{rating_icon}</span><span class=""ml-2"">{average_rating}</span></div>
ReviewCount:
<p>{review_count} reviews</p>"
Alert Notification Text,"DESCRIPTION:
The UI should display a notification text with a background color, text color, and optional close button.
COMPONENTS:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
HTML:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
COMPONENT HTML:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Header Search Input,"DESCRIPTION:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
COMPONENTS:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
HTML:
<header class=""bg-white py-4""><SearchHeader/></header>
COMPONENT HTML:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
Article summaries,"DESCRIPTION:
The UI should display a list of article summaries, each consisting of a title, a brief description, and a link to the full article. The summaries should be responsive, readable, and visually appealing.
COMPONENTS:
- ArticleSummary: Standalone component to display a single article summary.
- ArticleList: Component that takes children, a list of `ArticleSummary` components.
HTML:
<section class=""max-w-lg mx-auto p-4 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Article Summaries</h1><ArticleList><ArticleSummary/><ArticleSummary/><!-- Add more ArticleSummary components here --></ArticleList></section>
COMPONENT HTML:
ArticleSummary:
<article class=""mb-4 p-4 border-b border-gray-200""><h2 class=""text-lg font-bold"">{title}</h2><p class=""text-gray-600"">{description}</p><a href={link} class=""text-blue-600 hover:text-blue-900"">Read more</a></article>
ArticleList:
<ul class=""list-none mb-0"">{children}</ul>"
Call-to-Action (CTA) Button Section,"DESCRIPTION:
The UI should have a prominent call-to-action (CTA) button section with a bold headline, a brief description, and a prominent CTA button that encourages the user to take action.
COMPONENTS:
- HeadlineComponent: Standalone component that displays a bold headline text.
- DescriptionComponent: Standalone component that displays a brief descriptive text.
- CTAButtonComponent: Standalone component that displays a prominent CTA button.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><HeadlineComponent/><DescriptionComponent/><CTAButtonComponent/></section>
COMPONENT HTML:
HeadlineComponent:
<h2 class=""text-3xl font-bold"">{headline_text}</h2>
DescriptionComponent:
<p class=""text-lg"">{description_text}</p>
CTAButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_button_text}</button>"
Call-to-Action (CTA) Button Section,"DESCRIPTION:
The UI should be a prominent call-to-action (CTA) button section that encourages users to take a specific action. The section should be full-width, with a bold background color, and a contrasting CTA button that stands out. The section should be responsive, with the button size and spacing adjusting based on screen size.
COMPONENTS:
- CTASection: - standalone component that contains the entire CTA section
- CTAButton: - standalone component that represents the call-to-action button
HTML:
<section class=""relative pt-12 pb-20 lg:pt-20 lg:pb-32""><div class=""container max-w-md mx-auto p-4 lg:p-8""><CTASection/></div></section>
COMPONENT HTML:
CTASection:
<div class=""bg-orange-500 text-white p-4 lg:p-8""><h2 class=""text-2xl lg:text-3xl"">{headline}</h2><p class=""text-lg lg:text-xl"">{description}</p><CTAButton/></div>
CTAButton:
<button class=""bg-white hover:bg-gray-200 text-orange-500 font-bold py-2 px-4 rounded"">{button_text}</button>"
Tags and Categories,"DESCRIPTION:
The UI should display a list of tags and categories in a responsive, mobile-first design. The list should be accessible and SEO-friendly.
COMPONENTS:
- TagList: A component that takes children, representing a list of tags.
- CategoryList: A component that takes children, representing a list of categories.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Tags and Categories</h1><section class=""mb-6""><h2 class=""text-lg font-bold mb-2"">Tags</h2><TagList><!-- Tags will be rendered here --></TagList></section><section class=""mb-6""><h2 class=""text-lg font-bold mb-2"">Categories</h2><CategoryList><!-- Categories will be rendered here --></CategoryList></section></main>
COMPONENT HTML:
TagList:
<ul class=""list-none mb-0"">{children}</ul>
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should display a list of tags and categories with a header and a horizontal divider separating the two. Each tag and category should be displayed as a badge with a background color and text.
COMPONENTS:
- TagsAndCategoriesHeader: standalone, displays the header text
- TagsAndCategoriesDivider: standalone, displays a horizontal divider
- TagBadge: takes children, displays a single tag or category as a badge
- TagsAndCategoriesList: takes children, displays a list of tags or categories
HTML:
<div class=""max-w-md mx-auto p-4""><TagsAndCategoriesHeader/><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- tags --><TagBadge>{tag_name}</TagBadge><TagBadge>{tag_name}</TagBadge><!-- ... --></TagsAndCategoriesList><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- categories --><TagBadge>{category_name}</TagBadge><TagBadge>{category_name}</TagBadge><!-- ... --></TagsAndCategoriesList></div>
COMPONENT HTML:
TagsAndCategoriesHeader:
<h2 class=""text-lg font-bold mb-2"">Tags and Categories</h2>
TagsAndCategoriesDivider:
<hr class=""border-b border-gray-200""/>
TagBadge:
<span class=""bg-gray-200 text-gray-800 px-2 py-1 rounded"">{children}</span>
TagsAndCategoriesList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Callout Box Background Image,"DESCRIPTION:
The UI should be a callout box with a background image, having a heading, description, and a call-to-action button. The background image should be responsive and adapt to different screen sizes.
COMPONENTS:
- CalloutBox: A standalone component that wraps the entire callout box.
- CalloutHeader: A standalone component that contains the heading and description.
- CalloutButton: A standalone component that contains the call-to-action button.
HTML:
<div class=""container mx-auto p-4""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""relative bg-cover bg-center h-full"" style={{ backgroundImage: `url(${background_image_url})` }}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div><CalloutHeader/><CalloutButton/></div>
CalloutHeader:
<div class=""absolute bottom-0 left-0 p-4 mb-4""><h2 class=""text-2xl font-bold"">{heading}</h2><p class=""text-lg"">{description}</p></div>
CalloutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Customer Review Rating,"DESCRIPTION:
A customer review rating component that displays a rating out of 5 stars, along with a brief review text. The component should be responsive and accessible.
COMPONENTS:
- RatingStars: (standalone): displays a rating out of 5 stars
- ReviewText: (standalone): displays a brief review text
- CustomerReview: (takes children): wraps the rating stars and review text
HTML:
<div class=""max-w-md md:max-w-lg lg:max-w-xl mx-auto p-4""><CustomerReview><RatingStars/><ReviewText/></CustomerReview></div>
COMPONENT HTML:
RatingStars:
<div class=""flex items-center"">{starsFilled}<i class=""fas fa-star text-yellow-400""></i>{starsEmpty}<i class=""fas fa-star text-gray-400""></i></div>
ReviewText:
<p class=""text-sm"">{reviewText}</p>
CustomerReview:
<div class=""flex flex-col md:flex-row justify-between mb-4"">{children}</div>"
Blog Post Date Published,"DESCRIPTION:
The UI should display the date a blog post was published, with a clean and minimal design that is responsive and accessible.
COMPONENTS:
- PublishedDate: A standalone component that displays the date a blog post was published.
HTML:
<footer class=""mb-4 text-sm text-gray-500""><PublishedDate/></footer>
COMPONENT HTML:
PublishedDate:
<span class=""text-gray-500"">{published_date}</span>"
Footer Sitemap Icon,"DESCRIPTION:
The Footer Sitemap Icon UI will be a simple and clean icon at the bottom of a webpage, typically used to link to the sitemap of the website. It may include a minimalist icon to symbolize navigation (like a grid or map icon) accompanied by a small label that reads ""Sitemap.""
COMPONENTS:
- SitemapIcon: (Standalone)**: Represents the icon linked to the sitemap. This component encapsulates both the icon and the label.
HTML:
<footer class=""bg-gray-800 text-white p-4""><div class=""container mx-auto text-center""><!-- SitemapIcon component inserted here --><SitemapIcon/></div></footer>
COMPONENT HTML:
SitemapIcon:
<a href=""{sitemap_url}"" class=""inline-flex items-center space-x-2 hover:text-gray-400""><div class=""w-6 h-6 bg-gray-700 rounded-full flex items-center justify-center""><!-- Assuming a symbol representing the sitemap; use a simple placeholder here --><span class=""text-xs text-white"">🌐</span></div><span class=""text-sm"">Sitemap</span></a>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Portfolio filter with categories and tags,"DESCRIPTION:
- The UI will display a list of portfolio items that can be filtered by categories and tags.
   - At the top, there will be a filter section with buttons for each category and tag.
   - Below the filters, there will be a grid displaying portfolio items.
   - Each portfolio item will show an image, title, and a brief description.
COMPONENTS:
- FilterBar: A standalone component that contains buttons for filtering by categories and tags.
- PortfolioItem: A standalone component that displays an individual portfolio item, including an image, title, and description.
- PortfolioGrid: A component that takes children; it is used to arrange the PortfolioItem components into a grid layout.
HTML:
<div class=""container mx-auto p-4""><!-- Filter Bar for categories and tags --><FilterBar/><!-- Portfolio Grid to display items --><PortfolioGrid><PortfolioItem/><PortfolioItem/><PortfolioItem/><!-- More PortfolioItems as needed --></PortfolioGrid></div>
COMPONENT HTML:
FilterBar:
<div class=""flex flex-wrap gap-2 p-2""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Category 1</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Category 2</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Tag 1</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Tag 2</button><!-- More buttons as needed --></div>
PortfolioItem:
<div class=""max-w-sm rounded overflow-hidden shadow-lg""><img class=""w-full"" src=""{portfolio_image_url}"" alt=""{portfolio_image_alt}""><div class=""px-6 py-4""><div class=""font-bold text-xl mb-2"">{portfolio_title}</div><p class=""text-gray-700 text-base"">{portfolio_description} </p></div></div>
PortfolioGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"">{children}</div>"
Simple product listing with thumbnails,"DESCRIPTION:
A grid of product thumbnails with a title and price overlay.
COMPONENTS:
- ProductThumbnail: standalone
- ProductListing: takes children (`ProductThumbnail` components)
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><h1>Product Listing</h1><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><ProductThumbnail/><ProductThumbnail/><ProductThumbnail/><!-- repeat ProductThumbnail components here --></div></div>
COMPONENT HTML:
ProductThumbnail:
<div class=""relative overflow-hidden shadow-md rounded-lg""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover""/><div class=""absolute bottom-0 left-0 p-4 text-white""><h5>{product_name}</h5><p>${product_price}</p></div></div>
ProductListing:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8"">{children}</div>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates. Each room type should have a checkbox to select or deselect it. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- RoomTypeList: (takes children) - A list of `RoomTypeItem` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold"">Select Room Type and Rate</h2><RoomTypeList><!-- Room type items will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
RoomTypeList:
<ul class=""list-none mb-0"">{children}</ul>"
Room Type and Rate Selection,"DESCRIPTION:
A room type and rate selection UI that allows users to choose from different room types and rates.
COMPONENTS:
- RoomTypeCard: (standalone): Displays a single room type with its details and rates.
- RateSelection: (takes children): A container for selecting rates.
- RateOption: (standalone): A single rate option with its details.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h2><div class=""flex flex-wrap -mx-4""><RoomTypeCard/><RoomTypeCard/><RoomTypeCard/><!-- Add more RoomTypeCard components as needed --></div><RateSelection><RateOption/><RateOption/><RateOption/><!-- Add more RateOption components as needed --></RateSelection></div>
COMPONENT HTML:
RoomTypeCard:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold"">{room_type_name}</h3><p class=""text-gray-600"">{room_type_description}</p><p class=""text-lg font-bold"">{price_per_night} per night</p></div>
RateSelection:
<div class=""p-4""><h3 class=""text-lg font-bold"">Select Rate</h3><div class=""flex flex-wrap -mx-4"">{children} </div></div>
RateOption:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><input type=""radio"" id={rate_id} name=""rate""/><label for={rate_id} class=""text-lg font-bold"">{rate_name}</label><p class=""text-gray-600"">{rate_description}</p><p class=""text-lg font-bold"">{rate_price} per night</p></div>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Product Feature Icon Size,"DESCRIPTION:
The UI should display a product feature icon with a specific size. The icon should be responsive and accessible.
COMPONENTS:
- ProductFeatureIcon: A standalone component that displays an icon with a specific size.
HTML:
<div class=""flex justify-center mb-4""><ProductFeatureIcon/></div>
COMPONENT HTML:
ProductFeatureIcon:
<i class=""fas fa-{icon_type} text-{icon_color} text-{icon_size}""></i>"
Product Feature Icon Size,"DESCRIPTION:
The UI should display a product feature icon with a size indicator, which is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- FeatureIcon: A standalone component that displays a icon representing a product feature.
- IconSizeIndicator: A standalone component that displays the size of the icon.
HTML:
<div class=""flex items-center""><FeatureIcon/><IconSizeIndicator/></div>
COMPONENT HTML:
FeatureIcon:
<i class=""fas fa-{icon_type} text-2xl"" aria-label=""{icon_label}""></i>
IconSizeIndicator:
<span class=""text-sm"">{icon_size}px</span>"
Ruby text,"DESCRIPTION:
The UI should feature a heading with a main text that has a pronunciation guide right above it using the ruby annotation. This is commonly used to aid in reading East Asian characters by providing phonetic information. The UI should be simple, clear, and visually distinct to separate ruby text from the main text.
COMPONENTS:
- RubyText: (Standalone): This component will display the main text with its corresponding pronunciation text (ruby) above it.
- PageTitle: (Standalone): Displays the main heading of the page.
HTML:
<div class=""container mx-auto p-4""><PageTitle/><div class=""text-center mt-8""><RubyText/></div></div>
COMPONENT HTML:
RubyText:
<p class=""text-lg leading-normal""><ruby>{base_characters} <rt>{pronunciation}</rt></ruby></p>
PageTitle:
<h1 class=""text-2xl font-bold text-gray-800"">Understanding Ruby Annotations </h1>"
Page Title Header,"DESCRIPTION:
- The UI features a simple, prominent header that displays the page title. The header should be centered, with a larger font to emphasize the title, and it should adapt to different screen sizes.
COMPONENTS:
- PageTitleHeader: Standalone component. This component will display the title text.
HTML:
<header><PageTitleHeader/></header>
COMPONENT HTML:
PageTitleHeader:
<h1 class=""text-2xl md:text-4xl text-center my-4"">{pageTitle}</h1>"
Search bar for finding videos,"DESCRIPTION:
A simple search bar with a search input and a search button. The search bar should be centered on the page and should be responsive.
COMPONENTS:
- SearchBar: A standalone component that contains a search input and a search button.
- SearchInput: A standalone component that renders an input field.
- SearchButton: A standalone component that renders a button.
HTML:
<div class=""flex justify-center pt-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white rounded-md shadow-md p-2""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-2 py-2 rounded-md"" placeholder=""Search for videos""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">Search</button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Paging controls for navigating through posts,"DESCRIPTION:
The UI should display a simple pagination control with a previous and next button, allowing users to navigate through a list of posts.
COMPONENTS:
- PaginationControl: standalone
- PreviousButton: standalone
- NextButton: standalone
HTML:
<nav class=""flex justify-center mb-4""><PaginationControl/></nav>
COMPONENT HTML:
PaginationControl:
<div class=""flex items-center""><PreviousButton/><span class=""px-2"">{current_page} of {total_pages}</span><NextButton/></div>
PreviousButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">Previous</button>
NextButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">Next</button>"
Email list view with sender and subject,"DESCRIPTION:
The UI should display a list of emails, with each email showing the sender's name and the subject of the email. The list should be responsive, with each email item taking up the full width of the screen on mobile devices and becoming a compact list item on larger screens.
COMPONENTS:
- EmailListItem: (standalone): A single email item in the list, displaying the sender and subject.
- EmailList: (takes children): A container for the list of email items.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-2xl font-bold mb-4"">Emails</h1><EmailList><EmailListItem/><EmailListItem/><!-- add more EmailListItem components here --></EmailList></div>
COMPONENT HTML:
EmailListItem:
<div class=""flex justify-between mb-4 p-4 bg-white shadow-md rounded""><div><p class=""text-lg font-bold"">{senderName}</p><p class=""text-gray-600"">{subject}</p></div><div class=""text-right""><p class=""text-gray-600"">{receivedAt}</p></div></div>
EmailList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Email list view with sender and subject,"DESCRIPTION:
A list of emails with sender and subject information.
COMPONENTS:
- EmailListItem: (stands alone)
- EmailList: (takes children)
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Emails</h2><EmailList><EmailListItem/><EmailListItem/><!-- more EmailListItem components here --></EmailList></div>
COMPONENT HTML:
EmailListItem:
<div class=""flex items-center justify-between p-2 border-b border-gray-200""><div><span class=""text-sm"">{sender}</span><span class=""text-xs text-gray-500"">{timestamp}</span></div><div><span class=""text-lg"">{subject}</span></div></div>
EmailList:
<ul class=""list-none mb-4"">{children}</ul>"
Gradients (linear),"DESCRIPTION:
The UI should display a container with a linear gradient background, with two colors transitioning from top to bottom.
COMPONENTS:
- GradientContainer: a standalone component that displays a linear gradient background.
HTML:
<div class=""h-screen w-full""><GradientContainer/></div>
COMPONENT HTML:
GradientContainer:
<div class=""bg-gradient-to-b from-{top_color} to-{bottom_color} h-full w-full""></div>"
Search Bar: Input field for searching the site,"DESCRIPTION:
The UI should be a simple search bar component that consists of a text input field and a search button. The search bar should be responsive, with the search button aligned to the right of the input field on larger screens, and stacked on top of each other on smaller screens.
COMPONENTS:
- SearchBar: standalone component that contains the entire search bar UI
- SearchInput: standalone component that represents the text input field
- SearchButton: standalone component that represents the search button
HTML:
<nav class=""max-w-md mx-auto p-4 flex justify-center""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex flex-wrap items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
About us section,"DESCRIPTION:
The ""About Us"" section should have a header with the title ""About Us"", a paragraph of text that describes the company, and a photo of the company's team. The section should be responsive, with the text and image layout adjusting for different screen sizes.
COMPONENTS:
- AboutUsHeader: standalone component that displays the title ""About Us""
- AboutUsText: standalone component that displays a paragraph of text
- AboutUsImage: standalone component that displays an image
- AboutUsContainer: component that takes children, wraps the `AboutUsHeader`, `AboutUsText`, and `AboutUsImage` components
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 mb-6 lg:mb-12""><AboutUsContainer><AboutUsHeader/><AboutUsText/><AboutUsImage/></AboutUsContainer></section>
COMPONENT HTML:
AboutUsHeader:
<h2 class=""text-2xl lg:text-3xl font-bold mb-4"">{about_us_title}</h2>
AboutUsText:
<p class=""text-lg lg:text-xl mb-6"">{about_us_text}</p>
AboutUsImage:
<img src={about_us_image_src} alt=""About Us team photo"" class=""w-full mb-4 lg:mb-6""/>
AboutUsContainer:
<div class=""flex flex-col md:flex-row"">{children}</div>"
Animated icon indicating that content is loading or processing,"DESCRIPTION:
A simple, animated icon indicating that content is loading or processing. The icon should be a spinning circle with a subtle animation effect.
COMPONENTS:
- LoadingIndicator: A standalone component representing the animated loading icon.
HTML:
<div class=""flex justify-center""><LoadingIndicator/></div>
COMPONENT HTML:
LoadingIndicator:
<div class=""inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-blue-600""></div>"
Zoom/Magnify Effects,"DESCRIPTION:
The UI should display an image with a zoom effect on hover, where the image is magnified to a larger size.
COMPONENTS:
- ImageZoom: A standalone component that displays an image with a zoom effect on hover.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><ImageZoom/></div>
COMPONENT HTML:
ImageZoom:
<div class=""relative overflow-hidden""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover transition duration-300 ease-in-out""/><div class=""absolute top-0 left-0 w-full h-full opacity-0 hover:opacity-100 transition duration-300 ease-in-out""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover scale-150""/></div></div>"
Zoom/Magnify Effects,"DESCRIPTION:
The UI should display an image with a zoom/magnify effect when hovered or focused. The image should be responsive and adapt to different screen sizes.
COMPONENTS:
- ImageZoomView: a standalone component that displays an image with a zoom/magnify effect.
HTML:
<div class=""max-w-md mx-auto p-4""><ImageZoomView/></div>
COMPONENT HTML:
ImageZoomView:
<img src={image_url} alt={image_alt} class=""w-full h-auto transition duration-300 ease-in-out hover:scale-110 focus:scale-110""/>"
Course Progress Bars,"DESCRIPTION:
The UI should display a progress bar indicating the completion percentage of a course, with a label showing the percentage complete. The progress bar should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ProgressBar: (standalone) - displays the progress bar with a percentage complete label
- CourseLabel: (standalone) - displays the course name and completion percentage
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- course information --><CourseLabel/><!-- progress bar --><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""w-full h-4 rounded bg-gray-200""><div class=""h-4 bg-blue-500 rounded"" style={{ width: `${progressPercentage}%` }}></div><p class=""text-lg"">{progressPercentage}% Complete</p></div>
CourseLabel:
<h2 class=""text-lg"">{courseName} - {completionPercentage}% Complete</h2>"
Error message popup with retry and cancel buttons,"DESCRIPTION:
The UI should be a popup with an error message, a retry button, and a cancel button. The popup should have a red background to indicate an error. The retry button should be blue and have a retry icon, while the cancel button should be gray. The popup should be centered on the screen and have a slight shadow to give it depth.
COMPONENTS:
- ErrorPopup: Standalone component that contains the error message and buttons.
- RetryButton: Standalone component that represents the retry button.
- CancelButton: Standalone component that represents the cancel button.
HTML:
<!-- Error popup container --><div class=""fixed top-0 left-0 w-full h-screen bg-red-500 bg-opacity-75 flex justify-center items-center""><ErrorPopup/></div>
COMPONENT HTML:
ErrorPopup:
<div class=""max-w-md bg-white p-4 rounded shadow-md""><p class=""text-lg font-bold text-red-700"">{error_message}</p><div class=""flex justify-between mt-4""><RetryButton/><CancelButton/></div></div>
RetryButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-redo mr-2""></i>{retry_text}</button>
CancelButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{cancel_text}</button>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Section with Video,"DESCRIPTION:
The UI should be a hero section with a background video that plays automatically when the page loads. The video should be muted and loop indefinitely. There should be a headline, subheading, and a call-to-action (CTA) button on top of the video. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- HeroVideo: A standalone component that renders a background video.
- HeroContent: A component that takes children, which are the headline, subheading, and CTA button.
- HeroHeadline: A standalone component that renders the headline text.
- HeroSubheading: A standalone component that renders the subheading text.
- HeroCTA: A standalone component that renders the CTA button.
HTML:
<section class=""min-h-screen relative""><HeroVideo/><div class=""absolute inset-0 flex items-center justify-center""><HeroContent><HeroHeadline/><HeroSubheading/><HeroCTA/></HeroContent></div></section>
COMPONENT HTML:
HeroVideo:
<video autoplay loop muted class=""w-full h-full object-cover""><source src=""{video_source}"" type=""video/mp4"">Your browser does not support the video tag.</video>
HeroContent:
<div class=""container mx-auto p-4 md:p-8"">{children}</div>
HeroHeadline:
<h1 class=""text-3xl md:text-5xl font-bold"">{headline_text}</h1>
HeroSubheading:
<p class=""text-lg md:text-2xl"">{subheading_text}</p>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Testimonial Slider: Showcase social proof from happy customers,"DESCRIPTION:
The Testimonial Slider should display quotes from happy customers with their names and photos, enclosed in a container that can be navigated using previous and next buttons. The slider should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- TestimonialSlider: A container component that wraps the entire slider, including navigation buttons and testimonial items. (Takes children: TestimonialItem)
- TestimonialItem: A single testimonial item that displays a customer's quote, name, and photo. (Standalone)
- SliderNavigation: A component that contains previous and next buttons for navigating the slider. (Standalone)
HTML:
<div class=""container mx-auto p-4 lg:p-8""><TestimonialSlider><TestimonialItem/><TestimonialItem/><!-- Add more TestimonialItem components as needed --></TestimonialSlider><SliderNavigation/></div>
COMPONENT HTML:
TestimonialSlider:
<div class=""flex flex-wrap justify-center mb-4""><div class=""flex-1"">{children}</div><SliderNavigation/></div>
TestimonialItem:
<div class=""flex flex-col mb-4""><img src=""{photo_url}"" alt=""{customer_name}"" class=""rounded-full w-16 h-16 mb-2""/><p class=""text-lg"">{quote}</p><p class=""text-sm"">{customer_name}</p></div>
SliderNavigation:
<div class=""flex justify-between mb-4""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Previous</button><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Next</button></div>"
Header: Site title and navigation links,"DESCRIPTION:
The UI should be a header section at the top of the webpage, featuring a site title on the left side and navigation links on the right side. The site title should be prominent and centered on mobile devices, while the navigation links should be stacked on top of each other on mobile devices and aligned horizontally on larger screens.
COMPONENTS:
- SiteTitle: (standalone): displays the title of the site
- NavLink: (standalone): displays a single navigation link
- NavLinks: (takes children): a container for multiple `NavLink` components
- Header: (takes children): the top-level component that contains the site title and navigation links
HTML:
<header><Header><SiteTitle/><NavLinks><NavLink/><NavLink/><!-- Add more NavLink components as needed --></NavLinks></Header></header>
COMPONENT HTML:
SiteTitle:
<h1 class=""text-3xl font-bold"">{site_title}</h1>
NavLink:
<a href=""{nav_link_url}"" class=""text-lg"">{nav_link_text}</a>
NavLinks:
<nav class=""flex flex-wrap justify-end md:flex-row"">{children}</nav>
Header:
<div class=""container mx-auto p-4 md:flex md:justify-between"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Shopping Cart Icon,"DESCRIPTION:
The UI should be a shopping cart icon with a badge indicating the number of items in the cart.
COMPONENTS:
- ShoppingCartIcon: Standalone component representing the shopping cart icon.
- Badge: Standalone component representing the badge displaying the number of items in the cart.
HTML:
<div class=""absolute top-2 right-2""><ShoppingCartIcon/><Badge/></div>
COMPONENT HTML:
ShoppingCartIcon:
<i class=""fas fa-shopping-cart text-lg text-gray-500 hover:text-gray-800 cursor-pointer""></i>
Badge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{item_count}</span>"
Product Showcase with Animated Cards,"DESCRIPTION:
The UI should be a product showcase with a grid of animated cards. Each card should have a hover effect and display a product image, title, and description. The grid should be responsive and adjust to different screen sizes.
COMPONENTS:
- ProductCard: (standalone): A single product card with a hover effect.
- ProductGrid: (takes children): A grid container that wraps multiple `ProductCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded overflow-hidden transition duration-500 hover:scale-105""><img src={product_image} alt={product_name} class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p></div></div>
ProductGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Header Navigation Toggle,"DESCRIPTION:
The UI should be a responsive header navigation toggle, which is a common design pattern for mobile-first navigation. The toggle should be accessible and SEO-friendly.
COMPONENTS:
- Header: standalone component
- NavToggle: standalone component
- Nav: takes children
HTML:
<header class=""bg-gray-200 py-4 lg:py-8""><div class=""container mx-auto px-4 lg:px-8""><Header/><NavToggle/><Nav><!-- navigation items will be inserted here --></Nav></div></header>
COMPONENT HTML:
Header:
<h1 class=""text-2xl font-bold"">{site_title}</h1>
NavToggle:
<button class=""lg:hidden"" aria-label=""Navigation toggle""><span class=""sr-only"">Toggle navigation</span><i class=""fas fa-bars text-lg""></i></button>
Nav:
<nav class=""lg:flex lg:flex-wrap lg:justify-end"">{children}</nav>"
Navigation trail displaying the user's current location within the website's hierarchy,"DESCRIPTION:
A horizontal navigation trail showing the user's current location within the website's hierarchy, with each crumb separated by a slash (/) or a greater-than symbol (>), and the current page highlighted.
COMPONENTS:
- BreadcrumbsTrail: A component taking children, representing the navigation trail itself.
HTML:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap mb-4""><BreadcrumbsTrail><!-- breadcrumbs will be inserted here --></BreadcrumbsTrail></ol></nav>
COMPONENT HTML:
BreadcrumbsTrail:
<ol class=""flex flex-wrap mb-4"">{children}</ol>"
Headline and Summary Text,"DESCRIPTION:
The UI should display a headline and a summary text in a responsive, mobile-first layout. The headline should be prominent and attention-grabbing, while the summary text should provide a brief overview of the content.
COMPONENTS:
- HeadlineComponent: (standalone): displays a prominent headline text
- SummaryTextComponent: (standalone): displays a brief summary text
HTML:
<div class=""flex flex-col items-center md:flex-row md:justify-center""><HeadlineComponent/><SummaryTextComponent/></div>
COMPONENT HTML:
HeadlineComponent:
<h1 class=""text-3xl font-bold mb-4"">{headline_text}</h1>
SummaryTextComponent:
<p class=""text-lg text-gray-600"">{summary_text}</p>"
Headline and Summary Text,"DESCRIPTION:
A headline and summary text section, typically used on a blog post or article page, that is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- HeadlineComponent: (standalone) - Displays a headline text.
- SummaryTextComponent: (standalone) - Displays a summary text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><HeadlineComponent/><SummaryTextComponent/></div>
COMPONENT HTML:
HeadlineComponent:
<h1 class=""text-3xl md:text-4xl lg:text-5xl font-bold"">{headline_text}</h1>
SummaryTextComponent:
<p class=""text-lg md:text-xl lg:text-2xl"">{summary_text}</p>"
Transition controls,"DESCRIPTION:
The UI should consist of a set of control elements to manage transitions, typical in multimedia applications. These controls typically include buttons for playing, pausing, stopping, and maybe sliders for controlling transition progress or speed.
COMPONENTS:
- PlayButton: (standalone): A button to start a transition.
- PauseButton: (standalone): A button to pause the ongoing transition.
- StopButton: (standalone): A button to stop the transition.
HTML:
<div class=""flex flex-col items-center space-y-4 p-4""><!-- Play button --><PlayButton/><!-- Pause button --><PauseButton/><!-- Stop button --><StopButton/></div>
COMPONENT HTML:
PlayButton:
<button class=""bg-green-500 text-white p-2 rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"">Play </button>
PauseButton:
<button class=""bg-yellow-500 text-white p-2 rounded hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50"">Pause </button>
StopButton:
<button class=""bg-red-500 text-white p-2 rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"">Stop </button>"
Featured Image Zoom Button,"DESCRIPTION:
The UI should display a featured image with a zoom button overlay on top of it. The zoom button should be a circular icon with a zoom-in icon inside. When hovered, the zoom button should change its background color and cursor to indicate interactivity.
COMPONENTS:
- FeaturedImage: Standalone component that displays the featured image.
- ZoomButton: Standalone component that displays the zoom button.
HTML:
<div class=""relative""><FeaturedImage/><ZoomButton/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{imageSrc}"" alt=""{imageAlt}"" class=""w-full h-full object-cover rounded-md""/>
ZoomButton:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gray-200 hover:bg-gray-300 rounded-full p-2 cursor-pointer""><span class=""fas fa-search-plus text-lg""></span></div>"
Featured Image Zoom Button,"DESCRIPTION:
The UI should display a featured image with a zoom button overlaid on top of it. When the zoom button is clicked, a larger version of the image should be displayed. The zoom button should be circular and have a zoom icon (+) in the center.
COMPONENTS:
- FeaturedImage: standalone, displays the featured image
- ZoomButton: standalone, displays the zoom button
HTML:
<div class=""relative""><FeaturedImage/><ZoomButton/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-full object-cover rounded-md""/>
ZoomButton:
<button class=""absolute bottom-4 right-4 rounded-full bg-white p-2 shadow-md""><span class=""text-2xl"">+</span></button>"
Dropdown Menu Item Icon Color,"DESCRIPTION:
The UI should be a dropdown menu item with an icon, where the icon's color can be customized.
COMPONENTS:
- DropdownMenuItemIcon: A standalone component that displays an icon with a customizable color.
- DropdownMenuItem: A component that takes children, wraps the `DropdownMenuItemIcon` component, and displays a dropdown menu item with text.
HTML:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li><DropdownMenuItem><DropdownMenuItemIcon/><span>Menu Item 1</span></DropdownMenuItem></li></ul></nav>
COMPONENT HTML:
DropdownMenuItemIcon:
<i class=""w-4 h-4 {icon_color}"" aria-hidden=""true"">{icon_name}</i>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Featured Product Variations,"DESCRIPTION:
The UI should display a featured product with variations, showcasing different options for the same product. The layout should be responsive, with a mobile-first approach, and should include accessibility features.
COMPONENTS:
- ProductHeader: A standalone component displaying the product name and rating.
- ProductImage: A standalone component displaying the product image.
- VariationSelect: A standalone component displaying a dropdown to select a product variation.
- ProductPrice: A standalone component displaying the product price.
- CallToAction: A standalone component displaying a call-to-action button.
- ProductVariationsList: A component taking children, displaying a list of product variations.
- ProductVariationItem: A component taking children, displaying a single product variation item.
HTML:
<div class=""max-w-md mx-auto""><ProductHeader/><ProductImage/><div class=""flex justify-between mb-4""><VariationSelect/><ProductPrice/></div><ProductVariationsList><ProductVariationItem>{variation_name}</ProductVariationItem><!-- repeat for each variation --></ProductVariationsList><CallToAction/></div>
COMPONENT HTML:
ProductHeader:
<div class=""mb-4""><h2 class=""text-2xl"">{product_name}</h2><p>Rating: {rating}/5</p></div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full mb-4"">
VariationSelect:
<select class=""w-full p-2 mb-4""><option value="""">Select a variation</option><!-- options will be populated dynamically --></select>
ProductPrice:
<p class=""text-lg font-bold"">${price}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
ProductVariationsList:
<ul class=""list-none mb-4"">{children}</ul>
ProductVariationItem:
<li class=""py-2 border-b border-gray-200"">{children}</li>"
No script message,"DESCRIPTION:
- The UI should display a simple message indicating that JavaScript is disabled in the user's browser, and some features of the website may not function properly without it.
COMPONENTS:
- NoScriptMessage: - A standalone component that displays a message about the absence of JavaScript.
HTML:
<noscript><NoScriptMessage/></noscript>
COMPONENT HTML:
NoScriptMessage:
<div class=""bg-red-100 border-l-4 border-red-500 text-red-700 p-4"" role=""alert""><p>Please note, this website requires JavaScript to function properly. Please enable JavaScript in your browser settings.</p></div>"
Post Feed List: Displays a list of user posts,"DESCRIPTION:
A scrollable list of posts with each post displaying the user's profile picture, username, post content, and timestamp. The list should be responsive, with each post stretching across the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- PostListItem: A standalone component for each post item in the list.
- UserProfilePicture: A standalone component for displaying a user's profile picture.
- PostContent: A standalone component for displaying the content of a post.
- PostMetadata: A standalone component for displaying the timestamp and other metadata of a post.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold"">Post Feed</h2><ul class=""divide-y divide-gray-200""><PostListItem/><PostListItem/><!-- More post list items --></ul></div>
COMPONENT HTML:
PostListItem:
<li class=""py-4""><UserProfilePicture/><div class=""flex-1 ml-4""><PostContent/><PostMetadata/></div></li>
UserProfilePicture:
<img src=""{user_profile_picture_url}"" alt=""User Profile Picture"" class=""w-10 h-10 rounded-full mr-2""/>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<p class=""text-sm text-gray-600"">{timestamp} by <span class=""font-bold"">{username}</span></p>"
Interactive Product Demo Simulation,"DESCRIPTION:
The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.
COMPONENTS:
- ProductHero: A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.
- FeatureCard: A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.
- CallToAction: A standalone component that encourages users to take a specific action, such as ""Learn More"" or ""Get Started"".
- ProductImage: A standalone component that displays a product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductHero/><section class=""flex flex-wrap justify-center mb-4""><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard></section><CallToAction/><ProductImage/></div>
COMPONENT HTML:
ProductHero:
<section class=""hero bg-cover bg-center h-screen"" style=""background-image: url('{hero_image_url}')""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl lg:text-5xl text-white"">{hero_title}</h1><p class=""text-lg lg:text-2xl text-white"">{hero_subtitle}</p></div></section>
FeatureCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><div slot=""content"">{children}</div><CallToAction/></div>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProductImage:
<img class=""w-full lg:w-1/2 xl:w-1/3 mx-auto"" src=""{product_image_url}"" alt=""{product_image_alt_text}"">"
Notification Alerts/Badges,"DESCRIPTION:
The UI should have a notification badge/alert that displays a small circle or rectangle with a number or a message inside, usually indicating the number of notifications, messages, or updates.
COMPONENTS:
- NotificationBadge: (standalone) - a small circle or rectangle displaying a number or message
- NotificationAlert: (standalone) - a small notification message with an icon and text
HTML:
<nav class=""flex items-center justify-between py-4""><ul class=""flex items-center""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><NotificationBadge/><!-- notification badge --></a></li></ul><NotificationAlert/><!-- notification alert --></nav>
COMPONENT HTML:
NotificationBadge:
<span class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notification_count}</span>
NotificationAlert:
<div class=""bg-orange-200 p-2 rounded border-l-4 border-orange-500""><i class=""fas fa-bell mr-2 text-orange-500""></i><span>{notification_message}</span></div>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply input field with editing tools. The editing tools include a bold button, an italic button, and a link button. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostReplyInput: standalone component
- EditingTools: standalone component
- BoldButton: standalone component
- ItalicButton: standalone component
- LinkButton: standalone component
HTML:
<div class=""flex flex-col""><PostReplyInput/><EditingTools/></div>
COMPONENT HTML:
PostReplyInput:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between mb-2""><BoldButton/><ItalicButton/><LinkButton/></div>
BoldButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-bold"">{bold_icon}</i></button>
ItalicButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-italic"">{italic_icon}</i></button>
LinkButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-link"">{link_icon}</i></button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Email composition window with formatting options,"DESCRIPTION:
- The UI should feature a main area for typing out the email, surrounded by formatting tools such as font styles (bold, italics, underline), alignment options (left, center, right), and buttons for attaching files and sending the email. The layout must be clean and intuitive, with formatting tools accessible at the top or side of the composition area.
COMPONENTS:
- Toolbar: Standalone component. This will house all the formatting options like bold, italic, underline, and alignment.
- TextArea: Standalone component. A resizable textarea where the user can type the email.
- ActionButton: Standalone component. This will be used for buttons like 'Send' and 'Attach file'.
HTML:
<div class=""flex flex-col p-4""><!-- Toolbar with formatting options --><Toolbar/><!-- TextArea for email composition --><TextArea/><!-- Action buttons for sending and attaching files --><div class=""flex justify-end space-x-2 mt-4""><ActionButton/><ActionButton/></div></div>
COMPONENT HTML:
Toolbar:
<div class=""flex gap-2 border-b py-2""><button class=""p-2 hover:bg-gray-200"">Bold</button><button class=""p-2 hover:bg-gray-200"">Italic</button><button class=""p-2 hover:bg-gray-200"">Underline</button><button class=""p-2 hover:bg-gray-200"">Left Align</button><button class=""p-2 hover:bg-gray-200"">Center Align</button><button class=""p-2 hover:bg-gray-200"">Right Align</button></div>
TextArea:
<textarea class=""mt-4 p-4 w-full h-64 border resize-none focus:ring-2 focus:ring-blue-300 outline-none"" placeholder=""Compose your email...""></textarea>
ActionButton:
<button class=""bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"">{button_text} </button>"
Drag-and-Drop Interfaces,"DESCRIPTION:
A drag-and-drop interface with a drop zone, a list of draggable items, and a button to clear the drop zone.
COMPONENTS:
- DraggableItem: - standalone: A single item that can be dragged and dropped.
- DropZone: - takes children: The area where items can be dropped.
- ClearButton: - standalone: A button to clear the drop zone.
HTML:
<div class=""flex h-screen""><div class=""flex-1 overflow-y-auto""><!-- List of draggable items --><ul class=""space-y-2""><DraggableItem/><DraggableItem/><DraggableItem/></ul></div><div class=""flex-1 border""><!-- Drop zone --><DropZone><!-- dropped items will be rendered here --></DropZone></div><ClearButton/></div>
COMPONENT HTML:
DraggableItem:
<div class=""bg-white shadow-md p-2 rounded""><p>{item_name}</p></div>
DropZone:
<div class=""h-full p-4 border-dashed border-2"">{children}</div>
ClearButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Clear</button>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Rating and Review Systems,"DESCRIPTION:
The UI should display a rating system with 5 stars, allowing users to select a rating from 1 to 5. Below the rating system, there should be a text area for users to leave a review. The review section should also display the overall rating and the total number of reviews.
COMPONENTS:
- RatingSystem: Standalone component that displays the 5-star rating system.
- ReviewInput: Standalone component that displays a text area for users to leave a review.
- ReviewSummary: Standalone component that displays the overall rating and the total number of reviews.
- ReviewSection: Component that takes children, which contains the `ReviewInput` and `ReviewSummary` components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white shadow-md rounded""><RatingSystem/><ReviewSection><ReviewInput/><ReviewSummary/></ReviewSection></div>
COMPONENT HTML:
RatingSystem:
<div class=""flex justify-center mb-4"">{stars}.map((star, index) =>( <i class={`cursor-pointer ${index <= rating ? 'text-yellow-400' : 'text-gray-400'} fas fa-star`}/>)) <p class=""text-sm text-gray-600"">{rating} out of 5</p></div>
ReviewInput:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Leave a review""></textarea>
ReviewSummary:
<div class=""flex justify-between mb-4""><p class=""text-sm text-gray-600"">{overall_rating} out of 5</p><p class=""text-sm text-gray-600"">{review_count} reviews</p></div>
ReviewSection:
<div class=""p-4 pt-2"">{children}</div>"
Attendee list display,"DESCRIPTION:
The UI should display a list of attendees with their names, job titles, and company names. The list should be responsive, mobile-first, and accessible. Each attendee's information should be displayed in a clear and readable format.
COMPONENTS:
- AttendeeList: A component that takes children and displays a list of attendees.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Attendee List</h2><AttendeeList><!-- attendee cards will be inserted here --></AttendeeList></div>
COMPONENT HTML:
AttendeeList:
<ul class=""list-none mb-0""><!-- attendee cards will be inserted here -->{children}</ul>"
Call-to-action buttons,"DESCRIPTION:
- The UI should feature a set of call-to-action (CTA) buttons that are visually appealing and easy to interact with. Each button should have a distinct color that stands out. The buttons should be sized appropriately for both desktop and mobile screens, with adequate padding and a hover effect for desktop users to indicate interactivity.
COMPONENTS:
- PrimaryButton: Standalone component. A button designed for the primary action, typically styled with a bold color and hover effect.
- SecondaryButton: Standalone component. A button used for secondary actions, styled differently from the primary button, usually with a less prominent color.
HTML:
<div class=""flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4 p-4""><PrimaryButton/><SecondaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Primary Action</button>
SecondaryButton:
<button class=""bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded"">Secondary Action</button>"
Responsive Video Embeds,"DESCRIPTION:
A responsive video embed that adjusts to different screen sizes, with a maximum width of 800px and a height that scales accordingly.
COMPONENTS:
- VideoEmbed: standalone component, contains the video iframe and styling.
HTML:
<div class=""max-w-md mx-auto p-4""><VideoEmbed/></div>
COMPONENT HTML:
VideoEmbed:
<!-- wrapper div for video iframe --><div class=""aspect-w-16 aspect-h-9""><!-- iframe with video content --><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
About me section with bio and profile picture,"DESCRIPTION:
The UI should be a responsive, mobile-first About Me section with a profile picture and a brief bio. The profile picture should be circular and positioned above the bio. The bio should be a short paragraphs of text.
COMPONENTS:
- AboutMeContainer: Standalone component that wraps the entire About Me section.
- ProfilePicture: Standalone component that displays the profile picture.
- Bio: Standalone component that displays the bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><AboutMeContainer/></div>
COMPONENT HTML:
AboutMeContainer:
<div class=""flex flex-col items-center md:flex-row""><ProfilePicture/><Bio/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""{profile_picture_alt}"" class=""w-24 h-24 rounded-full mb-4 md:mr-4 md:mb-0""/>
Bio:
<p class=""text-lg"">{bio_text}</p>"
Unobtrusive JavaScript,"DESCRIPTION:
A simple webpage with a heading, a paragraph of text, and a button that changes the text when clicked.
COMPONENTS:
- PageHeader: standalone
- PageContent: takes children
HTML:
<div class=""h-screen flex flex-col justify-center items-center""><PageHeader/><PageContent><p id=""text"">{initial_text}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Click me!</button></PageContent></div>
COMPONENT HTML:
PageHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">Unobtrusive JavaScript</h1></header>
PageContent:
<div class=""p-4"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should consist of a search bar with a text input field, a search button, and filters (e.g., dropdowns or checkboxes) to narrow down the search results.
COMPONENTS:
- SearchBar: standalone component that contains a text input field and a search button.
- SearchInput: standalone component that is a text input field.
- SearchButton: standalone component that is a button.
- FilterRow: component that takes children, which will be filter options (e.g., dropdowns or checkboxes).
- FilterOption: standalone component that represents a single filter option (e.g., a dropdown item or checkbox).
HTML:
<div class=""flex flex-col""><SearchBar/><FilterRow><FilterOption/><FilterOption/><!-- Add more FilterOption components as needed --></FilterRow></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white rounded-md shadow-md p-2""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""text"" class=""border border-gray-200 p-2 w-full"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-orange-500 text-white p-2 rounded-md"">Search</button>
FilterRow:
<div class=""flex flex-wrap justify-between"">{children}</div>
FilterOption:
<div class=""mr-2 mb-2""><select class=""border border-gray-200 p-2 w-full""><option value={option_value}>{option_label}</option></select></div>"
Search Bar and Filters,"DESCRIPTION:
The UI should have a search bar with a text input field and a search button. Below the search bar, there should be a filter section with checkboxes and labels. The filter section should be collapsible. The UI should be responsive and mobile-friendly.
COMPONENTS:
- SearchBar: (standalone) - a text input field and a search button.
- FilterSection: (takes children) - a collapsible section containing filter checkboxes and labels.
- FilterItem: (standalone) - a single filter checkbox and label.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/><FilterSection><FilterItem/><FilterItem/><FilterItem/></FilterSection></div>
COMPONENT HTML:
SearchBar:
<div class=""flex mb-4""><input type=""text"" class=""w-full px-2 py-1 border border-gray-200 rounded""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded"">Search</button></div>
FilterSection:
<div class=""bg-white shadow-md p-2 mb-4""><h5 class=""mb-2"">{filterInSectionTitle}</h5><div class=""flex flex-wrap"">{children} </div></div>
FilterItem:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterItemId}"" class=""mr-2""/><label for=""{filterItemId}"" class=""text-sm"">{filterItemLabel}</label></div>"
Quote captions,"DESCRIPTION:
- The UI should feature a centered quote with its respective caption directly below it. The quote should be prominently displayed, perhaps in a larger or italicized font, to distinguish it from the caption. The caption, which provides attribution or context to the quote, should be smaller or in a regular font style. The overall design should be minimalist, focusing on text readability.
COMPONENTS:
- QuoteBlock: A standalone component that includes the quote and the caption.
HTML:
<div class=""flex justify-center items-center h-screen""><QuoteBlock/></div>
COMPONENT HTML:
QuoteBlock:
<div class=""max-w-xl p-4""><p class=""text-xl italic text-gray-800"">""{quote_text}""</p><p class=""text-right text-sm text-gray-600"">— {author_name}</p></div>"
Geo-location Map Markers,"DESCRIPTION:
A responsive map with geo-location markers displaying locations on a map. The map should be accessible, with keyboard navigation and screen reader compatibility. The UI should be mobile-first, with a clean and minimal design.
COMPONENTS:
- MapContainer: Standalone component that wraps the map.
- Marker: Standalone component representing a location on the map.
- MarkerPopup: Component that displays information about a location when a marker is clicked. Takes children.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><MapContainer/></div>
COMPONENT HTML:
MapContainer:
<div class=""h-full w-full rounded-lg overflow-hidden""><div class=""leaflet-container"" id=""map""></div></div>
Marker:
<div class=""marker""><span class=""marker-icon"">{marker_icon}</span><span class=""marker-tooltip"">{marker_tooltip}</span></div>
MarkerPopup:
<div class=""popup flex flex-col p-4 bg-white rounded-lg shadow-md""><h2 class=""text-lg font-bold"">{location_name}</h2><p>{location_description}</p>{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A profile picture with a dropdown menu that appears when the profile picture is clicked. The dropdown menu should contain several options.
COMPONENTS:
- ProfilePicture: (standalone)
- DropdownMenu: (takes children)
- MenuItem: (standalone)
HTML:
<div class=""flex justify-end""><ProfilePicture/><DropdownMenu><MenuItem/><MenuItem/><MenuItem/></DropdownMenu></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} class=""w-8 h-8 rounded-full cursor-pointer""/>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md"">{children}</div>
MenuItem:
<a href={menu_item_url} class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">{menu_item_text}</a>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Date and time,"DESCRIPTION:
The UI should display the current date and time in a clear and readable format.
COMPONENTS:
- DateTimeDisplay: A standalone component that displays the current date and time.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><DateTimeDisplay/></div>
COMPONENT HTML:
DateTimeDisplay:
<div class=""text-lg md:text-xl lg:text-2xl font-bold"">{date}, {time}</div>"
Warning message displayed within the context of a form or interface element,"DESCRIPTION:
The UI should display a warning message in a distinctive style to grab the user's attention, within the context of a form or interface element. The warning message should be easily readable and accessible.
COMPONENTS:
- WarningMessage: A standalone component that displays a warning message.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><!-- Form or interface element content --><WarningMessage/><!-- Rest of the form or interface element content --></div>
COMPONENT HTML:
WarningMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 mb-4"" role=""alert""><p class=""mb-2"">{warning_message}</p></div>"
Countdown controls,"DESCRIPTION:
The UI should display a countdown timer with controls to play, pause, and reset the timer. The timer should display the time in hours, minutes, and seconds. The play and pause buttons should toggle between playing and pausing the timer, and the reset button should reset the timer to its initial state.
COMPONENTS:
- CountdownTimer: Standalone component that displays the time in hours, minutes, and seconds.
- PlayPauseButton: Standalone component that toggles between play and pause states.
- ResetButton: Standalone component that resets the timer to its initial state.
- CountdownControls: Component that wraps the PlayPauseButton and ResetButton, takes children.
HTML:
<div class=""flex flex-col gap-4""><CountdownTimer/><CountdownControls><PlayPauseButton/><ResetButton/></CountdownControls></div>
COMPONENT HTML:
CountdownTimer:
<div class=""text-3xl font-bold"">{hours}:{minutes}:{seconds}</div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playPauseText}</button>
ResetButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Reset</button>
CountdownControls:
<div class=""flex gap-2"">{children}</div>"
Team or colleagues section with photos and bios,"DESCRIPTION:
The UI should display a team or colleagues section with a grid of members, each displaying a photo, name, and bio. The grid should be responsive and adapt to different screen sizes. On mobile devices, the grid should display one member per row, and on larger devices, it should display multiple members per row.
COMPONENTS:
- TeamMemberCard: A standalone component that displays a single team member's photo, name, and bio.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Our Team</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/><!-- Add more TeamMemberCard components as needed --></div></section>
COMPONENT HTML:
TeamMemberCard:
<div class=""bg-white p-4 rounded shadow-md""><img src={photo_url} alt={name} class=""w-32 h-32 rounded-full mb-4""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>"
Team or colleagues section with photos and bios,"DESCRIPTION:
The UI should display a section showcasing team members or colleagues with their photos and bios in a grid layout. The section should be responsive, with the grid adapting to different screen sizes. On mobile, the grid should display one column, and on larger screens, it should display multiple columns.
COMPONENTS:
- TeamMemberCard: (standalone) - displays a single team member's photo and bio.
- TeamSection: (takes children) - wraps the team members in a container with a header.
HTML:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-3xl font-bold mb-4"">Our Team</h2><TeamSection><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/><!-- add more TeamMemberCard components as needed --></TeamSection></section>
COMPONENT HTML:
TeamMemberCard:
<div class=""flex flex-col items-center mb-8 md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src={profile_photo_url} alt=""{name}"" class=""w-24 h-24 rounded-full mb-4""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>
TeamSection:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Progress indicator spinner,"DESCRIPTION:
A circular progress indicator spinner that fills up as progress is made. The spinner should be responsive and accessible.
COMPONENTS:
- ProgressSpinner: A standalone component that displays a circular progress indicator spinner.
HTML:
<div class=""flex justify-center mb-4""><ProgressSpinner/></div>
COMPONENT HTML:
ProgressSpinner:
<div class=""w-12 h-12 border-4 border-gray-200 border-solid rounded-full animate-spin""><!-- Spinner icon --><div class=""w-full h-full border-2 border-gray-200 border-solid rounded-full""></div><!-- Progress fill --><div class=""absolute w-full h-full border-2 border-gray-200 border-solid rounded-full"" style={`--progress: ${progressPercentage}%`}><div class=""w-full h-full border-2 border-gray-200 border-solid rounded-full""></div></div></div>"
"Horizontal strip typically used for displaying badges, labels, or status indicators","DESCRIPTION:
A horizontal strip with a colored background and text, often used to display badges, labels, or status indicators.
COMPONENTS:
- StatusIndicator: A standalone component that displays a colored strip with text.
HTML:
<div class=""flex justify-center mb-4""><StatusIndicator/></div>
COMPONENT HTML:
StatusIndicator:
<span class=""inline-block bg-{color} px-2 py-1 text-sm text-white rounded"">{label}</span>"
Inputs (text),"DESCRIPTION:
A basic text input field with a label, allowing users to enter a single line of text.
COMPONENTS:
- InputLabel: standalone, displays a label for the input field
- TextInput: standalone, a single-line text input field
HTML:
<div class=""flex flex-col gap-2""><InputLabel/><TextInput/></div>
COMPONENT HTML:
InputLabel:
<label for=""{input_id}"" class=""text-sm"">{label_text}</label>
TextInput:
<input type=""text"" id=""{input_id}"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/>"
Interface for selecting tags or categories from a predefined list,"DESCRIPTION:
The UI should be a dropdown list of tags or categories. The list should be searchable, and users should be able to select multiple items.
COMPONENTS:
- TagSelector: A dropdown list of tags or categories. Takes children.
- TagOption: A single tag or category option. Standalone.
HTML:
<div class=""flex flex-wrap justify-center mx-auto max-w-md p-4""><TagSelector><!-- dropdown list of tags or categories --></TagSelector></div>
COMPONENT HTML:
TagSelector:
<div class=""relative""><input type=""text"" placeholder=""Search..."" class=""w-full pl-4 pr-10 py-2 border border-gray-300 rounded""/><ul class=""absolute z-10 w-full bg-white shadow-md"">{children} </ul></div>
TagOption:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{tag_id}"" value=""{tag_name}"" class=""mr-2""/><label htmlFor=""{tag_id}"">{tag_name}</label></li>"
Profile avatar display,"DESCRIPTION:
The UI should display a circular profile avatar with a name and a brief description below it. The avatar should be responsive and mobile-friendly.
COMPONENTS:
- ProfileAvatar: (standalone): Displays a circular avatar image
- ProfileInfo: (takes children): Displays the name and description of the profile
HTML:
<div class=""flex flex-col items-center mb-4""><ProfileAvatar/><ProfileInfo><p class=""text-lg"">{profile_name}</p><p class=""text-sm text-gray-500"">{profile_description}</p></ProfileInfo></div>
COMPONENT HTML:
ProfileAvatar:
<img src={avatar_url} alt=""Profile Avatar"" class=""w-24 h-24 rounded-full object-cover""/>
ProfileInfo:
<div class=""text-center"">{children}</div>"
Page Content Text,"DESCRIPTION:
The UI should display a page content text component, which contains a heading and a paragraph of text, with proper margin and padding for readability.
COMPONENTS:
- PageContentText: A standalone component that displays a heading and a paragraph of text.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><PageContentText/></div>
COMPONENT HTML:
PageContentText:
<div class=""mb-4""><h2 class=""text-lg font-bold mb-2"">{heading}</h2><p class=""text-gray-600"">{text}</p></div>"
Download button for files,"DESCRIPTION:
The UI should feature a download button, prominently displayed, typically with an icon indicating a down-arrow or similar to suggest ""download"". It should be easily accessible, with clear labeling for accessibility purposes.
COMPONENTS:
- DownloadButton: Standalone component.
HTML:
<div class=""p-4""><DownloadButton/></div>
COMPONENT HTML:
DownloadButton:
<a href=""{file_url}"" class=""inline-block px-4 py-2 bg-blue-500 text-white font-semibold text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"" download=""{file_name}"">Download </a>"
Comment Section,"DESCRIPTION:
The comment section should display a list of comments with the commenter's name, profile picture, comment text, and a timestamp. The section should be responsive, with the profile picture and commenter's name on the same line on larger screens, and stacked on top of each other on smaller screens.
COMPONENTS:
- CommentCard: (standalone): A single comment with the commenter's name, profile picture, comment text, and timestamp.
- CommentList: (takes children): A list of `CommentCard` components.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Comments</h2><CommentList><CommentCard/><CommentCard/><!-- Add more CommentCard components here --></CommentList></div>
COMPONENT HTML:
CommentCard:
<div class=""flex items-start mb-4""><img src=""{profile_picture_url}"" alt=""{commenter_name}"" class=""w-12 h-12 rounded-full mr-4""/><div><h3 class=""text-sm font-bold"">{commenter_name}</h3><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-500"">{timestamp}</p></div></div>
CommentList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shadows (drop),"DESCRIPTION:
The UI should display a dropdown menu with a shadow effect when the dropdown is opened. The dropdown should be responsive and accessible.
COMPONENTS:
- DropdownButton: standalone component that triggers the dropdown menu.
- DropdownMenu: takes children, contains the dropdown menu items.
HTML:
<div class=""relative""><DropdownButton/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded"">{button_text}</button>
DropdownMenu:
<div class=""absolute z-10 bg-white shadow-md rounded px-4 py-2"">{children}</div>"
Confetti,"DESCRIPTION:
The UI should be a colorful and celebratory confetti design, with multiple strips of colorful paper scraps falling from the top of the screen to the bottom, creating a joyful and festive atmosphere.
COMPONENTS:
- ConfettiStrip: A standalone component representing a single strip of confetti paper.
- ConfettiContainer: A container component that takes children.
HTML:
<div class=""h-screen w-full bg-white overflow-hidden""><ConfettiContainer><ConfettiStrip/><ConfettiStrip/><ConfettiStrip/><!-- Add more ConfettiStrip components here --></ConfettiContainer></div>
COMPONENT HTML:
ConfettiStrip:
<div class=""absolute top-0 w-2 h-20 bg-{color} shadow-md"" style={{ left: `${Math.random() * 100}%`, animation: 'fall 2s infinite', }}>{/* Add some randomness to the strip's color and animation delay */} <style>{` @keyframes fall { 0% { transform: translateY(-100%); } 100% { transform: translateY(100vh); } } `}</style></div>
ConfettiContainer:
<div class=""relative h-screen w-full overflow-hidden"" aria-label=""Confetti container"">{children}</div>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The search bar should be a simple input field with a search icon on the left and a clear button on the right. It should be full-width on mobile devices and have a maximum width on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and clear button.
- SearchIcon: standalone component that displays a search icon.
- ClearButton: standalone component that displays a clear button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full rounded-md border border-gray-300""><SearchIcon/><input type=""search"" class=""w-full pl-8 pr-4 py-2"" placeholder=""Search...""/><ClearButton/></div>
SearchIcon:
<span class=""text-gray-400 text-lg""><!-- search icon will go here --></span>
ClearButton:
<button class=""text-gray-400 hover:text-gray-600 transition duration-300""><!-- clear icon will go here --></button>"
Account settings page,"DESCRIPTION:
The UI should be a responsive, mobile-first settings page that displays the user's account information and allows them to update their settings. The page should have a simple and clean design, with clear headings and labels for each setting.
COMPONENTS:
- AccountHeader: a standalone component that displays the user's account information (e.g. name, email)
- SettingSection: a component that takes children, representing a group of related settings
- SettingItem: a component that takes children, representing a single setting (e.g. password, language)
- UpdateButton: a standalone component that triggers an update action
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><AccountHeader/><section class=""mb-8""><h2 class=""text-lg font-bold mb-4"">Account Settings</h2><SettingSection><SettingItem><label for=""username"">Username:</label><input type=""text"" id=""username"" value={username}/></SettingItem><SettingItem><label for=""email"">Email:</label><input type=""email"" id=""email"" value={email}/></SettingItem></SettingSection><SettingSection><SettingItem><label for=""password"">Password:</label><input type=""password"" id=""password"" value={password}/></SettingItem><SettingItem><label for=""language"">Language:</label><select id=""language""><option value=""en"">English</option><option value=""es"">Spanish</option><!-- more options --></select></SettingItem></SettingSection><UpdateButton/></section></div>
COMPONENT HTML:
AccountHeader:
<header class=""flex justify-between mb-4""><h1>{username}</h1><p>{email}</p></header>
SettingSection:
<section class=""mb-4"">{children}</section>
SettingItem:
<div class=""mb-2"">{children}</div>
UpdateButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Update Settings</button>"
Message input field with send button and emoji picker,"DESCRIPTION:
The UI should be a message input field with a send button and an emoji picker. The input field should be responsive and mobile-friendly. The send button should be enabled only when the input field has some text. The emoji picker should be a dropdown list that appears when the user clicks on the emoji icon. The UI should be accessible, with clear labels and high contrast colors.
COMPONENTS:
- MessageInputField: standalone component that renders an input field.
- SendButton: standalone component that renders a button.
- EmojiPicker: standalone component that renders a dropdown list of emojis.
- EmojiPickerTrigger: takes children, renders a button that toggles the emoji picker dropdown.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><MessageInputField/><SendButton/><EmojiPickerTrigger><EmojiPicker/></EmojiPickerTrigger></div>
COMPONENT HTML:
MessageInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type a message...""/>
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={isDisabled}>Send</button>
EmojiPicker:
<ul class=""absolute bg-white rounded shadow-md p-2"">{emojis.map((emoji) =>( <li class=""py-2 px-4 hover:bg-gray-100"">{emoji}</li>))}</ul>
EmojiPickerTrigger:
<button class=""p-2 hover:bg-gray-100 rounded text-lg"">{children}</button>"
Message input field with send button and emoji picker,"DESCRIPTION:
A message input field with a send button on the right side, and an emoji picker button on the left side of the input field.
COMPONENTS:
- EmojiPickerButton: standalone component that renders an emoji picker
- SendButton: standalone component that renders a send button
- MessageInputField: component that takes children
HTML:
<div class=""flex items-center bg-white py-2 px-4 rounded-lg""><EmojiPickerButton/><MessageInputField><input type=""text"" class=""px-2 py-1 w-full""/><SendButton/></MessageInputField></div>
COMPONENT HTML:
EmojiPickerButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">😊</button>
SendButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{sendButtonText}</button>
MessageInputField:
<div class=""flex items-center"">{children}</div>"
Carousel-like element for browsing through a series of images,"DESCRIPTION:
The UI should resemble a carousel, with a series of images displayed in a horizontal row. The user can navigate through the images using previous and next buttons or by clicking on dots that represent each image. The carousel should be responsive, with the images resizing to fit the container width. On smaller screens, the carousel should display a single image at a time, with navigation controls to swipe through the images.
COMPONENTS:
- ImageSlide: A standalone component that displays a single image.
- CarouselDots: A standalone component that displays a series of dots, one for each image in the carousel.
- CarouselNav: A standalone component that displays previous and next navigation buttons.
- CarouselContainer: A component that takes children (ImageSlide components) and displays them in a horizontal row.
HTML:
<div class=""max-w-md mx-auto p-4 sm:p-6 lg:p-8""><CarouselContainer><ImageSlide/><ImageSlide/><ImageSlide/><!-- Add more ImageSlide components here --></CarouselContainer><CarouselNav/><CarouselDots/></div>
COMPONENT HTML:
ImageSlide:
<div class=""w-full h-64 bg-cover bg-center"" style={{ backgroundImage: `url(${image_url})` }}></div>
CarouselDots:
<div class=""flex justify-center mb-4"">{num_images} dots, where each dot is a `<span class=""w-2 h-2 bg-gray-300 rounded-full mx-1"">`</div>
CarouselNav:
<div class=""flex justify-between mb-4""><button class=""text-gray-600 hover:text-gray-900"">Previous</button><button class=""text-gray-600 hover:text-gray-900"">Next</button></div>
CarouselContainer:
<div class=""flex overflow-x-hidden"">{children}</div>"
Expanded dropdown menu displaying multiple levels of navigation or content,"DESCRIPTION:
The UI should display a dropdown menu that expands to show multiple levels of navigation or content. The menu should be responsive, mobile-first, and accessible. On hover or click, the menu should expand to show the nested levels of navigation or content.
COMPONENTS:
- DropdownTrigger: (standalone) - The trigger element to expand/collapse the dropdown menu.
- DropdownMenu: (takes children) - The container for the dropdown menu.
- DropdownItem: (takes children) - A single item in the dropdown menu, which can contain nested items.
HTML:
<nav class=""flex justify-center""><DropdownTrigger/><DropdownMenu><DropdownItem>Item 1</DropdownItem><DropdownItem>Item 2
<DropdownMenu><DropdownItem>Nested Item 2.1</DropdownItem><DropdownItem>Nested Item 2.2</DropdownItem></DropdownMenu></DropdownItem><DropdownItem>Item 3</DropdownItem></DropdownMenu></nav>
COMPONENT HTML:
DropdownTrigger:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{trigger_text} <span class=""caret ml-2""></span></button>
DropdownMenu:
<ul class=""absolute bg-white shadow-md py-2 w-48"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""#"" class=""text-gray-800"">{item_text}</a>{children}</li>"
Author bio display,"DESCRIPTION:
The UI should display an author's bio, including their name, profile picture, bio text, and social media links. The layout should be responsive, with the profile picture above the bio text on mobile devices and to the left of the bio text on larger screens.
COMPONENTS:
- SocialMediaLinks: standalone component
- ProfilePicture: standalone component
HTML:
<div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/3 xl:w-1/4 px-4 mb-4 md:mb-0""><ProfilePicture/></div><div class=""w-full md:w-2/3 xl:w-3/4 px-4""><h2 class=""text-lg font-bold"">{author_name}</h2><p class=""text-gray-600"">{bio_text}</p><SocialMediaLinks/></div></div>
COMPONENT HTML:
SocialMediaLinks:
<ul class=""flex justify-start mb-4""><li class=""mr-4""><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer"">Twitter</a></li><li class=""mr-4""><a href=""{linkedin_url}"" target=""_blank"" rel=""noopener noreferrer"">LinkedIn</a></li><li><a href=""{github_url}"" target=""_blank"" rel=""noopener noreferrer"">GitHub</a></li></ul>
ProfilePicture:
<img class=""w-24 h-24 rounded-full mb-4"" src=""{profile_picture_url}"" alt=""{author_name}'s profile picture""/>"
Real-time feedback on form input validity as users type,"DESCRIPTION:
The UI should display a form with a single input field and a submit button. As the user types, the input field should display real-time feedback on the input validity, with green text indicating valid input and red text indicating invalid input.
COMPONENTS:
- InputField: A standalone component that renders a single input field with real-time feedback on input validity.
- FormButton: A standalone component that renders a submit button.
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><form><InputField/><FormButton/></form></div>
COMPONENT HTML:
InputField:
<div class=""mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your input"" aria-invalid={inputInvalid}/>{inputInvalid ? ( <p class=""text-xs text-red-600"">{invalidFeedback}</p>) : ( <p class=""text-xs text-green-600"">{validFeedback}</p>)}</div>
FormButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={inputInvalid}>Submit</button>"
Headings and subheadings,"DESCRIPTION:
The UI should display a heading and subheading in a responsive and accessible manner, using a clean and minimalistic design.
COMPONENTS:
- Heading: A standalone component that displays a heading.
- Subheading: A standalone component that displays a subheading.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><Heading/><Subheading/></div>
COMPONENT HTML:
Heading:
<h1 class=""text-3xl font-bold mb-4"">{heading_text}</h1>
Subheading:
<p class=""text-lg text-gray-600 mb-8"">{subheading_text}</p>"
Header User Dropdown,"DESCRIPTION:
The UI should display a dropdown menu when the user clicks on their profile picture or username in the header. The dropdown menu should contain links to the user's profile, account settings, and a logout button.
COMPONENTS:
- Header: A standalone component that contains the header layout with a profile dropdown.
- UserProfileDropdown: A component that takes children and renders a dropdown menu with links to the user's profile and account settings, and a logout button.
- DropdownLink: A standalone component that renders a single link inside the dropdown menu.
HTML:
<header class=""fixed top-0 left-0 w-full bg-white shadow-md""><nav class=""container mx-auto p-4 flex justify-between""><!-- logo and navigation --><a href=""#"" class=""text-xl"">Logo</a><ul class=""flex""><li><a href=""#"" class=""mr-4"">Link 1</a></li><li><a href=""#"" class=""mr-4"">Link 2</a></li></ul><!-- user profile dropdown --><div class=""relative""><UserProfileDropdown/></div></nav></header>
COMPONENT HTML:
Header:
<nav class=""container mx-auto p-4 flex justify-between""><!-- logo and navigation --><a href=""#"" class=""text-xl"">Logo</a><ul class=""flex""><li><a href=""#"" class=""mr-4"">Link 1</a></li><li><a href=""#"" class=""mr-4"">Link 2</a></li></ul><!-- user profile dropdown --><div class=""relative""><UserProfileDropdown/></div></nav>
UserProfileDropdown:
<div class=""absolute top-full right-0 w-48 bg-white shadow-md""><ul>{children} </ul></div>
DropdownLink:
<li><a href=""#"" class=""block py-2 px-4"">{link_text}</a></li>"
Alerts (warning),"DESCRIPTION:
The UI should include an alert notification that communicates a warning to users. The alert will typically be highlighted with colors that designate caution, such as yellow or orange, and contain a clear and concise message.
COMPONENTS:
- AlertBox: (Standalone)**: This is the container for the alert message. It is styled to draw attention and indicate the warning status.
HTML:
<div class=""main-content""><AlertBox/></div>
COMPONENT HTML:
AlertBox:
<div role=""alert"" class=""p-4 mb-4 bg-yellow-200 text-yellow-800 border-l-4 border-yellow-600""><p>{warningMessage}</p></div>"
Success message display,"DESCRIPTION:
The UI should be a simple success message display component that shows a checkmark icon, a success message, and an optional sub-message. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- SuccessMessageDisplay: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 bg-green-100 rounded-lg shadow-md""><SuccessMessageDisplay/></div>
COMPONENT HTML:
SuccessMessageDisplay:
<div class=""flex items-center mb-2""><span class=""text-green-600 text-2xl mr-2""><i class=""fas fa-check-circle""></i></span><div class=""text-lg leading-relaxed"">{message}</div></div>{subMessage && ( <p class=""text-sm text-gray-600"">{subMessage}</p>)}"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
The UI should display a server icon and name, with a dropdown menu that appears when the user clicks on the icon or name.
COMPONENTS:
- ServerIcon: standalone component that displays a server icon
- ServerName: standalone component that displays the server name
- DropdownMenu: component that takes children, which are the menu items
HTML:
<div class=""flex items-center""><ServerIcon/><ServerName/><div class=""hidden lg:block""><DropdownMenu><!-- menu items will be inserted here --></DropdownMenu></div></div>
COMPONENT HTML:
ServerIcon:
<i class=""fas fa-server text-lg""></i>
ServerName:
<span>{server_name}</span>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md shadow-md"">{children}</div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Password Strength Meters,"DESCRIPTION:
The UI should display a password input field with a meter below it that indicates the strength of the password. The meter should have a color indicator (e.g., green for strong, yellow for medium, red for weak) and a text indicator (e.g., ""Strong"", ""Medium"", ""Weak"").
COMPONENTS:
- PasswordInput: standalone, a single-line text input field for entering a password
- PasswordStrengthMeter: takes children, displays the password strength meter with a color indicator and text indicator
- StrengthIndicator: standalone, a colored bar indicating the password strength
- StrengthText: standalone, a text indicator of the password strength (e.g., ""Strong"", ""Medium"", ""Weak"")
HTML:
<div class=""flex flex-col max-w-md mx-auto p-4""><PasswordInput/><PasswordStrengthMeter><StrengthIndicator/><StrengthText/></PasswordStrengthMeter></div>
COMPONENT HTML:
PasswordInput:
<input type=""password"" class=""w-full p-2 border border-gray-300 rounded""/>
PasswordStrengthMeter:
<div class=""flex items-center mb-2"">{children}</div>
StrengthIndicator:
<div class=""h-2 w-full {strength_color} rounded""></div><!-- strength_color is a dynamic class that changes based on password strength -->
StrengthText:
<p class=""text-sm"">{strength_text}</p><!-- strength_text is a dynamic text that changes based on password strength -->"
Counter controls,"DESCRIPTION:
The UI consists of a simple counter feature with three main elements:
   - A display section that shows the current count.
   - A ""+"" button to increment the count.
   - A ""-"" button to decrement the count.

   The design should be visually straightforward, with large text for the count and easily clickable buttons for incrementing and decrementing. It should be optimized for accessibility, ensuring the buttons are accessible for keyboard navigation and screen readers.
COMPONENTS:
- CounterDisplay: (Standalone): Displays the current count.
- IncrementButton: (Standalone): A button designed to increase the count.
- DecrementButton: (Standalone): A button designed to decrease the count.
HTML:
<div class=""flex flex-col items-center space-y-3 p-5""><CounterDisplay/><div class=""flex space-x-2""><IncrementButton/><DecrementButton/></div></div>
COMPONENT HTML:
CounterDisplay:
<div class=""text-2xl font-semibold"" aria-live=""polite"">{count} </div>
IncrementButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Increment count"">+ </button>
DecrementButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Decrement count"">- </button>"
Alert Close Button,"DESCRIPTION:
The UI should be a small, rounded, and removable alert message with a close button on the right side. The close button should be a small ""x"" icon.
COMPONENTS:
- AlertMessage: standalone component that renders the alert message
- CloseButton: standalone component that renders the close button
HTML:
<div class=""alert flex items-center justify-between py-2 px-4 mb-2""><AlertMessage/><CloseButton/></div>
COMPONENT HTML:
AlertMessage:
<p class=""text-sm"">{message}</p>
CloseButton:
<button class=""bg-transparent hover:bg-gray-200 text-gray-400 hover:text-gray-600 rounded-full p-2""><span aria-hidden=""true"">×</span></button>"
Alert Close Button,"DESCRIPTION:
The UI should be a close button for an alert message, which is a small ""x"" icon on the top-right corner of the alert box. The button should be responsive and accessible.
COMPONENTS:
- AlertCloseButton: (standalone)
HTML:
<div class=""alert""><AlertCloseButton/><!-- alert message content here --></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""text-gray-400 hover:text-gray-500 transition duration-300 ease-in-out""><span aria-hidden=""true"">×</span><span class=""sr-only"">Close</span></button>"
Alert Close Button,"DESCRIPTION:
A small, rounded button with an ""X"" icon, typically used to close an alert or notification.
COMPONENTS:
- AlertCloseButton: (Standalone)
HTML:
<button class=""alert-close-button""><AlertCloseButton/></button>
COMPONENT HTML:
AlertCloseButton:
<button class=""p-2 rounded text-gray-500 hover:text-gray-800 transition""><span aria-hidden=""true"">×</span></button>"
Pinned messages with timestamp and author display,"DESCRIPTION:
The UI should display a list of pinned messages, each with a timestamp and author information. The messages should be displayed in a clean and readable format, with the timestamp and author information clearly visible.
COMPONENTS:
- PinnedMessage: A standalone component that displays a single pinned message, including the message text, timestamp, and author information.
- PinnedMessageList: A component that takes children, which is a list of `PinnedMessage` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Pinned Messages</h2><PinnedMessageList><PinnedMessage/><PinnedMessage/><!-- additional pinned messages here --></PinnedMessageList></div>
COMPONENT HTML:
PinnedMessage:
<div class=""flex items-center mb-2""><span class=""text-gray-600"">{author_name}</span><span class=""text-gray-400 text-sm ml-2"">{timestamp}</span><p class=""ml-4"">{message_text}</p></div>
PinnedMessageList:
<ul class=""list-none mb-0"">{children}</ul>"
Pinned messages with timestamp and author display,"DESCRIPTION:
A list of pinned messages, each with a timestamp and author display.
COMPONENTS:
- PinnedMessageList: component that takes children (a list of `PinnedMessage` components)
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Pinned Messages</h2><PinnedMessageList><!-- list of pinned messages will be rendered here --></PinnedMessageList></div>
COMPONENT HTML:
PinnedMessageList:
<div class=""space-y-2"">{children}</div>"
Survey/poll voting options,"DESCRIPTION:
The UI should display a list of voting options for a survey or poll, with each option showing the option text and a radio button to select it. The options should be stacked vertically on mobile and horizontally on larger screens.
COMPONENTS:
- SurveyOptionsList: (takes children) - a container for a list of `SurveyOption` components
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold"">{survey_title}</h2><SurveyOptionsList><!-- survey options will be inserted here --></SurveyOptionsList></div>
COMPONENT HTML:
SurveyOptionsList:
<ul class=""flex flex-wrap justify-center md:flex-no-wrap md:flex-row"">{children}</ul>"
Survey/poll voting options,"DESCRIPTION:
The UI should display a series of voting options, each with a label and a radio button. The options should be listed vertically on mobile devices and horizontally on larger screens. Each option should have a clear and accessible label, and the radio buttons should be easily clickable. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- VotingOption: (standalone): A single voting option with a label and a radio button.
- VotingOptions: (takes children): A container for multiple `VotingOption` components.
HTML:
<div class=""flex flex-wrap justify-center""><VotingOptions><VotingOption/><VotingOption/><VotingOption/></VotingOptions></div>
COMPONENT HTML:
VotingOption:
<label class=""block mb-2""><input type=""radio"" name=""votingOptions"" class=""mr-2""/><span class=""text-lg"">{option_label}</span></label>
VotingOptions:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Dropdown Menu Title,"DESCRIPTION:
The UI should be a dropdown menu title that displays a title and an arrow icon indicating that it can be expanded to show more options. When clicked, the dropdown menu will display a list of options.
COMPONENTS:
- DropdownMenuTitle: (standalone): A dropdown menu title component that displays a title and an arrow icon.
- DropdownMenuArrow: (standalone): An arrow icon that indicates the dropdown menu can be expanded.
HTML:
<div class=""flex justify-between items-center py-2 pl-4 pr-2""><DropdownMenuTitle/><DropdownMenuArrow/></div>
COMPONENT HTML:
DropdownMenuTitle:
<h5 class=""text-lg font-bold"">{title}</h5>
DropdownMenuArrow:
<i class=""fas fa-chevron-down text-lg""></i>"
Dropdown Menu Title,"DESCRIPTION:
The Dropdown Menu Title UI should be a dropdown menu title element that displays a title and a dropdown icon, indicating that there are more options available. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- DropdownMenuTitle: a standalone component that displays the title and dropdown icon.
- DropdownIcon: a standalone component that displays the dropdown icon.
HTML:
<div class=""flex items-center justify-between""><DropdownMenuTitle/><DropdownIcon/></div>
COMPONENT HTML:
DropdownMenuTitle:
<p class=""text-lg font-bold"">{menu_title}</p>
DropdownIcon:
<span class=""material-icons"">arrow_drop_down</span>"
Chat/messaging interface,"DESCRIPTION:
The UI should display a list of chat messages, with each message showing the sender's name, the message text, and a timestamp. The UI should also include a text input field for composing new messages and a ""Send"" button to send the message.
COMPONENTS:
- ChatInput: A standalone component that contains a text input field and a ""Send"" button for composing new messages.
- ChatList: A component that takes children (i.e., multiple `ChatMessage` components) and displays them in a list.
HTML:
<div class=""flex h-screen max-h-screen overflow-hidden""><div class=""flex-1 overflow-y-auto p-4""><ChatList><!-- content will be inserted here --></ChatList></div><ChatInput/></div>
COMPONENT HTML:
ChatInput:
<div class=""fixed bottom-0 left-0 w-full bg-white p-4""><input type=""text"" class=""w-full p-2"" placeholder=""Type a message...""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send </button></div>
ChatList:
<div class=""space-y-2"">{children}</div>"
JavaScript code,"DESCRIPTION:
- Since you mentioned JavaScript code, this suggests an interface that might highlight or present code snippets, ideally suited for tutorials, documentation, or code sharing platforms. This interface should feature a clean layout where code is easily readable and distinguishable from regular text.
COMPONENTS:
- CodeBlock: Standalone. This component displays a block of code with syntax highlighting styled for readability.
- PageContainer: Takes children. This component serves as the overall container that encapsulates other components, ensuring proper layout and spacing.
- Header: Standalone. Provides a labeled header to identify the type of code or the section's purpose.
HTML:
<div class=""PageContainer""><div class=""Header""></div><pre class=""CodeBlock""></pre></div>
COMPONENT HTML:
CodeBlock:
<pre class=""bg-gray-800 text-white p-4 rounded-md overflow-auto text-sm md:text-base"">{code_snippet} </pre>
PageContainer:
<div class=""max-w-4xl mx-auto py-8 px-4 md:px-6"">{children} </div>
Header:
<h1 class=""text-xl font-semibold text-gray-900 my-4"">{header_text} </h1>"
Tag Clouds/Folksonomy,"DESCRIPTION:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
COMPONENTS:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
COMPONENT HTML:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Comments,"DESCRIPTION:
A comments section with a list of comments, each with a username, comment text, and a ""Like"" button.
COMPONENTS:
- Comment: (standalone): A single comment with a username, comment text, and a ""Like"" button
- CommentsSection: (takes children): A container for the list of comments
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Comments</h2><CommentsSection><Comment/><Comment/><!-- Add more Comment components here --></CommentsSection></div>
COMPONENT HTML:
Comment:
<div class=""flex mb-4""><img class=""w-8 h-8 rounded-full mr-4"" src=""{user_avatar_url}"" alt=""{username}'s profile picture""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-base"">{comment_text}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Like</button></div></div>
CommentsSection:
<div class=""divide-y divide-gray-200"">{children}</div>"
Real-time Updates/Feeds,"DESCRIPTION:
The UI should display a real-time updates/feed section, showcasing a list of updates/feeds in a card-like layout. Each card should display the title, description, and timestamp of the update. The UI should be responsive, accessible, and mobile-first.
COMPONENTS:
- FeedList: A component that renders a list of `FeedCard`s and takes children.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Real-time Updates/Feeds</h2><FeedList><!-- Feed cards will be rendered here --></FeedList></div>
COMPONENT HTML:
FeedList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Parallax scrolling,"DESCRIPTION:
The UI should have a hero section with a background image that appears to move slower than the foreground content when the user scrolls, creating a parallax effect. The foreground content should include a heading, a subheading, and a call-to-action button.
COMPONENTS:
- HeroSection: standalone component that contains the background image and foreground content.
- ParallaxBackground: standalone component that displays the background image.
- ForegroundContent: standalone component that displays the heading, subheading, and call-to-action button.
HTML:
<div class=""h-screen w-full overflow-hidden""><HeroSection/></div>
COMPONENT HTML:
HeroSection:
<div class=""relative h-screen""><ParallaxBackground/><ForegroundContent/></div>
ParallaxBackground:
<div class=""absolute inset-0 w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroImage})` }}/>
ForegroundContent:
<div class=""absolute inset-0 flex flex-col justify-center p-4 lg:p-12""><h1 class=""text-4xl font-bold"">{heroHeading}</h1><p class=""text-lg"">{heroSubheading}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Call to Action</button></div>"
Alert/Banner Notifications,"DESCRIPTION:
The UI should display a notification banner that appears at the top of the page, with a close button on the right side. The banner should be dismissible and have a colored background to draw attention. The notification text should be clear and readable.
COMPONENTS:
- NotificationBanner: (standalone) - the notification banner component
- CloseButton: (standalone) - the close button component
HTML:
<header><NotificationBanner/></header>
COMPONENT HTML:
NotificationBanner:
<div class=""bg-orange-500 text-white py-2 px-4 rounded""><p>{notification_text}</p><CloseButton/></div>
CloseButton:
<button class=""text-white hover:text-orange-200 transition duration-300 ease-in-out"">&times;</button>"
"Prominent banner encouraging users to take a specific action, often displayed at the top of the page","DESCRIPTION:
The UI should be a prominent banner that encourages users to take a specific action, often displayed at the top of the page. It should have a clear call-to-action (CTA) and be visually appealing.
COMPONENTS:
- HeroBanner: A standalone component that contains a heading, a paragraph, and a call-to-action button.
HTML:
<!-- Hero Banner --><div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><HeroBanner/></div>
COMPONENT HTML:
HeroBanner:
<!-- Hero Banner Component --><div class=""bg-orange-500 py-4 md:py-6 lg:py-8""><div class=""container mx-auto p-4""><h2 class=""text-2xl md:text-3xl lg:text-4xl font-bold text-white"">{heading}</h2><p class=""text-lg md:text-xl lg:text-2xl text-white"">{description}</p><button class=""bg-white hover:bg-gray-100 text-orange-500 font-bold py-2 px-4 rounded"">{cta_text}</button></div></div>"
Skills section with icons and proficiency levels,"DESCRIPTION:
A Skills section that displays a list of skills with their corresponding icons and proficiency levels.
COMPONENTS:
- SkillCard: Standalone component that displays a single skill with its icon and proficiency level.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Skills</h2><ul class=""list-none mb-0""><SkillCard/><SkillCard/><SkillCard/><!-- Add more SkillCard components as needed --></ul></div>
COMPONENT HTML:
SkillCard:
<li class=""flex items-center mb-4""><i class=""mr-2 {icon_class}"" aria-hidden=""true""></i><span class=""text-lg"">{skill_name}</span><span class=""text-sm text-gray-600"">{proficiency_level}</span></li>"
Comment display for conversation threads,"DESCRIPTION:
The UI should display comments in a conversation thread format. Each comment will be styled as a card with padding, slight shadow, and vertical stacking for readability. For better organization, replies to comments should be indented.
COMPONENTS:
- CommentCard: (Standalone): Displays an individual comment. Includes the commenter’s name, timestamp, and the comment text.
- ReplyCard: (Standalone): Similar to CommentCard but intended for replies and indented for visual hierarchy.
HTML:
<div class=""max-w-4xl mx-auto p-4""><h1 class=""text-xl font-bold mb-4"">Conversation Thread</h1><div class=""space-y-2""><CommentCard/><div class=""pl-4""><ReplyCard/><ReplyCard/></div><CommentCard/></div></div>
COMPONENT HTML:
CommentCard:
<div class=""bg-white p-4 rounded-lg shadow-sm""><div class=""font-bold"">{commenter_name}</div><div class=""text-sm text-gray-500 mb-2"">{timestamp}</div><p>{comment_text}</p></div>
ReplyCard:
<div class=""bg-white p-3 rounded-lg shadow-sm mt-2""><div class=""font-bold"">{commenter_name}</div><div class=""text-sm text-gray-500 mb-2"">{timestamp}</div><p>{comment_text}</p></div>"
Resource download links,"DESCRIPTION:
A simple list of download links for various resources, with an optional description. The links should be clearly labeled and easy to access.
COMPONENTS:
- ResourceDownloadList: (takes children) - A list of `ResourceDownloadLink` components.
HTML:
<section class=""max-w-md mx-auto p-4""><h2>Download Resources</h2><ul class=""list-none mb-0""><ResourceDownloadList><!-- download links will be inserted here --></ResourceDownloadList></ul></section>
COMPONENT HTML:
ResourceDownloadList:
<ul class=""list-none mb-0"">{children}</ul>"
Resource download links,"DESCRIPTION:
The UI should be a simple list of resource download links, with each link showing the resource name, a download count, and a button to initiate the download. The list should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- ResourceDownloadLink: (standalone): A single resource download link with a button.
- ResourceDownloadList: (takes children): A container component to hold a list of `ResourceDownloadLink` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Download Resources</h2><ResourceDownloadList><ResourceDownloadLink/><ResourceDownloadLink/><!-- Add more ResourceDownloadLink components here --></ResourceDownloadList></div>
COMPONENT HTML:
ResourceDownloadLink:
<a href=""{download_url}"" class=""flex justify-between items-center mb-4 px-4 py-2 border border-gray-200 rounded""><span class=""text-gray-700"">{resource_name}</span><span class=""text-gray-500"">{download_count} downloads</span><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download</button></a>
ResourceDownloadList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Resource download links,"DESCRIPTION:
The UI should display a list of downloadable resources with their respective file formats and sizes. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- DownloadList: A component that takes children, wrapping multiple `DownloadLink` components.
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-lg font-bold"">Download Resources</h2><ul class=""list-none mb-4""><DownloadList><!-- download links will be inserted here --></DownloadList></ul></section>
COMPONENT HTML:
DownloadList:
<ul class=""list-none mb-4"">{children}</ul>"
Resource download links,"DESCRIPTION:
The UI should display a list of resource download links, with each link showing the resource name, file size, and a download button. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- ResourceDownloadLink: A standalone component that displays a single resource download link.
- ResourceDownloadList: A component that takes children, which are ResourceDownloadLink components, and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 mt-6""><h2 class=""text-2xl font-bold mb-4"">Resource Downloads</h2><ResourceDownloadList><ResourceDownloadLink/><ResourceDownloadLink/><!-- Add more ResourceDownloadLink components here --></ResourceDownloadList></div>
COMPONENT HTML:
ResourceDownloadLink:
<a href=""{download_url}"" class=""flex items-center justify-between py-4 border-b border-gray-200""><span class=""text-lg"">{resource_name}</span><span class=""text-sm text-gray-600"">{file_size} KB</span><button class=""bg-orange-500 hover:bg-orange-700 text-white py-2 px-4 rounded"">Download</button></a>
ResourceDownloadList:
<ul class=""list-none mb-0"">{children}</ul>"
Resource download links,"DESCRIPTION:
The UI should display a list of downloadable resources with their respective names, descriptions, and download links. The list items should be stacked vertically on smaller screens and horizontally on larger screens.
COMPONENTS:
- DownloadResourceCard: (standalone): A single downloadable resource card with name, description, and download link.
- DownloadResourceList: (takes children): A container for the list of downloadable resources.
HTML:
<div class=""max-w-md mx-auto p-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Downloadable Resources</h2><DownloadResourceList><DownloadResourceCard/><DownloadResourceCard/><!-- Add more DownloadResourceCard components here --></DownloadResourceList></div>
COMPONENT HTML:
DownloadResourceCard:
<div class=""flex flex-col mb-4 p-4 border border-gray-200 rounded""><h3 class=""text-lg font-bold"">{resource_name}</h3><p class=""text-gray-600"">{resource_description}</p><a class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" href=""{download_link}"">Download</a></div>
DownloadResourceList:
<ul class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</ul>"
Terms and conditions link,"DESCRIPTION:
- The UI should feature a simple, easily accessible link that users can click to open the terms and conditions page. This link should be styled discreetly but should be noticeable enough for users to find.
COMPONENTS:
- TermsLink: A standalone component that outputs a text link, pointing to a terms and conditions page.
HTML:
<div class=""flex justify-center p-4""><TermsLink/></div>
COMPONENT HTML:
TermsLink:
<a href=""{terms_link_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">Terms & Conditions</a>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
"Banner displaying alerts, messages, or announcements","DESCRIPTION:
The UI should be a horizontal banner that displays alerts, messages, or announcements. It should be visually prominent, with a noticeable background color and text color. The banner should be responsive, meaning it should adapt to different screen sizes and devices.
COMPONENTS:
- AlertBanner: A standalone component that displays an alert, message, or announcement.
HTML:
<div class=""max-w-md mx-auto p-4""><AlertBanner/></div>
COMPONENT HTML:
AlertBanner:
<div class=""bg-orange-500 text-white p-4 rounded""><p>{alert_message}</p><button class=""bg-white text-orange-500 hover:bg-orange-700 hover:text-white transition duration-300 ease-in-out py-2 px-4 rounded"">Dismiss</button></div>"
Chart control,"DESCRIPTION:
The UI for a Chart Control should display a chart and include interactive elements such as buttons or dropdowns to adjust the view of the chart (e.g., changing the chart type or the data displayed). This UI can consist of a chart area, a set of control buttons like 'Bar', 'Line', 'Pie' to change the chart type, and possibly a dropdown to select different data sets.
COMPONENTS:
- ChartArea: Standalone component where the chart itself is displayed.
- ControlBar: Standalone component that contains interactive elements such as buttons or dropdowns to manipulate the chart.
HTML:
<div class=""flex flex-col space-y-4""><ControlBar/><ChartArea/></div>
COMPONENT HTML:
ChartArea:
<!-- Chart display area --><div class=""w-full h-64 bg-gray-200""><!-- Placeholder for the chart content --><p class=""text-center text-gray-500 pt-20"">Chart content goes here.</p></div>
ControlBar:
<!-- Control bar with buttons for changing the chart type --><div class=""flex justify-center space-x-2""><button class=""px-3 py-2 bg-blue-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-300"">Bar</button><button class=""px-3 py-2 bg-green-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-green-300"">Line</button><button class=""px-3 py-2 bg-purple-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-purple-300"">Pie</button></div>"
Footer Newsletter Form,"DESCRIPTION:
A simple footer newsletter form with a label, input field, and submit button, all aligned horizontally and responsive.
COMPONENTS:
- FooterNewsletterForm: Standalone component that contains the newsletter form.
- FormLabel: Standalone component that displays the label text.
- FormInput: Standalone component that renders an input field.
- FormSubmitButton: Standalone component that renders a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-4 pb-10""><div class=""max-w-md mx-auto p-4""><FooterNewsletterForm/></div></footer>
COMPONENT HTML:
FooterNewsletterForm:
<div class=""flex flex-wrap justify-center mb-4""><FormLabel/><FormInput/><FormSubmitButton/></div>
FormLabel:
<label class=""text-sm font-bold mb-2"" for=""newsletter-email"">Stay updated with our newsletter</label>
FormInput:
<input type=""email"" id=""newsletter-email"" class=""w-full pl-2 py-2 text-sm text-gray-700"" placeholder=""your@email.com""/>
FormSubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Gradient (radial) controls,"DESCRIPTION:
- The UI will consist of several radial gradient controlled elements that demonstrably adjust their background gradients as per user input.
   - These elements will showcase gradient effects such as color intensity and direction changes.
   - Additionally, there should be labels or indicators for each control to explain what aspect of the gradient they adjust (e.g., color, intensity).
COMPONENTS:
- GradientDisplay: (Standalone)**: Displays the radial gradient effect as per current settings.
- ControlLabel: (Standalone)**: Displays a label next to each control explaining its function.
HTML:
<div class=""flex flex-col items-center justify-center space-y-4 p-4""><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for color control --><GradientDisplay/></div><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for intensity control --><GradientDisplay/></div><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for direction control --><GradientDisplay/></div></div>
COMPONENT HTML:
GradientDisplay:
<div class=""w-64 h-64 rounded-full"" style=""background: radial-gradient(circle, {primary_color}, {secondary_color});""></div>
ControlLabel:
<label class=""block text-sm text-gray-600 mb-1"">{label_text}</label>"
Footer Social Links,"DESCRIPTION:
The UI should display a row of social media links at the bottom of the page, with each link represented by an icon. The links should be spaced evenly and be accessible on various devices.
COMPONENTS:
- SocialLink: (standalone): Displays an individual social media link with an icon.
- FooterSocialLinks: (takes children): A container component that holds a row of social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterSocialLinks><SocialLink/><SocialLink/><SocialLink/><!-- Add more SocialLink components as needed --></FooterSocialLinks></footer>
COMPONENT HTML:
SocialLink:
<a href `{social_media_url}` target=""_blank"" rel=""noopener noreferrer""><i class={`w-6 h-6 text-gray-600 hover:text-gray-900 ${social_media_icon_class}`}></i></a>
FooterSocialLinks:
<div class=""flex justify-center mb-4"">{children}</div>"
Footer Social Links,"DESCRIPTION:
The footer should have a section dedicated to social links, with icons representing different social media platforms. The icons should be spaced evenly and be of a moderate size. The section should be accessible on all devices, including mobile phones.
COMPONENTS:
- SocialLinks: - a component that takes children.
HTML:
<footer><!-- social links section --><section class=""bg-gray-200 py-6""><div class=""max-w-md mx-auto px-4""><h2 class=""sr-only"">Social Links</h2><ul class=""flex justify-center mb-4""><SocialLinks><!-- social links will be inserted here --></SocialLinks></ul></div></section></footer>
COMPONENT HTML:
SocialLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Role-Based Access: Control user permissions,"DESCRIPTION:
The UI should display a list of users with their corresponding roles and permissions. The list should be responsive, accessible, and easy to navigate. Each user's information should be displayed in a consistent and clear format.
COMPONENTS:
- RoleBadge: standalone component that displays a role's name and color
- PermissionList: standalone component that displays a list of permissions
- UserList: component that takes children, displays a list of users
HTML:
<main class=""max-w-md mx-auto p-4 pt-6""><h1 class=""text-2xl font-bold mb-4"">Role-Based Access Control</h1><UserList><!-- User list will be inserted here --></UserList></main>
COMPONENT HTML:
RoleBadge:
<span class=""bg-{role_color} text-white px-2 py-1 rounded"">{role_name}</span>
PermissionList:
<ul class=""list-disc pl-4"">{permissions.map(permission =>( <li key={permission}>{permission}</li>))}</ul>
UserList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
QR code generator/display,"DESCRIPTION:
The UI should display a QR code generator with a text input field to enter the text to be encoded, a button to generate the QR code, and a display area to show the generated QR code. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QrCodeGenerator: A standalone component that contains the text input field and generate button.
- QrCodeDisplay: A component that takes children (the generated QR code) and displays it.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><QrCodeGenerator/><QrCodeDisplay><img src=""{qrcode_url}"" alt=""Generated QR code""/></QrCodeDisplay></div>
COMPONENT HTML:
QrCodeGenerator:
<div class=""flex flex-col mb-4""><input type=""text"" id=""qr-code-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter text to encode""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Generate QR Code</button></div>
QrCodeDisplay:
<div class=""flex justify-center mb-4"">{children}</div>"
Callout Box Border Style,"DESCRIPTION:
A callout box with a border style, usually used to highlight important information.
COMPONENTS:
- CalloutBox: A standalone component that contains the callout box content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""bg-yellow-100 border-l-4 border-orange-500 p-4 rounded-md""><p>{callout_message}</p></div>"
Tag cloud for filtering,"DESCRIPTION:
The UI should display a collection of tags in a cloud-like layout, with each tag having a varying font size and color to represent its importance or frequency. The tags should be clickable, allowing the user to filter content based on the selected tag.
COMPONENTS:
- TagCloud: The main component that contains all the tags. (Takes children)
- Tag: A single tag component that displays the tag text and is clickable. (Standalone)
HTML:
<div class=""max-w-md mx-auto pt-4""><h2 class=""text-lg font-bold mb-4"">Filter by Tag</h2><TagCloud><Tag/><Tag/><!-- ... additional Tag components --></TagCloud></div>
COMPONENT HTML:
TagCloud:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>
Tag:
<li class=""mr-2 mb-2""><a href=""#"" class=""text-sm font-bold text-{tag_color} hover:text-{hover_tag_color}"">{tag_text} </a></li>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Course Cards/Grids,"DESCRIPTION:
The UI should display a grid of course cards, with each card showing the course title, description, and a call-to-action (CTA) button. The grid should be responsive, with cards stacking vertically on smaller screens and displaying in a grid on larger screens.
COMPONENTS:
- CourseCard: A standalone component that represents a single course card.
- CourseGrid: A component that takes children (multiple CourseCard components) and renders them in a responsive grid.
HTML:
<div class=""container mx-auto p-4""><CourseGrid><CourseCard/><CourseCard/><!-- Add more CourseCard components here --></CourseGrid></div>
COMPONENT HTML:
CourseCard:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h2 class=""text-lg font-bold"">{course_title}</h2><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More </button></div>
CourseGrid:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Course Cards/Grids,"DESCRIPTION:
A responsive grid of course cards, with each card displaying a course title, description, and a call-to-action (CTA) button. The grid should be mobile-first, with a maximum of 3 columns on larger screens.
COMPONENTS:
- CourseCard: (standalone): A single course card component.
- CourseGrid: (takes children): A container component for the course cards.
HTML:
<div class=""max-w-md mx-auto p-4 lg:max-w-none lg:p-0""><h1 class=""text-2xl font-bold mb-4"">Courses</h1><CourseGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components here --></CourseGrid></div>
COMPONENT HTML:
CourseCard:
<div class=""bg-white shadow-md rounded-lg overflow-hidden mb-4 lg:w-1/3 lg:mr-4""><h2 class=""text-lg font-bold"">{course_title}</h2><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Enroll Now</button></div>
CourseGrid:
<div class=""flex flex-wrap justify-center lg:flex-row"">{children}</div>"
Course Cards/Grids,"DESCRIPTION:
The UI should display a responsive grid of course cards, with each card showing the course title, instructor, and a call-to-action (CTA) button. The grid should be mobile-first, with cards stacking vertically on small screens and displaying in a grid on larger screens.
COMPONENTS:
- CourseCard: (standalone): A single course card component
- CourseGrid: (takes children): A container component that holds multiple `CourseCard` components
HTML:
<div class=""container mx-auto p-4""><CourseGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components here --></CourseGrid></div>
COMPONENT HTML:
CourseCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg"">{course_title}</h3><p class=""text-gray-600"">{instructor}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text} </button></div>
CourseGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Hero Background Color,"DESCRIPTION:
The UI should be a hero section that takes up the full width and height of the viewport, with a background color that covers the entire hero section.
COMPONENTS:
- HeroBackground: (standalone): The background color of the hero section.
HTML:
<div class=""min-h-screen w-full""><HeroBackground/></div>
COMPONENT HTML:
HeroBackground:
<div class=""min-h-screen w-full bg-hero-background""></div>"
Hero Background Color,"DESCRIPTION:
The UI should have a hero section with a background color that takes up the full width of the screen.
COMPONENTS:
- HeroBackground: a standalone component that displays a background color.
HTML:
<section class=""h-screen w-full""><HeroBackground/></section>
COMPONENT HTML:
HeroBackground:
<div class=""h-full w-full bg-{background_color}""></div>"
Leaderboard display,"DESCRIPTION:
The UI should display a leaderboard with a heading, a list of ranks, and a table with user information. The leaderboard should be responsive, with a maximum width on large screens and a scrollable table on mobile devices.
COMPONENTS:
- LeaderboardHeader: A standalone component displaying the leaderboard heading.
- LeaderboardTable: A component taking children, displaying the leaderboard table with user information.
- LeaderboardTableRow: A component taking children, displaying a single row in the leaderboard table.
- UsernameColumn: A standalone component displaying a user's username.
- RankColumn: A standalone component displaying a user's rank.
HTML:
<div class=""max-w-3xl mx-auto p-4 lg:p-8""><LeaderboardHeader/><LeaderboardTable><LeaderboardTableRow><RankColumn/><UsernameColumn/><td>{points}</td></LeaderboardTableRow><!-- Repeat LeaderboardTableRow component for each user --></LeaderboardTable></div>
COMPONENT HTML:
LeaderboardHeader:
<h1 class=""text-3xl font-bold mb-4"">Leaderboard</h1>
LeaderboardTable:
<table class=""w-full""><thead><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Username</th><th class=""px-4 py-2"">Points</th></tr></thead><tbody>{children} </tbody></table>
LeaderboardTableRow:
<tr class=""border-b border-gray-200"">{children}</tr>
UsernameColumn:
<td class=""px-4 py-2"">{username}</td>
RankColumn:
<td class=""px-4 py-2"">{rank}</td>"
Card-based layout,"DESCRIPTION:
The UI should be a responsive grid of cards, with each card containing a title, description, and optional image. The cards should be stacked vertically on mobile devices and arranged in a grid on larger screens.
COMPONENTS:
- Card: standalone component, represents a single card in the grid
- CardBody: standalone component, represents the body of a card (contains title, description, and image)
HTML:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3""><Card/><Card/><Card/><!-- Add more cards here --></div>
COMPONENT HTML:
Card:
<div class=""bg-white shadow-md rounded p-4""><CardBody/></div>
CardBody:
<div><h5 class=""text-lg"">{card_title}</h5><p class=""text-gray-600"">{card_description}</p>{card_image && <img src={card_image} alt={card_title} class=""w-full mb-4""/>}</div>"
Product Price Original,"DESCRIPTION:
The UI should display the original price of a product, with a strikethrough and a discounted price alongside.
COMPONENTS:
- ProductPriceOriginal: (standalone)
- DiscountedPrice: (standalone)
HTML:
<div class=""flex items-center""><ProductPriceOriginal/><DiscountedPrice/></div>
COMPONENT HTML:
ProductPriceOriginal:
<p class=""text-lg line-through"">{originalPrice}</p><!-- original price with a strikethrough -->
DiscountedPrice:
<p class=""text-lg"">{discountedPrice}</p><!-- discounted price -->"
Product Feature List Title,"DESCRIPTION:
The UI should display a title for a product feature list, emphasizing the title text with a large font size and prominent styling.
COMPONENTS:
- FeatureListTitle: standalone component
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><FeatureListTitle/></div>
COMPONENT HTML:
FeatureListTitle:
<h2 class=""text-3xl font-bold mb-4"">{feature_list_title}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
User Management: Manage user accounts,"DESCRIPTION:
The UI should display a list of user accounts with their profiles, and provide an option to edit or delete each account. The design should be responsive, with a mobile-first approach, and follow accessibility and SEO best practices.
COMPONENTS:
- UserAccountList: A component that takes children, rendering a list of `UserAccountCard` components.
- DeleteButton: A standalone component that displays a delete button for a user account.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Manage User Accounts</h1><UserAccountList><!-- List of user accounts will be rendered here --></UserAccountList></div>
COMPONENT HTML:
UserAccountList:
<ul class=""divide-y divide-gray-200"">{children}</ul>
DeleteButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button>"
Message body text editor with formatting tools,"DESCRIPTION:
The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.
COMPONENTS:
- TextEditor: (standalone): The main text editor component containing the text area and toolbar.
- Toolbar: (standalone): The toolbar component containing the formatting tools.
- ToolButton: (takes children): A single tool button in the toolbar, containing an icon and optional text.
HTML:
<div class=""flex flex-col h-screen max-h-screen overflow-y-auto p-4""><TextEditor/></div>
COMPONENT HTML:
TextEditor:
<div class=""flex flex-col h-full w-full""><Toolbar/><textarea class=""w-full p-2 h-full overflow-y-auto resize-y""/></div>
Toolbar:
<div class=""flex justify-center mb-2""><ToolButton><i class=""fas fa-bold""/></ToolButton><ToolButton><i class=""fas fa-italic""/></ToolButton><ToolButton><i class=""fas fa-underline""/></ToolButton><ToolButton><span>Font size: {font_size}</span><select class=""pl-2""><option value=""10"">10px</option><option value=""12"">12px</option><option value=""14"">14px</option></select></ToolButton></div>
ToolButton:
<button class=""py-2 px-4 rounded-md hover:bg-gray-100"">{children}</button>"
Trending Topics: List of popular hashtags and topics,"DESCRIPTION:
The UI should display a list of trending topics, with each topic showing its name, a brief description, and the number of posts related to that topic. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.
COMPONENTS:
- TrendingTopicList: Container component that takes children, which are multiple **TrendingTopicCard** components.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- List of trending topics will be rendered here --></TrendingTopicList></div>
COMPONENT HTML:
TrendingTopicList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Trending Topics: List of popular hashtags and topics,"DESCRIPTION:
The UI should display a list of trending topics and hashtags, with each item showing the topic name, a brief description, and the number of posts or engagements. The list should be scrollable and responsive, with a maximum of 5-6 items visible on the screen at a time.
COMPONENTS:
- TrendingTopicList: (takes children) - contains a list of `TrendingTopicCard` components
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- List of trending topics will be rendered here --></TrendingTopicList></div>
COMPONENT HTML:
TrendingTopicList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Blog Post Category,"DESCRIPTION:
A simple, responsive, and accessible blog post category UI that displays the category name and a brief description.
COMPONENTS:
- CategoryBadge: (standalone): A small badge that displays the category name.
- CategoryDescription: (standalone): A brief description of the category.
HTML:
<div class=""flex flex-wrap mb-4""><CategoryBadge/><CategoryDescription/></div>
COMPONENT HTML:
CategoryBadge:
<span class=""bg-gray-200 py-1 px-2 rounded text-gray-700 text-xs"">{category_name}</span>
CategoryDescription:
<p class=""text-sm text-gray-600"">{category_description}</p>"
Blog Post Category,"DESCRIPTION:
A simple blog post category component that displays the category name and the number of posts in that category. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- BlogPostCategory: A standalone component that displays the category name and the number of posts.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><BlogPostCategory/></div>
COMPONENT HTML:
BlogPostCategory:
<a href=""{category_url}"" class=""bg-gray-200 hover:bg-gray-300 transition duration-300 ease-in-out py-2 px-4 rounded""><span class=""text-lg"">{category_name}</span><span class=""text-sm text-gray-600"">({post_count} posts)</span></a>"
Video transitions,"DESCRIPTION:
The UI should display a series of video transitions, with each transition showing a before and after state. The video transitions should be responsive, accessible, and easy to navigate.
COMPONENTS:
- VideoTransition: a standalone component that displays a single video transition.
- VideoTransitionsList: a component that takes children, which is a list of `VideoTransition` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Video Transitions</h1><VideoTransitionsList><VideoTransition/><VideoTransition/><VideoTransition/><!-- Add more VideoTransition components here --></VideoTransitionsList></div>
COMPONENT HTML:
VideoTransition:
<div class=""flex flex-col mb-4""><h2 class=""text-lg font-bold"">{transition_name}</h2><div class=""flex justify-between mb-2""><div class=""w-1/2 bg-gray-200 h-48 rounded-md overflow-hidden""><!-- Before state --><video src={before_video_src} class=""w-full h-full object-cover""></video></div><div class=""w-1/2 bg-gray-200 h-48 rounded-md overflow-hidden""><!-- After state --><video src={after_video_src} class=""w-full h-full object-cover""></video></div></div><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">Watch Video</button></div>
VideoTransitionsList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
"Text or icon that, when clicked, navigates to another page or resource","DESCRIPTION:
- A simple clickable text or icon that serves as a hyperlink. This should be visually distinct enough to indicate that it's interactive, such as a different color, underline, or accompanied by an icon.
COMPONENTS:
- LinkButton: Standalone component. This component renders a clickable element which can be text or an icon wrapped in an anchor (`<a>`) tag.
HTML:
<div class=""container mx-auto px-4""><LinkButton/></div>
COMPONENT HTML:
LinkButton:
<!-- LinkButton: A clickable text or icon that acts as a hyperlink --><a href=""{target_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">{link_text} </a>"
Sponsorship opportunities display,"DESCRIPTION:
- The UI should present a clean and organized display of various sponsorship opportunities. Each opportunity should be clearly separated, possibly in card format, displaying key information such as the title of the sponsorship, benefits, and a call-to-action button for more details or to apply.
COMPONENTS:
- SponsorshipCard: A standalone component. It displays information about a single sponsorship opportunity and includes a button for further actions.
- Button: A standalone component. It represents a reusable button used for actions like learning more or applying for the sponsorship.
HTML:
<main class=""p-4""><h1 class=""text-xl font-bold text-center mb-6"">Sponsorship Opportunities</h1><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4""><SponsorshipCard/><SponsorshipCard/><SponsorshipCard/><!-- Add further SponsorshipCard components depending on the number of opportunities --></div></main>
COMPONENT HTML:
SponsorshipCard:
<div class=""max-w-sm rounded overflow-hidden shadow-lg p-4""><h2 class=""font-bold text-lg mb-2"">{sponsorship_title}</h2><p class=""text-gray-700 text-base mb-4"">{benefits_summary}</p><Button/></div>
Button:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Learn More </button>"
Callout Box Text,"DESCRIPTION:
The UI should be a rectangular box with a subtle background color, a bold title, and a brief text description. The text should be responsive, meaning it should adjust its size and layout according to the screen size.
COMPONENTS:
- CalloutBox: standalone component
- CalloutBoxTitle: standalone component
- CalloutBoxDescription: standalone component
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""bg-gray-100 rounded-lg p-4""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<h2 class=""text-lg font-bold mb-2"">{title}</h2>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Call to Action Link Text,"DESCRIPTION:
A call-to-action (CTA) link with customizable text and styling.
COMPONENTS:
- CallToActionLink: A standalone component that renders a CTA link with customizable text.
HTML:
<div class=""flex justify-center mb-4""><CallToActionLink/></div>
COMPONENT HTML:
CallToActionLink:
<a href=""{cta_url}"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</a>"
Call to Action Link Text,"DESCRIPTION:
A call to action link text that is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CallToActionLink: A standalone component that renders a call to action link text.
HTML:
<a href={link_href} class=""text-sm md:text-base lg:text-lg font-bold text-primary-600 hover:text-primary-800""><CallToActionLink/></a>
COMPONENT HTML:
CallToActionLink:
<span>{call_to_action_text}</span>"
Callout Box Button,"DESCRIPTION:
A Callout Box Button is a responsive, mobile-first UI component that displays a prominent button with a callout box containing additional information when hovered or focused. The callout box should be positioned above the button and have a subtle animation when appearing/dissappearing.
COMPONENTS:
- CalloutBoxButton: Standalone component containing a button and a callout box.
- CalloutBox: Standalone component containing the additional information.
- Button: Standalone component displaying the prominent button.
HTML:
<div class=""flex justify-center""><CalloutBoxButton/></div>
COMPONENT HTML:
CalloutBoxButton:
<div class=""relative inline-block""><Button/><CalloutBox/></div>
CalloutBox:
<div class=""absolute bg-white p-4 rounded-md shadow-md text-sm text-gray-600"">{callout_text}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg"">{button_text}</button>"
Navigation bar that remains fixed at the top of the page as users scroll,"DESCRIPTION:
The UI should have a navigation bar that remains fixed at the top of the page as users scroll. The navigation bar should be responsive, with items stacking vertically on smaller screens.
COMPONENTS:
- NavigationBar: A standalone component that contains navigation items.
- NavItem: A component that takes children, representing a single navigation item.
HTML:
<header class=""fixed top-0 left-0 w-full bg-gray-800 py-4""><NavigationBar/></header>
COMPONENT HTML:
NavigationBar:
<nav class=""container mx-auto p-4 flex justify-between""><NavItem>Home</NavItem><NavItem>About</NavItem><NavItem>Contact</NavItem></nav>
NavItem:
<a class=""text-white hover:text-gray-200 transition duration-300 ease-in-out"">{children}</a>"
User Profile Cards,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible user profile card that displays a user's profile information, including their name, profile picture, bio, and social media links.
COMPONENTS:
- UserProfileCard: standalone component that renders the entire user profile card.
- ProfilePicture: standalone component that renders the user's profile picture.
- ProfileInfo: standalone component that renders the user's name and bio.
- SocialMediaLinks: standalone component that renders the user's social media links.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex flex-col items-center mb-4""><ProfilePicture/><ProfileInfo/><SocialMediaLinks/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""w-24 h-24 rounded-full mb-4""/>
ProfileInfo:
<div class=""text-lg font-bold"">{user_name}</div><p class=""text-gray-600"">{bio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><a href=""{twitter_url}"" aria-label=""Twitter"" class=""text-blue-500 hover:text-blue-800 transition duration-300 ease-in-out"">Twitter</a></li><li class=""mr-4""><a href=""{github_url}"" aria-label=""GitHub"" class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">GitHub</a></li><li><a href=""{linkedin_url}"" aria-label=""LinkedIn"" class=""text-blue-500 hover:text-blue-800 transition duration-300 ease-in-out"">LinkedIn</a></li></ul>"
Mention display for tagged users,"DESCRIPTION:
The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.
COMPONENTS:
- TaggedUserList: A component that takes children, rendering a list of `TaggedUser` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Mentioned Users</h2><TaggedUserList><!-- list of tagged users will be rendered here --></TaggedUserList></div>
COMPONENT HTML:
TaggedUserList:
<ul class=""list-none mb-0"">{children}</ul>"
Mention display for tagged users,"DESCRIPTION:
A list of tagged users, each with their username and a ""Remove tag"" button.
COMPONENTS:
- TaggedUser: A standalone component displaying a single tagged user's information.
- RemoveButton: A standalone component representing the ""Remove tag"" button.
HTML:
<ul class=""list-none mb-4""><li class=""flex justify-between mb-2""><TaggedUser/></li><!-- more tagged users here --></ul>
COMPONENT HTML:
TaggedUser:
<span class=""mr-2"">{username}</span><RemoveButton/>
RemoveButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Remove tag</button>"
Table pagination,"DESCRIPTION:
The UI consists of a table displaying data with a set of pagination controls below it. The table should be clearly visible with headers that distinguish each column. The pagination controls will include buttons to navigate to the first, previous, next, and last pages, as well as input for jumping to a specific page.
COMPONENTS:
- DataTable: Standalone component containing the table with data.
- PaginationControls: Standalone component containing the pagination buttons and page input.
HTML:
<div class=""container mx-auto p-4""><DataTable/><PaginationControls/></div>
COMPONENT HTML:
DataTable:
<table class=""min-w-full divide-y divide-gray-300""><thead class=""bg-gray-50""><tr><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 1 </th><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 2 </th><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 3 </th></tr></thead><tbody class=""bg-white divide-y divide-gray-200""><tr><td class=""px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"">Data 1</td><td class=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Data 2</td><td class=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Data 3</td></tr><!-- Additional rows --></tbody></table>
PaginationControls:
<div class=""flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6""><div class=""flex justify-between flex-1 sm:hidden""><a href=""#"" class=""relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"">Previous</a><a href=""#"" class=""ml-3 relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"">Next</a></div><div class=""hidden sm:flex-1 sm:flex sm:items-center sm:justify-between""><div><p class=""text-sm text-gray-700"">Showing <span class=""font-medium"">{from}</span>to <span class=""font-medium"">{to}</span>of <span class=""font-medium"">{total}</span>results </p></div><div><nav class=""relative z-0 inline-flex rounded-md shadow-sm -space-x-px"" aria-label=""Pagination""><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50"">First </a><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50"">Previous </a><!-- Links for jumping to specific pages might be dynamically generated here --><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50"">Next </a><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50"">Last </a></nav></div></div></div>"
Popovers,"DESCRIPTION:
The Popover UI should feature a small, floating box that displays additional content when a triggering element (like a button or link) is hovered over or focused. It should include a title and some content, and position itself relative to the trigger without obstructing other content on the page.
COMPONENTS:
- PopoverTrigger: A standalone component that acts as the clickable or focusable element used to trigger the popover.
- PopoverContent: Takes children; this component is the floating box that appears and displays additional information or interactive elements.
HTML:
<div class=""relative""><PopoverTrigger/><PopoverContent><h3 class=""font-bold text-lg"">{popover_title}</h3><p>{popover_content}</p></PopoverContent></div>
COMPONENT HTML:
PopoverTrigger:
<button class=""px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-opacity-75"" aria-describedby=""popoverContent"">Toggle Popover</button>
PopoverContent:
<div class=""absolute z-10 w-64 p-4 bg-white shadow-lg rounded-lg mt-2 hidden"" role=""tooltip"" id=""popoverContent"">{children}</div>"
Search bar with autocomplete suggestions,"DESCRIPTION:
The UI consists of a search bar where a user can type in their query. Below the search bar, as the user types, a list of autocomplete suggestions should appear. These suggestions are dynamically updated based on the user's input. Each suggestion is selectable. The layout should be clean and simple, with clear visual separation between suggestions.
COMPONENTS:
- SearchInput: Standalone component where users can type their search queries.
- AutocompleteList: Component that takes children. It displays the list of suggestions.
- SuggestionItem: Component that takes children. It represents a single suggestion within the list.
HTML:
<div class=""p-4""><SearchInput/><AutocompleteList><SuggestionItem>Example Suggestion 1</SuggestionItem><SuggestionItem>Example Suggestion 2</SuggestionItem><SuggestionItem>Example Suggestion 3</SuggestionItem></AutocompleteList></div>
COMPONENT HTML:
SearchInput:
<!-- Search input allowing user to type queries --><input type=""text"" aria-label=""Search"" placeholder=""Type to search..."" class=""w-full p-2 border border-gray-300 rounded-md""/>
AutocompleteList:
<!-- Container for autocomplete suggestions --><ul class=""list-none mt-1 bg-white border border-gray-200 rounded-md overflow-hidden"">{children} </ul>
SuggestionItem:
<!-- Individual suggestion item --><li class=""p-2 hover:bg-gray-100 cursor-pointer"">{children} </li>"
Social media feed display,"DESCRIPTION:
The UI should display a list of social media posts, each containing a profile picture, username, post text, likes, comments, and a timestamp. The feed should be scrollable and responsive, with a maximum of 3 posts per row on desktop and 1 post per row on mobile.
COMPONENTS:
- SocialMediaPost: (standalone): A single social media post
- SocialMediaFeed: (takes children): A container for a list of social media posts
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><SocialMediaFeed><SocialMediaPost/><SocialMediaPost/><SocialMediaPost/><!-- Add more posts here --></SocialMediaFeed></div>
COMPONENT HTML:
SocialMediaPost:
<div class=""flex mb-4""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-12 h-12 rounded-full mr-4""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{post_text}</p><div class=""flex justify-between text-sm text-gray-600""><span>{likes} likes</span><span>{comments} comments</span><span>{timestamp}</span></div></div></div>
SocialMediaFeed:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Footers,"DESCRIPTION:
The UI should include a responsive footer section that is typically found at the bottom of a webpage. It should contain three segments: contact information, quick links, and social media links. Each segment should be clearly labeled and easy to navigate. On mobile devices, the segments should stack vertically, while on larger screens, they should be displayed in a horizontal layout.
COMPONENTS:
- ContactInfo: (Standalone): Displays business contact details like phone number, email, and address.
- QuickLinks: (Standalone): Shows links to important pages such as Home, About Us, Services, etc.
- SocialMediaLinks: (Standalone): Displays icons or textual links to social media profiles.
HTML:
<footer class=""bg-gray-800 text-white p-5""><div class=""max-w-screen-lg mx-auto flex flex-col md:flex-row justify-between""><ContactInfo/><QuickLinks/><SocialMediaLinks/></div></footer>
COMPONENT HTML:
ContactInfo:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Contact Us</h4><p>{phoneNumber}</p><p>{emailAddress}</p><p>{postalAddress}</p></div>
QuickLinks:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Quick Links</h4><ul class=""space-y-2""><li><a href=""{homePageLink}"" class=""hover:text-gray-300"">Home</a></li><li><a href=""{aboutUsLink}"" class=""hover:text-gray-300"">About Us</a></li><li><a href=""{servicesLink}"" class=""hover:text-gray-300"">Services</a></li><li><a href=""{contactLink}"" class=""hover:text-gray-300"">Contact</a></li></ul></div>
SocialMediaLinks:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Follow Us</h4><ul class=""flex space-x-4""><li><a href=""{facebookLink}"" class=""hover:text-gray-300"">Facebook</a></li><li><a href=""{twitterLink}"" class=""hover:text-gray-300"">Twitter</a></li><li><a href=""{instagramLink}"" class=""hover:text-gray-300"">Instagram</a></li></ul></div>"
Grid layout displaying smaller versions of images or content,"DESCRIPTION:
The UI should display a grid layout of smaller versions of images or content, with a responsive design that adapts to different screen sizes. Each grid item should have a consistent size and spacing between them.
COMPONENTS:
- GridGallery: (standalone): The main component that wraps the grid items.
- GridItem: (takes children): A single item in the grid, containing the smaller version of an image or content.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><GridGallery/></div>
COMPONENT HTML:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{/* Grid items will be inserted here */ }</div>
GridItem:
<div class=""w-full h-48 md:h-64 lg:h-80 overflow-hidden rounded"">{children} <!-- Image or content will be inserted here --></div>"
Theme selector,"DESCRIPTION:
The UI should be a dropdown menu that allows users to select a theme (e.g., light, dark, system) for the application. The dropdown should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- ThemeSelector: (standalone): The main component that contains the dropdown menu.
- ThemeOption: (takes children): Represents a single theme option in the dropdown menu.
HTML:
<div class=""relative inline-block""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Select Theme
</button><ul class=""absolute z-10 bg-white border border-gray-400 rounded""><ThemeSelector/></ul></div>
COMPONENT HTML:
ThemeSelector:
<ul class=""px-2 py-1""><ThemeOption>Light</ThemeOption><ThemeOption>Dark</ThemeOption><ThemeOption>System</ThemeOption></ul>
ThemeOption:
<li class=""py-1 px-2 hover:bg-gray-100"">{children}</li>"
Provider Profiles,"DESCRIPTION:
The Provider Profiles UI should display a list of provider profiles, including their names, images, and short descriptions. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProviderProfileCard: (standalone) - a single provider profile card
- ProviderProfileList: (takes children) - a list of provider profile cards
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 pb-8""><h2 class=""text-2xl font-bold mb-4"">Provider Profiles</h2><ProviderProfileList><ProviderProfileCard/><ProviderProfileCard/><!-- add more ProviderProfileCard components here --></ProviderProfileList></section>
COMPONENT HTML:
ProviderProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_image_url} alt={provider_name} class=""w-24 h-24 rounded-full mx-auto mb-4""/><h3 class=""text-lg font-bold"">{provider_name}</h3><p class=""text-gray-600"">{provider_description}</p></article>
ProviderProfileList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Provider Profiles,"DESCRIPTION:
The UI should display a list of provider profiles, each showing the provider's name, occupation, and rating. The profiles should be arranged in a grid, with each profile taking up the full width on mobile devices and half the width on larger screens. The grid should have a maximum of 3 columns.
COMPONENTS:
- ProviderProfileList: A component taking children, containing a list of provider profiles.
HTML:
<main class=""max-w-md mx-auto p-4""><ProviderProfileList><!-- list of ProviderProfileCard components will be rendered here --></ProviderProfileList></main>
COMPONENT HTML:
ProviderProfileList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Provider Profiles,"DESCRIPTION:
The UI should display a list of provider profiles, each showing the provider's name, specialty, and a brief description. The list should be responsive, with a grid layout on larger screens and a vertical list on smaller screens.
COMPONENTS:
- ProviderList: A component that takes children, wrapping the list of provider profiles.
HTML:
<div class=""container mx-auto p-4 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Provider Profiles</h1><ProviderList><!-- List of provider profiles will be rendered here --></ProviderList></div>
COMPONENT HTML:
ProviderList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Accessibility options,"DESCRIPTION:
The UI should be a simple accessibility options panel with features such as font size adjustment, color scheme toggle, and high contrast mode.
COMPONENTS:
- AccessibilityOptionsPanel: standalone
- FontSizeAdjuster: standalone
- ColorSchemeToggle: standalone
- HighContrastModeToggle: standalone
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 bg-white rounded-md shadow-md""><h2 class=""text-lg font-bold mb-4"">Accessibility Options</h2><AccessibilityOptionsPanel/></div>
COMPONENT HTML:
AccessibilityOptionsPanel:
<div class=""flex flex-col space-y-4""><FontSizeAdjuster/><ColorSchemeToggle/><HighContrastModeToggle/></div>
FontSizeAdjuster:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""font-size"">Font Size:</label><select class=""px-2 py-1"" id=""font-size""><option value=""small"">Small</option><option value=""medium"">Medium</option><option value=""large"">Large</option></select></div>
ColorSchemeToggle:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""color-scheme"">Color Scheme:</label><span class=""mr-2"">{current_scheme}</span><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" onClick={toggleColorScheme}>Toggle</button></div>
HighContrastModeToggle:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""high-contrast"">High Contrast:</label><input type=""checkbox"" id=""high-contrast"" defaultChecked={high_contrast_enabled} onChange={toggleHighContrastMode}/><span class=""ml-2"">{high_contrast_mode_label}</span></div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Horizontal strip displaying links to key sections of the website,"DESCRIPTION:
The UI should be a horizontal strip displaying links to key sections of the website. The strip should be responsive, taking up the full width of the screen on mobile devices and becoming narrower on larger screens. The links should be evenly spaced and have a subtle hover effect.
COMPONENTS:
- NavigationBar: (standalone)
HTML:
<nav class=""w-full bg-gray-100 py-4""><NavigationBar/></nav>
COMPONENT HTML:
NavigationBar:
<ul class=""flex justify-between md:flex-wrap""><li class=""px-4""><a href=""#home"" class=""hover:text-gray-600"">{home_label}</a></li><li class=""px-4""><a href=""#about"" class=""hover:text-gray-600"">{about_label}</a></li><li class=""px-4""><a href=""#contact"" class=""hover:text-gray-600"">{contact_label}</a></li><!-- Add more list items as needed --></ul>"
Horizontal strip displaying links to key sections of the website,"DESCRIPTION:
A horizontal strip with links to key sections of the website, responsive and mobile-friendly, with a clean and minimal design.
COMPONENTS:
- NavItem: (standalone) - a single link to a key section of the website
- NavStrip: (takes children) - the horizontal strip that contains the navigation items
HTML:
<header><nav class=""flex justify-between items-center py-4""><NavStrip><NavItem/><!-- link to home --><NavItem/><!-- link to about --><NavItem/><!-- link to contact --></NavStrip></nav></header>
COMPONENT HTML:
NavItem:
<a href={link_href} class=""px-4"">{link_text}</a>
NavStrip:
<div class=""flex flex-wrap justify-center"">{children}</div>"
WebSocket/Real-time Updates,"DESCRIPTION:
The UI should display real-time updates from a WebSocket connection. It should have a simple layout with a header, a main content area, and a footer. The main content area should display a list of updates in real-time.
COMPONENTS:
- WebSocketUpdateList: (standalone): A list of WebSocket updates.
- UpdateTimestamp: (standalone): The timestamp of an update item.
HTML:
<div class=""min-h-screen flex flex-col""><header class=""bg-gray-200 py-4""><h1 class=""text-3xl font-bold text-gray-800"">Real-time Updates</h1></header><main class=""flex-1 p-4""><WebSocketUpdateList/></main><footer class=""bg-gray-200 py-4""><p class=""text-sm text-gray-600"">&copy; 2023 Real-time Updates</p></footer></div>
COMPONENT HTML:
WebSocketUpdateList:
<ul class=""list-none mb-4""><!-- Update items will be rendered here --></ul>
UpdateTimestamp:
<p class=""text-sm text-gray-600"">{update_timestamp}</p>"
WebSocket/Real-time Updates,"DESCRIPTION:
The UI should display real-time updates from a WebSocket connection, showcasing the latest data in a clean and responsive layout. The design should be minimalistic, with a focus on readability and usability.
COMPONENTS:
- WebSocketUpdateList: a standalone component that renders a list of real-time updates.
- UpdateTime: a component that takes children, displaying the timestamp of each update.
- UpdateContent: a component that takes children, displaying the content of each update.
HTML:
<main class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Real-time Updates</h1><WebSocketUpdateList/></main>
COMPONENT HTML:
WebSocketUpdateList:
<ul class=""divide-y divide-gray-200"">{updates.map((update, index) =>( <li key={index} class=""py-4""><UpdateTime>{update.timestamp}</UpdateTime><UpdateContent>{update.content}</UpdateContent></li>))}</ul>
UpdateTime:
<time class=""text-gray-500"">{children}</time>
UpdateContent:
<p class=""text-lg"">{children}</p>"
Partner logos display,"DESCRIPTION:
The UI should be a responsive, horizontal list of logos from various partners. Each logo should be displayed with equal width and a slight gap in between. The list should be scrollable on mobile devices.
COMPONENTS:
- PartnerLogo: a standalone component that displays a single partner's logo
- PartnerLogosList: a component that takes children (PartnerLogo components) and displays them in a horizontal list
HTML:
<div class=""container mx-auto p-4 pt-8 md:p-8 md:pt-16""><h2 class=""text-lg font-bold mb-4"">Our Partners</h2><div class=""flex overflow-x-auto""><PartnerLogosList><PartnerLogo/><PartnerLogo/><!-- more PartnerLogo components here --></PartnerLogosList></div></div>
COMPONENT HTML:
PartnerLogo:
<a href=""{partner_website}"" class=""block w-24 mx-2 mb-4 md:w-32 md:mx-4""><img src=""{logo_url}"" alt=""{partner_name}"" class=""w-full""/></a>
PartnerLogosList:
<div class=""flex flex-nowrap"">{children}</div>"
Partner logos display,"DESCRIPTION:
The UI should display a list of partner logos in a row, with each logo appearing one after the other. The logos should be evenly spaced and responsive to different screen sizes.
COMPONENTS:
- PartnerLogos: component (takes children): contains a list of `PartnerLogo` components
HTML:
<!-- Container for the partner logos --><div class=""flex flex-wrap justify-center""><!-- Partner logos will be inserted here --><PartnerLogos><!-- Partner logos will be inserted here --></PartnerLogos></div>
COMPONENT HTML:
PartnerLogos:
<!-- Container for multiple partner logos --><div class=""flex flex-wrap justify-center"">{children}</div>"
Hero Image: High-resolution background image,"DESCRIPTION:
The UI should be a full-bleed hero image that takes up the entire viewport, with a high-resolution background image.
COMPONENTS:
- HeroImageContainer: standalone component that wraps the hero image.
HTML:
<div class=""h-screen w-full""><HeroImageContainer/></div>
COMPONENT HTML:
HeroImageContainer:
<div class=""relative h-full w-full""><img src=""{hero_image_url}"" alt=""{hero_image_alt}"" class=""absolute h-full w-full object-cover""/><!-- Fallback content for accessibility --><p class=""sr-only"">{hero_image_alt}</p></div>"
Hero Image: High-resolution background image,"DESCRIPTION:
The UI should be a full-bleed hero image that takes up the entire screen, with the image centered and scaled to fit the screen.
COMPONENTS:
- HeroImageContainer: Standalone component that wraps the hero image.
HTML:
<div class=""h-screen w-full""><HeroImageContainer/></div>
COMPONENT HTML:
HeroImageContainer:
<div class=""h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}><!-- Image will be displayed here --></div>"
Dropdown Menu Item,"DESCRIPTION:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
COMPONENTS:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
HTML:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Breadcrumb Current Page Text,"DESCRIPTION:
The UI should display the current page text in a breadcrumb navigation, with the text being the last item in the breadcrumb trail. The text should be highlighted to indicate the current page.
COMPONENTS:
- Breadcrumb: A standalone component that renders a single breadcrumb item.
- CurrentPageText: A standalone component that renders the current page text.
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex flex-wrap""><!-- previous breadcrumb items --><li><Breadcrumb/>...</li><li aria-current=""page""><CurrentPageText/></li></ol></nav>
COMPONENT HTML:
Breadcrumb:
<li><a href=""{href}"" class=""text-gray-500 hover:text-gray-900"">{breadcrumb_text}</a></li>
CurrentPageText:
<span aria-current=""page"" class=""text-gray-900"">{current_page_text}</span>"
Profile avatar dropdown,"DESCRIPTION:
A responsive profile avatar dropdown with a profile picture, username, and a dropdown menu with options.
COMPONENTS:
- ProfileAvatarDropdown: Standalone component that contains the profile picture, username, and dropdown menu.
- DropdownItem: Takes children (e.g. dropdown item text).
HTML:
<nav class=""flex justify-end""><ProfileAvatarDropdown/></nav>
COMPONENT HTML:
ProfileAvatarDropdown:
<div class=""relative inline-block""><img src={profile_picture_url} alt={username} class=""h-10 w-10 rounded-full cursor-pointer""/><span class=""ml-2 text-sm font-medium"">{username}</span><ul class=""absolute right-0 mt-2 w-48 bg-white rounded shadow-md""><li><DropdownItem>Settings</DropdownItem></li><li><DropdownItem>Logout</DropdownItem></li></ul></div>
DropdownItem:
<li class=""px-4 py-2 hover:bg-gray-100"">{children}</li>"
Gallery/Image Lightboxes,"DESCRIPTION:
The UI should consist of a grid layout displaying thumbnails of images. Each thumbnail can be clicked to open a larger view of that image, often referred to as a lightbox. This larger view typically darkens the rest of the screen and focuses the user’s attention on the viewed image. It may also provide navigation to move between images while in the enlarged mode and a close button to exit back to the gallery view.
COMPONENTS:
- Gallery: Standalone component that contains multiple `Thumbnail` components.
- Thumbnail: Component that takes children. Displays a small preview of an image and triggers the lightbox view on click.
- Lightbox: Component that takes children. Displays the enlarged image and includes UI for closing the view or navigating between images.
HTML:
<main class=""p-4""><h1 class=""text-xl font-bold text-center"">Image Gallery</h1><Gallery/></main>
COMPONENT HTML:
Gallery:
<section class=""grid grid-cols-2 md:grid-cols-3 gap-4""><Thumbnail><img src=""{thumbnail_image_1}"" alt=""{image_description_1}"" class=""w-full h-auto""/></Thumbnail><Thumbnail><img src=""{thumbnail_image_2}"" alt=""{image_description_2}"" class=""w-full h-auto""/></Thumbnail><!-- Additional thumbnails can be added similarly --></section>
Thumbnail:
<div class=""relative group cursor-pointer"">{children} <!-- The thumbnail image --><div class=""absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity""><Lightbox><img src=""{thumbnail_image_large}"" alt=""{image_description_large}"" class=""max-w-full max-h-screen mx-auto my-8""/></Lightbox></div></div>
Lightbox:
<div class=""fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50"" role=""dialog""><button class=""absolute top-4 right-4 text-white text-3xl"" aria-label=""Close"">&#10005;</button>{children} <!-- The large image --></div>"
Forums,"DESCRIPTION:
The UI should display a list of forum topics with their titles, descriptions, and the number of replies and views. Each topic should be displayed in a card layout with a clear hierarchy of information. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- ForumTopicList: (takes children) - contains a list of `ForumTopicCard` components
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Forum Topics</h1><ForumTopicList><!-- list of forum topics will be rendered here --></ForumTopicList></div>
COMPONENT HTML:
ForumTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Repository Search and Filtering Tool,"DESCRIPTION:
- A header with a title ""Repository Search""
   - A search input field where users can type a repository name to search for in a realistic Git repository hosting environment like GitHub or GitLab.
   - A dropdown filter selector to filter search results by language (e.g., ""JavaScript"", ""Python"").
   - A ""Search"" button to initiate the search.
   - A section below to display search results, listing repositories with their names, a brief description, and the primary language.
   - Responsive layout with mobile-friendly usability.
COMPONENTS:
- SearchHeader: (Standalone): A header component displaying the title.
- SearchForm: (Standalone): A form containing the search input, language filter, and search button.
- RepositoryList: (Standalone): A component to display the results of the search.
- RepositoryItem: (Takes children): Represents a single repository in the list, showing specific details like the name, description, and primary language.
HTML:
<div class=""container mx-auto px-4""><SearchHeader/><SearchForm/><RepositoryList/></div>
COMPONENT HTML:
SearchHeader:
<header class=""text-center py-4""><h1 class=""text-2xl font-bold"">Repository Search</h1></header>
SearchForm:
<form class=""flex flex-col gap-4 p-4""><input type=""text"" placeholder=""Search repositories..."" class=""p-2 border rounded""/><select class=""p-2 border rounded""><option value=""All"">All Languages</option><option value=""JavaScript"">JavaScript</option><option value=""Python"">Python</option><!-- Additional languages can be added here --></select><button type=""submit"" class=""bg-blue-500 text-white p-2 rounded hover:bg-blue-600"">Search</button></form>
RepositoryList:
<div><RepositoryItem><h2 class=""font-semibold"">{repositoryName}</h2><p>{repositoryDescription}</p><span class=""text-gray-600"">{repositoryLanguage}</span></RepositoryItem><!-- More RepositoryItem components can be listed here based on search results --></div>
RepositoryItem:
<div class=""border-b border-gray-200 p-4"">{children} </div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Dropdown Menu Item Style,"DESCRIPTION:
A dropdown menu item with a caret icon indicating that it has a submenu. The item should be clickable and have a hover effect.
COMPONENTS:
- DropdownMenuItem: standalone, contains text and a caret icon.
- CaretIcon: standalone, a small triangle icon indicating a submenu.
HTML:
<nav class=""flex justify-center mb-4""><ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4""><DropdownMenuItem/></li></ul></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""inline-flex items-center text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><a class=""dropdown-item py-2 px-4"">{menuItemText}</a><CaretIcon/></li>
CaretIcon:
<span class=""inline-block align-middle text-gray-600""><i class=""fas fa-caret-down mr-2""></i></span>"
Poll question display,"DESCRIPTION:
The UI should display a poll question with options and a submit button. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PollQuestion: Standalone component that displays the poll question.
- PollOption: Standalone component that displays a poll option.
- SubmitButton: Standalone component that displays a submit button.
- PollContainer: Takes children (PollQuestion, PollOption, SubmitButton).
HTML:
<div class=""max-w-md mx-auto bg-white p-4 shadow-md rounded""><PollContainer><PollQuestion/><ul><PollOption/><PollOption/><!-- add more PollOption components as needed --></ul><SubmitButton/></PollContainer></div>
COMPONENT HTML:
PollQuestion:
<h2 class=""text-lg"">{question_text}</h2>
PollOption:
<li class=""py-2""><input type=""radio"" id=""{option_id}"" name=""poll_option""/><label for=""{option_id}"" class=""text-lg"">{option_text}</label></li>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>
PollContainer:
<div class=""px-4 py-2"">{children}</div>"
Poll question display,"DESCRIPTION:
The UI should display a poll question with options to vote, along with the total votes and percentage for each option. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- PollQuestionDisplay: standalone, displays the poll question.
- PollOption: standalone, displays a single poll option with its total votes and percentage.
- PollOptionList: takes children, a list of poll options.
HTML:
<div class=""max-w-md mx-auto p-4""><PollQuestionDisplay/><PollOptionList><PollOption/><PollOption/><!-- Add more PollOption components for each option --></PollOptionList></div>
COMPONENT HTML:
PollQuestionDisplay:
<h2 class=""text-lg"">{question_text}</h2>
PollOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{option_id}"" name=""poll_option"" class=""mr-2""/><label for=""{option_id}"" class=""text-sm"">{option_text}</label><span class=""text-sm text-gray-600"">{(total_votes) votes} ({vote_percentage}%)</span></div>
PollOptionList:
<ul class=""list-none mb-4"">{children}</ul>"
Table filtering,"DESCRIPTION:
The UI should feature a table displaying a set of data (e.g., user information, product details) with an input field above the table to filter the data based on user input. This should be simple and intuitive, allowing users to quickly reduce the dataset to relevant entries based on their filter criteria.
COMPONENTS:
- FilterInput: A standalone component; an input field where users can type to filter the table data.
- DataTable: A component that takes children; this will display the data rows that match the filter criteria.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-xl font-bold text-gray-800 mb-4"">Data Overview</h1><FilterInput/><DataTable><tr class=""bg-gray-50 border-b border-gray-200""><th class=""px-4 py-2 text-gray-600"">ID</th><th class=""px-4 py-2 text-gray-600"">Name</th><th class=""px-4 py-2 text-gray-600"">Email</th></tr><!-- Rows will dynamically populate here based on filter --></DataTable></div>
COMPONENT HTML:
FilterInput:
<input type=""text"" placeholder=""Filter results..."" class=""w-full p-2 border border-gray-300 rounded-lg mb-4"" aria-label=""Filter Table""/>
DataTable:
<table class=""w-full text-left rounded-lg overflow-hidden"">{children} </table>"
Pull Quotes/Testimonials,"DESCRIPTION:
The UI should display a section of testimonials or pull quotes, featuring quotes from satisfied customers or users. The section should be responsive, with quotes stacking vertically on smaller screens and displaying in a grid on larger screens. Each quote should include a quote text, an author name, and an optional title or company.
COMPONENTS:
- QuoteCard: Standalone component that represents a single quote, containing a quote text, an author name, and an optional title or company.
- TestimonialsSection: Component that contains a heading and a wrapper for a list of Quote Cards, takes children.
HTML:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-3xl font-bold mb-4"">What Our Customers Say</h2><TestimonialsSection><QuoteCard/><QuoteCard/><QuoteCard/></TestimonialsSection></section>
COMPONENT HTML:
QuoteCard:
<div class=""flex flex-col mb-4 p-4 shadow-md rounded-md""><blockquote class=""text-lg"">{quote_text}</blockquote><p class=""text-sm text-gray-500"">{author_name}, {author_title}</p></div>
TestimonialsSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Testimonial Author Profile,"DESCRIPTION:
The UI should display a testimonial author's profile information, including their name, role, and photo, along with a quote and a rating. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- TestimonialAuthorProfile: A standalone component that displays the author's profile information and testimonial.
- AuthorAvatar: A standalone component that displays the author's photo.
- Rating: A standalone component that displays the rating.
- TestimonialQuote: A standalone component that displays the testimonial quote.
HTML:
<div class=""max-w-md mx-auto mb-4 md:mb-8""><TestimonialAuthorProfile/></div>
COMPONENT HTML:
TestimonialAuthorProfile:
<div class=""flex flex-col md:flex-row items-center mb-4""><AuthorAvatar/><div class=""md:ml-4""><p class=""text-lg font-bold"">{author_name}</p><p class=""text-gray-600"">{author_role}</p><Rating/></div></div><TestimonialQuote/>
AuthorAvatar:
<img class=""w-24 h-24 rounded-full"" src={author_photo_url} alt={author_name}/>
Rating:
<div class=""flex mb-2"">{rating_out_of_five} <i class=""fas fa-star text-yellow-500""></i></div>
TestimonialQuote:
<blockquote class=""text-lg italic mb-4"">{testimonial_quote}</blockquote>"
Testimonial Author Image,"DESCRIPTION:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
COMPONENTS:
- TestimonialAuthorImage: Standalone component
HTML:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
COMPONENT HTML:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Links,"DESCRIPTION:
The UI should display a list of links with a brief description and an optional icon.
COMPONENTS:
- LinkItem: A standalone component representing a single link.
- LinkList: A component that takes children, containing a list of `LinkItem` components.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><LinkItem/><LinkItem/><!-- add more LinkItem components here --></LinkList></div>
COMPONENT HTML:
LinkItem:
<a href=""{link_url}"" class=""block mb-4""><!-- optional icon -->{icon_url ? <img src={icon_url} alt="""" class=""w-4 h-4 mr-2""/>: null} <span>{link_text}</span><p class=""text-gray-600"">{link_description}</p></a>
LinkList:
<ul class=""list-none mb-0"">{children}</ul>"
Pagination Previous Link,"DESCRIPTION:
The UI should be a disabled or enabled previous link element for pagination, indicating the ability to navigate to the previous page. The link should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PaginationPreviousLink: Standalone component, indicates the ability to navigate to the previous page.
HTML:
<nav aria-label=""Pagination""><PaginationPreviousLink/><!-- Other pagination links will go here --></nav>
COMPONENT HTML:
PaginationPreviousLink:
<a href=""{previous_page_url}"" class=""rounded-md py-2 px-4 {disabled ? 'cursor-not-allowed opacity-50' : 'bg-gray-100 hover:bg-gray-200'}"" aria-disabled={disabled ? 'true' : 'false'}>{disabled ? '« Previous' : '‹ Previous'}</a>"
Dropdown menu,"DESCRIPTION:
The UI should be a dropdown menu that is hidden by default and appears when the user clicks on a button or hovering over it. The dropdown menu should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- DropdownButton: (standalone): a button that triggers the dropdown menu
- DropdownMenu: (takes children): a container that holds the dropdown menu items
- DropdownMenuItem: (standalone): an individual item in the dropdown menu
HTML:
<div class=""relative inline-flex""><DropdownButton/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><!-- add more DropdownMenuItem here --></DropdownMenu></div>
COMPONENT HTML:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{button_text}</button>
DropdownMenu:
<div class=""absolute top-full left-0 w-48 bg-white shadow-md"">{children}</div>
DropdownMenuItem:
<a href=""#"" class=""block py-2 px-4 text-gray-600 hover:text-gray-900"">{menu_item_text}</a>"
Small box that users can click to select or deselect an option,"DESCRIPTION:
A small checkbox that can be toggled on and off, indicating a selected or deselected option. The checkbox should be responsive and accessible.
COMPONENTS:
- CheckBox: component (standalone)
HTML:
<div class=""flex items-center""><CheckBox/><label class=""ml-2"">{option_label}</label></div>
COMPONENT HTML:
CheckBox:
<input type=""checkbox"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded"" aria-label={option_label}/>"
Invoice generator form,"DESCRIPTION:
The Invoice Generator Form should offer a user-friendly interface for inputting key details to generate an invoice. This includes fields for the sender's information, client's information, a date selector for the invoice date, line items for services or products with their descriptions, quantities, and prices, and a submit button to generate the invoice.
COMPONENTS:
- InputField: (Standalone) - This component represents an individual input field with a label.
- DateSelector: (Standalone) - This is a specific input for selecting dates.
- LineItem: (Takes children) - This component handles entries for products or services with fields for description, quantity, and price.
- SubmitButton: (Standalone) - A button to submit the form data.
HTML:
<form class=""max-w-4xl mx-auto p-4""><InputField/><InputField/><DateSelector/><!-- Sender's Information --><InputField/><InputField/><!-- Client's Information --><InputField/><InputField/><!-- Line Items for invoice details --><LineItem><InputField/><InputField/><InputField/></LineItem><!-- Section for additional line items if necessary --><LineItem><InputField/><InputField/><InputField/></LineItem><SubmitButton/></form>
COMPONENT HTML:
InputField:
<div class=""mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"">{label}</label><input type=""{input_type}"" class=""shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"" placeholder=""{placeholder}""/></div>
DateSelector:
<div class=""mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"">{label}</label><input type=""date"" class=""shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline""/></div>
LineItem:
<div class=""bg-gray-100 p-3 my-2"">{children}</div>
SubmitButton:
<button type=""submit"" class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"">{button_text}</button>"
Call-to-Action (CTA) Button: Encourage visitors to take action,"DESCRIPTION:
A prominent, responsive, and accessible call-to-action (CTA) button that encourages visitors to take action.
COMPONENTS:
- CallToActionButton: Standalone component that renders a CTA button.
HTML:
<main class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- Hero section with CTA button --><section class=""md:flex justify-center""><!-- CTA button --><CallToActionButton/></section></main>
COMPONENT HTML:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Social Media Share Button,"DESCRIPTION:
A social media share button should be a rectangular button with an icon representing the social media platform and a text ""Share"" or the platform's name. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- SocialMediaShareButton: (standalone): The main share button component.
- SocialMediaIcon: (standalone): The icon component representing the social media platform.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaShareButton/></div>
COMPONENT HTML:
SocialMediaShareButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><SocialMediaIcon/><span class=""ml-2"">{platform_name}</span></button>
SocialMediaIcon:
<i class=""fab fa-{social_media_platform} mr-2"" aria-hidden=""true""></i>"
Social Media Share Button,"DESCRIPTION:
The UI should be a social media share button that allows users to share content on various social media platforms. The button should be responsive, mobile-first, and accessible. It should have a neutral background color and a prominent call-to-action (CTA) to encourage users to share. The button should also display the social media platform's logo and a brief text indicating the platform's name.
COMPONENTS:
- SocialMediaShareButton: (standalone): The main button component that contains the social media platform's logo and text.
- SocialMediaIcon: (standalone): The social media platform's logo.
- SocialMediaText: (standalone): The brief text indicating the social media platform's name.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaShareButton/></div>
COMPONENT HTML:
SocialMediaShareButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><SocialMediaIcon/><SocialMediaText/></button>
SocialMediaIcon:
<img src={social_media_logo_url} alt={social_media_platform_name} class=""h-4 w-4 mr-2""/>
SocialMediaText:
<span>{social_media_platform_name}</span>"
Product support,"DESCRIPTION:
The UI for product support should feature a clean, user-friendly layout with clear sections including a frequently asked questions (FAQ) list, a contact form for direct inquiries, and a backlink to the main product page for users who may need additional information or resources. It should be easy to navigate and aesthetically pleasing with a structured layout ensuring a good mobile and desktop experience.
COMPONENTS:
- FAQSection: (Standalone)**: A component that lists frequently asked questions and their answers.
- ContactForm: (Standalone)**: A form where users can submit their queries or issues directly.
- BackToProductLink: (Standalone)**: A hyperlink that takes users back to the main product page.
HTML:
<div class=""container mx-auto px-4""><h1 class=""text-xl font-bold text-center my-5"">Product Support</h1><FAQSection/><ContactForm/><BackToProductLink/></div>
COMPONENT HTML:
FAQSection:
<section class=""my-8""><h2 class=""text-lg font-semibold mb-4"">Frequently Asked Questions</h2><div class=""space-y-4""><div><h3 class=""font-medium"">How do I install the product?</h3><p>Follow the step-by-step guide available in the installation section of our website or refer to the included installation manual.</p></div><div><h3 class=""font-medium"">Who do I contact for technical support?</h3><p>You can fill out our contact form below or reach us directly via the contact details provided on our Contact Us page.</p></div></div></section>
ContactForm:
<section class=""my-8""><h2 class=""text-lg font-semibold mb-4"">Get in Touch</h2><form action=""{formSubmissionUrl}"" method=""POST"" class=""space-y-4""><input type=""text"" placeholder=""Your Name"" name=""name"" class=""px-4 py-2 border rounded-md w-full"" required><input type=""email"" placeholder=""Your Email"" name=""email"" class=""px-4 py-2 border rounded-md w-full"" required><textarea rows=""4"" placeholder=""Your Message"" name=""message"" class=""px-4 py-2 border rounded-md w-full"" required></textarea><button type=""submit"" class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form></section>
BackToProductLink:
<div class=""text-center my-8""><a href=""{productPageUrl}"" class=""text-blue-500 hover:underline"">Back to product page</a></div>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
Featured Video Play Button,"DESCRIPTION:
The UI should display a play button overlaid on a featured video thumbnail, encouraging users to play the video.
COMPONENTS:
- FeaturedVideoThumbnail: standalone, displays the video thumbnail.
- PlayButton: standalone, displays a play button icon.
HTML:
<div class=""relative w-full h-full flex justify-center""><FeaturedVideoThumbnail/><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><PlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<img src={video_thumbnail_url} alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/>
PlayButton:
<button aria-label=""Play Video"" class=""bg-white rounded-full p-4 text-3xl font-bold""><i class=""fas fa-play text-lg"" aria-hidden=""true""></i></button>"
Filter dropdown menu,"DESCRIPTION:
The UI should feature a dropdown menu that users can click to expand and view a list of filter options. Each filter option is a selectable item that, when clicked, presumably affects content displayed elsewhere on the page.
COMPONENTS:
- DropdownButton: (Standalone)**: A button that when clicked, will toggle the visibility of the DropdownContent.
- DropdownContent: (Can have children)**: A container that holds the various filter options.
- DropdownItem: (Standalone)**: Represents an individual filter option within the DropdownContent.
HTML:
<div class=""relative""><DropdownButton/><DropdownContent><!-- Sample filter options --><DropdownItem/><DropdownItem/><DropdownItem/></DropdownContent></div>
COMPONENT HTML:
DropdownButton:
<button class=""px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-lg shadow-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-50"" aria-haspopup=""true"" aria-expanded=""{aria_expanded}"" id=""dropdownButton"">Filter Options </button>
DropdownContent:
<div class=""absolute mt-1 bg-white shadow-lg rounded-md w-48"" aria-labelledby=""dropdownButton"" style=""display: {dropdown_display};"">{children} </div>
DropdownItem:
<a href=""#"" class=""block px-4 py-2 text-sm text-gray-800 hover:bg-gray-100"" role=""menuitem"">{filter_option_name}</a>"
Table column group,"DESCRIPTION:
A table column group is a UI component that defines a group of columns in a table. It should be responsive, accessible, and easy to read. The columns should be evenly spaced and take up the full width of the container.
COMPONENTS:
- TableColumnGroup: A wrapper component that defines a group of columns. Takes children.
- TableColumn: A single column definition. Standalone.
HTML:
<table><colgroup><TableColumnGroup><!-- column definitions go here --></TableColumnGroup></colgroup></table>
COMPONENT HTML:
TableColumnGroup:
<!-- NOTE: col elements will be generated by TableColumn components --><colgroup>{children}</colgroup>
TableColumn:
<col span={column_span}/>"
Product Feature Description,"DESCRIPTION:
The UI should display a product feature description, which includes a headline, a brief description, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeatureHeadline: Standalone component, displays the headline of the product feature.
- FeatureDescription: Standalone component, displays a brief description of the product feature.
- CallToActionButton: Standalone component, displays a call-to-action button.
- FeatureDescriptionContainer: Container component, takes children (FeatureHeadline, FeatureDescription, and CallToActionButton).
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6""><FeatureDescriptionContainer><FeatureHeadline/><FeatureDescription/><CallToActionButton/></FeatureDescriptionContainer></div>
COMPONENT HTML:
FeatureHeadline:
<h2 class=""text-lg font-bold"">{feature_headline}</h2>
FeatureDescription:
<p class=""text-base"">{feature_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
FeatureDescriptionContainer:
<div class=""flex flex-col gap-4"">{children}</div>"
Product Feature Description,"DESCRIPTION:
The UI should display a brief description of a product feature, including an icon, a title, and a short paragraph of text.
COMPONENTS:
- ProductFeatureDescription: A standalone component that displays a brief description of a product feature.
- Icon: A standalone component that displays an icon.
- FeatureTitle: A standalone component that displays the title of the feature.
- FeatureDescription: A standalone component that displays a short paragraph of text describing the feature.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><ProductFeatureDescription/></div>
COMPONENT HTML:
ProductFeatureDescription:
<div class=""flex flex-wrap mb-4""><Icon/><div class=""ml-4""><FeatureTitle/><FeatureDescription/></div></div>
Icon:
<i class=""fas fa-{icon_name} text-2xl text-{icon_color} mr-4""/>
FeatureTitle:
<h3 class=""text-lg font-bold"">{feature_title}</h3>
FeatureDescription:
<p class=""text-sm text-gray-600"">{feature_description}</p>"
Product Feature Description,"DESCRIPTION:
The UI should display a product feature description, which includes a title, a brief description, and a call-to-action (CTA) button. The title should be prominent and centered, while the description should beconcise and easily readable. The CTA button should be prominent and inviting.
COMPONENTS:
- ProductFeatureDescription: standalone component that contains a title, description, and CTA button.
- Title: standalone component that displays the title of the product feature.
- Description: standalone component that displays the brief description of the product feature.
- CTAButton: standalone component that displays a call-to-action button.
HTML:
<section class=""max-w-lg mx-auto py-12""><ProductFeatureDescription/></section>
COMPONENT HTML:
ProductFeatureDescription:
<div class=""flex flex-col items-center justify-center""><Title/><Description/><CTAButton/></div>
Title:
<h2 class=""text-3xl font-bold mb-4"">{title}</h2>
Description:
<p class=""text-lg mb-8"">{description}</p>
CTAButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Product Feature Description,"DESCRIPTION:
The UI should display a product feature description, consisting of a header, a brief summary, and a detailed description. It should be responsive, readable, and easy to understand on various devices.
COMPONENTS:
- ProductHeader: Standalone, displays the product name and icon.
- SummarySection: Takes children, displays a brief summary of the product feature.
- DescriptionSection: Takes children, displays a detailed description of the product feature.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductHeader/><SummarySection><!-- summary content --></SummarySection><DescriptionSection><!-- detailed description content --></DescriptionSection></div>
COMPONENT HTML:
ProductHeader:
<div class=""flex items-center mb-4""><img src=""{product_icon}"" alt=""Product Icon"" class=""w-12 h-12 mr-4""/><h2 class=""text-lg font-bold"">{product_name}</h2></div>
SummarySection:
<section class=""mb-6""><h3 class=""text-lg font-bold mb-2"">{summary_header}</h3><p>{summary_text}</p>{children}</section>
DescriptionSection:
<section class=""mb-6""><h3 class=""text-lg font-bold mb-2"">{description_header}</h3><p>{description_text}</p>{children}</section>"
Product Image Gallery: Showcase your product from multiple angles,"DESCRIPTION:
The UI should feature a main display area that showcases a large view of the selected product image. Below the main display, there should be a horizontal list of thumbnails representing different angles or variations of the product. Clicking a thumbnail should update the main display with that image. This gallery should be responsive, adapting to both mobile and desktop views.
COMPONENTS:
- ImageDisplay: (Standalone)**: A component that displays the main image.
- ThumbnailList: (Standalone)**: A component that contains all the thumbnails.
- Thumbnail: (Children)**: A component that represents an individual thumbnail.
HTML:
<div class=""max-w-4xl mx-auto p-4""><ImageDisplay/><ThumbnailList/></div>
COMPONENT HTML:
ImageDisplay:
<div class=""w-full""><img src=""{selectedImageUrl}"" alt=""{selectedImageAlt}"" class=""w-full h-auto""/></div>
ThumbnailList:
<div class=""flex overflow-x-auto mt-4 space-x-2""><Thumbnail><img src=""{thumbnailUrl1}"" alt=""{thumbnailAlt1}"" class=""w-20 h-20 object-cover border-2 border-transparent hover:border-gray-400 cursor-pointer""/></Thumbnail><Thumbnail><img src=""{thumbnailUrl2}"" alt=""{thumbnailAlt2}"" class=""w-20 h-20 object-cover border-2 border-transparent hover:border-gray-400 cursor-pointer""/></Thumbnail><!-- Additional thumbnails can be added similarly --></div>
Thumbnail:
<div>{children} </div>"
Image gallery control,"DESCRIPTION:
The UI should consist of a gallery of images displayed in a grid format. Each image can be clicked to view a larger version. There should be a modal overlay that displays the full-size image when any image in the gallery is clicked. The modal should have a close button to exit the view.
COMPONENTS:
- GridGallery: Standalone component; it displays images in a grid layout.
- ModalOverlay: Component that takes children; it is used to display the larger version of an image along with a close button.
HTML:
<div class=""container mx-auto p-4""><GridGallery/><ModalOverlay><img src=""{selectedImageUrl}"" alt=""{selectedImageAlt}"" class=""max-w-full max-h-full""/><button class=""absolute top-2 right-2 text-xl"">&times;</button></ModalOverlay></div>
COMPONENT HTML:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4""><img src=""{imageUrl1}"" alt=""{imageAlt1}"" class=""w-full cursor-pointer""/><img src=""{imageUrl2}"" alt=""{imageAlt2}"" class=""w-full cursor-pointer""/><img src=""{imageUrl3}"" alt=""{imageAlt3}"" class=""w-full cursor-pointer""/><!-- More images can be added similarly --></div>
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center"">{children} </div>"
Award or achievement section with icons and dates,"DESCRIPTION:
The UI should have a section that showcases awards or achievements, with icons and dates.
COMPONENTS:
- AwardItem: A standalone component that represents a single award or achievement.
- AchievementSection: A component that takes children and wraps the award items.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl mb-4"">Awards and Achievements</h2><AchievementSection><AwardItem/><AwardItem/><AwardItem/></AchievementSection></section>
COMPONENT HTML:
AwardItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon}</span><div><h3 class=""text-lg"">{award_name}</h3><p class=""text-sm text-gray-600"">{award_date}</p></div></div>
AchievementSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Award or achievement section with icons and dates,"DESCRIPTION:
The UI should display a list of awards or achievements with icons and dates in a responsive, mobile-first, and accessible manner.
COMPONENTS:
- AwardCard: A standalone component that represents a single award or achievement.
- AwardList: A component that takes children, which is a list of `AwardCard` components.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Awards and Achievements</h2><AwardList><AwardCard/><AwardCard/><!-- Add more AwardCard components here --></AwardList></section>
COMPONENT HTML:
AwardCard:
<div class=""flex items-center mb-4""><div class=""mr-4""><i class=""fas fa-{award_icon} text-2xl text-gray-600""></i></div><div><h3 class=""text-lg font-bold"">{award_name}</h3><p class=""text-gray-600"">{award_date}</p></div></div>
AwardList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Product Price Currency,"DESCRIPTION:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
COMPONENTS:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
HTML:
<div class=""flex items-center""><ProductPriceCurrency/></div>
COMPONENT HTML:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Replies,"DESCRIPTION:
The UI should be a simple reply interface with a text input field, a send button, and a display section for previous replies. The interface should be responsive, mobile-first, and accessible.
COMPONENTS:
- ReplyInput: a standalone component that displays a text input field and a send button.
- ReplyList: a component that takes children, which are individual `ReplyItem` components.
- ReplyItem: a standalone component that displays a single reply.
HTML:
<div class=""max-w-md mx-auto p-4""><ReplyInput/><ReplyList><ReplyItem/><!-- Add more ReplyItem components here --></ReplyList></div>
COMPONENT HTML:
ReplyInput:
<div class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your reply...""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send</button></div>
ReplyList:
<ul class=""list-none mb-4"">{children}</ul>
ReplyItem:
<li class=""py-2 border-b border-gray-200""><p class=""text-sm"">{reply_text}</p><p class=""text-xs text-gray-500"">{reply_author}</p></li>"
Game Trailer and Video Embeds,"DESCRIPTION:
The UI should consist of a full-bleed video trailer section that takes up the full width and height of the screen, with a responsive design that adapts to different screen sizes. The video trailer should be embedded in an iframe with a 16:9 aspect ratio. There should be a placeholder for a game title and a call-to-action button below the video.
COMPONENTS:
- VideoTrailerSection: (standalone): A full-bleed section that contains the video trailer.
- GameTitle: (standalone): A heading element that displays the game title.
- CallToActionButton: (standalone): A button element that displays a call-to-action.
HTML:
<div class=""container mx-auto p-4 md:p-8""><VideoTrailerSection/><div class=""flex justify-center mb-4""><GameTitle/></div><div class=""flex justify-center""><CallToActionButton/></div></div>
COMPONENT HTML:
VideoTrailerSection:
<div class=""aspect-w-16 aspect-h-9 mb-4""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
GameTitle:
<h1 class=""text-3xl font-bold"">{game_title}</h1>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Game Trailer and Video Embeds,"DESCRIPTION:
The UI should display a game trailer video with a title, description, and a responsive video embed that adapts to different screen sizes.
COMPONENTS:
- VideoEmbed: (standalone) - A responsive video embed component that adapts to different screen sizes.
- TrailerTitle: (standalone) - A component that displays the title of the game trailer.
- TrailerDescription: (standalone) - A component that displays a brief description of the game trailer.
- TrailerContainer: (takes children) - A container component that wraps the video embed, title, and description.
HTML:
<div class=""max-w-md mx-auto p-4""><TrailerContainer><TrailerTitle/><VideoEmbed/><TrailerDescription/></TrailerContainer></div>
COMPONENT HTML:
VideoEmbed:
<div class=""aspect-video w-full h-full""><iframe src={`https://www.youtube.com/embed/${video_id}`} frameborder=""0"" allowfullscreen class=""w-full h-full""/></div>
TrailerTitle:
<h2 class=""text-3xl font-bold"">{trailer_title}</h2>
TrailerDescription:
<p class=""text-lg"">{trailer_description}</p>
TrailerContainer:
<div class=""flex flex-col justify-center items-center"">{children}</div>"
Event calendar,"DESCRIPTION:
The UI should be a calendar that displays events for a specific month. It should be responsive, mobile-friendly, and accessible. It should have a header with the month and year, a grid of days with events listed below each day, and a navigation section to move to the previous or next month.
COMPONENTS:
- CalendarHeader: (standalone): Displays the month and year
- CalendarGrid: (takes children): A grid of days in the month
- DayCell: (takes children): An individual day in the grid with events listed below
- Event: (standalone): An individual event on a day
- Navigation: (standalone): Navigation section to move to the previous or next month
HTML:
<div class=""container mx-auto pt-4""><CalendarHeader/><CalendarGrid><DayCell><Event/></DayCell><DayCell><Event/><Event/></DayCell>...
</CalendarGrid><Navigation/></div>
COMPONENT HTML:
CalendarHeader:
<h1 class=""text-2xl"">{month} {year}</h1>
CalendarGrid:
<div class=""grid grid-cols-7 gap-2"">{children}</div>
DayCell:
<div class=""flex flex-col p-2""><p class=""text-lg"">{day}</p><ul class=""list-none mb-2"">{children}</ul></div>
Event:
<li class=""py-2"">{event_name} ({event_time})</li>
Navigation:
<nav class=""flex justify-between py-4""><button class=""btn btn-prev"" disabled={is_first_month}>Prev</button><button class=""btn btn-next"" disabled={is_last_month}>Next</button></nav>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Sidebar that remains fixed as users scroll through content,"DESCRIPTION:
The UI should have a fixed sidebar that remains stationary as the user scrolls through the content. The sidebar should be positioned on the left side of the screen and should not move even when the user scrolls vertically.
COMPONENTS:
- Sidebar: (standalone): The sidebar component that remains fixed as the user scrolls.
- ContentArea: (takes children): The content area where the main content is displayed.
HTML:
<div class=""flex h-screen""><Sidebar/><ContentArea><!-- content goes here --></ContentArea></div>
COMPONENT HTML:
Sidebar:
<div class=""fixed top-0 left-0 w-64 h-screen bg-gray-100 p-4""><!-- sidebar content goes here --></div>
ContentArea:
<div class=""ml-64 p-4"">{children}</div>"
Modal dialog prompting users to confirm an action before proceeding,"DESCRIPTION:
- The UI should feature a modal dialog that appears centered on the screen with a dimmed background to focus attention on the dialog.
   - The modal will contain:
     - A title indicating the action to confirm.
     - A descriptive message explaining what the action entails or the consequences of proceeding.
     - Two buttons: one to confirm the action (""Confirm"") and another to cancel or close the dialog (""Cancel"").
COMPONENTS:
- ModalOverlay: (Standalone):** A full-screen semi-transparent overlay that dims the background content.
- ModalDialog: (Contains children):** A center-aligned container for modal content including text and buttons.
- ConfirmButton: (Standalone):** A button styled prominently to encourage confirmation.
- CancelButton: (Standalone):** A less prominent button intended for closing the dialog or cancelling the action.
HTML:
<div><ModalOverlay/><ModalDialog><h2>{modalTitle}</h2><p>{modalDescription}</p><div class=""flex justify-end space-x-4 mt-4""><CancelButton/><ConfirmButton/></div></ModalDialog></div>
COMPONENT HTML:
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50""></div>
ModalDialog:
<div class=""fixed inset-0 flex items-center justify-center p-4""><div class=""bg-white rounded-lg shadow-lg max-w-sm mx-auto p-6 space-y-4"">{children} </div></div>
ConfirmButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Confirm</button>
CancelButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-black py-2 px-4 rounded"">Cancel</button>"
Logo display,"DESCRIPTION:
The UI should display a logo with a maximum width of 200 pixels, centered horizontally, and with a subtle shadow effect.
COMPONENTS:
- LogoDisplay: (standalone)
HTML:
<div class=""flex justify-center mb-4""><LogoDisplay/></div>
COMPONENT HTML:
LogoDisplay:
<img src=""{logo_url}"" alt=""{logo_alt_text}"" class=""max-w-full w-48 h-12 shadow-md rounded-md""/>"
Logo display,"DESCRIPTION:
The UI should display a logo with a max width of 200px. On larger screens, the logo should be centered horizontally.
COMPONENTS:
- LogoDisplay: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 flex justify-center""><LogoDisplay/></div>
COMPONENT HTML:
LogoDisplay:
<img src={logoUrl} alt={logoAlt} class=""max-w-full h-auto""/>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should be a responsive button that allows users to upload a file. The button should be styled with a background color, border, and hover effect. When clicked, it should open a file browser for the user to select a file.
COMPONENTS:
- UploadButton: Standalone component that renders a button with a label and a file input.
- FileInputLabel: Standalone component that renders a label for the file input.
HTML:
<div class=""flex justify-center""><UploadButton/></div>
COMPONENT HTML:
UploadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><FileInputLabel/><input type=""file"" class=""hidden""/></button>
FileInputLabel:
<span>Choose a file...</span>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should have a clickable button with a label ""Upload File"" and a file browser input field that appears when the button is clicked.
COMPONENTS:
- AttachmentUploadButton: standalone component that contains a button with a label ""Upload File"" and a hidden file input field.
- FileInput: standalone component that represents the file input field.
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload File <FileInput/></button>
FileInput:
<input type=""file"" id=""{fileInputId}"" class=""sr-only""/>"
Attachment upload button with file browser,"DESCRIPTION:
A simple attachment upload button with a file browser dialog that opens when clicked.
COMPONENTS:
- AttachmentUploadButton: (standalone)
- FileBrowserDialog: (takes children)
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/><FileBrowserDialog><!-- file browser dialog content will be inserted here --></FileBrowserDialog></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Attach File <input type=""file"" class=""hidden"" id=""{input_id}""/><label for=""{input_id}"" class=""cursor-pointer"">Browse</label></button>
FileBrowserDialog:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center""><div class=""bg-white p-4 rounded""><h2 class=""text-lg font-bold"">Select a file</h2>{children} </div></div>"
Contact List: Manage customer relationships,"DESCRIPTION:
The Contact List UI should display a list of customer contacts, each with their name, email, and phone number. The list should be responsive, with a mobile-friendly design that adapts to different screen sizes. The UI should be accessible, with clear typography and sufficient color contrast. The design should also prioritize readability and simplicity, making it easy for users to scan and manage their customer relationships.
COMPONENTS:
- ContactListItem: (standalone): Represents an individual contact in the list, displaying name, email, and phone number.
- ContactListHEADER: (standalone): The header component that displays the column titles for the contact list.
- ContactListCONTAINER: (takes children): The main container that holds the contact list items.
HTML:
<div class=""max-w-md mx-auto p-4""><ContactListHEADER/><ContactListCONTAINER><!-- Contact list items will be rendered here --><ContactListItem/><ContactListItem/><!-- ... --></ContactListCONTAINER></div>
COMPONENT HTML:
ContactListItem:
<li class=""flex items-center py-4""><div class=""w-1/3"">{contact_name}</div><div class=""w-1/3"">{contact_email}</div><div class=""w-1/3"">{contact_phone}</div></li>
ContactListHEADER:
<thead><tr><th class=""w-1/3"">Name</th><th class=""w-1/3"">Email</th><th class=""w-1/3"">Phone</th></tr></thead>
ContactListCONTAINER:
<table class=""w-full""><ContactListHEADER/><tbody>{children} </tbody></table>"
Product Description Table,"DESCRIPTION:
The UI should be a table that displays product information in a clear and organized manner. The table should be responsive, with columns adapting to different screen sizes. The table should also be accessible, with proper semantic HTML and ARIA attributes.
COMPONENTS:
- ProductDescriptionTable: A standalone component that renders a table with product information.
- TableCell: A component that takes children and renders a table cell with the provided content.
- TableRow: A component that takes children and renders a table row with the provided cells.
HTML:
<div class=""max-w-md mx-auto p-4""><ProductDescriptionTable/></div>
COMPONENT HTML:
ProductDescriptionTable:
<table class=""border-collapse w-full""><thead><TableRow><TableCell>Feature</TableCell><TableCell>Description</TableCell></TableRow></thead><tbody>{tableRows} </tbody></table>
TableCell:
<td class=""p-2 border"">{children}</td>
TableRow:
<tr class=""odd:bg-gray-100"">{children}</tr>"
Footer Terms Link,"DESCRIPTION:
A simple text link in the footer of a website that says ""Terms"" and links to a terms and conditions page.
COMPONENTS:
- FooterTermsLink: (standalone)
HTML:
<footer class=""flex justify-center p-4""><FooterTermsLink/></footer>
COMPONENT HTML:
FooterTermsLink:
<a href={termsUrl} class=""text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out"">Terms</a>"
Inline Editing/CRUD,"DESCRIPTION:
The UI should be a table with rows representing items that can be edited in-place. Each row should have a column for editing, with a text input and save/cancel buttons. When not editing, the row should display the item's value. The table should be responsive, with columns that adapt to smaller screens.
COMPONENTS:
- EditableTableRow: A table row with an editing state. Takes children.
- EditableTableCell: A table cell that contains an editable input. Takes children.
- EditButton: A button to enter edit mode. Standalone.
- CancelButton: A button to cancel editing. Standalone.
- SaveButton: A button to save changes. Standalone.
HTML:
<table class=""w-full overflow-hidden""><thead><tr><th class=""px-4 py-2"">Item</th><th class=""px-4 py-2"">Actions</th></tr></thead><tbody><EditableTableRow><EditableTableCell><!-- item value or input field goes here --></EditableTableCell><EditableTableCell><EditButton/><CancelButton/><SaveButton/></EditableTableCell></EditableTableRow><!-- more rows --></tbody></table>
COMPONENT HTML:
EditableTableRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"" :class=""{ 'bg-orange-100': isEditing }"">{children}</tr>
EditableTableCell:
<td class=""px-4 py-2"" :class=""{ 'bg-orange-100': isEditing }"">{children}</td>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>
CancelButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Cancel</button>
SaveButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Save</button>"
Contact list with details,"DESCRIPTION:
The UI should be a responsive contact list with details, displaying a list of contacts with their names, emails, and phone numbers. The list should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ContactList: A component that takes children, representing the list of contacts.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-2xl font-bold mb-4"">Contact List</h1><ContactList><!-- Contact cards will be rendered here --></ContactList></div>
COMPONENT HTML:
ContactList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Similar items display,"DESCRIPTION:
The UI should display a list of similar items, each with a title, description, and a call-to-action (CTA) button. The items should be displayed in a grid or list format, with sufficient spacing between each item. The UI should be responsive, with the item cards adapting to different screen sizes.
COMPONENTS:
- SimilarItemCard: a standalone component that represents a single similar item, with a title, description, and CTA button.
- SimilarItemsList: a component that takes children (`SimilarItemCard` components) and displays them in a grid or list format.
HTML:
<section class=""container mx-auto p-4 mb-8""><h2 class=""text-2xl font-bold mb-4"">Similar Items</h2><SimilarItemsList><SimilarItemCard/><SimilarItemCard/><SimilarItemCard/><!-- add more item cards here --></SimilarItemsList></section>
COMPONENT HTML:
SimilarItemCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{item_title}</h3><p class=""text-gray-600"">{item_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
SimilarItemsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Social Sharing Link,"DESCRIPTION:
- A simple button or link that users can click to share content on a social media platform. The button should be visually identifiable with an icon representing the social platform (like a Facebook or Twitter logo), accompanied by text (e.g., ""Share on Facebook""). It should be responsive, scaling appropriately across devices.
COMPONENTS:
- SocialSharingLink: A standalone component.
HTML:
<div class=""container mx-auto p-4""><SocialSharingLink/></div>
COMPONENT HTML:
SocialSharingLink:
<!-- Social Sharing Link: Allows users to share content on social media --><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500""><span>{social_media_icon} Share on {social_media}</span></a>"
Language selector,"DESCRIPTION:
The language selector should be a dropdown menu that displays the current language and allows the user to select from a list of available languages. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- LanguageSelector: (standalone): The main language selector component.
- LanguageOption: (takes children): A single language option in the dropdown menu.
HTML:
<nav class=""lg:flex justify-end pt-2""><LanguageSelector/></nav>
COMPONENT HTML:
LanguageSelector:
<div class=""relative""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{currentLanguage} <span class=""caret""></span></button><ul class=""absolute top-full left-0 w-full bg-white rounded-b shadow-md""><LanguageOption>English</LanguageOption><LanguageOption>Español</LanguageOption><LanguageOption>Français</LanguageOption><!-- Add more language options here --></ul></div>
LanguageOption:
<li class=""px-4 py-2 hover:bg-gray-100""><a href=""#"" class=""block"">{children}</a></li>"
Product Cards/Grids,"DESCRIPTION:
A responsive grid of product cards, with each card displaying a product image, title, price, and a ""Add to Cart"" button. The grid should be mobile-first, with a single column on small screens and a multi-column layout on larger screens.
COMPONENTS:
- ProductCard: (standalone): A single product card, containing image, title, price, and ""Add to Cart"" button.
HTML:
<!-- Product Grid container --><div class=""container mx-auto p-4""><!-- Product Grid --><div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3""><!-- Product Card 1 --><ProductCard/><!-- Product Card 2 --><ProductCard/><!-- ... --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded p-4""><!-- Product Image --><img src=""{product_image}"" alt=""{product_title}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><!-- Product Title --><h2 class=""text-lg font-bold"">{product_title}</h2><!-- Product Price --><p class=""text-lg"">{product_price}</p><!-- Add to Cart Button --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button></div></div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
COMPONENTS:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should have a horizontal row of social media sharing buttons for a video, with each button representing a different platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive and adaptable to different screen sizes.
COMPONENTS:
- SocialMediaButton: a standalone component representing a single social media platform's sharing button.
- SocialMediaShareBar: a component that takes children, which is the container for all social media buttons.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SocialMediaShareBar><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- add more social media buttons here --></SocialMediaShareBar></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{icon_url}"" alt=""{platform_name}"" class=""w-8 h-8 mr-2""><span class=""text-sm"">{platform_name}</span></a>
SocialMediaShareBar:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
A horizontal row of social media buttons to share a video, with each button displaying the logo of the respective platform (e.g. Facebook, Twitter, LinkedIn, etc.).
COMPONENTS:
- SocialMediaButton: (standalone) - a single button for a specific social media platform
- VideoShareButtons: (takes children) - a container for the social media buttons
HTML:
<div class=""flex justify-center mb-4""><VideoShareButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/></VideoShareButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{platform_logo_url}"" alt=""{platform_name} logo"" class=""w-8 h-8 rounded-full hover:opacity-75""/></a>
VideoShareButtons:
<div class=""flex space-x-2"">{children}</div>"
Headings 1,"DESCRIPTION:
The UI should display a heading with a title. The heading should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- Heading: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><Heading/></div>
COMPONENT HTML:
Heading:
<h1 class=""text-3xl font-bold mb-4"">{heading_title}</h1>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Error Message: Displays error message with details,"DESCRIPTION:
The UI should display an error message with details, such as an error title, error message, and possibly other details.
COMPONENTS:
- ErrorMessage: A standalone component that displays an error message with details.
HTML:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><ErrorMessage/></div>
COMPONENT HTML:
ErrorMessage:
<h5 class=""text-lg"">{error_title}</h5><p>{error_message}</p><p>{error_details}</p>"
Reviews,"DESCRIPTION:
The UI should display a list of reviews with author names, ratings, and review text. The reviews should be displayed in a card layout with a maximum width of 800px and centered horizontally on larger screens.
COMPONENTS:
- ReviewCard: A standalone component that displays a single review.
- ReviewList: A component that takes children ( ReviewCard components ) and displays them in a list.
HTML:
<div class=""max-w-2xl mx-auto p-4""><ReviewList><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewList></div>
COMPONENT HTML:
ReviewCard:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{author_name}</h4><div class=""flex items-center""><span class=""text-yellow-500"">{rating}/5</span><!-- rating stars icon --></div><p class=""text-gray-600"">{review_text}</p></div>
ReviewList:
<ul class=""list-none"">{children}</ul>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Personal information form,"DESCRIPTION:
The UI should be a simple form with labels and input fields for personal information such as name, email, phone number, and address. The form should be responsive and mobile-friendly.
COMPONENTS:
- FormHeader: A standalone component that displays the title of the form.
- FormField: A component that takes a label and an input field as children.
- InputField: A standalone component that renders a simple text input field.
- AddressField: A standalone component that renders a grouped input field for address information.
- SubmitButton: A standalone component that renders a submit button.
HTML:
<form class=""max-w-md mx-auto p-4 bg-white shadow-md rounded""><FormHeader/><div class=""flex flex-wrap -mx-3 mb-6""><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Name</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Email</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Phone</label><InputField/></FormField></div><AddressField/><SubmitButton/></form>
COMPONENT HTML:
FormHeader:
<h2 class=""text-lg font-bold"">{form_title}</h2>
FormField:
<div class=""w-full md:w-1/2 px-3 mb-6""><label class=""block uppercase tracking-wide text-xs text-gray-700"">{label}</label>{children}</div>
InputField:
<input class=""appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white"" type=""text""/>
AddressField:
<div class=""flex flex-wrap -mx-3 mb-6""><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Street</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">City</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">State</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Zip</label><InputField/></FormField></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Footer Copyright Year,"DESCRIPTION:
The UI should be a simple footer with a copyright notice that includes the current year.
COMPONENTS:
- FooterCopyright: A standalone component that displays a copyright notice with the current year.
HTML:
<footer><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-sm text-gray-500"">© {current_year} All rights reserved.</p>"
Vacation package booking form,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible vacation package booking form that allows users to select their travel dates, destination, and package type. The form should be easy to use and provide a seamless user experience.
COMPONENTS:
- TravelDatePicker: Standalone component that allows users to select their travel dates.
- DestinationSelect: Standalone component that allows users to select their destination.
- PackageTypeSelect: Standalone component that allows users to select their package type.
- PassengerInfo: Component that takes children to display passenger information.
- BookingForm: Component that takes children to wrap the entire booking form.
HTML:
<BookingForm><h1>Vacation Package Booking Form</h1><TravelDatePicker/><DestinationSelect/><PackageTypeSelect/><PassengerInfo><label>First Name:</label><input type=""text""/><br/><label>Last Name:</label><input type=""text""/><!-- Add more passenger info fields as needed --></PassengerInfo><button type=""submit"">Book Now</button></BookingForm>
COMPONENT HTML:
TravelDatePicker:
<div class=""mb-4""><label for=""travel-dates"">Travel Dates:</label><input type=""date"" id=""travel-dates""/></div>
DestinationSelect:
<div class=""mb-4""><label for=""destination"">Destination:</label><select id=""destination""><option value="""">Select a destination</option><option value=""{destination_option_1}"">{destination_option_1}</option><!-- Add more destination options as needed --></select></div>
PackageTypeSelect:
<div class=""mb-4""><label for=""package-type"">Package Type:</label><select id=""package-type""><option value="""">Select a package type</option><option value=""{package_type_option_1}"">{package_type_option_1}</option><!-- Add more package type options as needed --></select></div>
PassengerInfo:
<div class=""flex flex-wrap -mx-3 mb-4"">{children}</div>
BookingForm:
<form class=""max-w-md mx-auto p-4 pt-6 mb-4"">{children}</form>"
Quote thumbnails,"DESCRIPTION:
The UI should display a collection of quote thumbnails, each containing a quote, an author, and a background image. The thumbnails should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuoteThumbnail: (standalone) - A single quote thumbnail component.
- QuoteList: (takes children) - A container component to hold multiple `QuoteThumbnail` components.
HTML:
<div class=""max-w-md mx-auto p-4""><QuoteList><QuoteThumbnail/><QuoteThumbnail/><!-- Add more QuoteThumbnail components here --></QuoteList></div>
COMPONENT HTML:
QuoteThumbnail:
<div class=""bg-cover bg-center h-48 w-full mb-4 rounded-lg shadow-md""><blockquote class=""p-4 text-lg text-white""><p>{quote_text}</p><cite class=""text-sm"">{author}</cite></blockquote></div>
QuoteList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Sponsorship packages display,"DESCRIPTION:
The UI should display a list of sponsorship packages, each with a title, description, and price. The list should be responsive, with a single column on mobile devices and multiple columns on larger screens. Each package should have a clear title, a brief description, and a prominent price display.
COMPONENTS:
- SponsorshipPackage: A standalone component that displays a single sponsorship package.
- SponsorshipPackageList: A component that takes children (a list of `SponsorshipPackage` components).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-3xl font-bold mb-4"">Sponsorship Packages</h2><SponsorshipPackageList><SponsorshipPackage/><SponsorshipPackage/><SponsorshipPackage/></SponsorshipPackageList></div>
COMPONENT HTML:
SponsorshipPackage:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{packageName}</h3><p class=""text-gray-600"">{packageDescription}</p><p class=""text-lg font-bold"">{packagePrice}</p></div>
SponsorshipPackageList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Sponsorship packages display,"DESCRIPTION:
The UI should display a series of sponsorship packages, each containing details such as package name, description, price, and benefits. The design should be clean, modern, and responsive, with clear typography and sufficient whitespace. The layout should adapt to different screen sizes, with a mobile-first approach.
COMPONENTS:
- SponsorshipPackageList: (takes children): a container for a list of sponsorship packages
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Sponsorship Packages</h2><SponsorshipPackageList><!-- package cards will be inserted here --></SponsorshipPackageList></div>
COMPONENT HTML:
SponsorshipPackageList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
News or updates section with date and title,"DESCRIPTION:
A section displaying news or updates with a date and title.
COMPONENTS:
- UpdateCard: Standalone component displaying a single update.
- UpdateDate: Standalone component displaying the date of the update.
- UpdateTitle: Standalone component displaying the title of the update.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><UpdateCard/><UpdateCard/><!-- Add more UpdateCard components as needed --></section>
COMPONENT HTML:
UpdateCard:
<div class=""flex flex-wrap mb-4""><UpdateDate/><UpdateTitle/></div>
UpdateDate:
<p class=""text-sm text-gray-600"">{date}</p>
UpdateTitle:
<h3 class=""text-lg font-bold"">{title}</h3>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates with each item displaying a date and title. The list should be responsive and accessible on various devices.
COMPONENTS:
- NewsItem: component: standalone
- NewsList: component: takes children
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">News & Updates</h2><NewsList><NewsItem/><NewsItem/><!-- insert more NewsItem components here --></NewsList></div>
COMPONENT HTML:
NewsItem:
<div class=""flex mb-4""><p class=""text-gray-500 text-sm"">{date}</p><h3 class=""text-lg font-bold"">{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Effects (animation),"DESCRIPTION:
- Since the requirement is vague, I'll design a simple text-based UI that will animate on hover. This could represent a common interaction effect in UIs like button hover effects for feedback.
COMPONENTS:
- HoverEffectText: Standalone; this is the component that will change its appearance when hovered over with a mouse or focused via keyboard navigation.
HTML:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Simple Hover Effect</title><link href=""https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"" rel=""stylesheet""></head><body class=""flex justify-center items-center h-screen bg-gray-100""><HoverEffectText/></body></html>
COMPONENT HTML:
HoverEffectText:
<!-- HoverEffectText Component: An element that animates its color and scale on hover --><div tabindex=""0"" class=""px-6 py-3 bg-blue-500 text-white font-bold rounded transition duration-300 ease-in-out hover:bg-blue-600 hover:scale-110 focus:bg-blue-600 focus:scale-110 outline-none"">Hover or Focus Me!</div>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- SearchBar: standalone component that contains the search input field and submit button.
- SearchInput: standalone component that is a simple input field.
- SearchButton: standalone component that is a submit button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search products""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a search bar with a text input field, a search button, and an optional dropdown list of suggestions. The search bar should be responsive, mobile-first, and accessible.
COMPONENTS:
- SearchBar: A standalone component that contains the search input field and button.
- SearchSuggestions: A component that takes children (i.e., a list of suggested products) and renders them in a dropdown list.
HTML:
<div class=""flex justify-center pt-4""><SearchBar/><div class=""absolute z-10""><SearchSuggestions/></div></div>
COMPONENT HTML:
SearchBar:
<div class=""relative w-full lg:max-w-md""><input type=""search"" class=""w-full bg-white border border-gray-300 rounded-md pl-10 pr-3 py-2"" placeholder=""Search products...""/><button class=""absolute top-0 right-0 p-2""><i class=""fas fa-search text-gray-600""/></button></div>
SearchSuggestions:
<ul class=""bg-white border border-gray-300 rounded-b-md"">{children}</ul>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Roadmap/Gantt Charts,"DESCRIPTION:
The UI should display a Gantt chart with a roadmap layout, showing a timeline of tasks and their dependencies. The chart should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- RoadmapHeader: (standalone): displays the title and description of the roadmap
- GanttChart: (takes children): renders the Gantt chart with tasks and dependencies
- TaskCard: (standalone): represents a single task on the Gantt chart
- DependencyLine: (standalone): connects dependent tasks on the Gantt chart
- TimelineMarkers: (standalone): displays the timeline labels and grid lines
HTML:
<div class=""max-w-md mx-auto p-4""><RoadmapHeader/><GanttChart><TaskCard/><TaskCard/><TaskCard/><DependencyLine/><DependencyLine/></GanttChart><TimelineMarkers/></div>
COMPONENT HTML:
RoadmapHeader:
<h1 class=""text-3xl font-bold"">{roadmap_title}</h1><p class=""text-lg"">{roadmap_description}</p>
GanttChart:
<div class=""flex flex-wrap justify-center"">{children}</div>
TaskCard:
<div class=""bg-white shadow-md rounded p-2""><h2 class=""text-lg"">{task_name}</h2><p class=""text-sm"">{task_description}</p><p class=""text-xs"">{task_duration} days</p></div>
DependencyLine:
<div class=""border-l-2 border-dashed border-gray-300""></div>
TimelineMarkers:
<div class=""flex justify-between""><p class=""text-sm"">{start_date}</p><p class=""text-sm"">{end_date}</p><p class=""text-sm"">{today_date}</p></div>"
Toolbar that appears contextually based on user actions or selections,"DESCRIPTION:
The UI should be a contextual toolbar that appears when a user selects an element or performs a specific action. The toolbar should be floating above the main content, with a subtle hover effect and a slight animation when it appears/disappears. It should be responsive, adjusting its position and size according to the screen size and device.
COMPONENTS:
- ContextualToolbar: The main toolbar component that appears contextually. It takes children.
- ToolbarItem: An individual item within the toolbar, such as a button or a dropdown. It takes children.
HTML:
<div class=""fixed top-0 left-0 z-10 w-full lg:w-auto lg:absolute lg:top-auto lg:left-auto lg:bottom-0 lg:right-0""><ContextualToolbar><ToolbarItem><button>Item 1</button></ToolbarItem><ToolbarItem><button>Item 2</button></ToolbarItem><ToolbarItem><button>Item 3</button></ToolbarItem></ContextualToolbar></div>
COMPONENT HTML:
ContextualToolbar:
<div class=""bg-white shadow-md rounded-lg p-2 lg:p-4""><ul class=""flex flex-wrap justify-center lg:flex-no-wrap"">{children} </ul></div>
ToolbarItem:
<li class=""mr-2 lg:mr-4"">{children}</li>"
Callout Box Container,"DESCRIPTION:
The UI should be a responsive container that holds a callout box, typically used to highlight important information or provide additional context. The container should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CalloutBoxContainer: standalone component that wraps the callout box.
- CalloutBox: standalone component that renders the callout box content.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><CalloutBoxContainer/></section>
COMPONENT HTML:
CalloutBoxContainer:
<div class=""bg-yellow-100 p-4 rounded-md shadow-md""><CalloutBox/></div>
CalloutBox:
<div class=""text-lg font-bold"">{callout_title}</div><p class=""text-base"">{callout_description}</p>"
Responsive Table Layout,"DESCRIPTION:
The UI should display a responsive table layout with a header row, multiple data rows, and columns that adjust their width based on the screen size.
COMPONENTS:
- ResponsiveTable: The main container for the responsive table layout. Takes children.
- TableHeader: The header row of the table. Takes children.
- TableRow: A single row in the table. Takes children.
- TableCell: A single cell in the table. Takes children.
HTML:
<ResponsiveTable><TableHeader><TableCell><span>Column 1</span></TableCell><TableCell><span>Column 2</span></TableCell><TableCell><span>Column 3</span></TableCell></TableHeader><TableRow><TableCell>{cellData1}</TableCell><TableCell>{cellData2}</TableCell><TableCell>{cellData3}</TableCell></TableRow><!-- More TableRow components here --></ResponsiveTable>
COMPONENT HTML:
ResponsiveTable:
<div class=""overflow-x-auto""><table class=""w-full border-collapse"">{children} </table></div>
TableHeader:
<thead><tr class=""bg-gray-100"">{children} </tr></thead>
TableRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Text area,"DESCRIPTION:
The UI should feature a simple, responsive text area designed for user input, accommodating a reasonable amount of text. It should be clearly visible with a border and perhaps a subtle background color to distinguish it from the rest of the UI. Padding around the text area should ensure the text does not touch the edges, enhancing readability and user comfort.
COMPONENTS:
- TextArea: This is a standalone component. It encapsulates a text input area where users can type multi-line text.
HTML:
<div class=""container mx-auto p-4""><TextArea/></div>
COMPONENT HTML:
TextArea:
<!-- TextArea component: A multi-line area for user input with styled borders and padding --><textarea class=""w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400"" placeholder=""Type here..."" rows=""4"" aria-label=""Input area""></textarea>"
Review/comment sections,"DESCRIPTION:
The UI should display a list of reviews/comments, each with a user's name, avatar, rating (e.g., 5-star), and comment text. The section should be responsive, mobile-first, and accessible.
COMPONENTS:
- ReviewCard: a standalone component that represents a single review/comment.
- ReviewAvatar: a standalone component that displays a user's avatar.
- ReviewRating: a standalone component that displays a rating (e.g., 5-star).
- ReviewText: a standalone component that displays the comment text.
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-lg md:text-2xl lg:text-3xl font-bold mb-4"">Reviews</h2><ul class=""list-none mb-4""><li><ReviewCard/></li><!-- Add more review cards here --></ul></section>
COMPONENT HTML:
ReviewCard:
<article class=""flex mb-4""><ReviewAvatar/><div class=""ml-4""><h3 class=""text-lg"">{userName}</h3><ReviewRating/><ReviewText/></div></article>
ReviewAvatar:
<img src={avatarUrl} alt={userName} class=""w-12 h-12 rounded-full""/>
ReviewRating:
<div class=""flex mb-2"">{rating} <i class=""fas fa-star text-yellow-400""/></div>
ReviewText:
<p class=""text-gray-600"">{commentText}</p>"
Review/comment sections,"DESCRIPTION:
The UI should display a list of reviews/comments with the reviewer's name, rating, and comment text. The reviewer's name and rating should be displayed above the comment text. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- ReviewCard: A standalone component that displays a single review/comment.
- ReviewList: A component that takes children and displays a list of reviews/comments.
HTML:
<div class=""max-w-md mx-auto p-4""><ReviewList><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewList></div>
COMPONENT HTML:
ReviewCard:
<div class=""bg-white p-4 rounded-md shadow-md mb-4""><h4 class=""text-lg font-bold"">{reviewerName}</h4><div class=""flex justify-between mb-2""><span class=""text-sm text-gray-500"">{rating}/5</span><span class=""text-sm text-gray-500"">{datePosted}</span></div><p class=""text-sm"">{commentText}</p></div>
ReviewList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Review/comment sections,"DESCRIPTION:
The UI should display a list of reviews/comments with the reviewer's name, review/comment text, and a rating (if applicable). The design should be clean, simple, and easy to read.
COMPONENTS:
- ReviewCard: A standalone component that displays a single review/comment.
- ReviewList: A component that takes children (multiple `ReviewCard` components) and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Reviews and Comments</h2><ReviewList><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewList></div>
COMPONENT HTML:
ReviewCard:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-lg font-bold"">{reviewer_name}</h3><p>{review_text}</p><!-- Rating system (if applicable) --><div class=""flex justify-center mb-2"">{rating}/5 </div></div>
ReviewList:
<ul class=""list-none m-0 p-0"">{children}</ul>"
Outline (fill) controls,"DESCRIPTION:
The UI for outline (fill) controls should be clean and intuitive, typically used to adjust parameters such as contour thickness, opacity, and color of a graphic element in a design tool. The controls might include sliders for thickness and opacity, a color picker for color selection, and labels or icons to indicate the function of each control.
COMPONENTS:
- SliderControl: (Standalone): This component represents a slider used to adjust values like thickness and opacity.
- ColorPicker: (Standalone): A component that allows users to select a color. This typically involves some form of color wheel or color grid.
- Label: (Standalone): Displays text, such as a description or value next to sliders or color pickers.
HTML:
<div class=""p-4""><div class=""flex flex-col space-y-4""><div class=""flex items-center""><Label/><SliderControl/></div><div class=""flex items-center""><Label/><SliderControl/></div><div class=""flex items-center""><Label/><ColorPicker/></div></div></div>
COMPONENT HTML:
SliderControl:
<!-- Slider for values like thickness or opacity --><input type=""range"" class=""w-32 md:w-48"" min=""{min_value}"" max=""{max_value}"" step=""{step_value}""/>
ColorPicker:
<!-- Dropdown color picker UI --><input type=""color"" class=""w-16 h-16"" value=""{default_color}""/>
Label:
<!-- Label for each control --><label class=""mr-2 text-sm md:text-base"">{label_text}</label>"
Quote effects,"DESCRIPTION:
The UI should display a quote with a subtle background color, a large font size for the quote, and a smaller font size for the author. The quote and author should be centered on the screen. The background color should be a soft, calming color.
COMPONENTS:
- QuoteComponent: (standalone) - displays the quote
- AuthorComponent: (standalone) - displays the author's name
- QuoteEffectComponent: (takes children) - wraps the quote and author components, adding the background color and centering
HTML:
<div class=""flex h-screen justify-center items-center""><QuoteEffectComponent><QuoteComponent/><AuthorComponent/></QuoteEffectComponent></div>
COMPONENT HTML:
QuoteComponent:
<p class=""text-4xl"">{quote_text}</p>
AuthorComponent:
<p class=""text-lg"">{author_name}</p>
QuoteEffectComponent:
<div class=""bg-gray-100 p-4 rounded"">{children}</div>"
Investment portfolio tracker,"DESCRIPTION:
The UI should be a responsive, mobile-first investment portfolio tracker that displays a list of investments with their respective details. The tracker should have a clean and minimalistic design, with clear typography and ample whitespace. On larger screens, the tracker should display a sidebar with filters and sorting options, while on smaller screens, the filters and sorting options should be accessible through a dropdown menu.
COMPONENTS:
- InvestmentCard: (standalone): Displays a single investment with its details.
- InvestmentList: (takes children): Displays a list of `InvestmentCard` components.
- FilterSidebar: (standalone): Displays filters and sorting options for the investments.
- FilterDropdown: (standalone): Displays filters and sorting options for the investments on smaller screens.
HTML:
<div class=""flex h-screen max-h-screen overflow-hidden""><aside class=""lg:w-64 xl:w-80 hidden lg:block""><FilterSidebar/></aside><div class=""lg:flex-1 xl:flex-1 p-4""><div class=""lg:hidden xl:hidden""><FilterDropdown/></div><InvestmentList><InvestmentCard/><InvestmentCard/><!-- more InvestmentCard components --></InvestmentList></div></div>
COMPONENT HTML:
InvestmentCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg"">{investment_name}</h2><p class=""text-gray-600"">{investment_type}</p><p class=""text-gray-600"">{current_value} ({current_change}%)</p></div>
InvestmentList:
<div class=""flex flex-wrap -mx-4"">{children}</div>
FilterSidebar:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">Filters</h2><form><label class=""block text-gray-600"">Investment Type</label><select class=""block w-full p-2""><option value="""">All</option><option value=""stock"">Stock</option><option value=""bond"">Bond</option><!-- more options --></select><label class=""block text-gray-600"">Sort By</label><select class=""block w-full p-2""><option value="""">Alphabetical</option><option value=""current_value"">Current Value</option><option value=""current_change"">Current Change</option><!-- more options --></select></form></div>
FilterDropdown:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">Filters</h2><form><label class=""block text-gray-600"">Investment Type</label><select class=""block w-full p-2""><option value="""">All</option><option value=""stock"">Stock</option><option value=""bond"">Bond</option><!-- more options --></select><label class=""block text-gray-600"">Sort By</label><select class=""block w-full p-2""><option value="""">Alphabetical</option><option value=""current_value"">Current Value</option><option value=""current_change"">Current Change</option><!-- more options --></select></form><button class=""block w-full p-2 bg-blue-500 hover:bg-blue-700 text-white font-bold"">Apply Filters</button></div>"
Text input field for users to search within the website,"DESCRIPTION:
The UI should be a simple search input field with a placeholder text and a submit button. The input field should be responsive and accessible.
COMPONENTS:
- SearchInput: (standalone)
- SearchButton: (standalone)
HTML:
<div class=""flex justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search within the website"" class=""w-full lg:w-1/2 xl:w-1/3 px-4 py-2 text-sm text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Video/Audio Players,"DESCRIPTION:
The UI should have a large video or audio player in the center, with playback controls (play/pause, seek, volume) below it. There should also be a title and optional description above the player.
COMPONENTS:
- MediaPlayer: standalone, displays the video or audio content
- MediaControls: standalone, displays the playback controls (play/pause, seek, volume)
- MediaTitle: standalone, displays the title of the media
- MediaDescription: standalone, displays a optional description of the media
HTML:
<div class=""flex flex-col h-screen p-4""><div class=""flex justify-center mb-4""><MediaTitle/><!-- displays the title of the media --><MediaDescription/><!-- displays a optional description of the media --></div><MediaPlayer/><!-- displays the video or audio content --><MediaControls/><!-- displays the playback controls (play/pause, seek, volume) --></div>
COMPONENT HTML:
MediaPlayer:
<div class=""w-full h-96 bg-gray-200 rounded-lg""><!-- video or audio content will be rendered here --></div>
MediaControls:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_or_pause_text} </button><div class=""mx-4""><input type=""range"" class=""w-full""/></div><button class=""bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"">Volume: {volume_level}% </button></div>
MediaTitle:
<h2 class=""text-2xl font-bold mb-2"">{media_title}</h2>
MediaDescription:
<p class=""text-gray-600"">{media_description}</p>"
Hero Background Image Size,"DESCRIPTION:
The UI should display a hero section with a background image that scales responsively to fit different screen sizes.
COMPONENTS:
- HeroBackground: standalone component that displays the background image
- HeroContent: standalone component that displays content on top of the background image
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><HeroContent/></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${imageUrl})` }}/>
HeroContent:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-xl text-white""><h1>{heroHeaderText}</h1><p>{heroDescriptionText}</p></div>"
Hero Background Image Size,"DESCRIPTION:
The UI should feature a hero section with a background image that takes up the full width and height of the viewport, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- HeroSection: (standalone) - The main hero section component that contains the background image.
HTML:
<div class=""h-screen w-full""><HeroSection/></div>
COMPONENT HTML:
HeroSection:
<section class=""h-full w-full bg-cover bg-center"" style={`background-image: url(${heroImage})`}><!-- content goes here --></section>"
Trees,"DESCRIPTION:
The UI should display a collection of trees, with each tree displayed as a card that shows its name, species, and a picture. The cards should be arranged in a grid, with multiple cards per row on larger screens and a single card per row on smaller screens.
COMPONENTS:
- TreeCard: a standalone component that displays a single tree, including its name, species, and picture.
- TreeGrid: a component that takes children, which are multiple `TreeCard` components, and arranges them in a grid.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl mb-4"">Trees</h1><TreeGrid><TreeCard/><TreeCard/><!-- Add more TreeCard components here --></TreeGrid></div>
COMPONENT HTML:
TreeCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src=""{tree_image_url}"" alt=""{tree_name}"" class=""w-full h-48 object-cover rounded-t""><h2 class=""text-lg"">{tree_name}</h2><p>Species: {tree_species}</p></div>
TreeGrid:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominently styled Call-to-Action (CTA) button that stands out on the page, with clear and concise text encouraging the user to take action.
COMPONENTS:
- PrimaryCtaButton: A standalone component representing a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><PrimaryCtaButton/></div>
COMPONENT HTML:
PrimaryCtaButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">{cta_text}</button>"
Custom Field Builder: Create tailored data fields,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible interface for building custom data fields. It should consist of a header, a field-type selection section, and a field configuration section. The header should display the title ""Custom Field Builder"" and have an optional ""Save"" button. The field-type selection section should display a list of available field types (e.g., text, number, date, etc.). The field configuration section should display fields depending on the selected field type.
COMPONENTS:
- HeaderComponent: (standalone): Displays the title and optional save button.
- FieldTypeSelectorComponent: (standalone): Displays a list of available field types.
- FieldConfiguratorComponent: (takes children): Displays fields depending on the selected field type.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><HeaderComponent/><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><FieldTypeSelectorComponent/></div><div class=""w-full md:w-1/2 xl:w-2/3 p-4""><FieldConfiguratorComponent><!-- field configuration fields will be rendered here --></FieldConfiguratorComponent></div></div></div>
COMPONENT HTML:
HeaderComponent:
<header class=""flex justify-between mb-4""><h1 class=""text-lg font-bold"">Custom Field Builder</h1><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></header>
FieldTypeSelectorComponent:
<ul class=""list-none mb-4""><li><input type=""radio"" id=""text-field"" name=""field-type"" value=""text""/><label for=""text-field"">Text</label></li><li><input type=""radio"" id=""number-field"" name=""field-type"" value=""number""/><label for=""number-field"">Number</label></li><li><input type=""radio"" id=""date-field"" name=""field-type"" value=""date""/><label for=""date-field"">Date</label></li><!-- more field types will be rendered here --></ul>
FieldConfiguratorComponent:
<!-- field configuration fields will be rendered here based on the selected field type -->{children}"
Appointment scheduler,"DESCRIPTION:
The UI should be a responsive, mobile-first design that displays a calendar and a list of available time slots for an appointment. The user can select a date and time, and then submit the appointment request.
COMPONENTS:
- CalendarHeader: a standalone component that displays the current month and navigation arrows.
- CalendarGrid: a standalone component that displays a grid of days in the current month.
- TimeSlotList: a component that takes children, which displays a list of available time slots.
- TimeSlot: a component that takes children, which displays a single time slot.
- AppointmentForm: a component that takes children, which displays a form to submit an appointment request.
HTML:
<div class=""flex flex-col h-screen""><CalendarHeader/><CalendarGrid/><TimeSlotList><TimeSlot>8:00 AM - 9:00 AM</TimeSlot><TimeSlot>9:00 AM - 10:00 AM</TimeSlot><!-- more time slots --></TimeSlotList><AppointmentForm><label for=""name"">Name:</label><input type=""text"" id=""name""/><label for=""email"">Email:</label><input type=""email"" id=""email""/><button type=""submit"">Submit</button></AppointmentForm></div>
COMPONENT HTML:
CalendarHeader:
<div class=""flex justify-between mb-4""><button	class=""text-gray-600 hover:text-gray-900"">«</button><h2 class=""text-lg"">{current_month}</h2><button	class=""text-gray-600 hover:text-gray-900"">»</button></div>
CalendarGrid:
<div class=""grid grid-cols-7 gap-4 mb-4"">{days_in_month}.map((day, index) =>( <div key={index} class=""text-center"">{day}</div>))}</div>
TimeSlotList:
<ul class=""list-none mb-4"">{children}</ul>
TimeSlot:
<li class=""py-2 border-b"">{children}</li>
AppointmentForm:
<form class=""flex flex-col"">{children}</form>"
Playlist/Audio Controls,"DESCRIPTION:
The UI should display a playlist with audio controls, allowing users to play, pause, and navigate through the playlist. The controls should be responsive, easy to use, and accessible.
COMPONENTS:
- PlaylistComponent: Standalone, displays the playlist
- AudioControlItem: Standalone, displays a single audio control (play/pause, previous, next)
- AudioControlContainer: Takes children, wraps the audio controls
HTML:
<div class=""md:flex justify-center mb-4""><PlaylistComponent/><AudioControlContainer><AudioControlItem/><AudioControlItem/><AudioControlItem/></AudioControlContainer></div>
COMPONENT HTML:
PlaylistComponent:
<ul class=""list-none mb-4"">{playlist_items}.map((item, index) =>( <li key={index} class=""mb-2""><span class=""text-lg"">{item.title}</span><span class=""text-sm"">{item.duration}</span></li>))}</ul>
AudioControlItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{control_label}</button>
AudioControlContainer:
<div class=""flex justify-center mb-2"">{children}</div>"
Clickable text that navigates to another page or resource,"DESCRIPTION:
The UI will have a simple clickable text element, which is commonly referred to as a ""link"". This element will be styled to look distinct from regular text, perhaps with a different color or underline, to indicate that it is interactive and navigates to another page or resource when clicked.
COMPONENTS:
- ClickableLink: (Standalone)**: This component represents a hyperlink that users can click to navigate to a specific URL.
HTML:
<div class=""container mx-auto px-4""><ClickableLink/></div>
COMPONENT HTML:
ClickableLink:
<!-- ClickableLink: A simple hyperlink for navigation --><a href=""{target_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">Click here</a>"
Support chat widget,"DESCRIPTION:
The UI should be a floating chat widget typically positioned at the bottom right corner of the screen. It usually includes:
   - A button to open or close the chat interface.
   - A small panel that expands when the button is clicked, which includes:
     - A header with maybe a title or logo.
     - A scrollable area for chat messages.
     - An input area with a text box for typing messages and a button to send them.
COMPONENTS:
- ChatWidgetButton: (Standalone): A button that the user clicks to open or close the chat widget.
- ChatHeader: (Standalone): Displays the chat widget’s title or logo.
- ChatMessages: (Standalone): A scrollable container for displaying messages.
- MessageInput: (Standalone): An area containing a text box and a button for sending messages.
HTML:
<div class=""fixed bottom-4 right-4 flex flex-col items-end""><div class=""bg-white shadow-lg rounded-lg p-4 hidden""><!-- Chat header --><ChatHeader/><!-- Area to display messages --><ChatMessages/><!-- Input area for typing and sending messages --><MessageInput/></div><!-- Button to toggle chat widget visibility --><ChatWidgetButton/></div>
COMPONENT HTML:
ChatWidgetButton:
<!-- Button to toggle chat widget, decorated to signify interactive function --><button class=""bg-blue-500 text-white rounded-full p-4 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"">Chat</button>
ChatHeader:
<!-- Displaying logo or title of the chat service --><div class=""border-b-2 py-2""><h2 class=""text-lg font-semibold"">Support Chat</h2></div>
ChatMessages:
<!-- Scrollable area for messages --><div class=""overflow-y-auto h-64 p-4""><div class=""text-sm text-gray-600"">Welcome to support! How can we assist you today?</div><!-- Placeholder where more messages would appear --></div>
MessageInput:
<!-- Area to input new messages --><div class=""pt-4 flex""><input type=""text"" class=""flex-1 border rounded-l-lg p-2 focus:border-blue-300 focus:outline-none"" placeholder=""Type your message...""/><button class=""bg-blue-500 text-white rounded-r-lg px-6 hover:bg-blue-600 focus:outline-none"">Send</button></div>"
Collaborator Permission Management System,"DESCRIPTION:
The UI for a Collaborator Permission Management System should feature a main dashboard where permissions for different collaborators can be managed. It would typically include:
   - A header with the system’s name or logo.
   - A sidebar for navigation through different sections such as Home, Users, Settings, etc.
   - A main content area where the list of collaborators with their respective permissions are displayed.
   - Each collaborator entry might have an action button to edit permissions.
   - A footer with additional information or links relevant to the management system.
COMPONENTS:
- Header: (Standalone)**: Contains the logo or name of the system.
- Sidebar: (Standalone)**: Navigation links to various parts of the system.
- CollaboratorList: (Standalone)**: Displays the list of collaborators and their permissions.
- Footer: (Standalone)**: Contains copyright and other pertinent links.
HTML:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Collaborator Permission Management</title></head><body class=""flex flex-col h-screen""><header class=""bg-gray-800 text-white p-4""><Header/></header><div class=""flex flex-1""><aside class=""bg-gray-700 w-64 p-6 text-white""><Sidebar/></aside><main class=""flex-1 p-6""><CollaboratorList/></main></div><footer class=""bg-gray-800 text-white p-4""><Footer/></footer></body></html>
COMPONENT HTML:
Header:
<!-- Simple header displaying system name --><h1 class=""text-xl font-bold"">Collaborator Management System</h1>
Sidebar:
<!-- Navigation sidebar with links to system's sections --><nav><ul><li><a href=""{home_url}"" class=""block py-2"">Home</a></li><li><a href=""{users_url}"" class=""block py-2"">Users</a></li><li><a href=""{settings_url}"" class=""block py-2"">Settings</a></li></ul></nav>
CollaboratorList:
<!-- List of collaborators with their permissions --><div class=""overflow-auto""><table class=""min-w-full text-sm text-left""><thead class=""text-xs uppercase""><tr><th class=""p-4"">Name</th><th class=""p-4"">Permissions</th><th class=""p-4"">Actions</th></tr></thead><tbody><tr><td class=""p-4"">{user1_name}</td><td class=""p-4"">{user1_permissions}</td><td class=""p-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white py-1 px-3 rounded"">Edit</button></td></tr>{/* More rows can be added similarly */} </tbody></table></div>
Footer:
<!-- Footer showing copyright and other information --><p>© {current_year} Collaborator Permission Management. All rights reserved.</p>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Social Media Icon Link,"DESCRIPTION:
A clickable social media icon that links to a specific social media platform.
COMPONENTS:
- SocialMediaIconLink: standalone component
HTML:
<a href={<social_media_url>} class=""flex justify-center w-8 h-8 text-lg transition duration-300 hover:text-primary-500""><SocialMediaIconLink/></a>
COMPONENT HTML:
SocialMediaIconLink:
<i class=""fab fa-{social_media_platform}""></i><!-- fab is from font awesome brand -->"
Product Feature List Item,"DESCRIPTION:
A product feature list item should display an icon, a brief description, and a title, with adequate spacing and margin to separate it from other list items.
COMPONENTS:
- FeatureListItem: a standalone component representing a single list item.
- FeatureIcon: a standalone component displaying an icon.
- FeatureTitle: a standalone component displaying the title of the feature.
- FeatureDescription: a standalone component displaying the brief description of the feature.
HTML:
<ul class=""list-none mb-4""><FeatureListItem/><!-- Add more list items here --></ul>
COMPONENT HTML:
FeatureListItem:
<li class=""flex items-center mb-4""><FeatureIcon/><div class=""ml-4""><FeatureTitle/><FeatureDescription/></div></li>
FeatureIcon:
<i class=""text-xl {icon_class}""></i>
FeatureTitle:
<h3 class=""text-lg font-bold"">{feature_title}</h3>
FeatureDescription:
<p class=""text-gray-600"">{feature_description}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single list item representing a product feature, with an icon, a brief description, and a optional learn more link. The feature item should be responsive and adaptable to different screen sizes.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon representing the feature.
- FeatureDescription: A standalone component that displays a brief description of the feature.
- LearnMoreLink: A standalone component that displays a link to learn more about the feature.
HTML:
<li class=""flex items-center py-4""><FeatureIcon/><FeatureDescription/><LearnMoreLink/></li>
COMPONENT HTML:
FeatureIcon:
<i class=""w-6 h-6 text-gray-500 {icon_class}"" aria-hidden=""true""></i>
FeatureDescription:
<p class=""ml-4 text-gray-700"">{feature_description}</p>
LearnMoreLink:
<a class=""text-blue-600 hover:text-blue-800 transition duration-300 ease-in-out"" href=""{learn_more_url}"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
A single item in a list of product features, displaying an icon, a heading, and a brief description.
COMPONENTS:
- FeatureIcon: (standalone): Displaying an icon for the feature
- FeatureHeading: (standalone): Displaying the heading of the feature
- FeatureDescription: (standalone): Displaying a brief description of the feature
- FeatureListItem: (takes children): A container for a single feature item, comprising an icon, heading, and description.
HTML:
<ul class=""list-none mb-4""><li class=""flex items-center mb-4""><FeatureListItem><FeatureIcon/><FeatureHeading/><FeatureDescription/></FeatureListItem></li><!-- Add more list items here --></ul>
COMPONENT HTML:
FeatureIcon:
<i class=""text-lg text-gray-500"">{icon_name}</i>
FeatureHeading:
<h3 class=""text-lg font-bold"">{heading_text}</h3>
FeatureDescription:
<p class=""text-gray-600"">{description_text}</p>
FeatureListItem:
<div class=""flex items-center""><div class=""mr-4"">{children}</div><div class=""flex-1"">{children}</div></div>"
Product Feature List Item,"DESCRIPTION:
The UI should be a list item that displays a product feature with an icon, a brief description, and a optional link to learn more. The component should be responsive and adaptable to different screen sizes.
COMPONENTS:
- ProductFeatureListItem: standalone component that displays a product feature.
- FeatureIcon: standalone component that displays an icon for the feature.
- LearnMoreLink: standalone component that displays a link to learn more about the feature.
HTML:
<ul class=""flex flex-col md:flex-row md:flex-wrap""><li class=""mb-4 md:w-1/2 xl:w-1/3""><ProductFeatureListItem/></li></ul>
COMPONENT HTML:
ProductFeatureListItem:
<div class=""flex items-center mb-2""><FeatureIcon/><div class=""ml-4""><h5 class=""text-lg"">{feature_name}</h5><p class=""text-gray-600"">{feature_description}</p>{learn_more_url && <LearnMoreLink/>} </div></div>
FeatureIcon:
<i class=""fas fa-{feature_icon} text-2xl text-gray-600""></i>
LearnMoreLink:
<a href=""{learn_more_url}"" class=""text-blue-600 hover:text-blue-900"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Alert Notification Style,"DESCRIPTION:
The UI should consist of a notification alert box that is visible on the screen, with a bold title, a brief message, and a close button. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- AlertNotification: standalone component that contains the title, message, and close button.
- AlertTitle: standalone component that displays the bold title.
- AlertMessage: standalone component that displays the brief message.
- CloseButton: standalone component that displays the close button.
HTML:
<div class="" flex justify-center mb-4""><AlertNotification/></div>
COMPONENT HTML:
AlertNotification:
<div class=""bg-orange-100 border border-orange-500 text-orange-700 px-4 py-3 rounded relative""><AlertTitle/><AlertMessage/><CloseButton/></div>
AlertTitle:
<p class=""font-bold"">{alert_title}</p>
AlertMessage:
<p>{alert_message}</p>
CloseButton:
<button class=""absolute top-0 right-0 text-gray-400 hover:text-gray-600 transition duration-300"">×</button>"
Speaker profiles display,"DESCRIPTION:
The UI should display a list of speaker profiles, each containing a profile picture, name, title, and a brief bio. The layout should be responsive, with a single column on mobile devices and a grid layout on larger screens.
COMPONENTS:
- SpeakerProfileCard: A standalone component that displays a single speaker's profile information.
- SpeakerProfilesList: A component that takes children (multiple `SpeakerProfileCard`s) and displays them in a responsive grid layout.
HTML:
<div class=""max-w-md mx-auto p-4""><SpeakerProfilesList><SpeakerProfileCard/><SpeakerProfileCard/><!-- Add more SpeakerProfileCard components here --></SpeakerProfilesList></div>
COMPONENT HTML:
SpeakerProfileCard:
<div class=""bg-white shadow-md p-4 mb-4""><img src=""{profile_picture_url}"" alt=""{speaker_name}"" class=""w-20 h-20 rounded-full mb-2""/><h2 class=""text-lg"">{speaker_name}</h2><p class=""text-sm"">{title}</p><p class=""text-sm"">{bio}</p></div>
SpeakerProfilesList:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Progress tracker,"DESCRIPTION:
The UI should be a horizontal progress bar with a percentage indicator. The progress bar should be responsive and mobile-friendly.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress.
- PercentageIndicator: Standalone component that displays the percentage.
HTML:
<div class=""flex flex-col items-center""><ProgressBar/><PercentageIndicator/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 rounded-full""><div class=""bg-primary-500 h-4 rounded-full"" style={{ width: `${progressPercentage}%` }}></div></div>
PercentageIndicator:
<p class=""text-sm"">{progressPercentage}%</p>"
Features List: Break down complex features into bite-sized chunks,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible list of features, with each feature broken down into a concise and readable format. The list should be SEO-friendly and well-documented.
COMPONENTS:
- FeatureListItem: (standalone) - represents a single feature item in the list
- FeatureListWrapper: (takes children) - wraps the list of feature items
HTML:
<div class=""mx-auto max-w-md py-8""><FeatureListWrapper><FeatureListItem/><FeatureListItem/><FeatureListItem/><!-- add more FeatureListItem components here --></FeatureListWrapper></div>
COMPONENT HTML:
FeatureListItem:
<li class=""mb-4""><h3 class=""text-lg font-bold"">{feature_title}</h3><p class=""text-gray-600"">{feature_description}</p><ul class=""list-none mb-2""><li>{feature_breakdown_point_1}</li><li>{feature_breakdown_point_2}</li><!-- add more breakdown points here --></ul></li>
FeatureListWrapper:
<ul class=""list-none"">{children}</ul>"
Features List: Break down complex features into bite-sized chunks,"DESCRIPTION:
A responsive, mobile-first, accessible, and SEO-friendly features list UI that breaks down complex features into bite-sized chunks. The UI should have a clean and simple design, with clear headings and concise descriptions.
COMPONENTS:
- FeatureList: A component that takes children (multiple `FeatureListItem` components) and renders them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-xl font-bold mb-4"">Features</h2><ul class=""list-none mb-0""><FeatureList><!-- Feature list items will be rendered here --></FeatureList></ul></div>
COMPONENT HTML:
FeatureList:
<ul class=""list-none mb-0"">{children}</ul>"
Features List: Break down complex features into bite-sized chunks,"DESCRIPTION:
A list of features, each with a brief description, broken down into smaller, manageable chunks.
COMPONENTS:
- FeatureItem: (standalone): A single feature item in the list, containing a brief description and optional additional details.
- FeatureList: (takes children): A container for a list of feature items.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Features</h2><FeatureList><FeatureItem/><FeatureItem/><!-- add more FeatureItems here --></FeatureList></div>
COMPONENT HTML:
FeatureItem:
<div class=""flex mb-4""><div class=""mr-4""><i class=""fas fa-check text-green-500 text-xl"" aria-hidden=""true""></i></div><div><h3 class=""text-lg font-bold"">{feature_title}</h3><p class=""text-gray-600"">{feature_description}</p><p class=""text-sm text-gray-500"">{additional_details}</p></div></div>
FeatureList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Features List: Break down complex features into bite-sized chunks,"DESCRIPTION:
The UI should be a responsive, mobile-first features list that breaks down complex features into bite-sized chunks. It should display a list of features with icons, titles, and descriptions.
COMPONENTS:
- FeatureItem: A standalone component that represents a single feature item in the list.
- FeaturesList: A component that takes children and represents the entire list of features.
HTML:
<div class=""container mx-auto p-4 pt-6 pb-8""><h2 class=""text-3xl font-bold mb-4"">Features</h2><FeaturesList><FeatureItem/><FeatureItem/><!-- add more FeatureItem components here --></FeaturesList></div>
COMPONENT HTML:
FeatureItem:
<div class=""flex flex-wrap mb-4""><div class=""w-12 h-12 mr-4""><i class=""fas fa-{icon_name} text-2xl text-gray-600""></i></div><div><h3 class=""text-lg font-bold"">{feature_title}</h3><p class=""text-gray-600"">{feature_description}</p></div></div>
FeaturesList:
<ul class=""list-none mb-0"">{children}</ul>"
Features List: Break down complex features into bite-sized chunks,"DESCRIPTION:
The Features List should be a concise and scannable list of feature items, with a brief description and an icon to visually distinguish each feature. The list should be responsive, with a maximum of 3-4 items per row on larger screens and a single column on smaller screens.
COMPONENTS:
- FeatureItem: A standalone component representing a single feature item, consisting of an icon, title, and description.
- FeatureList: A component that takes children, wrapping multiple `FeatureItem` components.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><h2 class=""text-2xl mb-4"">Features</h2><FeatureList><FeatureItem/><FeatureItem/><FeatureItem/><!-- Add more FeatureItem components as needed --></FeatureList></section>
COMPONENT HTML:
FeatureItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><div><h3 class=""text-lg"">{feature_title}</h3><p class=""text-gray-600"">{feature_description}</p></div></div>
FeatureList:
<ul class=""flex flex-wrap justify-center lg:justify-start"">{children}</ul>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should display a responsive, accessible, and SEO-friendly featured video poster image component. The image should be centered and take up the full width of the container on mobile devices and smaller screens, and resize to fit the container on larger screens.
COMPONENTS:
- FeaturedVideoPosterImage: (standalone): This component will contain the featured video poster image.
HTML:
<div class=""container mx-auto p-4""><FeaturedVideoPosterImage/></div>
COMPONENT HTML:
FeaturedVideoPosterImage:
<img class=""object-cover w-full h-64 md:h-80 lg:h-96 xl:h-112 mb-4"" src={poster_image_url} alt={poster_image_alt_text}/>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component. It should display a poster image for a video, with an optional play button overlay.
COMPONENTS:
- FeaturedVideoPosterImage: (standalone): The main component for the featured video poster image.
- PlayButton: (standalone): An optional play button that can be overlaid on the poster image.
HTML:
<div class=""container mx-auto p-4""><FeaturedVideoPosterImage/></div>
COMPONENT HTML:
FeaturedVideoPosterImage:
<img src=""{poster_image_url}"" alt=""{video_title}"" class=""w-full h-full object-cover rounded-lg shadow-lg""/><!-- Optional play button overlay -->{play_button ? <PlayButton/>: null}
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white text-black rounded-full p-2""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Notification bell for new updates,"DESCRIPTION:
A notification bell icon with a badge indicating the number of new updates.
COMPONENTS:
- NotificationBell: (standalone) - The bell icon with a badge indicating new updates.
- Badge: (standalone) - A small circle displaying the number of new updates.
HTML:
<nav><ul><li><NotificationBell/></li></ul></nav>
COMPONENT HTML:
NotificationBell:
<a href=""#"" class=""relative""><i class=""fas fa-bell"">{/* bell icon */}</i><Badge/></a>
Badge:
<span class=""absolute top-0 right-0 -mr-2 px-1 bg-red-500 text-white rounded-full text-xs"">{new_update_count}</span>"
Notification bell for new updates,"DESCRIPTION:
The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.
COMPONENTS:
- NotificationBell: A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.
- UpdateList: A component that takes children, which are individual update items.
HTML:
<div class=""relative inline-block""><NotificationBell/><div class=""absolute top-0 right-0 mt-2 mr-2""><UpdateList><!-- update items will be rendered here --></UpdateList></div></div>
COMPONENT HTML:
NotificationBell:
<div class=""cursor-pointer""><i class=""fas fa-bell text-lg text-gray-600""></i><span class=""bg-red-500 text-white rounded-full px-2 py-1"">{new_updates_count}</span></div>
UpdateList:
<ul class=""bg-white shadow-md py-2"">{children}</ul>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a clean and readable format. The email address should be clickable, allowing users to send an email to the company. The component should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- EmailAddress: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><p class=""text-lg font-bold"">Get in touch with us:</p><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<a href=""mailto: {company_email_address}"" class=""text-blue-600 hover:text-blue-900"">{company_email_address}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Follow button to subscribe to users,"DESCRIPTION:
A simple button with a follow/unfollow toggle. The button should be responsive and accessible.
COMPONENTS:
- FollowButton: standalone component
HTML:
<div class=""max-w-md mx-auto p-4""><FollowButton/></div>
COMPONENT HTML:
FollowButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_following ? 'Unfollow' : 'Follow'}</button>"
Follow button to subscribe to users,"DESCRIPTION:
The UI should be a button that allows users to subscribe to other users. The button should be responsive and mobile-first, with a clear and accessible design. When not subscribed, the button should display ""Follow"" and when subscribed, it should display ""Unfollow"". The button should also have a loading state.
COMPONENTS:
- FollowButton: (takes children): The main component that wraps the follow button.
- LoadingIndicator: (standalone): A small spinner to indicate loading state.
- ButtonText: (standalone): The text within the button.
HTML:
<div class=""flex justify-center mb-4""><FollowButton>{loading ? <LoadingIndicator/>: <ButtonText/>}
</FollowButton></div>
COMPONENT HTML:
FollowButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{children}</button>
LoadingIndicator:
<div class=""animate-spin h-5 w-5 border-2 border-gray-600 rounded-full""></div>
ButtonText:
<span class=""text-sm"">{isFollowing ? 'Unfollow' : 'Follow'}</span>"
Filters and Sorting,"DESCRIPTION:
The UI should display a filter and sorting component that allows users to filter and sort a list of items. The filter section should have a dropdown menu with options to filter by category, and the sorting section should have a dropdown menu with options to sort by name, date, or rating. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- FilterDropdown: - standalone component
- SortDropdown: - standalone component
- FiltersAndSortingContainer: - container component that takes children
HTML:
<div class=""max-w-md mx-auto p-4""><FiltersAndSortingContainer><FilterDropdown/><SortDropdown/></FiltersAndSortingContainer></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 py-2 px-4 rounded"">{filterPlaceholder}</button><ul class=""absolute z-10 w-full bg-white shadow-md""><li><a href=""#"" class=""block py-2 px-4"">{filterOption1}</a></li><li><a href=""#"" class=""block py-2 px-4"">{filterOption2}</a></li><!-- more filter options --></ul></div>
SortDropdown:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 py-2 px-4 rounded"">{sortPlaceholder}</button><ul class=""absolute z-10 w-full bg-white shadow-md""><li><a href=""#"" class=""block py-2 px-4"">{sortOption1}</a></li><li><a href=""#"" class=""block py-2 px-4"">{sortOption2}</a></li><!-- more sort options --></ul></div>
FiltersAndSortingContainer:
<div class=""flex justify-between mb-4"">{children}</div>"
Filters and Sorting,"DESCRIPTION:
The UI should consist of a filters section and a sorting section. The filters section should have a dropdown for category, a dropdown for rating, and a text input for searching. The sorting section should have a dropdown for sorting options. The UI should be responsive and mobile-friendly.
COMPONENTS:
- FiltersSection: standalone
- CategoryDropdown: standalone
- RatingDropdown: standalone
- SearchInput: standalone
- SortingSection: standalone
- SortingDropdown: standalone
HTML:
<div class=""max-w-md mx-auto p-4""><FiltersSection/><SortingSection/></div>
COMPONENT HTML:
FiltersSection:
<div class=""flex flex-col mb-4""><CategoryDropdown/><RatingDropdown/><SearchInput/></div>
CategoryDropdown:
<select class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">{category_placeholder}</option><!-- options for categories --></select>
RatingDropdown:
<select class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">{rating_placeholder}</option><!-- options for ratings --></select>
SearchInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search""/>
SortingSection:
<div class=""flex flex-col mb-4""><SortingDropdown/></div>
SortingDropdown:
<select class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">{sorting_placeholder}</option><!-- options for sorting --></select>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should display a profile picture, username, and a button to follow/unfollow the user. It should be responsive, with the profile picture and username aligned to the left and the follow button to the right on larger screens, and stacked on smaller screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays a profile picture.
- Username: Standalone component that displays the username.
- FollowButton: Standalone component that displays a button to follow or unfollow the user.
- SocialMediaFeedHeader: Component that takes children, which consists of the profile picture, username, and follow button.
HTML:
<header class=""flex flex-wrap justify-between p-4 lg:p-6""><SocialMediaFeedHeader><ProfilePicture/><Username/><FollowButton/></SocialMediaFeedHeader></header>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""Profile Picture""/>
Username:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{follow_button_text}</button>
SocialMediaFeedHeader:
<div class=""flex flex-wrap lg:flex-nowrap justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Resume download button with print option,"DESCRIPTION:
A button group with two buttons: one to download the resume and another to print the resume. The buttons should be responsive and mobile-friendly.
COMPONENTS:
- ResumeActionButtons: (standalone) - contains the download and print buttons
- ActionButton: (takes children) - a single button with a label and optional icon
HTML:
<div class=""flex justify-center mb-4""><ResumeActionButtons/></div>
COMPONENT HTML:
ResumeActionButtons:
<div class=""btn-group""><ActionButton><i class=""fas fa-download mr-2""></i>Download Resume </ActionButton><ActionButton><i class=""fas fa-print mr-2""></i>Print Resume </ActionButton></div>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{children}</button>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
A download button with an adjacent print option, styled with a modern and minimalistic design.
COMPONENTS:
- ResumeDownloadButton: standalone component for the download button
- PrintOption: standalone component for the print option
HTML:
<div class=""flex gap-2""><ResumeDownloadButton/><PrintOption/></div>
COMPONENT HTML:
ResumeDownloadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Download Resume ({file_size})</button>
PrintOption:
<button class=""bg-gray-500 hover:bg-gray-700 text-gray-100 font-bold py-2 px-4 rounded"">Print</button>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a featured video thumbnail with a play button on top of it, and a title below the thumbnail.
COMPONENTS:
- FeaturedVideoThumbnail: (standalone)
- PlayButton: (standalone)
- VideoTitle: (standalone)
HTML:
<div class=""flex flex-col md:flex-row items-center""><FeaturedVideoThumbnail/><VideoTitle/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative""><img src={image_src} alt={alt_text} class=""w-full rounded-md object-cover""/><PlayButton/></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-full p-2""><i class=""fas fa-play""></i></button>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a thumbnail of a featured video, with a play button overlay and a darkened background to focus attention on the video. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- FeaturedVideoThumbnail: standalone
- PlayButton: standalone
HTML:
<div class=""lg:w-1/2 xl:w-1/3 p-4 md:p-6 lg:p-8 xl:p-10""><FeaturedVideoThumbnail/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative overflow-hidden rounded-md shadow-md""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover""/><PlayButton/><div class=""absolute w-full h-full bg-gray-800 opacity-50""></div></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">▶</button>"
Live streaming tools with real-time chat,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that showcases a live streaming video player with a real-time chat interface below it. The video player should take up most of the screen, with the chat interface being a resizable panel that can be minimized or maximized as needed.
COMPONENTS:
- LiveStreamPlayer: standalone, displays the live streaming video
- RealTimeChat: standalone, displays the real-time chat interface
- ChatMessage: takes children, displays a single chat message
- ChatInput: standalone, allows users to input and send chat messages
HTML:
<div class=""flex h-screen overflow-hidden""><LiveStreamPlayer/><div class=""flex flex-col h-full overflow-hidden""><RealTimeChat/><ChatInput/></div></div>
COMPONENT HTML:
LiveStreamPlayer:
<div class=""flex-grow w-full h-full overflow-hidden""><video src={videoSrc} class=""w-full h-full object-cover""/></div>
RealTimeChat:
<div class=""flex flex-col overflow-y-auto p-4"">{messages.map((message) =>( <ChatMessage>{message.text}</ChatMessage>))}</div>
ChatMessage:
<div class=""flex items-center py-2""><span class=""text-sm"">{children}</span></div>
ChatInput:
<form class=""flex p-4""><input type=""text"" class=""w-full px-4 py-2"" placeholder=""Type a message...""/><button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>"
Partner offers display,"DESCRIPTION:
The UI should display a list of partner offers, with each offer showing the partner's logo, name, description, and a call-to-action (CTA) button. The layout should be responsive, with a mobile-first design that adapts to larger screen sizes.
COMPONENTS:
- PartnerOfferList: a component that takes children (multiple `PartnerOfferCard` components)
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Partner Offers</h2><PartnerOfferList><!-- multiple PartnerOfferCard components will be rendered here --></PartnerOfferList></section>
COMPONENT HTML:
PartnerOfferList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Partner offers display,"DESCRIPTION:
The UI should display a list of partner offers in a responsive grid, with each offer featuring an image, title, and description. The grid should be mobile-first, with a single column on small screens, and up to three columns on larger screens.
COMPONENTS:
- PartnerOfferList: Component that takes children, representing the list of partner offers.
HTML:
<!-- Partner offer list container --><div class=""md:flex md:flex-wrap md:justify-center""><PartnerOfferList><!-- Partner offer items will be inserted here --></PartnerOfferList></div>
COMPONENT HTML:
PartnerOfferList:
{children}"
Partner offers display,"DESCRIPTION:
The UI should display a list of partner offers in a responsive grid, with each offer showing a title, description, and call-to-action (CTA) button. The UI should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PartnerOfferCard: A standalone component that displays a single partner offer.
- PartnerOffersGrid: A component that takes children (PartnerOfferCard components) and displays them in a responsive grid.
HTML:
<div class=""container mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Partner Offers</h2><PartnerOffersGrid><PartnerOfferCard/><PartnerOfferCard/><!-- Add more PartnerOfferCard components here --></PartnerOffersGrid></div>
COMPONENT HTML:
PartnerOfferCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{offer_title}</h3><p class=""text-gray-600"">{offer_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text} </button></div>
PartnerOffersGrid:
<div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</div>"
Partner offers display,"DESCRIPTION:
The UI should be a section that displays multiple partner offers in a grid layout, with each offer showing an image, title, and description. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- PartnerOffer: A standalone component that represents a single partner offer, consisting of an image, title, and description.
- PartnerOfferGrid: A component that takes children (multiple PartnerOffer components) and lays them out in a grid.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Partner Offers</h2><PartnerOfferGrid><PartnerOffer/><PartnerOffer/><!-- Add more PartnerOffer components here --></PartnerOfferGrid></section>
COMPONENT HTML:
PartnerOffer:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src={image_url} alt={image_alt} class=""w-full h-48 object-cover rounded-t""/><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p></div>
PartnerOfferGrid:
<div class=""grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Parallax controls,"DESCRIPTION:
The UI should include a vertically arranged set of sections, each having a distinct content area with overlaid text or images that appear to move at a different speed than the rest of the scrollable content as the user scrolls down the page, creating a parallax effect.
COMPONENTS:
- ParallaxSection: (Standalone): A section of the parallax page which contains background and foreground content.
- ForegroundContent: (Standalone): Contains the text or images visible at normal scroll speed.
- BackgroundImage: (Standalone): Contains the slower moving background image.
HTML:
<div class=""parallax-container""><ParallaxSection/><ParallaxSection/><ParallaxSection/></div>
COMPONENT HTML:
ParallaxSection:
<section class=""relative""><BackgroundImage/><ForegroundContent/></section>
ForegroundContent:
<div class=""absolute inset-0 flex items-center justify-center""><div class=""p-4 bg-white bg-opacity-75 rounded md:max-w-lg text-center""><h2 class=""text-2xl font-bold mb-2"">{headline_text}</h2><p class=""text-lg"">{description_text}</p></div></div>
BackgroundImage:
<div class=""absolute inset-0""><div class=""w-full h-full bg-cover bg-center"" style=""background-image: url('{background_image_url}');""></div></div>"
Featured Product Reviews,"DESCRIPTION:
The UI should display a list of featured product reviews, each with a product image, review title, rating, and short description. The reviews should be displayed in a grid or list format, with a maximum of 3 reviews per row on desktop and 1 review per row on mobile devices.
COMPONENTS:
- FeaturedReviewCard: A standalone component that displays a single review, including the product image, review title, rating, and short description.
- ReviewsGrid: A component that takes children and displays them in a grid format, with a maximum of 3 reviews per row on desktop and 1 review per row on mobile devices.
HTML:
<div class=""max-w-md mx-auto p-4""><h2>Featured Reviews</h2><ReviewsGrid><FeaturedReviewCard/><FeaturedReviewCard/><FeaturedReviewCard/><!-- Add more review cards here --></ReviewsGrid></div>
COMPONENT HTML:
FeaturedReviewCard:
<div class=""bg-white border rounded p-4""><img src={product_image_url} alt={product_name} class=""w-full mb-4""/><h3 class=""text-lg font-bold"">{review_title}</h3><div class=""flex items-center mb-2""><span class=""text-lg"">{rating}/5</span><span class=""text-gray-600"">{rating_count} reviews</span></div><p>{short_description}</p></div>
ReviewsGrid:
<div class=""grid gap-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1"">{children}</div>"
On/off control that users can slide to change a setting or state,"DESCRIPTION:
The UI should be a toggle switch that can be slid to change a setting or state. It should have a clear visual indicator of the current state (on or off) and be easily accessible on various devices and screen sizes.
COMPONENTS:
- ToggleSwitch: A standalone component that represents the toggle switch.
HTML:
<div class=""flex items-center mb-4""><!-- Label for the toggle switch --><label class=""mr-4"">{label}</label><ToggleSwitch/></div>
COMPONENT HTML:
ToggleSwitch:
<!-- The toggle switch container --><div class=""inline-block align-middle transition duration-200 ease-in-out""><!-- The toggle switch button --><button aria-label=""Toggle Switch"" aria-checked={isChecked} class=""w-12 h-6 flex items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2""><!-- The slider button inside the toggle switch --><span class={`w-5 h-5 rounded-full shadow-md ${isChecked ? 'bg-green-500' : 'bg-gray-400'}`}></span></button></div>"
Core values display,"DESCRIPTION:
The UI should display a list of core values in a responsive, mobile-first design. Each value should be displayed as a card with a title, description, and icon.
COMPONENTS:
- CoreValueCard: a standalone component that displays a single core value.
- CoreValuesList: a component that takes children, which are multiple `CoreValueCard` components.
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Our Core Values</h2><CoreValuesList><CoreValueCard/><CoreValueCard/><!-- add more CoreValueCard components here --></CoreValuesList></section>
COMPONENT HTML:
CoreValueCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><div class=""flex items-center mb-2""><i class=""fas fa-{icon_type} text-2xl text-gray-500 mr-2""/><h3 class=""text-lg font-bold"">{value_title}</h3></div><p>{value_description}</p></div>
CoreValuesList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
API Explorer: Discover APIs and endpoints,"DESCRIPTION:
The UI should display a sidebar with a list of APIs, and a main content area that shows the details of the selected API, including its endpoints.
COMPONENTS:
- ApiSidebar: a standalone component that displays a list of APIs
- ApiDetails: a component that takes children, displaying details about a selected API
- ApiEndpoint: a standalone component that displays a single API endpoint
HTML:
<div class=""flex h-screen""><ApiSidebar/><div class=""flex-1 p-4""><ApiDetails><h1>{api_name}</h1><p>{api_description}</p><ul><!-- list of endpoints --><ApiEndpoint/><ApiEndpoint/><!-- ... --></ul></ApiDetails></div></div>
COMPONENT HTML:
ApiSidebar:
<nav class=""w-64 p-4 bg-gray-100""><h2>APIs</h2><ul><!-- list of APIs --><li><a href=""#"" class=""block p-2"">{api_name}</a></li><!-- ... --></ul></nav>
ApiDetails:
<div>{children}</div>
ApiEndpoint:
<li class=""p-2 border-b border-gray-200""><h3>{endpoint_method} {endpoint_path}</h3><p>{endpoint_description}</p></li>"
Savings calculator tool,"DESCRIPTION:
The UI for the Savings Calculator tool should feature a simple, clean layout with an input form where users can enter their initial savings amount, monthly deposit, and interest rate. Below the form, there should be a display area where the estimated savings total after a specified number of years is shown.
COMPONENTS:
- InputForm: (Standalone): A component containing input fields for the initial savings, monthly deposit, and interest rate, along with a submit button.
- SavingsDisplay: (Standalone): A component to display the calculated savings after a certain number of years.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-lg font-bold"">Savings Calculator</h1><InputForm/><SavingsDisplay/></div>
COMPONENT HTML:
InputForm:
<form class=""space-y-4""><div><label for=""initialAmount"" class=""block text-sm font-medium text-gray-700"">Initial Savings</label><input type=""number"" id=""initialAmount"" name=""initialAmount"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter initial savings amount"" required></div><div><label for=""monthlyDeposit"" class=""block text-sm font-medium text-gray-700"">Monthly Deposit</label><input type=""number"" id=""monthlyDeposit"" name=""monthlyDeposit"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter monthly deposit amount"" required></div><div><label for=""interestRate"" class=""block text-sm font-medium text-gray-700"">Interest Rate (%)</label><input type=""number"" id=""interestRate"" name=""interestRate"" step=""0.01"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter interest rate"" required></div><div><button type=""submit"" class=""mt-3 w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Calculate </button></div></form>
SavingsDisplay:
<div class=""mt-6 p-4 border-t border-gray-300""><h2 class=""text-lg font-semibold"">Estimated Savings</h2><p>Total savings after <span class=""font-semibold"">{years}</span>years:</p><p class=""text-xl font-bold"">${savingsTotal}</p></div>"
Header Search Icon,"DESCRIPTION:
A search icon in the header that is accessible and responsive.
COMPONENTS:
- SearchIcon: A standalone component that displays a search icon.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><!-- Search Icon --><SearchIcon/><!-- other header elements --></header>
COMPONENT HTML:
SearchIcon:
<a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><span class=""sr-only"">Search</span><i class=""fas fa-search text-lg"" aria-hidden=""true""></i></a>"
Recommended videos carousel,"DESCRIPTION:
A responsive carousel displaying a list of recommended videos, with a maximum of 5 videos visible at a time. The carousel should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- VideoCard: (standalone): a single video card component with a thumbnail, title, and description
- CarouselIndicator: (standalone): a small circle indicator showing the current slide
- Carousel: (takes children): a carousel component that wraps the video cards and indicators
HTML:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-2xl font-bold mb-4"">Recommended Videos</h2><Carousel><VideoCard/><VideoCard/><VideoCard/><CarouselIndicator/><CarouselIndicator/><CarouselIndicator/></Carousel></section>
COMPONENT HTML:
VideoCard:
<div class=""bg-white shadow-md rounded-lg p-4 mb-4""><img src=""{video_thumbnail}"" alt=""{video_title}"" class=""w-full h-48 object-cover rounded-t-lg""/><h3 class=""text-lg font-bold"">{video_title}</h3><p class=""text-gray-600"">{video_description}</p></div>
CarouselIndicator:
<button class=""w-4 h-4 bg-white rounded-full shadow-md mx-2 {active_class}""><!-- indicator dot --></button>
Carousel:
<div class=""flex overflow-x-hidden""><div class=""flex flex-nowrap"">{children} </div><div class=""flex justify-center mt-4"">{indicators} </div></div>"
Featured Image Carousel Navigation,"DESCRIPTION:
The UI should be a navigation component for a featured image carousel, displaying a series of small thumbnails that allow the user to navigate to specific images in the carousel. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- ImageCarouselNavigation: a standalone component that contains the navigation for the image carousel
- ThumbnailImage: a standalone component that represents the image within a thumbnail
HTML:
<nav aria-label=""Featured Image Carousel Navigation""><ul class=""flex flex-wrap justify-center mb-4""><ImageCarouselNavigation/></ul></nav>
COMPONENT HTML:
ImageCarouselNavigation:
<li class=""mr-4"">{thumbnails}</li>
ThumbnailImage:
<img src={thumbnail_src} alt={thumbnail_alt} class=""w-full h-full object-cover rounded-md""/>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Infographics,"DESCRIPTION:
- The UI for infographics should present graphical data in a visually appealing and clear way. The layout will typically include a combination of text, numbers, and bars or circles to represent data. These elements should fit well on both mobile and desktop screens, automatically adjusting their size and position according to the screen size.
COMPONENTS:
- TitleSection: (Standalone)**: Displays the title of the infographic.
- DataPoint: (Takes children)**: Represents a single data point within the infographic. This might include a bar, a number, and some descriptive text.
- DataContainer: (Takes children)**: A container that groups DataPoint components, aligning them appropriately.
HTML:
<div class=""max-w-4xl mx-auto p-4""><TitleSection/><DataContainer><DataPoint><h3>{data_point_title1}</h3><p>{data_point_value1}</p><div class=""w-full bg-gray-200 h-4""><div class=""bg-blue-500 h-4"" style=""width: {data_percentage1}%;""></div></div></DataPoint><DataPoint><h3>{data_point_title2}</h3><p>{data_point_value2}</p><div class=""w-full bg-gray-200 h-4""><div class=""bg-blue-500 h-4"" style=""width: {data_percentage2}%;""></div></div></DataPoint><!-- Additional DataPoint components can be added similarly --></DataContainer></div>
COMPONENT HTML:
TitleSection:
<div class=""text-center font-bold text-xl mb-4"">{infographic_title}</div>
DataPoint:
<div class=""mb-4"">{children}</div>
DataContainer:
<div class=""space-y-4"">{children}</div>"
Quote carousels,"DESCRIPTION:
The UI should be a quote carousel that displays a series of quotes with images and attributions. The carousel should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuoteCarousel: A component that takes children (an array of `QuoteCard` components) and displays them in a carousel layout.
HTML:
<div class=""container mx-auto p-4""><QuoteCarousel><!-- Quotes will be rendered here --></QuoteCarousel></div>
COMPONENT HTML:
QuoteCarousel:
<div class=""carousel"">{children} <!-- Navigation buttons will be rendered here --><button class=""prev-button"" aria-label=""Previous slide"">«</button><button class=""next-button"" aria-label=""Next slide"">»</button></div>"
Product Description Textarea,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible textarea component for entering product descriptions. It should have a clear and concise design, with a clear label and sufficient space for user input.
COMPONENTS:
- ProductDescriptionTextarea: A standalone component representing the textarea for entering product descriptions.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""product-description"" class=""block mb-2 text-lg"">Product Description</label><ProductDescriptionTextarea/></div>
COMPONENT HTML:
ProductDescriptionTextarea:
<textarea id=""product-description"" class=""block w-full p-2 pl-10 text-lg text-gray-700 bg-gray-50 rounded"" placeholder=""Enter product description...""/>"
Shopping cart summary,"DESCRIPTION:
A compact summary of the shopping cart, displaying the number of items, subtotal, and a link to view the cart.
COMPONENTS:
- ShoppingCartSummary: A standalone component that displays the shopping cart summary.
- CartItemCount: A standalone component that displays the number of items in the cart.
- CartSubtotal: A standalone component that displays the subtotal of the cart.
- ViewCartLink: A standalone component that links to the cart page.
HTML:
<div class=""bg-gray-100 p-4 rounded-md shadow-md""><ShoppingCartSummary/></div>
COMPONENT HTML:
ShoppingCartSummary:
<div class=""flex items-center justify-between""><CartItemCount/><CartSubtotal/><ViewCartLink/></div>
CartItemCount:
<p>{cart_item_count} items</p>
CartSubtotal:
<p>Subtotal: {cart_subtotal}</p>
ViewCartLink:
<a href=""#"" class=""text-blue-600 hover:underline"">View Cart</a>"
Shopping cart summary,"DESCRIPTION:
The UI should be a compact summary of the shopping cart, displaying the total items, total cost, and a call-to-action to proceed to checkout. The design should be clean, simple, and easy to read on various devices.
COMPONENTS:
- ShoppingCartSummary: standalone component that displays the shopping cart summary.
- CartTotal: standalone component that displays the total cost of the items in the cart.
- CheckoutButton: standalone component that displays a call-to-action button to proceed to checkout.
HTML:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><ShoppingCartSummary/><CartTotal/><CheckoutButton/></div>
COMPONENT HTML:
ShoppingCartSummary:
<div class=""flex justify-between mb-4""><p>{item_count} items in cart</p><p>Subtotal: <span class=""font-bold"">{subtotal_amount}</span></p></div>
CartTotal:
<p class=""text-lg font-bold mb-2"">Total: <span>{total_amount}</span></p>
CheckoutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Checkout</button>"
Alert Notification Icon Color,"DESCRIPTION:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
COMPONENTS:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
HTML:
<div class=""flex justify-center""><NotificationIcon/></div>
COMPONENT HTML:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a blog post category name in a clean and simple format, with a responsive design that adapts to different screen sizes. The text should be easy to read and accessible on various devices.
COMPONENTS:
- BlogPostCategoryName: a standalone component that displays the category name.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-lg md:text-xl lg:text-2xl font-bold mb-2""><BlogPostCategoryName/></h2></div>
COMPONENT HTML:
BlogPostCategoryName:
<span class=""uppercase"">{category_name}</span>"
Dropdown menu that suggests options as users type into a text input field,"DESCRIPTION:
The UI should be a search bar with a dropdown menu that appears below the input field as the user types. The dropdown menu should display suggested options that match the user's input. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SearchBar: Standalone component that contains the text input field and dropdown menu.
- SearchInput: Standalone component that is the text input field.
- DropdownMenu: Component that takes children (menu items) and displays them in a dropdown list.
HTML:
<div class=""flex justify-center mx-auto w-full max-w-md pt-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""relative""><SearchInput/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
SearchInput:
<input type=""text"" class=""w-full py-2 pl-10 text-sm text-gray-700"" placeholder=""Search...""/>
DropdownMenu:
<ul class=""absolute z-10 w-full bg-white shadow-md"">{children}</ul>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Variable,"DESCRIPTION:
- The UI should feature a display area that shows a label ""Variable Name"" alongside its corresponding variable value, which can dynamically change.
   - It should be clear, minimalist, and easy to read, with a focus on presenting the variable in a visually accessible manner.
COMPONENTS:
- VariableDisplay: (Standalone)**: This component displays the variable name and its value.
HTML:
<div class=""container mx-auto px-4 py-6""><VariableDisplay/></div>
COMPONENT HTML:
VariableDisplay:
<!-- VariableDisplay: Displays the variable name and current value --><div class=""bg-gray-100 p-4 rounded-lg shadow""><h2 class=""font-semibold"">Variable Name:</h2><p class=""text-lg"">{variable_value}</p></div>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should display a microphone icon and a circle that represents the audio feedback. The microphone icon should be surrounded by a circle that changes color based on the audio feedback level. The UI should also display a text that indicates the audio feedback level.
COMPONENTS:
- MicrophoneIcon: A standalone component that displays a microphone icon.
- AudioFeedbackCircle: A standalone component that displays a circle that changes color based on the audio feedback level.
- AudioFeedbackText: A standalone component that displays the audio feedback level.
HTML:
<div class=""flex justify-center mb-4""><div class=""relative""><MicrophoneIcon/><AudioFeedbackCircle/></div><AudioFeedbackText/></div>
COMPONENT HTML:
MicrophoneIcon:
<i class=""fas fa-microphone text-lg text-gray-500""/>
AudioFeedbackCircle:
<div class={`w-12 h-12 bg-${audio_feedback_level_color} rounded-full`}/>
AudioFeedbackText:
<p class=""text-sm text-gray-500"">{audio_feedback_level_text}</p>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.
COMPONENTS:
- AudioIndicator: A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.
- AudioFeedback: A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.
HTML:
<div class=""flex justify-center mb-4""><AudioIndicator/><AudioFeedback/></div>
COMPONENT HTML:
AudioIndicator:
<div class=""h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}"" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' --><div class=""h-4 w-4 bg-white rounded-full mx-auto mt-2"" <!-- inner circle --></div></div>
AudioFeedback:
<div class=""w-full h-4 bg-gray-200 rounded-lg overflow-hidden""><div class=""h-4 bg-blue-500 rounded-lg"" style=""width: {audio_feedback_width}%"" <!-- audio_feedback_width is a value between 0 and 100 --></div></div>"
Underlined text,"DESCRIPTION:
The UI should feature a segment of text that is visually underlined to emphasize or highlight it. This can be used within paragraphs, labels, or any other textual content where emphasis is required.
COMPONENTS:
- UnderlinedText: (Standalone): A component that renders a span of text with an underline.
HTML:
<p>Here is some text with <UnderlinedText/>in it.
</p>
COMPONENT HTML:
UnderlinedText:
<!-- UnderlinedText: Renders text with a visual underline for emphasis --><span class=""underline"">{text}</span>"
"Area displaying recent notifications or alerts, often accessible via an icon or button","DESCRIPTION:
The UI should display a dropdown list of recent notifications or alerts, accessible via a button or icon. The dropdown list should be responsive, easily accessible, and follow accessibility guidelines.
COMPONENTS:
- NotificationButton: A standalone component displaying an icon or text indicating the presence of notifications.
- NotificationDropdown: A component taking children, displaying a dropdown list of notifications.
- NotificationItem: A standalone component displaying a single notification.
HTML:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><NotificationButton/><NotificationDropdown><NotificationItem/><NotificationItem/><!-- Add more NotificationItem components here --></NotificationDropdown></button>
COMPONENT HTML:
NotificationButton:
<!-- NotificationButton component --><button class=""flex items-center""><span class=""text-lg"">{icon}</span><span class=""text-xs"">{notification_count} new</span></button>
NotificationDropdown:
<!-- NotificationDropdown component --><div class=""absolute bg-white rounded shadow-md p-2""><h5 class=""text-lg font-bold"">{dropdown_title}</h5>{children}</div>
NotificationItem:
<!-- NotificationItem component --><div class=""px-4 py-2 hover:bg-gray-100""><p class=""text-sm"">{notification_text}</p><span class=""text-xs text-gray-500"">{notification_time}</span></div>"
Customer Testimonial with Profile Picture,"DESCRIPTION:
The UI should display a customer testimonial with a profile picture, name, and job title. The profile picture should be circular and have a border radius. The testimonial text should be wrapped in a quote blockquote element. The name and job title should be displayed below the testimonial text.
COMPONENTS:
- ProfilePicture: (standalone): displays a circular profile picture
- TestimonialBlock: (takes children): displays a blockquote with the testimonial text
- NameAndJobTitle: (standalone): displays the customer's name and job title
HTML:
<div class=""flex justify-center mb-12""><ProfilePicture/><div class=""ml-4""><TestimonialBlock><!-- testimonial text will be inserted here --></TestimonialBlock><NameAndJobTitle/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt={customer_name} class=""w-24 h-24 rounded-full border-2 border-gray-300 object-cover""/>
TestimonialBlock:
<blockquote class=""text-lg font-light"">{children}</blockquote>
NameAndJobTitle:
<p class=""text-lg font-bold"">{customer_name}</p><p class=""text-gray-600"">{job_title}</p>"
Blog Post Category List,"DESCRIPTION:
The UI should be a responsive list of blog post categories, with each category displayed as a separate item in a vertical list. The list should be accessible, mobile-first, and SEO-friendly.
COMPONENTS:
- CategoryListItem: A standalone component representing a single category item in the list.
- CategoryList: A component that takes children, wrapping the list of category items.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Categories</h2><CategoryList><!-- Category list items will be rendered here --><CategoryListItem/><CategoryListItem/><!-- ... --></CategoryList></div>
COMPONENT HTML:
CategoryListItem:
<li class=""py-2 border-b border-gray-200""><a href=""{category_url}"" class=""text-gray-900 hover:text-gray-600 transition duration-300""><span class=""text-lg"">{category_name}</span><span class=""text-sm text-gray-600"">{category_description}</span></a></li>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should display a list of blog post categories in a responsive and accessible manner. The categories should be displayed in a vertical list with each category displaying its name and the number of posts in that category.
COMPONENTS:
- CategoryList: a standalone component that displays a list of categories
- CategoryItem: a component that takes children (the category name and post count) to display a single category
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Categories</h2><CategoryList/></div>
COMPONENT HTML:
CategoryList:
<ul class=""list-none mb-0"">{categories.map(category =>( <li key={category.id} class=""mb-4""><CategoryItem>{category.name} ({category.postCount})</CategoryItem></li>))}</ul>
CategoryItem:
<a href={categoryUrl} class=""text-gray-900 hover:text-gray-600 transition duration-300"">{children}</a>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of blog post categories, with each category displaying its name and the number of posts it contains. The list should be responsive, mobile-first, and easily accessible.
COMPONENTS:
- BlogPostCategoryList: (takes children): Represents the list of blog post categories.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Post Categories</h2><BlogPostCategoryList><!-- list of categories will be rendered here --></BlogPostCategoryList></div>
COMPONENT HTML:
BlogPostCategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Author Bio/Profile,"DESCRIPTION:
The Author Bio/Profile component should display a concise summary of the author's information, including their name, profile picture, bio, and social media links. The component should be responsive, displaying the content in a vertical layout on mobile devices and a horizontal layout on larger screens.
COMPONENTS:
- AuthorProfilePicture: (standalone): a circular image component to display the author's profile picture.
- AuthorName: (standalone): a heading component to display the author's name.
- AuthorBio: (standalone): a paragraph component to display the author's bio.
- AuthorSocialMediaLinks: (takes children): a container component to display the author's social media links.
HTML:
<div class=""flex flex-wrap justify-center xl:flex-nowrap xl:justify-between mb-4""><AuthorProfilePicture/><div class=""xl:ml-4 xl:w-1/2""><AuthorName/><AuthorBio/><AuthorSocialMediaLinks><!-- social media links will be inserted here --></AuthorSocialMediaLinks></div></div>
COMPONENT HTML:
AuthorProfilePicture:
<img src=""{profile_picture_url}"" alt=""{author_name}"" class=""rounded-full w-24 h-24 xl:w-32 xl:h-32 object-cover""/>
AuthorName:
<h2 class=""text-lg xl:text-xl font-bold"">{author_name}</h2>
AuthorBio:
<p class=""text-sm xl:text-base"">{author_bio}</p>
AuthorSocialMediaLinks:
<ul class=""list-none xl:flex xl:justify-between xl:items-center"">{children}</ul>"
Product error,"DESCRIPTION:
The UI should be a simple error page that displays an error message and a call-to-action (CTA) to go back to the product page.
COMPONENTS:
- ErrorMessage: A standalone component that displays the error message.
- CallToAction: A standalone component that displays a CTA button to go back to the product page.
HTML:
<main class=""max-w-md mx-auto p-4 pt-6 pb-8 md:p-6 lg:p-12""><ErrorMessage/><CallToAction/></main>
COMPONENT HTML:
ErrorMessage:
<p class=""text-lg text-red-500"">{error_message}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Go back to product page</button>"
Privacy policy link,"DESCRIPTION:
A simple link to a privacy policy page, visible on all screen sizes.
COMPONENTS:
- PrivacyPolicyLink: (standalone)
HTML:
<footer class=""flex justify-center pb-4""><PrivacyPolicyLink/></footer>
COMPONENT HTML:
PrivacyPolicyLink:
<a href=""/privacy-policy"" class=""text-sm text-gray-600 hover:text-gray-900"">Privacy Policy</a>"
Featured Image Zoom Level,"DESCRIPTION:
The UI should display a featured image with a zoom level indicator, allowing users to zoom in or out of the image. The image should be responsive, adapting to different screen sizes and devices. The zoom level indicator should be visually appealing and easy to use.
COMPONENTS:
- FeaturedImage: a standalone component that displays the featured image.
- ZoomLevelIndicator: a standalone component that displays the zoom level indicator.
- ZoomControl: a component that takes children (e.g., zoom in and zoom out buttons).
HTML:
<div class=""flex justify-center""><FeaturedImage/><ZoomControl><button>+</button><button>-</button></ZoomControl><ZoomLevelIndicator/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>
ZoomLevelIndicator:
<p>Zoom: {zoom_level}%</p>
ZoomControl:
<div class=""flex justify-center"">{children}</div>"
Sidebars/Dockable Panels,"DESCRIPTION:
The UI should have a main content area with a dockable panel on the left side. The panel can be toggled open or closed. When open, it should take up a third of the screen width on larger screens and be fully visible on smaller screens.
COMPONENTS:
- SidebarPanel: A standalone component that contains the dockable panel content.
- MainContent: A component that takes children and wraps the main content area.
- ToggleSidebarButton: A standalone component that toggles the sidebar panel open or closed.
HTML:
<!-- Main container --><div class=""flex h-screen""><!-- Toggle sidebar button --><ToggleSidebarButton/><!-- Sidebar panel --><SidebarPanel/><!-- Main content area --><MainContent><!-- Main content goes here --></MainContent></div>
COMPONENT HTML:
SidebarPanel:
<!-- Sidebar panel content --><div class=""bg-gray-200 p-4 w-64 md:w-full md:relative md:flex-grow""><!-- Panel content goes here --></div>
MainContent:
<!-- Main content area --><div class=""flex-grow p-4"">{children}</div>
ToggleSidebarButton:
<!-- Toggle sidebar button --><button class=""bg-gray-200 p-2 rounded""><i class=""fas fa-bars""></i></button>"
Tooltip/Hovercard Previews,"DESCRIPTION:
The UI should be a hovercard preview that appears when a user hovers over a trigger element, providing additional information about the trigger element. The hovercard should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- HovercardTrigger: Standalone component that triggers the hovercard preview when hovered over.
- HovercardPreview: Component that takes children, displaying the additional information about the trigger element.
HTML:
<div class=""flex justify-center""><HovercardTrigger/><HovercardPreview><!-- hovercard content goes here --></HovercardPreview></div>
COMPONENT HTML:
HovercardTrigger:
<a href=""#"" class=""inline-block p-2 hover:underline"">Trigger Text</a>
HovercardPreview:
<div class=""absolute z-10 bg-white shadow-md p-4 rounded""><h5 class=""text-lg font-bold"">{header_text}</h5><p class=""text-gray-600"">{preview_text}</p>{children}</div>"
Dropdown Menu Item Text,"DESCRIPTION:
The UI should be a dropdown menu item text which is a clickable text that displays a dropdown menu when clicked. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- DropdownMenuItemText: Standalone component that displays the text of the dropdown menu item.
HTML:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li class="" dropdown relative""><DropdownMenuItemText/></li></ul></nav>
COMPONENT HTML:
DropdownMenuItemText:
<a href=""#"" class="" block w-full py-2 pl-8 pr-4 text-gray-700 hover:bg-gray-100"">{menu_item_text}</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
COMPONENTS:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
HTML:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
The UI should be a compact user profile card that displays the user's profile picture, name, and a link to their profile.
COMPONENTS:
- UserProfileCard: Standalone component that contains the user's profile information.
- ProfilePicture: Standalone component that displays the user's profile picture.
- ProfileLink: Standalone component that links to the user's profile.
HTML:
<div class=""bg-white rounded shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center""><ProfilePicture/><div class=""ml-4""><p class=""text-lg"">{userName}</p><ProfileLink/></div></div>
ProfilePicture:
<img src={profilePictureUrl} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover""/>
ProfileLink:
<a href={profileUrl} class=""text-blue-600 hover:text-blue-400"">View Profile</a>"
Traveler Reviews and Ratings,"DESCRIPTION:
The UI should display a list of traveler reviews and ratings, with each review including a rating (e.g. 5/5), username, review text, and date. The UI should be responsive, with a card-based layout that adapts to different screen sizes.
COMPONENTS:
- TravelerReviewCard: a standalone component that displays a single traveler review
- TravelerReviewList: a component that takes children and displays a list of traveler reviews
HTML:
<div class=""container mx-auto p-4 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">Traveler Reviews and Ratings</h2><TravelerReviewList><TravelerReviewCard/><TravelerReviewCard/><!-- Add more reviews here --></TravelerReviewList></div>
COMPONENT HTML:
TravelerReviewCard:
<div class=""bg-white rounded-lg p-4 mb-4 shadow-md""><div class=""flex justify-between mb-2""><h3 class=""text-lg font-bold"">{username}</h3><span class=""text-sm"">{rating}/5</span></div><p class=""text-gray-600"">{review_text}</p><p class=""text-sm text-gray-400"">{date}</p></div>
TravelerReviewList:
<ul class=""flex flex-wrap justify-center -mx-2"">{children}</ul>"
Pricing packages display,"DESCRIPTION:
The UI should display a set of pricing packages with their respective details, such as package name, price, features, and a call-to-action (CTA) button. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PricingPackageCard: a standalone component that displays a single pricing package.
- PricingPackagesList: a component that takes children (multiple `PricingPackageCard` components) and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Pricing Packages</h1><PricingPackagesList><PricingPackageCard/><PricingPackageCard/><PricingPackageCard/></PricingPackagesList></div>
COMPONENT HTML:
PricingPackageCard:
<div class=""bg-white shadow-md rounded p-4 md:w-1/2 xl:w-1/3""><h2 class=""text-lg font-bold"">{package_name}</h2><p class=""text-lg"">{price}</p><ul class=""list-none mb-4""><li>{feature1}</li><li>{feature2}</li><li>{feature3}</li></ul><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign Up</button></div>
PricingPackagesList:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Table rows,"DESCRIPTION:
A table with multiple rows, with each row containing some data.
COMPONENTS:
- TableRow: takes children, represents a single table row
- TableCell: takes children, represents a single table cell within a row
HTML:
<table class=""table-auto mx-auto mt-4""><tbody><TableRow><TableCell>{cellData1}</TableCell><TableCell>{cellData2}</TableCell><TableCell>{cellData3}</TableCell></TableRow><TableRow><TableCell>{cellData4}</TableCell><TableCell>{cellData5}</TableCell><TableCell>{cellData6}</TableCell></TableRow><!-- Add more TableRow components as needed --></tbody></table>
COMPONENT HTML:
TableRow:
<tr class=""border-b border-gray-200"">{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Related articles display,"DESCRIPTION:
The UI should display a list of related articles in a compact, easily readable format. The list should be responsive, with articles displayed in a single column on mobile devices and in multiple columns on larger screens.
COMPONENTS:
- RelatedArticlesList: A component that takes children and displays a list of related articles.
HTML:
<section class=""container max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Related Articles</h2><RelatedArticlesList><!-- list of ArticleTeaser components will be inserted here --></RelatedArticlesList></section>
COMPONENT HTML:
RelatedArticlesList:
<ul class=""list-none mb-0"">{children}</ul>"
Footer Newsletter Submit,"DESCRIPTION:
The UI should be a simple newsletter submit form in the footer of a website. It should have a text input for the email address and a submit button. The form should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterNewsletterSubmit: a standalone component that contains the newsletter submit form.
- NewsletterInput: a standalone component that is a text input for the email address.
- SubmitButton: a standalone component that is a submit button.
HTML:
<footer><FooterNewsletterSubmit/></footer>
COMPONENT HTML:
FooterNewsletterSubmit:
<div class=""bg-gray-200 p-4 md:p-6 lg:p-8""><h4 class=""text-lg md:text-xl lg:text-2xl"">{newsletter_title}</h4><NewsletterInput/><SubmitButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Dropdown menus,"DESCRIPTION:
The UI consists of a dropdown menu button that users can click or tap to reveal a list of options. Each option is selectable, and the dropdown list will hide after a selection is made or if the user clicks outside the dropdown. The button should display the currently selected option or a default placeholder if no option is selected.
COMPONENTS:
- DropdownButton: (Standalone) - This component represents the button that users interact with to toggle the dropdown menu.
- DropdownMenu: (Takes children) - This is the container for the dropdown items. It should only appear when the DropdownButton is activated.
HTML:
<div class=""relative""><DropdownButton/><DropdownMenu><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 1</a><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 2</a><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 3</a></DropdownMenu></div>
COMPONENT HTML:
DropdownButton:
<button class=""bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50"">{selected_option} </button>
DropdownMenu:
<div class=""absolute mt-2 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5"">{children} </div>"
Texture controls,"DESCRIPTION:
A simple, responsive texture controls UI with a toggle button to switch between two texture modes. The UI should be accessible and easy to use on mobile and desktop devices.
COMPONENTS:
- TextureToggle: (standalone) - a toggle button to switch between two texture modes
- TextureModeButton: (standalone) - a button representing a texture mode
HTML:
<div class=""flex justify-center mx-auto py-4""><TextureToggle/></div>
COMPONENT HTML:
TextureToggle:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded""><span>{textureModeTitle}</span><span class=""ml-2""><!-- toggle indicator --><span class=""bg-gray-400 hover:bg-gray-500 w-4 h-4 rounded-full inline-block""></span></span></button>
TextureModeButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{textureModeLabel}</button>"
Pagination Links List,"DESCRIPTION:
The UI should display a list of pagination links, with each link representing a page number. The active page should be highlighted, and the previous and next page links should be displayed. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- PaginationLinksList: standalone component that contains the entire pagination links list.
- PaginationNav: standalone component that contains the previous and next page links.
HTML:
<nav aria-label=""Pagination""><PaginationNav/><PaginationLinksList/></nav>
COMPONENT HTML:
PaginationLinksList:
<ul class=""flex flex-wrap justify-center mb-4"">{paginationLinks}</ul>
PaginationNav:
<div class=""flex justify-between mb-4""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">{prevText}</button><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">{nextText}</button></div>"
Related Project Suggestions,"DESCRIPTION:
The UI should be a list of suggested projects, each with a title, description, and a ""View Project"" button. The list should be displayed in a grid format, with 2-3 columns on larger screens and 1 column on smaller screens.
COMPONENTS:
- ProjectSuggestionCard: a standalone component that displays a single project suggestion.
- ProjectSuggestionsList: a component that takes children, displaying a list of `ProjectSuggestionCard`s.
HTML:
<div class=""max-w-md mx-auto pt-4""><h2 class=""text-lg font-bold mb-4"">Related Projects</h2><ProjectSuggestionsList><ProjectSuggestionCard/><ProjectSuggestionCard/><ProjectSuggestionCard/></ProjectSuggestionsList></div>
COMPONENT HTML:
ProjectSuggestionCard:
<div class=""bg-white p-4 rounded shadow-md""><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-gray-600"">{project_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Project</button></div>
ProjectSuggestionsList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
A social media feed item that displays a user's profile picture, name, timestamp, and a brief text message. The item should be responsive, mobile-first, and accessible.
COMPONENTS:
- UserProfilePicture: Standalone component that displays a user's profile picture.
- UsernameAndTimestamp: Standalone component that displays a user's name and timestamp.
- MessageText: Standalone component that displays a brief text message.
- SocialMediaFeedItem: Component that takes children (UserProfilePicture, UsernameAndTimestamp, and MessageText).
HTML:
<div class=""flex gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><UsernameAndTimestamp/><MessageText/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-10 h-10 rounded-full"" src={profilePictureUrl} alt=""User Profile Picture""/>
UsernameAndTimestamp:
<div class=""flex flex-col""><p class=""font-bold"">{userName}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div>
MessageText:
<p class=""text-sm"">{messageText}</p>
SocialMediaFeedItem:
<div class=""flex flex-wrap"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
A simple paragraph of text that is responsive, accessible, and readable on various devices.
COMPONENTS:
- ContentParagraph: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ContentParagraph/></div>
COMPONENT HTML:
ContentParagraph:
<p class=""text-lg leading-relaxed mb-4"">{paragraph_text}</p>"
User Profiles and Achievements,"DESCRIPTION:
The UI should display a user's profile information and achievements in a clean and modern layout. The profile section should show the user's name, profile picture, and bio. The achievements section should display a list of badges or icons representing the user's accomplishments.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information.
- AchievementBadge: A standalone component that displays a single achievement badge.
- AchievementList: A component that takes children (a list of `AchievementBadge` components).
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileCard/><h2 class=""text-lg font-bold mb-2"">Achievements</h2><AchievementList><AchievementBadge/><AchievementBadge/><!-- more AchievementBadge components here --></AchievementList></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><img src={profile_picture_url} class=""w-16 h-16 rounded-full"" alt=""Profile Picture""/><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p></div>
AchievementBadge:
<div class=""bg-yellow-100 rounded p-2""><img src={badge_icon_url} class=""w-8 h-8"" alt=""Achievement Badge""/><span class=""text-sm"">{badge_name}</span></div>
AchievementList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Featured Product Badge,"DESCRIPTION:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
COMPONENTS:
- FeaturedBadge: (standalone)
HTML:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
COMPONENT HTML:
FeaturedBadge:
<span>Featured</span>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A list of posts with each item displaying the title, score, and number of comments. The list should be responsive, with a maximum of 3 items per row on larger screens and 1 item per row on smaller screens.
COMPONENTS:
- PostList: A component that takes children, wrapping the list of post items.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Post List</h1><PostList><!-- list of post items --></PostList></div>
COMPONENT HTML:
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Flash sale countdown,"DESCRIPTION:
A flash sale countdown should be a prominent and attention-grabbing component that displays the remaining time (hours, minutes, seconds) until the sale ends. It should be mobile-friendly, responsive, and easily accessible.
COMPONENTS:
- FlashSaleCountdown: (standalone): The main component that displays the countdown timer.
- CountdownTimer: (standalone): Displays the remaining time in hours, minutes, and seconds.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-orange-100 rounded-xl""><h2 class=""text-2xl font-bold mb-2 text-orange-500"">Flash Sale!</h2><FlashSaleCountdown/><p class=""text-sm text-gray-500"">Hurry! Sale ends soon! </p></section>
COMPONENT HTML:
FlashSaleCountdown:
<div class=""flex justify-center mb-4""><CountdownTimer/></div>
CountdownTimer:
<div class=""flex justify-center mb-2""><span class=""text-3xl font-bold"">{hours} hour{hours>1 ? 's' : ''}</span><span class=""text-lg mx-2"">:</span><span class=""text-3xl font-bold"">{mins} minute{mins>1 ? 's' : ''}</span><span class=""text-lg mx-2"">:</span><span class=""text-3xl font-bold"">{secs} second{secs>1 ? 's' : ''}</span></div>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Progress bar for loading,"DESCRIPTION:
A horizontal progress bar that shows the progress of a task, with a fill color that grows from left to right as the task progresses.
COMPONENTS:
- ProgressBar: (standalone component)
HTML:
<div class=""w-full h-4 bg-gray-200 rounded""><div class=""bg-orange-500 h-4"" style=""width: <progresspercentage>%""></div><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<!-- Only used for accessibility, hidden visually --><div aria-valuemin=""0"" aria-valuemax=""100"" aria-valuenow=""<progresspercentage>"" role=""progressbar""></div>"
Page Content Header Tag,"DESCRIPTION:
The UI will feature a content header tag that typically appears at the top of a content section. It's designed to provide a clear, concise title or heading for the content that follows, making it easier for users to understand what the content is about. The header should be visually prominent and accessible.
COMPONENTS:
- PageHeader: Standalone component. This component will display the title of the content in a larger, bold font to stand out as the primary heading of a page or a section.
HTML:
<!-- Main container for the Page Header --><div class=""container mx-auto px-4""><PageHeader/></div>
COMPONENT HTML:
PageHeader:
<!-- PageHeader Component: Displays the content header --><h1 class=""text-2xl md:text-4xl font-bold my-2 text-gray-800"">{page_title} </h1>"
Breadcrumb Home Link,"DESCRIPTION:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
COMPONENTS:
- BreadcrumbHomeLink: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
Callout Box Link,"DESCRIPTION:
The UI should feature a Callout Box Link, which is essentially a stylized box containing text that acts as a link. This box should have a distinct appearance to catch the user's attention, such as a border, background color, and padding. It should be responsive, ensuring it looks good on both mobile and desktop views.
COMPONENTS:
- CalloutBoxLink: (Standalone): This component represents the whole clickable box which contains text and possibly an icon indicating it's a link. It should visually stand out from the rest of the content.
HTML:
<div><CalloutBoxLink/></div>
COMPONENT HTML:
CalloutBoxLink:
<a href=""{link_url}"" class=""block p-4 border border-gray-300 hover:border-gray-400 rounded-md bg-blue-50 hover:bg-blue-100 transition-colors ease-in-out duration-300 text-blue-700 hover:text-blue-800"">{callout_text} </a>"
Stock market ticker,"DESCRIPTION:
The UI should display a scrolling list of stock market tickers with the company name, stock symbol, current price, and percentage change. The list should be responsive, with a single column on mobile devices and a multi-column layout on larger screens.
COMPONENTS:
- StockTickerList: (takes children): A list of stock market ticker items
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Stock Market Tickers</h1><StockTickerList><!-- List of stock ticker items --></StockTickerList></div>
COMPONENT HTML:
StockTickerList:
<ul class=""flex flex-wrap -mx-2"">{children}</ul>"
"Alerts (error, success, info)","DESCRIPTION:
The UI should feature three types of alert boxes:
   - Error: Displayed with a red background to denote an issue or problem.
   - Success: Displayed with a green background to signify that an action has been completed successfully.
   - Info: Displayed with a blue background to provide general information or tips.

   Each alert box should contain:
   - A title in bold.
   - A message with more detailed explanation.
   - A responsive layout that adapts to various screen sizes.
COMPONENTS:
- AlertBox: (Standalone): This component is responsible for rendering an alert. It needs `type` (error, success, info) and `content` (includes both a title and a message) as properties.
HTML:
<div class=""container mx-auto p-4""><AlertBox/><AlertBox/><AlertBox/></div>
COMPONENT HTML:
AlertBox:
<div class={`alert flex p-4 mb-4 rounded text-white ${type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500'}`} role=""alert""><div><p class=""font-bold"">{title}</p><p>{message}</p></div></div>"
Product reviews,"DESCRIPTION:
The UI should display a list of product reviews with the reviewer's name, rating, review text, and date of review. The reviews should be sorted in reverse chronological order, with the most recent review at the top. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ReviewList: A component that takes children, which are multiple `ReviewCard` components.
HTML:
<div class=""container max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Reviews</h2><ReviewList><!-- Review cards will be rendered here --></ReviewList></div>
COMPONENT HTML:
ReviewList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Social media icons,"DESCRIPTION:
A horizontal list of social media icons, each with a hover effect, that link to the respective social media profiles.
COMPONENTS:
- SocialMediaList: (takes children) - a horizontal list of social media icons
HTML:
<nav class=""flex justify-center mb-4""><SocialMediaList><!-- social media icons will be inserted here --></SocialMediaList></nav>
COMPONENT HTML:
SocialMediaList:
<ul class=""flex"">{children}</ul>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and a badge to indicate that a channel is official.
COMPONENTS:
- VerifiedBadge: A standalone component that displays a verified checkmark and a badge.
- CheckmarkIcon: A standalone component that displays a checkmark icon.
HTML:
<div class=""flex items-center""><VerifiedBadge/><span class=""text-sm"">{channelName}</span></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""flex items-center bg-yellow-100 rounded-full py-1 px-2 text-yellow-700""><CheckmarkIcon/><span class=""text-xs"">Official</span></div>
CheckmarkIcon:
<i class=""fas fa-check text-green-500"" aria-hidden=""true""></i>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, along with the game title, reviewer's name, and the review text.
COMPONENTS:
- GameReviewCard: standalone component that displays a single game review.
- GameReviewList: takes children (a list of `GameReviewCard` components).
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl mb-4"">Game Reviews</h2><GameReviewList/></div>
COMPONENT HTML:
GameReviewCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{gameTitle}</h3><p>By {reviewerName}</p><p class=""text-gray-600"">{reviewText}</p><p>Rating: {rating}/5</p></div>
GameReviewList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should be a responsive, mobile-first design that displays a list of game reviews with their corresponding ratings. Each review should include the game title, rating, and a brief review text. The UI should be accessible and SEO-friendly.
COMPONENTS:
- GameReviewsList: (takes children): A list of game reviews that wraps the `GameReviewCard` components.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameReviewsList><!-- list of GameReviewCard components will be inserted here --></GameReviewsList></div>
COMPONENT HTML:
GameReviewsList:
<ul class=""list-none mb-0""><!-- {children} will be inserted here --></ul>"
Language translation tool,"DESCRIPTION:
The UI should have a simple and intuitive design, with a dropdown list of source languages, a textarea for input text, a dropdown list of target languages, and a textarea for output text. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- LanguageSelect: A dropdown list of languages (standalone)
- TextInputArea: A textarea for input text (standalone)
- TranslationResult: A textarea for output text (standalone)
- TranslationTool: The main component that contains all the other components (takes children)
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><TranslationTool><div class=""flex flex-wrap -mx-4 mb-4""><div class=""w-full lg:w-1/2 xl:w-1/2 p-4""><LanguageSelect/><TextInputArea/></div><div class=""w-full lg:w-1/2 xl:w-1/2 p-4""><LanguageSelect/><TranslationResult/></div></div></TranslationTool></div>
COMPONENT HTML:
LanguageSelect:
<select class=""block w-full p-2 pl-10 text-gray-700"">{languageOptions}</select>
TextInputArea:
<textarea class=""block w-full p-2"" rows=""10""></textarea>
TranslationResult:
<textarea class=""block w-full p-2"" rows=""10"" readonly>{translationResult}</textarea>
TranslationTool:
<div class=""max-w-md mx-auto"">{children}</div>"
Language translation tool,"DESCRIPTION:
A simple and intuitive language translation tool with a source language input, a target language dropdown, and a translate button. The translated text is displayed below the input fields.
COMPONENTS:
- LanguageInput: standalone, input field for source language text
- LanguageSelector: standalone, dropdown for selecting target language
- TranslateButton: standalone, button to initiate translation
- TranslatedText: standalone, displays the translated text
- TranslationTool: takes children, container for the entire translation tool
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 mb-4 bg-white rounded shadow-md""><TranslationTool><LanguageInput/><LanguageSelector/><TranslateButton/><TranslatedText/></TranslationTool></div>
COMPONENT HTML:
LanguageInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter text to translate""/>
LanguageSelector:
<select class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select language</option><!-- options will be populated dynamically --><option value=""{language_code}"">{language_name}</option></select>
TranslateButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Translate</button>
TranslatedText:
<p class=""text-gray-600"">{translated_text}</p>
TranslationTool:
<div class=""flex flex-col space-y-4"">{children}</div>"
Toggle switches for settings,"DESCRIPTION:
The UI should display a toggle switch with a label, allowing users to toggle a setting on or off. The toggle switch should be responsive, accessible, and follow a mobile-first approach.
COMPONENTS:
- ToggleSwitch: A standalone component that renders a toggle switch with a label.
HTML:
<div class=""flex justify-center mb-4""><ToggleSwitch/></div>
COMPONENT HTML:
ToggleSwitch:
<div class=""flex items-center mb-2""><input id=""toggle-switch"" type=""checkbox"" class=""w-10 h-5 transition duration-300 rounded-full outline-none""/><label for=""toggle-switch"" class=""ml-2 text-sm font-medium text-gray-900"">{label_text} </label></div>"
Word break opportunity,"DESCRIPTION:
The UI should display a paragraph of text that contains a long unbroken string which could potentially disrupt the layout on small screens. This string will have a visible break opportunity using CSS so it can break onto the next line if needed, ensuring the layout remains intact on devices with narrow screens.
COMPONENTS:
- TextContainer: (Standalone): A container that holds the text content.
HTML:
<div><TextContainer/></div>
COMPONENT HTML:
TextContainer:
<!-- Text container that includes a long unbroken string with a word break opportunity --><p class=""overflow-wrap break-word"">This is a verylongunbrokenstringthatmightcausedisplayissuesonmobiledevices but thanks to CSS, it can appropriately break. </p>"
Tweet delete button for post removal,"DESCRIPTION:
A small delete button with a trash can icon to remove a tweet from a post.
COMPONENTS:
- TweetDeleteButton: (standalone)
HTML:
<button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><TweetDeleteButton/></button>
COMPONENT HTML:
TweetDeleteButton:
<span class=""text-lg inline-block""><i class=""fas fa-trash-alt""></i></span>"
Recipe cooking timer,"DESCRIPTION:
A simple, minimalist design with a prominent timer display, start/stop buttons, and a small area for displaying the recipe name.
COMPONENTS:
- RecipeHeader: a standalone component displaying the recipe name.
- TimerDisplay: a standalone component displaying the current time.
- ControlButtons: a standalone component containing start and stop buttons.
- TimerContainer: a component that takes children, wrapping the timer display and control buttons.
HTML:
<div class=""flex flex-col mx-auto p-4 max-w-md""><RecipeHeader/><TimerContainer><TimerDisplay/><ControlButtons/></TimerContainer></div>
COMPONENT HTML:
RecipeHeader:
<h2 class=""text-lg font-bold"">{recipe_name}</h2>
TimerDisplay:
<p class=""text-4xl font-bold"">{mm}:{ss}</p>
ControlButtons:
<div class=""flex justify-center mt-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Start</button><button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Stop</button></div>
TimerContainer:
<div class=""flex flex-col items-center"">{children}</div>"
Comment section,"DESCRIPTION:
The comment section should display a list of comments with the author's name, profile picture, comment text, and timestamp. The profile picture should be a circular image. The comment text should be wrapped to the next line if it's too long. There should be a ""Reply"" button below each comment. The comment section should be responsive and adapt to different screen sizes.
COMPONENTS:
- CommentCard: A standalone component that displays a single comment.
- CommentList: A component that takes children (multiple `CommentCard`s) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold"">Comments</h2><CommentList><CommentCard/><CommentCard/><!-- Add more CommentCard components here --></CommentList></div>
COMPONENT HTML:
CommentCard:
<div class=""flex mb-4""><img src={avatar_url} alt=""Profile picture"" class=""w-12 h-12 rounded-full mr-4""/><div><h3 class=""text-sm font-bold"">{author_name}</h3><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-600"">{timestamp}</p><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Reply </button></div></div>
CommentList:
<ul class=""list-none p-0"">{children}</ul>"
Template element,"DESCRIPTION:
The UI should feature a display of a standard template element which might include a title, description, and possibly a placeholder for dynamic content. This component is ideal for scenarios where a template is predefined but will be utilized dynamically for various content.
COMPONENTS:
- TemplateCard: Standalone component
- ContentPlaceholder: Component that takes children.
HTML:
<div class=""p-4 max-w-sm mx-auto""><TemplateCard/><ContentPlaceholder><p>This is placeholder content which will be dynamically replaced.</p></ContentPlaceholder></div>
COMPONENT HTML:
TemplateCard:
<div class=""bg-white shadow-lg rounded-lg p-5""><h1 class=""text-xl font-bold mb-2"">{title}</h1><p class=""text-gray-700 mb-4"">{description}</p></div>
ContentPlaceholder:
<div class=""bg-gray-100 p-4 mt-4 rounded-lg"">{children} </div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Leaderboards and Rankings,"DESCRIPTION:
A simple leaderboard and ranking system that displays a table with usernames, rankings, and scores.
COMPONENTS:
- LeaderboardHeader: A standalone component that displays the header of the leaderboard table.
- RankingTable: A component that takes children and displays the entire leaderboard table.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><RankingTable><LeaderboardHeader/><!-- Leaderboard rows will be rendered here --></RankingTable></div>
COMPONENT HTML:
LeaderboardHeader:
<thead><tr><th class=""text-left"">Rank</th><th class=""text-left"">Username</th><th class=""text-right"">Score</th></tr></thead>
RankingTable:
<div class=""overflow-x-auto""><table class=""w-full"">{children} </table></div>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
360-degree image viewer,"DESCRIPTION:
The UI should be a interactive 360-degree image viewer that allows users to rotate an image by dragging or clicking on the image. The image should be displayed in a responsive container that adapts to different screen sizes.
COMPONENTS:
- ImageCanvas: component (standalone): Displays the 360-degree image.
- DragIndicator: component (standalone): Displays a visual indicator to hint to the user that they can drag the image.
- NavigationButtons: component (standalone): Displays previous and next buttons to navigate through the 360-degree image.
HTML:
<div class=""container mx-auto p-4""><div class=""flex justify-center mb-4""><DragIndicator/></div><ImageCanvas/><NavigationButtons/></div>
COMPONENT HTML:
ImageCanvas:
<div class=""relative overflow-hidden w-full h-full""><img src={imageName} class=""w-full h-full object-contain""/><div class=""absolute top-0 left-0 w-full h-full""><!-- image rotation logic will go here --></div></div>
DragIndicator:
<div class=""text-gray-500 text-sm"">Drag to rotate</div>
NavigationButtons:
<div class=""flex justify-center""><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded""><i class=""fas fa-chevron-left""></i></button><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded""><i class=""fas fa-chevron-right""></i></button></div>"
360-degree image viewer,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible image viewer that displays a 360-degree image. The viewer should have a circular navigation control at the bottom to rotate the image. The image should be center-aligned and take up most of the available space.
COMPONENTS:
- ImageStage: A standalone component that displays the 360-degree image.
- NavigationControl: A standalone component that displays the circular navigation control.
- ImageViewer: A component that takes children (the `ImageStage` and `NavigationControl` components) and provides a container for the image viewer.
HTML:
<div class=""flex h-screen justify-center""><ImageViewer><ImageStage/><NavigationControl/></ImageViewer></div>
COMPONENT HTML:
ImageStage:
<div class=""flex-1 overflow-hidden""><img src={image_url} alt=""360-degree image"" class=""object-contain w-full h-full""/></div>
NavigationControl:
<div class=""fixed bottom-0 left-1/2 -translate-x-1/2 mb-4 md:mb-8""><div class=""inline-flex rounded-full bg-gray-100 p-2""><button class=""rounded-full p-2""><span aria-hidden=""true"">&lt;</span></button><button class=""rounded-full p-2""><span aria-hidden=""true"">&gt;</span></button></div></div>
ImageViewer:
<div class=""flex flex-col h-full"">{children}</div>"
Featured content section,"DESCRIPTION:
The featured content section should be a prominent section that showcases a highlighted content item, such as a blog post, video, or product. It should be responsive, mobile-first, and accessible. The section should have a clear visual hierarchy, with the featured content item being the main focal point.
COMPONENTS:
- FeaturedContentSection: standalone component that contains the featured content item
- FeaturedContentItem: standalone component that represents the highlighted content item
- ContentMeta: standalone component that displays metadata about the featured content item, such as the date published or author
- CallToAction: standalone component that provides a clear call to action, such as ""Read More"" or ""Learn More""
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><FeaturedContentSection/></section>
COMPONENT HTML:
FeaturedContentSection:
<div class=""bg-white rounded shadow-md p-4 md:p-6 lg:p-8""><FeaturedContentItem/><ContentMeta/><CallToAction/></div>
FeaturedContentItem:
<h2 class=""text-2xl md:text-3xl lg:text-4xl"">{title}</h2><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 md:h-64 lg:h-80 object-cover rounded-t-md""><p class=""text-lg md:text-xl lg:text-2xl"">{excerpt}</p>
ContentMeta:
<ul class=""list-none mb-4""><li class=""inline-block mr-4"">{published_date}</li><li class=""inline-block mr-4"">{author}</li></ul>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Follow us buttons,"DESCRIPTION:
The UI should display a row of social media buttons with the label ""Follow us"" above them. The buttons should be responsive, accessible, and stylized using Tailwind CSS.
COMPONENTS:
- FollowUs: A standalone component that displays the ""Follow us"" label and the social media buttons.
- SocialButton: A component that takes children (the social media platform's logo and link) and displays a button with the logo and links to the platform.
HTML:
<div class=""container mx-auto p-4""><FollowUs/></div>
COMPONENT HTML:
FollowUs:
<div class=""flex flex-col items-center mb-4""><p class=""text-lg font-bold mb-2"">Follow us</p><div class=""flex justify-center mb-4""><SocialButton><i class=""fab fa-facebook-f"">{facebook_link}</i></SocialButton><SocialButton><i class=""fab fa-twitter"">{twitter_link}</i></SocialButton><SocialButton><i class=""fab fa-instagram"">{instagram_link}</i></SocialButton></div></div>
SocialButton:
<a href=""{link}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center w-10 h-10 mx-2 rounded-full bg-gray-200 hover:bg-gray-300"">{children}</a>"
Follow us buttons,"DESCRIPTION:
The UI should be a horizontal row of social media follow us buttons, with each button representing a different platform (e.g. Twitter, Facebook, Instagram, etc.). The buttons should be rectangular in shape, with a solid background color and white text. The text should be the name of the social media platform. The buttons should be responsive and stack horizontally on small screens.
COMPONENTS:
- FollowUsButton: (standalone): a single social media follow us button
- FollowUsButtonsContainer: (takes children): a container that holds all the social media buttons
HTML:
<div class=""container mx-auto p-4 flex flex-wrap justify-center""><FollowUsButtonsContainer><FollowUsButton/><FollowUsButton/><FollowUsButton/><!-- Add more buttons here --></FollowUsButtonsContainer></div>
COMPONENT HTML:
FollowUsButton:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{social_media_color} text-white py-2 px-4 rounded hover:bg-{social_media_hover_color}"">{social_media_name}</a>
FollowUsButtonsContainer:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Featured Image Lightbox Close,"DESCRIPTION:
The UI should be a lightbox close button for a featured image. It should be a responsive, mobile-first, accessible, and SEO-friendly component.
COMPONENTS:
- LightboxCloseButton: a standalone component representing the close button for the lightbox.
HTML:
<!-- Lightbox container --><div class=""fixed top-0 left-0 h-screen w-screen bg-black bg-opacity-50 flex justify-center""><!-- Lightbox content --><div class=""bg-white p-4 max-w-md m-4""><!-- Featured image --><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full""/><!-- Lightbox close button --><LightboxCloseButton/></div></div>
COMPONENT HTML:
LightboxCloseButton:
<!-- Lightbox close button --><button class=""absolute top-0 right-0 p-4 text-lg text-white hover:text-gray-200 focus:outline-none"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Customer Review Profile,"DESCRIPTION:
The Customer Review Profile UI should display a customer's name, profile picture, rating, review, and date of review. It should be responsive, displaying the profile picture and review text side by side on larger screens, and stacked on smaller screens.
COMPONENTS:
- CustomerProfilePicture: (standalone): displays the customer's profile picture
- ReviewRating: (standalone): displays the customer's rating (e.g. 4/5 stars)
- ReviewText: (standalone): displays the customer's written review
- ReviewDate: (standalone): displays the date of the review
- CustomerName: (standalone): displays the customer's name
- ReviewContainer: (takes children): contains the review rating, text, and date
HTML:
<div class=""md:flex md:items-center mb-4""><CustomerProfilePicture/><div class=""md:ml-4""><CustomerName/><ReviewContainer><ReviewRating/><ReviewText/><ReviewDate/></ReviewContainer></div></div>
COMPONENT HTML:
CustomerProfilePicture:
<img src={profile_picture_url} alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full object-cover""/>
ReviewRating:
<div class=""text-lg"">{rating_out_of_five}/ 5</div>
ReviewText:
<p>{review_text}</p>
ReviewDate:
<p class=""text-sm text-gray-600"">{review_date}</p>
CustomerName:
<h3 class=""text-lg"">{customer_name}</h3>
ReviewContainer:
<div class=""flex flex-col md:flex-row items-center"">{children}</div>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Categories,"DESCRIPTION:
The UI should display a list of categories, with each category displayed as a box with a title and a count of items in that category. The categories should be responsive, arranged in a grid on larger screens and in a list on smaller screens.
COMPONENTS:
- CategoryCard: A standalone component that displays a single category.
- CategoriesList: A component that takes children, which are a list of `CategoryCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Categories</h1><CategoriesList><CategoryCard/><CategoryCard/><!-- More CategoryCard components here --></CategoriesList></div>
COMPONENT HTML:
CategoryCard:
<div class=""bg-white shadow-md p-4 rounded mb-4""><h2 class=""text-lg font-bold"">{categoryName}</h2><p class=""text-gray-600 text-sm"">{itemCount} items</p></div>
CategoriesList:
<div class=""grid lg:grid-cols-2 gap-4"">{children}</div>"
Job/Project Listings,"DESCRIPTION:
The UI should be a list of job/project listings, each displaying essential information such as the job title, company, location, and a brief description. The listings should be responsive, accessible, and easy to read.
COMPONENTS:
- JobListing: A standalone component that represents a single job listing.
- JobListingCard: A standalone component that wraps the job listing information.
- JobTitle: A standalone component that displays the job title.
- CompanyName: A standalone component that displays the company name.
- Location: A standalone component that displays the location.
- JobDescription: A standalone component that displays a brief job description.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Job Listings</h1><ul class=""list-none mb-0""><JobListing/><JobListing/><!-- Add more JobListing components here --></ul></div>
COMPONENT HTML:
JobListing:
<li class=""mb-4""><JobListingCard/></li>
JobListingCard:
<div class=""bg-white shadow-md rounded p-4""><JobTitle/><CompanyName/><Location/><JobDescription/></div>
JobTitle:
<h2 class=""text-lg font-bold"">{job_title}</h2>
CompanyName:
<p class=""text-gray-600"">{company_name}</p>
Location:
<p class=""text-gray-600"">{location}</p>
JobDescription:
<p class=""text-gray-600"">{job_description}</p>"
Sidebar with popular posts and trending topics,"DESCRIPTION:
The UI should consist of a sidebar with two sections: popular posts and trending topics. The popular posts section should display a list of post titles with a brief description and a ""Read more"" button. The trending topics section should display a list of topic names with a badge indicating the number of posts related to each topic. The sidebar should be responsive, with a maximum width of 300px on larger screens and a full-width layout on smaller screens.
COMPONENTS:
- PopularPostCard: A standalone component representing a single popular post.
- TrendingTopicBadge: A standalone component displaying a topic name and a badge with the number of related posts.
- Sidebar: A component that takes children, wrapping the popular posts and trending topics sections.
HTML:
<aside class=""max-w-md md:max-w-none""><Sidebar><h2 class=""text-lg font-bold mb-2"">Popular Posts</h2><ul><li><PopularPostCard/></li><li><PopularPostCard/></li><li><PopularPostCard/></li></ul><h2 class=""text-lg font-bold mb-2"">Trending Topics</h2><ul><li><TrendingTopicBadge/></li><li><TrendingTopicBadge/></li><li><TrendingTopicBadge/></li></ul></Sidebar></aside>
COMPONENT HTML:
PopularPostCard:
<div class=""flex items-start mb-4""><img src={image_url} alt={post_title} class=""w-12 h-12 rounded-full mr-4""><div><h3 class=""text-lg font-bold"">{post_title}</h3><p class=""text-gray-600"">{post_excerpt}</p><a href={post_url} class=""text-blue-600 hover:text-blue-900"">Read more</a></div></div>
TrendingTopicBadge:
<span class=""inline-flex items-center"">{topic_name} <span class=""bg-orange-100 text-orange-800 text-xs font-bold px-2 rounded"">{topic_post_count} posts</span></span>
Sidebar:
<div class=""bg-gray-100 p-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post displayed on a webpage. The post consists of a text description, an image, and a list of comments. The text description is displayed above the image, and the comments are listed below the image.
COMPONENTS:
- PostHeader: a standalone component that displays the post's text description.
- PostImage: a standalone component that displays the post's image.
- CommentList: a component that takes children (Comment components).
- Comment: a standalone component that displays a single comment.
HTML:
<div class=""max-w-md mx-auto p-4""><PostHeader/><PostImage/><CommentList><Comment/><!-- additional Comment components... --></CommentList></div>
COMPONENT HTML:
PostHeader:
<h2 class=""text-lg font-bold"">{post_text}</h2>
PostImage:
<img src={image_url} alt=""Post image"" class=""w-full mb-4""/>
CommentList:
<ul class=""list-none p-0 m-0"">{children}</ul>
Comment:
<li class=""py-2 border-b border-gray-200""><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-500"">{comment_username}</p></li>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.
COMPONENTS:
- PostHeader: (standalone) - Displays the post title
- PostText: (standalone) - Displays the post text
- PostImage: (standalone) - Displays the post image
- CommentSection: (takes children) - Displays a list of comments
HTML:
<article class=""max-w-md mx-auto p-4 pt-6 mb-4""><PostHeader/><PostText/><PostImage/><CommentSection><!-- comment list will be rendered here --></CommentSection></article>
COMPONENT HTML:
PostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{postTitle}</h1></header>
PostText:
<p class=""text-lg"">{postText}</p>
PostImage:
<img src={imageUrl} alt={imageAlt} class=""w-full mb-4""/>
CommentSection:
<section class=""mb-4""><h2 class=""text-2xl font-bold"">Comments</h2><ul class=""list-none mb-4"">{children} <!-- comment list will be rendered here --></ul></section>"
Cover Photo Upload: Input field for uploading a cover photo,"DESCRIPTION:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
COMPONENTS:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
COMPONENT HTML:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should have a navigation menu toggle icon that resembles a hamburger icon. When clicked, it should toggle the navigation menu on and off.
COMPONENTS:
- NavigationMenuToggle: standalone
HTML:
<nav><NavigationMenuToggle/><ul id=""navigation-menu""><!-- navigation menu items here --></ul></nav>
COMPONENT HTML:
NavigationMenuToggle:
<button class=""block lg:hidden rounded focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"" aria-label=""Toggle navigation menu""><span class=""sr-only"">Toggle navigation menu</span><span class=""block w-6 h-6"" aria-hidden=""true""><!-- hamburger icon here --><span class=""block w-6 h-1 bg-gray-600 rounded-full mb-2""></span><span class=""block w-6 h-1 bg-gray-600 rounded-full mb-2""></span><span class=""block w-6 h-1 bg-gray-600 rounded-full""></span></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle icon that can be used to expand or collapse a navigation menu. It should be accessible and SEO-friendly.
COMPONENTS:
- NavToggle: (standalone) - The navigation menu toggle icon.
HTML:
<nav class=""lg:flex hidden lg:bg-white lg:shadow-md lg:rounded""><NavToggle/><!-- navigation menu content here --></nav>
COMPONENT HTML:
NavToggle:
<button class=""lg:hidden flex justify-center w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">Toggle navigation menu</span><span class=""block w-5 h-1 bg-gray-600""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span></button>"
Footer Copyright Text,"DESCRIPTION:
The UI should be a simple footer with a copyright text, displayed at the bottom of the page. The text should be centered and have a smaller font size.
COMPONENTS:
- FooterCopyright: standalone component
HTML:
<footer><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-center text-sm text-gray-500"">&copy; {current_year} {copyright_holder}. All rights reserved.</p>"
Audio transitions,"DESCRIPTION:
The UI should display a list of audio transitions with their corresponding durations and types. The list should be responsive, easily accessible on both desktop and mobile devices, and follow a card-based layout for each transition.
COMPONENTS:
- AudioTransitionCard: standalone component representing a single audio transition.
- TransitionList: component that takes children, representing the list of audio transitions.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Audio Transitions</h2><TransitionList><AudioTransitionCard/><AudioTransitionCard/><!-- Add more AudioTransitionCard components as needed --></TransitionList></div>
COMPONENT HTML:
AudioTransitionCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4""><h3 class=""text-lg font-bold"">{transition_name}</h3><p>Type: {transition_type}</p><p>Duration: {duration} seconds</p></div>
TransitionList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Rating Distribution,"DESCRIPTION:
The UI should display a product rating distribution chart, which shows the number of ratings for each rating value (e.g., 1-5 stars). The chart should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- RatingDistributionChart: Standalone component that displays the rating distribution chart.
- RatingBar: Standalone component that represents a single rating bar in the chart.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Rating Distribution</h2><RatingDistributionChart/></div>
COMPONENT HTML:
RatingDistributionChart:
<div class=""flex flex-wrap justify-center mb-4"">{ratingBars}</div>
RatingBar:
<div class=""w-full md:w-1/2 xl:w-1/3 p-2""><div class=""bg-gray-200 h-4 rounded-full""><div class=""bg-yellow-500 h-4 rounded-full"" style={`width: ${percentage}%`}></div></div><p class=""text-sm"">{ratingValue} stars ({count} ratings)</p></div>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a button to submit the search query. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: standalone component that contains the input field and search button.
- SearchInput: standalone component that represents the input field.
- SearchButton: standalone component that represents the search button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center mb-4""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"" placeholder=""Search..."">
SearchButton:
<button type=""submit"" class=""text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5"">Search</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Unfollow button to unsubscribe from users,"DESCRIPTION:
The Unfollow button should be a simple, rounded rectangle with a grey background and white text. It should be centered horizontally and have a subtle animation when hovered.
COMPONENTS:
- UnfollowButton: (standalone)
HTML:
<div class=""flex justify-center mb-4""><UnfollowButton/></div>
COMPONENT HTML:
UnfollowButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-white font-bold py-2 px-4 rounded"">Unfollow</button>"
Poll/Voting Systems,"DESCRIPTION:
A poll/voting system UI should display a question, several options to choose from, and the current voting results. It should also allow users to cast their votes.
COMPONENTS:
- PollQuestion: standalone, displays the question being asked
- PollOption: takes children, represents a single option with a vote count
- VoteButton: standalone, allows users to cast their vote
- VoteResults: takes children, displays the current voting results
HTML:
<div class=""flex flex-col gap-4""><PollQuestion/><div class=""flex flex-col gap-2""><PollOption>Option 1</PollOption><PollOption>Option 2</PollOption><PollOption>Option 3</PollOption></div><VoteButton/><VoteResults><p>Results:</p><ul><li>Option 1: {option1_votes} votes</li><li>Option 2: {option2_votes} votes</li><li>Option 3: {option3_votes} votes</li></ul></VoteResults></div>
COMPONENT HTML:
PollQuestion:
<h2 class=""text-2xl"">{question_text}</h2>
PollOption:
<div class=""flex items-center gap-2""><input type=""radio"" name=""poll_option"" id={`option_${option_id}`}/><label for={`option_${option_id}`}>{children}</label><span class=""text-gray-500"">{vote_count} votes</span></div>
VoteButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Cast Your Vote</button>
VoteResults:
<div class=""bg-gray-100 p-4 rounded"">{children}</div>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
List of options that appears when a user clicks or hovers over a button or link,"DESCRIPTION:
The UI should feature a button or link that, when clicked or hovered over, reveals a dropdown list of options. The list should appear directly beneath the button or link and be vertically aligned with the start of the button or link. It should be styled minimally with clear visual separation between each option.
COMPONENTS:
- DropdownButton: (standalone): This component represents the button that triggers the dropdown list.
- DropdownMenu: (takes children): This is the container for the list of options that appears when the DropdownButton is activated.
- DropdownItem: (takes children): Represents a single option within the DropdownMenu.
HTML:
<div class=""relative""><DropdownButton/><DropdownMenu><DropdownItem>Option 1</DropdownItem><DropdownItem>Option 2</DropdownItem><DropdownItem>Option 3</DropdownItem></DropdownMenu></div>
COMPONENT HTML:
DropdownButton:
<!-- Button to trigger dropdown --><button class=""px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"" aria-haspopup=""true"" aria-expanded=""false"">Click for options </button>
DropdownMenu:
<!-- Container for dropdown items, hidden by default, shown on button click/hover --><div class=""absolute left-0 mt-1 w-48 bg-white shadow-lg border border-gray-200 rounded-md hidden"">{children} </div>
DropdownItem:
<!-- Individual dropdown item --><a href=""{item_link}"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">{children} </a>"
Hero Background Video,"DESCRIPTION:
The UI should be a full-screen hero section with a background video that auto-plays on load. The video should be muted and loop indefinitely. There should be a text overlay with a heading and a call-to-action (CTA) button.
COMPONENTS:
- HeroBackgroundVideo: A standalone component that renders a full-screen background video.
- HeroOverlay: A component that renders the text overlay with a heading and CTA button. Takes children.
HTML:
<div class=""h-screen w-full relative""><HeroBackgroundVideo/><HeroOverlay><!-- Hero overlay content will go here --></HeroOverlay></div>
COMPONENT HTML:
HeroBackgroundVideo:
<video autoPlay loop muted class=""absolute top-0 left-0 w-full h-full object-cover"" poster={video_poster}><source src={video_src} type={video_type}/>Your browser does not support the video tag.</video>
HeroOverlay:
<div class=""absolute top-0 left-0 w-full h-full flex items-center justify-center"">{children}</div>"
Grid-Based Product Gallery Section,"DESCRIPTION:
The UI should display a responsive grid of product cards, with each card featuring a product image, title, and price. The grid should have a maximum of 3 columns on larger screens and adapt to 2 columns on smaller screens and 1 column on mobile devices.
COMPONENTS:
- ProductCard: A standalone component that displays a product's image, title, and price.
- ProductGallery: A component that takes children (i.e., multiple `ProductCard` components) and renders them in a responsive grid.
HTML:
<section class=""container mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Product Gallery</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductGallery><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGallery></div></section>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md overflow-hidden""><img src={imageUrl} alt={productName} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{productName}</h3><p class=""text-gray-600"">{price}</p></div></div>
ProductGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Form Validation Feedback,"DESCRIPTION:
The UI should display a form input field with an error message or success message below it, indicating the validation status of the input.
COMPONENTS:
- FormInput: A standalone component that represents a single form input field.
- ValidationFeedback: A component that takes children and displays the validation message (error or success).
HTML:
<div class=""flex flex-col gap-2""><FormInput/><ValidationFeedback><p>{validation_message}</p></ValidationFeedback></div>
COMPONENT HTML:
FormInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder={input_placeholder}/>
ValidationFeedback:
<div class={`text-xs ${validation_status === 'error' ? 'text-red-500' : 'text-green-500'}`}>{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Span element,"DESCRIPTION:
The UI will feature a simple span element that is designed to display inline text. This span can be used for small pieces of text such as labels, or as a part of a larger text block.
COMPONENTS:
- SimpleSpan: A standalone component that will render text within a span element.
HTML:
<div><SimpleSpan/></div>
COMPONENT HTML:
SimpleSpan:
<!-- Simple span for displaying inline text --><span class=""text-base text-gray-700"">{textContent}</span>"
Page Content Ordered List,"DESCRIPTION:
The UI should display an ordered list of page content items, with each item containing a title and a short description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- PageContentOrderedListItem: Standalone component, represents a single list item.
- PageContentOrderedList: Takes children, wraps the ordered list.
HTML:
<PageContentOrderedList><PageContentOrderedListItem/><PageContentOrderedListItem/><!-- Add more list items here --></PageContentOrderedList>
COMPONENT HTML:
PageContentOrderedListItem:
<li class=""md:w-1/2 xl:w-1/3 p-4""><h3 class=""font-bold"">{item_title}</h3><p>{item_description}</p></li>
PageContentOrderedList:
<ol class=""list-decimal list-inside"">{children}</ol>"
Case studies display,"DESCRIPTION:
A horizontal list of case studies, each with a title, description, and image. The list is responsive, with a max of 3 items per row on large screens, 2 items per row on medium screens, and 1 item per row on small screens.
COMPONENTS:
- CaseStudyCard: A standalone component representing a single case study, containing a title, description, and image.
- CaseStudyList: A component that takes children, wrapping a list of `CaseStudyCard`s.
HTML:
<div class=""container mx-auto p-4""><h2>Case Studies</h2><CaseStudyList><CaseStudyCard/><CaseStudyCard/><CaseStudyCard/><!-- Add more CaseStudyCard components as needed --></CaseStudyList></div>
COMPONENT HTML:
CaseStudyCard:
<div class=""flex flex-col justify-center p-4""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 rounded-lg""/><h3 class=""text-lg font-bold mb-2"">{title}</h3><p class=""text-gray-600"">{description}</p></div>
CaseStudyList:
<ul class=""flex flex-wrap justify-center -mx-4"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of product features, each represented by an icon and a brief description. The list should be responsive, with a maximum of 3 items per row on desktop and 1 item per row on mobile. The icons should be large and prominent, with a subtle hover effect.
COMPONENTS:
- FeatureIconListItem: (standalone): represents a single feature icon and description
- FeatureIconList: (takes children): a container for a list of `FeatureIconListItem`s
HTML:
<div class=""container mx-auto p-4""><FeatureIconList><FeatureIconListItem/><FeatureIconListItem/><FeatureIconListItem/><!-- add more items here --></FeatureIconList></div>
COMPONENT HTML:
FeatureIconListItem:
<div class=""flex flex-col items-center p-4 md:w-1/3""><i class={`fa ${icon_class}`}></i><p class=""text-sm"">{feature_description}</p></div>
FeatureIconList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should display a list of product features, each represented by an icon and a brief description. The list should be responsive, mobile-first, and accessible. The icons should be prominently displayed, with the descriptions below each icon.
COMPONENTS:
- IconItem: A standalone component representing a single feature icon and its description.
- FeatureList: A component that takes children, wrapping the list of `IconItem` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><FeatureList><IconItem/><IconItem/><IconItem/><!-- Add more IconItem components as needed --></FeatureList></div>
COMPONENT HTML:
IconItem:
<div class=""flex mb-4 lg:mb-6""><div class=""mr-4 lg:mr-6""><i aria-hidden=""true"" class={`fas fa-${icon_name} text-3xl lg:text-4xl`}></i></div><div class=""text-sm lg:text-base""><p class=""font-bold"">{feature_name}</p><p class=""text-gray-600"">{feature_description}</p></div></div>
FeatureList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should display a list of product features, with each feature represented by an icon and a brief description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and a brief description of a product feature.
- FeatureIconList: A component that takes children and displays a list of `FeatureIcon` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></div>
COMPONENT HTML:
FeatureIcon:
<div class=""flex items-center mb-4""><div class=""w-12 h-12 p-2 mr-4 bg-gray-200 rounded-full""><i class=""fas {icon_class}"" aria-hidden=""true""></i></div><p class=""text-gray-600"">{feature_description}</p></div>
FeatureIconList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a trip itinerary and booking summary, showing the trip details, booking information, and a summary of the booking.
COMPONENTS:
- TripItinerarySummary: standalone, displays trip details
- BookingInfo: standalone, displays booking information
- BookingSummary: standalone, displays a summary of the booking
- SectionCard: takes children, a card layout for displaying information
HTML:
<div class=""max-w-md mx-auto p-4""><SectionCard><TripItinerarySummary/></SectionCard><SectionCard><BookingInfo/></SectionCard><SectionCard><BookingSummary/></SectionCard></div>
COMPONENT HTML:
TripItinerarySummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Trip Itinerary</h2><p>Departure: {departure_date}</p><p>Destination: {destination}</p><p>Duration: {duration} days</p></div>
BookingInfo:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Information</h2><p>Booking ID: {booking_id}</p><p>Booking Date: {booking_date}</p><p>Payment Method: {payment_method}</p></div>
BookingSummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Summary</h2><p>Total Cost: ${total_cost}</p><p>Number of Travelers: {num_travelers}</p></div>
SectionCard:
<div class=""bg-white shadow-md rounded px-4 py-2 mb-4"">{children}</div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Popular Tags: Cloud of frequently used keywords,"DESCRIPTION:
A cloud of popular tags, where each tag has a different size and color based on its frequency of use. The tags should be arranged in a way that creates a visually appealing and organic shape.
COMPONENTS:
- PopularTagCloud: standalone component that contains all the popular tags
- Tag: standalone component that represents a single popular tag
HTML:
<div class=""md:max-w-md mx-auto p-4""><PopularTagCloud/></div>
COMPONENT HTML:
PopularTagCloud:
<div class=""flex flex-wrap justify-center mb-4"">{tags}</div>
Tag:
<a href=""{tag_url}"" class=""inline-block px-2 py-1 rounded {tag_color} text-lg mb-2 mr-2 hover:underline"">{tag_name} <span class=""text-sm"">({tag_frequency})</span></a>"
Social Media Embedded Posts,"DESCRIPTION:
The UI should display a list of social media embedded posts, with each post showing the social media platform's icon, the post's content, and any additional metadata such as the author's name and timestamp. The UI should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- SocialMediaPost: a standalone component representing a single social media post.
- SocialMediaIcon: a standalone component representing a social media platform's icon.
- PostContent: a component that takes children, representing the content of a social media post.
- PostMetadata: a component that takes children, representing the metadata of a social media post.
HTML:
<div class=""container mx-auto p-4 md:p-8""><h2 class=""text-2xl font-bold mb-4"">Social Media Embedded Posts</h2><ul class=""list-none mb-0""><li class=""mb-4""><SocialMediaPost/></li><!-- Add more list items for each social media post --></ul></div>
COMPONENT HTML:
SocialMediaPost:
<li class=""flex mb-4""><SocialMediaIcon/><div class=""flex-1 ml-4""><PostContent>{post_content}</PostContent><PostMetadata>{author_name} - {timestamp}</PostMetadata></div></li>
SocialMediaIcon:
<img src={social_media_icon_url} alt={social_media_platform_name} class=""h-8 w-8 mr-2""/>
PostContent:
<p>{children}</p>
PostMetadata:
<p class=""text-gray-600 text-sm"">{children}</p>"
Video upload tool with encoding options,"DESCRIPTION:
The UI should be a video upload tool with encoding options. It should have a file input field, a dropdown menu for selecting the encoding preset, a checkbox for enabling watermarks, and a submit button. The UI should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UploadInput: A standalone component for the file input field.
- EncodingPresetSelect: A standalone component for the dropdown menu for selecting the encoding preset.
- WatermarkCheckbox: A standalone component for the checkbox for enabling watermarks.
- SubmitButton: A standalone component for the submit button.
- VideoUploadForm: A component that takes children, which is the parent component that wraps all the other components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><VideoUploadForm><UploadInput/><EncodingPresetSelect/><WatermarkCheckbox/><SubmitButton/></VideoUploadForm></div>
COMPONENT HTML:
UploadInput:
<div class=""mb-4""><input type=""file"" id=""video-upload"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><label for=""video-upload"" class=""sr-only"">Select a video file</label></div>
EncodingPresetSelect:
<div class=""mb-4""><select id=""encoding-preset"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><option value="""">{select_preset}</option><!-- more options will be generated dynamically --></select><label for=""encoding-preset"" class=""sr-only"">Select an encoding preset</label></div>
WatermarkCheckbox:
<div class=""mb-4""><input type=""checkbox"" id=""watermark"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:ring-blue-500""><label for=""watermark"" class=""ml-2 text-sm text-gray-600"">Enable watermark</label></div>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Video</button>
VideoUploadForm:
<!-- this component will wrap all the other components --><div class=""p-4"">{children}</div>"
Rating Systems/Reviews,"DESCRIPTION:
The UI should display a rating system with a maximum of 5 stars, accompanied by a numerical rating and a review text. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- RatingStars: (standalone): Displays a row of rating stars
- RatingText: (standalone): Displays the numerical rating
- ReviewText: (standalone): Displays the review text
- RatingContainer: (takes children): Wraps around the rating components
HTML:
<div class=""flex flex-col md:flex-row justify-center mb-4""><RatingContainer><RatingStars/><RatingText/><ReviewText/></RatingContainer></div>
COMPONENT HTML:
RatingStars:
<div class=""flex items-center""><!-- 5 stars -->{/* repeat the star icon 5 times */ } <i class=""fa fa-star text-yellow-400"" aria-hidden=""true""></i>{/* end repeat */ }</div>
RatingText:
<p class=""text-sm"">{rating_value} out of 5 stars</p>
ReviewText:
<p class=""text-sm"">{review_text}</p>
RatingContainer:
<div class=""flex flex-col md:flex-row items-center"">{children}</div>"
Rating Systems/Reviews,"DESCRIPTION:
The UI should display a rating system with reviews, including the average rating, total number of reviews, and individual reviews with ratings and comments.
COMPONENTS:
- RatingSummary: (standalone): displays the average rating and total number of reviews
- ReviewList: (takes children): contains a list of `Review` components
- Review: (standalone): displays a single review with rating and comment
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><RatingSummary/><ReviewList><Review/><Review/><!-- add more Review components as needed --></ReviewList></div>
COMPONENT HTML:
RatingSummary:
<div class=""flex items-center mb-4""><div class=""text-lg"">{average_rating}/ 5</div><span class=""text-gray-600 text-sm"">{total_reviews} reviews</span></div>
ReviewList:
<ul class=""list-none mb-4"">{children}</ul>
Review:
<li class=""mb-4""><div class=""flex items-center""><div class=""text-lg"">{rating}/ 5</div><span class=""text-gray-600 text-sm"">{review_date}</span></div><p>{review_comment}</p></li>"
Rating stars,"DESCRIPTION:
The UI should display a rating system with a variable number of filled and unfilled stars, indicating a rating out of 5.
COMPONENTS:
- RatingStars: (standalone): The overall rating component.
- FilledStar: (standalone): A single filled star.
- UnfilledStar: (standalone): A single unfilled star.
HTML:
<div class=""flex justify-center""><RatingStars/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex"">{stars}</div>
FilledStar:
<i class=""fas fa-star text-yellow-400""></i>
UnfilledStar:
<i class=""fas fa-star text-gray-400""></i>"
Session details display,"DESCRIPTION:
The UI should display the details of a session, including the session title, speaker, location, date, and time. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- SessionTitle: A standalone component to display the session title.
- SessionMeta: A standalone component to display the session speaker, location, date, and time.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><SessionTitle/><SessionMeta/></div>
COMPONENT HTML:
SessionTitle:
<h2 class=""text-lg font-bold"">{session_title}</h2>
SessionMeta:
<ul class=""list-none mb-4""><li class=""mb-2""><span class=""text-gray-600"">Speaker:</span>{speaker_name} </li><li class=""mb-2""><span class=""text-gray-600"">Location:</span>{location} </li><li class=""mb-2""><span class=""text-gray-600"">Date:</span>{date} </li><li class=""mb-2""><span class=""text-gray-600"">Time:</span>{time} </li></ul>"
Countdown display,"DESCRIPTION:
The UI should display a countdown timer with days, hours, minutes, and seconds remaining until a specific date/time. The timer should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- CountdownTimer: a standalone component that displays the countdown timer.
- TimeUnit: a component that takes children to display a single unit of time (e.g., days, hours, minutes, seconds).
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><CountdownTimer/></div>
COMPONENT HTML:
CountdownTimer:
<div class=""flex justify-center mb-4""><TimeUnit>{days} days</TimeUnit><TimeUnit>{hours} hours</TimeUnit><TimeUnit>{minutes} minutes</TimeUnit><TimeUnit>{seconds} seconds</TimeUnit></div>
TimeUnit:
<div class=""inline-block mx-2 text-2xl""><span class=""font-bold"">{children}</span></div>"
Call-to-Action Buttons,"DESCRIPTION:
The UI will feature three call-to-action (CTA) buttons, each designed with visually engaging styles and hover effects. These buttons will be centered on the page and will scale responsively for mobile devices.
COMPONENTS:
- ActionButton: Standalone component. This is a reusable button component styled with TailwindCSS for a consistent and attractive look.
HTML:
<div class=""flex flex-col items-center justify-center space-y-4 md:space-y-0 md:flex-row md:space-x-4 p-6""><ActionButton/><ActionButton/><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow hover:bg-blue-600 transition-colors duration-300 focus:outline-none"">{button_text}</button>"
Google Maps Embeds,"DESCRIPTION:
The UI should display a Google Maps embed with a search bar and a map container. The search bar should allow users to enter a location, and the map container should display the location on a Google Map.
COMPONENTS:
- MapSearchBar: standalone component that renders a search input field and a search button.
- MapContainer: standalone component that renders a container for the Google Map.
- GoogleMapEmbed: component that takes children, which wraps the `MapSearchBar` and `MapContainer` components.
HTML:
<div class=""h-screen w-full flex flex-col""><GoogleMapEmbed><MapSearchBar/><MapContainer/></GoogleMapEmbed></div>
COMPONENT HTML:
MapSearchBar:
<div class=""p-4 flex justify-center""><input type=""search"" placeholder=""Enter a location"" class=""bg-white border border-gray-300 rounded-md py-2 pl-2 pr-4""/><button class=""bg-orange-500 text-white px-4 py-2 rounded-md"">Search </button></div>
MapContainer:
<div class=""h-full w-full"" id=""map"" style={{ width: '100%', height: 'calc(100vh - 64px)' }}><!-- map will be rendered here --></div>
GoogleMapEmbed:
<div class=""h-full w-full flex flex-col"">{children}</div>"
Subscription management for channel updates,"DESCRIPTION:
The UI should be a responsive subscription management panel for channel updates. It should display a list of channels with toggle buttons to manage subscription status. The panel should be accessible, responsive, and easy to use.
COMPONENTS:
- SubscriptionToggle: A standalone component that renders a toggle button to manage subscription status.
- ChannelList: A component that takes children (a list of `ChannelSubscriptionCard` components).
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Subscription Management</h2><ChannelList><!-- list of ChannelSubscriptionCard components will be rendered here --></ChannelList></div>
COMPONENT HTML:
SubscriptionToggle:
<label class=""inline-flex items-center""><input type=""checkbox"" checked=""{isSubscribed}"" class=""form-checkbox""/><span class=""ml-2"">{isSubscribed ? 'Unsubscribe' : 'Subscribe'}</span></label>
ChannelList:
<ul class=""list-none mb-0"">{children}</ul>"
Footer Section: Provide additional resources and links,"DESCRIPTION:
The footer section should be a responsive, mobile-first section that provides additional resources and links. It should be divided into three columns: one for resources, one for links, and one for a newsletter sign-up form. The section should have a dark background with white text.
COMPONENTS:
- FooterResources: A standalone component that lists out additional resources.
- FooterLinks: A standalone component that lists out links.
- FooterNewsletter: A standalone component that contains a newsletter sign-up form.
- FooterColumn: A component that takes children and is used to style a column in the footer section.
HTML:
<footer class=""bg-dark-900 pt-12 pb-4""><div class=""max-w-md mx-auto px-4 lg:max-w-2xl""><div class=""flex flex-wrap -mx-4""><FooterColumn><FooterResources/></FooterColumn><FooterColumn><FooterLinks/></FooterColumn><FooterColumn><FooterNewsletter/></FooterColumn></div></div></footer>
COMPONENT HTML:
FooterResources:
<ul class=""list-none mb-4""><li><a href=""{resource1_url}"" class=""text-white hover:text-gray-200"">{resource1_name}</a></li><li><a href=""{resource2_url}"" class=""text-white hover:text-gray-200"">{resource2_name}</a></li><!-- add more list items as needed --></ul>
FooterLinks:
<ul class=""list-none mb-4""><li><a href=""{link1_url}"" class=""text-white hover:text-gray-200"">{link1_name}</a></li><li><a href=""{link2_url}"" class=""text-white hover:text-gray-200"">{link2_name}</a></li><!-- add more list items as needed --></ul>
FooterNewsletter:
<form class=""flex flex-wrap mb-4""><input type=""email"" placeholder=""Enter your email"" class=""bg-gray-200 py-2 px-4 w-full""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Subscribe</button></form>
FooterColumn:
<div class=""w-full md:w-1/3 xl:w-1/3 p-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Product filtering and sorting controls,"DESCRIPTION:
The UI should display a set of filtering and sorting controls for products, allowing users to narrow down their search results by category, price range, and rating. The controls should be responsive, accessible, and easy to use on various devices.
COMPONENTS:
- FilterCategorySelect: A standalone dropdown component for selecting a product category.
- PriceRangeSlider: A standalone component for selecting a price range.
- RatingFilterButtons: A standalone component for selecting a rating filter.
- SortBySelect: A standalone dropdown component for selecting a sorting option.
- FilterControls: A container component that takes children ( FilterCategorySelect, PriceRangeSlider, RatingFilterButtons, and SortBySelect ).
HTML:
<div class=""max-w-md mx-auto p-4""><FilterControls><FilterCategorySelect/><PriceRangeSlider/><RatingFilterButtons/><SortBySelect/></FilterControls></div>
COMPONENT HTML:
FilterCategorySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">{category_placeholder}</option><!-- Option list will be populated dynamically --></select>
PriceRangeSlider:
<div class=""flex items-center mb-4""><span class=""mr-2"">Min: {min_price}</span><input type=""range"" min=""0"" max=""100"" value=""50"" class=""w-full""/><span class=""ml-2"">Max: {max_price}</span></div>
RatingFilterButtons:
<div class=""flex mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">4+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">3+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">2+</button></div>
SortBySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">Sort by</option><option value=""price_asc"">Price: Low to High</option><option value=""price_desc"">Price: High to Low</option><option value=""rating_desc"">Rating: High to Low</option></select>
FilterControls:
<div class=""flex flex-wrap justify-between mb-4"">{children}</div>"
Footer Newsletter Text,"DESCRIPTION:
The UI should display a brief text introducing the newsletter, a text input field to enter an email address, and a call-to-action button to submit the email address.
COMPONENTS:
- NewsletterText: A standalone component displaying the introductory text.
- NewsletterInput: A standalone component containing a text input field for entering an email address.
- SubscribeButton: A standalone component displaying a call-to-action button to submit the email address.
HTML:
<footer><NewsletterText/><NewsletterInput/><SubscribeButton/></footer>
COMPONENT HTML:
NewsletterText:
<p class=""text-lg xl:text-xl font-bold"">Stay up-to-date with our latest news and updates!</p>
NewsletterInput:
<input class=""w-full xl:w-1/2 p-2 pl-10 text-sm text-gray-700"" type=""email"" placeholder=""Enter your email address...""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Countdown Timers,"DESCRIPTION:
The UI should display a countdown timer showing days, hours, minutes, and seconds until a specific date and time.
COMPONENTS:
- CountdownTimer: (standalone): The main countdown timer component.
- DayCounter: (standalone): Displays the number of days.
- HourCounter: (standalone): Displays the number of hours.
- MinuteCounter: (standalone): Displays the number of minutes.
- SecondCounter: (standalone): Displays the number of seconds.
HTML:
<div class=""flex justify-center""><CountdownTimer/></div>
COMPONENT HTML:
CountdownTimer:
<div class=""flex gap-4""><DayCounter/><span>:</span><HourCounter/><span>:</span><MinuteCounter/><span>:</span><SecondCounter/></div>
DayCounter:
<div class=""text-4xl"">{days} <span>days</span></div>
HourCounter:
<div class=""text-4xl"">{hours} <span>hours</span></div>
MinuteCounter:
<div class=""text-4xl"">{minutes} <span>minutes</span></div>
SecondCounter:
<div class=""text-4xl"">{seconds} <span>seconds</span></div>"
Event listing,"DESCRIPTION:
The event listing UI should display a list of events with essential details, such as the event title, date, location, and a brief description. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- EventListing: A component that takes children (a list of `EventCard` components) and displays them in a list.
HTML:
<main class=""container mx-auto p-4 pt-6 md:pt-12""><h1 class=""text-3xl font-bold mb-4"">Upcoming Events</h1><EventListing><!-- list of EventCard components will be rendered here --></EventListing></main>
COMPONENT HTML:
EventListing:
<ul class=""list-none mb-0"">{children}</ul>"
Event listing,"DESCRIPTION:
The event listing UI should display a list of upcoming events with their respective details such as title, date, time, location, and a brief description. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- EventListing: A component that takes children and displays a list of events.
HTML:
<section class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Upcoming Events</h1><EventListing><!-- Event cards will be inserted here --></EventListing></section>
COMPONENT HTML:
EventListing:
<ul class=""list-none mb-0"">{children}</ul>"
Project Timeline Visualization Tool,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.
COMPONENTS:
- ProjectTimeline: The main component that renders the project timeline. Takes children.
- MilestoneCard: A card component that represents a milestone in the project timeline. Standalone.
- TaskCard: A card component that represents a task in the project timeline. Standalone.
- DependencyLine: A line component that represents a dependency between tasks or milestones. Standalone.
HTML:
<!-- The main project timeline component --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProjectTimeline><!-- Milestones and tasks will be rendered here --></ProjectTimeline></div>
COMPONENT HTML:
ProjectTimeline:
<!-- Container for the project timeline --><div class=""flex flex-col"">{children}</div>
MilestoneCard:
<!-- Milestone card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{milestone_name}</h3><p class=""text-gray-600"">{milestone_description}</p><p class=""text-sm text-gray-500"">{milestone_date}</p></div>
TaskCard:
<!-- Task card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><p class=""text-sm text-gray-500"">{task_date}</p></div>
DependencyLine:
<!-- Dependency line component --><div class=""h-4 w-1 bg-gray-300""></div>"
Breadcrumb Separator Line,"DESCRIPTION:
The UI should be a horizontal line that separates each breadcrumb item, providing visual separation between them.
COMPONENTS:
- BreadcrumbSeparator: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><!-- breadcrumb items go here --><BreadcrumbSeparator/><!-- breadcrumb items go here --></nav>
COMPONENT HTML:
BreadcrumbSeparator:
<span class=""w-1 h-1 bg-gray-300 rounded-full inline-block mx-2"" aria-hidden=""true""></span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Video thumbnails,"DESCRIPTION:
The UI should display a grid of video thumbnails, with each thumbnail showing a preview image, a title, and a duration. The grid should be responsive, with more columns on larger screens and fewer columns on smaller screens.
COMPONENTS:
- VideoThumbnail: (standalone): A single video thumbnail with a preview image, title, and duration.
- VideoThumbnailGrid: (takes children): A container for a grid of `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><VideoThumbnailGrid><VideoThumbnail/><VideoThumbnail/><!-- add more VideoThumbnail components here --></VideoThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-40 object-cover rounded-md""/><div class=""mt-2""><h3 class=""text-lg"">{video_title}</h3><p class=""text-sm"">{duration}</p></div></div>
VideoThumbnailGrid:
<div class=""flex flex-wrap justify-center -mx-4"">{children}</div>"
Profile completion progress,"DESCRIPTION:
The UI should display a circular progress bar indicating the user's profile completion progress, along with a percentage text.
COMPONENTS:
- ProfileCompletionProgressBar: standalone component that displays a circular progress bar.
- ProfileCompletionPercentageText: standalone component that displays the percentage text.
HTML:
<!-- Profile completion progress container --><div class=""flex justify-center mb-4""><!-- Profile completion progress bar --><ProfileCompletionProgressBar/><!-- Profile completion percentage text --><ProfileCompletionPercentageText/></div>
COMPONENT HTML:
ProfileCompletionProgressBar:
<!-- Circular progress bar --><div class=""w-20 h-20 border-4 border-gray-300 border-solid rounded-full""><!-- Progress indicator --><div class=""w-20 h-20 bg-blue-500 rounded-full"" style={{ width: `${progressPercentage}%` }}></div></div>
ProfileCompletionPercentageText:
<!-- Percentage text --><p class=""text-lg text-gray-600"">{completion_percentage}%</p>"
Footer Copyright Symbol,"DESCRIPTION:
The UI should be a simple footer with a copyright symbol and the year.
COMPONENTS:
- Footer: component (standalone)
HTML:
<footer class=""bg-gray-200 h-screen p-4""><Footer/></footer>
COMPONENT HTML:
Footer:
<p class=""text-sm text-gray-600"">{year} &copy; {site_name}</p>"
Travel itinerary planner,"DESCRIPTION:
The UI should be a responsive, mobile-first travel itinerary planner that displays a list of trips, each with a title, destination, and dates. Each trip should have an ""Edit"" and ""Delete"" button. The UI should be accessible and SEO-friendly.
COMPONENTS:
- TripCard: A standalone component that displays a single trip's details.
- TripList: A component that takes children, which are multiple `TripCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Travel Itinerary Planner</h1><TripList><TripCard/><TripCard/><!-- Add more TripCard components here --></TripList></div>
COMPONENT HTML:
TripCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{trip_title}</h2><p>Destination: {destination}</p><p>Dates: {start_date} - {end_date}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button></div>
TripList:
<ul class=""list-none mb-4"">{children}</ul>"
Newsletter signup form,"DESCRIPTION:
The UI should be a simple newsletter signup form with a input field for the email address and a submit button. The form should be responsive, meaning it should adapt to different screen sizes and devices. The form should also be accessible, meaning it should be usable by everyone, regardless of their abilities.
COMPONENTS:
- NewsletterInput: a standalone component for the email input field
- SubmitButton: a standalone component for the submit button
- NewsletterForm: a component that takes children, which will contain the `NewsletterInput` and `SubmitButton`
HTML:
<main class=""max-w-md mx-auto p-4""><NewsletterForm><NewsletterInput/><SubmitButton/></NewsletterForm></main>
COMPONENT HTML:
NewsletterInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""email"" placeholder=""Enter your email address"" aria-label=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
NewsletterForm:
<form class=""flex flex-wrap -mx-3 mb-6"">{children}</form>"
Dropdown Menu Item Icon,"DESCRIPTION:
The UI should be a dropdown menu item with an icon. The icon should be on the left side of the text, and the text should be displayed in a single line.
COMPONENTS:
- DropdownMenuItemIcon: A standalone component that contains an icon and text.
- Icon: A standalone component that represents the icon.
HTML:
<ul><li><DropdownMenuItemIcon/></li></ul>
COMPONENT HTML:
DropdownMenuItemIcon:
<li><Icon/><span>{menuItemText}</span></li>
Icon:
<i class=""w-4 h-4 text-gray-500""></i>"
Breadcrumb Navigation,"DESCRIPTION:
A horizontal list of links, with each item separated by a forward slash (/), and the current page highlighted.
COMPONENTS:
- BreadcrumbItem: (standalone): represents a single item in the breadcrumb navigation
- BreadcrumbNavigation: (takes children): contains a list of breadcrumb items
HTML:
<nav class=""flex flex-wrap mb-4 text-sm"" aria-label=""Breadcrumb""><BreadcrumbNavigation><BreadcrumbItem/><BreadcrumbItem/><BreadcrumbItem/></BreadcrumbNavigation></nav>
COMPONENT HTML:
BreadcrumbItem:
<li class=""mr-2""><a href=""{href}"" class=""text-gray-600 hover:text-gray-900"">{label}</a><span class=""mx-2"">/</span></li>
BreadcrumbNavigation:
<ul class=""list-none p-0 m-0 flex flex-wrap"">{children}</ul>"
Search Input Placeholder,"DESCRIPTION:
The UI should be a simple search input field with a placeholder text that says ""Search...""
COMPONENTS:
- SearchInput: A standalone component that renders a search input field with a placeholder text.
HTML:
<div class=""flex justify-center mx-auto max-w-md""><SearchInput/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg leading-tight text-gray-700 bg-gray-200 rounded-md"" placeholder=""{placeholder_text}""/>"
Condensed menu or navigation bar with minimal space between items,"DESCRIPTION:
A condensed navigation bar with minimal space between items, responsive and mobile-first.
COMPONENTS:
- CondensedNavItem: ` ( standalone ): A single item in the navigation bar.
- CondensedNav: ` ( takes children ): The navigation bar that contains all the items.
HTML:
<nav class=""flex flex-wrap justify-center md:flex-nowrap""><CondensedNav><CondensedNavItem/><CondensedNavItem/><CondensedNavItem/><!-- Add more items here --></CondensedNav></nav>
COMPONENT HTML:
CondensedNavItem:
<a href=""{item_url}"" class=""px-4 py-2 mx-1 text-sm hover:text-gray-600 transition duration-300 ease-in-out"">{item_name}</a>
CondensedNav:
<div class=""flex flex-wrap justify-center md:flex-nowrap"">{children}</div>"
YouTube/Vimeo Embeds,"DESCRIPTION:
The UI should display an embedded YouTube or Vimeo video player with a responsive width and a fixed aspect ratio. The video player should be centered on the page.
COMPONENTS:
- VideoEmbed: A standalone component that displays an embedded video player.
- AspectRatioWrapper: A component that wraps the video player and maintains a fixed aspect ratio. It takes children.
HTML:
<div class=""flex justify-center""><AspectRatioWrapper><VideoEmbed/></AspectRatioWrapper></div>
COMPONENT HTML:
VideoEmbed:
{/* YouTube or Vimeo iframe */}<iframe src={video_url} frameBorder=""0"" allowFullScreen allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture""/>
AspectRatioWrapper:
<div class=""relative pb-16/9"" style={{ maxWidth: '100vw', maxHeight: '80vh' }}>{children}</div>"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
Newsletter archive display,"DESCRIPTION:
The UI for the Newsletter Archive display should be simplistic and organized. It should present a list of newsletter entries, each with a title, a short description, and a link to view the full newsletter. These should be arranged in a chronological order, likely with the newest entries at the top. The layout needs to be responsive, scaling well from mobile views to desktop displays.
COMPONENTS:
- NewsletterEntry: (Standalone)**: This component represents a single newsletter item. It includes a title, a description, and a ""Read More"" link.
- NewsletterList: (Takes children)**: This component acts as a container for multiple NewsletterEntry components.
HTML:
<main class=""p-4""><h1 class=""text-xl font-bold text-center my-4"">Newsletter Archive</h1><NewsletterList><NewsletterEntry/><NewsletterEntry/><NewsletterEntry/><!-- Additional NewsletterEntry components can be added here --></NewsletterList></main>
COMPONENT HTML:
NewsletterEntry:
<div class=""border p-2 mb-2 rounded-lg""><h2 class=""text-lg font-semibold"">{newsletter_title}</h2><p class=""text-gray-600"">{newsletter_description}</p><a href=""{newsletter_link}"" class=""text-blue-500 hover:underline"">Read More</a></div>
NewsletterList:
<div class=""space-y-3"">{children} </div>"
Lesson/List View of Content,"DESCRIPTION:
A responsive, mobile-first list view of lessons/content, with each item displaying a title, description, and call-to-action (CTA) button.
COMPONENTS:
- LessonCard: (standalone): A individual lesson/content item in the list.
- LessonList: (takes children): The container for the list of lessons/content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-2xl font-bold mb-4"">Lessons</h1><LessonList><LessonCard/><LessonCard/><!-- Add more LessonCard components here --></LessonList></div>
COMPONENT HTML:
LessonCard:
<div class=""mb-4 md:mb-6 lg:mb-8""><h2 class=""text-lg font-bold"">{lesson_title}</h2><p class=""text-gray-600"">{lesson_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{lesson_cta_text} </button></div>
LessonList:
<ul class=""list-none mb-0"">{children}</ul>"
Threads,"DESCRIPTION:
The UI should display a list of threads, with each thread showing a title, a brief description, and the number of replies. The list should be responsive, with a card-based layout on larger screens and a simple list on smaller screens.
COMPONENTS:
- ThreadCard: a standalone component representing a single thread, with a title, description, and reply count.
- ThreadList: a component that takes children, wrapping the list of threads.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ThreadList><ThreadCard/><ThreadCard/><!-- More ThreadCard components here --></ThreadList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h2 class=""text-lg font-bold"">{thread_title}</h2><p class=""text-gray-600"">{thread_description}</p><p class=""text-gray-500"">{reply_count} replies</p></div>
ThreadList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product details page,"DESCRIPTION:
The product details page should display the product's image, name, description, price, and call-to-action (CTA) buttons. The UI should be responsive, with the image and description side-by-side on large screens, and stacked on small screens.
COMPONENTS:
- ProductImage: (standalone): displays the product image
- ProductHeader: (standalone): displays the product name and price
- ProductDescription: (standalone): displays the product description
- CallToAction: (standalone): displays the call-to-action buttons
HTML:
<!-- Product details page --><div class=""flex flex-col md:flex-row gap-4 md:gap-8""><ProductImage/><div class=""md:w-2/3""><ProductHeader/><ProductDescription/></div><CallToAction/></div>
COMPONENT HTML:
ProductImage:
<img src={imageUrl} alt={productName} class=""w-full md:w-1/2 h-64 md:h-full object-cover""/>
ProductHeader:
<h1 class=""text-3xl font-bold"">{productName}</h1><p class=""text-lg"">{productPrice}</p>
ProductDescription:
<p class=""text-lg"">{productDescription}</p>
CallToAction:
<div class=""flex gap-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Learn More</button></div>"
Header User Profile Picture,"DESCRIPTION:
The UI should display a circular user profile picture with a dropdown menu that appears when the user clicks on the profile picture.
COMPONENTS:
- UserProfilePicture: (standalone): Displays the user's profile picture.
- DropdownMenu: (takes children): Displays a dropdown menu with user profile options.
HTML:
<nav class=""flex justify-end""><UserProfilePicture/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></nav>
COMPONENT HTML:
UserProfilePicture:
<div class=""rounded-full h-10 w-10 overflow-hidden""><img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""object-cover h-full w-full""/></div>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded shadow-md"">{children}</div>"
User profile popup with avatar and username,"DESCRIPTION:
The UI should be a popup modal that displays a user's avatar and username. The popup should be responsive, mobile-first, and accessible. The avatar should be a circular image, and the username should be displayed in a readable font size.
COMPONENTS:
- UserProfilePopup: - standalone component that represents the entire popup modal.
- UserProfileAvatar: - standalone component that represents the user's avatar.
- UserProfileUsername: - standalone component that represents the user's username.
HTML:
<div class=""fixed top-0 left-0 w-full h-full bg-gray-500 bg-opacity-50 flex justify-center pt-20""><!-- popup modal container --><div class=""bg-white rounded shadow-md p-4 w-96 md:w-128 lg:w-160""><!-- UserProfilePopup component --><UserProfilePopup/></div></div>
COMPONENT HTML:
UserProfilePopup:
<div class=""flex flex-col items-center""><UserProfileAvatar/><UserProfileUsername/></div>
UserProfileAvatar:
<img src=""{avatar_url}"" alt=""User Avatar"" class=""rounded-full w-24 h-24 mb-2""/>
UserProfileUsername:
<h2 class=""text-lg font-bold"">{username}</h2>"
Tweet analytics for engagement metrics,"DESCRIPTION:
The UI should be a dashboard displaying tweet analytics for engagement metrics. It should show the number of likes, retweets, replies, and engagements for a tweet.
COMPONENTS:
- TweetAnalyticsCard: standalone component displaying the tweet analytics
- MetricItem: takes children, displays a single metric (e.g. likes, retweets, etc.)
HTML:
<div class="" container mx-auto p-4 pt-6 md:p-6""><TweetAnalyticsCard/></div>
COMPONENT HTML:
TweetAnalyticsCard:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold"">Tweet Analytics</h2><ul class=""list-none mb-0""><MetricItem>Likes: {likes} </MetricItem><MetricItem>Retweets: {retweets} </MetricItem><MetricItem>Replies: {replies} </MetricItem><MetricItem>Engagements: {engagements} </MetricItem></ul></div>
MetricItem:
<li class=""flex items-center mb-2""><span class=""mr-2"">{icon}</span><span>{children}</span></li>"
Product ratings,"DESCRIPTION:
- The UI should display a product name, a visual representation of the rating (e.g., stars), and the number of reviews. It should be compact and clear, designed to be used in product listings or details pages.
COMPONENTS:
- ProductName: Standalone component displaying the name of the product.
- RatingStars: Standalone component that visually represents the rating using stars.
- ReviewCount: Standalone component that shows the number of reviews.
HTML:
<div class=""flex flex-col items-start""><ProductName/><div class=""flex items-center space-x-2""><RatingStars/><ReviewCount/></div></div>
COMPONENT HTML:
ProductName:
<h3 class=""text-lg font-bold"">{product_name}</h3>
RatingStars:
<div class=""flex""><!-- Each 'i' element represents a star; 'filled' class could change based on actual rating --><i class=""text-yellow-400"">★</i><!-- Assuming ★ represents a star --><i class=""text-yellow-400"">★</i><i class=""text-yellow-400"">★</i><i class=""text-yellow-400"">★</i><i class=""text-gray-300"">★</i></div>
ReviewCount:
<span class=""text-gray-600 text-sm"">({review_count} reviews)</span>"
Company Fax Number,"DESCRIPTION:
A simple text element displaying the company's fax number, with a clear label and adequate spacing.
COMPONENTS:
- FaxNumberDisplay: A standalone component that displays a fax number with a label.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><FaxNumberDisplay/></div>
COMPONENT HTML:
FaxNumberDisplay:
<p class=""text-sm leading-5 text-gray-700"">Fax: <span class=""font-medium"">{fax_number}</span></p>"
CAPTCHA verification box,"DESCRIPTION:
The UI should be a simple verification box with a image-based CAPTCHA, a text input for the user to enter the CAPTCHA code, and a submit button.
COMPONENTS:
- CaptchaImage: a standalone component that displays the CAPTCHA image.
- CaptchaTextInput: a standalone component that provides a text input for the user to enter the CAPTCHA code.
- SubmitButton: a standalone component that provides a submit button to verify the CAPTCHA code.
- CaptchaVerificationBox: a component that takes children and wraps the CAPTCHA image, text input, and submit button.
HTML:
<div class=""max-w-md mx-auto p-4""><CaptchaVerificationBox><CaptchaImage/><CaptchaTextInput/><SubmitButton/></CaptchaVerificationBox></div>
COMPONENT HTML:
CaptchaImage:
<img src=""{captcha_image_url}"" alt=""CAPTCHA Image"" class=""w-full h-24 object-cover mb-4""/>
CaptchaTextInput:
<input type=""text"" id=""captcha-input"" class=""px-4 py-2 w-full border border-gray-300 rounded-md""/>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md"">Verify</button>
CaptchaVerificationBox:
<div class=""bg-white p-4 rounded-md shadow-md"">{children}</div>"
Ratings and Reviews,"DESCRIPTION:
The UI should display a rating system with an average rating and the number of reviews. It should also display a list of individual reviews from users.
COMPONENTS:
- RatingIndicator: Standalone component to display the average rating.
- ReviewList: Component that takes children (individual reviews).
- ReviewItem: Standalone component to display a single review.
HTML:
<div class=""flex flex-col gap-4""><RatingIndicator/><p>{review_count} reviews</p><ReviewList><ReviewItem/><!-- more ReviewItem components here --></ReviewList></div>
COMPONENT HTML:
RatingIndicator:
<div class=""flex items-center gap-2""><span class=""text-xl"">{average_rating}/5</span><i class=""fa fa-star text-yellow-500""></i><span class=""text-gray-500"">{rating_count} ratings</span></div>
ReviewList:
<ul class=""list-none py-4"">{children}</ul>
ReviewItem:
<li class=""py-2 border-b border-gray-200""><div class=""flex items-center justify-between""><div><span class=""text-lg"">{reviewer_name}</span><span class=""text-sm text-gray-500"">{review_date}</span></div><div><i class=""fa fa-star text-yellow-500""></i><span class=""text-sm"">{rating}/5</span></div></div><p class=""text-sm text-gray-600"">{review_text}</p></li>"
Semantic HTML5 Markup,"DESCRIPTION:
A basic HTML5 document structure with semantic meaning, containing a header, navigation, main content area, sidebar, and footer.
COMPONENTS:
- HeaderComponent: - standalone
- NavComponent: - standalone
- MainComponent: - takes children
- SidebarComponent: - standalone
- FooterComponent: - standalone
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{document_title}</title></head><body><HeaderComponent/><NavComponent/><main><MainComponent><!-- Main content area --></MainComponent></main><aside><SidebarComponent/></aside><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-gray-200 p-4""><h1>{header_title}</h1></header>
NavComponent:
<nav class=""flex justify-between p-4 bg-gray-200""><ul class=""flex""><li><a href=""#"" class=""text-gray-600"">{nav_item_1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_item_2}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_item_3}</a></li></ul></nav>
MainComponent:
<div class=""p-4"">{children}</div>
SidebarComponent:
<aside class=""bg-gray-200 p-4""><h2>{sidebar_title}</h2><ul><li>{sidebar_item_1}</li><li>{sidebar_item_2}</li><li>{sidebar_item_3}</li></ul></aside>
FooterComponent:
<footer class=""bg-gray-200 p-4""><p>&copy; {current_year} {footer_text}</p></footer>"
Semantic HTML5 Markup,"DESCRIPTION:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
COMPONENTS:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Header Navigation Menu,"DESCRIPTION:
The UI should feature a header navigation menu that stretches across the top of the screen. It should be responsive, collapsing into a more mobile-friendly format as needed. The header should contain a logo on the left and navigation links on the right. On smaller screens, the navigation links might collapse into a hamburger menu or a dropdown.
COMPONENTS:
- Logo: Standalone component that displays the brand's logo.
- Navbar: Standalone component that contains navigation links.
- NavLinks: Component that takes children; consists of individual links for navigation.
HTML:
<header class=""bg-white shadow-md p-4 fixed top-0 left-0 w-full z-10""><div class=""container mx-auto flex justify-between items-center""><Logo/><Navbar/></div></header>
COMPONENT HTML:
Logo:
<div><a href=""{home_url}"" class=""text-lg font-bold text-gray-900"">{brand_name} </a></div>
Navbar:
<nav><ul class=""flex space-x-4""><NavLinks>Home</NavLinks><NavLinks>About</NavLinks><NavLinks>Services</NavLinks><NavLinks>Contact</NavLinks></ul></nav>
NavLinks:
<li><a href=""{link_url}"" class=""text-gray-600 hover:text-gray-900"">{children}</a></li>"
Audio thumbnails,"DESCRIPTION:
The UI should consist of a grid of square thumbnails, each representing an audio file. Each thumbnail should display a playable audio icon, the title of the audio file, and the duration of the audio file.
COMPONENTS:
- AudioThumbnail: (standalone): A single audio thumbnail component.
- AudioThumbnailGrid: (takes children): A grid container for multiple `AudioThumbnail` components.
HTML:
<AudioThumbnailGrid><AudioThumbnail/><AudioThumbnail/><!-- more AudioThumbnail components --></AudioThumbnailGrid>
COMPONENT HTML:
AudioThumbnail:
<div class=""w-24 h-24 bg-gray-200 rounded flex justify-center items-center""><i class=""fas fa-play text-lg text-gray-500""></i><div class=""absolute bottom-0 left-0 p-1 text-xs text-gray-600"">{audio_title}</div><div class=""absolute bottom-0 right-0 p-1 text-xs text-gray-600"">{audio_duration}</div></div>
AudioThumbnailGrid:
<div class=""grid grid-cols-2 gap-4 justify-items-center"">{children}</div>"
"Large, prominently displayed image at the top of a webpage","DESCRIPTION:
A large, prominent image at the top of a webpage, taking up the full width of the screen on desktop and tablet devices, and the full screen height on mobile devices.
COMPONENTS:
- HeroImage: (standalone): A large, prominent image at the top of a webpage.
HTML:
<header><HeroImage/></header>
COMPONENT HTML:
HeroImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-screen object-cover lg:h-full lg:w-full""/><!-- The w-full and h-screen classes make the image take up the full width and height of the screen on mobile devices. The lg:h-full and lg:w-full classes make the image take up the full height and width of the screen on desktop and tablet devices. The object-cover class ensures the image is fully visible and scaled to cover the entire container. -->"
"Large, prominently displayed image at the top of a webpage","DESCRIPTION:
A large, prominently displayed image at the top of a webpage, taking up the full width of the screen and having a responsive height to maintain its aspect ratio.
COMPONENTS:
- HeroImage: A standalone component that displays a large, prominent image.
HTML:
<section class=""h-screen w-full""><HeroImage/></section>
COMPONENT HTML:
HeroImage:
<img src=""{image_src}"" alt=""{image_alt_text}"" class=""object-cover h-full w-full""/>"
File input field,"DESCRIPTION:
- A file input UI typically features a button that users can click to open their file explorer. Once a file is selected, the file name is displayed next to the button.
COMPONENTS:
- FileInput: A standalone component including a file input element and a label.
- FileNameDisplay: A standalone component that displays the selected file name.
HTML:
<div class=""flex flex-col space-y-2""><FileInput/><FileNameDisplay/></div>
COMPONENT HTML:
FileInput:
<!-- FileInput: Provides an interface for users to upload files --><label for=""fileInput"" class=""block text-sm font-medium text-gray-700"">Upload file</label><input id=""fileInput"" name=""fileInput"" type=""file"" class=""block w-full text-sm text-gray-900 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-gray-50 file:text-gray-700 hover:file:bg-gray-100""/>
FileNameDisplay:
<!-- FileNameDisplay: Shows the name of the selected file --><span class=""text-sm text-gray-700"">{selectedFileName}</span>"
"Popover that appears in response to user actions, offering additional options or information","DESCRIPTION:
The UI should be a responsive popover that appears when triggered by a user action, such as a click or hover. The popover should display additional options or information related to the trigger element. It should be accessible, with a clear visual connection to the trigger element, and should not obstruct other interactive elements on the page.
COMPONENTS:
- PopoverTrigger: (standalone): The element that triggers the popover when interacted with.
- PopoverContent: (takes children): The container that holds the additional options or information.
HTML:
<div class=""flex justify-center""><PopoverTrigger/><PopoverContent><!-- Popover content goes here --></PopoverContent></div>
COMPONENT HTML:
PopoverTrigger:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{popover_trigger_text}</button>
PopoverContent:
<div class=""absolute z-10 bg-white rounded shadow-md p-4"">{children}</div>"
"Popover that appears in response to user actions, offering additional options or information","DESCRIPTION:
A small, interactive popup that appears when the user clicks on a specific element (e.g., a button or an icon). The popover should have a subtle animation and a slight shadow to give it a sense of depth. The background should be a light color with dark text, and the overall design should be minimalistic and modern.
COMPONENTS:
- PopoverTrigger: (standalone): The element that triggers the popover when clicked.
- PopoverContent: (takes children): The actual popover content that appears when the trigger is clicked.
HTML:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded""><PopoverTrigger/></button><div class=""fixed inset-0 z-50""><PopoverContent><!-- popover content goes here --></PopoverContent></div>
COMPONENT HTML:
PopoverTrigger:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{trigger_text}</button>
PopoverContent:
<div class=""bg-white shadow-md p-4 w-64 rounded"">{children}</div>"
"Popover that appears in response to user actions, offering additional options or information","DESCRIPTION:
The UI should be a responsive popover that appears when a user interacts with an element, providing additional options or information. It should be accessible, mobile-friendly, and have a clean design.
COMPONENTS:
- PopoverTrigger: (takes children): The component that triggers the popover when interacted with.
- PopoverContent: (takes children): The content of the popover.
HTML:
<div class=""relative inline-block""><PopoverTrigger><!-- trigger element, e.g. a button --><button>Click me!</button></PopoverTrigger><PopoverContent><!-- popover content here --></PopoverContent></div>
COMPONENT HTML:
PopoverTrigger:
<div class=""cursor-pointer"">{children}</div>
PopoverContent:
<div class=""absolute z-10 bg-white py-2 px-4 rounded shadow-md"">{children} <span class=""absolute top-0 right-0 px-2 py-1 text-gray-600"">× </span></div>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
A simple page with a header, a section for a QR code, and a section for a 2FA code.
COMPONENTS:
- AuthHeader: - standalone (header for the 2FA page)
- QrCodeSection: - standalone (section for displaying the QR code)
- TwoFactorCode: - standalone (section for displaying the 2FA code)
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><AuthHeader/><div class=""flex justify-center mb-4""><QrCodeSection/></div><div class=""mb-4""><TwoFactorCode/></div></div>
COMPONENT HTML:
AuthHeader:
<header class=""mb-4""><h1 class=""text-2xl font-bold"">Two-Factor Authentication</h1></header>
QrCodeSection:
<section class=""bg-white p-4 rounded shadow-md""><img src=""{qr_code_image_url}"" alt=""QR Code"" class=""w-64 h-64 mx-auto""/><p class=""text-sm text-gray-600"">{qr_code_instructions}</p></section>
TwoFactorCode:
<section class=""bg-white p-4 rounded shadow-md""><h2 class=""text-lg font-bold"">Your 2FA Code</h2><p class=""text-2xl"">{two_factor_code}</p><p class=""text-sm text-gray-600"">{two_factor_code_instructions}</p></section>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
COMPONENTS:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
COMPONENT HTML:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
Visual indicator showing the completion status of a process or task,"DESCRIPTION:
A horizontal progress bar with a fill color indicating the completion percentage.
COMPONENTS:
- ProgressBar: standalone component
HTML:
<div class=""flex justify-center mb-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""w-full bg-gray-200 h-2 rounded-full""><div class={`bg-${color} h-2 rounded-full`} style={{ width: `${percentage}%` }}/></div>"
Feedback/rating system,"DESCRIPTION:
A simple rating system with 5 stars, where users can select a rating from 1 to 5 stars, and leave a feedback comment.
COMPONENTS:
- RatingStars: A standalone component that displays 5 stars, with the selected stars filled.
- FeedbackInput: A standalone component that is a text input for users to leave a feedback comment.
- RatingFeedback: A component that takes children, wrapping the `RatingStars` and `FeedbackInput` components.
HTML:
<RatingFeedback><RatingStars/><FeedbackInput/></RatingFeedback>
COMPONENT HTML:
RatingStars:
<div class=""flex flex-wrap justify-center mb-4"">{ Array(5).fill(0).map((_, i) =>( <button key={i} class={`w-6 h-6 ${i < rating ? 'text-yellow-400' : 'text-gray-400'} hover:text-yellow-400`} onClick={() =>setRating(i + 1)}><i class=""fas fa-star""></i></button>)) }</div>
FeedbackInput:
<textarea class=""w-full p-4 pl-10 text-sm text-gray-700"" placeholder=""Leave a feedback..."" value={feedback} onChange={(e) =>setFeedback(e.target.value)}/>
RatingFeedback:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 md:pt-0"">{children}</div>"
Cookie Banners,"DESCRIPTION:
A cookie banner is a notification that appears at the top or bottom of a webpage, informing users about the use of cookies on the website. It should be a non-obtrusive, dismissible notification that contains a message, an accept button, and an optional link to learn more.
COMPONENTS:
- CookieBanner: Standalone component that contains the cookie banner message, accept button, and optional link.
- CookieButton: Standalone component that represents the accept button.
HTML:
<!-- Cookie banner container --><div class=""fixed bottom-0 left-0 right-0 p-4 bg-gray-100""><!-- Cookie banner content --><CookieBanner/></div>
COMPONENT HTML:
CookieBanner:
<!-- Cookie banner content --><div class=""flex justify-between""><p class=""text-sm"">{cookie_message}</p><div class=""flex""><CookieButton/>{optional_link && ( <a href={optional_link.href} target=""_blank"" rel=""noopener noreferrer"" class=""text-sm underline ml-4"">{optional_link.text}</a>)} </div></div>
CookieButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Accept</button>"
Shader/Gradient backgrounds,"DESCRIPTION:
The UI should display a container with a shader/gradient background that changes color depending on the screen size.
COMPONENTS:
- GradientBackground: A standalone component that displays a shader/gradient background.
HTML:
<div class=""h-screen w-full""><GradientBackground/></div>
COMPONENT HTML:
GradientBackground:
<div class=""h-full w-full bg-gradient-to-r from-{start_color} to-{end_color} md:bg-gradient-to-br lg:bg-gradient-to-t""><!-- background container --></div>"
Shader/Gradient backgrounds,"DESCRIPTION:
The UI should display a container with a shader/gradient background. The background should have a gradient effect with two colors: a light blue color (#87CEEB) and a darker blue color (#032B44). The gradient should be diagonally angled from top-left to bottom-right.
COMPONENTS:
- GradientBackground: A standalone component that wraps the gradient background.
HTML:
<div class=""h-screen w-full flex items-center justify-center""><GradientBackground/></div>
COMPONENT HTML:
GradientBackground:
<div class=""h-full w-full bg-gradient-to-br from-[#87CEEB] to-[#032B44] rounded-md p-4""></div>"
Shader/Gradient backgrounds,"DESCRIPTION:
The UI should display a hero section with a shader/gradient background that adapts to different screen sizes and devices.
COMPONENTS:
- GradientHero: (standalone) - A hero section with a shader/gradient background.
HTML:
<section class=""h-screen""><GradientHero/></section>
COMPONENT HTML:
GradientHero:
<section class=""h-screen bg-gradient-to-r from-purple-400 to-orange-300""><!-- Hero content goes here --><h1 class=""text-3xl font-bold"">{hero_title}</h1><p class=""text-lg"">{hero_subtitle}</p><!-- Call-to-action button --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></section>"
Detailed product information table,"DESCRIPTION:
The UI should display a responsive table with multiple rows, each containing detailed product information. The table should be easily readable on various devices, with a mobile-first approach.
COMPONENTS:
- ProductTable: Standalone component, renders a table with product information.
- TableRow: Component that takes children, represents a single row in the table.
- TableCell: Component that takes children, represents a single cell in the table.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductTable/></div>
COMPONENT HTML:
ProductTable:
<table class=""w-full text-sm md:text-base lg:text-lg"">{rows}</table>
TableRow:
<tr>{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Tax calculator tool,"DESCRIPTION:
The UI should be a simple, easy-to-use tax calculator that allows users to input their income and select their filing status to calculate their tax liability. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- TaxCalculator: (standalone): The main tax calculator component that contains all the other components.
- IncomeInput: (standalone): A text input field for users to enter their income.
- FilingStatusSelect: (standalone): A dropdown select field for users to select their filing status.
- TaxResult: (standalone): A component that displays the calculated tax liability.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TaxCalculator/></div>
COMPONENT HTML:
TaxCalculator:
<div class=""flex flex-col gap-4""><IncomeInput/><FilingStatusSelect/><TaxResult/></div>
IncomeInput:
<div class=""flex flex-col""><label class=""text-lg"" htmlFor=""income"">Income:</label><input type=""number"" id=""income"" class=""w-full p-2 pl-10 text-lg""/></div>
FilingStatusSelect:
<div class=""flex flex-col""><label class=""text-lg"" htmlFor=""filing-status"">Filing Status:</label><select id=""filing-status"" class=""w-full p-2 pl-10 text-lg""><option value=""single"">Single</option><option value=""married-jointly"">Married Filing Jointly</option><option value=""married-separately"">Married Filing Separately</option><option value=""head-of-household"">Head of Household</option></select></div>
TaxResult:
<div class=""text-lg font-bold"">Your tax liability is: ${tax_liability}</div>"
Animated Counter Statistics Section,"DESCRIPTION:
The UI should be a responsive, mobile-first statistics section that showcases animated counter statistics. It should have a clean and modern design, with a neutral color scheme and clear typography. The section should be divided into multiple columns, with each column representing a different statistic. Each statistic should have a heading, a animated counter, and a brief description.
COMPONENTS:
- StatisticCard: (standalone) - A single statistic card component that displays a heading, an animated counter, and a brief description.
- StatisticsSection: (takes children) - A container component that holds multiple `StatisticCard` components.
HTML:
<section class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Statistics</h2><div class=""flex flex-wrap -mx-4""><StatisticsSection><StatisticCard/><StatisticCard/><StatisticCard/></StatisticsSection></div></section>
COMPONENT HTML:
StatisticCard:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold"">{statistic_heading}</h3><p class=""text-4xl font-bold"">{animated_counter}</p><p class=""text-sm"">{statistic_description}</p></div>
StatisticsSection:
<div class=""flex flex-wrap"">{children}</div>"
Animated Counter Statistics Section,"DESCRIPTION:
A responsive statistics section that displays animated counter numbers and statistics with a brief description. The section should be divided into equal columns, with each column containing a statistic.
COMPONENTS:
- StatisticCard: A standalone component that displays a single statistic.
HTML:
<section class=""container mx-auto p-4 pt-6 mb-4""><h2 class=""text-3xl font-bold mb-4"">Statistics</h2><div class=""flex flex-wrap -mx-4""><StatisticCard/><StatisticCard/><StatisticCard/><!-- Add more StatisticCard components as needed --></div></section>
COMPONENT HTML:
StatisticCard:
<div class=""w-full md:w-1/3 xl:w-1/4 p-4""><p class=""text-4xl font-bold"">{statistic_number}</p><p class=""text-gray-600"">{statistic_description}</p></div>"
Product forums,"DESCRIPTION:
The UI should display a list of forum topics with their titles, descriptions, and metadata (e.g., number of replies, views). The UI should be responsive, accessible, and easy to navigate.
COMPONENTS:
- ForumTopicList: A component that takes children, containing a list of `ForumTopicCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Product Forums</h1><ForumTopicList><!-- Forum topic cards will be inserted here --></ForumTopicList></div>
COMPONENT HTML:
ForumTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Checkout process steps,"DESCRIPTION:
The UI should be a sequential list of steps to complete the checkout process. Each step should have a title, a brief description, and a visual indicator to show progression.
COMPONENTS:
- CheckoutStep: (standalone) - represents a single step in the checkout process
- CheckoutSteps: (takes children) - contains a list of `CheckoutStep` components
HTML:
<nav aria-label=""Checkout process""><CheckoutSteps><CheckoutStep/><CheckoutStep/><CheckoutStep/></CheckoutSteps></nav>
COMPONENT HTML:
CheckoutStep:
<div class=""flex items-center mb-4""><div class=""w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center mr-4""><span>{step_number}</span></div><div class=""flex-1""><h5 class=""uppercase text-lg"">{step_title}</h5><p class=""text-sm"">{step_description}</p></div></div>
CheckoutSteps:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Real-time Comment and Discussion Forum,"DESCRIPTION:
The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.
COMPONENTS:
- CommentItem: A standalone component that displays a single comment.
- CommentForm: A standalone component that allows users to post a new comment.
- CommentList: A component that takes children (multiple `CommentItem` components) and displays them in a list.
- ForumHeader: A standalone component that displays the title of the forum.
- ForumContainer: A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.
HTML:
<div class=""max-w-md mx-auto p-4""><ForumHeader/><ForumContainer><CommentList><CommentItem/><CommentItem/><!-- Add more CommentItem components here --></CommentList><CommentForm/></ForumContainer></div>
COMPONENT HTML:
CommentItem:
<div class=""flex gap-2 py-2 border-b border-gray-200""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-8 h-8 rounded-full""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-gray-600"">{comment_text}</p></div></div>
CommentForm:
<form class=""flex flex-col gap-2""><input type=""text"" placeholder=""Write a comment..."" class=""w-full p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Post Comment </button></form>
CommentList:
<ul class=""list-none p-0"">{children}</ul>
ForumHeader:
<h1 class=""text-2xl font-bold"">{forum_title}</h1>
ForumContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>"
Trending topics display,"DESCRIPTION:
A responsive, mobile-first trending topics display that showcases a list of trending topics with their corresponding counts. The UI should be clean, simple, and easy to navigate.
COMPONENTS:
- TrendingTopic: standalone component that displays a single trending topic
- TopicCount: standalone component that displays the count of a topic
HTML:
<div class=""mx-auto max-w-md p-4 pt-6 lg:max-w-lg""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><ul class=""divide-y divide-gray-200""><TrendingTopic/><TrendingTopic/><!-- More trending topics here --></ul></div>
COMPONENT HTML:
TrendingTopic:
<li class=""py-4""><a href=""#"" class=""text-gray-900 hover:text-gray-600 transition duration-300 ease-in-out""><span class=""text-lg"">{topic_name}</span><TopicCount/></a></li>
TopicCount:
<span class=""text-gray-600 text-sm"">{topic_count} tweets</span>"
Trending topics display,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible list of trending topics, with each topic displaying a title, a brief description, and a popularity indicator (e.g., number of tweets). The list should be organized in a grid layout on larger screens and a vertical list on smaller screens.
COMPONENTS:
- TrendingTopicList: (takes children): a container for the list of trending topics
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- trending topics will be inserted here --></TrendingTopicList></div>
COMPONENT HTML:
TrendingTopicList:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Responsive Filtering and Sorting,"DESCRIPTION:
A responsive filtering and sorting UI that adapts to different screen sizes, with a search bar, a filtering section, a sorting section, and a list of items.
COMPONENTS:
- SearchBar: (standalone) - a search bar component
- FilterSection: (takes children) - a filtering section component that takes filter options as children
- FilterOption: (standalone) - a single filter option component
- SortingSection: (takes children) - a sorting section component that takes sorting options as children
- SortingOption: (standalone) - a single sorting option component
- ItemList: (takes children) - a list of items component that takes individual items as children
- Item: (standalone) - a single item component
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SearchBar/><div class=""flex flex-wrap -mx-4""><FilterSection><FilterOption/><FilterOption/></FilterSection><SortingSection><SortingOption/><SortingOption/></SortingSection></div><ItemList><Item/><Item/></ItemList></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search...""/>
FilterSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pr-6"">{children}</div>
FilterOption:
<label class=""block text-gray-600""><input type=""checkbox"" class=""mr-2""/>{filter_name}</label>
SortingSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pl-6"">{children}</div>
SortingOption:
<button class=""bg-white hover:bg-gray-100 text-gray-600 py-2 px-4 border border-gray-300 rounded"">{sorting_option_name}</button>
ItemList:
<ul class=""list-none p-0 m-0"">{children}</ul>
Item:
<li class=""py-4 px-4 border-b border-gray-200""><h2 class=""text-lg"">{item_name}</h2><p>{item_description}</p></li>"
Product feedback,"DESCRIPTION:
The UI should display a product feedback section with a rating system, a comment box, and a ""Submit"" button.
COMPONENTS:
- RatingStars: A standalone component that displays a rating system with 5 stars.
- CommentBox: A standalone component that contains a text area for users to leave comments.
- SubmitButton: A standalone component that displays a submit button.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Leave Your Feedback</h2><RatingStars/><CommentBox/><SubmitButton/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex mb-4"">{Array(5).fill(0).map((_, i) =>( <i key={i} class={`fas fa-star ${i < rating ? 'text-yellow-400' : 'text-gray-400'}`}/>))} <span class=""ml-2 text-gray-600"">{rating}/ 5</span></div>
CommentBox:
<textarea class=""w-full p-4 mb-4 border border-gray-300 rounded"" placeholder=""Leave your comment..."" rows={5}></textarea>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Secure payment information input,"DESCRIPTION:
The UI should be a secure payment information input section with input fields for card number, expiration date, security code, and a button to submit the payment information.
COMPONENTS:
- CardNumberInput: A standalone component for inputting the card number.
- ExpirationDateInput: A standalone component for inputting the expiration date.
- SecurityCodeInput: A standalone component for inputting the security code.
- SubmitButton: A standalone component for submitting the payment information.
- PaymentInfoForm: A component that takes children to wrap all the input fields and the submit button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><PaymentInfoForm><CardNumberInput/><ExpirationDateInput/><SecurityCodeInput/><SubmitButton/></PaymentInfoForm></div>
COMPONENT HTML:
CardNumberInput:
<div class=""mb-4""><label htmlFor=""card-number"" class=""block mb-2"">Card Number</label><input type=""text"" id=""card-number"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
ExpirationDateInput:
<div class=""mb-4""><label htmlFor=""expiration-date"" class=""block mb-2"">Expiration Date</label><input type=""text"" id=""expiration-date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
SecurityCodeInput:
<div class=""mb-4""><label htmlFor=""security-code"" class=""block mb-2"">Security Code</label><input type=""text"" id=""security-code"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>
PaymentInfoForm:
<form>{children}</form>"
Secure payment information input,"DESCRIPTION:
The UI should be a secure payment information input form, responsive and accessible, with clear labels and placeholders, and enough space for the user to input their payment details.
COMPONENTS:
- CardNumberInput: (standalone): a text input for the card number
- ExpirationDateInput: (standalone): a text input for the expiration date
- CvcInput: (standalone): a text input for the CVC code
- PaymentForm: (takes children): a container for the payment input fields
HTML:
<form class=""max-w-md mx-auto p-4 mt-4 mb-4 bg-white rounded shadow-md""><h2 class=""text-xl font-bold mb-4"">Secure Payment Information</h2><PaymentForm><CardNumberInput/><ExpirationDateInput/><CvcInput/></PaymentForm><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
COMPONENT HTML:
CardNumberInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cardNumber"" placeholder=""Card Number"" required/>
ExpirationDateInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""expirationDate"" placeholder=""MM/YY"" required/>
CvcInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cvc"" placeholder=""CVC"" required/>
PaymentForm:
<div class=""flex flex-wrap -mx-3 mb-6"">{children}</div>"
Email signature editor with formatting options,"DESCRIPTION:
The UI should be a responsive, mobile-first email signature editor with formatting options. The editor should have a toolbar with options to format the text, such as bold, italic, underline, and font size. The editor should also have a preview section to display the formatted text. The UI should be accessible and SEO-friendly.
COMPONENTS:
- EditorToolbar: A standalone component that contains the formatting options (bold, italic, underline, font size).
- EditorInput: A standalone component that is the input field for the email signature text.
- PreviewArea: A standalone component that displays the formatted text.
- FormattingOption: A component that takes children, representing an individual formatting option (e.g. bold, italic, etc.).
HTML:
<div class=""flex flex-col w-full h-screen p-4""><EditorToolbar/><EditorInput/><PreviewArea/></div>
COMPONENT HTML:
EditorToolbar:
<div class=""flex justify-between mb-2""><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Bold</button></FormattingOption><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Italic</button></FormattingOption><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Underline</button></FormattingOption><FormattingOption><select class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1""><option value=""12px"">12px</option><option value=""14px"">14px</option><option value=""16px"">16px</option></select></FormattingOption></div>
EditorInput:
<textarea class=""w-full p-2 h-48 bg-gray-200 rounded"" placeholder=""Enter your email signature...""></textarea>
PreviewArea:
<div class=""bg-gray-100 p-4 rounded"">{signaturePreview}</div>
FormattingOption:
<div class=""mr-2"">{children}</div>"
Category Navigation,"DESCRIPTION:
The UI should be a responsive navigation menu that displays a list of categories. On mobile devices, the menu should be hidden by default and toggled by a button. On larger screens, the menu should be always visible and horizontally aligned.
COMPONENTS:
- CategoryNavMenu: a component that takes children, representing the entire navigation menu.
HTML:
<nav class=""flex justify-center md:flex-row flex-wrap md:flex-nowrap""><button class=""md:hidden"" id=""nav-toggle"">Toggle Navigation</button><CategoryNavMenu><!-- category items will be rendered here --></CategoryNavMenu></nav>
COMPONENT HTML:
CategoryNavMenu:
<ul class=""flex flex-wrap justify-center md:flex-row"">{children}</ul>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
JSON Data Visualization,"DESCRIPTION:
The UI should display a hierarchical representation of the JSON data, with collapsible sections for objects and arrays. Each key-value pair should be displayed with the key on the left and the value on the right. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- JsonViewer: The top-level component that renders the JSON data visualization. This component takes children.
- JsonObject: Renders a single JSON object with its key-value pairs. This component takes children.
- JsonArray: Renders a single JSON array with its elements. This component takes children.
- KeyValue: Renders a single key-value pair. This component is standalone.
HTML:
<div class=""container mx-auto p-4""><JsonViewer><!-- JSON data visualization will be rendered here --></JsonViewer></div>
COMPONENT HTML:
JsonViewer:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>
JsonObject:
<div class=""flex flex-wrap justify-between mb-2""><span class=""text-gray-600"">{key}</span><div class=""ml-2"">{children}</div></div>
JsonArray:
<ul class=""list-none mb-2"">{children}</ul>
KeyValue:
<div class=""flex flex-wrap justify-between mb-2""><span class=""text-gray-600"">{key}</span><span class=""ml-2"">{value}</span></div>"
Time picker dropdown,"DESCRIPTION:
A dropdown time picker with hours and minutes selection.
COMPONENTS:
- TimePickerDropdown: a standalone component that renders a dropdown time picker.
- TimeOption: a component that takes children, representing a single time option in the dropdown.
HTML:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded"">Select Time
</button><ul class=""absolute z-10 hidden md:block""><TimePickerDropdown/></ul></div>
COMPONENT HTML:
TimePickerDropdown:
<ul class=""bg-white border border-gray-200 rounded"">{timeOptions}</ul>
TimeOption:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Game Tiles and Grids,"DESCRIPTION:
The UI should display a grid of game tiles. Each tile should have a unique background color, a number indicating the tile's value, and an optional ""locked"" indicator.
COMPONENTS:
- GameGrid: A standalone component that displays a grid of game tiles.
- GameTile: A component that takes children (the tile's value and optional ""locked"" indicator) and displays a single game tile.
HTML:
<div class=""grid grid-cols-4 gap-4""><GameGrid/></div>
COMPONENT HTML:
GameGrid:
<div class=""flex flex-wrap justify-center"">{/* an 4x4 grid of GameTile components */ } <GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/></div>
GameTile:
<div class={`h-16 w-16 bg-${tile_color} rounded-md flex justify-center items-center`}><p class=""text-lg"">{tile_value}</p>{locked && <span class=""text-xs"">(Locked)</span>} {children}</div>"
Audio filters,"DESCRIPTION:
The UI should be a horizontal list of audio filters, with each filter represented by a button. The buttons should be responsive, adapting to different screen sizes, and accessible, with clear labels and descriptive text. The UI should be simple and easy to use.
COMPONENTS:
- AudioFilterButton: a standalone component representing a single audio filter button.
- AudioFiltersList: a component that takes children, containing the list of audio filter buttons.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Audio Filters</h2><AudioFiltersList><AudioFilterButton/><AudioFilterButton/><AudioFilterButton/><!-- Add more AudioFilterButton components as needed --></AudioFiltersList></div>
COMPONENT HTML:
AudioFilterButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">{filter_name}</button>
AudioFiltersList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Product features,"DESCRIPTION:
The UI should display a list of product features in a clean and responsive layout, with a clear hierarchy of information and sufficient whitespace. Each feature should have an icon, a heading, and a short description.
COMPONENTS:
- FeatureItem: A standalone component that represents a single feature.
- FeaturesList: A component that takes children and represents the list of features.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl mb-4"">Product Features</h2><FeaturesList><FeatureItem/><FeatureItem/><FeatureItem/></FeaturesList></div>
COMPONENT HTML:
FeatureItem:
<div class=""flex items-center mb-4""><i class=""far fa-{feature_icon} text-2xl mr-2"" aria-hidden=""true""></i><div><h3 class=""text-lg"">{feature_heading}</h3><p class=""text-gray-600"">{feature_description}</p></div></div>
FeaturesList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Small pop-up box that provides additional information when users hover over an element,"DESCRIPTION:
A small, rectangular box with a subtle background color and rounded corners, appearing on hover over a specific element. The box will contain a short text providing additional information.
COMPONENTS:
- TooltipComponent: (standalone): The entire tooltip box, containing the text.
- TriggerElement: (takes children): The element that triggers the tooltip to appear on hover, e.g., a button or a link. Its child is the text or element that the user will hover over.
HTML:
<TriggerElement><!-- the element that triggers the tooltip -->Hover over me!
<TooltipComponent/></TriggerElement>
COMPONENT HTML:
TooltipComponent:
<div class=""bg-gray-100 rounded-md p-2 text-sm text-gray-600 absolute top-full left-1/2 -translate-x-1/2 hidden group-hover:block"">{tooltip_text}</div>
TriggerElement:
<span class=""cursor-pointer relative"">{children}</span>"
Pop-up text providing additional information when users hover over an element,"DESCRIPTION:
A small, rounded rectangle with a subtle shadow that appears when a user hovers over a specific element, displaying additional information related to that element. The pop-up text should be easily readable and disappear when the user stops hovering.
COMPONENTS:
- Tooltip: a standalone component that wraps the additional information.
HTML:
<span class=""hover:cursor-help"" onMouseOver={(e) =>{/* show tooltip */ }}><!-- hoverable element --><Tooltip/><!-- inserts the tooltip component --><!-- hoverable element's content --></span>
COMPONENT HTML:
Tooltip:
<div class=""absolute bg-white rounded-sm p-1 text-xs text-gray-600 shadow-md"">{tooltip_text}</div>"
Floating action button,"DESCRIPTION:
The UI should be a circular floating action button that appears in the bottom right corner of the screen. It should have a icon (e.g. a plus sign) and a subtle animation when hovered.
COMPONENTS:
- FloatingActionButton: A standalone component that renders a circular button with an icon.
HTML:
<div class=""fixed bottom-0 right-0 mb-4 mr-4""><FloatingActionButton/></div>
COMPONENT HTML:
FloatingActionButton:
<button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded-full shadow-md""><i class=""fas fa-plus""></i></button>"
Separators,"DESCRIPTION:
The UI should consist of horizontal separator lines and vertical separator lines, used to divide sections or contents visually on a web page. These separators can enhance the visual organization of content and improve readability.
COMPONENTS:
- HorizontalSeparator: (Standalone): A horizontal line used to separate content in layouts horizontally.
- VerticalSeparator: (Standalone): A vertical line used to separate content in layouts vertically.
HTML:
<div class=""p-4""><div class=""mb-4""><p>Content above the horizontal separator</p><HorizontalSeparator/><p>Content below the horizontal separator</p></div><div class=""flex items-center""><p>Content to the left of the vertical separator</p><VerticalSeparator/><p>Content to the right of the vertical separator</p></div></div>
COMPONENT HTML:
HorizontalSeparator:
<!-- Horizontal line as a visual separator --><hr class=""border-t border-gray-300 my-4""/>
VerticalSeparator:
<!-- Vertical line as a visual separator --><div class=""border-l border-gray-300 mx-4 h-full""></div>"
Thread controls,"DESCRIPTION:
The UI should be a compact thread control with buttons to reply, edit, and delete a comment or post. It should be responsive and accessible.
COMPONENTS:
- ThreadControl: standalone component that contains all thread control buttons.
- ReplyButton: standalone component that represents the reply button.
- EditButton: standalone component that represents the edit button.
- DeleteButton: standalone component that represents the delete button.
HTML:
<div class=""flex justify-end mb-4""><ThreadControl/></div>
COMPONENT HTML:
ThreadControl:
<div class=""flex items-center space-x-2""><ReplyButton/><EditButton/><DeleteButton/></div>
ReplyButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Reply</button>
EditButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Edit</button>
DeleteButton:
<button class=""bg-red-100 hover:bg-red-200 text-red-800 font-semibold py-2 px-4 border border-red-400 rounded"">Delete</button>"
Highlighted box drawing attention to important information or announcements,"DESCRIPTION:
The UI should feature a highlighted box that stands out visually from the rest of the content, meant to draw attention to important information or announcements. This box should include a title and the body text. The design should be noticeable but not overwhelming and should be easily distinguishable due to its background color, padding, and possibly a border.
COMPONENTS:
- HighlightedBox: (Standalone)**: This component will contain the major elements of the highlighted information box, including a title and body text.
HTML:
<div class=""container mx-auto p-4""><HighlightedBox/></div>
COMPONENT HTML:
HighlightedBox:
<div role=""alert"" class=""bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4""><h2 class=""font-bold"">Important Announcement</h2><p>{announcement_body}</p></div>"
Product Description Text,"DESCRIPTION:
The UI should display a product description text, which is a brief summary of the product's features and benefits. The text should be readable on various devices and should be accessible to screen readers.
COMPONENTS:
- ProductDescriptionText: standalone component that renders the product description text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductDescriptionText/></div>
COMPONENT HTML:
ProductDescriptionText:
<p class=""text-lg leading-relaxed"">{product_description_text}</p>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with each thread showing its title, a brief description, and buttons to unfavorite or unwatch.
COMPONENTS:
- ThreadList: (takes children) - A container for the list of thread cards.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Favorites and Watched Threads</h1><ThreadList><!-- thread cards will be inserted here --></ThreadList></div>
COMPONENT HTML:
ThreadList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
Header Search Button,"DESCRIPTION:
A navigation header with a search button that is responsive, mobile-first, and accessible.
COMPONENTS:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
HTML:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
COMPONENT HTML:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Quote controls,"DESCRIPTION:
A quote control should display a quote with an author, and possibly an image of the author. The quote should be the main focus, with the author's name and image as secondary information. The component should be responsive and accessible.
COMPONENTS:
- QuoteControl: standalone component that contains a quote, author, and optional author image.
- QuoteText: standalone component that displays the quote text.
- AuthorInfo: standalone component that displays the author's name and optional image.
HTML:
<section class=""max-w-md mx-auto p-4""><QuoteControl/></section>
COMPONENT HTML:
QuoteControl:
<div class=""flex flex-col lg:flex-row items-center mb-8""><AuthorInfo/><QuoteText/></div>
QuoteText:
<blockquote class=""text-lg font-serif mb-4"">{quote_text}</blockquote>
AuthorInfo:
<div class=""flex flex-col lg:flex-row items-center"">{author_image_url && <img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full mr-4""/>} <cite class=""text-sm"">{author_name}</cite></div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should be a list of article teasers, displaying the title, a brief summary, and a link to read more. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.
COMPONENTS:
- ArticleTeaser: (standalone): A single article teaser, containing a title, summary, and read more link.
- PostList: (takes children): A list of article teasers.
HTML:
<div class=""container mx-auto p-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components here --></PostList></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""md:flex mb-4""><h2 class=""text-lg font-bold"">{article_title}</h2><p class=""text-gray-600"">{article_summary}</p><a href=""{article_link}"" class=""text-blue-600 hover:text-blue-900"">Read more</a></div>
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Post List: Teasers for latest articles,"DESCRIPTION:
A list of teaser articles, with a title, image, and short summary. Should be responsive and look good on desktop and mobile.
COMPONENTS:
- PostTeaser: (standalone) - a single post teaser component
- PostList: (takes children) - the container for the list of post teasers
HTML:
<div class=""max-w-md mx-auto p-4""><h2>Latest Articles</h2><PostList><PostTeaser/><PostTeaser/><PostTeaser/></PostList></div>
COMPONENT HTML:
PostTeaser:
<article class=""mb-4 p-4 border border-gray-200 rounded""><img src={image_url} alt={post_title} class=""w-full h-48 object-cover rounded-t""/><h3 class=""text-lg font-bold"">{post_title}</h3><p class=""text-sm"">{post_summary}</p><a href={post_url} class=""text-indigo-600 hover:text-indigo-900"">Read more</a></article>
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote with a quote text, an author name, and an optional occupation and organization. The quote text should be displayed prominently, and the author information should be displayed below the quote text.
COMPONENTS:
- TestimonialQuote: Standalone component that displays the quote text.
- AuthorInfo: Component that displays the author name, occupation, and organization. Takes children.
- AuthorName: Standalone component that displays the author name.
- AuthorDetails: Standalone component that displays the occupation and organization.
HTML:
<div class=""flex flex-col items-center""><TestimonialQuote/><AuthorInfo><AuthorName/><AuthorDetails/></AuthorInfo></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg font-serif italic mb-4"">{quote_text}</blockquote>
AuthorInfo:
<div class=""flex items-center mb-2"">{children}</div>
AuthorName:
<p class=""text-base font-bold"">{author_name}</p>
AuthorDetails:
<p class=""text-sm text-gray-600"">{occupation} at {organization}</p>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote text with a LARGE font size, light color text on a darker background, and have some padding around it to make it stand out.
COMPONENTS:
- TestimonialQuoteText: standalone component that displays the testimonial quote text.
HTML:
<div class=""bg-neutral-800 p-4 mb-4""><TestimonialQuoteText/></div>
COMPONENT HTML:
TestimonialQuoteText:
<quote class=""text-3xl font-bold text-white"">{testimonial_text}</quote>"
Image captions,"DESCRIPTION:
The UI should display an image with a caption below it. The caption should be centered and have a subtle background color to differentiate it from the rest of the content.
COMPONENTS:
- ImageCaption: component (standalone) - This component will display an image with a caption below it.
- Caption: component (takes children) - This component will render the caption text.
HTML:
<div class=""max-w-md mx-auto""><ImageCaption/></div>
COMPONENT HTML:
ImageCaption:
<div class=""flex justify-center""><img src={imageSource} alt={imageAlt} class=""w-full max-w-md object-cover rounded-t-md""/><Caption>{captionText}</Caption></div>
Caption:
<div class=""bg-gray-100 p-2 text-center"">{children}</div>"
Call-to-Action: Prominent button or link,"DESCRIPTION:
A prominent call-to-action (CTA) button or link that stands out on the page, encouraging users to take a specific action.
COMPONENTS:
- CallToActionButton: Standalone component that displays a prominent CTA button.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:pt-12""><!-- Hero section content here --><CallToActionButton/><!-- Additional content or footer here --></div>
COMPONENT HTML:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Call-to-action button with animation effects,"DESCRIPTION:
The UI should be a responsive call-to-action (CTA) button with animation effects that grab the user's attention. The button should be prominent on both light and dark backgrounds, have sufficient contrast for accessibility, and be large enough for mobile devices.
COMPONENTS:
- AnimatedCTAButton: (standalone): A button component with animation effects.
HTML:
<div class=""flex justify-center""><AnimatedCTAButton/></div>
COMPONENT HTML:
AnimatedCTAButton:
<button class=""inline-block transition duration-300 ease-in-out hover:scale-110 hover:text-white hover:bg-orange-500 bg-orange-400 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Callout Box Padding,"DESCRIPTION:
The UI should feature a Callout Box that draws attention to specific content. This box should be visually distinct, likely using padding, a border, and perhaps a different background color to stand out from the rest of the content.
COMPONENTS:
- CalloutBox: A standalone component that enhances the visibility of its content through styling.
HTML:
<div class=""main-content""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-2 border-gray-200 bg-gray-50 rounded-md shadow-sm""><!-- Content inside the Callout Box --><p>{calloutMessage}</p></div>"
Form divided into multiple steps or sections for a streamlined user experience,"DESCRIPTION:
The UI should be a multi-step form divided into sections for a streamlined user experience. Each section should have a heading, and the user should be able to navigate through the sections using ""Next"" and ""Previous"" buttons.
COMPONENTS:
- StepIndicator: A standalone component that displays the current step and total steps.
- FormSection: A component that takes children, which represents a single section of the form.
- FormNav: A standalone component that contains the ""Next"" and ""Previous"" buttons.
- FormContent: A component that takes children, which represents the content of a single form section.
HTML:
<!-- The outer container for the form --><div class=""max-w-md mx-auto p-4 pt-6""><!-- The step indicator --><StepIndicator/><!-- The form sections --><FormSection><FormContent><!-- Content of the first form section --></FormContent></FormSection><FormSection><FormContent><!-- Content of the second form section --></FormContent></FormSection><!-- Add more form sections here --><!-- The form navigation --><FormNav/></div>
COMPONENT HTML:
StepIndicator:
<!-- The step indicator display --><div class=""flex justify-center mb-4""><p>Step {current_step} of {total_steps}</p></div>
FormSection:
<!-- A single form section --><div class=""mb-4""><h2>{section_title}</h2>{children}</div>
FormNav:
<!-- The form navigation buttons --><div class=""flex justify-between""><button class=""btn btn-secondary"" disabled={is_first_step}>Previous</button><button class=""btn btn-primary"">Next</button></div>
FormContent:
<!-- The content of a single form section --><div>{children}</div>"
Company Address Info,"DESCRIPTION:
A compact, responsive section displaying a company's address information, including street address, city, state, zip, phone number, and email address.
COMPONENTS:
- AddressInfo: standalone component
- AddressLine: takes children
- ContactInfo: takes children
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><AddressInfo/></div>
COMPONENT HTML:
AddressInfo:
<div class=""flex flex-wrap mb-4""><AddressLine>{street_address}</AddressLine><AddressLine>{city}, {state} {zip}</AddressLine><ContactInfo><a href={`tel:${phone_number}`} class=""text-indigo-600 hover:text-indigo-900"">{phone_number} </a><a href={`mailto:${email}`} class=""text-indigo-600 hover:text-indigo-900"">{email} </a></ContactInfo></div>
AddressLine:
<p class=""text-gray-600"">{children}</p>
ContactInfo:
<div class=""flex flex-wrap"">{children}</div>"
Company Address Info,"DESCRIPTION:
The UI should display a company's address information in a clean and easy-to-read format. The address should be divided into separate lines for street address, city, state, and zip code. The UI should be responsive and adaptable to different screen sizes.
COMPONENTS:
- AddressInfo: a standalone component that displays the company's address information.
- AddressLine: a component that displays a single line of the address (e.g., street address, city, state, zip code). This component takes children.
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><AddressInfo/></div>
COMPONENT HTML:
AddressInfo:
<div class=""mb-4""><AddressLine>{street_address}</AddressLine><AddressLine>{city}, {state} {zip_code}</AddressLine></div>
AddressLine:
<p class=""text-lg"">{children}</p>"
Company Address Info,"DESCRIPTION:
The UI should display the company's address information in a compact and readable format, including the company name, street address, city, state, zip code, and phone number. The design should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CompanyAddressInfo: standalone component that displays the company address information
- AddressDetails: standalone component that displays the street address, city, state, and zip code
- PhoneNumber: standalone component that displays the company phone number
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><h2 class=""text-lg font-bold mb-2"">Company Address</h2><CompanyAddressInfo/></div>
COMPONENT HTML:
CompanyAddressInfo:
<div class=""flex-1 md:mr-4""><h3 class=""text-base font-bold"">{company_name}</h3><AddressDetails/><PhoneNumber/></div>
AddressDetails:
<div><p>{street_address}</p><p>{city}, {state} {zip_code}</p></div>
PhoneNumber:
<p>Phone: {phone_number}</p>"
Call to Action,"DESCRIPTION:
The UI should be a prominent call-to-action (CTA) button that stands out on the page. It should be centered horizontally on the page and have a bold, contrasting color scheme to grab the user's attention.
COMPONENTS:
- CallToActionButton: (standalone): A single button component that renders a CTA.
HTML:
<section class=""flex justify-center mt-12""><CallToActionButton/></section>
COMPONENT HTML:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Call to Action,"DESCRIPTION:
The UI should be a prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- CallToActionButton: (standalone): The primary CTA button component.
HTML:
<div class=""max-w-md mx-auto p-4""><CallToActionButton/></div>
COMPONENT HTML:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Navigation menu with mailbox folders and labels,"DESCRIPTION:
The UI should be a navigation menu with folder and label categories, each containing a list of items. The menu should be responsive, mobile-first, and accessible. It should have a clean and simple design, with clear typography and sufficient whitespace.
COMPONENTS:
- MailboxNavItem: Standalone component representing a single navigation item (e.g., folder or label).
- MailboxNavList: Component that contains a list of `MailboxNavItem`s, takes children.
- MailboxNav: Top-level component that contains the entire navigation menu, takes children.
HTML:
<nav class=""max-w-md mx-auto p-4 lg:p-6""><ul class=""flex flex-col lg:flex-row lg:items-center lg:justify-between""><MailboxNavList><MailboxNavItem/><!-- more navigation items --></MailboxNavList></ul><MailboxNav><MailboxNavList><MailboxNavItem/><!-- more navigation items --></MailboxNavList></MailboxNav></nav>
COMPONENT HTML:
MailboxNavItem:
<li class=""py-2 lg:py-4""><a href=""{href}"" class=""block py-2 px-4"">{text}</a></li>
MailboxNavList:
<ul class=""flex flex-col lg:flex-row lg:items-center lg:justify-between"">{children}</ul>
MailboxNav:
<nav class=""max-w-md mx-auto p-4 lg:p-6"">{children}</nav>"
Image uploader with progress,"DESCRIPTION:
A simple image uploader with a progress bar that shows the upload progress. The UI should be responsive and accessible.
COMPONENTS:
- ImageUploader: A standalone component that contains the upload input, progress bar, and upload button.
- ProgressBar: A component that takes children (the progress percentage) and displays a progress bar.
- UploadButton: A standalone component that displays an upload button.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ImageUploader/></div>
COMPONENT HTML:
ImageUploader:
<div class=""flex flex-col items-center""><input type=""file"" id=""file-input"" class=""hidden""/><label for=""file-input"" class=""cursor-pointer""><UploadButton/></label><ProgressBar>{progressPercentage}%</ProgressBar><p class=""text-sm text-gray-600"">{uploadStatus}</p></div>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-2""><div class=""bg-blue-600 h-2"" style={{ width: `${children}%` }}></div></div>
UploadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Image</button>"
Nested Comment Threads,"DESCRIPTION:
The UI should display a nested comment thread with multiple levels of nesting. Each comment should have a username, timestamp, and comment text. The comments should be displayed in a threaded layout, with replies indented underneath their parent comments. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CommentThread: The top-level component that displays a nested comment thread. Takes children.
- Comment: Displays a single comment with a username, timestamp, and comment text. Takes children.
- CommentReply: Displays a reply to a comment, with a username, timestamp, and comment text. Takes children.
HTML:
<CommentThread><Comment><!-- comment content --><CommentReply><!-- reply content --><CommentReply><!-- nested reply content --></CommentReply></CommentReply></Comment><Comment><!-- comment content --></Comment></CommentThread>
COMPONENT HTML:
CommentThread:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4"">{children}</div>
Comment:
<div class=""flex items-center mb-4""><img src={user_avatar} alt={username} class=""h-8 w-8 rounded-full mr-2""/><div><p class=""text-sm"">{username}</p><p class=""text-xs text-gray-600"">{timestamp}</p></div><p class=""text-sm"">{comment_text}</p><div class=""ml-10"">{children} </div></div>
CommentReply:
<div class=""ml-10 mb-4""><img src={user_avatar} alt={username} class=""h-8 w-8 rounded-full mr-2""/><div><p class=""text-sm"">{username}</p><p class=""text-xs text-gray-600"">{timestamp}</p></div><p class=""text-sm"">{comment_text}</p><div class=""ml-10"">{children} </div></div>"
Error message display,"DESCRIPTION:
The UI should be a simple error message display that shows an error message in a red box with a clear and concise message.
COMPONENTS:
- ErrorMessageDisplay: (standalone) - displays an error message
- ErrorBox: (takes children) - a red box that contains the error message
HTML:
<ErrorMessageDisplay/>
COMPONENT HTML:
ErrorMessageDisplay:
<div class=""bg-red-500 text-white p-4 rounded""><ErrorBox>{errorMessage}</ErrorBox></div>
ErrorBox:
<p class=""text-lg"">{children}</p>"
Game Information and Stats,"DESCRIPTION:
The UI should display game information and stats in a clean and visually appealing way, with a mobile-first design. It should include the game's title, description, and stats such as playtime, players online, and ratings.
COMPONENTS:
- GameInfo: standalone component to display game title and description
- StatCard: standalone component to display a single stat (e.g. playtime, players online, ratings)
- StatSection: takes children component to display multiple stats
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><GameInfo/><StatSection><StatCard/><StatCard/><StatCard/></StatSection></section>
COMPONENT HTML:
GameInfo:
<div class=""mb-4""><h2 class=""text-2xl font-bold"">{game_title}</h2><p class=""text-gray-600"">{game_description}</p></div>
StatCard:
<div class=""flex items-center mb-4""><span class=""text-3xl font-bold"">{stat_value}</span><p class=""text-gray-600"">{stat_label}</p></div>
StatSection:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display a list of auctions, with each auction showing its title, current price, bidding information, and a ""Place Bid"" button. The bidding information should include the current highest bidder and the number of bids. The UI should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- AuctionCard: A standalone component representing a single auction.
- BidInfo: A standalone component displaying the current highest bidder and number of bids.
- PlaceBidButton: A standalone component for the ""Place Bid"" button.
- AuctionList: A component that takes children, displaying a list of auctions.
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionList><AuctionCard/><AuctionCard/><!-- Add more auction cards here --></AuctionList></div>
COMPONENT HTML:
AuctionCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{auction_title}</h2><p class=""text-gray-600"">{auction_description}</p><BidInfo/><PlaceBidButton/></div>
BidInfo:
<p class=""text-sm text-gray-600 mb-2"">Current bid: {current_bid} by {highest_bidder_name} ({num_bids} bids)</p>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>
AuctionList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display a bidding/auction function with a countdown timer, a current bid indicator, a ""Place Bid"" button, and a list of previous bids. The design should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- AuctionTimer: standalone component to display the countdown timer
- CurrentBidIndicator: standalone component to display the current bid
- PlaceBidButton: standalone component for the ""Place Bid"" button
- BidHistoryList: component that takes children to display the list of previous bids
- AuctionContainer: component that takes children to wrap the entire bidding/auction function UI
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionContainer><AuctionTimer/><CurrentBidIndicator/><PlaceBidButton/><BidHistoryList><!-- list of previous bids will be rendered here --></BidHistoryList></AuctionContainer></div>
COMPONENT HTML:
AuctionTimer:
<div class=""text-2xl font-bold"">{time_left} seconds left</div>
CurrentBidIndicator:
<div class=""text-lg"">{current_bid} by {highest_bidder}</div>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>
BidHistoryList:
<ul>{children}</ul>
AuctionContainer:
<div class=""shadow-md p-4 bg-white rounded"">{children}</div>"
Button for submitting a new post or comment,"DESCRIPTION:
A primary button with a submit icon, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- SubmitButton: standalone component
HTML:
<div class=""flex justify-center mb-4""><SubmitButton/></div>
COMPONENT HTML:
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2"" aria-hidden=""true""></i>Submit</button>"
Header Logo Image,"DESCRIPTION:
The UI should display a logo image in the header section of the website. The logo image should be responsive and centered within its container.
COMPONENTS:
- HeaderLogo: A standalone component that displays a logo image.
HTML:
<header class=""mx-auto p-4""><HeaderLogo/></header>
COMPONENT HTML:
HeaderLogo:
<img src={logo_url} alt=""Logo"" class=""h-8 md:h-12 w-auto mx-auto""/>"
Stepper control,"DESCRIPTION:
The Stepper UI is a navigation component typically used in forms or setup processes to indicate the current step and allow users to move through a series of steps. It usually consists of numbered steps connected by lines, with the current step highlighted or differentiated. Each step may have a title and the current step might show additional details or actions.
COMPONENTS:
- StepCircle: (Standalone): Represents a circle with a number inside, used to indicate the step number.
- StepConnector: (Standalone): A line connecting two step circles to show the sequence.
- StepLabel: (Standalone): A label that displays the title of each step, usually placed below the step circle.
HTML:
<div class=""flex justify-between items-center p-4""><div class=""flex items-center""><StepCircle/><StepConnector/><StepCircle/><StepConnector/><StepCircle/></div><div class=""flex justify-between w-full mt-2""><StepLabel/><StepLabel/><StepLabel/></div></div>
COMPONENT HTML:
StepCircle:
<div class=""w-8 h-8 rounded-full bg-blue-500 text-white flex justify-center items-center"">{stepNumber} </div>
StepConnector:
<div class=""flex-auto border-t-2 border-gray-300""></div>
StepLabel:
<div class=""text-center text-sm"">{stepTitle} </div>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field and a search button. The search bar should be responsive, taking up the full width of the screen on mobile devices and adding some margins on larger screens. The input field should have a placeholder text and the search button should have an icon of a magnifying glass.
COMPONENTS:
- SearchBar: standalone component that contains the input field and search button.
- SearchInput: standalone component that is the input field.
- SearchButton: standalone component that is the search button.
HTML:
<nav class=""flex justify-center md:w-3/4 md:mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white border border-gray-200 rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Recipe ingredients list,"DESCRIPTION:
The UI should display a list of ingredients needed for a recipe, with each ingredient listed on a new line. The ingredient name should be displayed in a bold font, with the quantity and unit of measurement displayed next to it. The list should be responsive and adapt to different screen sizes.
COMPONENTS:
- IngredientItem: a standalone component that displays a single ingredient.
- IngredientList: a component that takes children (multiple `IngredientItem`s) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Ingredients</h2><IngredientList><IngredientItem/><IngredientItem/><!-- Add more IngredientItem components here --></IngredientList></div>
COMPONENT HTML:
IngredientItem:
<div class=""flex items-center mb-2""><span class=""font-bold"">{ingredient_name}</span><span class=""ml-2"">{quantity} {unit}</span></div>
IngredientList:
<ul class=""list-none mb-0"">{children}</ul>"
"Button that performs an action within the flow of content, often used for quick actions","DESCRIPTION:
A small, inline button that is often used for quick actions within a flow of content. It should be styled to stand out slightly from the surrounding text, but not too much.
COMPONENTS:
- InlineActionButton: A standalone component that renders a small button that performs an action within a flow of content.
HTML:
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <InlineActionButton/>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
COMPONENT HTML:
InlineActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded"">{action_text}</button>"
Affiliate program display,"DESCRIPTION:
The UI should display a summary of an affiliate program, including the program's name, description, commission rate, and a call-to-action (CTA) button to join the program. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- AffiliateProgramCard: A standalone component that displays the affiliate program's details.
- ProgramName: A standalone component that displays the affiliate program's name.
- ProgramDescription: A standalone component that displays the affiliate program's description.
- CommissionRate: A standalone component that displays the affiliate program's commission rate.
- JoinProgramButton: A standalone component that displays a CTA button to join the program.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4""><AffiliateProgramCard/></div>
COMPONENT HTML:
AffiliateProgramCard:
<div class=""flex flex-col p-4""><ProgramName/><ProgramDescription/><CommissionRate/><JoinProgramButton/></div>
ProgramName:
<h2 class=""text-lg font-bold"">{program_name}</h2>
ProgramDescription:
<p class=""text-gray-600"">{program_description}</p>
CommissionRate:
<p class=""text-lg"">{commission_rate}% commission</p>
JoinProgramButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Join Program</button>"
Pagination/Infinite Scroll,"DESCRIPTION:
- The UI should feature a list of items displayed in a grid or list format. Below the list, there should be a pagination control consisting of previous, next, and numbered page buttons to navigate through pages. Alternatively, an infinite scroll mechanism can load more items automatically as the user scrolls down.
COMPONENTS:
- ListDisplay: (Standalone): A component that displays items in a list format.
- PaginationControl: (Standalone): A component containing navigation buttons for paging through items.
HTML:
<div class=""container max-w-6xl mx-auto px-4""><!-- Grid or List Display for showing items --><ListDisplay/><!-- Pagination Controls --><PaginationControl/></div>
COMPONENT HTML:
ListDisplay:
<ul class=""space-y-4""><li class=""p-4 border rounded-lg"">{itemContent}</li><!-- More list items as needed --></ul>
PaginationControl:
<div class=""flex justify-center space-x-2 mt-4""><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">Previous</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">1</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">2</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">Next</button></div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a responsive, mobile-first section that displays a person's interests and hobbies with accompanying icons. The section should have a clear and concise layout, with each interest or hobby listed in a grid or flexbox layout.
COMPONENTS:
- InterestItem: A standalone component that displays a single interest or hobby with an icon.
- InterestsSection: A component that takes children (multiple `InterestItem` components) and displays them in a grid or flexbox layout.
HTML:
<section class=""lg:grid lg:grid-cols-2 xl:grid-cols-3 max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsSection><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsSection></section>
COMPONENT HTML:
InterestItem:
<div class=""bg-white p-4 rounded shadow-md""><i class={`w-6 h-6 text-gray-500 {icon_name}`}></i><p class=""text-sm"">{interest_name}</p></div>
InterestsSection:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should display a list of personal interests and hobbies, each accompanied by an icon that represents the interest or hobby. The list should be responsive, with a maximum of 3 items per row on larger screens, and a single column on mobile devices.
COMPONENTS:
- InterestItem: (standalone): Represents a single interest or hobby, consisting of an icon and a label.
- InterestsList: (takes children): A container for a list of `InterestItem`s.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsList><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsList></section>
COMPONENT HTML:
InterestItem:
<div class=""flex items-center mb-4""><i class={`w-6 h-6 text-lg {icon_class}`}></i><span class=""ml-2"">{interest_label}</span></div>
InterestsList:
<ul class=""flex flex-wrap justify-center md:flex-nowrap md:flex-row"">{children}</ul>"
Alert Close Button Icon,"DESCRIPTION:
The UI should be a close button icon for an alert message. It should be a small, clickable icon with a cross symbol, allowing users to close the alert message.
COMPONENTS:
- AlertCloseButton: A standalone component representing the close button icon.
HTML:
<div class=""alert""><!-- alert message content --><AlertCloseButton/></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""absolute right-0 top-0 bg-transparent border-0 text-gray-400 hover:text-gray-900""><span aria-hidden=""true"">&times;</span></button>"
Payment gateways,"DESCRIPTION:
The UI should display a list of payment gateways, each with its logo, name, and a brief description. The list should be responsive, mobile-first, and accessible. The UI should also be simple and easy to use.
COMPONENTS:
- PaymentGatewayCard: A standalone component that represents a single payment gateway.
- PaymentGatewaysList: A component that takes children (a list of `PaymentGatewayCard` components).
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Payment Gateways</h2><PaymentGatewaysList><PaymentGatewayCard/><PaymentGatewayCard/><!-- Add more PaymentGatewayCard components here --></PaymentGatewaysList></div>
COMPONENT HTML:
PaymentGatewayCard:
<div class=""flex items-center p-4 border-b border-gray-200""><img src={gatewayLogo} alt={gatewayName} class=""w-8 h-8 mr-4""/><div><h3 class=""text-sm font-bold"">{gatewayName}</h3><p class=""text-sm text-gray-600"">{gatewayDescription}</p></div></div>
PaymentGatewaysList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a list of destination cards, each containing a hotel card. The destination cards should have a background image, a title, and a description. The hotel cards should have a hotel name, a rating, and a price.
COMPONENTS:
- DestinationCard: (standalone) - A card displaying a destination's information
- HotelCard: (standalone) - A card displaying a hotel's information
- DestinationList: (takes children) - A container for a list of destination cards
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><DestinationList><DestinationCard/><DestinationCard/><DestinationCard/></DestinationList></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-cover bg-center h-64 mb-4"" style={{ backgroundImage: `url(${image_url})` }}><div class=""bg-white p-4 pt-6""><h2 class=""text-lg"">{destination_name}</h2><p>{destination_description}</p><HotelCard/></div></div>
HotelCard:
<div class=""bg-white p-4 mb-4""><h3 class=""text-md"">{hotel_name}</h3><p>Rating: {hotel_rating}/5</p><p>Price: {hotel_price}/night</p></div>
DestinationList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
"Links to the website's social media profiles, often displayed as small icons","DESCRIPTION:
The UI should be a horizontal list of small icons, each representing a social media platform, with a hover effect to indicate interactivity.
COMPONENTS:
- SocialMediaLinks: (standalone)
- SocialMediaLink: (takes children)
HTML:
<nav class=""flex justify-center mb-4""><SocialMediaLinks/></nav>
COMPONENT HTML:
SocialMediaLinks:
<ul class=""flex justify-center""><SocialMediaLink><i class=""fab fa-facebook-f""></i>{facebook_url}</SocialMediaLink><SocialMediaLink><i class=""fab fa-twitter""></i>{twitter_url}</SocialMediaLink><SocialMediaLink><i class=""fab fa-instagram""></i>{instagram_url}</SocialMediaLink><!-- Add more social media links here --></ul>
SocialMediaLink:
<li class=""mr-4 last:mr-0""><a href={link_url} target=""_blank"" rel=""noopener noreferrer"" aria-label={social_media_name}>{children} </a></li>"
Time pickers,"DESCRIPTION:
A simple time picker with hour and minute inputs, and an AM/PM toggle.
COMPONENTS:
- TimePicker: a standalone component that contains the entire time picker UI
- HourInput: a standalone component that contains a numeric input for the hour
- MinuteInput: a standalone component that contains a numeric input for the minute
- AmPmToggle: a standalone component that contains a toggle button for AM/PM selection
HTML:
<div class=""flex flex-wrap items-center justify-center""><TimePicker/></div>
COMPONENT HTML:
TimePicker:
<div class=""flex items-center""><HourInput/><span>:</span><MinuteInput/><AmPmToggle/></div>
HourInput:
<input type=""number"" min=""1"" max=""12"" value={hour} class=""py-2 px-4 border""/>
MinuteInput:
<input type=""number"" min=""0"" max=""59"" value={minute} class=""py-2 px-4 border""/>
AmPmToggle:
<button class=""px-4 py-2 border rounded {am_pm === 'am' ? 'bg-gray-200' : 'bg-white'}"">{am_pm}</button>"
Product community,"DESCRIPTION:
The UI should display a community section for a product, showcasing various metrics and information about the community. It should have a header section with the community name, a section for community metrics (e.g., members, topics, posts), and a section for featured community members.
COMPONENTS:
- CommunityHeader: standalone, displays the community name
- CommunityMetrics: standalone, displays community metrics (e.g., members, topics, posts)
- FeaturedMembers: takes children, displays a list of featured community members
- CommunityMember: standalone, displays information about a single community member
HTML:
<div class=""max-w-md mx-auto p-4""><CommunityHeader/><CommunityMetrics/><FeaturedMembers><CommunityMember/><CommunityMember/><!-- Add more CommunityMember components as needed --></FeaturedMembers></div>
COMPONENT HTML:
CommunityHeader:
<h2 class=""text-3xl font-bold mb-2"">{community_name}</h2>
CommunityMetrics:
<ul class=""list-none mb-4""><li class=""mb-2"">{members_count} members</li><li class=""mb-2"">{topics_count} topics</li><li>{posts_count} posts</li></ul>
FeaturedMembers:
<h3 class=""text-2xl font-bold mb-2"">Featured Members</h3><ul class=""list-none flex flex-wrap mb-4"">{children}</ul>
CommunityMember:
<li class=""w-1/2 sm:w-1/3 xl:w-1/4 p-2""><img class=""w-16 h-16 rounded-full mb-2"" src=""{member_avatar}"" alt=""{member_name} avatar""/><p class=""text-lg font-bold"">{member_name}</p><p class=""text-gray-600"">{member_bio}</p></li>"
Dropdown Menu Chevron,"DESCRIPTION:
The UI should be a dropdown menu with a chevron icon that indicates the menu is expandable. The menu should be responsive and accessible.
COMPONENTS:
- DropdownMenu: Takes children, a container for the dropdown menu items
- ChevronIcon: Standalone, a chevron icon indicating the menu is expandable
HTML:
<div class=""w-full max-w-md mx-auto""><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded""><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu><ChevronIcon/></button></div>
COMPONENT HTML:
DropdownMenu:
<div class=""bg-white border border-gray-200 w-full rounded"">{children}</div>
ChevronIcon:
<div class=""ml-2""><span class=""text-gray-500"">{chevron_icon}</span></div>"
Order confirmation page,"DESCRIPTION:
The order confirmation page should display a success message, order details, and a call-to-action (CTA) to encourage customers to explore more products or log in to their account. The design should be clean, simple, and easy to read.
COMPONENTS:
- OrderConfirmationHeader: Standalone component to display the success message.
- OrderDetails: Takes children, displays order details such as order number, date, and total.
- OrderItem: Standalone component to display individual order items.
- CallToAction: Standalone component to display a CTA button.
HTML:
<main class=""container mx-auto p-4 md:p-6""><OrderConfirmationHeader/><section class=""flex flex-col md:flex-row gap-4""><OrderDetails><OrderItem/><!-- Add more OrderItem components here --></OrderDetails><CallToAction/></section></main>
COMPONENT HTML:
OrderConfirmationHeader:
<h1 class=""text-3xl font-bold"">{confirmation_message}</h1>
OrderDetails:
<section class=""flex-1""><h2 class=""text-xl font-bold"">Order Details</h2><ul class=""divide-y divide-gray-200""><li class=""py-4"">{children}</li></ul></section>
OrderItem:
<li class=""flex justify-between""><span class=""text-gray-600"">{product_name}</span><span class=""text-gray-600"">{quantity} x {price}</span></li>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Content moderation tools for admin teams,"DESCRIPTION:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
COMPONENTS:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
HTML:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
COMPONENT HTML:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Search Result Item,"DESCRIPTION:
- The UI should display a search result item which includes a title, a brief description, and a link to read more. It should be formatted neatly, ensuring it's clearly distinguishable as an individual search result within a list.
COMPONENTS:
- SearchResultItem: (Standalone): Displays the search result including the title, description, and a ""Read More"" link.
HTML:
<div class=""container mx-auto px-4""><ul class=""list-none""><li><SearchResultItem/></li><!-- Add more SearchResultItem components as needed --></ul></div>
COMPONENT HTML:
SearchResultItem:
<div class=""p-4 max-w-xl bg-white rounded-lg border border-gray-200 shadow-md hover:bg-gray-100""><h2 class=""text-lg font-bold tracking-tight text-gray-900"">{title}</h2><p class=""font-light text-gray-600"">{description}</p><a href=""{more_info_url}"" class=""text-indigo-600 hover:text-indigo-900"">Read More</a></div>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a footer section that displays copyright information and a disclaimer. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone): The main footer component that wraps the copyright information and disclaimer.
- CopyrightComponent: (standalone): Displays the copyright information.
- DisclaimerComponent: (standalone): Displays the disclaimer.
HTML:
<footer class=""bg-gray-200 h-screen pt-4 pb-4""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto px-4 lg:px-8""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p class=""text-sm text-gray-600"">&copy; {copyright_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p class=""text-sm text-gray-600"">{disclaimer_text}</p>"
Comments/Review Section,"DESCRIPTION:
The UI should display a list of reviews with author names, review texts, and ratings. The design should be clean, minimal, and easy to read.
COMPONENTS:
- ReviewList: (takes children): Displays a list of reviews.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Reviews</h2><ReviewList><!-- review cards will be inserted here --></ReviewList></section>
COMPONENT HTML:
ReviewList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Comments/Review Section,"DESCRIPTION:
The Comments/Review Section should display a list of comments/reviews with the user's name, profile picture, rating, comment text, and timestamp. It should be responsive, with a mobile-first design, and be accessible and SEO-friendly.
COMPONENTS:
- ProfilePicture: standalone component that displays a user's profile picture.
- RatingStars: standalone component that displays a rating as stars.
- CommentList: component that takes children, which is a list of `CommentCard`s.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Comments and Reviews</h2><CommentList><!-- list of comments/reviews will be rendered here --></CommentList></section>
COMPONENT HTML:
ProfilePicture:
<img src={user_avatar} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full""/>
RatingStars:
<div class=""flex text-yellow-400"">{rating} <!-- will be replaced with the actual rating value --><i class=""fa fa-star"" aria-hidden=""true""></i><i class=""fa fa-star"" aria-hidden=""true""></i><i class=""fa fa-star"" aria-hidden=""true""></i><i class=""fa fa-star"" aria-hidden=""true""></i><i class=""fa fa-star"" aria-hidden=""true""></i></div>
CommentList:
<ul class=""list-none p-0"">{children} <!-- will be replaced with a list of CommentCard components --></ul>"
Header that remains visible at the top of the viewport as users scroll,"DESCRIPTION:
The UI should be a sticky header that remains fixed at the top of the viewport as users scroll down the page. The header should be responsive and adaptable to different screen sizes.
COMPONENTS:
- HeaderBar: A standalone component that represents the sticky header.
HTML:
<div class=""h-screen overflow-y-scroll""><HeaderBar/><!-- page content here --></div>
COMPONENT HTML:
HeaderBar:
<nav class=""fixed top-0 left-0 w-full h-16 bg-white shadow-md""><div class=""max-w-md mx-auto p-4""><!-- header content here, e.g. logo, navigation --><h1>{header_title}</h1></div></nav>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Header User Profile,"DESCRIPTION:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
COMPONENTS:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
HTML:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Webcam/Camera Interfaces,"DESCRIPTION:
The UI should display a webcam/video camera interface with a live feed, a capture button, and a toggle switch to switch between the front and rear cameras.
COMPONENTS:
- WebcamFeed: (standalone) - displays the live webcam feed
- CaptureButton: (standalone) - a button to capture a photo/video
- CameraToggle: (standalone) - a toggle switch to switch between the front and rear cameras
HTML:
<div class=""flex flex-col items-center h-screen""><WebcamFeed/><div class=""flex justify-center mb-4""><CaptureButton/><CameraToggle/></div></div>
COMPONENT HTML:
WebcamFeed:
<div class=""w-full h-full""><video class=""w-full h-full object-cover"" id=""video""></video></div>
CaptureButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Capture</button>
CameraToggle:
<label class=""switch""><input type=""checkbox""/><span class=""slider round""></span>Front/Rear</label>"
Image uploaders,"DESCRIPTION:
The UI for an image uploader typically features a drag-and-drop area or a button where users can select an image file from their device. Once an image is selected or dragged into the area, there might be an optional preview of the image before it's uploaded. A clear visual indication (such as a progress bar or spinner) indicates the upload process. After the upload is complete, a confirmation message or thumbnail of the uploaded image may be displayed.
COMPONENTS:
- FileUploadArea: Standalone, allows users to either click to select a file or drag and drop a file onto the area.
- ImagePreview: Standalone, displays the image that's to be uploaded to provide visual feedback to the user.
- UploadButton: Standalone, a button that the user clicks to initiate the file upload.
- ProgressBar: Standalone, displays the progress of the file upload.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-lg font-semibold"">Upload Your Image</h1><FileUploadArea/><ImagePreview/><UploadButton/><ProgressBar/></div>
COMPONENT HTML:
FileUploadArea:
<div class=""border-2 border-dashed border-gray-300 p-6 text-center cursor-pointer hover:border-gray-500""><p>Drag and drop your image here or <span class=""text-blue-500 underline"">browse</span></p><input type=""file"" class=""hidden"" accept=""image/*""></div>
ImagePreview:
<div class=""mt-4""><img src=""{preview_image_url}"" alt=""Uploaded image preview"" class=""max-w-full h-auto""></div>
UploadButton:
<button class=""mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Image </button>
ProgressBar:
<div class=""mt-4 w-full bg-gray-200 rounded-full""><div class=""bg-blue-500 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full"" style=""width: {uploadPercentage}%;"">{uploadPercentage}%</div></div>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's name, profile picture, and a short bio. It should be a compact, rectangular box with a subtle border and padding.
COMPONENTS:
- AuthorInfo: A standalone component that displays the author's information.
- Avatar: A standalone component that displays the author's profile picture.
- Bio: A standalone component that displays the author's bio.
HTML:
<div class=""max-w-md p-4 mx-auto bg-white rounded shadow-md""><AuthorInfo/></div>
COMPONENT HTML:
AuthorInfo:
<div class=""flex items-center mb-2""><Avatar/><div class=""ml-2""><p class=""text-lg"">{authorName}</p><Bio/></div></div>
Avatar:
<img src={profilePictureUrl} class=""w-12 h-12 rounded-full"" alt=""{authorName}'s profile picture""/>
Bio:
<p class=""text-gray-600"">{authorBio}</p>"
Dropdown Menu Arrow,"DESCRIPTION:
A dropdown menu arrow is a small triangle that indicates the presence of a dropdown menu. It should be a small, downward-facing triangle that changes direction when the dropdown menu is open.
COMPONENTS:
- DropdownMenuArrow: A standalone component that displays a triangle pointing down or up.
HTML:
<button class=""flex justify-center""><!-- dropdown menu button content --><DropdownMenuArrow/></button>
COMPONENT HTML:
DropdownMenuArrow:
<div class=""w-3 h-3""><span class=""block w-full h-0.5 bg-current rotate-45 translate-x-1/2 -translate-y-1/2""></span><span class=""block w-full h-0.5 bg-current -rotate-45 translate-x-1/2 translate-y-1/2""></span></div>"
Notifications display,"DESCRIPTION:
The UI should display a list of notifications in a card-style layout, with each notification showing the notification message, timestamp, and a close button. The layout should be responsive and mobile-friendly.
COMPONENTS:
- NotificationList: a component that takes children, which is a list of `NotificationCard` components
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Notifications</h2><NotificationList><!-- list of notifications will be rendered here --></NotificationList></div>
COMPONENT HTML:
NotificationList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Dark mode toggle,"DESCRIPTION:
A toggle button that switches between light and dark mode, with a moon symbol for dark mode and a sun symbol for light mode.
COMPONENTS:
- DarkModeToggle: a standalone component that toggles between light and dark mode.
HTML:
<nav class=""flex justify-end mb-4""><DarkModeToggle/></nav>
COMPONENT HTML:
DarkModeToggle:
<button class=""bg-white dark:bg-gray-800 py-2 px-4 rounded-md"">{isDarkMode ? <span class=""text-gray-200"">☀️</span>: <span class=""text-yellow-300"">🌕</span>}</button>"
Dark mode toggle,"DESCRIPTION:
The UI should be a toggle button that switches between light mode and dark mode. The button should have a moon symbol in light mode and a sun symbol in dark mode.
COMPONENTS:
- DarkModeToggle: A standalone component that represents the toggle button.
- ToggleIcon: A standalone component that represents the icon within the toggle button.
HTML:
<div class=""flex justify-center""><DarkModeToggle/></div>
COMPONENT HTML:
DarkModeToggle:
<button class=""bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 py-2 px-4 rounded-full""><ToggleIcon/></button>
ToggleIcon:
<i class=""fas fa-{icon_type}"" aria-label=""{icon_label}""/><!-- icon_type is either 'moon' or 'sun', icon_label is either 'Dark mode' or 'Light mode' -->"
Dark mode toggle,"DESCRIPTION:
The UI should be a toggle button that allows users to switch between light and dark modes. The button should be responsive, accessible, and have a clear visual indicator of its state (i.e., whether dark mode is on or off).
COMPONENTS:
- DarkModeToggle: A standalone component that renders a toggle button to switch between light and dark modes.
HTML:
<button class=""flex justify-center w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600 transition duration-300 ease-in-out""><DarkModeToggle/></button>
COMPONENT HTML:
DarkModeToggle:
<div class=""flex items-center justify-center w-full h-full""><span class=""text-lg"">{darkMode ? ""🌃"" : ""☀️""} </span><input type=""checkbox"" id=""dark-mode-toggle"" class=""hidden""/><label htmlFor=""dark-mode-toggle"" class=""w-full h-full text-lg""><span class=""sr-only"">{darkMode ? ""Turn off dark mode"" : ""Turn on dark mode""}</span></label></div>"
Avatar display for user profile picture,"DESCRIPTION:
The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.
COMPONENTS:
- Avatar: standalone component
HTML:
<div class=""flex justify-center mb-4""><Avatar/></div>
COMPONENT HTML:
Avatar:
<img src={avatarUrl} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>"
Stencil Portals/Masking,"DESCRIPTION:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
COMPONENTS:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
HTML:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
COMPONENT HTML:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Hero section with background image and tagline,"DESCRIPTION:
The UI should be a hero section with a background image and a tagline. The background image should cover the full width and height of the section, and the tagline should be centered vertically and horizontally on top of the image.
COMPONENTS:
- HeroBackground: A standalone component that represents the background image of the hero section.
- HeroTagline: A component that represents the tagline of the hero section. It takes children (the tagline text).
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""absolute inset-0 flex items-center justify-center""><HeroTagline><p>{tagline_text}</p></HeroTagline></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={{ backgroundImage: `url(${background_image_url})` }}></div>
HeroTagline:
<div class=""text-2xl font-bold text-white"">{children}</div>"
Video background,"DESCRIPTION:
The UI should be a full-screen video background with a centered container that overlays on top of the video.
COMPONENTS:
- VideoBackground: standalone component that renders a full-screen video background.
- OverlayContainer: standalone component that renders a centered container that overlays on top of the video.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><OverlayContainer/></div>
COMPONENT HTML:
VideoBackground:
<video class=""object-cover h-screen w-screen"" autoplay muted loop><source src={video_source} type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayContainer:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center""><!-- add content here --></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating, with the title in a larger font size and the rating displayed as a fraction of 5.
COMPONENTS:
- ProductTitle: standalone component that displays the product title
- ProductRating: standalone component that displays the product rating
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><ProductRating/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-3xl font-bold"">{productName}</h2>
ProductRating:
<p class=""text-lg"">{rating}/5</p>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The rating should be displayed as a series of stars, with the number of filled stars indicating the rating. The product title should be prominent and easy to read.
COMPONENTS:
- ProductTitle: a standalone component that displays the product title.
- RatingDisplay: a standalone component that displays the rating as a series of stars.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><RatingDisplay/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-2xl font-bold"">{productName}</h2>
RatingDisplay:
<div class=""flex"">{rating}/5 <div class=""flex"">{[...Array(5).keys()].map((_, i) =>( <i key={i} class={`text-yellow-400 ${i < rating ? 'fas fa-star' : 'far fa-star'}`}></i>))} </div></div>"
Skill meter with percentage counters,"DESCRIPTION:
The UI should consist of a horizontal meter that fills up as the percentage increases. The meter should be divided into sections, each representing a different level of proficiency (e.g., beginner, intermediate, advanced). The current percentage should be displayed next to the meter.
COMPONENTS:
- SkillMeter: A standalone component that represents the meter.
- MeterSection: A component that represents a section of the meter, takes children (e.g., a label for the section).
- PercentageCounter: A standalone component that displays the current percentage.
HTML:
<div class=""flex flex-wrap justify-center""><SkillMeter/><PercentageCounter/></div>
COMPONENT HTML:
SkillMeter:
<div class=""w-full bg-gray-200 h-4 rounded""><div class=""bg-blue-500 h-4 rounded"" style={{ width: `${progressPercentage}%` }}></div><div class=""flex justify-between mx-2""><!-- meter sections --><MeterSection>Beginner</MeterSection><MeterSection>Intermediate</MeterSection><MeterSection>Advanced</MeterSection></div></div>
MeterSection:
<div class=""text-xs"">{children}</div>
PercentageCounter:
<p class=""text-lg"">{progressPercentage}%</p>"
Page Content List Item,"DESCRIPTION:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
HTML:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
COMPONENT HTML:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Calendar display,"DESCRIPTION:
The UI should display a calendar with the current month and year, with each day of the month listed in a grid format. The calendar should be responsive and accessible on different devices.
COMPONENTS:
- CalendarHeader: A standalone component that displays the current month and year.
- CalendarGrid: A component that contains a grid of `DayCell` components, takes children to populate the calendar grid.
HTML:
<div class=""max-w-md mx-auto p-4""><CalendarHeader/><CalendarGrid><!-- grid of days will be inserted here --></CalendarGrid></div>
COMPONENT HTML:
CalendarHeader:
<div class=""flex justify-between mb-4""><h2 class=""text-lg"">{current_month} {current_year}</h2><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Prev</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next</button></div>
CalendarGrid:
<table class=""w-full""><tbody><tr>{children} <!-- DayCell components will be inserted here --></tr><!-- additional rows will be inserted here --></tbody></table>"
Category dropdown menu,"DESCRIPTION:
A dropdown menu that displays a list of categories when the user clicks on a dropdown toggle button. The menu should be responsive and accessible.
COMPONENTS:
- DropdownToggle: A standalone component that displays a button to toggle the dropdown menu.
- DropdownMenu: A component that takes children, displaying a list of categories.
- CategoryItem: A standalone component that displays a single category item.
HTML:
<div class=""flex justify-center mb-4""><DropdownToggle/><DropdownMenu><CategoryItem/><CategoryItem/><!-- Add more CategoryItem components here --></DropdownMenu></div>
COMPONENT HTML:
DropdownToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Categories <i class=""fas fa-angle-down"" aria-hidden=""true""></i></button>
DropdownMenu:
<ul class=""absolute bg-white shadow-md mt-2 w-48 rounded"">{children}</ul>
CategoryItem:
<li class=""py-2 px-4 border-b border-gray-200"">{category_name}</li>"
Callout Box Shadow,"DESCRIPTION:
The UI should be a callout box with a shadow effect, which is a rectangular box with a subtle shadow effect to give it a sense of depth. The callout box should be responsive and mobile-friendly.
COMPONENTS:
- CalloutBoxShadow: A standalone component that represents the callout box with a shadow effect.
HTML:
<div class=""max-w-md mx-auto mt-4 p-4 bg-white rounded shadow-md""><CalloutBoxShadow/></div>
COMPONENT HTML:
CalloutBoxShadow:
<div class=""px-4 py-3""><p class=""text-lg font-bold"">{callout_title}</p><p class=""text-gray-600"">{callout_text}</p></div>"
Product documentation,"DESCRIPTION:
The UI should display a product documentation page with a navigation menu, a section for the product description, and a section for the technical specifications.
COMPONENTS:
- NavigationBar: A standalone component that displays a navigation menu with links to different sections of the documentation.
- ProductDescription: A standalone component that displays the product description.
- TechnicalSpecifications: A standalone component that displays the technical specifications of the product.
HTML:
<div class=""container mx-auto p-4 lg:p-8""><NavigationBar/><main class=""flex flex-col lg:flex-wrap lg:flex-row""><ProductDescription/><TechnicalSpecifications/></main></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-center mb-4 lg:mb-8""><ul class=""list-none p-0 m-0 flex flex-wrap justify-center lg:justify-start""><li class=""mr-4 lg:mr-8 mb-2 lg:mb-0""><a href=""#description"" class=""text-blue-600 hover:text-blue-900"">{nav_link_text}</a></li><li class=""mr-4 lg:mr-8 mb-2 lg:mb-0""><a href=""#technical-specifications"" class=""text-blue-600 hover:text-blue-900"">{nav_link_text}</a></li></ul></nav>
ProductDescription:
<section id=""description"" class=""mb-8 lg:mb-12""><h2 class=""text-2xl lg:text-3xl mb-2"">{description_title}</h2><p class=""text-lg"">{description_text}</p></section>
TechnicalSpecifications:
<section id=""technical-specifications"" class=""mb-8 lg:mb-12""><h2 class=""text-2xl lg:text-3xl mb-2"">{technical_specifications_title}</h2><ul class=""list-none p-0 m-0""><li class=""mb-2"">{specification_item}</li><!-- Add more list items as needed --></ul></section>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Lightbox display,"DESCRIPTION:
The UI should feature a Lightbox display which typically consists of an image gallery where clicking on a thumbnail opens the image in a larger view ""over"" the page, often darkening the background to focus on the image. This display should be responsive, adjusting for different screen sizes, and allow easy navigation through images.
COMPONENTS:
- ThumbnailGallery: (Standalone) - This component displays the thumbnails of the images.
- LightboxModal: (Takes children) - A modal component that displays the selected image in a larger view with a darkened background.
HTML:
<div class=""p-4""><!-- Thumbnail gallery where users pick an image --><ThumbnailGallery/><!-- Modal that displays when an image is clicked --><LightboxModal><img src=""{lightboxImageSrc}"" alt=""{lightboxImageAlt}"" class=""max-w-full max-h-full""/></LightboxModal></div>
COMPONENT HTML:
ThumbnailGallery:
<div class=""grid grid-cols-3 gap-4 md:grid-cols-5 lg:grid-cols-6""><img src=""{thumbnail1Src}"" alt=""{thumbnail1Alt}"" class=""w-full cursor-pointer""/><img src=""{thumbnail2Src}"" alt=""{thumbnail2Alt}"" class=""w-full cursor-pointer""/><!-- Add more images similarly depending on the number of images to display --></div>
LightboxModal:
<div class=""fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center p-4""><div class=""bg-white p-4 max-w-3xl max-h-full overflow-auto"">{children} </div></div>"
Blog Post Author Name,"DESCRIPTION:
The UI should display the author's name in a readable format, possibly with a link to the author's profile or bio page. The text should be easily readable on various devices and screen sizes.
COMPONENTS:
- AuthorName: A standalone component that displays the author's name.
HTML:
<a href=""{authorProfileUrl}"" class=""text-lg font-medium text-gray-900 hover:underline""><AuthorName/></a>
COMPONENT HTML:
AuthorName:
<span class=""capitalize"">{authorName}</span>"
Blog Post Author Name,"DESCRIPTION:
The UI should display the author's name in a readable font size, with a slight emphasis to indicate that it's the author's name. The text should be dark-colored on a light background.
COMPONENTS:
- AuthorName: standalone component that displays the author's name.
HTML:
<div class=""flex justify-center mb-4""><AuthorName/></div>
COMPONENT HTML:
AuthorName:
<p class=""text-lg font-bold"">{authorName}</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple footer newsletter input field with a submit button, responsive and accessible, with a clean and minimalistic design.
COMPONENTS:
- FooterNewsletterInput: standalone component that contains the input field and submit button.
- NewsletterInputField: standalone component that is the input field for the newsletter email address.
- SubmitButton: standalone component that is the submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-4""><div class=""container mx-auto p-4 md:p-6""><FooterNewsletterInput/></div></footer>
COMPONENT HTML:
FooterNewsletterInput:
<div class=""w-full max-w-md mx-auto mb-4""><NewsletterInputField/><SubmitButton/></div>
NewsletterInputField:
<input type=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Hero Image/Header,"DESCRIPTION:
The UI should display a hero image/header section that takes up the full width of the screen, with a background image, a heading, and a call-to-action (CTA) button. The heading and CTA button should be centered horizontally and vertically within the hero image.
COMPONENTS:
- HeroImageHeader: (standalone)
- HeroHeading: (standalone)
- CallToAction: (standalone)
HTML:
<section class=""h-screen w-full relative""><HeroImageHeader/><!-- hero image background --><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center""><HeroHeading/><CallToAction/></div></section>
COMPONENT HTML:
HeroImageHeader:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${hero_image_url});`}></div>
HeroHeading:
<h1 class=""text-3xl font-bold"">{hero_heading}</h1>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Table filters,"DESCRIPTION:
The UI will consist of a table with multiple columns and data rows. Above the table, there will be filter inputs corresponding to each column. This allows users to enter filter criteria to refine the data displayed in the table.
COMPONENTS:
- FilterBar: Standalone component. Contains individual filters for each column of the table.
- DataTable: Takes children. This is the main component where the data rows are displayed under respective column headings.
- FilterInput: Standalone component. Used within the FilterBar for entering filter criteria for specific table columns.
HTML:
<div class=""container mx-auto p-4""><FilterBar/><DataTable><!-- Row entries go here --><tr><td>{data_entry_1}</td><td>{data_entry_2}</td><td>{data_entry_3}</td></tr><!-- Additional rows as needed --></DataTable></div>
COMPONENT HTML:
FilterBar:
<div class=""flex justify-between py-2""><FilterInput/><FilterInput/><FilterInput/></div>
DataTable:
<table class=""min-w-full leading-normal""><thead><tr><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 1</th><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 2</th><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 3</th></tr></thead><tbody>{children} </tbody></table>
FilterInput:
<input type=""text"" class=""shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"" placeholder=""Filter..."" aria-label=""Filter""/>"
Featured Image Gallery,"DESCRIPTION:
The UI should be a responsive image gallery with a maximum of 6 images, arranged in a 2x3 grid on large screens, 2 images per row on medium screens, and 1 image per row on small screens. The images should be equally spaced and take up the full width of the gallery. On hover, the images should have a subtle overlay with the image's caption.
COMPONENTS:
- ImageCard: (standalone) - A single image with a caption overlay
- ImageGallery: (takes children) - A container for the image cards, provides the grid layout
HTML:
<div class=""max-w-md mx-auto""><ImageGallery><ImageCard/><ImageCard/><ImageCard/><ImageCard/><ImageCard/><ImageCard/></ImageGallery></div>
COMPONENT HTML:
ImageCard:
<div class=""relative overflow-hidden rounded-md""><img src={image_src} alt={image_alt} class=""w-full h-48 object-cover rounded-md""/><div class=""absolute inset-0 flex justify-center items-center opacity-0 hover:opacity-100 transition duration-300""><p class=""text-sm text-white"">{image_caption}</p></div></div>
ImageGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Placeholder/Loading Text,"DESCRIPTION:
The UI should display a placeholder or loading text, often used when content is still loading or not yet available. The text should be centered and have a subtle animation to indicate that the content is loading.
COMPONENTS:
- LoadingText: (standalone)
HTML:
<div class=""flex justify-center min-h-screen""><LoadingText/></div>
COMPONENT HTML:
LoadingText:
<!-- A centered loading text with animation --><div class=""animate-pulse text-lg text-gray-400"">{loading_text}</div>"
Placeholder/Loading Text,"DESCRIPTION:
The UI should be a simple loading text component that displays a placeholder text, indicating that content is loading.
COMPONENTS:
- LoadingText: (standalone): Displays a placeholder text.
HTML:
<div class=""flex justify-center""><LoadingText/></div>
COMPONENT HTML:
LoadingText:
<p class=""text-lg text-gray-400 animate-pulse"">Loading...</p><!-- or --><p class=""text-lg text-gray-400 animate-pulse"">{loading_message}</p>"
"Input field for entering tags or keywords, often with auto-suggestion functionality","DESCRIPTION:
The UI should be a text input field with a dropdown list of suggested tags or keywords below it. The input field should be responsive and adapt to different screen sizes. The dropdown list should be hidden by default and only appear when the user starts typing in the input field.
COMPONENTS:
- TagInput: A standalone component that includes the input field and dropdown list.
- DropdownList: A component that displays a list of suggested tags or keywords, takes children.
HTML:
<div class=""max-w-md mx-auto p-4""><TagInput/></div>
COMPONENT HTML:
TagInput:
<div class=""relative""><input type=""text"" class=""w-full pl-4 pr-10 text-sm"" placeholder=""Enter tags or keywords""/><DropdownList>{suggestedTags}</DropdownList></div>
DropdownList:
<ul class=""absolute bg-white shadow-md w-full rounded-b-md"">{children}</ul>"
Service/Gig Cards,"DESCRIPTION:
The UI should display a card for each service or gig, showcasing its title, description, price, and a call-to-action (CTA) button. The cards should be arranged in a grid, with multiple cards per row on larger screens and a single card per row on smaller screens.
COMPONENTS:
- ServiceCard: A standalone component that displays a single service or gig.
- ServiceGrid: A component that takes children (`ServiceCard`s) and arranges them in a grid.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 md:pt-12""><h2 class=""text-3xl font-bold mb-4"">Our Services</h2><ServiceGrid><ServiceCard/><ServiceCard/><!-- Add more ServiceCard components here --></ServiceGrid></div>
COMPONENT HTML:
ServiceCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 md:w-1/2 lg:w-1/3 xl:w-1/4""><h3 class=""text-lg font-bold"">{serviceName}</h3><p class=""text-gray-600"">{serviceDescription}</p><p class=""text-lg font-bold"">{price}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Order Now</button></div>
ServiceGrid:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Service/Gig Cards,"DESCRIPTION:
The UI should be a grid of service/gig cards, each showcasing a service or gig with a title, description, price, and a call-to-action button. The cards should be responsive, spanning the full width on mobile devices and arranged in a grid on larger screens.
COMPONENTS:
- ServiceCard: a standalone component representing a single service/gig card.
- ServiceGrid: a component that takes children, representing the grid of service/gig cards.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><ServiceGrid><ServiceCard/><ServiceCard/><ServiceCard/><!-- Add more ServiceCard components as needed --></ServiceGrid></div>
COMPONENT HTML:
ServiceCard:
<div class=""bg-white shadow-md rounded-md p-4 mb-4""><h2 class=""text-lg font-bold"">{serviceName}</h2><p class=""text-gray-600"">{serviceDescription}</p><p class=""text-lg font-bold"">{servicePrice}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaButtonText} </button></div>
ServiceGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Product loading,"DESCRIPTION:
The UI should be a loading indicator for a product, showing a spinning wheel and a ""Loading..."" text. It should be centered and take up the full width of its container.
COMPONENTS:
- LoadingIndicator: standalone
- LoadingText: standalone
HTML:
<div class=""flex h-screen justify-center items-center""><LoadingIndicator/><LoadingText/></div>
COMPONENT HTML:
LoadingIndicator:
<div class=""w-12 h-12 border-4 border-dashed rounded-full animate-spin border-gray-500""></div>
LoadingText:
<p class=""text-lg text-gray-600"">{loading_text}</p>"
Product trials,"DESCRIPTION:
The UI should display a list of product trials with their respective details, such as the product name, trial duration, and a call-to-action (CTA) button to sign up for the trial. The UI should be responsive, making it accessible on various devices and screen sizes.
COMPONENTS:
- ProductTrialCard: A standalone component representing a single product trial.
- TrialList: A component that takes children, rendering a list of `ProductTrialCard`s.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Product Trials</h2><TrialList><ProductTrialCard/><ProductTrialCard/><!-- Add more ProductTrialCard components here --></TrialList></div>
COMPONENT HTML:
ProductTrialCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h3 class=""text-xl font-bold"">{productName}</h3><p>Free trial for {trialDuration} days</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign up for trial</button></div>
TrialList:
<ul class=""list-none mb-0"">{children}</ul>"
Code Review and Approval Workflow,"DESCRIPTION:
The UI should display a vertical timeline of code review and approval workflow, with each step represented by a circular icon and a brief description. The timeline should be responsive and adaptable to different screen sizes.
COMPONENTS:
- CodeReviewStep: A standalone component representing a single step in the code review process.
- Timeline: A component that takes children, which are `CodeReviewStep` components.
HTML:
<div class=""max-w-md mx-auto p-4""><Timeline><CodeReviewStep/><CodeReviewStep/><CodeReviewStep/><!-- Add more CodeReviewStep components as needed --></Timeline></div>
COMPONENT HTML:
CodeReviewStep:
<div class=""flex items-center mb-4""><div class=""w-8 h-8 bg-orange-500 rounded-full text-white text-lg"">{step_icon}</div><div class=""ml-4""><p class=""text-lg"">{step_description}</p><small class=""text-gray-600"">{step_status}</small></div></div>
Timeline:
<div class=""flex flex-col items-center"">{children}</div>"
Project Cards/Grids,"DESCRIPTION:
A responsive grid of project cards, with each card displaying a thumbnail, title, description, and tags. The grid should be flexible to accommodate different screen sizes.
COMPONENTS:
- ProjectCard: standalone component that displays a single project card
- ProjectGrid: container component that wraps a grid of project cards, takes children
HTML:
<div class=""max-w-md mx-auto p-4""><ProjectGrid><ProjectCard/><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectGrid></div>
COMPONENT HTML:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src={thumbnail_url} alt={project_title} class=""w-full rounded-t""/><h2 class=""text-lg font-bold"">{project_title}</h2><p class=""text-gray-600"">{project_description}</p><ul class=""flex flex-wrap"">{tags.map((tag) =>( <li class=""mr-2"">{tag}</li>))} </ul></div>
ProjectGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Friends List: List of friends with profile links,"DESCRIPTION:
The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.
COMPONENTS:
- FriendItem: A standalone component representing a single friend's profile link.
- FriendsList: A component that takes children ( FriendItems ) and renders them in an unordered list.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Friends List</h2><ul class=""flex flex-wrap justify-center mb-4""><FriendItem/><FriendItem/><FriendItem/></ul></div>
COMPONENT HTML:
FriendItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><a href=""{profileLink}"" class=""block""><img src=""{profilePicture}"" alt=""{friendName}"" class=""w-12 h-12 rounded-full mb-2""><span class=""text-lg"">{friendName}</span></a></li>
FriendsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Friends List: List of friends with profile links,"DESCRIPTION:
The UI should be a responsive list of friends with profile links. The list should be displayed in a grid on larger screens and a vertical list on smaller screens. Each friend's name should be a link to their profile.
COMPONENTS:
- FriendCard: (standalone): a single friend's information with a profile link
- FriendsList: (takes children): a container for the list of friends
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Friends</h2><FriendsList><!-- friend cards will be inserted here --><FriendCard/><FriendCard/><!-- ... --></FriendsList></div>
COMPONENT HTML:
FriendCard:
<div class=""flex items-center mb-4""><img src={profile_image_url} alt=""Profile image"" class=""w-12 h-12 rounded-full mr-4""/><a href={profile_url} class=""text-blue-600 hover:text-blue-900"">{friend_name}</a></div>
FriendsList:
<ul class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</ul>"
E-commerce product filter,"DESCRIPTION:
The UI should be a responsive, mobile-first filter component that allows users to filter products by category, price range, and rating. It should be accessible and SEO-friendly.
COMPONENTS:
- FilterCategory: (standalone): A dropdown list of categories to filter by.
- FilterPriceRange: (standalone): A range slider to filter by price.
- FilterRating: (standalone): A series of radio buttons to filter by rating.
- FilterButton: (standalone): A button to apply the filters.
- FilterClearButton: (standalone): A button to clear all filters.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Filter Products</h2><div class=""flex flex-wrap -mx-2 mb-4""><FilterCategory/><FilterPriceRange/><FilterRating/></div><div class=""flex justify-end mb-4""><FilterButton/><FilterClearButton/></div></div>
COMPONENT HTML:
FilterCategory:
<div class=""w-full md:w-1/3 px-2 mb-4""><label for=""category"" class=""block text-sm font-bold mb-2"">Category</label><select id=""category"" class=""block w-full p-2""><option value="""">Select a category</option>{category_options} </select></div>
FilterPriceRange:
<div class=""w-full md:w-1/3 px-2 mb-4""><label for=""price-range"" class=""block text-sm font-bold mb-2"">Price Range</label><input type=""range"" id=""price-range"" min=""{min_price}"" max=""{max_price}"" value=""{initial_price}""/><p>Range: {min_price} - {max_price}</p></div>
FilterRating:
<div class=""w-full md:w-1/3 px-2 mb-4""><label class=""block text-sm font-bold mb-2"">Rating</label><div class=""flex justify-between mb-2""><input type=""radio"" id=""rating-1"" name=""rating"" value=""1""/><label for=""rating-1"">1 star</label></div><div class=""flex justify-between mb-2""><input type=""radio"" id=""rating-2"" name=""rating"" value=""2""/><label for=""rating-2"">2 stars</label></div><!-- repeat for 3-5 stars --></div>
FilterButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Filters</button>
FilterClearButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Clear Filters</button>"
Unordered list,"DESCRIPTION:
An unordered list with bullet points, responsive, and accessible.
COMPONENTS:
- ListItem: (standalone): A single list item with a bullet point.
- UnorderedList: (takes children): A container for a list of `ListItem`s.
HTML:
<UnorderedList><ListItem/><ListItem/><!-- Add more ListItem components here --></UnorderedList>
COMPONENT HTML:
ListItem:
<li><span class=""w-4 h-4 inline-block bg-gray-400 rounded-full mr-2""></span><span>{list_item_text}</span></li>
UnorderedList:
<ul class=""list-none mb-0 pl-0"">{children}</ul>"
Sticky/Fixed Navigation,"DESCRIPTION:
The UI should have a sticky/fixed navigation bar that is visible at the top of the page, and remains fixed in place as the user scrolls down the page.
COMPONENTS:
- NavigationBar: A standalone component that contains the navigation links.
HTML:
<body><NavigationBar/><!-- page content --><main><!-- page content here --></main></body>
COMPONENT HTML:
NavigationBar:
<nav class=""fixed top-0 left-0 w-full bg-white shadow-md""><div class=""max-w-md mx-auto px-4""><ul class=""flex justify-between py-4""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Home</a></li><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">About</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Contact</a></li></ul></div></nav>"
Recommended products display,"DESCRIPTION:
The UI for the recommended products display should feature a clean layout with product cards arranged in a grid or list format. Each card includes an image placeholder, a brief product description, and a price tag. The UI should be responsive, adapting from a single-column layout on mobile devices to a multi-column grid on larger screens.
COMPONENTS:
- ProductCard: (Standalone): Displays a single product, including an image, description, and price.
- ProductGrid: (Takes children): A container that arranges `ProductCard` components in a grid layout.
HTML:
<ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Additional ProductCard components can be added as needed --></ProductGrid>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm rounded overflow-hidden shadow-lg p-4 m-2""><div class=""w-full h-48 bg-gray-300 flex items-center justify-center""><span>{image_placeholder}</span></div><div class=""px-6 py-4""><div class=""font-bold text-xl mb-2"">{product_name}</div><p class=""text-gray-700 text-base"">{product_description} </p></div><div class=""px-6 pt-4 pb-2""><span class=""inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2"">{product_price}</span></div></div>
ProductGrid:
<div class=""container mx-auto px-4""><div class=""flex flex-wrap justify-center"">{children} </div></div>"
Social media links with icons and tooltips,"DESCRIPTION:
The UI should display a row of social media links with their respective icons and tooltips when hovered.
COMPONENTS:
- SocialMediaLink: A standalone component that represents a single social media link with an icon and tooltip.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></div>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><i class=""{social_media_icon} w-6 h-6 text-2xl transition duration-300""/><span class=""sr-only"">{social_media_name}</span><span class=""tooltip tooltip-simple"">{social_media_name}</span></a>"
Post Content: Main text and media of article,"DESCRIPTION:
The Post Content UI should have a main text area and a media area (e.g. images, videos) that is responsive and accessible on various devices.
COMPONENTS:
- PostContent: standalone, contains the main text and media areas
- MediaArea: standalone, contains the media (images, videos) of the post
- PostText: standalone, contains the main text of the post
HTML:
<div class=""container mx-auto p-4""><PostContent/></div>
COMPONENT HTML:
PostContent:
<div class=""flex flex-wrap -mx-4""><PostText/><MediaArea/></div>
MediaArea:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4""><img src=""{media_url}"" alt=""{media_alt_text}"" class=""w-full h-full object-cover""/></div>
PostText:
<div class=""w-full lg:w-1/2 xl:w-2/3 p-4""><h2 class=""text-lg font-bold"">{post_title}</h2><p>{post_text}</p></div>"
Download and Installation Tools,"DESCRIPTION:
The UI should be a responsive, mobile-first design that displays a list of download and installation tools with their respective logos, names, and brief descriptions. The UI should be accessible, SEO-friendly, and well-documented.
COMPONENTS:
- DownloadToolCard: A standalone component that displays a single download and installation tool's information.
- ToolsList: A component that takes children and displays a list of `DownloadToolCard` components.
HTML:
<section class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Download and Installation Tools</h1><ToolsList><DownloadToolCard/><DownloadToolCard/><DownloadToolCard/><!-- Add more DownloadToolCard components as needed --></ToolsList></section>
COMPONENT HTML:
DownloadToolCard:
<div class=""flex gap-4 mb-4 p-4 border border-gray-200 rounded""><img src=""{tool_logo_url}"" alt=""{tool_name} logo"" class=""w-12 h-12""><div class=""flex-1""><h2 class=""text-lg font-bold"">{tool_name}</h2><p class=""text-gray-600"">{tool_description}</p><a href=""{tool_download_url}"" class=""text-blue-600 hover:text-blue-800"">Download</a></div></div>
ToolsList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
FAQ/Accordion Sections,"DESCRIPTION:
The UI should display a list of FAQ sections, each with a question and an answer. The answer should be hidden by default and toggled on click. The FAQ sections should be stacked vertically, with a slight gap between each section. On mobile devices, the FAQ sections should take up the full width of the screen. On larger screens, the FAQ sections should be limited to a maximum width.
COMPONENTS:
- AccordionSection: (standalone) - Represents a single FAQ section
- AccordionQuestion: (standalone) - Represents the question part of an AccordionSection
- AccordionAnswer: (standalone) - Represents the answer part of an AccordionSection
HTML:
<div class=""flex flex-wrap justify-center max-w-md mx-auto""><AccordionSection/><AccordionSection/><!-- Add more AccordionSection components here --></div>
COMPONENT HTML:
AccordionSection:
<div class=""mb-4""><AccordionQuestion/><AccordionAnswer/></div>
AccordionQuestion:
<button class=""w-full bg-gray-100 py-2 px-4 text-left"">{question_text}</button>
AccordionAnswer:
<div class=""hidden""><p>{answer_text}</p></div>"
Inline editable fields,"DESCRIPTION:
The UI should display a table with editable fields, resembling a spreadsheet. Each cell in the table should be editable, allowing users to input or edit text.
COMPONENTS:
- EditableTableCell: A standalone component representing an individual editable table cell.
- EditableTableRow: A component that takes children, representing a table row with editable cells.
- EditableTable: A component that takes children, representing the entire editable table.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><EditableTable><EditableTableRow><EditableTableCell/><EditableTableCell/><EditableTableCell/></EditableTableRow><EditableTableRow><EditableTableCell/><EditableTableCell/><EditableTableCell/></EditableTableRow><!-- Add more rows and cells as needed --></EditableTable></div>
COMPONENT HTML:
EditableTableCell:
<td class=""bg-white border border-gray-200 p-2""><input type=""text"" class=""w-full p-2 border-none bg-transparent focus:bg-white focus:outline-none"" value={cell_value}/></td>
EditableTableRow:
<tr class=""hover:bg-gray-100"">{children}</tr>
EditableTable:
<table class=""w-full border-collapse""><tbody>{children}</tbody></table>"
Skeleton Screens/Loading,"DESCRIPTION:
A loading UI with a loading animation and a set of skeleton screens for a list of items. The loading animation is a simple rotating wheel and the skeleton screens display a set of rectangles with a slight animation.
COMPONENTS:
- LoadingIndicator: a standalone component that displays a rotating wheel
- SkeletonScreen: a standalone component that displays a rectangle that animates to simulate loading
- SkeletonList: a component that takes children, which are a set of `SkeletonScreen` components
HTML:
<div class=""flex justify-center mt-20""><LoadingIndicator/><SkeletonList><SkeletonScreen/><SkeletonScreen/><SkeletonScreen/></SkeletonList></div>
COMPONENT HTML:
LoadingIndicator:
<div class=""inline-block""><div class=""animate-spin h-8 w-8 border-2 border-gray-50 rounded-full border-t-2 border-t-gray-200""><!-- rotating wheel animation --></div></div>
SkeletonScreen:
<div class=""bg-gray-100 animate-pulse h-12 w-64 rounded-lg mt-2""><!-- animated rectangle --></div>
SkeletonList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Map filters,"DESCRIPTION:
The UI should be a compact, responsive map filter component that allows users to select specific filters to narrow down their search. It should have a toggle button to expand and collapse the filter options.
COMPONENTS:
- FilterToggle: Standalone component that toggles the filter options.
- FilterList: Component that takes children (FilterOption components) and renders them in a list.
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><FilterToggle/><FilterList><!-- Filter options will be rendered here --></FilterList></div>
COMPONENT HTML:
FilterToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{toggle_label}</button>
FilterList:
<ul class=""list-none mb-0"">{children}</ul>"
Social media feed with latest posts and images,"DESCRIPTION:
The UI should be a social media feed that displays the latest posts and images in a responsive, mobile-first layout. The feed should be accessible and SEO-friendly, with alt text for images and semantic HTML5 elements.
COMPONENTS:
- PostCard: A standalone component that displays a single post with an image, post text, and post author.
- PostImage: A standalone component that displays an image with alt text.
- PostText: A standalone component that displays the post text.
- PostAuthor: A standalone component that displays the post author's name.
- SocialMediaFeed: A component that takes children (multiple PostCard components) and displays them in a feed layout.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SocialMediaFeed><PostCard/><PostCard/><!-- Repeat PostCard components for each post in the feed --></SocialMediaFeed></div>
COMPONENT HTML:
PostCard:
<article class=""flex flex-col mb-4 md:mb-6 lg:mb-12""><PostImage/><PostText/><PostAuthor/></article>
PostImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md"">
PostText:
<p class=""text-lg"">{post_text}</p>
PostAuthor:
<p class=""text-sm text-gray-600"">{post_author_name}</p>
SocialMediaFeed:
<div class=""flex flex-col divide-y divide-gray-200"">{children}</div>"
Venue information display,"DESCRIPTION:
The UI should display venue information, including the venue name, address, and a description. The layout should be responsive and adaptable to different screen sizes.
COMPONENTS:
- VenueInfo: a standalone component that displays the venue information.
- VenueName: a standalone component that displays the venue name.
- VenueAddress: a standalone component that displays the venue address.
- VenueDescription: a standalone component that displays the venue description.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><VenueInfo/></div>
COMPONENT HTML:
VenueInfo:
<div class=""flex flex-col gap-4""><VenueName/><VenueAddress/><VenueDescription/></div>
VenueName:
<h2 class=""text-2xl font-bold"">{venue_name}</h2>
VenueAddress:
<p class=""text-lg"">{venue_address}</p>
VenueDescription:
<p class=""text-lg"">{venue_description}</p>"
Venue information display,"DESCRIPTION:
The UI should display the essential information about a venue, including its name, address, and a brief description. The layout should be responsive, mobile-first, and accessible, with clear typography and sufficient whitespace.
COMPONENTS:
- VenueHeader: Standalone component to display the venue's name and address.
- VenueDescription: Standalone component to display a brief description of the venue.
HTML:
<div class=""max-w-md mx-auto p-4""><VenueHeader/><VenueDescription/></div>
COMPONENT HTML:
VenueHeader:
<div class=""flex justify-between mb-2""><h2 class=""text-lg font-bold"">{venue_name}</h2><p class=""text-gray-600"">{venue_address}</p></div>
VenueDescription:
<p class=""text-gray-600"">{venue_description}</p>"
Venue information display,"DESCRIPTION:
The UI should display venue information, including the venue name, address, contact details, and a description. The design should be responsive, mobile-first, and accessible. The layout should be clean and easy to read.
COMPONENTS:
- VenueInformationDisplay: (standalone) - The main component that displays the venue information.
- VenueName: (standalone) - Displays the name of the venue.
- AddressSection: (standalone) - Displays the address of the venue.
- ContactDetails: (standalone) - Displays the contact details of the venue.
- DescriptionSection: (standalone) - Displays a brief description of the venue.
HTML:
<div class=""max-w-md mx-auto p-4""><VenueInformationDisplay/></div>
COMPONENT HTML:
VenueInformationDisplay:
<div class="" flex flex-col gap-4""><VenueName/><AddressSection/><ContactDetails/><DescriptionSection/></div>
VenueName:
<h2 class=""text-2xl font-bold"">{venue_name}</h2>
AddressSection:
<div class=""flex flex-col gap-2""><h3 class=""text-lg font-bold"">Address</h3><p>{street_address}</p><p>{city}, {state} {zip_code}</p></div>
ContactDetails:
<div class=""flex flex-col gap-2""><h3 class=""text-lg font-bold"">Contact</h3><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
DescriptionSection:
<div class=""flex flex-col gap-2""><h3 class=""text-lg font-bold"">About</h3><p>{venue_description}</p></div>"
Venue information display,"DESCRIPTION:
The UI should display venue information, including the venue name, address, capacity, and a map. The design should be clean and minimalistic, with clear typography and sufficient white space.
COMPONENTS:
- VenueInfo: Standalone component that displays venue information (name, address, capacity).
- VenueMap: Standalone component that displays a map of the venue location.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><VenueInfo/><VenueMap/></div>
COMPONENT HTML:
VenueInfo:
<div class=""mb-4""><h2 class=""text-lg font-bold"">{venue_name}</h2><p class=""text-gray-600"">{venue_address}</p><p class=""text-gray-600"">Capacity: {venue_capacity}</p></div>
VenueMap:
<div class=""h-64 w-full overflow-hidden rounded""><!-- Map will be rendered here --><iframe src=""{map_url}"" frameborder=""0"" width=""100%"" height=""100%""></iframe></div>"
Customizable Themes: Brand your interface,"DESCRIPTION:
A menu with a list of theme options, where each option displays a preview of the theme and allows the user to select it.
COMPONENTS:
- ThemeOption: (standalone): a single theme option with a preview and a checkbox to select it
- ThemeSelector: (takes children): a container for a list of theme options
HTML:
<div class=""w-full p-4 bg-gray-100 rounded""><h2 class=""text-lg font-bold mb-2"">Customizable Themes</h2><ThemeSelector><ThemeOption/><ThemeOption/><ThemeOption/><!-- more theme options here --></ThemeSelector></div>
COMPONENT HTML:
ThemeOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" class=""mr-2""/><div class=""w-12 h-6 bg-{theme_color} mr-2""/><span class=""text-sm"">{theme_name}</span></div>
ThemeSelector:
<ul class=""list-none mb-0"">{children}</ul>"
Keyboard-Navigable interfaces,"DESCRIPTION:
The UI should be a simple, accessible navigation menu that can be navigated using a keyboard. It should have a clear visual focus indicator to help users navigate using their keyboard.
COMPONENTS:
- NavItem: A standalone component representing a single navigation item.
- NavList: A component that takes children, representing a list of navigation items.
HTML:
<nav aria-label=""Main Navigation"" class=""max-w-md mx-auto p-4""><NavList><NavItem/><NavItem/><NavItem/></NavList></nav>
COMPONENT HTML:
NavItem:
<li tabindex=""0"" class=""py-2 px-4 border-b border-gray-200 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none""><a href=""{href}"" class=""text-gray-700"">{label}</a><span class=""sr-only"">(current)</span></li>
NavList:
<ul role=""menu"" class=""list-none mb-4"">{children}</ul>"
Alert message display,"DESCRIPTION:
The UI should display a message with a background color and text color that indicates the type of alert (e.g. success, error, warning, info). The message should be dismissible and have a close button.
COMPONENTS:
- AlertMessage: A standalone component that displays an alert message.
- CloseButton: A standalone component that displays a close button.
HTML:
<div class=""max-w-md p-4 mx-auto mt-4""><AlertMessage/><CloseButton/></div>
COMPONENT HTML:
AlertMessage:
<div class=""bg-{alert_color}-100 border-{alert_color}-400 text-{alert_color}-700 p-4 rounded-md mb-4"">{message}</div>
CloseButton:
<button class=""absolute top-0 right-0 px-4 py-2 text-gray-600 hover:text-gray-900""><i class=""fas fa-times""></i></button>"
Alert message display,"DESCRIPTION:
The UI should display a colored alert message with a close button.
COMPONENTS:
- AlertMessage: (standalone): Displays the alert message.
- CloseButton: (standalone): A button to close the alert message.
HTML:
<div class=""alert-message""><AlertMessage/><CloseButton/></div>
COMPONENT HTML:
AlertMessage:
<p class=""text-sm text-{alert_color}"">{alert_message}</p>
CloseButton:
<button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out"" aria-label=""Close alert"">×</button>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a circular animated loading indicator that spins to indicate that the application is loading or processing something.
COMPONENTS:
- LoadingSpinner: (standalone)
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""inline-block w-8 h-8 border-4 border-solid rounded-full border-white border-t-transparent animate-spin""/>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
COMPONENTS:
- LoadingSpinner: standalone component
HTML:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Download button,"DESCRIPTION:
The UI should be a responsive download button that is accessible and SEO-friendly. It should be a rectangular button with a prominent download icon and a clear call-to-action (CTA) text. The button should be large enough to be easily clickable on mobile devices and have a subtle hover effect.
COMPONENTS:
- DownloadButton: A standalone component that consists of a download icon and a CTA text.
HTML:
<button class=""download-button""><DownloadButton/></button>
COMPONENT HTML:
DownloadButton:
<i class=""fas fa-download"" aria-hidden=""true""></i><span>{cta_text}</span>"
Download button,"DESCRIPTION:
A responsive download button that is accessible and SEO-friendly. The button should be a rounded rectangle with a subtle shadow. The text should be centered and have enough padding around it. The button should change appearance on hover.
COMPONENTS:
- DownloadButton: (standalone)
HTML:
<div class=""md:flex justify-center mt-4""><DownloadButton/></div>
COMPONENT HTML:
DownloadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full shadow-md hover:shadow-lg"">Download {download_text}</button>"
Download button,"DESCRIPTION:
A responsive, mobile-first button with a download icon and text that indicates the file type.
COMPONENTS:
- DownloadButton: A standalone component that represents a button to download a file.
HTML:
<button class=""download-button""><DownloadButton/></button>
COMPONENT HTML:
DownloadButton:
<span class=""flex items-center""><i class=""fas fa-download text-lg mr-2""></i><span class=""text-sm"">{file_type}</span><span class=""text-xs"">{file_size}</span></span>"
Download button,"DESCRIPTION:
The UI should be a responsive download button that is accessible, SEO-friendly, and follows mobile-first principles. The button should have a blue background color, white text color, and a subtle box shadow. On hover, the button should have a slight scale effect and a darker blue background color.
COMPONENTS:
- DownloadButton: A standalone component that represents the download button.
HTML:
<div class=""max-w-md mx-auto flex justify-center""><DownloadButton/></div>
COMPONENT HTML:
DownloadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded shadow-md hover:scale-110 transition duration-300 ease-in-out"">Download {file_name}</button>"
Bus ticket booking form,"DESCRIPTION:
The UI should be a simple form with fields to input passenger details, travel dates, and bus route information. It should have a clean and minimalistic design, with a responsive layout that adapts to different screen sizes.
COMPONENTS:
- PassengerInfo: A standalone component that collects passenger details (name, email, phone number).
- TravelDates: A standalone component that collects travel dates (departure and return dates).
- RouteSelection: A standalone component that displays a list of bus routes and allows the user to select one.
- FareDetails: A standalone component that displays the fare details (price, currency).
- BookingButton: A standalone component that triggers the booking process.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 mb-4 bg-white rounded""><h2 class=""text-lg font-bold mb-2"">Book Your Bus Ticket</h2><form><PassengerInfo/><TravelDates/><RouteSelection/><FareDetails/><BookingButton/></form></div>
COMPONENT HTML:
PassengerInfo:
<div class=""mb-4""><label for=""name"" class=""block mb-2"">Name</label><input type=""text"" id=""name"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""email"" class=""block mb-2"">Email</label><input type=""email"" id=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""phone"" class=""block mb-2"">Phone Number</label><input type=""tel"" id=""phone"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
TravelDates:
<div class=""mb-4""><label for=""departure_date"" class=""block mb-2"">Departure Date</label><input type=""date"" id=""departure_date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""return_date"" class=""block mb-2"">Return Date (optional)</label><input type=""date"" id=""return_date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
RouteSelection:
<div class=""mb-4""><label for=""route"" class=""block mb-2"">Select Bus Route</label><select id=""route"" class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select Route</option>{route_options} </select></div>
FareDetails:
<div class=""mb-4""><p>Fare: <span class=""font-bold"">{fare_amount} {currency}</span></p></div>
BookingButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Ticket</button>"
Bus ticket booking form,"DESCRIPTION:
The UI should resemble a simple bus ticket booking form with input fields for passenger details, travel dates, and bus route selection. The form should be responsive, mobile-friendly, and easy to navigate.
COMPONENTS:
- PassengerDetails: (standalone): A section to input passenger details (name, email, phone number)
- TravelDetails: (standalone): A section to input travel dates and bus route selection
- BookingButton: (standalone): A call-to-action button to submit the booking form
- FormError: (takes children): A component to display error messages (if any)
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 mb-4""><h1 class=""text-3xl font-bold mb-4"">Book Your Bus Ticket</h1><PassengerDetails/><TravelDetails/><BookingButton/><FormError>{error_message}</FormError></div>
COMPONENT HTML:
PassengerDetails:
<div class=""mb-4""><label for=""name"" class=""block mb-2"">Name:</label><input type=""text"" id=""name"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""email"" class=""block mb-2"">Email:</label><input type=""email"" id=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""phone"" class=""block mb-2"">Phone Number:</label><input type=""tel"" id=""phone"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
TravelDetails:
<div class=""mb-4""><label for=""from"" class=""block mb-2"">From:</label><input type=""text"" id=""from"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""to"" class=""block mb-2"">To:</label><input type=""text"" id=""to"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""date"" class=""block mb-2"">Travel Date:</label><input type=""date"" id=""date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
BookingButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Ticket</button>
FormError:
<p class=""text-red-500"">{children}</p>"
Bus ticket booking form,"DESCRIPTION:
A mobile-friendly, responsive form with fields for selecting the departure and arrival cities, travel dates, number of passengers, and a submit button.
COMPONENTS:
- TripDetails: standalone component for selecting departure and arrival cities and travel dates.
- PassengerCount: standalone component for selecting the number of passengers.
- SubmitButton: standalone component for submitting the form.
- FormField: reusable component that takes a label and input field as children.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><form><TripDetails/><PassengerCount/><SubmitButton/></form></div>
COMPONENT HTML:
TripDetails:
<div class=""mb-4""><FormField><label for=""departure-city"">Departure City:</label><select id=""departure-city"" class=""block w-full pl-10 text-sm text-gray-700""><option value="""">Select city</option><!-- options will be populated dynamically --></select></FormField><FormField><label for=""arrival-city"">Arrival City:</label><select id=""arrival-city"" class=""block w-full pl-10 text-sm text-gray-700""><option value="""">Select city</option><!-- options will be populated dynamically --></select></FormField><FormField><label for=""travel-dates"">Travel Dates:</label><input id=""travel-dates"" type=""text"" class=""block w-full pl-10 text-sm text-gray-700"" placeholder=""DD/MM/YYYY - DD/MM/YYYY""/></FormField></div>
PassengerCount:
<div class=""mb-4""><FormField><label for=""passenger-count"">Number of Passengers:</label><select id=""passenger-count"" class=""block w-full pl-10 text-sm text-gray-700""><option value=""1"">1</option><option value=""2"">2</option><option value=""3"">3</option><!-- more options can be added dynamically --></select></FormField></div>
SubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Ticket</button>
FormField:
<div class=""mb-4""><label for={labelFor}>{label}</label>{children}</div>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The UI should display a list of user suggestions with their profile pictures, names, and a ""Follow"" button. The list should be scrollable and have a header with a title.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which is a list of `UserSuggestionCard` components.
HTML:
<div class=""max-h-screen overflow-y-scroll px-4 pt-4""><h2 class=""text-lg font-bold"">Who to follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} class=""w-12 h-12 rounded-full""/><div class=""ml-4""><p class=""text-lg"">{username}</p><p class=""text-gray-600"">{name}</p></div><button class=""ml-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow </button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.
COMPONENTS:
- UserProfileSuggestion: a standalone component representing a single user suggestion, with a profile picture, username, and follow button.
- UserList: a component that takes children, rendering a list of `UserProfileSuggestion` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Who to Follow</h2><UserList><UserProfileSuggestion/><UserProfileSuggestion/><!-- more user suggestions here --></UserList></div>
COMPONENT HTML:
UserProfileSuggestion:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full mr-4""/><div><p class=""text-lg"">{username}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div></div>
UserList:
<ul class=""list-none mb-0"">{children}</ul>"
Featured Product Image Alt,"DESCRIPTION:
The UI should display a prominent product image with an alternative text, making it accessible to users with visual impairments.
COMPONENTS:
- ProductImage: A standalone component that displays the product image with an alternative text.
HTML:
<img src={image_url} alt={product_image_alt} class=""w-full h-64 object-cover rounded-lg""/>
COMPONENT HTML:
ProductImage:
<img src={image_url} alt={product_image_alt} class=""w-full h-64 object-cover rounded-lg""/>"
Password strength meter,"DESCRIPTION:
The password strength meter UI should consist of a input field for the user to enter their password, a bar that fills up to indicate the strength of the password, and a label to indicate the strength level (e.g. ""Weak"", ""Medium"", ""Strong"").
COMPONENTS:
- PasswordInput: (standalone): A input field for the user to enter their password.
- StrengthMeter: (takes children): A bar that fills up to indicate the strength of the password.
- StrengthLabel: (standalone): A label to indicate the strength level.
HTML:
<div class=""flex flex-col gap-4""><PasswordInput/><StrengthMeter><div class=""bg-gray-200 h-4 w-full rounded""></div></StrengthMeter><StrengthLabel/></div>
COMPONENT HTML:
PasswordInput:
<input type=""password"" class=""p-2 pl-10 text-sm text-gray-700""/>
StrengthMeter:
<div class=""h-4 w-full bg-gray-200 rounded""><div class=""bg-{color} h-4 w-{width}"" style=""width: {width}%;""></div>{children}</div>
StrengthLabel:
<p class=""text-sm text-gray-600"">{strength_label}</p>"
Italic text,"DESCRIPTION:
- The UI should feature a simple text display in italics.
COMPONENTS:
- ItalicText: A standalone component that displays any provided text in italics.
HTML:
<div class=""p-4""><ItalicText/></div>
COMPONENT HTML:
ItalicText:
<p class=""italic"">{text}</p>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Outlines (fill),"DESCRIPTION:
The UI should display a list of outline points with fill colors. Each outline point should have a title, a fill color, and optional description.
COMPONENTS:
- OutlinePoint: standalone component representing a single outline point.
- OutlineList: component that takes children, representing the list of outline points.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Outline Points</h2><OutlineList><OutlinePoint/><OutlinePoint/><!-- Add more OutlinePoint components here --></OutlineList></div>
COMPONENT HTML:
OutlinePoint:
<div class=""flex items-center mb-4""><div class=""w-4 h-4 bg-{fill_color} rounded-full mr-4""></div><div><h3 class=""text-md font-bold"">{title}</h3><p class=""text-gray-600 text-sm"">{description}</p></div></div>
OutlineList:
<ul class=""list-none m-0 p-0"">{children}</ul>"
Floating Action Buttons,"DESCRIPTION:
A set of floating action buttons (FABs) that can be used to perform various actions. There should be a main FAB and several smaller FABs that can be toggled on and off.
COMPONENTS:
- MainFab: Standalone component that represents the main FAB.
- MiniFab: Standalone component that represents a smaller FAB.
- FabContainer: Component that takes children, used to wrap the FABs.
HTML:
<div class=""fixed bottom-0 right-0 mb-4 mr-4""><FabContainer><MainFab/><MiniFab/><MiniFab/><MiniFab/></FabContainer></div>
COMPONENT HTML:
MainFab:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{main_fab_icon}</button>
MiniFab:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full"">{mini_fab_icon}</button>
FabContainer:
<div class=""relative"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text. The video background should be responsive and adapt to different screen sizes. The overlay text should be centered and easily readable.
COMPONENTS:
- VideoBackground: standalone component that renders a full-screen video background
- OverlayText: standalone component that renders the overlay text
HTML:
<div class=""h-screen w-full""><VideoBackground/><div class=""absolute inset-0 flex justify-center items-center""><OverlayText/></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay muted loop class=""h-full w-full object-cover""><source src=""{video_source}"" type=""video/mp4""></video>
OverlayText:
<h1 class=""text-3xl text-white"">{overlay_text}</h1>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a video background with overlay text, where the video takes up the full height and width of the screen, and the overlay text is centered on top of the video with a subtle background to make it readable.
COMPONENTS:
- VideoBackground: standalone component that renders a full-screen video background
- OverlayText: standalone component that renders text with a subtle background on top of the video
HTML:
<div class=""h-screen w-screen relative""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<div class=""absolute top-0 left-0 w-screen h-screen""><video autoplay loop muted><source src=""{video_source}"" type=""video/mp4""/></video></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl bg-gray-800 bg-opacity-50 py-4 px-8 rounded"">{overlay_text}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.
COMPONENTS:
- VideoBackground: Standalone component that renders a full-bleed video background.
- OverlayText: Standalone component that renders the overlay text.
HTML:
<div class=""flex h-screen w-full""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<video class=""h-full w-full object-cover"" loop autoplay muted><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded""><h1 class=""text-3xl"">{heading}</h1><p class=""text-lg"">{subheading}</p></div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Filter options,"DESCRIPTION:
The UI should be a filter options component that allows users to select options to filter a list of items. It should be responsive, mobile-first, and accessible. On desktop, it should be a horizontal list of options, and on mobile, it should be a vertical list.
COMPONENTS:
- FilterOption: A standalone component that represents a single filter option.
- FilterOptionsList: A component that takes children (FilterOption components) and renders them in a list.
HTML:
<div class=""flex flex-wrap md:flex-nowrap""><FilterOptionsList><FilterOption/><!-- option 1 --><FilterOption/><!-- option 2 --><!-- more options --></FilterOptionsList></div>
COMPONENT HTML:
FilterOption:
<label class=""block mb-2 md:mr-4""><input type=""checkbox"" class=""mr-2""/>{option_label}</label>
FilterOptionsList:
<ul class=""flex flex-wrap md:flex-nowrap"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a compact and visually appealing way. The design should be responsive, with the rank and badges arranged horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- RankBadge: A standalone component that displays a single badge and its associated rank.
- RankList: A component that takes children and displays a list of `RankBadge` components.
HTML:
<div class=""flex flex-wrap justify-center md:flex-nowrap""><RankList><RankBadge/><RankBadge/><RankBadge/></RankList></div>
COMPONENT HTML:
RankBadge:
<div class=""bg-gray-200 p-2 rounded-md""><img src={badgeImageUrl} alt={badgeAltText} class=""w-8 h-8""/><span class=""text-sm"">{rankName}</span></div>
RankList:
<ul class=""list-none m-0 p-0 flex flex-wrap justify-center md:flex-nowrap"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a compact and visually appealing way. The rank should be prominently displayed, and the badges should be shown as a series of icons or images below the rank.
COMPONENTS:
- UserRank: component (standalone): Displays the user's rank.
- BadgeList: component (takes children): Displays a list of badges.
HTML:
<div class=""flex flex-col items-center""><UserRank/><!-- Displays the user's rank --><BadgeList><!-- List of badges will be rendered here --></BadgeList></div>
COMPONENT HTML:
UserRank:
<div class=""text-2xl font-bold"">{rank_name}</div>
BadgeList:
<div class=""flex flex-wrap justify-center"">{children} <!-- List of Badge components will be rendered here --></div>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive and accessible way. The rank should be displayed as a title, and the badges should be displayed as a list of icons with tooltips.
COMPONENTS:
- UserRank: A standalone component that displays the user's rank as a title.
- BadgeList: A component that takes children, which are `Badge` components.
- Badge: A standalone component that displays a badge icon with a tooltip.
HTML:
<div class=""flex flex-col items-center md:flex-row md:items-start md:justify-center""><UserRank/><BadgeList><Badge/><Badge/><!-- Add more badges here --></BadgeList></div>
COMPONENT HTML:
UserRank:
<h2 class=""text-lg font-bold"">{user_rank}</h2>
BadgeList:
<ul class=""flex flex-wrap justify-center md:flex-row"">{children}</ul>
Badge:
<li class=""mr-2 mb-2 md:mr-4 md:mb-4""><img src={badge_icon} alt={badge_tooltip} class=""w-8 h-8 md:w-10 md:h-10""/><span class=""sr-only"">{badge_tooltip}</span></li>"
Editable Tables,"DESCRIPTION:
A table that can be edited, with input fields for each cell, and a ""Save"" button at the bottom.
COMPONENTS:
- EditableTableCell: (takes children): a single table cell with an input field
- EditableTableRow: (takes children): a table row with editable cells
- EditableTable: (takes children): the entire editable table with multiple rows
HTML:
<div class=""max-w-md mx-auto p-4""><EditableTable><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><!-- ... more rows ... --></EditableTable><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></div>
COMPONENT HTML:
EditableTableCell:
<td class=""border p-2"">{children}</td>
EditableTableRow:
<tr class=""bg-white"">{children}</tr>
EditableTable:
<table class=""table-auto border-collapse w-full""><tbody>{children}</tbody></table>"
Video Players/Embeds,"DESCRIPTION:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
COMPONENTS:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
HTML:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
Post Editing and Formatting Tools,"DESCRIPTION:
The UI should consist of a simple, clean layout featuring a section for post editing with a text area and a section below or beside it (depending on the screen size) for formatting tools like buttons for bold, italic, underline, and list creation. This should be mobile responsive, adjusting the layout based on the device size.
COMPONENTS:
- TextAreaEditor: (Standalone): A text input area where users can type in their posts.
- FormattingToolbar: (Standalone): A toolbar containing buttons for applying various text formats like bold, italic, underline, and list options.
HTML:
<div class=""container mx-auto px-4""><div class=""editor flex flex-col md:flex-row""><TextAreaEditor/><FormattingToolbar/></div></div>
COMPONENT HTML:
TextAreaEditor:
<div class=""text-area-editor flex flex-col flex-grow p-4""><label for=""postContent"" class=""font-semibold mb-2"">Your Post</label><textarea id=""postContent"" class=""form-textarea mt-1 block w-full border rounded-lg shadow-sm"" rows=""10""></textarea></div>
FormattingToolbar:
<div class=""formatting-toolbar p-4""><div class=""flex space-x-2 justify-center md:justify-start""><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Bold</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Italic</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Underline</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>List</span></button></div></div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: (standalone)
- StickyFooter: (standalone)
- MainContent: (takes children)
HTML:
<div class=""min-h-screen flex flex-col""><StickyHeader/><MainContent><!-- page content goes here --></MainContent><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 bg-white shadow-md py-2 px-4""><!-- header content goes here --><nav><ul><li><a href=""#"">Link 1</a></li><li><a href=""#"">Link 2</a></li><li><a href=""#"">Link 3</a></li></ul></nav></header>
StickyFooter:
<footer class=""sticky bottom-0 bg-gray-200 py-2 px-4""><!-- footer content goes here --><p>&copy; {year} My Website</p></footer>
MainContent:
<div class=""flex-grow p-4"">{children}</div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header at the top of the page, a main content area in the middle, and a sticky footer at the bottom of the page. The header and footer should remain fixed at the top and bottom of the page, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: A standalone component that represents the sticky header.
- StickyFooter: A standalone component that represents the sticky footer.
- ContentArea: A component that takes children, representing the main content area of the page.
HTML:
<div class=""h-screen flex flex-col""><StickyHeader/><ContentArea><!-- main content goes here --></ContentArea><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- header content goes here --><h1>{header_title}</h1></header>
StickyFooter:
<footer class=""sticky bottom-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- footer content goes here --><p>{copyright_text}</p></footer>
ContentArea:
<div class=""flex-1 overflow-y-auto p-4"">{children}</div>"
Job application form,"DESCRIPTION:
The UI should be a simple, responsive job application form with fields for name, email, phone number, resume upload, and a message. It should be easily accessible and readable on various devices.
COMPONENTS:
- ApplicationHeader: (standalone): A header component displaying the title of the job application form.
- FormField: (takes children): A wrapper component for each form field, including labels and input fields.
- ResumeUpload: (standalone): A component for uploading a resume file.
- MessageField: (standalone): A textarea component for the applicant's message.
- SubmitButton: (standalone): A submit button component.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ApplicationHeader/><form><FormField><label for=""name"">Name</label><input type=""text"" id=""name"" class=""w-full p-2""/></FormField><FormField><label for=""email"">Email</label><input type=""email"" id=""email"" class=""w-full p-2""/></FormField><FormField><label for=""phone"">Phone Number</label><input type=""tel"" id=""phone"" class=""w-full p-2""/></FormField><ResumeUpload/><FormField><label for=""message"">Message</label><MessageField/></FormField><SubmitButton/></form></div>
COMPONENT HTML:
ApplicationHeader:
<h2 class=""text-2xl font-bold mb-4"">Job Application Form</h2>
FormField:
<div class=""mb-4""><label for=""{inputId}"" class=""block mb-2"">{label}</label>{children}</div>
ResumeUpload:
<div class=""mb-4""><label for=""resume"" class=""block mb-2"">Resume</label><input type=""file"" id=""resume"" class=""w-full p-2""/></div>
MessageField:
<textarea id=""message"" class=""w-full p-2 h-40"" placeholder=""Write a message...""></textarea>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Now</button>"
Embedded image,"DESCRIPTION:
Since images are not permitted, we will describe an alternative UI which includes a placeholder for where the image would normally be displayed. This can be represented with a simple bordered box containing descriptive text about the image.
COMPONENTS:
- ImagePlaceholder: Standalone component. It represents where an image would typically be displayed and includes a brief description or caption.
HTML:
<div class=""container mx-auto p-4""><div class=""image-section""><ImagePlaceholder/></div></div>
COMPONENT HTML:
ImagePlaceholder:
<div class=""border-2 border-gray-300 p-4 text-center""><p class=""text-gray-500"">[Image Description or Title]</p></div>"
"Circular progress indicator, often used for loading animations","DESCRIPTION:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
COMPONENTS:
- CircularProgressIndicator: standalone
HTML:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
COMPONENT HTML:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style={`--progress: ${progress}%;`}></div></div>"
Hero/Banner Images,"DESCRIPTION:
The UI should display a responsive hero/banner image with a adjustable height that takes the full width of the screen. The image should be centered and have a subtle overlay effect for better readability.
COMPONENTS:
- HeroImage: Standalone component that contains the hero/banner image.
HTML:
<div class=""container mx-auto p-4 pt-6 md:pt-12 lg:pt-20""><HeroImage/></div>
COMPONENT HTML:
HeroImage:
<div class=""h-full w-full md:h-96 lg:h-128 relative overflow-hidden""><img src=""{hero_image_url}"" alt=""{hero_image_alt}"" class=""w-full h-full object-cover object-center""/><div class=""absolute inset-0 bg-gray-900 opacity-50""></div><!-- Add overlay text or other elements here --></div>"
Responsive Maps and Directions,"DESCRIPTION:
The UI should include two principal sections:
   - A responsive map display area that adjusts to screen size.
   - A sidebar or an overlay section for entering directions which contains input fields for the start and end locations, and a submit button to fetch directions.
COMPONENTS:
- MapArea: Standalone. This component will display the map.
- DirectionsForm: Takes children. It will contain the form for inputting directions data.
- InputField: Standalone. This is used for creating text inputs within forms.
- ButtonSubmit: Standalone. A button specifically styled for form submissions.
HTML:
<div class=""container mx-auto px-4""><div class=""flex flex-col md:flex-row""><div class=""md:w-3/4 lg:w-4/5""><MapArea/></div><div class=""md:w-1/4 lg:w-1/5 mt-4 md:mt-0""><DirectionsForm><InputField/><InputField/><ButtonSubmit/></DirectionsForm></div></div></div>
COMPONENT HTML:
MapArea:
<div id=""{map_container_id}"" class=""w-full h-64 md:h-auto""><!-- Map displays here --></div>
DirectionsForm:
<form class=""space-y-4 p-4 shadow-lg rounded-lg bg-white"">{children} </form>
InputField:
<input type=""text"" class=""form-input w-full rounded-md border-gray-300 shadow-sm"" placeholder=""{input_placeholder}""/>
ButtonSubmit:
<button type=""submit"" class=""w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"">Get Directions </button>"
Contact list with avatar and online status,"DESCRIPTION:
A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.
COMPONENTS:
- ContactItem: A standalone component representing a single contact.
- Avatar: A standalone component representing the avatar image of a contact.
- OnlineStatus: A standalone component indicating the online status of a contact.
HTML:
<main class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""flex flex-wrap justify-center""><ContactItem/><ContactItem/><ContactItem/></ul></main>
COMPONENT HTML:
ContactItem:
<li class=""flex items-center mb-4""><Avatar/><div class=""ml-2""><p class=""text-lg"">{contact_name}</p><OnlineStatus/></div></li>
Avatar:
<img src={avatar_url} alt=""{contact_name}'s avatar"" class=""w-12 h-12 rounded-full""/>
OnlineStatus:
<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>{online_status === 'online' ? 'Online' : 'Offline'}</span>"
Upload button,"DESCRIPTION:
A simple upload button with a label ""Upload a file"" and an icon to indicate file upload.
COMPONENTS:
- UploadButton: A standalone component that contains a button with a label and an icon.
HTML:
<UploadButton/>
COMPONENT HTML:
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" typeof=""button""><i class=""fas fa-upload mr-2"" aria-hidden=""true""></i><span>Upload a file</span></button>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media sharing buttons, each with an icon and a text label. The buttons should be medium-sized, round, and have a slight hover effect. The row should be centered and have some padding.
COMPONENTS:
- SocialSharingButton: (standalone): a single social media sharing button with an icon and text label
- SocialSharingButtonsRow: (takes children): a horizontal row of social sharing buttons
HTML:
<div class=""flex justify-center py-4""><SocialSharingButtonsRow><SocialSharingButton/><SocialSharingButton/><SocialSharingButton/><!-- add more buttons here --></SocialSharingButtonsRow></div>
COMPONENT HTML:
SocialSharingButton:
<a href=""{sharing_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-200""><i class={`fab fa-${social_media_icon} text-lg`}></i><span class=""sr-only"">{social_media_name}</span></a>
SocialSharingButtonsRow:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Interactive element used for actions like submitting forms or navigating,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly interactive element that can be used for actions like submitting forms or navigating. It should have a clear and consistent visual design, with sufficient color contrast and clear typography.
COMPONENTS:
- Button: A standalone component that renders a clickable button.
HTML:
<Button/>
COMPONENT HTML:
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""{button_type}"">{button_text}</button>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
User Profile and Reputation Systems,"DESCRIPTION:
The UI should display a user's profile information, including their profile picture, username, bio, and reputation score. The reputation score should be displayed prominently, with an option to view a breakdown of the score.
COMPONENTS:
- UserProfile: standalone component that contains the user's profile information
- UserProfilePicture: standalone component that displays the user's profile picture
- UserProfileInfo: standalone component that displays the user's username and bio
- ReputationScore: standalone component that displays the user's reputation score
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfile/></div>
COMPONENT HTML:
UserProfile:
<div class=""flex flex-col md:flex-row items-center md:items-start""><UserProfilePicture/><UserProfileInfo/><ReputationScore/></div>
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""rounded-full w-24 h-24 md:w-48 md:h-48 object-cover"">
UserProfileInfo:
<div class=""flex flex-col ml-4 md:ml-6""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-600"">{bio}</p></div>
ReputationScore:
<div class=""text-lg font-bold flex items-center""><span class=""mr-2"">{reputation_score}</span><span class=""text-gray-600"">Reputation Score</span><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Breakdown</button></div>"
User Profile and Reputation Systems,"DESCRIPTION:
A user profile and reputation system that displays the user's profile information, reputation score, and badges earned.
COMPONENTS:
- UserProfileCard: standalone component
- BadgeList: takes children
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><UserProfileCard/><div class=""mt-4""><h2 class=""text-lg font-bold"">Reputation</h2><BadgeList><!-- badges will be inserted here --></BadgeList></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p><p class=""text-sm text-gray-500"">{joined_at}</p></div>
BadgeList:
<ul class=""flex flex-wrap"">{children}</ul>"
Customer Review Text,"DESCRIPTION:
The UI should display a customer review text with the customer's name, rating, and review text. The layout should be responsive and mobile-first, with a clear hierarchy of information.
COMPONENTS:
- CustomerReview: a standalone component that displays a single customer review.
- Rating: a standalone component that displays a rating (e.g., 5 stars).
- ReviewText: a standalone component that displays the review text.
HTML:
<div class=""flex flex-col mb-4""><CustomerReview/></div>
COMPONENT HTML:
CustomerReview:
<div class=""flex items-center mb-2""><Rating/><p class=""text-lg font-bold"">{customerName}</p></div><div class=""text-gray-600""><ReviewText/></div>
Rating:
<div class=""flex items-center"">{Array(rating).fill(null).map(() =>( <span class=""text-yellow-400 text-lg"">&#9733;</span>))}</div>
ReviewText:
<p>{reviewText}</p>"
Customer Review Text,"DESCRIPTION:
The UI should display a customer review in a clean and readable format, with the customer's name, rating, and review text.
COMPONENTS:
- CustomerReview: a standalone component that displays a single customer review.
- Rating: a standalone component that displays a rating (e.g., 5 stars).
- ReviewText: a standalone component that displays the review text.
HTML:
<div class=""flex flex-col p-4""><CustomerReview/></div>
COMPONENT HTML:
CustomerReview:
<div class=""flex flex-col mb-4""><Rating/><h5 class=""mb-1"">{customer_name}</h5><ReviewText/></div>
Rating:
<div class=""flex mb-2"">{/* 5 star rating icons */ } <span class=""ml-2 text-sm"">{rating}/5</span></div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Features Grid: Highlight key benefits in a grid layout,"DESCRIPTION:
A responsive grid layout with 3-4 columns, showcasing key benefits of a product or service. Each grid item should have an icon, a heading, and a brief description.
COMPONENTS:
- FeatureItem: (standalone): A single feature item in the grid, containing an icon, heading, and description.
- FeaturesGrid: (takes children): The container element for the feature items, managing the grid layout.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturesGrid><FeatureItem/><FeatureItem/><FeatureItem/><!-- Add more FeatureItem components as needed --></FeaturesGrid></section>
COMPONENT HTML:
FeatureItem:
<div class=""flex flex-col items-center p-4 lg:p-6""><i class=""text-3xl {icon_class} mb-4""/><!-- icon --><h3 class=""text-lg font-bold"">{heading}</h3><p class=""text-gray-600"">{description}</p></div>
FeaturesGrid:
<div class=""grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8"">{children}</div>"
Audio player with progress,"DESCRIPTION:
The UI should display a simple audio player with a progress bar that updates as the audio plays. It should have a play/pause button, and a progress bar that shows the current position of the audio.
COMPONENTS:
- AudioPlayer: A standalone component that renders the entire audio player UI.
- PlayPauseButton: A standalone component that renders the play/pause button.
- ProgressBar: A standalone component that renders the progress bar.
HTML:
<div class=""flex flex-col items-center p-4""><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<div class=""flex flex-col items-center mb-4""><PlayPauseButton/><ProgressBar/><p class=""text-sm"">{currentTime}/ {duration}</p></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{isPlaying ? 'Pause' : 'Play'}</button>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style={{ width: `${progress}%` }}/></div>"
Latest news section,"DESCRIPTION:
The latest news section should display a list of news articles with a title, description, and a ""Read more"" button. It should be responsive, with a maximum of 3 columns on large screens and 1 column on small screens.
COMPONENTS:
- NewsArticleCard: standalone component that displays a single news article
HTML:
<section class=""container mx-auto p-4""><h2>Latest News</h2><div class=""grid gap-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1""><NewsArticleCard/><NewsArticleCard/><NewsArticleCard/><!-- add more NewsArticleCard components here --></div></section>
COMPONENT HTML:
NewsArticleCard:
<article class=""bg-white shadow-md rounded p-4""><h3>{article_title}</h3><p>{article_description}</p><a href=""{article_link}"" class=""text-blue-600 hover:text-blue-900 transition duration-300"">Read more</a></article>"
Retweet button to share tweets,"DESCRIPTION:
The UI should consist of a button labeled ""Retweet"" with a simple icon suggestive of sharing or retweeting (we'll simulate this with text since SVGs are not allowed). The button should be visually appealing and easy to spot, ideally with a contrasting color to stand out.
COMPONENTS:
- RetweetButton: Standalone. This component will represent the retweet button, including visual styles and the labeled text.
HTML:
<div class=""retweet-container""><RetweetButton/></div>
COMPONENT HTML:
RetweetButton:
<!-- Retweet button with a 'retweet' label; uses TailwindCSS for styling --><button class=""bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded inline-flex items-center""><span class=""mr-2"">🔁</span><span>Retweet</span></button>"
Modal window,"DESCRIPTION:
A modal window that appears on top of the main content, with a darkened background, a white overlay with a title, content, and a close button.
COMPONENTS:
- ModalOverlay: (standalone): The darkened background that covers the main content.
- ModalWindow: (takes children): The white overlay that contains the title, content, and close button.
- ModalHeader: (takes children): The top section of the modal window that displays the title.
- ModalCloseButton: (standalone): The button to close the modal window.
- ModalContent: (takes children): The main content area of the modal window.
HTML:
<div class=""fixed inset-0 z-50""><ModalOverlay/><div class=""fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 p-4 bg-white rounded-md shadow-md""><ModalWindow><ModalHeader><h2>{modal_title}</h2><ModalCloseButton/></ModalHeader><ModalContent>{children}
</ModalContent></ModalWindow></div></div>
COMPONENT HTML:
ModalOverlay:
<div class=""fixed inset-0 bg-gray-700 bg-opacity-50""></div>
ModalWindow:
<div class=""bg-white rounded-md shadow-md"">{children}</div>
ModalHeader:
<div class=""flex justify-between mb-4"">{children}</div>
ModalCloseButton:
<button class=""text-gray-400 hover:text-gray-600 transition duration-300 ease-in-out focus:outline-none"" aria-label=""Close modal"">×</button>
ModalContent:
<div class=""px-4"">{children}</div>"
Weather forecast display,"DESCRIPTION:
The UI should display the current weather and forecast for a specific location. It should show the current temperature, weather condition (e.g. sunny, cloudy, rainy), and a 5-day forecast.
COMPONENTS:
- WeatherHeader: standalone, displays the location and current weather
- CurrentWeather: standalone, displays the current temperature and weather condition
- Forecast: takes children, displays a 5-day forecast
- ForecastDay: standalone, displays the weather forecast for a single day
HTML:
<div class=""container mx-auto p-4""><WeatherHeader/><CurrentWeather/><Forecast><ForecastDay/><ForecastDay/><ForecastDay/><ForecastDay/><ForecastDay/></Forecast></div>
COMPONENT HTML:
WeatherHeader:
<h1 class=""text-3xl"">{location}</h1>
CurrentWeather:
<div class=""flex items-center""><p class=""text-4xl"">{temperature}&deg;C</p><img src={weather_icon} alt={weather_condition} class=""w-12 h-12 ml-2""/><p class=""text-lg"">{weather_condition}</p></div>
Forecast:
<div class=""flex flex-wrap justify-center"">{children}</div>
ForecastDay:
<div class=""flex flex-col items-center w-20 h-20 mr-4 mb-4""><p class=""text-lg"">{day}</p><img src={icon} alt={condition} class=""w-8 h-8""/><p class=""text-lg"">{temperature}&deg;C</p></div>"
Weather forecast display,"DESCRIPTION:
The UI should display the current weather condition, temperature, and a 5-day forecast. The layout should be responsive, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- WeatherCard: A standalone component that displays the current weather condition and temperature.
- ForecastList: A component that takes children, displaying a list of forecast items.
- ForecastItem: A standalone component that displays a single day's forecast.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><WeatherCard/><ForecastList><ForecastItem/><ForecastItem/><ForecastItem/><ForecastItem/><ForecastItem/></ForecastList></div>
COMPONENT HTML:
WeatherCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-2xl"">Current Weather</h2><p>{current_weather_condition}</p><p>{temperature}°C</p></div>
ForecastList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
ForecastItem:
<li class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg"">{forecast_date}</h3><p>{forecast_condition}</p><p>{forecast_temp}°C</p></li>"
Weather forecast display,"DESCRIPTION:
The UI should display the current weather and forecast for a specific location. It should show the current temperature, weather condition (e.g., sunny, rainy, cloudy), and a brief description of the weather. Additionally, it should display a 5-day forecast with the date, temperature, and weather condition for each day.
COMPONENTS:
- WeatherCard: Standalone component that displays the current weather information (temperature, condition, description).
- ForecastCard: Standalone component that displays a single day's forecast (date, temperature, condition).
- ForecastList: Component that takes children (multiple ForecastCard components) and displays a list of forecasts.
HTML:
<div class=""container mx-auto p-4""><WeatherCard/><h2 class=""mt-4"">5-Day Forecast</h2><ForecastList><ForecastCard/><ForecastCard/><ForecastCard/><ForecastCard/><ForecastCard/></ForecastList></div>
COMPONENT HTML:
WeatherCard:
<div class=""bg-white rounded shadow-md p-4""><h1 class=""text-3xl"">{current_temp}°C</h1><p class=""text-lg"">{weather_condition}</p><p class=""text-gray-600"">{weather_description}</p></div>
ForecastCard:
<div class=""bg-white rounded shadow-md p-4 mb-4""><p class=""text-sm"">{forecast_date}</p><h2 class=""text-lg"">{forecast_temp}°C</h2><p class=""text-gray-600"">{forecast_condition}</p></div>
ForecastList:
<ul class=""list-none mb-0"">{children}</ul>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Control for adjusting a value within a range by dragging a handle along a track,"DESCRIPTION:
The UI should display a slider with a handle that can be dragged along a track to adjust a value within a range. The slider should have a clear minimum and maximum value indication, and the current value should be displayed next to the slider.
COMPONENTS:
- SliderTrack: A standalone component that renders the track of the slider.
- SliderHandle: A standalone component that renders the draggable handle of the slider.
- SliderValueDisplay: A standalone component that displays the current value of the slider.
- RangeSlider: A component that wraps the entire slider UI and takes children (`SliderTrack`, `SliderHandle`, and `SliderValueDisplay`).
HTML:
<div class=""flex items-center""><RangeSlider><SliderTrack/><SliderHandle/><SliderValueDisplay/></RangeSlider></div>
COMPONENT HTML:
SliderTrack:
<div class=""w-full h-1 rounded-full bg-gray-200 relative""><!-- track background --><div class=""h-full bg-gray-400 absolute"" style={{ width: `${trackProgress}%`, }}></div></div>
SliderHandle:
<div class=""w-6 h-6 rounded-full bg-gray-800 absolute"" style={{ left: `${handleLeft}px`, }}></div>
SliderValueDisplay:
<p class=""text-gray-600"">{currentValue}</p>
RangeSlider:
<div class=""flex items-center"">{children}</div>"
Targets/Anchor Links,"DESCRIPTION:
The UI should display a list of target links, which are anchor links that jump to specific sections of a webpage. The links should be displayed in a vertical list, with each link on a new line. The links should be highlighted when hovered over. The UI should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- TargetLink: a standalone component that represents a single target link.
HTML:
<div class=""flex flex-col space-y-4""><TargetLink/><TargetLink/><TargetLink/><!-- Add more TargetLink components as needed --></div>
COMPONENT HTML:
TargetLink:
<a href=""#{target_id}"" class=""text-blue-600 hover:text-blue-900 hover:underline"">{target_text}</a>"
Recently visited pages,"DESCRIPTION:
A list of recently visited pages, with each page showing its title, URL, and a ""remove"" button to remove it from the list.
COMPONENTS:
- VisitedPagesList: component that takes children (a list of `VisitedPage` components)
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Recently Visited Pages</h2><VisitedPagesList><!-- list of VisitedPage components will be rendered here --></VisitedPagesList></div>
COMPONENT HTML:
VisitedPagesList:
<ul class=""list-none mb-0"">{children}</ul>"
Email subscription popup,"DESCRIPTION:
- The UI should be a modal popup that appears centrally on the screen. It should have a light background and a close button at the top-right corner for dismissing the popup. The main content includes a headline, a brief description or prompt to encourage subscription, an email input field, and a submit button. The popup should be overlaid on a semi-transparent background that covers the entire viewport, suggesting focus on the subscription form.
COMPONENTS:
- ModalOverlay: Standalone component. It serves as a semi-transparent backdrop for the modal.
- SubscriptionModal: Takes children. This component is the central popup that contains the subscription form.
- CloseButton: Standalone component. A button for closing the popup.
- SubscriptionForm: Takes children. Holds the input field and submit button for the email subscription.
HTML:
<ModalOverlay/><SubscriptionModal><CloseButton/><h2>Subscribe to Our Newsletter</h2><p>Get the latest news and updates right in your inbox. Join our mailing list.</p><SubscriptionForm><label for=""email"">Email:</label><input type=""email"" id=""email"" required placeholder=""Enter your email""/><button type=""submit"">Subscribe</button></SubscriptionForm></SubscriptionModal>
COMPONENT HTML:
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50""></div>
SubscriptionModal:
<div class=""fixed inset-0 flex items-center justify-center p-4""><div class=""bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto relative"">{children} </div></div>
CloseButton:
<button class=""absolute top-2 right-2 text-black"" aria-label=""Close modal"">&#x2715; </button>
SubscriptionForm:
<form class=""mt-4"">{children} </form>"
Hotel reservation form,"DESCRIPTION:
The UI should be a simple hotel reservation form with input fields for guest information, check-in and check-out dates, room type, and a submit button. The form should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- GuestInformationComponent: (standalone) - contains input fields for guest name, email, and phone number
- DatePickerComponent: (standalone) - a single date picker for check-in and check-out dates
- RoomTypeComponent: (standalone) - a dropdown menu for selecting room type
- SubmitButtonComponent: (standalone) - a submit button for the form
- ReservationFormComponent: (takes children) - the outer container for the form
HTML:
<ReservationFormComponent><GuestInformationComponent/><DatePickerComponent/><RoomTypeComponent/><SubmitButtonComponent/></ReservationFormComponent>
COMPONENT HTML:
GuestInformationComponent:
<div class=""flex flex-wrap -mx-3 mb-6""><div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""name"">Name </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""name"" type=""text""/></div><div class=""w-full md:w-1/2 px-3""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""email"">Email </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""email"" type=""email""/></div><div class=""w-full md:w-1/2 px-3""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""phone"">Phone </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""phone"" type=""tel""/></div></div>
DatePickerComponent:
<div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""checkin_date"">Check-in Date </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""checkin_date"" type=""date""/><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""checkout_date"">Check-out Date </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""checkout_date"" type=""date""/></div>
RoomTypeComponent:
<div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""room_type"">Room Type </label><select class=""block appearance-none w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""room_type""><option value="""">Select room type</option><option value=""single"">Single</option><option value=""double"">Double</option><option value=""suite"">Suite</option></select></div>
SubmitButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""submit"">Book Now</button>
ReservationFormComponent:
<form class=""max-w-md w-full mx-auto p-4 pt-6"">{children}</form>"
Hotel reservation form,"DESCRIPTION:
The UI should be a simple hotel reservation form with input fields for guest's information, room preferences, and dates of stay. The form should be responsive, mobile-first, and accessible.
COMPONENTS:
- GuestInfoForm: standalone, collects guest's personal information
- RoomPreferenceSelect: standalone, allows selection of room type and number of rooms
- DateInput: standalone, collects check-in and check-out dates
- SubmitButton: standalone, submits the reservation form
HTML:
<form class=""container max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><GuestInfoForm/><RoomPreferenceSelect/><DateInput/><SubmitButton/></form>
COMPONENT HTML:
GuestInfoForm:
<div class=""mb-4""><label for=""name"" class=""block text-sm font-bold mb-2"">Name:</label><input type=""text"" id=""name"" class=""w-full pl-2 py-2 text-sm text-gray-700""/><label for=""email"" class=""block text-sm font-bold mb-2"">Email:</label><input type=""email"" id=""email"" class=""w-full pl-2 py-2 text-sm text-gray-700""/></div>
RoomPreferenceSelect:
<div class=""mb-4""><label for=""room-type"" class=""block text-sm font-bold mb-2"">Room Type:</label><select id=""room-type"" class=""w-full pl-2 py-2 text-sm text-gray-700"">{room_types} </select><label for=""num-rooms"" class=""block text-sm font-bold mb-2"">Number of Rooms:</label><input type=""number"" id=""num-rooms"" class=""w-full pl-2 py-2 text-sm text-gray-700""/></div>
DateInput:
<div class=""mb-4""><label for=""check-in"" class=""block text-sm font-bold mb-2"">Check-in:</label><input type=""date"" id=""check-in"" class=""w-full pl-2 py-2 text-sm text-gray-700""/><label for=""check-out"" class=""block text-sm font-bold mb-2"">Check-out:</label><input type=""date"" id=""check-out"" class=""w-full pl-2 py-2 text-sm text-gray-700""/></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reserve Room</button>"
Hotel reservation form,"DESCRIPTION:
A mobile-friendly hotel reservation form with fields for guest information, room preferences, and payment details. The form should be easily accessible and responsive.
COMPONENTS:
- GuestInformationForm: (standalone): A form for collecting guest information.
- RoomPreferenceSelect: (standalone): A dropdown select for choosing room preferences.
- PaymentDetailsForm: (standalone): A form for collecting payment details.
- SubmitButton: (standalone): A button to submit the form.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Hotel Reservation Form</h1><GuestInformationForm/><RoomPreferenceSelect/><PaymentDetailsForm/><SubmitButton/></div>
COMPONENT HTML:
GuestInformationForm:
<form class=""mb-4""><label class=""block mb-2"" htmlFor=""guestName"">Full Name:</label><input type=""text"" id=""guestName"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label class=""block mb-2"" htmlFor=""email"">Email:</label><input type=""email"" id=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label class=""block mb-2"" htmlFor=""phone"">Phone Number:</label><input type=""tel"" id=""phone"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></form>
RoomPreferenceSelect:
<div class=""mb-4""><label class=""block mb-2"" htmlFor=""roomType"">Room Type:</label><select id=""roomType"" class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select Room Type</option><option value=""single"">Single</option><option value=""double"">Double</option><option value=""suite"">Suite</option></select></div>
PaymentDetailsForm:
<form class=""mb-4""><label class=""block mb-2"" htmlFor=""cardNumber"">Card Number:</label><input type=""text"" id=""cardNumber"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label class=""block mb-2"" htmlFor=""expirationDate"">Expiration Date:</label><input type=""date"" id=""expirationDate"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label class=""block mb-2"" htmlFor=""cvv"">CVV:</label><input type=""text"" id=""cvv"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></form>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, with each item displaying a product image, name, rating, price, and a brief description. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens.
COMPONENTS:
- ProductDescriptionCard: A standalone component representing a single product description.
- ProductDescriptionList: A component that takes children, representing the list of product descriptions.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Descriptions</h2><ul class=""flex flex-wrap justify-center""><ProductDescriptionList><!-- Repeat for each product description --><ProductDescriptionCard/></ProductDescriptionList></ul></div>
COMPONENT HTML:
ProductDescriptionCard:
<li class=""w-full md:w-1/2 lg:w-1/3 p-4""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover mb-2""/><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-sm"">{product_rating}/ 5</p><p class=""text-lg"">{product_price}</p><p class=""text-sm"">{product_description}</p></li>
ProductDescriptionList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Blog post display,"DESCRIPTION:
The UI should display a blog post with a title, author, date, content, and tags. The layout should be clean and readable, with a focus on the content. On smaller screens, the layout should be single-column, and on larger screens, the layout should be two-column with the content on the left and the author information on the right.
COMPONENTS:
- BlogPostHeader: Standalone component to display the blog post title, author, and date.
- BlogPostContent: Standalone component to display the blog post content.
- TagList: Standalone component to display the blog post tags.
- AuthorInfo: Standalone component to display the author information.
HTML:
<div class=""max-w-md mx-auto p-4 md:flex md:flex-row""><div class=""md:w-2/3 md:pr-4""><BlogPostHeader/><BlogPostContent/></div><aside class=""md:w-1/3 md:pl-4""><AuthorInfo/><TagList/></aside></div>
COMPONENT HTML:
BlogPostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{post_title}</h1><p class=""text-gray-600"">By {author_name} on {date}</p></header>
BlogPostContent:
<div class=""prose"">{post_content}</div>
TagList:
<ul class=""list-none mb-4"">{tags.map((tag) =>( <li key={tag} class=""inline-block mr-2""><a href={`tags/${tag}`} class=""text-gray-600 hover:text-gray-900"">{tag}</a></li>))}</ul>
AuthorInfo:
<div class=""text-gray-600""><p>Written by {author_name}</p><p>{author_bio}</p></div>"
Blog post display,"DESCRIPTION:
The UI should display a blog post with a title, author, date, and content. The title should be prominent, the author and date should be smaller, and the content should be the main focus. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- BlogPost: standalone component that displays a single blog post
- PostHeader: standalone component that displays the title, author, and date of the post
- PostContent: standalone component that displays the content of the post
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:px-12""><BlogPost/></div>
COMPONENT HTML:
BlogPost:
<div class=""flex flex-col""><PostHeader/><PostContent/></div>
PostHeader:
<div class=""mb-2""><h1 class=""text-3xl font-bold"">{title}</h1><p class=""text-gray-600 text-sm"">By {author} on {date}</p></div>
PostContent:
<div class=""prose max-w-full mx-auto"">{content}</div>"
GloballyUniqueIdentifiableElements,"DESCRIPTION:
The UI should display a list of unique elements, each with a unique identifier, name, and description.
COMPONENTS:
- UniqueIdCard: A standalone component that displays a single unique element's details.
- UniqueIdList: A component that takes children, which are multiple **UniqueIdCard** components.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Globally Unique Identifiable Elements</h1><UniqueIdList><UniqueIdCard/><UniqueIdCard/><UniqueIdCard/><!-- Add more UniqueIdCard components here --></UniqueIdList></div>
COMPONENT HTML:
UniqueIdCard:
<div class=""bg-white shadow-md p-4 rounded mb-4""><h2 class=""text-lg font-bold"">{element_name}</h2><p class=""text-gray-600"">{element_description}</p><p class=""text-sm text-gray-500"">Unique ID: {unique_id}</p></div>
UniqueIdList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet in a compact, readable format. It should include the user's profile picture, username, tweet text, and timestamp. The tweet text should be the primary focus, with the user's profile picture and username secondary. The timestamp should be displayed lightly.
COMPONENTS:
- UserProfilePicture: standalone component to display the user's profile picture.
- Username: standalone component to display the user's username.
- TweetText: standalone component to display the tweet text.
- Timestamp: standalone component to display the timestamp.
- Tweet: takes children, a container component to display the entire tweet.
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-white rounded shadow-md""><Tweet><UserProfilePicture/><div class=""flex items-center""><Username/><Timestamp/></div><TweetText/></Tweet></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User profile picture"" class=""w-12 h-12 rounded-full mr-2""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
Timestamp:
<small class=""text-gray-500"">{timestamp}</small>
Tweet:
<div class=""flex flex-wrap"">{children}</div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet post with the user's profile picture, username, timestamp, tweet content, and a reply button.
COMPONENTS:
- UserProfilePicture: Standalone component that displays the user's profile picture.
- TweetContent: Takes children component that displays the tweet content.
- ReplyButton: Standalone component that displays a reply button.
- TweetPost: Takes children component that displays the entire tweet post.
HTML:
<TweetPost><UserProfilePicture/><TweetContent><h2>{username}</h2><p>{tweet_content}</p><p>{timestamp}</p></TweetContent><ReplyButton/></TweetPost>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full""/>
TweetContent:
<div class=""ml-4"">{children}</div>
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Reply</button>
TweetPost:
<div class=""flex mb-4"">{children}</div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.
COMPONENTS:
- TweetHeader: standalone, displays the profile picture, username, handle, and timestamp
- TweetText: standalone, displays the text of the tweet
- TweetMedia: standalone, displays any media associated with the tweet (e.g. images or videos)
- TweetFooter: standalone, displays any additional information or actions (e.g. likes, retweets, replies)
HTML:
<div class=""flex w-full p-4 rounded-lg shadow-md bg-white""><TweetHeader/><TweetText/><TweetMedia/><TweetFooter/></div>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center mb-2""><img src=""{profilePictureUrl}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-2""/><div><span class=""text-lg font-bold"">{username}</span><span class=""text-gray-600"">@{handle}</span><span class=""text-gray-600"">{timestamp}</span></div></div>
TweetText:
<p class=""text-lg"">{tweetText}</p>
TweetMedia:
<!-- If there is media, display it -->{mediaUrl && ( <img src={mediaUrl} alt=""Tweet media"" class=""w-full mb-2""/>)}
TweetFooter:
<div class=""flex justify-between text-gray-600 mb-2""><span>Likes: {likeCount}</span><span>Retweets: {retweetCount}</span><span>Replies: {replyCount}</span><!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Forum Categories and Subforums,"DESCRIPTION:
The UI should display a list of forum categories, each containing a title and a list of subforums. Each subforum should also display a title and a brief description.
COMPONENTS:
- ForumCategory: standalone component that displays a category title and a list of subforums.
- Subforum: standalone component that displays a subforum title and description.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Forum Categories</h1><ul><ForumCategory/><ForumCategory/><!-- Add more ForumCategory components here --></ul></div>
COMPONENT HTML:
ForumCategory:
<li class=""py-2""><h2 class=""text-lg font-bold"">{category_title}</h2><ul><Subforum/><Subforum/><!-- Add more Subforum components here --></ul></li>
Subforum:
<li class=""py-2""><h3 class=""text-md font-bold"">{subforum_title}</h3><p>{subforum_description}</p></li>"
Product Feature Icon,"DESCRIPTION:
A small icon with a brief description, indicating a key feature of a product.
COMPONENTS:
- FeatureIcon: A standalone component representing a single feature icon.
- FeatureDescription: A standalone component representing a brief description of a feature.
HTML:
<div class=""flex items-center mb-4""><FeatureIcon/><FeatureDescription/></div>
COMPONENT HTML:
FeatureIcon:
<i class=""fas fa-{icon_name} text-lg mr-2"" aria-hidden=""true""></i>
FeatureDescription:
<p class=""text-sm"">{feature_description}</p>"
Textures,"DESCRIPTION:
The UI should display a collection of texture images, each accompanied by a brief title and description. The layout will be a responsive grid that adjusts to the screen size, presenting textures in a visually appealing and accessible manner.
COMPONENTS:
- TextureCard: (Standalone): A card-like component that displays a texture image, its title, and a short description.
- TextureGrid: (Takes children): A grid container that organizes multiple TextureCard components in a responsive layout.
HTML:
<main><h1>Explore Textures</h1><TextureGrid><TextureCard/><TextureCard/><TextureCard/><!-- More TextureCard components could be added here --></TextureGrid></main>
COMPONENT HTML:
TextureCard:
<article class=""p-4 bg-white shadow rounded-lg""><img src=""{texture_image_url}"" alt=""{texture_image_alt}"" class=""w-full h-48 object-cover rounded-t-lg""><div class=""py-2""><h2 class=""text-lg font-semibold"">{texture_title}</h2><p class=""text-sm text-gray-600"">{texture_description}</p></div></article>
TextureGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children} </div>"
Hero Video: Engage visitors with a captivating video,"DESCRIPTION:
The Hero Video component should take up the full width and height of the viewport, pushing the rest of the content below the fold. It should have a dark overlay to enhance the video's visibility, and a prominent call-to-action (CTA) button in the center.
COMPONENTS:
- HeroVideoContainer: (standalone): Wraps the entire Hero Video section.
- VideoOverlay: (standalone): Dark overlay for the video.
- HeroVideo: (standalone): The actual video element.
- CallToAction: (standalone): The prominent CTA button.
HTML:
<div class=""min-h-screen flex items-center justify-center""><HeroVideoContainer/></div>
COMPONENT HTML:
HeroVideoContainer:
<div class=""absolute top-0 left-0 w-full h-full""><VideoOverlay/><HeroVideo/><CallToAction/></div>
VideoOverlay:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-900 opacity-75""></div>
HeroVideo:
<video class=""w-full h-full object-cover"" autoplay muted loop><source src=""{video_source}"" type=""video/mp4""/></video>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Personalized Dashboard with Project Insights,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays personalized project insights to the user. The dashboard should have a clean and modern design, with clear typography and adequate whitespace. The layout should adapt to different screen sizes, with a maximum width of 1200px.
COMPONENTS:
- ProjectCard: A standalone component that displays a single project's details, including its name, description, and progress metrics.
- MetricCard: A standalone component that displays a single metric, such as project completion percentage or task count.
- ProjectList: A component that takes children, which are a list of `ProjectCard` components.
- Header: A standalone component that displays the dashboard title and any additional header elements.
- Sidebar: A standalone component that displays navigation links and other sidebar elements.
HTML:
<div class=""flex h-screen""><Sidebar/><div class=""flex-1 overflow-y-auto""><Header/><div class=""px-4 pt-4""><h1 class=""text-2xl font-bold"">{dashboard_title}</h1><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><ProjectList><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectList></div></div></div></div>
COMPONENT HTML:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{project_name}</h2><p class=""text-gray-600"">{project_description}</p><div class=""flex justify-between mt-2""><MetricCard/><MetricCard/></div></div>
MetricCard:
<div class=""bg-white shadow-md rounded p-2""><p class=""text-lg font-bold"">{metric_value}</p><p class=""text-gray-600"">{metric_label}</p></div>
ProjectList:
<!-- This component will render child ProjectCard components -->{children}
Header:
<header class=""bg-gray-100 py-4""><nav class=""container mx-auto flex justify-between""><h1 class=""text-lg font-bold"">{dashboard_title}</h1><ul class=""flex""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li></ul></nav></header>
Sidebar:
<aside class=""w-64 bg-gray-100 p-4""><nav><ul><li class=""mb-2""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li></ul></nav></aside>"
Shadows (box),"DESCRIPTION:
A box with a shadow effect, which gives the impression of depth.
COMPONENTS:
- ShadowBox: A standalone component that displays a box with a shadow effect.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:pt-12""><ShadowBox/></div>
COMPONENT HTML:
ShadowBox:
<div class=""bg-white p-4 shadow-md rounded""><!-- Add content here --></div>"
Navigation Menu Item Link,"DESCRIPTION:
The UI should feature a single navigation menu item link, which is typically part of a larger navigation bar. It should be visually identifiable, interactive, and should adjust to different screen sizes effectively.
COMPONENTS:
- NavigationLink: Standalone component. This represents a single anchor link that's styled to fit within a navigation menu.
HTML:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Navigation Menu</title><link href=""https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"" rel=""stylesheet""></head><body><nav class=""bg-gray-800 text-white p-4""><ul class=""flex space-x-4""><li><NavigationLink/></li></ul></nav></body></html>
COMPONENT HTML:
NavigationLink:
<a href=""{url}"" class=""text-white hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"">{link_text}</a>"
Featured Story with Large Header Text,"DESCRIPTION:
The UI should display a featured story with a large header text, accompanied by a brief description and a call-to-action button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeaturedStoryHeader: Standalone, displays the large header text.
- StoryDescription: Standalone, displays a brief description of the story.
- CallToActionButton: Standalone, displays a call-to-action button.
HTML:
<section class=""container mx-auto p-4 md:p-6 lg:p-12""><div class=""flex justify-center mb-4""><FeaturedStoryHeader/></div><StoryDescription/><div class=""text-center""><CallToActionButton/></div></section>
COMPONENT HTML:
FeaturedStoryHeader:
<h1 class=""text-3xl md:text-4xl lg:text-5xl"">{story_title}</h1>
StoryDescription:
<p class=""text-lg md:text-xl lg:text-2xl"">{story_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Testimonial Quote Author,"DESCRIPTION:
A testimonial quote component that displays a quote, author, and their profession. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- TestimonialQuote: A standalone component that displays a quote, author, and their profession.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><TestimonialQuote/></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-xl font-bold italic mb-4"">""&ldquo;{quote}&rdquo;"" <!-- the quote itself --><footer class=""text-base font-normal""><span class=""text-gray-600"">{author}</span><!-- the author's name --><span class=""text-gray-400"">{profession}</span><!-- the author's profession --></footer></blockquote>"
Testimonial Quote Author,"DESCRIPTION:
The UI should display a testimonial quote with the author's name and title. The quote should be in a larger font size to grab attention. The author's name and title should be in a smaller font size and aligned below the quote.
COMPONENTS:
- TestimonialQuote: Standalone component to display the quote.
- AuthorInfo: Standalone component to display the author's name and title.
HTML:
<div class=""max-w-md mx-auto bg-white p-6 shadow-md rounded""><TestimonialQuote/><AuthorInfo/></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg font-semibold mb-4"">{quote_text}</blockquote>
AuthorInfo:
<p class=""text-gray-600"">{author_name}</p><p class=""text-gray-500 text-sm"">{author_title}</p>"
Testimonial Quote Author,"DESCRIPTION:
The UI should display a testimonial quote with the author's name and optional title. The quote should be displayed in a larger font size and the author's name and title should be displayed in a smaller font size.
COMPONENTS:
- TestimonialQuote: Standalone, displays the testimonial quote.
- AuthorName: Standalone, displays the author's name.
- AuthorTitle: Standalone, displays the author's title (optional).
HTML:
<div class=""flex flex-col mb-4""><TestimonialQuote/><div class=""flex items-center""><AuthorName/><AuthorTitle/></div></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-2xl font-bold mb-2"">{testimonial_quote}</blockquote>
AuthorName:
<cite class=""text-lg"">{author_name}</cite>
AuthorTitle:
<span class=""text-sm text-gray-600"">{author_title}</span>"
Testimonial Quote Author,"DESCRIPTION:
The UI should be a testimonial quote component that displays a quote, the author's name, and their title. The component should be responsive and mobile-friendly, with a clean and simple design.
COMPONENTS:
- TestimonialQuote: (standalone): The main testimonial quote component.
- QuoteText: (standalone): The quote text component.
- AuthorInfo: (standalone): The author's name and title component.
HTML:
<div class=""flex flex-col mb-4""><TestimonialQuote/></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""px-4 py-2 bg-gray-100 rounded-lg""><QuoteText/><AuthorInfo/></blockquote>
QuoteText:
<p class=""text-lg font-bold"">{quote_text}</p>
AuthorInfo:
<p class=""text-sm text-gray-600"">{author_name}, {author_title}</p>"
Testimonial Quote Author,"DESCRIPTION:
A testimonial quote with the author's name and title, shown in a clean and minimalistic design. The quote should be prominently displayed, with the author's information shown below it.
COMPONENTS:
- TestimonialBlock: (standalone): contains the quote, author, and title
- AuthorInfo: (standalone): displays the author's name and title
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6""><TestimonialBlock/></div>
COMPONENT HTML:
TestimonialBlock:
<blockquote class=""text-xl font-bold mb-4"">{quote_text}</blockquote><AuthorInfo/>
AuthorInfo:
<p class=""text-gray-600"">{author_name}, <span class=""text-gray-500"">{author_title}</span></p>"
Hover Effects/Animations,"DESCRIPTION:
The UI should display a box that changes its background color and text color when hovered over, along with a scaling effect.
COMPONENTS:
- HoverEffectBox: A standalone component that displays a box with hover effects.
HTML:
<div class=""flex justify-center h-screen""><HoverEffectBox/></div>
COMPONENT HTML:
HoverEffectBox:
<div class=""bg-orange-300 hover:bg-orange-500 transition duration-300 ease-in-out p-10 rounded-md cursor-pointer hover:scale-110""><p class=""text-lg text-orange-800 hover:text-white"">{hover_text}</p></div>"
Share buttons,"DESCRIPTION:
The UI should be a horizontal row of social media share buttons, with each button featuring the logo of a popular social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be equally spaced and have a subtle hover effect. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- ShareButton: a standalone component that represents a single share button
- ShareButtonContainer: a component that takes children, which will be a group of `ShareButton` components
HTML:
<div class=""flex justify-center mb-4""><ShareButtonContainer><ShareButton/><ShareButton/><ShareButton/><!-- Add more ShareButton components for each social media platform --></ShareButtonContainer></div>
COMPONENT HTML:
ShareButton:
<a href=""{share_url}"" class=""inline-block p-2 rounded-full hover:bg-gray-200 transition duration-300""><img src=""{social_media_logo_url}"" alt=""{social_media_name} Share"" class=""w-6 h-6""/></a>
ShareButtonContainer:
<div class=""flex justify-center space-x-2"">{children}</div>"
Search Result Item Title,"DESCRIPTION:
The UI should display a single search result item with a title that is accessible and responsive.
COMPONENTS:
- SearchResultItemTitle: standalone component that displays the title of a search result item.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><h2 class=""text-lg font-bold mb-2 md:mr-4""><SearchResultItemTitle/></h2><!-- other search result item details will go here --></div>
COMPONENT HTML:
SearchResultItemTitle:
<a class=""text-lg font-bold text-gray-900 hover:text-gray-700"" href=""{result_item_url}"">{result_item_title}</a>"
Agenda display,"DESCRIPTION:
The UI should display a list of agenda items, each with a title, description, and date. The layout should be responsive, with a single column on mobile devices and a two-column layout on larger screens.
COMPONENTS:
- AgendaList: (takes children): Container component for the list of agenda items.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Agenda</h1><AgendaList><!-- agenda items will be rendered here --></AgendaList></div>
COMPONENT HTML:
AgendaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Sharing Button,"DESCRIPTION:
- The UI should feature a social sharing button that is visually appealing and easily recognizable. It should include an icon that represents the social platform (e.g., Twitter, Facebook) and optionally, some text such as ""Share"" or ""Tweet"". The button should be styled to stand out but also feel cohesive with most website designs.
COMPONENTS:
- SocialButton: Standalone component. Represents a clickable button designed for sharing content on social media platforms. It includes an icon and text.
HTML:
<div class=""p-4""><!-- Social sharing button for sharing content --><SocialButton/></div>
COMPONENT HTML:
SocialButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center""><span class=""mx-2"">Share on {social_network}</span></button>"
Responsive Article Layout,"DESCRIPTION:
A responsive article layout with a header, image, and content area that adapts to different screen sizes.
COMPONENTS:
- ArticleHeader: Standalone component that renders the article title and meta information.
- ArticleImage: Standalone component that renders the article image.
- ArticleContent: Component that takes children to render the article content.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><div class=""flex justify-center mb-4 md:mb-6 lg:mb-12""><ArticleImage/></div><ArticleContent><!-- article content will be rendered here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{article_meta}</p></header>
ArticleImage:
<img src={image_src} alt={image_alt} class=""w-full md:w-1/2 lg:w-2/3""/>
ArticleContent:
<div class=""prose lg:prose-lg xl:prose-xl"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Collection of thumbnail images that users can click to view full-size versions,"DESCRIPTION:
The UI should display a grid of thumbnail images that are responsive to different screen sizes. When a user clicks on a thumbnail, the full-size version of the image should be displayed.
COMPONENTS:
- ImageThumbnail: standalone component that displays a thumbnail image
- ImageGallery: component that takes children (`ImageThumbnail` components) and displays them in a grid
HTML:
<main class=""container mx-auto max-w-md p-4""><h1 class=""text-2xl font-bold mb-4"">Image Gallery</h1><ImageGallery><ImageThumbnail/><ImageThumbnail/><!-- repeat ImageThumbnail components for each image --></ImageGallery></main>
COMPONENT HTML:
ImageThumbnail:
<div class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md cursor-pointer""/></div>
ImageGallery:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Headings 3,"DESCRIPTION:
The UI should display three headings: a large title, a smaller subtitle, and a smaller header. The title should be the largest and most prominent, with the subtitle and header decreasing in size and importance.
COMPONENTS:
- HeadingTitle: - standalone
- HeadingSubtitle: - standalone
- HeadingHeader: - standalone
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeadingTitle/><HeadingSubtitle/><HeadingHeader/></div>
COMPONENT HTML:
HeadingTitle:
<h1 class=""text-4xl md:text-5xl lg:text-6xl font-bold"">{title_text}</h1>
HeadingSubtitle:
<h2 class=""text-2xl md:text-3xl lg:text-4xl font-medium"">{subtitle_text}</h2>
HeadingHeader:
<h3 class=""text-xl md:text-2xl lg:text-3xl font-medium"">{header_text}</h3>"
Search Result Item Link,"DESCRIPTION:
The UI should be a link item that displays a search result, with a title, a description, and a URL. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- SearchResultItemLink: (standalone)
- SearchResultItemTitle: (standalone)
- SearchResultItemDescription: (standalone)
- SearchResultItemUrl: (standalone)
HTML:
<div class=""flex flex-col mb-4""><SearchResultItemLink/></div>
COMPONENT HTML:
SearchResultItemLink:
<a href={url} class=""text-lg font-bold text-blue-600 hover:text-blue-900 transition duration-300""><SearchResultItemTitle/><SearchResultItemDescription/><SearchResultItemUrl/></a>
SearchResultItemTitle:
<span class=""text-lg font-bold"">{title}</span>
SearchResultItemDescription:
<p class=""text-gray-600"">{description}</p>
SearchResultItemUrl:
<p class=""text-sm text-gray-600"">{url}</p>"
Search Result Item Link,"DESCRIPTION:
The Search Result Item Link should display a link with a title, a summary, and a URL. The link should be visually appealing, with a clear hierarchy of information and sufficient whitespace for readability.
COMPONENTS:
- SearchResultItemLink: A standalone component that contains a link with a title, summary, and URL.
HTML:
<ul class=""list-none mb-4""><li><SearchResultItemLink/></li></ul>
COMPONENT HTML:
SearchResultItemLink:
<a href=""{url}"" class=""block py-4 no-underline hover:underline""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{summary}</p></a>"
Pattern (repeating) controls,"DESCRIPTION:
- The UI consists of a set of controls arranged in a repeating pattern or grid-like layout. Each control group features a label and an interactive element like a button or input. The overall design is clean and spaced evenly for clarity and accessibility.
COMPONENTS:
- ControlGroup: (Standalone): A component that represents one control unit consisting of a label and an interactive element.
- Button: (Standalone): A simple button component for user interaction.
- TextInput: (Standalone): A text input field for user data entry.
HTML:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4""><ControlGroup/><ControlGroup/><ControlGroup/><!-- Additional ControlGroup elements as needed --></div>
COMPONENT HTML:
ControlGroup:
<div class=""flex flex-col space-y-2""><label for=""{control_id}"" class=""text-sm font-medium text-gray-700"">{label_text}</label><!-- Use Button or TextInput based on specific use case --><Button/><!-- or <TextInput/>--></div>
Button:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text} </button>
TextInput:
<input id=""{control_id}"" type=""text"" placeholder=""{placeholder_text}"" class=""shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md""/>"
Revenue Forecast: Predict future sales,"DESCRIPTION:
The UI should be a simple, informative, and responsive dashboard that displays a revenue forecast chart and some key statistics.
COMPONENTS:
- RevenueForecastHeader: Standalone, displays the title and a brief description of the revenue forecast.
- ForecastChart: Standalone, displays a chart showing the revenue forecast.
- KeyStatistics: Standalone, displays a list of key statistics related to the revenue forecast.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><RevenueForecastHeader/><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-3/4 px-4 mb-4 md:mb-0""><ForecastChart/></div><div class=""w-full md:w-1/3 xl:w-1/4 px-4""><KeyStatistics/></div></div></div>
COMPONENT HTML:
RevenueForecastHeader:
<div class=""mb-4""><h1 class=""text-2xl font-bold"">Revenue Forecast</h1><p class=""text-gray-600"">{forecast_description}</p></div>
ForecastChart:
<div class=""bg-white p-4 rounded shadow-md""><canvas id=""forecast-chart"" width=""400"" height=""200""></canvas></div>
KeyStatistics:
<ul class=""list-none mb-0""><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Projected Revenue:</span><span>${projected_revenue}</span></li><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Average Growth Rate:</span><span>{average_growth_rate}%</span></li><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Forecast Period:</span><span>{forecast_period}</span></li></ul>"
Footer Copyright Information,"DESCRIPTION:
The UI should be a simple footer section with a copyright information text. It should be displayed at the bottom of the page and should be responsive, readable, and accessible.
COMPONENTS:
- FooterCopyright: A standalone component that displays the copyright information.
HTML:
<footer class=""pt-12 pb-4 bg-gray-200""><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-sm text-gray-500 text-center"">&copy; {year} {company_name}. All rights reserved.</p>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
A simple input field with a placeholder text ""Write a comment..."" and a submit button.
COMPONENTS:
- CommentInput: (standalone) - The input field component.
- CommentSubmit: (standalone) - The submit button component.
HTML:
<div class=""flex justify-center mb-4""><CommentInput/><CommentSubmit/></div>
COMPONENT HTML:
CommentInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentSubmit:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Counters,"DESCRIPTION:
- The UI should display three separate counters for different statistics such as total users, projects, and downloads. Each counter will feature a large number and a label describing what the number represents. Each counter should be visually distinct but maintain a uniform style for coherence.
COMPONENTS:
- StatisticCounter: (Standalone)**: Displays the statistic number and its label.
- CountersContainer: (Takes children)**: A container that groups all the individual StatisticCounters.
HTML:
<div class=""CountersContainer""><StatisticCounter/><StatisticCounter/><StatisticCounter/></div>
COMPONENT HTML:
StatisticCounter:
<div class=""p-4 md:w-1/3""><!-- Statistic display with large number and label --><div class=""flex flex-col items-center""><div class=""text-3xl font-bold"">{statistic_number}</div><div class=""text-sm text-gray-600"">{statistic_label}</div></div></div>
CountersContainer:
<div class=""flex flex-wrap justify-center items-center space-x-4""><!-- Children counters will be displayed here -->{children} </div>"
Image slider,"DESCRIPTION:
The UI should be a responsive image slider that displays multiple images in a carousel-like format. It should be accessible and have a mobile-first design.
COMPONENTS:
- ImageSlide: A standalone component that displays a single image.
- ImageSlider: A component that takes children (multiple **ImageSlide** components) and renders them in a carousel-like format.
HTML:
<div class=""container mx-auto p-4""><ImageSlider><ImageSlide/><ImageSlide/><ImageSlide/></ImageSlider></div>
COMPONENT HTML:
ImageSlide:
<div class=""w-full h-64 overflow-hidden rounded-lg""><img src={image_url} alt={image_alt} class=""w-full h-full object-cover object-center""/></div>
ImageSlider:
<div class=""relative flex justify-center""><button class=""absolute left-0 z-10"">‹</button><div class=""flex overflow-x-auto snap-x"">{children} </div><button class=""absolute right-0 z-10"">›</button></div>"
Blog Post Preview Card,"DESCRIPTION:
The UI should be a blog post preview card that displays a title, a brief summary, and a ""Read More"" button. The card should be responsive and adjust to different screen sizes. It should have a clean and minimalistic design.
COMPONENTS:
- BlogPostPreviewCard: standalone component that contains all the elements of the blog post preview card.
- BlogPostTitle: standalone component that displays the title of the blog post.
- BlogPostSummary: standalone component that displays a brief summary of the blog post.
- ReadMoreButton: standalone component that displays a ""Read More"" button.
HTML:
<div class=""max-w-md mx-auto bg-white rounded shadow-md overflow-hidden md:max-w-2xl""><BlogPostPreviewCard/></div>
COMPONENT HTML:
BlogPostPreviewCard:
<div class=""p-4""><BlogPostTitle/><BlogPostSummary/><ReadMoreButton/></div>
BlogPostTitle:
<h2 class=""text-lg font-bold"">{title}</h2>
BlogPostSummary:
<p class=""text-gray-600"">{summary}</p>
ReadMoreButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read More</button>"
Certificates and Badges,"DESCRIPTION:
The UI should display a list of certificates and badges with their respective names, issuers, and dates. The layout should be responsive, with a mobile-first approach, and should be accessible and SEO-friendly.
COMPONENTS:
- CertificateBadge: A standalone component that displays a single certificate or badge with its details.
- CertificatesList: A component that takes children, which is a list of `CertificateBadge` components.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-2xl font-bold mb-4"">Certificates and Badges</h2><CertificatesList><CertificateBadge/><CertificateBadge/><!-- Add more CertificateBadge components here --></CertificatesList></section>
COMPONENT HTML:
CertificateBadge:
<div class=""flex flex-wrap mb-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold"">{certificate_name}</h3><p>{issuer_name}</p><p>{issue_date}</p></div></div>
CertificatesList:
<ul class=""list-none mb-0"">{children}</ul>"
Certificates and Badges,"DESCRIPTION:
The UI should display a list of certificates and badges earned by a person, with each item featuring an image, title, and issuing organization. The list should be responsive and adapt to different screen sizes.
COMPONENTS:
- CertificateBadge: A standalone component that displays a single certificate or badge.
- CertificatesList: A component that displays a list of certificates and badges, and takes children (i.e., multiple `CertificateBadge` components).
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Certificates and Badges</h2><CertificatesList><CertificateBadge/><CertificateBadge/><!-- Add more CertificateBadge components as needed --></CertificatesList></div>
COMPONENT HTML:
CertificateBadge:
<div class=""flex items-center mb-4""><img src={badge_image_url} alt={badge_title} class=""w-16 h-16 mr-4""/><div><h3 class=""text-lg font-bold"">{badge_title}</h3><p>Issued by {issuing_organization}</p></div></div>
CertificatesList:
<ul class=""list-none mb-0"">{children}</ul>"
Certificates and Badges,"DESCRIPTION:
The UI should display a list of certificates and badges earned by a user. Each certificate or badge should have a title, an issuing organization, an issue date, and an expiration date (if applicable). The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- CertificateBadgeCard: A standalone component that displays a single certificate or badge.
- CertificatesAndBadgesList: A component that takes children, which are multiple `CertificateBadgeCard` components.
HTML:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Certificates and Badges</h2><CertificatesAndBadgesList><CertificateBadgeCard/><CertificateBadgeCard/><!-- Add more CertificateBadgeCard components here --></CertificatesAndBadgesList></section>
COMPONENT HTML:
CertificateBadgeCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-xl font-bold"">{title}</h3><p>Issued by {issuing_organization} on {issue_date}</p>{expiration_date && <p>Expires on {expiration_date}</p>} <img src={badge_image_url} alt={title} class=""w-20 h-20 mx-auto""/></article>
CertificatesAndBadgesList:
<ul class=""flex flex-wrap justify-center md:justify-start"">{children}</ul>"
Top/Bottom Navigation,"DESCRIPTION:
The UI should consist of a top navigation bar and a bottom navigation bar. The top navigation bar should have a logo on the left and some navigation links on the right. The bottom navigation bar should have some navigation links.
COMPONENTS:
- TopNavigationBar: (standalone)
- BottomNavigationBar: (standalone)
- Logo: (standalone)
- Link: (takes children)
HTML:
<div class=""h-screen flex flex-col""><TopNavigationBar/><!-- main content here --><BottomNavigationBar/></div>
COMPONENT HTML:
TopNavigationBar:
<nav class=""bg-gray-900 py-4""><Logo/><ul class=""flex justify-end""><li><Link>Link 1</Link></li><li><Link>Link 2</Link></li><li><Link>Link 3</Link></li></ul></nav>
BottomNavigationBar:
<nav class=""bg-gray-900 py-4""><ul class=""flex justify-between""><li><Link>Link 4</Link></li><li><Link>Link 5</Link></li><li><Link>Link 6</Link></li></ul></nav>
Logo:
<img src={logo_url} alt=""Logo"" class=""h-8 w-8""/>
Link:
<a href={href} class=""text-white hover:text-gray-200"">{children}</a>"
Company Logo Icon,"DESCRIPTION:
The UI should be a simple icon that displays the company logo. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- CompanyLogoIcon: A standalone component that displays the company logo.
HTML:
/nav><CompanyLogoIcon/></nav>
COMPONENT HTML:
CompanyLogoIcon:
<a href=""{homepage_url}""><img src=""{logo_url}"" alt=""Company Logo"" class=""w-8 h-8 md:w-10 md:h-10 rounded-full""/></a>"
Timer display,"DESCRIPTION:
The timer display should show the hours, minutes, and seconds in a responsive and mobile-first design. The timer should be easily readable and accessible.
COMPONENTS:
- TimerDisplay: (standalone): The main timer display component.
- TimeUnit: (takes children): A component to display a single time unit (hours, minutes, seconds).
HTML:
<div class=""flex justify-center p-4""><TimerDisplay/></div>
COMPONENT HTML:
TimerDisplay:
<div class=""flex items-center text-3xl""><TimeUnit>{hours}</TimeUnit>: <TimeUnit>{minutes}</TimeUnit>: <TimeUnit>{seconds}</TimeUnit></div>
TimeUnit:
<span class=""mx-2"">{children}</span>"
Dependancy Graph Visualization Component,"DESCRIPTION:
The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.
COMPONENTS:
- DependencyGraphComponent: (takes children) - contains the graph and handles node relationships
- TooltipComponent: (takes children) - displays additional information when a node is hovered or clicked
HTML:
<div class=""max-w-md mx-auto pt-4""><DependencyGraphComponent><!-- graph content here --></DependencyGraphComponent></div>
COMPONENT HTML:
DependencyGraphComponent:
<div class=""flex flex-wrap justify-center"">{children}</div>
TooltipComponent:
<div class=""absolute bg-gray-100 p-2 rounded-md"">{children}</div>"
Revealing/Hover Effects,"DESCRIPTION:
The UI should display a container with a revealing hover effect. When the user hovers over the container, a colored background and a heading should be revealed.
COMPONENTS:
- RevealContainer: standalone component that wraps the revealing hover effect.
- RevealContent: standalone component that displays the revealed content (heading and background).
HTML:
<div class=""relative w-full h-48 md:h-64 lg:h-80 XL:h-96""><RevealContainer/></div>
COMPONENT HTML:
RevealContainer:
<div class=""absolute inset-0 z-10 overflow-hidden bg-transparent transition duration-300 ease-in-out hover:bg-orange-500 hover:opacity-90""><RevealContent/></div>
RevealContent:
<div class=""flex items-center justify-center h-full""><h2 class=""text-2xl font-bold"">{heading_text}</h2></div>"
Countdown to event date,"DESCRIPTION:
The UI should display a countdown timer showing the days, hours, minutes, and seconds until the event date. The timer should be easily readable and responsive, adjusting to different screen sizes.
COMPONENTS:
- CountdownTimer: (standalone): displays the countdown timer
- TimeUnit: (takes children): displays a single unit of time (e.g., days, hours, minutes, seconds)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 pb-8""><h2 class=""text-2xl font-bold mb-4"">Countdown to Event Date</h2><CountdownTimer/></section>
COMPONENT HTML:
CountdownTimer:
<div class=""flex justify-center mb-4""><TimeUnit>{days}</TimeUnit><span class=""text-lg"">days</span><TimeUnit>{hours}</TimeUnit><span class=""text-lg"">hours</span><TimeUnit>{minutes}</TimeUnit><span class=""text-lg"">minutes</span><TimeUnit>{seconds}</TimeUnit><span class=""text-lg"">seconds</span></div>
TimeUnit:
<span class=""text-3xl font-bold"">{children}</span>"
Countdown to event date,"DESCRIPTION:
The UI should display a countdown to a specific event date, showing the days, hours, minutes, and seconds remaining until the event. The design should be modern, clean, and responsive, with a prominent display of the countdown timer.
COMPONENTS:
- CountdownTimer: A standalone component that displays the countdown timer.
- CountdownSegment: A component that displays a single unit of time (days, hours, minutes, seconds) and takes children.
HTML:
<div class=""max-w-md mx-auto p-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Countdown to Event</h2><div class=""flex justify-center mb-4""><CountdownTimer/></div></div>
COMPONENT HTML:
CountdownTimer:
<div class=""flex justify-center mb-4""><CountdownSegment>{days} days</CountdownSegment><CountdownSegment>{hours} hours</CountdownSegment><CountdownSegment>{minutes} minutes</CountdownSegment><CountdownSegment>{seconds} seconds</CountdownSegment></div>
CountdownSegment:
<div class=""px-4 py-2 mx-2 bg-gray-200 rounded""><span class=""text-2xl"">{children}</span></div>"
Contact information,"DESCRIPTION:
The contact information UI should display the company's address, phone number, and email address in a clean and organized manner. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- ContactInfo: A standalone component that displays the contact information.
- Address: A standalone component that displays the company's address.
- PhoneNumber: A standalone component that displays the company's phone number.
- EmailAddress: A standalone component that displays the company's email address.
HTML:
<div class=""max-w-md mx-auto p-4""><ContactInfo/></div>
COMPONENT HTML:
ContactInfo:
<div class=""flex flex-col gap-4""><Address/><PhoneNumber/><EmailAddress/></div>
Address:
<p>{street_address}</p><p>{city_state_zip}</p>
PhoneNumber:
<p>Phone: {phone_number}</p>
EmailAddress:
<p>Email: <a href={`mailto:{email_address}`}>{email_address}</a></p>"
Contact information,"DESCRIPTION:
A compact contact information section with the company's address, phone number, and email, displayed in a responsive and accessible format.
COMPONENTS:
- ContactInfoBlock: (standalone): A single block of contact information.
- ContactInfoList: (takes children): A list of contact information blocks.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-2"">Get in Touch</h2><ContactInfoList><ContactInfoBlock/><ContactInfoBlock/><ContactInfoBlock/></ContactInfoList></div>
COMPONENT HTML:
ContactInfoBlock:
<div class=""flex mb-2""><span class=""mr-2"">{icon}</span><div><p class=""text-sm"">{label}</p><p class=""text-base"">{info}</p></div></div>
ContactInfoList:
<ul class=""list-none mb-0"">{children}</ul>"
Project/Task Management Tools,"DESCRIPTION:
A responsive dashboard that displays a list of projects with their respective tasks. Each project should have a title, description, and a list of tasks. Tasks should have a title, description, and a completion status indicator.
COMPONENTS:
- ProjectCard: A standalone component that displays a single project.
- TaskList: A component that takes children (individual tasks) to display.
- TaskItem: A standalone component that displays a single task.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Project Dashboard</h1><ul class=""divide-y""><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components as needed --></ul></div>
COMPONENT HTML:
ProjectCard:
<div class=""p-4 mb-4 bg-white rounded shadow""><h2 class=""text-lg font-bold"">{project_title}</h2><p class=""text-gray-600"">{project_description}</p><TaskList><TaskItem/><TaskItem/><!-- Add more TaskItem components as needed --></TaskList></div>
TaskList:
<ul class=""pl-4"">{children}</ul>
TaskItem:
<li class=""py-2 border-b border-gray-200""><input type=""checkbox"" class=""mr-2"" {checked}/><span class=""text-gray-600"">{task_title}</span><p class=""text-gray-400"">{task_description}</p></li>"
Search Input Field,"DESCRIPTION:
A simple search input field with a placeholder text and a submit button.
COMPONENTS:
- SearchInput: standalone component that renders a search input field.
- SearchButton: standalone component that renders a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg text-gray-700 placeholder-gray-600"" placeholder=""Search..."" aria-label=""Search input field""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Thumbnail generator for video previews,"DESCRIPTION:
A grid of thumbnail previews for video clips, with each thumbnail displaying a screenshot of the video and text overlay showing the video title and duration.
COMPONENTS:
- VideoThumbnail: a standalone component displaying a single video thumbnail
- ThumbnailGrid: a container component that renders a grid of `VideoThumbnail` components and takes children
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components here --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 h-32 w-48 relative overflow-hidden""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""object-cover h-full w-full""/><div class=""absolute bottom-0 left-0 p-2 text-sm text-white""><p>{video_title}</p><p>{duration} seconds</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-3 gap-4"">{children}</div>"
Thumbnail generator for video previews,"DESCRIPTION:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Sparkle controls,"DESCRIPTION:
The UI design for ""Sparkle Controls"" should consist of a collection of interactive elements like buttons, sliders, or dials that emulate a playful and vibrant 'sparkle' theme. These controls could be used for applications like sound mixers, lighting controls, or any user interface that benefits from a lively and engaging aesthetic. Each control will feature shimmering, glittering effects or animations to align with the theme.
COMPONENTS:
- SparkleButton: (Standalone): A button with a glittering sparkle effect on hover or click.
- SparkleSlider: (Standalone): A slider control that glints or shines as it is adjusted.
- SparkleDial: (Standalone): A rotational dial with a sparkling effect evident during interaction.
HTML:
<div class=""p-4""><h1 class=""text-xl text-center font-bold text-slate-700 my-4"">Sparkle Controls</h1><div class=""flex flex-wrap justify-around items-center""><SparkleButton/><SparkleSlider/><SparkleDial/></div></div>
COMPONENT HTML:
SparkleButton:
<button class=""bg-gradient-to-r from-pink-300 via-purple-300 to-indigo-400 p-2 rounded-lg text-white hover:animate-pulse"">{button_text} </button>
SparkleSlider:
<label class=""block""><span class=""text-gray-700"">{label_text}</span><input type=""range"" class=""w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer sparkle-slider""></label>
SparkleDial:
<div class=""relative""><input type=""range"" min=""0"" max=""100"" value=""{initial_value}"" class=""rotation-slider appearance-none w-10 h-10 bg-transparent rounded-full cursor-pointer""><div class=""absolute inset-0 flex items-center justify-center""><div class=""text-xs"">{dial_label}</div></div></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Alert Notification Icon,"DESCRIPTION:
The UI should display an alert notification icon, which is a small icon that indicates a notification or alert. The icon should be a circle with an exclamation mark inside. The icon should be yellow with a black exclamation mark.
COMPONENTS:
- AlertIcon: A standalone component that displays an alert notification icon.
HTML:
<div class=""flex justify-center mb-4""><AlertIcon/></div>
COMPONENT HTML:
AlertIcon:
<i class=""bg-yellow-400 text-black rounded-full p-2 text-sm"" aria-label=""Alert notification""><span class=""sr-only"">Alert notification</span><span>!</span></i>"
Alert Notification Icon,"DESCRIPTION:
The UI should display a notification icon with a count of alerts. The icon should be a circle with a number inside, indicating the number of alerts.
COMPONENTS:
- AlertIcon: Standalone component that displays the notification icon.
- AlertCount: Standalone component that displays the count of alerts.
HTML:
<nav class=""flex items-center""><AlertIcon/><AlertCount/></nav>
COMPONENT HTML:
AlertIcon:
<span class=""rounded-full w-6 h-6 bg-orange-500 text-white text-sm flex items-center justify-center"">{alert_icon}</span>
AlertCount:
<span class=""text-sm font-bold"">{alert_count}</span>"
Alert Notification Icon,"DESCRIPTION:
The UI should display an alert notification icon with a numeric indicator besides it, which can be customized to display the number of notifications.
COMPONENTS:
- AlertIcon: A standalone component representing the alert icon.
- NotificationBadge: A standalone component representing the notification badge with a numeric indicator.
HTML:
<div class=""flex items-center""><AlertIcon/><NotificationBadge/></div>
COMPONENT HTML:
AlertIcon:
<span class=""text-lg text-orange-500""><!-- alert icon --><i class=""fas fa-exclamation-circle""></i></span>
NotificationBadge:
<span class=""bg-red-500 text-white rounded-full px-2 py-1 text-sm"">{notificationCount}</span>"
Alert Notification Icon,"DESCRIPTION:
The UI should display an alert notification icon with a numeric badge indicating the number of notifications.
COMPONENTS:
- AlertIcon: Standalone component that displays an alert icon.
- NotificationBadge: Standalone component that displays a numeric badge.
HTML:
<div class=""flex items-center justify-center""><AlertIcon/><NotificationBadge/></div>
COMPONENT HTML:
AlertIcon:
<i class=""fas fa-exclamation-circle text-red-500 text-lg"" aria-label=""Alert Icon""></i>
NotificationBadge:
<span class=""bg-red-500 text-white text-sm font-bold py-1 px-2 rounded"">{notification_count}</span>"
Alert Notification Icon,"DESCRIPTION:
The UI should display an alert notification icon, typically used to indicate that there are new notifications or alerts for the user. The icon should be a bell shape with a red badge on top, indicating the number of notifications.
COMPONENTS:
- AlertNotificationIcon: A standalone component that displays the alert notification icon.
HTML:
<nav class=""flex items-center""><AlertNotificationIcon/></nav>
COMPONENT HTML:
AlertNotificationIcon:
<span class=""relative""><!-- Bell icon --><i class=""fas fa-bell text-lg text-gray-600""></i><!-- Red badge with notification count --><span class=""absolute top-0 right-0 -mt-2 -mr-2 bg-red-500 rounded-full w-4 h-4 text-white text-xs flex items-center justify-center"">{notification_count}</span></span>"
Security Center: Monitor system security,"DESCRIPTION:
The UI should be a dashboard that displays various security metrics and alerts. It should have a header with a title and a navigation menu. The main content area should have a grid layout with multiple sections, each displaying different security-related information.
COMPONENTS:
- SecurityHeader: Standalone component that displays the title and navigation menu.
- SecuritySection: Component that takes children and displays a section of security information.
- MetricCard: Standalone component that displays a single metric (e.g. ""System Vulnerabilities: 5"").
- AlertList: Component that takes children and displays a list of security alerts.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SecurityHeader/><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><SecuritySection><MetricCard/><MetricCard/></SecuritySection><SecuritySection><AlertList><li>{alert_message}</li><li>{alert_message}</li></AlertList></SecuritySection></div></div>
COMPONENT HTML:
SecurityHeader:
<header class=""flex justify-between mb-4""><h1 class=""text-2xl font-bold"">Security Center</h1><nav class=""flex""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Dashboard</a><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Settings</a></nav></header>
SecuritySection:
<section class=""bg-white p-4 rounded shadow-md"">{children}</section>
MetricCard:
<div class=""bg-white p-4 rounded shadow-md""><h2 class=""text-lg font-bold"">{metric_name}</h2><p class=""text-gray-600"">{metric_value}</p></div>
AlertList:
<ul class=""list-none mb-0"">{children}</ul>"
Product lists,"DESCRIPTION:
The UI should display a list of products, with each product showing its image, title, price, and a ""Add to Cart"" button. The list should be responsive, with multiple columns on larger screens and a single column on smaller screens.
COMPONENTS:
- ProductCard: (standalone): displays a single product
- ProductList: (takes children): wraps multiple `ProductCard` components
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Products</h1><ProductList><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></ProductList></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded-lg shadow-md p-4 mb-4""><img src=""{product_image_url}"" alt=""{product_title}"" class=""w-full mb-2""/><h2 class=""text-lg font-bold"">{product_title}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-lg font-bold"">${{product_price}}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button></div>
ProductList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Featured Product Image Size,"DESCRIPTION:
The UI should display a featured product image with a responsive size that adapts to different screen sizes. The image should be centered and take up the full width of its parent container on mobile devices, and then scale up to a maximum width on larger screens.
COMPONENTS:
- FeaturedProductImage: A standalone component that displays a featured product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src={image_url} alt={product_name} class=""w-full object-cover object-center md:max-w-md lg:max-w-lg rounded""/>"
Featured Product Image Size,"DESCRIPTION:
The UI should display a responsive featured product image with a default size that adjusts to smaller screens.
COMPONENTS:
- FeaturedProductImage: A standalone component that displays the featured product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full md:w-1/2 lg:w-1/3 mx-auto mb-4 object-cover rounded-md border border-gray-200""/>"
Video effects,"DESCRIPTION:
The UI for video effects should present a set of video effects that users can apply. It should display in a grid layout, showcasing each effect with a descriptive name under each effect preview.
COMPONENTS:
- VideoEffectGrid: (Standalone)**: A component that holds all video effects previews in a grid layout.
- VideoEffectCard: (Standalone)**: A card component for each video effect, showing a preview image and the effect name.
HTML:
<div class=""container mx-auto px-4""><h1 class=""text-2xl font-bold text-center my-4"">Video Effects</h1><VideoEffectGrid/></div>
COMPONENT HTML:
VideoEffectGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><VideoEffectCard/><VideoEffectCard/><!-- Additional <VideoEffectCard/>can be added based on the number of effects available --></div>
VideoEffectCard:
<div class=""bg-gray-200 rounded-lg overflow-hidden shadow-lg""><div class=""bg-black aspect-w-16 aspect-h-9""><!-- Example placeholder for a video effect preview --><div class=""w-full h-full flex justify-center items-center text-gray-500"">Effect Preview</div></div><div class=""p-4""><h3 class=""font-semibold text-lg text-gray-800"">{effect_name}</h3></div></div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Team member profiles,"DESCRIPTION:
The UI should display a list of team member profiles, each profile containing a photo, name, title, bio, and social media links. The profiles should be displayed in a grid layout, with 2 columns on desktop and 1 column on mobile. Each profile should have a clean and minimalistic design, with a subtle hover effect.
COMPONENTS:
- TeamMemberProfile: (standalone) - displays a single team member's profile information
- TeamGrid: (takes children) - a grid container that holds multiple `TeamMemberProfile` components
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TeamGrid><TeamMemberProfile/><TeamMemberProfile/><!-- add more profiles here --></TeamGrid></div>
COMPONENT HTML:
TeamMemberProfile:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><img src={profile_image_url} alt={name} class=""w-24 h-24 rounded-full mx-auto""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-sm"">{title}</p><p class=""text-sm"">{bio}</p><ul class=""flex justify-center mb-4""><li><a href={linkedin_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-linkedin""></i></a></li><li><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-twitter""></i></a></li><!-- add more social media links here --></ul></div>
TeamGrid:
<div class=""grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2"">{children}</div>"
Team member profiles,"DESCRIPTION:
The UI should display a grid of team member profiles, with each profile showing the team member's name, role, and a photo. The profiles should be responsive, with a stacked layout on mobile devices and a horizontal layout on larger screens.
COMPONENTS:
- TeamMemberProfileCard: a standalone component that displays a single team member's profile.
- TeamMemberProfileGrid: a component that takes children (`TeamMemberProfileCard`s) and displays them in a responsive grid.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Our Team</h1><TeamMemberProfileGrid><TeamMemberProfileCard/><TeamMemberProfileCard/><!-- Add more TeamMemberProfileCard components here --></TeamMemberProfileGrid></div>
COMPONENT HTML:
TeamMemberProfileCard:
<div class=""bg-white shadow-md p-4 rounded""><img src=""{photo_url}"" alt=""{name}"" class=""w-24 h-24 rounded-full mb-2""><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{role}</p></div>
TeamMemberProfileGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Team member profiles,"DESCRIPTION:
A responsive grid of team member profiles, with each profile showing a photo, name, title, and short bio. The grid should be mobile-first, with each profile taking up the full width on small screens and arranging themselves in a grid on larger screens.
COMPONENTS:
- TeamMemberProfile: (standalone) - a single team member profile
- TeamMemberGrid: (takes children) - a container for a grid of team member profiles
HTML:
<div class=""max-w-md mx-auto p-4""><TeamMemberGrid><TeamMemberProfile/><TeamMemberProfile/><!-- Add more TeamMemberProfile components here --></TeamMemberGrid></div>
COMPONENT HTML:
TeamMemberProfile:
<div class=""flex flex-col items-center p-4 mb-4 bg-white rounded shadow-md""><img src=""{photo_url}"" alt=""{name}"" class=""w-24 h-24 rounded-full mb-4""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-sm"">{title}</p><p class=""text-xs"">{bio}</p></div>
TeamMemberGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Featured Video Poster,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly video poster that displays a featured video with a play button and video title.
COMPONENTS:
- FeaturedVideoPoster: standalone (main component)
- VideoPlayButton: standalone (play button)
- VideoTitle: standalone (video title)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><img src=""{video_thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover rounded-md""/><VideoPlayButton/><VideoTitle/></div>
VideoPlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-3xl bg-white rounded-full p-2""><i class=""fas fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play video</span></button>
VideoTitle:
<h2 class=""text-lg font-bold mb-2"">{video_title}</h2>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Navigation Dropdown Icon,"DESCRIPTION:
The UI should be a navigation dropdown icon that expands when clicked, displaying a list of navigation links. The icon should be a responsive, mobile-first, accessible, and SEO-friendly dropdown menu.
COMPONENTS:
- DropdownToggle: (standalone) - the clickable icon that expands the dropdown menu
- DropdownMenu: (takes children) - the container for the navigation links
- DropdownLink: (standalone) - an individual navigation link within the dropdown menu
HTML:
<nav><DropdownToggle/><DropdownMenu><ul><li><DropdownLink/></li><li><DropdownLink/></li><!-- more links here --></ul></DropdownMenu></nav>
COMPONENT HTML:
DropdownToggle:
<button class=""w-8 h-8 flex justify-center items-center bg-gray-200 hover:bg-gray-300 rounded-full""><!-- icon here, e.g. <span>▼</span>-->{toggle_icon}</button>
DropdownMenu:
<div class=""absolute bg-white py-2 rounded-md shadow-md"">{children}</div>
DropdownLink:
<a href={link_href} class=""block px-4 py-2 text-gray-600 hover:text-gray-900"">{link_text}</a>"
Footer that remains fixed at the bottom of the page as users scroll,"DESCRIPTION:
The footer should be a fixed bar that remains at the bottom of the page, regardless of how much the user scrolls. It should have a dark background color and white text, with a subtle shadow to distinguish it from the rest of the page.
COMPONENTS:
- Footer: standalone component that contains the footer content
HTML:
<body><!-- main content area --><main>...</main><!-- fixed footer at the bottom --><Footer/></body>
COMPONENT HTML:
Footer:
<footer class=""fixed bottom-0 left-0 right-0 bg-gray-800 text-white p-4 shadow-md""><nav class=""flex justify-center""><ul class=""list-none m-0 p-0 flex flex-wrap justify-center""><li class=""mr-6""><a href=""#"" class=""text-white hover:text-gray-300"">Link 1</a></li><li class=""mr-6""><a href=""#"" class=""text-white hover:text-gray-300"">Link 2</a></li><li><a href=""#"" class=""text-white hover:text-gray-300"">Link 3</a></li></ul></nav><p class=""text-sm text-center"">{copyright_text}</p></footer>"
Footer that remains fixed at the bottom of the page as users scroll,"DESCRIPTION:
The UI should have a footer that remains fixed at the bottom of the page as users scroll. The footer should have a darker background color and contain some basic information like copyright text and social media links.
COMPONENTS:
- Footer: standalone component that contains copyright text and social media links.
HTML:
<!-- Main page content --><main class=""h-screen overflow-y-auto""><!-- page content here --></main><!-- Fixed footer --><Footer/>
COMPONENT HTML:
Footer:
<footer class=""fixed bottom-0 left-0 w-full h-20 bg-gray-800 text-gray-200""><div class=""container mx-auto p-4""><p>&copy; {current_year} {website_name}. All rights reserved.</p><ul class=""flex justify-center""><li><a href={facebook_url} target=""_blank"" rel=""noopener noreferrer"">Facebook</a></li><li><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer"">Twitter</a></li><li><a href={instagram_url} target=""_blank"" rel=""noopener noreferrer"">Instagram</a></li></ul></div></footer>"
Social media sharing buttons,"DESCRIPTION:
A horizontal row of buttons, each representing a social media platform, with a light background and a hover effect to indicate interactivity.
COMPONENTS:
- SocialMediaShareBar: A container component that holds all the social media buttons. (standalone)
- SocialMediaButton: A button component for each social media platform. (takes children)
HTML:
<div class=""container mx-auto p-4""><SocialMediaShareBar/></div>
COMPONENT HTML:
SocialMediaShareBar:
<div class=""flex justify-center mb-4""><SocialMediaButton>Facebook</SocialMediaButton><SocialMediaButton>Twitter</SocialMediaButton><SocialMediaButton>LinkedIn</SocialMediaButton><!-- Add more buttons as needed --></div>
SocialMediaButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{children}</button>"
Alert Close Button Style,"DESCRIPTION:
The UI should be a small, clickable button that allows users to close an alert message. The button should be a small ""X"" or ""Close"" text, and should be styled to stand out from the rest of the alert message.
COMPONENTS:
- AlertCloseButton: a standalone component that renders a small clickable button to close an alert message.
HTML:
<div class=""alert-message""><!-- alert message content goes here --><AlertCloseButton/></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-label=""Close"" class=""sr-only"">{close_button_text}</span><span aria-hidden=""true"">×{/* or ""Close"" text */}</span></button>"
Vertical or horizontal bar for scrolling through content that doesn't fit within the viewport,"DESCRIPTION:
The UI should have a scrollbar that allows users to scroll through content that exceeds the viewport's width or height. The scrollbar should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ScrollbarContainer: (standalone): A container that wraps the scrollbar and its associated content.
- Scrollbar: (standalone): The scrollbar component that allows users to scroll through content.
- ScrollbarThumb: (standalone): The draggable thumb of the scrollbar that indicates the scrolled position.
HTML:
<div class=""overflow-auto h-screen""><ScrollbarContainer/><!-- content that exceeds the viewport's width or height --><div>Long content...</div></div>
COMPONENT HTML:
ScrollbarContainer:
<div class=""fixed right-0 top-0 h-full""><Scrollbar/></div>
Scrollbar:
<div class=""w-2 bg-gray-300 rounded-lg""><ScrollbarThumb/></div>
ScrollbarThumb:
<div class=""bg-gray-500 rounded-full w-full h-4"">{scrollbar_thumb_size}</div>"
Label attached to content to categorize or organize it,"DESCRIPTION:
The UI should display a label attached to content, to categorize or organize it. The label should be visually distinct from the content and have a clear visual connection to the content.
COMPONENTS:
- Label: standalone component
- ContentContainer: takes children
HTML:
<div class=""flex items-center""><Label/><ContentContainer><!-- content here --></ContentContainer></div>
COMPONENT HTML:
Label:
<span class=""bg-purple-100 text-purple-800 text-xs font-bold rounded px-2"">{label_text}</span>
ContentContainer:
<div class=""ml-2"">{children}</div>"
Label attached to content to categorize or organize it,"DESCRIPTION:
The UI should display a label attached to content to categorize or organize it. The label should be visually separate from the content and should be easily readable.
COMPONENTS:
- ContentLabel: a standalone component that displays the label text.
- LabeledContent: a component that takes children and wraps them with a `ContentLabel`.
HTML:
<div class=""max-w-md mx-auto p-4""><LabeledContent><!-- content goes here --><p>{content_text}</p></LabeledContent></div>
COMPONENT HTML:
ContentLabel:
<span class=""bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded"">{label_text}</span>
LabeledContent:
<div class=""flex items-center mb-2""><ContentLabel/><div class=""ml-2"">{children}</div></div>"
User profile page with video history,"DESCRIPTION:
The UI should display a user profile page with a header, profile information, and a video history section that lists the user's watched videos.
COMPONENTS:
- UserProfileHeader: standalone, displays the user's profile picture and name
- ProfileInfo: standalone, displays the user's bio and profile information
- VideoHistory: takes children, lists the user's video history
- VideoHistoryItem: standalone, displays a single video in the video history
HTML:
<div class=""container max-w-md mx-auto p-4""><UserProfileHeader/><ProfileInfo/><h2 class=""text-lg font-bold mb-2"">Video History</h2><VideoHistory><VideoHistoryItem/><VideoHistoryItem/><!-- more VideoHistoryItem components here --></VideoHistory></div>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex justify-center mb-4""><img src={profile_picture} class=""w-24 h-24 rounded-full""/><h1 class=""text-2xl font-bold"">{username}</h1></div>
ProfileInfo:
<div class=""mb-4""><p>{bio}</p><!-- other profile information here --></div>
VideoHistory:
<ul class=""list-none mb-4"">{children}</ul>
VideoHistoryItem:
<li class=""py-2 border-b border-gray-200""><img src={video_thumbnail} class=""w-12 h-12 rounded""/><div class=""ml-2""><h3>{video_title}</h3><p>{video_description}</p></div></li>"
User Comments and Feedback,"DESCRIPTION:
The UI should display a list of user comments and feedback, with each comment showing the user's name, profile picture, comment text, and a timestamp. The UI should also include a form for users to submit new comments.
COMPONENTS:
- CommentCard: (Standalone): Displays a single comment, including the user's name, profile picture, comment text, and timestamp.
- CommentForm: (Standalone): Provides a form for users to submit new comments.
- CommentList: (Takes Children): Displays a list of `CommentCard` components.
- UserProfilePicture: (Standalone): Displays a user's profile picture.
HTML:
<div class=""max-w-md mx-auto p-4""><CommentForm/><CommentList><CommentCard/><CommentCard/><!-- more CommentCard components here --></CommentList></div>
COMPONENT HTML:
CommentCard:
<div class=""flex mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex mb-4""><input type=""text"" placeholder=""Enter your comment..."" class=""w-full p-2""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
CommentList:
<ul class=""list-none mb-4"">{children}</ul>
UserProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""User Profile Picture""/>"
Testimonial Author Photo,"DESCRIPTION:
The UI should display a circular author photo with a testimonial quote and the author's name. The author photo should be rounded and bordered, with a subtle shadow effect. The testimonial quote should be displayed in a clean, readable font, and the author's name should be displayed in a smaller, italicized font.
COMPONENTS:
- TestimonialAuthorPhoto: Standalone component that displays the author photo.
- TestimonialQuote: Standalone component that displays the testimonial quote.
- AuthorName: Standalone component that displays the author's name.
HTML:
<div class=""md:flex items-center mb-4""><div class=""md:w-1/3 md:pr-4""><TestimonialAuthorPhoto/></div><div class=""md:w-2/3 md:pl-4""><TestimonialQuote/><AuthorName/></div></div>
COMPONENT HTML:
TestimonialAuthorPhoto:
<img src={author_photo_url} alt={author_name} class=""w-24 h-24 rounded-full border-2 border-gray-300 shadow-md""/>
TestimonialQuote:
<blockquote class=""text-lg italic mb-2"">{testimonial_quote}</blockquote>
AuthorName:
<p class=""text-sm italic"">{author_name}</p>"
Booking and Payment Forms,"DESCRIPTION:
The UI should be a responsive and accessible booking and payment form that allows users to easily book a service and make a payment. The form should have a clean and simple design, with clear labels and input fields, and a prominent call-to-action (CTA) button to submit the booking and payment. The UI should be optimized for mobile devices, with a mobile-first approach.
COMPONENTS:
- BookingForm: A standalone component that contains the booking form fields (e.g., name, email, service selection, date, and time).
- PaymentForm: A standalone component that contains the payment form fields (e.g., credit card number, expiration date, and security code).
- SubmitButton: A standalone component that is used as the CTA button to submit the booking and payment.
- ErrorMessages: A standalone component that displays any error messages that occur during the booking and payment process.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Book Your Service</h1><form><BookingForm/><PaymentForm/><SubmitButton/><ErrorMessages/></form></div>
COMPONENT HTML:
BookingForm:
<div class=""flex flex-wrap mb-4""><label class=""block mb-2"" for=""name"">Name:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""name"" type=""text""/><label class=""block mb-2"" for=""email"">Email:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""email"" type=""email""/><!-- Add more form fields as needed --></div>
PaymentForm:
<div class=""flex flex-wrap mb-4""><label class=""block mb-2"" for=""card-number"">Card Number:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""card-number"" type=""tel""/><label class=""block mb-2"" for=""expiration-date"">Expiration Date:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""expiration-date"" type=""month""/><!-- Add more form fields as needed --></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book and Pay</button>
ErrorMessages:
<p class=""text-red-500"">{error_message}</p>"
Featured Product Badge Icon,"DESCRIPTION:
The UI should feature a small badge icon with a ribbon-like design, indicating a product is featured. The badge should be responsive and accessible.
COMPONENTS:
- FeaturedBadgeIcon: standalone component, representing the featured product badge icon.
HTML:
<span class=""inline-block""><FeaturedBadgeIcon/></span>
COMPONENT HTML:
FeaturedBadgeIcon:
<span class=""w-6 h-6 bg-orange-500 rounded-full inline-block relative""><span class=""ribbon ribbon-vertical""><!-- ribbon design --><span class=""ribbon-content text-xs text-white"">{ribbon_text}</span></span><span class=""featured-badge-icon inline-block w-4 h-4 bg-white rounded-full absolute top-0 right-0 -mt-1 -mr-1""><!-- icon --><i class=""fas fa-star text-yellow-500"" aria-hidden=""true""></i></span></span>"
Page Content Image,"DESCRIPTION:
The UI should display a responsive image with a caption, optimized for mobile-first and accessibility.
COMPONENTS:
- ImageComponent: (standalone): Displays an image with a caption.
- CaptionComponent: (standalone): Displays a caption text.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ImageComponent/></main>
COMPONENT HTML:
ImageComponent:
<figure class=""flex justify-center mb-4""><img src=""{image_src}"" alt=""{image_alt}"" class=""w-full md:w-3/4 lg:w-1/2 object-cover rounded""/><figcaption class=""text-xs text-gray-600"">{caption_text}</figcaption></figure>
CaptionComponent:
<p class=""text-xs text-gray-600"">{caption_text}</p>"
Page Content Image,"DESCRIPTION:
The UI should display an image with a caption below it. The image should take up the full width of the container and have a maximum height. The caption should be centered below the image.
COMPONENTS:
- ImageContent: standalone component
- ImageCaption: standalone component
HTML:
<div class=""max-w-md mx-auto p-4""><ImageContent/><ImageCaption/></div>
COMPONENT HTML:
ImageContent:
<img src={image_src} alt={image_alt} class=""w-full h-64 object-cover""/>
ImageCaption:
<p class=""text-lg text-center"">{caption_text}</p>"
Random quote generator,"DESCRIPTION:
A centered card with a quote, author, and a button to generate a new quote.
COMPONENTS:
- QuoteCard: A standalone component that contains the quote and author.
- ActionButton: A standalone component that generates a new quote when clicked.
HTML:
<div class=""flex h-screen justify-center p-4""><QuoteCard/><ActionButton/></div>
COMPONENT HTML:
QuoteCard:
<div class=""bg-white rounded p-4 max-w-md shadow-md""><blockquote class=""text-lg"">{quote}</blockquote><p class=""text-gray-500"">— {author}</p></div>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">New Quote</button>"
Random quote generator,"DESCRIPTION:
A simple page with a quote, author, and a button to generate a new quote. The quote and author are displayed prominently, with the button below.
COMPONENTS:
- QuoteDisplay: (standalone): Displays the quote and author.
- NewQuoteButton: (standalone): A button to generate a new quote.
HTML:
<div class=""min-h-screen flex items-center justify-center py-12""><div class=""max-w-md""><QuoteDisplay/><NewQuoteButton/></div></div>
COMPONENT HTML:
QuoteDisplay:
<blockquote class=""text-xl font-bold mb-4""><p>""{quote}""</p><footer class=""text-sm text-gray-600"">{author}</footer></blockquote>
NewQuoteButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">New Quote</button>"
Upvote and downvote buttons for rating content,"DESCRIPTION:
The UI should consist of two buttons, one for upvoting and one for downvoting, placed side by side. The upvote button should have an upward-facing arrow icon, and the downvote button should have a downward-facing arrow icon. The buttons should be small and compact, with a subtle background color and a hover effect to indicate interactivity.
COMPONENTS:
- RatingButtons: a standalone component that contains both the upvote and downvote buttons
- UpvoteButton: a standalone component that renders the upvote button
- DownvoteButton: a standalone component that renders the downvote button
HTML:
<div class=""flex items-center""><RatingButtons/></div>
COMPONENT HTML:
RatingButtons:
<div class=""flex""><UpvoteButton/><DownvoteButton/></div>
UpvoteButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-arrow-up""></i><span>{upvote_count}</span></button>
DownvoteButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-arrow-down""></i><span>{downvote_count}</span></button>"
Image overlays,"DESCRIPTION:
The UI should have an image with an overlay that appears on hover. The overlay should have a semi-transparent background and display some text.
COMPONENTS:
- ImageWithOverlay: (standalone)
HTML:
<div class=""max-w-md mx-auto""><ImageWithOverlay/></div>
COMPONENT HTML:
ImageWithOverlay:
<div class=""relative overflow-hidden""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-64 object-cover""/><div class=""absolute inset-0 bg-gray-800 bg-opacity-50 hidden group-hover:block""><p class=""text-lg text-white"">{overlay_text}</p></div></div>"
Product Description List Item,"DESCRIPTION:
The UI should display a list item that contains a product description, which includes a product title, a product rating, and a short product description. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductDescriptionListItem: standalone component
- ProductTitle: standalone component, displays the title of the product
- ProductRating: standalone component, displays the rating of the product
- ProductDescription: standalone component, displays a short description of the product
HTML:
<ul class=""flex flex-col gap-4 md:flex-row md:flex-wrap""><ProductDescriptionListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductDescriptionListItem:
<li class=""flex flex-col gap-2""><ProductTitle/><ProductRating/><ProductDescription/></li>
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
ProductRating:
<div class=""flex gap-1"">{rating} <span class=""text-sm"">/ 5</span></div>
ProductDescription:
<p>{productDescription}</p>"
Reply button to respond to tweets,"DESCRIPTION:
The UI should be a small button with a reply icon and the text ""Reply"". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.
COMPONENTS:
- ReplyButton: (standalone)
HTML:
<button><ReplyButton/></button>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-reply mr-2""></i>Reply</button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Flashcards for learning,"DESCRIPTION:
The UI should display a flashcard with a term on one side and a definition on the other. The flashcard should be responsive, with a mobile-first design that adapts to different screen sizes. The UI should also be accessible, with clear typography and sufficient color contrast.
COMPONENTS:
- Flashcard: Standalone component that renders a flashcard with a term and definition.
- TermSide: Takes children (the term text).
- DefinitionSide: Takes children (the definition text).
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Flashcard/></div>
COMPONENT HTML:
Flashcard:
<div class=""flex flex-col md:flex-row items-center justify-center h-screen""><TermSide>{term}</TermSide><DefinitionSide>{definition}</DefinitionSide><!-- toggle button to flip the flashcard --><button class=""absolute top-0 right-0 mt-2 mr-2 p-2 text-gray-500 hover:text-gray-800"">Flip </button></div>
TermSide:
<div class=""p-4 bg-yellow-100 text-lg"">{children}</div>
DefinitionSide:
<div class=""p-4 bg-white text-lg"">{children}</div>"
Checkboxes,"DESCRIPTION:
The UI consists of a list of checkboxes allowing users to select multiple options. Each checkbox is accompanied by a label to clearly indicate what the option is for. The layout should be clean and straightforward, aligning checkboxes vertically for clarity and ease of use.
COMPONENTS:
- CheckboxItem: (Standalone): Represents a single checkbox with a label.
- CheckboxList: (Takes children): A container component that groups multiple CheckboxItems.
HTML:
<CheckboxList><CheckboxItem/><CheckboxItem/><CheckboxItem/></CheckboxList>
COMPONENT HTML:
CheckboxItem:
<div class=""flex items-center mb-4""><input type=""checkbox"" id=""{checkbox_id}"" class=""checked:bg-blue-600 focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded""/><label for=""{checkbox_id}"" class=""ml-2 text-sm font-medium text-gray-900"">{label_text}</label></div>
CheckboxList:
<div class=""p-4 bg-white shadow rounded-lg"">{children} </div>"
Payment and Invoicing Tools,"DESCRIPTION:
The UI should be a responsive, mobile-first page that displays payment and invoicing tools with clear headings, buttons, and form elements. The layout should adjust to different screen sizes, and the elements should be accessible and SEO-friendly.
COMPONENTS:
- HeaderBar: (standalone): Displays the page title and navigation.
- PaymentMethods: (takes children): Displays a list of payment methods.
- InvoicingForm: (takes children): Displays a form for creating invoices.
- PaymentButton: (standalone): A call-to-action button for making payments.
- InvoiceSummary: (takes children): Displays a summary of the invoice.
HTML:
<main class=""max-w-md mx-auto p-4""><HeaderBar/><section class=""flex flex-wrap -mx-4""><PaymentMethods><PaymentButton/><PaymentButton/><PaymentButton/></PaymentMethods><InvoicingForm><!-- Form elements will go here --></InvoicingForm></section><InvoiceSummary><!-- Invoice summary details will go here --></InvoiceSummary></main>
COMPONENT HTML:
HeaderBar:
<header class=""bg-gray-100 py-4""><h1 class=""text-2xl font-bold"">{page_title}</h1><nav class=""flex justify-end""><a class=""text-gray-600 hover:text-gray-900"" href=""#"">{nav_link}</a></nav></header>
PaymentMethods:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>
InvoicingForm:
<form class=""w-full max-w-md""><label class=""block mb-2"" for=""invoice_date"">Invoice Date </label><input class=""w-full p-2"" id=""invoice_date"" type=""date"" value=""{invoice_date}""/><!-- More form elements will go here -->{children}</form>
PaymentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InvoiceSummary:
<table class=""w-full text-sm""><tr><th class=""px-4 py-2"">Invoice #</th><td class=""px-4 py-2"">{invoice_number}</td></tr><!-- More table rows will go here -->{children}</table>"
Payment and Invoicing Tools,"DESCRIPTION:
The UI should be a simple and clean page that displays a list of payment and invoicing tools with their respective logos, names, and descriptions. The page should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PaymentToolList: (takes children) - a container for a list of `PaymentToolCard` components
HTML:
<main class=""max-w-lg mx-auto p-4 pt-6 pb-8""><h1 class=""text-3xl font-bold mb-4"">Payment and Invoicing Tools</h1><PaymentToolList><!-- list of payment tool cards will be rendered here --></PaymentToolList></main>
COMPONENT HTML:
PaymentToolList:
<ul class=""list-none mb-0"">{children}</ul>"
Payment and Invoicing Tools,"DESCRIPTION:
The UI should display a list of payment and invoicing tools with their respective logos, names, and descriptions. The list should be responsive and accessible on various devices.
COMPONENTS:
- PaymentToolCard: A standalone component that displays a single payment tool's information.
- PaymentToolList: A component that takes children, which are multiple `PaymentToolCard` components.
HTML:
<!-- Payment and Invoicing Tools Section --><section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-3xl font-bold mb-4"">Payment and Invoicing Tools</h2><PaymentToolList/></section>
COMPONENT HTML:
PaymentToolCard:
<!-- Individual Payment Tool Card --><div class=""bg-white shadow-md rounded p-4 mb-4""><img src=""{logo_url}"" alt=""{tool_name}"" class=""w-10 h-10 mr-4""><div class=""flex-1""><h3 class=""text-lg font-bold"">{tool_name}</h3><p class=""text-gray-600"">{tool_description}</p></div></div>
PaymentToolList:
<!-- List of Payment Tools --><ul class=""list-none mb-0"">{children}</ul>"
Certifications or licenses section with issuers,"DESCRIPTION:
The Certifications or Licenses section should display a list of certificates or licenses with their corresponding issuers, dates, and credential IDs. The section should be organized in a clean and readable manner, with each certification or license displayed in a separate row. The issuer, date, and credential ID should be displayed in a concise and easily readable format.
COMPONENTS:
- CertificationCard: (standalone): Displays a single certification or license with its issuer, date, and credential ID.
- CertificationList: (takes children): Container component for a list of certifications or licenses.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Certifications and Licenses</h2><CertificationList><CertificationCard/><CertificationCard/><!-- Add more CertificationCard components here --></CertificationList></section>
COMPONENT HTML:
CertificationCard:
<div class=""flex justify-between mb-4""><div><h3 class=""text-lg font-bold"">{issuer_name}</h3><p>{credential_id}</p></div><div class=""text-gray-600""><p>{issue_date}</p></div></div>
CertificationList:
<ul class=""list-none"">{children}</ul>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should display a service section with three columns, each containing an icon, a brief description, and a title. The section should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- ServiceCard: standalone component that renders an icon, title, and description.
HTML:
<section class=""max-w-md mx-auto pt-12 pb-6""><h2 class=""text-3xl font-bold mb-4"">Our Services</h2><div class=""flex flex-wrap justify-center""><ServiceCard/><ServiceCard/><ServiceCard/></div></section>
COMPONENT HTML:
ServiceCard:
<div class=""w-full md:w-1/3 xl:w-1/3 p-6""><i class=""fas fa-{icon_name} text-3xl text-gray-600 mb-4""></i><h3 class=""text-lg font-bold mb-2"">{service_title}</h3><p class=""text-gray-600"">{service_description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Trending topics display for popular discussions,"DESCRIPTION:
The UI should display a list of trending topics, each with a title, a brief description, and a call-to-action button.
COMPONENTS:
- TrendingTopicList: component that takes children, which will be a list of `TrendingTopicCard` components
HTML:
<div class=""container mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- list of TrendingTopicCard components will go here --></TrendingTopicList></div>
COMPONENT HTML:
TrendingTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
State/Province/Country Selects,"DESCRIPTION:
The UI should consist of three dropdown selects for selecting a country, state/province, and a label to indicate the selection. The dropdowns should be stacked vertically, with the country dropdown first, followed by the state/province dropdown, and finally the label. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- CountrySelect: Standalone component that renders a dropdown select for selecting a country.
- StateProvinceSelect: Standalone component that renders a dropdown select for selecting a state or province, depending on the country selected.
- SelectionLabel: Component that takes children, rendering a label that indicates the selected country and state/province.
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4""><CountrySelect/><StateProvinceSelect/><SelectionLabel>{selected_country} {selected_state_province}
</SelectionLabel></div>
COMPONENT HTML:
CountrySelect:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select a country</option><!-- list of countries here --><option value=""{country_code}"">{country_name}</option></select>
StateProvinceSelect:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select a state or province</option><!-- list of states or provinces here --><option value=""{state_province_code}"">{state_province_name}</option></select>
SelectionLabel:
<p class=""text-sm text-gray-600"">{children}</p>"
State/Province/Country Selects,"DESCRIPTION:
A responsive form section with three connected selects for state/province, country, and an additional optional input for zip/postal code. The selects should be mobile-friendly and have accessible labels.
COMPONENTS:
- CountrySelect: Standalone, renders a select element for country selection
- StateSelect: Standalone, renders a select element for state/province selection, dependent on the country selection
- ZipInput: Standalone, renders an input element for zip/postal code
- LocationForm: Component that takes children, renders a div containing the country, state/province, and zip/postal code inputs
HTML:
<form><LocationForm><CountrySelect/><StateSelect/><ZipInput/></LocationForm></form>
COMPONENT HTML:
CountrySelect:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""country"">Country</label><select class=""block w-full pl-10 text-sm text-gray-700"" id=""country"" name=""country"">{countryOptions} </select></div>
StateSelect:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""state_province"">State/Province</label><select class=""block w-full pl-10 text-sm text-gray-700"" id=""state_province"" name=""state_province"">{stateProvinceOptions} </select></div>
ZipInput:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""zip_postal_code"">Zip/Postal Code</label><input class=""block w-full pl-10 text-sm text-gray-700"" id=""zip_postal_code"" name=""zip_postal_code"" type=""text"" inputmode=""numeric""/></div>
LocationForm:
<div class=""max-w-md mx-auto p-4 pt-6"">{children}</div>"
State/Province/Country Selects,"DESCRIPTION:
The UI should be a responsive form with three select inputs for state/province, country, and a label for each select input. The form should be accessible and SEO-friendly.
COMPONENTS:
- StateSelect: standalone component
- CountrySelect: standalone component
- FormLabel: takes children
HTML:
<form class=""max-w-md mx-auto p-4""><div class=""mb-4""><FormLabel>State/Province:</FormLabel><StateSelect/></div><div class=""mb-4""><FormLabel>Country:</FormLabel><CountrySelect/></div></form>
COMPONENT HTML:
StateSelect:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700"" id={state_id}><option value="""">Select a state/province</option><!-- dynamically generated options -->{states}</select>
CountrySelect:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700"" id={country_id}><option value="""">Select a country</option><!-- dynamically generated options -->{countries}</select>
FormLabel:
<label class=""block mb-2 text-sm text-gray-700"">{children}</label>"
State/Province/Country Selects,"DESCRIPTION:
The UI should be a form with three dropdown selects for state/province, country, and an optional ""Other"" text input.
COMPONENTS:
- StateProvinceSelect: standalone, a dropdown select for state/province
- CountrySelect: standalone, a dropdown select for country
- OtherInput: standalone, a text input for an optional ""Other"" value
- LocationForm: takes children, a form containing the state/province, country, and optional ""Other"" input
HTML:
<form class=""max-w-md mx-auto p-4""><LocationForm><StateProvinceSelect/><CountrySelect/><OtherInput/></LocationForm></form>
COMPONENT HTML:
StateProvinceSelect:
<select class=""block w-full p-2 pl-10 text-gray-700"" id=""state_province""><option value="""">{select_state_province}</option><!-- options will be populated dynamically --></select>
CountrySelect:
<select class=""block w-full p-2 pl-10 text-gray-700"" id=""country""><option value="""">{select_country}</option><!-- options will be populated dynamically --></select>
OtherInput:
<input type=""text"" class=""block w-full p-2 pl-10 text-gray-700"" id=""other"" placeholder=""Other""/>
LocationForm:
<div class=""flex flex-wrap -mx-3 mb-6"">{children}</div>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a profile section for designers/studios, showcasing their information, projects, and skills. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- DesignerProfileHeader: A standalone component that displays the designer's/studio's name, profile picture, and tagline.
- ProjectCard: A standalone component that displays a project's information, including title, description, and image.
- SkillBadge: A standalone component that displays a skill with a title and icon.
- DesignerProfileSection: A component that takes children to display the designer's/studio's projects and skills.
HTML:
<section class=""max-w-md mx-auto p-4""><DesignerProfileHeader/><DesignerProfileSection><h2 class=""text-lg font-bold mb-4"">Projects</h2><ul class=""flex flex-wrap justify-center mb-4""><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ul><h2 class=""text-lg font-bold mb-4"">Skills</h2><ul class=""flex flex-wrap justify-center""><SkillBadge/><SkillBadge/><!-- Add more SkillBadge components here --></ul></DesignerProfileSection></section>
COMPONENT HTML:
DesignerProfileHeader:
<header class=""flex justify-center mb-4""><img src=""{profile_picture_url}"" alt=""{designer_name}"" class=""w-24 h-24 rounded-full""/><div class=""ml-4""><h1 class=""text-2xl font-bold"">{designer_name}</h1><p class=""text-sm"">{tagline}</p></div></header>
ProjectCard:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{project_image_url}"" alt=""{project_title}"" class=""w-full h-48 object-cover rounded""/><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-sm"">{project_description}</p></li>
SkillBadge:
<li class=""mr-4 mb-4""><span class=""bg-orange-100 text-orange-800 py-1 px-2 rounded"">{skill_title}</span><!-- Add icon here --><i class=""fas fa-{skill_icon}""></i></li>
DesignerProfileSection:
<!-- This component should render its children --><div class=""px-4"">{children}</div>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons, showing the email's sender, subject, and content, along with buttons to reply to or delete the email.
COMPONENTS:
- EmailThreadHeader: standalone, displays email sender and subject
- EmailContent: standalone, displays email content
- ReplyButton: standalone, displays a reply button
- DeleteButton: standalone, displays a delete button
- EmailThread: takes children, wraps the entire email thread
HTML:
<EmailThread><EmailThreadHeader/><EmailContent/><ReplyButton/><DeleteButton/></EmailThread>
COMPONENT HTML:
EmailThreadHeader:
<div class=""flex justify-between""><p>{sender}</p><p>{subject}</p></div>
EmailContent:
<div><p>{content}</p></div>
ReplyButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button>
DeleteButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button>
EmailThread:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., ""Reply"" and ""Reply All"") below the email body.
COMPONENTS:
- EmailThread: Standalone component that displays an individual email thread.
- EmailMetadata: Standalone component that displays the sender's name and email subject.
- EmailBody: Standalone component that displays the email body.
- ReplyButtons: Standalone component that displays the reply buttons.
HTML:
<div class=""max-w-md mx-auto p-4""><EmailThread/></div>
COMPONENT HTML:
EmailThread:
<div class=""border bg-white rounded p-4""><EmailMetadata/><EmailBody/><ReplyButtons/></div>
EmailMetadata:
<div class=""flex justify-between mb-2""><p class=""font-bold"">{sender_name}</p><p class=""text-gray-600"">{email_subject}</p></div>
EmailBody:
<div class=""mb-4""><p>{email_body}</p></div>
ReplyButtons:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply All</button></div>"
Aside content,"DESCRIPTION:
The UI should consist of a primary content section with an aside section aligned to one side. The primary content will be broader, focusing on the main information, while the aside section contains complementary information or links (e.g., related articles, advertisements). It should be responsive, with the aside possibly moving below the main content or to a different position on smaller screens.
COMPONENTS:
- MainContent: (Standalone): Where the main information or articles will be displayed.
- AsideContent: (Standalone): Dedicated to secondary information such as additional articles, quick facts, or ads.
HTML:
<div class=""flex flex-col md:flex-row""><MainContent/><AsideContent/></div>
COMPONENT HTML:
MainContent:
<!-- Main content section displaying primary information --><div class=""flex-1 p-4""><h1 class=""text-xl font-bold mb-2"">{main_heading}</h1><p>{main_paragraph}</p></div>
AsideContent:
<!-- Aside section for complementary information --><div class=""w-full md:w-1/4 p-4 border-l md:border-l-0 md:border-t""><h2 class=""text-lg font-semibold mb-2"">Related Articles</h2><ul class=""list-disc pl-5 space-y-1""><li><a href=""{related_article_link_1}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_1}</a></li><li><a href=""{related_article_link_2}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_2}</a></li><li><a href=""{related_article_link_3}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_3}</a></li></ul></div>"
Product sorting,"DESCRIPTION:
- The UI should feature a compact selection interface that allows users to sort a list of products based on a set of predefined criteria such as price, popularity, and rating. This might typically be a dropdown menu from which users can select the sorting option. On mobile, this dropdown should be easily accessible, and on larger screens, it should be visible and intuitive as part of a product listing page.
COMPONENTS:
- SortDropdown: (Standalone): A dropdown component that allows users to select the sort order of products.
- Label: (Standalone): A text label for the dropdown to guide users on what the dropdown is for.
HTML:
<div class=""flex flex-col sm:flex-row items-center justify-between p-4""><Label/><SortDropdown/></div>
COMPONENT HTML:
SortDropdown:
<select class=""form-select appearance-none block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"" aria-label=""Sort products by""><option value=""price"">Price: Low to High</option><option value=""price-desc"">Price: High to Low</option><option value=""popularity"">Popularity</option><option value=""rating"">Rating</option></select>
Label:
<label for=""productSortDropdown"" class=""block text-sm font-medium text-gray-700"">Sort by: </label>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Rich media embed with video playback and playback controls,"DESCRIPTION:
The UI should be a rich media embed with a video player that has playback controls, including play/pause, volume control, and a progress bar. The video player should be responsive and adaptable to different screen sizes.
COMPONENTS:
- RichMediaEmbed: standalone component that contains the video player and playback controls.
- VideoPlayer: standalone component that contains the video element and playback controls.
- PlaybackControls: standalone component that contains the play/pause button, volume control, and progress bar.
- ProgressBar: standalone component that displays the video progress.
- VolumeControl: standalone component that allows the user to adjust the volume.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><RichMediaEmbed/></div>
COMPONENT HTML:
RichMediaEmbed:
<div class=""flex flex-col h-full""><VideoPlayer/></div>
VideoPlayer:
<div class=""flex-grow""><video src=""{videoSrc}"" class=""w-full h-full object-cover""></video><PlaybackControls/></div>
PlaybackControls:
<div class=""flex justify-between py-2""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Play/Pause"">{playPauseButtonIcon} </button><ProgressBar/><VolumeControl/></div>
ProgressBar:
<div class=""flex-grow w-full h-2 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style={{ width: `${progressPercentage}%` }}></div></div>
VolumeControl:
<div class=""flex items-center""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Mute/Unmute"">{muteButtonIcon} </button><div class=""h-2 w-16 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style={{ width: `${volumePercentage}%` }}></div></div></div>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a threaded view, with each topic showing the topic title, author, and timestamp. The list should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- TopicThread: standalone component to display a single topic thread
- Topic: standalone component to display a single topic
- TopicTitle: standalone component to display the topic title
- TopicMeta: standalone component to display the topic author and timestamp
- TopicReplies: standalone component to display the replies to a topic
- Reply: standalone component to display a single reply
HTML:
<div class=""container mx-auto p-4""><h1>Topic List</h1><ul class=""list-none mb-4""><TopicThread/><!-- more TopicThread components will be rendered here --></ul></div>
COMPONENT HTML:
TopicThread:
<li class=""mb-4""><Topic/><TopicReplies/></li>
Topic:
<div class=""flex justify-between mb-2""><TopicTitle/><TopicMeta/></div>
TopicTitle:
<h2 class=""text-lg"">{topic_title}</h2>
TopicMeta:
<p class=""text-gray-600"">{author_name} | {timestamp}</p>
TopicReplies:
<ul class=""list-none pl-4""><Reply/><!-- more Reply components will be rendered here --></ul>
Reply:
<li class=""mb-2""><TopicTitle/><TopicMeta/></li>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a list view of topics, with each topic displaying a title, description, and metadata such as author and timestamp. The list should be responsive, with a card-like design on larger screens and a condensed list on smaller screens.
COMPONENTS:
- TopicCard: Standalone component that displays a single topic.
- TopicList: Component that takes children (multiple `TopicCard`s) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4""><TopicList><TopicCard/><TopicCard/><!-- repeat for each topic --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""bg-white shadow-md rounded px-4 py-2 mb-4""><h2 class=""text-lg"">{topicTitle}</h2><p class=""text-gray-600"">{topicDescription}</p><p class=""text-sm text-gray-500"">By {authorName} on {timestamp}</p></div>
TopicList:
<ul class=""list-none mb-4"">{children}</ul>"
Responsive design layout,"DESCRIPTION:
A basic responsive design layout with a header, navigation, main content area, and footer. The layout should adapt to different screen sizes, with a mobile-friendly design for small screens and a more extensive layout for larger screens.
COMPONENTS:
- HeaderBar: A standalone component for the header section.
- NavigationBar: A component that takes children (nav items) and displays them horizontally on larger screens and vertically on smaller screens.
- MainContent: A component that takes children (content) and displays them in a responsive layout.
- FooterSection: A standalone component for the footer section.
HTML:
<body><HeaderBar/><NavigationBar><!-- nav items will be inserted here --></NavigationBar><MainContent><!-- main content will be inserted here --></MainContent><FooterSection/></body>
COMPONENT HTML:
HeaderBar:
<header class=""flex items-center justify-center py-4 md:py-6""><h1 class=""text-lg md:text-2xl"">{header_title}</h1></header>
NavigationBar:
<nav class=""flex flex-wrap justify-center md:flex-nowrap mb-4 md:mb-0""><ul class=""flex flex-wrap md:flex-nowrap"">{children} </ul></nav>
MainContent:
<main class=""max-w-md mx-auto px-4 md:px-0 mb-4 md:mb-6"">{children}</main>
FooterSection:
<footer class=""bg-gray-200 py-4 md:py-6""><p class=""text-sm text-gray-600"">{footer_text}</p></footer>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post formatting, with a profile picture, username, post text, and actions (like, comment, share). The post should adapt to different screen sizes, with the profile picture and username on the same line on larger screens, and stacked on smaller screens.
COMPONENTS:
- UserProfilePicture: Standalone component, displays the profile picture of the user who made the post.
- UserName: Standalone component, displays the username of the user who made the post.
- PostText: Standalone component, displays the text of the post.
- PostActions: Standalone component, displays the actions for the post (like, comment, share).
HTML:
<div class=""flex flex-wrap md:flex-nowrap md:justify-start mb-4""><UserProfilePicture/><div class=""md:ml-4""><UserName/><PostText/><PostActions/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full""/>
UserName:
<span class=""text-lg"">{username}</span>
PostText:
<p class=""text-gray-600"">{post_text}</p>
PostActions:
<div class=""flex justify-evenly mt-2""><button class=""text-gray-600"">{like_count} likes</button><button class=""text-gray-600"">{comment_count} comments</button><button class=""text-gray-600"">Share</button></div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post formatting with a header, image, content, and footer sections. The post format should be mobile-first and adaptable to different screen sizes.
COMPONENTS:
- PostHeader: A standalone component that displays the post header.
- PostImage: A standalone component that displays the post image.
- PostContent: A component that displays the post content and takes children.
- PostFooter: A standalone component that displays the post footer.
HTML:
<article class=""mb-4 bg-white rounded shadow-md overflow-hidden""><PostHeader/><PostImage/><PostContent><!-- post content will be rendered here --></PostContent><PostFooter/></article>
COMPONENT HTML:
PostHeader:
<header class=""p-4 border-b border-gray-200""><h2 class=""text-lg font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_by} on {posted_date}</p></header>
PostImage:
<img src=""{image_url}"" class=""w-full h-48 object-cover"" alt=""{image_alt_text}"">
PostContent:
<div class=""p-4"">{children}</div>
PostFooter:
<footer class=""p-4 border-t border-gray-200""><p class=""text-sm text-gray-600"">{footer_text}</p></footer>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a post in a responsive format, with a title, content, and metadata (author and date). On smaller screens, the metadata should be displayed below the content, and on larger screens, it should be displayed to the side of the content.
COMPONENTS:
- Post: A standalone component that contains the title, content, and metadata of a post.
- PostMetadata: A standalone component that displays the author and date of a post.
- PostTitle: A standalone component that displays the title of a post.
- PostContent: A standalone component that displays the content of a post.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><Post/></div>
COMPONENT HTML:
Post:
<div class=""flex flex-wrap lg:flex-nowrap""><div class=""w-full lg:w-1/2 lg:pr-4""><PostTitle/></div><div class=""w-full lg:w-1/2 lg:pl-4""><PostContent/></div><div class=""w-full lg:w-1/2 lg:pl-4""><PostMetadata/></div></div>
PostMetadata:
<p class=""text-sm text-gray-600"">Posted by {author} on {date}</p>
PostTitle:
<h2 class=""text-2xl font-bold"">{post_title}</h2>
PostContent:
<p class=""text-lg"">{post_content}</p>"
Quote players,"DESCRIPTION:
The UI should display a list of quotes with their respective authors. Each quote should be displayed on a separate line with the author's name on a new line below the quote. The quotes should be displayed in a responsive list, with a maximum width to prevent the text from becoming too wide.
COMPONENTS:
- QuotePlayerList: A component that takes children, which are `QuotePlayerCard` components, and displays them in a responsive list.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quote Players</h1><QuotePlayerList><!-- List of quotes will be inserted here --></QuotePlayerList></div>
COMPONENT HTML:
QuotePlayerList:
<ul class=""list-none mb-0"">{children}</ul>"
Image gallery controls,"DESCRIPTION:
The UI for the image gallery controls should consist of simple navigation buttons that allow users to move forward to the next image, backward to the previous image, and possibly a close button to exit the gallery view. These controls should be visually identifiable, accessible, and responsive, adapting gracefully across devices.
COMPONENTS:
- GalleryButton: Standalone – Represents a button used for navigation within the gallery (next, previous, close).
- GalleryControls: Takes children – A container that groups all the gallery buttons together.
HTML:
<div class=""flex justify-center space-x-4 p-4""><GalleryButton/><GalleryButton/><GalleryButton/></div>
COMPONENT HTML:
GalleryButton:
<button type=""button"" class=""p-2 text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md"">{button_label}</button>
GalleryControls:
<div class=""flex justify-center space-x-4 p-4"">{children}</div>"
Blog Post Author Image,"DESCRIPTION:
The UI should display an author's image, name, and bio in a concise and visually appealing way.
COMPONENTS:
- AuthorAvatar: standalone, displays the author's image
- AuthorInfo: takes children, displays the author's name and bio
HTML:
<div class=""flex items-center mb-4""><AuthorAvatar/><AuthorInfo><h5 class=""text-lg font-bold"">{authorName}</h5><p class=""text-gray-600"">{authorBio}</p></AuthorInfo></div>
COMPONENT HTML:
AuthorAvatar:
<img src={authorImageUrl} alt={authorName} class=""w-12 h-12 rounded-full""/>
AuthorInfo:
<div class=""ml-4"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.
COMPONENTS:
- EmailFilterOption: (standalone) - A single filter option with a checkbox and label.
- EmailSortOption: (standalone) - A single sort option with a radio button and label.
- FilterPanel: (takes children) - The main filter panel that contains all the filter options.
- SortPanel: (takes children) - The main sort panel that contains all the sort options.
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><FilterPanel><EmailFilterOption/><EmailFilterOption/><EmailFilterOption/></FilterPanel><SortPanel><EmailSortOption/><EmailSortOption/><EmailSortOption/></SortPanel></div>
COMPONENT HTML:
EmailFilterOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterId}"" class=""mr-2""><label for=""{filterId}"" class=""text-sm"">{filterLabel}</label></div>
EmailSortOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{sortId}"" class=""mr-2""><label for=""{sortId}"" class=""text-sm"">{sortLabel}</label></div>
FilterPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Filters</h5>{children}</div>
SortPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Sort by</h5>{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should display a summary of the order, including the subtotal, in a clean and simple format.
COMPONENTS:
- OrderSummary: standalone component that displays the order summary.
- SubtotalDisplay: standalone component that displays the subtotal.
HTML:
<div class=""p-4 bg-white rounded shadow-md""><OrderSummary/><SubtotalDisplay/></div>
COMPONENT HTML:
OrderSummary:
<p class=""text-lg font-bold"">Order Summary:</p><ul><li class=""py-2"">Items: {item_count}</li><li class=""py-2"">Total weight: {total_weight} kg</li><li class=""py-2"">Shipping: {shipping_method}</li></ul>
SubtotalDisplay:
<p class=""text-lg font-bold"">Subtotal: <span class=""text-orange-600"">{subtotal_amount}</span></p>"
Order summary and subtotal display,"DESCRIPTION:
The UI should display an order summary with a subtotal, taxes, and a total. The design should be responsive, with a mobile-first approach, and follow accessibility guidelines.
COMPONENTS:
- OrderSummaryComponent: (standalone) - displays the order summary
- SubtotalComponent: (standalone) - displays the subtotal
- TaxComponent: (standalone) - displays the tax
- TotalComponent: (standalone) - displays the total
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-2"">Order Summary</h2><OrderSummaryComponent/><div class=""flex justify-between mb-2""><SubtotalComponent/><TaxComponent/></div><TotalComponent/></section>
COMPONENT HTML:
OrderSummaryComponent:
<ul class=""list-none mb-4""><li class=""flex justify-between mb-2"">{item_name} x {item_quantity}</li><!-- repeat for each item in the order --></ul>
SubtotalComponent:
<p>Subtotal: <span class=""font-bold"">{subtotal_amount}</span></p>
TaxComponent:
<p>Tax ({tax_percentage}%): <span class=""font-bold"">{tax_amount}</span></p>
TotalComponent:
<p class=""text-lg font-bold"">Total: <span class=""text-lg font-bold"">{total_amount}</span></p>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Customer Profile: View customer details,"DESCRIPTION:
A simple profile page with a header, customer information, and a call-to-action (CTA) button.
COMPONENTS:
- CustomerProfileHeader: Standalone component to display the customer's profile picture and name.
- CustomerInfoSection: Takes children to display customer information such as email, phone number, and address.
- CallToActionButton: Standalone component to render a CTA button with a customizable label.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><CustomerProfileHeader/><div class=""mt-4""><CustomerInfoSection><p><strong>Email:</strong>{customer_email}</p><p><strong>Phone:</strong>{customer_phone}</p><p><strong>Address:</strong>{customer_address}</p></CustomerInfoSection></div><div class=""mt-6""><CallToActionButton/></div></div>
COMPONENT HTML:
CustomerProfileHeader:
<div class=""flex flex-col items-center""><img src={customer_profile_picture} class=""w-24 h-24 rounded-full"" alt=""Customer Profile Picture""/><h2 class=""text-lg font-bold"">{customer_name}</h2></div>
CustomerInfoSection:
<div class=""bg-white shadow-md p-4"">{children}</div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_label}</button>"
Loading spinner with animation and progress circle,"DESCRIPTION:
The UI should be a responsive, mobile-first loading spinner with an animation and a progress circle. The progress circle should show the percentage of completion.
COMPONENTS:
- LoadingSpinner: a standalone component that displays the loading animation and progress circle.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""relative w-12 h-12 mx-auto""><!-- animation --><div class=""animate-spin h-12 w-12 border-4 border-gray-200 rounded-full border-t-transparent""></div><!-- progress circle --><div class=""absolute top-0 left-0 w-12 h-12 text-lg text-gray-600""><span>{progress}%</span></div></div>"
Chatbot widget,"DESCRIPTION:
The UI should be a chatbot widget that appears as a floating button on the bottom right corner of the screen. When clicked, it expands to a chat window with a header, input field, and a send button. The chat window should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ChatbotButton: (standalone): a floating button that triggers the chat window
- ChatWindow: (takes children): the chat window with a header, input field, and send button
- ChatHeader: (standalone): the header section of the chat window
- ChatInput: (standalone): the input field for user input
- SendButton: (standalone): the send button
HTML:
<div class=""fixed bottom-4 right-4""><ChatbotButton/></div><div class=""hidden md:flex fixed bottom-0 right-0 p-4 bg-white rounded-lg w-64 md:w-96""><ChatWindow><ChatHeader/><div class=""flex flex-col p-4""><ChatInput/><SendButton/></div></ChatWindow></div>
COMPONENT HTML:
ChatbotButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-comment""></i></button>
ChatWindow:
<div class=""flex flex-col p-4"">{children}</div>
ChatHeader:
<header class=""flex justify-between p-4""><h3 class=""text-lg"">Chatbot</h3><button class=""text-gray-600 hover:text-gray-900""><i class=""fas fa-times""></i></button></header>
ChatInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type a message..."">
SendButton:
<button class=""bg-teal-500 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-full"">Send</button>"
Counter control,"DESCRIPTION:
The UI should feature a numeric display of the current counter value and two buttons: one to increment and one to decrement the counter. It should be easy to use on both desktop and mobile devices, with clearly labeled buttons.
COMPONENTS:
- CounterDisplay: (Standalone)**: Displays the current count.
- IncrementButton: (Standalone)**: Button to increase the count.
- DecrementButton: (Standalone)**: Button to decrease the count.
HTML:
<div class=""flex flex-col items-center space-y-4""><!-- Counter display area --><CounterDisplay/><!-- Button controls for counter --><div class=""flex space-x-2""><DecrementButton/><IncrementButton/></div></div>
COMPONENT HTML:
CounterDisplay:
<div class=""text-xl font-semibold"" aria-live=""polite"">{current_count}</div>
IncrementButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Increase count"">Increase</button>
DecrementButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Decrease count"">Decrease</button>"
Social Media Icons,"DESCRIPTION:
A horizontal row of social media icons, with each icon representing a different platform (e.g. Facebook, Twitter, Instagram, etc.). The icons should be evenly spaced and responsive to different screen sizes.
COMPONENTS:
- SocialMediaIcon: (standalone) - A single social media icon.
- SocialMediaIconList: (takes children) - A container for a list of social media icons.
HTML:
<nav aria-label=""Social media links""><SocialMediaIconList><SocialMediaIcon/><SocialMediaIcon/><SocialMediaIcon/><!-- Add more social media icons here --></SocialMediaIconList></nav>
COMPONENT HTML:
SocialMediaIcon:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon}"" aria-hidden=""true""></i></a>
SocialMediaIconList:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Sticky sidebar,"DESCRIPTION:
The UI should have a sticky sidebar that remains fixed on the screen as the user scrolls. The sidebar should be responsive and adapt to different screen sizes.
COMPONENTS:
- Sidebar: A standalone component that represents the sticky sidebar.
- MainContent: A component that takes children, representing the main content of the page.
HTML:
<div class=""flex h-screen""><Sidebar/><MainContent><!-- main content goes here --></MainContent></div>
COMPONENT HTML:
Sidebar:
<aside class=""w-64 bg-gray-100 h-screen sticky top-0 overflow-y-auto hidden md:block""><!-- sidebar content goes here --></aside>
MainContent:
<main class=""flex-1 p-4"">{children}</main>"
Progress Bars/Steps,"DESCRIPTION:
The UI should be a series of steps or progress bars that visually represent a multi-step process. Each step should have a distinct visual indicator of completeness, such as a checkmark or a filled progress bar. The UI should be responsive and adapt to different screen sizes.
COMPONENTS:
- StepIndicator: A standalone component that represents a single step in the process, displaying a visual indicator of completeness.
- ProgressBar: A component that takes children, wrapping multiple `StepIndicator` components to form a cohesive progress bar.
HTML:
<div class=""md:w-full lg:w-3/4 xl:w-1/2 mx-auto p-4""><ProgressBar><StepIndicator/><StepIndicator/><StepIndicator/><!-- Add more StepIndicator components as needed --></ProgressBar></div>
COMPONENT HTML:
StepIndicator:
<div class=""flex items-center mb-2""><div class=""w-6 h-6 bg-{step_status} rounded-full mr-2"" aria-hidden=""true""></div><p>{step_label}</p></div>
ProgressBar:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Price and Discount Badges,"DESCRIPTION:
The UI should display two types of badges: a price badge and a discount badge. The price badge shows the original price, and the discount badge shows the discount percentage. The badges should be responsive, mobile-first, and accessible.
COMPONENTS:
- PriceBadge: a standalone component that displays the original price.
- DiscountBadge: a standalone component that displays the discount percentage.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 px-2 py-1 rounded-full text-sm""><p>{original_price}</p></span>
DiscountBadge:
<span class=""bg-orange-200 px-2 py-1 rounded-full text-sm""><p>{discount_percentage}% Off</p></span>"
Price and Discount Badges,"DESCRIPTION:
The UI should display two badges, one for price and one for discount, with different background colors and text colors. The price badge should have a light blue background and white text, and the discount badge should have a green background and white text.
COMPONENTS:
- PriceBadge: Standalone component, displays the price of an item.
- DiscountBadge: Standalone component, displays the discount of an item.
HTML:
<div class=""flex gap-2""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 text-white rounded py-1 px-2"">{price}</span>
DiscountBadge:
<span class=""bg-green-400 text-white rounded py-1 px-2"">{discount}% off</span>"
Price and Discount Badges,"DESCRIPTION:
The UI should display a price badge with an optional discount badge next to it. The price badge should show the original price, and the discount badge should show the discount percentage and the new price.
COMPONENTS:
- PriceBadge: A standalone component that displays the original price.
- DiscountBadge: A standalone component that displays the discount percentage and the new price.
HTML:
<div class=""flex items-center""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 px-2 py-1 text-sm rounded"">{original_price}</span>
DiscountBadge:
<span class=""bg-orange-200 px-2 py-1 text-sm rounded"">{discount_percentage}% OFF <span class=""text-gray-600"">{new_price}</span></span>"
SEO Meta Tags/Optimization,"DESCRIPTION:
A basic SEO meta tags optimization setup with title, description, and keywords.
COMPONENTS:
- MetaTitle: - Standalone - Displays the title of the webpage.
- MetaDescription: - Standalone - Displays the meta description of the webpage.
- MetaKeywords: - Standalone - Displays the meta keywords of the webpage.
HTML:
<head><MetaTitle/><MetaDescription/><MetaKeywords/></head>
COMPONENT HTML:
MetaTitle:
<title>{title}</title>
MetaDescription:
<meta name=""description"" content=""{description}""/>
MetaKeywords:
<meta name=""keywords"" content=""{keywords}""/>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
The UI should be a simple text input field with a placeholder for writing a new post. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostEditor: A standalone component that contains the text input field.
- InputField: A standalone component that represents the text input field.
HTML:
<div class=""flex flex-col w-full p-4 md:p-6 lg:p-8""><PostEditor/></div>
COMPONENT HTML:
PostEditor:
<div class=""flex flex-col w-full""><InputField/></div>
InputField:
<textarea class=""w-full p-2 pl-4 pr-4 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" placeholder=""Write a new post..."" rows=""5""></textarea>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
COMPONENTS:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
HTML:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
COMPONENT HTML:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Event countdown timer,"DESCRIPTION:
The UI should display a countdown timer showing the days, hours, minutes, and seconds until a specific event. The timer should be centered and prominent on the page, with a clear and easy-to-read font.
COMPONENTS:
- EventCountdownTimer: A standalone component that displays the countdown timer.
- CountdownSection: A component that displays a single section of the countdown timer (e.g. days, hours, minutes, seconds). Takes children.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><EventCountdownTimer/></div>
COMPONENT HTML:
EventCountdownTimer:
<div class=""text-center text-4xl lg:text-6xl""><CountdownSection>{days} days</CountdownSection><CountdownSection>{hours} hours</CountdownSection><CountdownSection>{minutes} minutes</CountdownSection><CountdownSection>{seconds} seconds</CountdownSection></div>
CountdownSection:
<div class=""inline-block text-2xl lg:text-3xl mx-2"">{children}</div>"
Upload file input field with file type and size limits,"DESCRIPTION:
A file upload input field with a label, allowing users to select a file to upload, with file type and size limits.
COMPONENTS:
- FileUploadInput: standalone component
- FileInputLabel: standalone component
- FileSizeLimit: standalone component
- FileTypeLimit: standalone component
HTML:
<div class=""flex flex-col""><FileInputLabel/><FileUploadInput/><FileSizeLimit/><FileTypeLimit/></div>
COMPONENT HTML:
FileUploadInput:
<input type=""file"" id=""file-upload"" class=""block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold"" accept=""{accepted_file_types}"" max-size=""{max_file_size}""/>
FileInputLabel:
<label for=""file-upload"" class=""text-sm mb-2 block"">Select a file to upload:</label>
FileSizeLimit:
<p class=""text-xs text-gray-500"">Max file size: {max_file_size} MB</p>
FileTypeLimit:
<p class=""text-xs text-gray-500"">Accepted file types: {accepted_file_types}</p>"
Upload file input field with file type and size limits,"DESCRIPTION:
The UI should have a file input field that allows users to upload a file. The input field should have a label indicating the accepted file types and a maximum file size.
COMPONENTS:
- FileInput: (standalone) - The file input field
- Label: (takes children) - The label for the file input field
- Description: (takes children) - The description of the file input field
HTML:
<div class=""flex flex-col gap-2""><Label>Upload File ({acceptedFileTypes})</Label><FileInput/><Description>Max file size: {maxFileSize}MB</Description></div>
COMPONENT HTML:
FileInput:
<input type=""file"" class=""block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"" accept={acceptedFileTypes} maxLength={maxFileSize * 1024 * 1024}/>
Label:
<label class=""block mb-2 text-sm font-medium text-gray-700"">{children}</label>
Description:
<p class=""text-sm text-gray-500"">{children}</p>"
Text providing guidance or instructions within the context of a form field or interface element,"DESCRIPTION:
The UI should display a help text or hint that provides guidance or instructions to the user within the context of a form field or interface element. The text should be clearly visible and easily readable.
COMPONENTS:
- HintText: (standalone): This component will display the help text or hint.
HTML:
<div class=""form-group""><label for=""fieldName"">Field Label</label><input type=""text"" id=""fieldName""/><HintText/></div>
COMPONENT HTML:
HintText:
<span class=""text-sm text-gray-500"">{hint_text}</span>"
Social Sharing Count,"DESCRIPTION:
The Social Sharing Count UI should display the number of shares on various social media platforms, such as Facebook, Twitter, and LinkedIn. The UI should be responsive, mobile-first, and accessible. It should also be easily readable and understandable.
COMPONENTS:
- SocialShareCount: A standalone component that displays the total share count across all social media platforms.
- SocialMediaShareCount: A component that displays the share count for a specific social media platform. It takes children, which is the platform's icon and name.
- SocialMediaIcon: A standalone component that displays an icon for a specific social media platform.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SocialShareCount/><div class=""flex flex-wrap justify-center""><SocialMediaShareCount><SocialMediaIcon/>Facebook</SocialMediaShareCount><SocialMediaShareCount><SocialMediaIcon/>Twitter</SocialMediaShareCount><SocialMediaShareCount><SocialMediaIcon/>LinkedIn</SocialMediaShareCount></div></div>
COMPONENT HTML:
SocialShareCount:
<p class=""text-lg font-bold"">{total_share_count} shares</p>
SocialMediaShareCount:
<div class=""flex items-center mr-4"">{children} <p class=""ml-2"">{share_count} shares</p></div>
SocialMediaIcon:
<!-- Use a class to style the icon, e.g. Facebook icon --><i class=""fab fa-facebook-f text-lg""></i>"
Featured Image Lightbox,"DESCRIPTION:
The UI should display a featured image with a lightbox effect, meaning when the image is clicked, it opens in a full-screen overlay. The image should be responsive and adaptable to different screen sizes. The lightbox overlay should have a darkened background and a close button.
COMPONENTS:
- FeaturedImage: standalone component that displays the featured image
- Lightbox: component that takes a child element (the featured image) and displays it in a full-screen overlay
- LightboxCloseButton: standalone component that displays a close button for the lightbox overlay
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImage/></div><div class=""hidden lg:block fixed top-0 left-0 w-full h-full bg-black bg-opacity-75"" id=""lightbox""><Lightbox><FeaturedImage/></Lightbox><LightboxCloseButton/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_src} alt={image_alt} class=""w-full h-64 object-cover rounded-md lg:h-96""/>
Lightbox:
<div class=""fixed top-0 left-0 w-full h-full p-4 lg:p-6"">{children}</div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-4 text-2xl text-white"" aria-label=""Close lightbox"">&times;</button>"
Syntax highlighting controls,"DESCRIPTION:
The UI for the syntax highlighting controls should include a series of buttons or toggle switches that allow users to select different syntax highlighting styles for a code display area. This might include options for different color themes like ""light"", ""dark"", ""solarized"", etc. These controls should be intuitive, easily accessible, and visually appealing.
COMPONENTS:
- SyntaxControlPanel: A standalone component that houses all the syntax highlighting controls.
- ThemeToggleButton: A component that represents a toggle button for changing the theme of the syntax highlighting, takes children to label the button.
HTML:
<!-- Main container for syntax highlighting controls --><div class=""bg-gray-100 p-4""><h2 class=""text-lg font-semibold"">Syntax Highlighting</h2><SyntaxControlPanel/></div>
COMPONENT HTML:
SyntaxControlPanel:
<!-- Container for the toggle buttons --><div class=""flex space-x-2""><ThemeToggleButton>Light</ThemeToggleButton><ThemeToggleButton>Dark</ThemeToggleButton><ThemeToggleButton>Solarized</ThemeToggleButton></div>
ThemeToggleButton:
<!-- Toggle button for themes --><button class=""px-4 py-2 text-white bg-blue-500 hover:bg-blue-600 focus:ring-2 focus:ring-blue-300 rounded"">{children}</button>"
Navigation controls for indicating the current position within a carousel or slideshow,"DESCRIPTION:
The UI should display a series of small, clickable indicators that represent the different slides in a carousel or slideshow. The indicator for the current slide should be visually distinct from the others.
COMPONENTS:
- CarouselIndicatorList: A container component that holds the indicators for each slide. (Takes children)
- CarouselIndicator: A single indicator component that represents a slide. (Standalone)
HTML:
<nav class=""flex justify-center mb-4""><CarouselIndicatorList><!-- indicators will be inserted here --></CarouselIndicatorList></nav>
COMPONENT HTML:
CarouselIndicatorList:
<ul class=""flex items-center"">{children}</ul>
CarouselIndicator:
<li class=""mx-2""><button class=""w-4 h-4 rounded-full {isActive ? 'bg-primary-500' : 'bg-gray-300'}"" aria-current={isActive ? 'step' : undefined}></button></li>"
Switches/Toggles/Buttons,"DESCRIPTION:
A toggle button, a switch, and a button, each with a different style, layout, and purpose.
COMPONENTS:
- ToggleSwitch: A toggle switch component that can be either on or off. Standalone.
- SwitchButton: A switch button component that can be either enabled or disabled. Standalone.
- ActionButton: A button component that can be clicked to perform an action. Standalone.
HTML:
<div class=""flex flex-col gap-4 p-4""><ToggleSwitch/><SwitchButton/><ActionButton/></div>
COMPONENT HTML:
ToggleSwitch:
<label class=""inline-flex items-center""><input type=""checkbox"" class=""hidden""/><span class=""toggle-slider round""></span></label>
SwitchButton:
<button class=""bg-{color}-500 hover:bg-{color}-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>"
Messaging and Chat Systems,"DESCRIPTION:
The UI should resemble a modern messaging or chat system with a thread of messages, where each message is displayed in a bubble-like format, with the sender's name and message text. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- MessageThread: a component that takes children (an array of `MessageBox` components) and displays them in a scrolling container.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-10""><div class=""flex flex-col overflow-y-auto h-screen md:h-auto""><MessageThread><!-- Messages will be rendered here --></MessageThread></div></div>
COMPONENT HTML:
MessageThread:
<div class=""flex flex-col overflow-y-auto h-full pb-4"">{children}</div>"
Customer reviews section,"DESCRIPTION:
The UI should display a list of customer reviews, each with a rating, name, review text, and date. The reviews should be responsive, with a mobile-first design, and accessible for screen readers.
COMPONENTS:
- ReviewCard: A standalone component representing a single customer review.
- ReviewSection: A component that takes child `ReviewCard` components and displays them in a list.
HTML:
<div class=""max-w-md mx-auto my-12""><h2 class=""text-2xl font-bold mb-4"">Customer Reviews</h2><ReviewSection><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewSection></div>
COMPONENT HTML:
ReviewCard:
<div class=""bg-white p-4 mb-4 shadow-md""><div class=""flex items-center mb-2""><span class=""text-lg font-bold"">{rating}/ 5</span><span class=""text-gray-500 ml-2"">{date}</span></div><p class=""text-lg"">{review_text}</p><p class=""text-gray-500"">— {name}</p></div>
ReviewSection:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Time Pickers/Clock Icons,"DESCRIPTION:
The UI should display a clock icon with a dropdown list of time options. When a time option is selected, the clock icon should display the selected time.
COMPONENTS:
- ClockIcon: A standalone component that displays a clock icon.
- TimeOption: A component that takes children (the time option text) and is used to render each time option in the dropdown list.
HTML:
<div class=""flex items-center""><ClockIcon/><select class=""ml-2""><TimeOption>12:00 AM</TimeOption><TimeOption>12:30 AM</TimeOption><!-- more time options here --></select></div>
COMPONENT HTML:
ClockIcon:
<i class=""fas fa-clock text-gray-500 text-lg"" aria-hidden=""true""></i>
TimeOption:
<option>{children}</option>"
Settings icon with dropdown menu options,"DESCRIPTION:
The UI should be a settings icon with a dropdown menu that appears when clicked. The settings icon should be a toggleable dropdown menu with a few options.
COMPONENTS:
- SettingsIcon: A standalone component that displays a settings icon and toggles the dropdown menu when clicked.
- DropdownMenu: A component that takes children and displays a dropdown menu with options.
- DropdownMenuItem: A standalone component that displays a single option in the dropdown menu.
HTML:
<div class=""relative""><SettingsIcon/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><DropdownMenuItem/></DropdownMenu></div>
COMPONENT HTML:
SettingsIcon:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow""><i class=""fas fa-cog""></i></button>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md"">{children}</div>
DropdownMenuItem:
<a href=""#"" class=""block px-4 py-2 text-gray-700 hover:bg-gray-100"">{option_text}</a>"
Popup overlay that requires user interaction before returning to the main interface,"DESCRIPTION:
A modal popup overlay that covers the entire screen, with a darkened background and a centered box containing content that requires user interaction. The popup should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- PopupOverlay: (standalone): The main overlay that covers the entire screen.
- PopupContainer: (takes children): The centered box that contains the content.
- PopupContent: (takes children): The content that requires user interaction.
HTML:
<div class=""fixed inset-0 overflow-hidden""><PopupOverlay/><PopupContainer><PopupContent><!-- content that requires user interaction --></PopupContent></PopupContainer></div>
COMPONENT HTML:
PopupOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50""></div>
PopupContainer:
<div class=""fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-w-md p-6 bg-white rounded shadow-lg"">{children}</div>
PopupContent:
<!-- content that requires user interaction -->{children}"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
"Small image or icon representing the user, often used for profile pictures","DESCRIPTION:
- The UI should feature a circular profile picture, typically used to represent a user. This image should be responsive and adapt to different screen sizes while maintaining its aspect ratio.
COMPONENTS:
- UserProfileImage: A standalone component that displays a circular user profile image.
HTML:
<UserProfileImage/>
COMPONENT HTML:
UserProfileImage:
<!-- Circular User Profile Image --><img src=""{user_profile_url}"" alt=""User profile"" class=""w-16 h-16 md:w-24 md:h-24 lg:w-32 lg:h-32 rounded-full object-cover"">"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Project management tool,"DESCRIPTION:
The UI should resemble a typical project management tool, with a dashboard that displays various sections for managing projects, tasks, and team members. The design should be clean, minimalistic, and easy to navigate, with clear typography and ample whitespace.
COMPONENTS:
- ProjectCard: Standalone, displays project information such as name, description, and status.
- TaskList: Takes children, displays a list of tasks with checkboxes, task names, and due dates.
- TeamMemberCard: Standalone, displays team member information such as name, role, and profile picture.
- Sidebar: Takes children, displays a navigation menu with links to various sections of the tool.
- Header: Standalone, displays the application's logo and a search bar.
- DashboardGrid: Takes children, displays a grid layout for the main dashboard content.
HTML:
<header class=""bg-gray-100 py-4""><Header/></header><nav class=""lg:w-1/5 xl:w-1/6 py-4""><Sidebar><ul><li><a href=""#projects"">Projects</a></li><li><a href=""#tasks"">Tasks</a></li><li><a href=""#team"">Team</a></li></ul></Sidebar></nav><main class=""lg:w-4/5 xl:w-5/6 p-4""><DashboardGrid><section class=""grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4""><ProjectCard/><ProjectCard/><ProjectCard/></section><section class=""mt-4""><h2>Tasks</h2><TaskList><!-- task list items will be rendered here --></TaskList></section><section class=""mt-4""><h2>Team</h2><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/></section></DashboardGrid></main>
COMPONENT HTML:
ProjectCard:
<div class=""bg-white rounded shadow-md p-4""><h3 class=""text-lg"">{project_name}</h3><p class=""text-gray-600"">{project_description}</p><p class=""text-gray-600"">Status: {project_status}</p></div>
TaskList:
<ul class=""list-none mb-0"">{children}</ul>
TeamMemberCard:
<div class=""bg-white rounded shadow-md p-4""><img src={profile_picture} alt={name} class=""w-12 h-12 rounded-full mr-2""><div class=""text-lg"">{name}</div><div class=""text-gray-600"">{role}</div></div>
Sidebar:
<div class=""bg-gray-100 h-screen overflow-y-auto p-4"">{children}</div>
Header:
<div class=""flex justify-between items-center""><a href=""#"" class=""text-lg"">{app_name}</a><input type=""search"" placeholder=""Search"" class=""px-2 py-1 border""></div>
DashboardGrid:
<div class=""flex flex-wrap"">{children}</div>"
Tooltips for information,"DESCRIPTION:
The UI should display a tooltip when a user hovers over an information icon. The tooltip should contain a brief message providing additional information. The UI should be responsive and accessible.
COMPONENTS:
- InfoIcon: - Standalone component that displays an information icon.
- Tooltip: - Takes children; displays a brief message when the user hovers over the `InfoIcon`.
HTML:
<div class=""flex justify-center""><InfoIcon/><Tooltip><p>{tooltip_message}</p></Tooltip></div>
COMPONENT HTML:
InfoIcon:
<i class=""fas fa-info-circle text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""/>
Tooltip:
<div class=""absolute z-10 bg-gray-100 rounded p-2 text-sm text-gray-700"">{children}</div>"
Tooltips for information,"DESCRIPTION:
The UI should display a tooltip when hovering over an icon or text, providing additional information to the user. The tooltip should be responsive, accessible, and styled with Tailwind CSS.
COMPONENTS:
- TooltipTrigger: (standalone): The component that triggers the tooltip when hovered.
- TooltipContent: (takes children): The component that displays the tooltip content.
HTML:
<!-- A button that triggers the tooltip --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><TooltipTrigger/><TooltipContent>Tooltip information</TooltipContent></button>
COMPONENT HTML:
TooltipTrigger:
<!-- Tooltip trigger icon --><i class=""fas fa-info-circle""></i>
TooltipContent:
<!-- The tooltip content with a tailwindcss tooltip class --><div class=""tooltip absolute z-10 p-2 text-lg text-gray-600 bg-gray-100 rounded"">{children}</div>"
"Profile Navigation (e.g. tabs, sidebar)","DESCRIPTION:
- A responsive sidebar for larger screens that becomes a top navigation bar on smaller screens. This UI should be clean with links for different sections of a user profile (e.g., Overview, Settings, Messages, Friends). Highlights the active section visually.
COMPONENTS:
- ProfileNavigation: Standalone component that encapsulates the entire navigation logic.
- NavigationLink: Component that takes children and is used to render individual navigation links.
HTML:
<ProfileNavigation/>
COMPONENT HTML:
ProfileNavigation:
<!-- Profile navigation with responsive design --><nav class=""bg-gray-700 p-4""><ul class=""flex flex-col md:flex-row md:justify-start""><NavigationLink><a href=""/profile/overview"" class=""text-white px-2 py-1 hover:bg-gray-900"">Overview</a></NavigationLink><NavigationLink><a href=""/profile/settings"" class=""text-white px-2 py-1 hover:bg-gray-900"">Settings</a></NavigationLink><NavigationLink><a href=""/profile/messages"" class=""text-white px-2 py-1 hover:bg-gray-900"">Messages</a></NavigationLink><NavigationLink><a href=""/profile/friends"" class=""text-white px-2 py-1 hover:bg-gray-900"">Friends</a></NavigationLink></ul></nav>
NavigationLink:
<!-- Reusable navigation link component --><li class=""border-b md:border-0"">{children} </li>"
Intercept Page/Modal Dialogs,"DESCRIPTION:
The Intercept Page/Modal Dialog UI should be a centered modal dialog that appears over a slightly dimmed background, making the underlying page content less visible and non-interactive. The modal should be responsive, adapting its size and position based on the viewport size. It should contain a title, a close button, a content area for text or other elements, and an action area with one or more buttons.
COMPONENTS:
- Overlay: (Standalone)**: This component serves as the background dimming effect that lays over the main content when the modal is active.
- ModalDialog: (Takes children)**: The main container for the modal content which includes styling for responsiveness and positioning.
- ModalHeader: (Standalone)**: Contains the title of the modal and a close button.
- ModalBody: (Takes children)**: A section for the main content of the modal.
- ModalFooter: (Takes children)**: Contains action buttons like 'Cancel' or 'Confirm'.
HTML:
<div class=""fixed inset-0 bg-gray-600 bg-opacity-75 flex justify-center items-center""><Overlay/><div class=""bg-white rounded-lg shadow-lg overflow-hidden max-w-md w-full m-4""><ModalDialog><ModalHeader/><ModalBody><p>{modalContent}</p></ModalBody><ModalFooter><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"" type=""button"">Confirm
</button><button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"" type=""button"">Cancel
</button></ModalFooter></ModalDialog></div></div>
COMPONENT HTML:
Overlay:
<div class=""fixed inset-0 bg-gray-600 bg-opacity-75""></div>
ModalDialog:
<div role=""dialog"" aria-labelledby=""modalTitle"" aria-modal=""true"" class=""relative bg-white rounded-lg shadow-lg"">{children} </div>
ModalHeader:
<div class=""px-4 py-2 border-b border-gray-200""><h2 id=""modalTitle"" class=""text-lg leading-6 font-medium text-gray-900"">Modal Title</h2><button aria-label=""Close"" class=""absolute top-0 right-0 p-4"">X </button></div>
ModalBody:
<div class=""p-4"">{children} </div>
ModalFooter:
<div class=""px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse"">{children} </div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Header Navigation Icon,"DESCRIPTION:
- The UI should feature a header with a navigational icon, typically displayed as a hamburger menu on mobile views. This icon is usually represented by three horizontal lines.
COMPONENTS:
- Header: This is a standalone component that includes other components such as the NavigationIcon.
- NavigationIcon: This is a standalone component that visually represents the menu icon usually used to open a navigation drawer or menu.
HTML:
<Header/>
COMPONENT HTML:
Header:
<header class=""bg-gray-800 text-white p-3""><NavigationIcon/></header>
NavigationIcon:
<button aria-label=""Menu"" class=""h-6 w-6 flex flex-col justify-around items-center""><span class=""block w-full h-0.5 bg-white""></span><span class=""block w-full h-0.5 bg-white""></span><span class=""block w-full h-0.5 bg-white""></span></button>"
Video call interface,"DESCRIPTION:
The UI should display a video feed from the local camera, a video feed from the remote caller, and some controls to manage the call. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- CallHeader: A standalone component that displays the caller's information (e.g. name, profile picture).
- LocalVideoFeed: A standalone component that displays the local video feed from the user's camera.
- RemoteVideoFeed: A standalone component that displays the remote video feed from the caller.
- CallControls: A standalone component that displays buttons to manage the call (e.g. mute, unmute, hang up).
- CallLayout: A container component that takes children and arranges them in a responsive layout.
HTML:
<div class=""flex h-screen w-full""><CallLayout><CallHeader/><div class=""flex flex-wrap justify-center""><LocalVideoFeed/><RemoteVideoFeed/></div><CallControls/></CallLayout></div>
COMPONENT HTML:
CallHeader:
<div class=""flex items-center mb-4""><img src={profile_picture} alt={caller_name} class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg"">{caller_name}</h2></div>
LocalVideoFeed:
<video autoplay playsinline class=""w-full h-full max-w-md max-h-md""></video>
RemoteVideoFeed:
<video autoplay playsinline class=""w-full h-full max-w-md max-h-md""></video>
CallControls:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Mute</button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ml-4"">Unmute</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ml-4"">Hang up</button></div>
CallLayout:
<!-- this component just wraps its children with some basic layout styles --><div class=""flex flex-col items-center p-4"">{children}</div>"
Compose email button with dropdown menu,"DESCRIPTION:
The UI should be a button that says ""Compose Email"" with a dropdown arrow on the right side. When clicked, a dropdown menu should appear below the button, containing a list of email composition options.
COMPONENTS:
- ComposeEmailButton: Standalone component that displays the ""Compose Email"" button with a dropdown arrow.
- DropdownMenu: Component that takes children, representing the dropdown menu items.
HTML:
<div class=""flex justify-center""><ComposeEmailButton/></div><div class=""absolute""><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ComposeEmailButton:
<button class=""bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"">Compose Email <span class=""ml-2 text-lg"">{caret_down_icon}</span></button>
DropdownMenu:
<ul class=""bg-white shadow-md py-1"">{children}</ul>"
AI-powered recommendations,"DESCRIPTION:
The UI should display a list of recommended items, such as products or services, with titles, descriptions, and images. The recommendations should be powered by an AI algorithm and displayed in a responsive, mobile-first design.
COMPONENTS:
- RecommendationList: component that takes children (multiple `RecommendationCard` components) and displays them in a list.
HTML:
<section class=""mx-auto max-w-md p-4""><h2 class=""text-2xl font-bold mb-4"">Recommended for you</h2><RecommendationList><!-- list of RecommendationCard components will be inserted here --></RecommendationList></section>
COMPONENT HTML:
RecommendationList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
AI-powered recommendations,"DESCRIPTION:
The UI should display a list of recommended items, such as products or articles, with a brief description and a link to learn more. The list should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- RecommendationCard: (standalone) - A single recommended item with a title, description, and link.
- RecommendationList: (takes children) - A container for a list of recommended items.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Recommended for you</h2><RecommendationList><RecommendationCard/><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><a class=""text-blue-600 hover:text-blue-900"" href=""{link}"">Learn more</a></div>
RecommendationList:
<ul class=""list-none mb-4"">{children}</ul>"
WYSIWYG/Rich Text Editors,"DESCRIPTION:
The UI should resemble a typical text editor with formatting options, such as bold, italic, and font sizes. It should also have a toolbar with buttons for undo, redo, and formatting options.
COMPONENTS:
- EditorToolbar: (standalone): The top toolbar with formatting options.
- EditorInput: (takes children): The input field where the user can enter and format text.
- UndoButton: (standalone): A button to undo the last change.
- RedoButton: (standalone): A button to redo the last change.
- FormatButton: (standalone): A dropdown button to select font sizes and formatting options.
HTML:
<div class=""flex flex-col h-screen""><EditorToolbar/><EditorInput><!-- The input field where the user can enter and format text --></EditorInput></div>
COMPONENT HTML:
EditorToolbar:
<div class=""flex justify-between bg-gray-200 p-2""><UndoButton/><RedoButton/><FormatButton/><!-- More formatting options can be added here --></div>
EditorInput:
<textarea class=""w-full p-4 h-screen overflow-auto"" `{height}`>{children}</textarea>
UndoButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-undo""></i>Undo</button>
RedoButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-redo""></i>Redo</button>
FormatButton:
<div class=""relative""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded"">Format </button><div class=""absolute top-full left-0 bg-white border shadow-md p-2 hidden""><!-- Dropdown menu with font sizes and formatting options --><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Bold</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Italic</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Font Size: {font_size}</a></li></ul></div></div>"
WYSIWYG/Rich Text Editors,"DESCRIPTION:
The UI should resemble a typical WYSIWYG/Rich Text Editor, with a toolbar at the top and a text area below. The toolbar should have buttons for common formatting options, such as bold, italic, underline, and font size. The text area should be resizable and have a minimum height.
COMPONENTS:
- RichTextEditor: The main component that wraps the entire UI. Takes children.
- Toolbar: The component that contains the formatting buttons. Takes children.
- ButtonGroup: A component that contains a group of related buttons. Takes children.
- FormatButton: A single button for a specific formatting option. Standalone.
- TextArea: The text area where the user can input and edit text. Standalone.
HTML:
<RichTextEditor><Toolbar><ButtonGroup><FormatButton/><FormatButton/><!-- more buttons --></ButtonGroup></Toolbar><TextArea/></RichTextEditor>
COMPONENT HTML:
RichTextEditor:
<div class=""flex flex-col h-screen overflow-hidden"">{children}</div>
Toolbar:
<div class=""flex justify-center py-2 bg-gray-200"">{children}</div>
ButtonGroup:
<div class=""flex space-x-2"">{children}</div>
FormatButton:
<button class=""px-2 py-1 rounded text-sm hover:bg-gray-300""><!-- icon or text for the button --></button>
TextArea:
<textarea class=""w-full h-full p-2 resize-y"" rows=""10""></textarea>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with a slight gap between each button.
COMPONENTS:
- LikeButton: - standalone
- CommentButton: - standalone
- ShareButton: - standalone
HTML:
<div class=""flex justify-between items-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-thumbs-up""/>{like_count}</button>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-comment""/>{comment_count}</button>
ShareButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-share""/>{share_count}</button>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Integrations Hub: Connect third-party apps,"DESCRIPTION:
The UI should be a card-based layout that displays a list of integrations. Each card should have a logo of the third-party app, a brief description, and a Connect button. The layout should be responsive, with the cards stacking vertically on mobile devices and displaying in a grid on larger screens.
COMPONENTS:
- IntegrationCard: A standalone component that represents a single integration.
- IntegrationsList: A component that takes children (IntegrationCard components) and displays them in a responsive grid.
HTML:
<section class=""container mx-auto p-4 pt-6 pb-10""><h1 class=""text-3xl font-bold mb-4"">Integrations Hub</h1><IntegrationsList><IntegrationCard/><IntegrationCard/><!-- Repeat IntegrationCard components for each integration --></IntegrationsList></section>
COMPONENT HTML:
IntegrationCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 hover:shadow-lg""><div class=""flex items-center mb-2""><img src=""{integration_logo_url}"" alt=""{integration_name}"" class=""w-8 h-8 mr-2""/><h2 class=""text-lg font-bold"">{integration_name}</h2></div><p class=""text-gray-600"">{integration_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Connect</button></div>
IntegrationsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Featured Image Slider,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible featured image slider that showcases a collection of images with navigation controls. The slider should be visually appealing, with a clear and prominent display of the images.
COMPONENTS:
- ImageSlide: A standalone component representing a single image slide in the slider.
- ImageSliderNavigation: A standalone component providing navigation controls (previous and next buttons) for the slider.
- FeaturedImageSlider: A container component that takes children (ImageSlide components) and renders the slider with navigation controls.
HTML:
<div class=""max-w-md mx-auto mt-4 rounded-md overflow-hidden""><FeaturedImageSlider><!-- Image slides will be inserted here --><ImageSlide/><ImageSlide/><ImageSlide/></FeaturedImageSlider><ImageSliderNavigation/></div>
COMPONENT HTML:
ImageSlide:
<div class=""w-full h-48 md:h-64 xl:h-80 bg-cover bg-center"" style={{ backgroundImage: `url(${imageUrl})` }}/>
ImageSliderNavigation:
<div class=""flex justify-between mt-2 md:mt-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Previous</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next</button></div>
FeaturedImageSlider:
<div class=""relative"">{children} <ImageSliderNavigation/></div>"
Username display for other users,"DESCRIPTION:
The UI should display a user's username, profile picture, and a badge indicating their online status.
COMPONENTS:
- UserProfileDisplay: standalone component that displays the user's profile picture and username.
- OnlineBadge: standalone component that displays the online status badge.
HTML:
<div class=""flex items-center""><UserProfileDisplay/><OnlineBadge/></div>
COMPONENT HTML:
UserProfileDisplay:
<div class=""flex items-center""><img src={profile_picture_url} class=""w-8 h-8 rounded-full""/><p class=""ml-2"">{username}</p></div>
OnlineBadge:
<div class={`w-3 h-3 rounded-full ${is_online ? 'bg-green-500' : 'bg-gray-500'}`}></div>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Product Description Bullet,"DESCRIPTION:
The UI should display a bullet point with a product description. The bullet point should be a simple icon, and the product description should be a short sentence or phrase.
COMPONENTS:
- BulletPoint: (standalone): Displays a bullet point icon.
- DescriptionText: (standalone): Displays the product description.
HTML:
<div class=""flex items-center""><BulletPoint/><DescriptionText/></div>
COMPONENT HTML:
BulletPoint:
<span class=""text-xl"">•</span>
DescriptionText:
<p class=""text-lg"">{description_text}</p>"
Product Description Bullet,"DESCRIPTION:
A product description bullet point with a brief description and optional link to learn more.
COMPONENTS:
- ProductDescriptionBullet: (standalone)
HTML:
<ul class=""list-none mb-4""><ProductDescriptionBullet/></ul>
COMPONENT HTML:
ProductDescriptionBullet:
<li class=""flex items-start mb-2""><span class=""text-gray-600 mr-2"">{bullet_icon}</span><span class=""text-sm"">{description} {learn_more_link}</span></li>"
Notification Badge: Displays new notification count,"DESCRIPTION:
A small badge that displays a count of new notifications, often placed in the top right corner of a navigation item or icon.
COMPONENTS:
- NotificationBadge: Standalone component that displays the notification count.
HTML:
<nav><ul><li><a href=""#"" class=""flex items-center""><span>Notifications</span><NotificationBadge/></a></li></ul></nav>
COMPONENT HTML:
NotificationBadge:
<div class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notificationCount}</div>"
Product Rating Count,"DESCRIPTION:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
COMPONENT HTML:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
Responsive Image Breakpoints,"DESCRIPTION:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
COMPONENTS:
- ResponsiveImage: (standalone component)
HTML:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
COMPONENT HTML:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Direct message button for private chats,"DESCRIPTION:
The UI should be a small, circular button with a messaging icon inside. When hovered, the button should change color to indicate interactivity. The button should be accessible on both desktop and mobile devices.
COMPONENTS:
- DirectMessageButton: A standalone component representing the direct message button.
HTML:
<button class=""rounded-full bg-gray-200 hover:bg-gray-300 py-2 px-4 text-lg""><DirectMessageButton/></button>
COMPONENT HTML:
DirectMessageButton:
<!-- Direct message icon --><i class=""fas fa-comment-dots text-xl text-gray-600""></i>"
Direct message button for private chats,"DESCRIPTION:
The UI should be a button that indicates the ability to send a direct message to someone. It should be a simple, rounded rectangle with a white background, a blue border, and a blue icon of a paper airplane (representing sending a message).
COMPONENTS:
- DirectMessageButton: (standalone): a button that triggers a direct message
HTML:
<button class=""rounded-full bg-white border-2 border-blue-500 hover:bg-blue-500 hover:text-white transition duration-300 ease-in-out""><DirectMessageButton/></button>
COMPONENT HTML:
DirectMessageButton:
<i class=""fas fa-paper-plane text-blue-500""></i>{messageButtonText}"
Pricing table,"DESCRIPTION:
The UI should be a responsive pricing table with three columns representing different pricing plans. Each column should display the plan name, price, features, and a call-to-action (CTA) button. The table should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PricingTable: standalone component that contains the entire pricing table
- PricingPlan: standalone component that represents a single pricing plan
- Price: standalone component that displays the price of a pricing plan
- FeaturesList: standalone component that displays the features of a pricing plan
- CallToActionButton: standalone component that displays a CTA button
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PricingTable/></div>
COMPONENT HTML:
PricingTable:
<div class=""flex flex-wrap justify-center mb-4""><PricingPlan/><PricingPlan/><PricingPlan/></div>
PricingPlan:
<div class=""w-full md:w-1/3 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg"">{plan_name}</h3><Price/><FeaturesList/><CallToActionButton/></div>
Price:
<p class=""text-2xl"">{price_text}</p>
FeaturesList:
<ul class=""list-none mb-4""><li>{feature_1}</li><li>{feature_2}</li><li>{feature_3}</li></ul>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">{cta_text}</button>"
Testimonials carousel,"DESCRIPTION:
The UI should display a testimonials carousel that allows users to view multiple testimonials via sliding or pagination. Each testimonial can include text content (e.g., the testimonial message), the name of the person, and their title or affiliation. The design should be clean and minimal, using arrows or buttons for navigation.
COMPONENTS:
- TestimonialCard: (Standalone)**: Displays a single testimonial including the message, person's name, and title.
- CarouselControls: (Standalone)**: Provides buttons or arrows to navigate through the testimonials.
HTML:
<section aria-label=""Testimonials"" class=""max-w-xl mx-auto overflow-hidden""><div class=""flex space-x-4 snap-x overflow-x-auto""><TestimonialCard/><TestimonialCard/><TestimonialCard/></div><CarouselControls/></section>
COMPONENT HTML:
TestimonialCard:
<article class=""snap-start w-full flex-shrink-0 p-4 text-center""><blockquote class=""text-lg font-medium"">{testimonial_text}</blockquote><footer class=""mt-4""><p class=""font-semibold"">{person_name}</p><p class=""text-sm text-gray-600"">{person_title}</p></footer></article>
CarouselControls:
<div class=""flex justify-center space-x-2 mt-4""><button aria-label=""Previous testimonial"" class=""p-2 text-white bg-gray-800 rounded-full"">&#9664; <!-- Left arrow --></button><button aria-label=""Next testimonial"" class=""p-2 text-white bg-gray-800 rounded-full"">&#9654; <!-- Right arrow --></button></div>"
Login/Registration Forms,"DESCRIPTION:
The UI should consist of two separate forms: one for login and another for registration. The design should be clean, with inputs clearly labeled and a noticeable button for submission. The login form will include fields for the user's email and password, as well as a submission button. The registration form will also have fields for the user's email, password, and a confirmation password field, along with a submit button. Error messages should display if input validation fails.
COMPONENTS:
- LoginForm: (Standalone): A form for users to input their email and password to log into their account.
- RegistrationForm: (Standalone): A form for new users to register by entering their email, password, and confirming their password.
HTML:
<div class=""flex flex-col space-y-12""><LoginForm/><RegistrationForm/></div>
COMPONENT HTML:
LoginForm:
<!-- LoginForm: Allow users to enter their credentials to log in --><form class=""space-y-6 bg-white rounded-lg p-4 shadow-md""><h2 class=""text-lg font-semibold text-gray-900"">Login</h2><div><label for=""loginEmail"" class=""block text-sm font-medium text-gray-700"">Email</label><input id=""loginEmail"" name=""email"" type=""email"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""loginPassword"" class=""block text-sm font-medium text-gray-700"">Password</label><input id=""loginPassword"" name=""password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><button type=""submit"" class=""w-full py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"">Log In</button></form>
RegistrationForm:
<!-- RegistrationForm: Allow new users to register by entering their details --><form class=""space-y-6 bg-white rounded-lg p-4 shadow-md""><h2 class=""text-lg font-semibold text-gray-900"">Register</h2><div><label for=""registerEmail"" class=""block text-sm font-medium text-gray-700"">Email</label><input id=""registerEmail"" name=""email"" type=""email"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""registerPassword"" class=""block text-sm font-medium text-gray-700"">Password</label><input id=""registerPassword"" name=""password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""confirmPassword"" class=""block text-sm font-medium text-gray-700"">Confirm Password</label><input id=""confirmPassword"" name=""confirm_password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><button type=""submit"" class=""w-full py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"">Register</button></form>"
User-generated content display,"DESCRIPTION:
The UI should display user-generated content in a clean and readable format. It should be responsive, mobile-first, and accessible. The content should be displayed in a card-like layout, with a image, title, and description.
COMPONENTS:
- UserProfilePicture: A standalone component that displays the user's profile picture.
- ContentCard: A component that takes children, displaying the user-generated content in a card-like layout.
- ContentTitle: A standalone component that displays the title of the user-generated content.
- ContentDescription: A standalone component that displays the description of the user-generated content.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><UserProfilePicture/><ContentCard><ContentTitle/><ContentDescription/></ContentCard></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""w-12 h-12 rounded-full""/>
ContentCard:
<div class=""px-6 py-4"">{children}</div>
ContentTitle:
<h2 class=""text-lg font-bold"">{content_title}</h2>
ContentDescription:
<p class=""text-gray-600"">{content_description}</p>"
User-generated content display,"DESCRIPTION:
The UI should display a card with user-generated content, including a username, profile picture, content text, and a timestamp. The card should be responsive, with a maximum width on large screens and a full-width layout on smaller screens.
COMPONENTS:
- UserProfilePicture: Standalone component, displays the user's profile picture.
- UserGeneratedContentCard: Component that takes children, displays the user-generated content in a card layout.
- ContentHeader: Standalone component, displays the username and timestamp.
- ContentText: Standalone component, displays the content text.
HTML:
<div class=""max-w-lg mx-auto lg:max-w-md""><UserGeneratedContentCard><ContentHeader/><UserProfilePicture/><ContentText/></UserGeneratedContentCard></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profilePictureUrl} alt={username} class=""w-12 h-12 rounded-full mr-4""/>
UserGeneratedContentCard:
<div class=""bg-white shadow-md rounded px-4 py-6"">{children}</div>
ContentHeader:
<div class=""flex items-center mb-4""><h2 class=""font-bold"">{username}</h2><p class=""text-gray-600"">{timestamp}</p></div>
ContentText:
<p class=""text-lg"">{contentText}</p>"
Responsive Image Galleries,"DESCRIPTION:
The UI for the Responsive Image Gallery should consist of a grid layout of images that adjust to different screen sizes. Images should be evenly spaced, and on smaller screens, images can adjust to either a single column or fewer columns than on larger screens. The gallery should maintain a clean, balanced appearance without clutter, ensuring each image is displayed prominently and is clearly visible.
COMPONENTS:
- Gallery: (Standalone)**: This is the primary container for the image collection.
- GalleryItem: (Children)**: Represents each individual image item within the gallery. This component contains the image and can optionally hold a caption or other relevant information.
HTML:
<main><Gallery/></main>
COMPONENT HTML:
Gallery:
<div class=""grid grid-cols-3 gap-4 p-4 md:grid-cols-5 lg:grid-cols-7""><GalleryItem><img src=""{img_url1}"" alt=""{img_alt1}"" class=""w-full h-auto""/></GalleryItem><GalleryItem><img src=""{img_url2}"" alt=""{img_alt2}"" class=""w-full h-auto""/></GalleryItem><GalleryItem><img src=""{img_url3}"" alt=""{img_alt3}"" class=""w-full h-auto""/></GalleryItem><!-- More GalleryItems as needed for the gallery --></div>
GalleryItem:
<div class=""relative"">{children}</div>"
Table error,"DESCRIPTION:
The UI should display a table error message in a responsive, mobile-first design. The error message should be accessible and SEO-friendly.
COMPONENTS:
- ErrorMessage: A standalone component that displays an error message.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><ErrorMessage/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><span class=""block sm:inline"">{errorMessage}</span></div>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Call to Action Button Color,"DESCRIPTION:
The UI should have a prominent call to action (CTA) button that is responsive and has an appealing color that stands out but also aligns with accessibility standards for color contrast.
COMPONENTS:
- ButtonComponent: A standalone component that represents a button. This button will be styled with TailwindCSS to be visually distinct and accessible.
HTML:
<div class=""flex justify-center items-center h-screen""><ButtonComponent/></div>
COMPONENT HTML:
ButtonComponent:
<button type=""button"" class=""text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"">Click Me! </button>"
Article Thumbnail Images,"DESCRIPTION:
The UI should display a thumbnail image with a caption below it, with a subtle overlay effect on hover. The thumbnail image should be responsive, with a maximum width of 300px on desktop screens and adjusted accordingly on smaller screens.
COMPONENTS:
- ThumbnailImage: Standalone component that displays an image.
- ImageCaption: Standalone component that displays the image caption.
- ArticleThumbnail: Component that takes children, wrapping around the `ThumbnailImage` and `ImageCaption` components.
HTML:
<article class=""lg:max-w-md mx-auto md:flex""><ArticleThumbnail><ThumbnailImage/><ImageCaption/></ArticleThumbnail></article>
COMPONENT HTML:
ThumbnailImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-t-md""/>
ImageCaption:
<p class=""text-sm text-gray-600"">{caption_text}</p>
ArticleThumbnail:
<div class=""bg-white shadow-md rounded-md overflow-hidden"">{children}</div>"
Article Thumbnail Images,"DESCRIPTION:
The UI should display a thumbnail image of an article with a brief description. The thumbnail image should be responsive and adapt to different screen sizes. On mobile devices, the thumbnail image should be stacked on top of the description, while on larger screens, the thumbnail image should be displayed alongside the description.
COMPONENTS:
- ArticleThumbnail: A standalone component that displays a thumbnail image and a brief description.
- ThumbnailImage: A standalone component that displays the thumbnail image.
- DescriptionText: A standalone component that displays the brief description.
HTML:
<div class=""flex flex-wrap lg:flex-nowrap mb-4 lg:mb-8""><ArticleThumbnail/></div>
COMPONENT HTML:
ArticleThumbnail:
<div class=""lg:w-1/2 lg:pr-4""><ThumbnailImage/><DescriptionText/></div>
ThumbnailImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full lg:w-1/2 lg:h-48 object-cover""/>
DescriptionText:
<p class=""text-lg lg:text-xl"">{description}</p>"
Drag-and-Drop FileUploader Component,"DESCRIPTION:
The UI should be a rectangular box with a dashed border, where users can drag and drop files or click to select files to upload. The box should have a label ""Drag and drop files or click to upload"" and a progress bar to show the upload progress.
COMPONENTS:
- FileUploader: standalone component that contains a drop zone and a progress bar
- DropZone: standalone component that displays the drag-and-drop area
- ProgressBar: standalone component that displays the upload progress
HTML:
<div class=""max-w-md mx-auto p-4""><FileUploader/></div>
COMPONENT HTML:
FileUploader:
<div class=""bg-gray-50 border-2 border-dashed rounded flex flex-col justify-center p-4""><DropZone/><ProgressBar/><p>{upload_progress}% uploaded</p><p>{error_message}</p></div>
DropZone:
<div class=""p-4 text-center""><p>Drag and drop files or click to upload</p><input type=""file"" multiple/></div>
ProgressBar:
<div class=""w-full bg-gray-200 rounded h-2""><div class=""bg-blue-500 h-2"" style={`width: ${upload_progress}%`}></div></div>"
Filter criteria that dynamically adjusts based on the context of the content being displayed,"DESCRIPTION:
The UI should display a dynamic filter criteria section that adjusts based on the context of the content being displayed. It should have a title, a dropdown to select the filter criteria, and a input field to enter the filter value. The filter criteria should be responsive and accessible.
COMPONENTS:
- DynamicFilter: A standalone component that renders a dynamic filter criteria section.
- FilterTitle: A standalone component that renders the title of the filter criteria section.
- FilterDropdown: A standalone component that renders a dropdown to select the filter criteria.
- FilterInput: A standalone component that renders an input field to enter the filter value.
HTML:
<div class=""max-w-md mx-auto p-4""><DynamicFilter/></div>
COMPONENT HTML:
DynamicFilter:
<div class=""flex flex-wrap -mx-4 mb-4""><FilterTitle/><FilterDropdown/><FilterInput/></div>
FilterTitle:
<h5 class=""text-lg font-bold"">{filter_title}</h5>
FilterDropdown:
<select class=""block w-full pl-10 text-sm text-gray-700"">{filter_criteria_options}</select>
FilterInput:
<input type=""text"" class=""block w-full pl-10 pr-10 py-2 text-sm text-gray-700"" placeholder=""{filter_placeholder}""/>"
Button Group Container,"DESCRIPTION:
A responsive button group container that can hold multiple buttons and is accessible on various devices.
COMPONENTS:
- Button: (standalone) - A single button component.
- ButtonGroupContainer: (takes children) - A container that holds multiple buttons.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroupContainer><Button/><!-- Button 1 --><Button/><!-- Button 2 --><Button/><!-- Button 3 --></ButtonGroupContainer></div>
COMPONENT HTML:
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_label}</button>
ButtonGroupContainer:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Button that switches between two states or options when clicked,"DESCRIPTION:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
COMPONENT HTML:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Like button to show tweet approval,"DESCRIPTION:
A simple button with a heart icon and a counter to indicate the number of likes.
COMPONENTS:
- LikeButton: standalone component with a heart icon and a counter.
HTML:
<div class=""flex mb-4""><!-- container for like button and counter --><LikeButton/><p class=""text-sm"">{like_count} likes</p></div>
COMPONENT HTML:
LikeButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-heart""></i></button>"
Category List: Links to categorized content,"DESCRIPTION:
The UI should display a list of categories, with each category having a title and a link to the corresponding content.
COMPONENTS:
- CategoryLink: A standalone component representing a single category with a link.
- CategoryList: A component that takes children (multiple `CategoryLink` components) to display a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryLink:
<li class=""mb-2""><a href=""{categoryLink}"" class=""text-blue-600 hover:text-blue-900 transition duration-300"">{categoryName}</a></li>
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Category List: Links to categorized content,"DESCRIPTION:
The Category List should display a list of categorized content links, with each link displaying the category name and a brief description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- CategoryList: (takes children): A container for a list of `CategoryLink` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><!-- category links will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Integrated Wiki and Documentation Editor,"DESCRIPTION:
The UI should have a clean and minimalistic design, with a focus on readability and ease of use. The top navigation bar should have links to the wiki's homepage, a search bar, and a button to create a new page. The main content area should have a sidebar with a hierarchical list of wiki pages, and the main editing area should have a markdown editor with formatting options.
COMPONENTS:
- NavigationBar: A standalone component that displays the top navigation bar with links to the wiki's homepage, a search bar, and a button to create a new page.
- Sidebar: A standalone component that displays a hierarchical list of wiki pages.
- Editor: A component that takes children and displays a markdown editor with formatting options.
- Breadcrumb: A standalone component that displays the current page's breadcrumb trail.
HTML:
<div class=""flex h-screen""><NavigationBar/><div class=""flex-grow flex flex-col""><Sidebar/><div class=""flex-grow p-4""><Breadcrumb/><Editor><!-- editor content goes here --></Editor></div></div></div>
COMPONENT HTML:
NavigationBar:
<nav class=""bg-gray-200 p-4 flex justify-between""><a href=""/"" class=""text-blue-600 hover:text-blue-900"">Wiki Home</a><input type=""search"" class=""bg-white border border-gray-300 p-2"" placeholder=""Search...""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold p-2"">Create New Page</button></nav>
Sidebar:
<div class=""w-48 bg-gray-200 p-4""><h2>Pages</h2><ul>{page_list} <!-- iterate over page list and render each page as a <li>element --></ul></div>
Editor:
<div class=""prose p-4""><textarea id=""editor"" class=""w-full p-2"">{children}</textarea><div class=""flex justify-between p-2""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold p-2"">Save</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold p-2"">Cancel</button></div></div>
Breadcrumb:
<nav aria-label=""Breadcrumb"" class=""p-2""><ol class=""flex"">{breadcrumb_list} <!-- iterate over breadcrumb list and render each item as a <li>element --></ol></nav>"
Integrated Wiki and Documentation Editor,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible Integrated Wiki and Documentation Editor. It should have a navigation sidebar, a primary content area, and a floating action button for creating new pages. The navigation sidebar should display a list of wiki pages, with the ability to search and filter pages. The primary content area should display the selected wiki page's content, with a toolbar for editing and formatting options.
COMPONENTS:
- WikiSidebar: (standalone): a navigation sidebar component that displays a list of wiki pages
- WikiPageList: (standalone): a component that displays a list of wiki pages
- WikiPageSearch: (standalone): a search input component for searching wiki pages
- WikiPageFilter: (standalone): a filter component for filtering wiki pages
- WikiPageContent: (takes children): a component that displays the selected wiki page's content
- EditorToolbar: (standalone): a toolbar component for editing and formatting options
- FloatingActionButton: (standalone): a floating action button component for creating new pages
HTML:
<div class=""flex h-screen""><WikiSidebar/><div class=""flex flex-grow""><WikiPageContent><!-- Wiki page content goes here --></WikiPageContent><EditorToolbar/></div><FloatingActionButton/></div>
COMPONENT HTML:
WikiSidebar:
<div class=""w-64 h-screen p-4 bg-gray-100""><WikiPageSearch/><WikiPageFilter/><WikiPageList/></div>
WikiPageList:
<ul class=""list-none p-0 m-0"">{wiki_pages.map((page) =>( <li class=""py-2 px-4 hover:bg-gray-200""><a href={page.url}>{page.title}</a></li>))}</ul>
WikiPageSearch:
<input type=""search"" class=""w-full p-2 pl-10 text-sm"" placeholder=""Search wiki pages""/>
WikiPageFilter:
<select class=""w-full p-2 text-sm""><option value="""">All pages</option>{filters.map((filter) =>( <option value={filter.value}>{filter.label}</option>))}</select>
WikiPageContent:
<div class=""prose lg:prose-lg mx-auto"">{children}</div>
EditorToolbar:
<div class=""flex justify-end p-2""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Save </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Preview </button><!-- more toolbar buttons --></div>
FloatingActionButton:
<button class=""fixed bottom-4 right-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded shadow-md""><i class=""fas fa-plus""></i></button>"
Social sharing buttons,"DESCRIPTION:
A horizontal row of social sharing buttons, each with a corresponding logo and label, that allow users to share content on various social media platforms. The buttons should be evenly spaced and responsive to different screen sizes.
COMPONENTS:
- SocialSharingButton: A standalone component that represents a single social sharing button.
- SocialSharingButtonGroup: A component that takes children and wraps the `SocialSharingButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtonGroup><SocialSharingButton/><SocialSharingButton/><SocialSharingButton/><!-- Add more SocialSharingButton components as needed --></SocialSharingButtonGroup></div>
COMPONENT HTML:
SocialSharingButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><img src={logoUrl} alt={label} class=""w-4 h-4 mr-2"">{label}</button>
SocialSharingButtonGroup:
<div class=""flex justify-center"">{children}</div>"
Social sharing buttons,"DESCRIPTION:
The UI should display a set of social sharing buttons for various platforms (e.g. Facebook, Twitter, LinkedIn, etc.) in a horizontal row. The buttons should be equally spaced and responsive to adapt to different screen sizes.
COMPONENTS:
- SocialSharingButton: (standalone): a single social sharing button
- SocialSharingButtonsContainer: (takes children): a container that holds multiple social sharing buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtonsContainer><SocialSharingButton/><SocialSharingButton/><!-- Add more social sharing buttons here --></SocialSharingButtonsContainer></div>
COMPONENT HTML:
SocialSharingButton:
<a href=""{platform_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""px-2""><img src=""{platform_icon_url}"" alt=""{platform_name} icon"" class=""w-6 h-6""><span class=""sr-only"">{platform_name}</span></a>
SocialSharingButtonsContainer:
<div class=""flex justify-center flex-wrap -mx-2"">{children}</div>"
Social sharing buttons,"DESCRIPTION:
A horizontal row of social media buttons, with each button representing a different platform (e.g. Facebook, Twitter, LinkedIn). The buttons should be evenly spaced and centered within their container.
COMPONENTS:
- SocialShareButton: (standalone): a single social media sharing button
- SocialShareContainer: (takes children): a container for the social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialShareContainer><SocialShareButton/><SocialShareButton/><SocialShareButton/></SocialShareContainer></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"" aria-label={social_media_platform_name}><i class={`fab fa-${social_media_platform_icon} mr-2`}/>{share_label}</button>
SocialShareContainer:
<div class=""flex justify-center"">{children}</div>"
Section content,"DESCRIPTION:
The UI should be a section of content with a heading, paragraph of text, and a call-to-action button. It should be responsive and mobile-first, with a clean and simple design.
COMPONENTS:
- SectionHeader: A standalone component that displays a heading.
- ParagraphText: A standalone component that displays a paragraph of text.
- CallToActionButton: A standalone component that displays a call-to-action button.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6""><SectionHeader/><ParagraphText/><CallToActionButton/></section>
COMPONENT HTML:
SectionHeader:
<h2 class=""text-3xl leading-tight font-bold"">{header_text}</h2>
ParagraphText:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Advertisement display,"DESCRIPTION:
The UI should be a rectangular advertisement display with a background image, a headline, and a call-to-action (CTA) button. The CTA button should be prominent and centered at the bottom of the advertisement. The headline should be large and centered at the top of the advertisement.
COMPONENTS:
- AdDisplay: (standalone): The main advertisement display component.
- AdBackgroundImage: (standalone): The background image component within the AdDisplay.
- AdHeadline: (standalone): The headline component within the AdDisplay.
- AdCallToActionButton: (standalone): The call-to-action button component within the AdDisplay.
HTML:
<div class=""container mx-auto p-4""><AdDisplay/></div>
COMPONENT HTML:
AdDisplay:
<div class=""bg-cover h-screen w-full flex flex-col items-center justify-center""><AdBackgroundImage/><AdHeadline/><AdCallToActionButton/></div>
AdBackgroundImage:
<div class=""absolute top-0 left-0 w-full h-screen bg-center bg-cover"" style={`background-image: url(${background_image_url});`}></div>
AdHeadline:
<h2 class=""text-3xl font-bold text-white"">{headline_text}</h2>
AdCallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_button_text}</button>"
Blog categories display,"DESCRIPTION:
The UI should display a list of blog categories in a responsive, mobile-first, and accessible manner. The categories should be displayed in a grid layout, with each category represented by a card that includes the category name and a brief description.
COMPONENTS:
- BlogCategoryList: (takes children) - container component for the list of blog categories
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-lg font-bold"">Blog Categories</h2><BlogCategoryList><!-- category list will be rendered here --></BlogCategoryList></div>
COMPONENT HTML:
BlogCategoryList:
<div class=""grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Blog categories display,"DESCRIPTION:
The UI should display a list of blog categories with their respective names and a count of articles within each category. The list should be responsive and accessible on various devices.
COMPONENTS:
- BlogCategoryList: A standalone component that renders a list of blog categories.
- BlogCategoryItem: A component that takes children, representing a single blog category with its name and article count.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Categories</h2><BlogCategoryList/></div>
COMPONENT HTML:
BlogCategoryList:
<ul class=""list-none mb-0"">{categories.map((category) =>( <li key={category.id} class=""mb-2""><BlogCategoryItem>{category.name} ({category.articleCount})</BlogCategoryItem></li>))}</ul>
BlogCategoryItem:
<a href={`/categories/${categoryId}`} class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"">{children}</a>"
Blog categories display,"DESCRIPTION:
The UI should display a list of blog categories with their respective icons and names. The categories should be organized in a grid, with 2-3 categories per row on desktop and 1 category per row on mobile. Each category should have a border around it, with a hover effect to indicate interactivity. The category names should be in a clean, readable font.
COMPONENTS:
- BlogCategoryCard: a standalone component that displays a single blog category with its icon and name.
- BlogCategoryList: a component that takes children (multiple `BlogCategoryCard` components) and organizes them in a grid.
HTML:
<div class=""max-w-md mx-auto p-4""><BlogCategoryList><BlogCategoryCard/><BlogCategoryCard/><BlogCategoryCard/><!-- Add more BlogCategoryCard components here --></BlogCategoryList></div>
COMPONENT HTML:
BlogCategoryCard:
<div class=""bg-white border border-gray-200 rounded p-4 hover:bg-gray-100 transition duration-300 ease-in-out""><div class=""flex flex-wrap items-center""><img src={category_icon} alt={category_name} class=""w-8 h-8 mr-4""/><h2 class=""text-lg font-bold"">{category_name}</h2></div></div>
BlogCategoryList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Character counter for tweet length,"DESCRIPTION:
The UI should display a text input field where the user can type their tweet. Below the input field, a counter should display the number of characters remaining, indicating how many more characters the user can type before reaching the tweet limit (280 characters).
COMPONENTS:
- TweetInput: a standalone component that takes a text input.
- CharacterCounter: a standalone component that displays the remaining character count.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TweetInput/><CharacterCounter/></div>
COMPONENT HTML:
TweetInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your tweet...""/>
CharacterCounter:
<p class=""text-sm text-gray-500"">{remaining_characters} characters remaining</p>"
Character counter for tweet length,"DESCRIPTION:
The UI should be a text input field with a character counter that displays the remaining characters available for a tweet. The counter should turn red when the character limit is exceeded.
COMPONENTS:
- TweetInput: A standalone component that represents the text input field.
- CharacterCounter: A standalone component that displays the remaining characters available for a tweet.
HTML:
<div class=""flex flex-col""><TweetInput/><CharacterCounter/></div>
COMPONENT HTML:
TweetInput:
<input type=""text"" class=""w-full p-2 border border-gray-200 rounded""/>
CharacterCounter:
<p class={ remaining_characters <= 0 ? ""text-red-500"" : """" }>Characters remaining: {remaining_characters}</p>"
Character counter for tweet length,"DESCRIPTION:
A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).
COMPONENTS:
- TextAreaInput: a standalone component for the text input field
- CharacterCountDisplay: a standalone component for displaying the character count
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><TextAreaInput/><CharacterCountDisplay/></div>
COMPONENT HTML:
TextAreaInput:
<textarea class=""w-full p-2 text-lg"" placeholder=""What's on your mind?""/>
CharacterCountDisplay:
<p class=""text-sm text-gray-600"">{remaining_characters} characters remaining</p>"
Photo editor toolset,"DESCRIPTION:
- The UI for a photo editor toolset should be a panel containing various tools (like crop, rotate, adjust brightness, etc.). Each tool could be represented by a button or icon that users can click to select and use that tool. The layout should be simple and straightforward, with the tool buttons laid out in a grid or a row, depending on the screen size.
COMPONENTS:
- ToolButton: Standalone component. Represents a single tool in the editor like crop or rotate.
- ToolPanel: Takes children. This is the container that holds all the **ToolButton** components.
HTML:
<div class=""tool-panel""><ToolButton/><ToolButton/><ToolButton/><!-- Add more ToolButton as per the number of tools available --></div>
COMPONENT HTML:
ToolButton:
<!-- ToolButton represents a single tool in the photo editing toolset --><button class=""p-2 m-1 bg-gray-200 hover:bg-gray-300 focus:outline-none"">{tool_name} </button>
ToolPanel:
<!-- ToolPanel is the container for all the tool buttons --><div class=""flex flex-wrap justify-center items-center p-4 bg-white border border-gray-300"">{children} </div>"
Discussion Forums and Comments,"DESCRIPTION:
A discussion forum with a list of comments and a form to add new comments. Each comment should display the user's name, the comment text, and a timestamp. The UI should have a clean and modern design, with adequate spacing and clear typography.
COMPONENTS:
- CommentCard: (standalone): Displays a single comment with user name, comment text, and timestamp.
- CommentForm: (standalone): A form to add a new comment.
- CommentList: (takes children): A container for a list of comments.
- DiscussionForum: (takes children): The main container for the discussion forum.
HTML:
<!-- The main discussion forum container --><div class=""max-w-md mx-auto p-4""><DiscussionForum><CommentList><!-- List of comments will be rendered here --><CommentCard/><CommentCard/><!-- ... --></CommentList><CommentForm/></DiscussionForum></div>
COMPONENT HTML:
CommentCard:
<div class=""flex gap-2 mb-4""><img src=""{user_avatar_url}"" alt=""User Avatar"" class=""w-10 h-10 rounded-full""/><div class=""flex-1""><h5 class=""text-lg font-bold"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex gap-2 mb-4""><input type=""text"" placeholder=""Add a comment..."" class=""flex-1 p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4"">Comment</button></form>
CommentList:
<!-- This component will render a list of CommentCards --><div class=""space-y-4"">{children}</div>
DiscussionForum:
<!-- This component will render the entire discussion forum UI --><div class=""rounded-lg overflow-hidden shadow-md"">{children}</div>"
Service offerings display,"DESCRIPTION:
The UI should display a list of service offerings in a responsive, mobile-first layout. Each service offering should have a title, a brief description, and an icon. The layout should be accessible and SEO-friendly.
COMPONENTS:
- ServiceOfferingList: A component that takes children, which will be a list of `ServiceOfferingCard` components.
HTML:
<main class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Our Services</h1><ServiceOfferingList><!-- Service offering cards will be rendered here --></ServiceOfferingList></main>
COMPONENT HTML:
ServiceOfferingList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Blog Post Teaser,"DESCRIPTION:
A compact, responsive teaser for a blog post, showcasing the post's title, brief summary, and a ""Read more"" call-to-action.
COMPONENTS:
- PostTeaser: standalone component
- PostTitle: standalone component
- PostSummary: standalone component
- ReadMoreLink: standalone component
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostTeaser/></div>
COMPONENT HTML:
PostTeaser:
<div class=""max-w-sm rounded overflow-hidden shadow-md""><PostTitle/><PostSummary/><ReadMoreLink/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostSummary:
<p class=""text-gray-600"">{post_summary}</p>
ReadMoreLink:
<a href=""{post_url}"" class=""text-blue-600 hover:text-blue-800"">Read more →</a>"
Blog Post Teaser,"DESCRIPTION:
A compact, informative teaser for a blog post, featuring a headline, a brief summary, and a call-to-action to read more.
COMPONENTS:
- BlogPostTeaser: (standalone)
- PostHeadline: (standalone)
- PostSummary: (standalone)
- ReadMoreLink: (standalone)
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><BlogPostTeaser/></div>
COMPONENT HTML:
BlogPostTeaser:
<div class=""flex-1 md:w-2/3 xl:w-1/2""><PostHeadline/><PostSummary/><ReadMoreLink/></div>
PostHeadline:
<h2 class=""text-lg md:text-xl"">{post_title}</h2>
PostSummary:
<p class=""text-sm md:text-base"">{post_summary}</p>
ReadMoreLink:
<a href=""{post_permalink}"" class=""text-blue-600 hover:text-blue-700"">Read More &raquo;</a>"
Spinner/Loading Animations,"DESCRIPTION:
The spinner/loading animation UI should be a circular loading indicator that fills up as the loading progress increases. It should be responsive, mobile-first, and accessible. The animation should be smooth and continuous.
COMPONENTS:
- SpinnerComponent: A standalone component that displays the circular loading indicator.
HTML:
<div class=""flex justify-center""><SpinnerComponent/></div>
COMPONENT HTML:
SpinnerComponent:
<div class=""w-12 h-12 border-4 border-gray-200 border-solid rounded-full animate-spin""><div class=""w-full h-full border-4 border-gray-200 border-solid rounded-full"">{progress_bar}</div></div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Product grid layout,"DESCRIPTION:
The UI should display a responsive grid of products, with each product showing its image, name, price, and a call-to-action button. The grid should adapt to different screen sizes, with a maximum of 3 columns on larger screens and 1 column on smaller screens.
COMPONENTS:
- ProductCard: (standalone): represents a single product in the grid
- ProductGrid: (takes children): wraps the product cards in a responsive grid container
HTML:
<div class=""max-w-md mx-auto px-4 sm:px-6 lg:max-w-7xl lg:px-8""><ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4""><img src={product_image} alt=""Product image"" class=""h-48 w-full object-cover rounded-t""/><h2 class=""text-lg"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-lg font-bold"">{product_price}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div>
ProductGrid:
<div class=""grid gap-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1"">{children}</div>"
Currency and Language Switchers,"DESCRIPTION:
The UI should display two dropdown menus, one for currency and one for language, side by side. The menus should be responsive and accessible.
COMPONENTS:
- CurrencySwitcher: a standalone component that displays a dropdown menu of currencies.
- LanguageSwitcher: a standalone component that displays a dropdown menu of languages.
- DropdownItem: a component that takes a child (the option text) and is used by both `CurrencySwitcher` and `LanguageSwitcher`.
HTML:
<div class=""flex justify-center mb-4""><CurrencySwitcher/><LanguageSwitcher/></div>
COMPONENT HTML:
CurrencySwitcher:
<div class=""relative inline-block""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 border border-gray-400 rounded"">{selectedCurrency} <span class=""caret ml-2""></span></button><ul class=""absolute bg-white border border-gray-400 z-10"">{currencies.map((currency, index) =>( <li key={index}><DropdownItem>{currency}</DropdownItem></li>))} </ul></div>
LanguageSwitcher:
<div class=""relative inline-block ml-4""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 border border-gray-400 rounded"">{selectedLanguage} <span class=""caret ml-2""></span></button><ul class=""absolute bg-white border border-gray-400 z-10"">{languages.map((language, index) =>( <li key={index}><DropdownItem>{language}</DropdownItem></li>))} </ul></div>
DropdownItem:
<li><a href=""#"" class=""block py-2 px-4 hover:bg-gray-100"">{children}</a></li>"
"Styled quotation displayed within the flow of text, often with distinct formatting","DESCRIPTION:
The UI should display a quotation in a distinct style, often with an italic font, and possibly with quotation marks. The quotation should be displayed within the flow of text.
COMPONENTS:
- Quotation: A standalone component that displays a quotation.
HTML:
<p>This is a sample text with a <Quotation/>within.
</p>
COMPONENT HTML:
Quotation:
<span class=""italic font-semibold text-lg"">{quotation_text}</span>"
Train ticket booking form,"DESCRIPTION:
The UI should be a responsive, mobile-first train ticket booking form with input fields for passenger information, journey details, and payment options. The form should be accessible and SEO-friendly.
COMPONENTS:
- PassengerInfoForm: a standalone component for passenger information input fields.
- JourneyDetailsForm: a standalone component for journey details input fields.
- PaymentOptionsForm: a standalone component for payment options input fields.
- BookingSummary: a standalone component to display a summary of the booking details.
- SubmitButton: a standalone component for the submit button.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Book Your Train Ticket</h1><PassengerInfoForm/><JourneyDetailsForm/><PaymentOptionsForm/><BookingSummary/><SubmitButton/></div>
COMPONENT HTML:
PassengerInfoForm:
<div class=""mb-4""><label class=""block mb-2"" for=""first_name"">First Name</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""first_name"" type=""text""/><label class=""block mb-2"" for=""last_name"">Last Name</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""last_name"" type=""text""/><!-- Add more passenger info fields here --></div>
JourneyDetailsForm:
<div class=""mb-4""><label class=""block mb-2"" for=""departure_station"">Departure Station</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""departure_station"" type=""text""/><label class=""block mb-2"" for=""arrival_station"">Arrival Station</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""arrival_station"" type=""text""/><!-- Add more journey details fields here --></div>
PaymentOptionsForm:
<div class=""mb-4""><label class=""block mb-2"" for=""payment_method"">Payment Method</label><select class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""payment_method""><option value=""credit_card"">Credit Card</option><option value=""paypal"">PayPal</option><!-- Add more payment options here --></select><!-- Add payment details fields here --></div>
BookingSummary:
<div class=""mb-4""><h2 class=""text-xl font-bold mb-2"">Booking Summary</h2><p>Passenger: {first_name} {last_name}</p><p>Journey: {departure_station} to {arrival_station}</p><p>Payment Method: {payment_method}</p></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Now</button>"
Train ticket booking form,"DESCRIPTION:
The UI should be a responsive form with the following elements: 
- A header with a title and a brief description
- A section for selecting the journey date and time
- A section for selecting the origin and destination stations
- A section for selecting the number of passengers and class of travel
- A section for passenger details
- A call-to-action button to submit the form
The form should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- HeaderSection: Standalone component
- JourneyDetails: Standalone component
- StationSelect: Standalone component
- PassengerDetails: Standalone component
- SubmitButton: Standalone component
- FormSection: Takes children
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><HeaderSection/><FormSection><JourneyDetails/><StationSelect/><PassengerDetails/></FormSection><SubmitButton/></div>
COMPONENT HTML:
HeaderSection:
<div class=""flex mb-4""><h1 class=""text-2xl font-bold"">{header_title}</h1><p class=""text-sm"">{header_description}</p></div>
JourneyDetails:
<fieldset class=""mb-4""><legend class=""text-lg"">Journey Details</legend><label for=""journey_date"" class=""block mb-2"">Journey Date:</label><input type=""date"" id=""journey_date"" class=""w-full p-2 pl-10 text-sm""/><label for=""journey_time"" class=""block mb-2"">Journey Time:</label><input type=""time"" id=""journey_time"" class=""w-full p-2 pl-10 text-sm""/></fieldset>
StationSelect:
<fieldset class=""mb-4""><legend class=""text-lg"">Station Select</legend><label for=""origin_station"" class=""block mb-2"">Origin Station:</label><select id=""origin_station"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Station</option>{origin_station_options} </select><label for=""destination_station"" class=""block mb-2"">Destination Station:</label><select id=""destination_station"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Station</option>{destination_station_options} </select></fieldset>
PassengerDetails:
<fieldset class=""mb-4""><legend class=""text-lg"">Passenger Details</legend><label for=""num_passengers"" class=""block mb-2"">Number of Passengers:</label><select id=""num_passengers"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Number</option>{num_passenger_options} </select><label for=""class_of_travel"" class=""block mb-2"">Class of Travel:</label><select id=""class_of_travel"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Class</option>{class_of_travel_options} </select></fieldset>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Now</button>
FormSection:
<section class=""mb-4"">{children}</section>"
Year/Month Picker Calendars,"DESCRIPTION:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
COMPONENTS:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
HTML:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
COMPONENT HTML:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
Map View of Locations,"DESCRIPTION:
The UI should be a map view that displays multiple locations as markers on a map, with a sidebar that lists the locations. The map should be responsive and adapt to different screen sizes. The UI should be accessible and follow SEO best practices.
COMPONENTS:
- MapViewComponent: (standalone): The main map view component that renders the map and locations.
- LocationListComponent: (takes children): A list of locations in the sidebar.
- LocationListItemComponent: (standalone): A single location item in the list.
HTML:
<div class=""flex h-screen w-full""><MapViewComponent/><LocationListComponent><!-- List of locations will be rendered here --></LocationListComponent></div>
COMPONENT HTML:
MapViewComponent:
<div class=""h-full w-full md:w-2/3""><!-- Map will be rendered here --><div id=""map"" class=""h-full w-full""></div></div>
LocationListComponent:
<div class=""h-full w-full md:w-1/3 overflow-y-auto p-4"">{children}</div>
LocationListItemComponent:
<div class=""flex items-center py-2 border-b border-gray-200""><span class=""mr-2"">{location_icon}</span><span>{location_name}</span></div>"
Embedded video,"DESCRIPTION:
The UI should display an embedded video with a responsive design that adapts to different screen sizes. The video should have a playable thumbnail, and the video controls should be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component that displays the video thumbnail.
- VideoPlayer: A component that takes children (the video iframe) and provides video controls.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><VideoThumbnail/><VideoPlayer><iframe src={video_url} frameborder=""0"" allowfullscreen></iframe></VideoPlayer></div>
COMPONENT HTML:
VideoThumbnail:
<img src={thumbnail_url} alt=""Video thumbnail"" class=""w-full h-48 object-cover rounded-md md:h-64 lg:h-80""/>
VideoPlayer:
<div class=""relative overflow-hidden"">{children} <!-- video controls will be added here --></div>"
Testimonial Author Title,"DESCRIPTION:
The UI should display a testimonial author title, which typically appears below a quote or testimonial text. The title should be visually distinct from the quote text, with a smaller font size and a different font style. The title should also be responsive, adapting to different screen sizes.
COMPONENTS:
- TestimonialAuthorTitle: Standalone component that displays the author's title.
HTML:
<div class=""flex flex-col items-center mb-4""><!-- Quote or testimonial text --><blockquote class=""text-lg italic mb-2"">{testimonial_text}</blockquote><TestimonialAuthorTitle/></div>
COMPONENT HTML:
TestimonialAuthorTitle:
<p class=""text-sm font-bold"">{author_title}</p>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
A circular button with a prominent color scheme, typically found in mobile interfaces, that performs a primary action when clicked. The button should have a clear and contrasting background color, with a clear and readable font for the button text.
COMPONENTS:
- CircularButton: A standalone component that represents the circular button.
HTML:
<div class=""flex justify-center""><CircularButton/></div>
COMPONENT HTML:
CircularButton:
<button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded-full"">{button_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
Countdown timer component,"DESCRIPTION:
The UI should display a countdown timer with days, hours, minutes, and seconds remaining until a specific deadline. The timer should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- CountdownTimer: A standalone component that displays the countdown timer.
- TimeUnit: A component that displays a single unit of time (e.g. days, hours, minutes, seconds). Takes children.
HTML:
<div class=""container mx-auto p-4""><CountdownTimer/></div>
COMPONENT HTML:
CountdownTimer:
<div class=""flex justify-center mb-4""><TimeUnit>{days} days</TimeUnit><TimeUnit>{hours} hours</TimeUnit><TimeUnit>{minutes} minutes</TimeUnit><TimeUnit>{seconds} seconds</TimeUnit></div>
TimeUnit:
<div class=""text-2xl font-bold mx-2"">{children}</div>"
Tooltip providing additional information specific to the context of the element,"DESCRIPTION:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
COMPONENTS:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
HTML:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
COMPONENT HTML:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Location map display,"DESCRIPTION:
The UI should display a location map with a marker indicating a specific location. The map should be responsive and adapt to different screen sizes. It should also be accessible and SEO-friendly.
COMPONENTS:
- LocationMap: (standalone): The container element for the map.
- MapMarker: (standalone): The marker indicating a specific location.
- MapContainer: (takes children): The container element that wraps the map and marker.
HTML:
<div class=""flex justify-center""><MapContainer><LocationMap/><MapMarker/></MapContainer></div>
COMPONENT HTML:
LocationMap:
<div class=""h-screen w-full overflow-hidden""><div id=""map"" class=""h-full w-full""></div></div>
MapMarker:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><div class=""bg-red-500 rounded-full w-6 h-6""></div></div>
MapContainer:
<div class=""relative"">{children}</div>"
Opportunity Tracker: Monitor sales pipelines,"DESCRIPTION:
The Opportunity Tracker UI should be a dashboard that displays a list of sales opportunities, each with its stage, probability, and value. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- OpportunityList: (takes children): a list of `OpportunityCard` components
- PipelineStage: (standalone): displays the stage of a sales opportunity
- ProbabilityBadge: (standalone): displays the probability of a sales opportunity
- ValueDisplay: (standalone): displays the value of a sales opportunity
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Opportunity Tracker</h1><OpportunityList><!-- list of opportunities --></OpportunityList></div>
COMPONENT HTML:
OpportunityList:
<ul class=""list-none mb-4"">{children}</ul>
PipelineStage:
<span class=""bg-orange-200 text-orange-800 py-1 px-2 rounded"">{stage}</span>
ProbabilityBadge:
<span class=""bg-green-200 text-green-800 py-1 px-2 rounded"">{probability}%</span>
ValueDisplay:
<p>{value} {currency}</p>"
Opportunity Tracker: Monitor sales pipelines,"DESCRIPTION:
The Opportunity Tracker UI should display a list of sales opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, with a card-based layout on larger screens and a list view on smaller screens.
COMPONENTS:
- OpportunityList: A component that takes children (a list of `OpportunityCard` components) and displays them in a responsive grid or list.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Opportunity Tracker</h1><OpportunityList><!-- List of OpportunityCard components will be rendered here --></OpportunityList></div>
COMPONENT HTML:
OpportunityList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Reporting Dashboard: Generate data insights,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays various data insights in a clear and organized manner. The dashboard should have a top navigation bar, a sidebar with navigation options, and a main content area that displays different charts, graphs, and data tables.
COMPONENTS:
- NavigationBar: - Standalone - Displays the top navigation bar with a dashboard title and navigation links.
- Sidebar: - Standalone - Displays the sidebar with navigation options.
- DataCard: - Takes children - Displays a single data insight, such as a chart or graph, with a title and description.
- DataSection: - Takes children - Displays a section of data insights, such as a row of charts or graphs.
- DataTable: - Takes children - Displays a table of data with column headers and rows.
HTML:
<div class=""flex h-screen""><NavigationBar/><div class=""flex-1 overflow-y-hidden""><Sidebar/><main class=""p-4""><DataSection><DataCard>{children}</DataCard><DataCard>{children}</DataCard></DataSection><DataSection><DataTable><thead><tr><th>{column1_header}</th><th>{column2_header}</th></tr></thead><tbody><tr><td>{data_point1}</td><td>{data_point2}</td></tr></tbody></DataTable></DataSection></main></div></div>
COMPONENT HTML:
NavigationBar:
<nav class=""bg-white border-b border-gray-200""><div class=""container mx-auto p-4""><h1 class=""text-lg"">{dashboard_title}</h1><ul class=""flex justify-end""><li><a href=""#"" class=""text-gray-600"">{nav_link1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_link2}</a></li></ul></div></nav>
Sidebar:
<aside class=""w-64 bg-white border-r border-gray-200""><nav class=""px-4""><ul><li><a href=""#"" class=""block py-2"">{sidebar_link1}</a></li><li><a href=""#"" class=""block py-2"">{sidebar_link2}</a></li></ul></nav></aside>
DataCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">{title}</h2><p>{description}</p>{children}</div>
DataSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>
DataTable:
<table class=""w-full"">{children}</table>"
Right-to-Left (RTL) Support,"DESCRIPTION:
The UI should be a simple HTML page that demonstrates Right-to-Left (RTL) language support. It should have a header, a paragraph of text, and a button that is aligned to the right side of the page.
COMPONENTS:
- Header: standalone component
- RtlParagraph: standalone component
- RtlButton: standalone component
HTML:
<html dir=""rtl""><head><title>RTL Support</title><link rel=""stylesheet"" href=""styles.css""/></head><body class=""h-screen flex flex-col justify-center items-center""><header><Header/></header><main class=""max-w-md mx-auto""><RtlParagraph/><RtlButton/></main></body></html>
COMPONENT HTML:
Header:
<header class=""text-3xl font-bold text-right"">{header_title}</header>
RtlParagraph:
<p class=""text-lg text-right"">{paragraph_text}</p>
RtlButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Right-to-Left (RTL) Support,"DESCRIPTION:
The UI should be a simple webpage that supports Right-to-Left (RTL) layout direction, with a heading, paragraph, and a button. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- HeadingRTL: (standalone): A heading component that adjusts its text direction based on the RTL setting.
- ParagraphRTL: (standalone): A paragraph component that adjusts its text direction based on the RTL setting.
- RTLButton: (standalone): A button component that adjusts its text direction based on the RTL setting.
HTML:
<div class=""flex flex-col items-center justify-center h-screen""><HeadingRTL/><ParagraphRTL/><RTLButton/></div>
COMPONENT HTML:
HeadingRTL:
<h1 class=""text-3xl sm:text-4xl md:text-5xl lg:text-6xl {heading_color}"">{heading_text}</h1>
ParagraphRTL:
<p class=""text-lg sm:text-xl md:text-2xl lg:text-3xl {paragraph_color}"">{paragraph_text}</p>
RTLButton:
<button class=""bg-{button_color} hover:bg-{button_hover_color} text-{button_text_color} font-bold py-2 px-4 rounded"">{button_text}</button>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Avatar Upload: Input field for uploading a profile picture,"DESCRIPTION:
The UI should be a simple input field with a label that allows users to upload a profile picture. The input field should be responsive and adapt to different screen sizes.
COMPONENTS:
- InputLabel: (standalone) - The label for the input field.
- InputField: (standalone) - The input field for uploading the profile picture.
HTML:
<div class=""flex flex-col md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4""><InputLabel/><InputField/><!-- Optional: display uploaded image --><img src=""{uploaded_image_url}"" alt=""Profile Picture"" class=""w-full h-full object-cover rounded-full""/></div>
COMPONENT HTML:
InputLabel:
<label for=""avatar-upload"" class=""block mb-2 text-sm font-bold text-gray-700"">Upload Profile Picture</label>
InputField:
<input type=""file"" id=""avatar-upload"" class=""block w-full px-4 py-2 text-gray-700""/>"
Warning or error message for invalid input,"DESCRIPTION:
The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an ""X"" icon to close the message.
COMPONENTS:
- ErrorMessage: (standalone): Displays the error message.
- CloseButton: (standalone): Displays an ""X"" icon to close the message.
HTML:
<div class=""bg-red-100 p-4 rounded mb-4""><ErrorMessage/><CloseButton/></div>
COMPONENT HTML:
ErrorMessage:
<p class=""text-red-700"">{error_message}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">&times;</button>"
"Section at the bottom of the page containing links, copyright information, and other details","DESCRIPTION:
The UI should be a footer section at the bottom of the page that contains links, copyright information, and other details. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented. The footer should have a dark background with light-colored text.
COMPONENTS:
- Footer: standalone component that wraps the entire footer section.
- FooterLinks: standalone component that displays a list of links.
- CopyrightInfo: standalone component that displays copyright information.
- FooterDetails: standalone component that displays other details.
HTML:
<footer class=""bg-dark text-light pt-4 pb-2""><Footer/></footer>
COMPONENT HTML:
Footer:
<div class=""container mx-auto p-4""><FooterLinks/><CopyrightInfo/><FooterDetails/></div>
FooterLinks:
<ul class=""list-none mb-4""><li><a href=""{link1_url}"" class=""text-light"">{link1_text}</a></li><li><a href=""{link2_url}"" class=""text-light"">{link2_text}</a></li><!-- Add more links as needed --></ul>
CopyrightInfo:
<p class=""text-sm"">{copyright_info}</p>
FooterDetails:
<p class=""text-sm"">{footer_details}</p>"
"Expanded menu with multiple columns and subsections, often seen in navigation bars","DESCRIPTION:
The UI should be a responsive, multi-column navigation menu with subsections. It should have a clean and minimalistic design, with clear typography and sufficient spacing between elements. On larger screens, the menu should expand to show multiple columns, making it easy to navigate through the various sections.
COMPONENTS:
- NavMenu: The main navigation menu component, which takes children.
- NavItem: A single navigation item, which takes children.
- NavColumn: A column within the navigation menu, which takes children.
- NavSubsection: A subsection within a navigation item, which takes children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><NavMenu><NavColumn><NavItem><a href=""#"" class=""text-lg"">Section 1</a><NavSubsection><NavItem><a href=""#"">Subsection 1.1</a></NavItem><NavItem><a href=""#"">Subsection 1.2</a></NavItem></NavSubsection></NavItem><NavItem><a href=""#"">Link 2</a></NavItem></NavColumn><NavColumn><NavItem><a href=""#"">Section 2</a></NavItem><NavItem><a href=""#"">Link 3</a></NavItem><NavItem><a href=""#"">Link 4</a></NavItem></NavColumn></NavMenu></div>
COMPONENT HTML:
NavMenu:
<nav class=""flex justify-center lg:flex-wrap"">{children}</nav>
NavItem:
<li class=""mb-4 lg:mb-8"">{children} {subsections && ( <NavSubsection>{subsections} </NavSubsection>)}</li>
NavColumn:
<ul class=""list-none mb-4 lg:mb-8 lg:w-1/2 xl:w-1/3"">{children}</ul>
NavSubsection:
<ul class=""list-none pl-4"">{children}</ul>"
Music playlist interface,"DESCRIPTION:
The UI should comprise a simple, clean layout showing a music playlist. It should include a header with the playlist name and a list displaying each song with details such as the title, artist, and a button to play each song. The design will be mobile-responsive, with items stacking vertically on smaller screens and aligning in a columnar fashion on larger screens.
COMPONENTS:
- PlaylistHeader: (Standalone) - Displays the playlist name.
- SongItem: (Takes children) - Represents an individual song in the playlist. Each song includes a ""Play"" button beside the title and artist name.
- PlayButton: (Standalone) - A button used to play the song.
HTML:
<div class=""max-w-lg mx-auto""><PlaylistHeader/><div class=""space-y-4""><SongItem><span>Song Title One - Artist One</span><PlayButton/></SongItem><SongItem><span>Song Title Two - Artist Two</span><PlayButton/></SongItem><!-- Add more <SongItem/>as needed --></div></div>
COMPONENT HTML:
PlaylistHeader:
<div class=""text-center p-4 shadow-lg""><h1 class=""text-2xl font-bold"">{playlistName}</h1></div>
SongItem:
<div class=""flex justify-between items-center p-2 bg-white shadow rounded-md"">{children}</div>
PlayButton:
<button class=""px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"">Play</button>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
"Menu that expands or ""flies out"" from a navigation item when clicked or hovered over","DESCRIPTION:
The UI should display a navigation menu item that, when clicked or hovered over, expands to show a fly-out menu with additional options.
COMPONENTS:
- NavigationItem: Standalone component representing a single navigation item.
- FlyoutMenu: Component that takes children, representing the fly-out menu that appears when the navigation item is clicked or hovered over.
- MenuItem: Standalone component representing a single item in the fly-out menu.
HTML:
<nav class=""flex justify-center""><NavigationItem/><!-- more navigation items --></nav>
COMPONENT HTML:
NavigationItem:
<a href=""#"" class=""px-4 py-2 hover:bg-gray-100 hover:text-gray-900 transition duration-300 ease-in-out""><span>{navigation_item_label}</span><FlyoutMenu/></a>
FlyoutMenu:
<div class=""absolute bg-white border shadow-md rounded-lg p-4 hidden group-hover:block"">{children}</div>
MenuItem:
<a href=""#"" class=""block px-4 py-2 hover:bg-gray-100 hover:text-gray-900 transition duration-300 ease-in-out""><span>{menu_item_label}</span></a>"
Blog Post Category Link,"DESCRIPTION:
A simple link with a text label indicating the blog post category, styled with a subtle hover effect and rounded corners.
COMPONENTS:
- BlogPostCategoryLink: A standalone component displaying a single blog post category link.
HTML:
<div class=""flex items-center mb-4""><BlogPostCategoryLink/></div>
COMPONENT HTML:
BlogPostCategoryLink:
<a href=""{categoryLink}"" class=""text-sm text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out rounded px-2 py-1"">{categoryName}</a>"
Contact directory display,"DESCRIPTION:
The UI should display a list of contacts, with each contact showing their name, email, and phone number. The list should be responsive and accessible, with a clear visual hierarchy.
COMPONENTS:
- ContactDirectory: A container component that takes children (a list of **ContactCard** components).
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Contact Directory</h1><ContactDirectory><!-- list of ContactCard components will be rendered here --></ContactDirectory></div>
COMPONENT HTML:
ContactDirectory:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Contact directory display,"DESCRIPTION:
The UI should be a responsive, mobile-first contact directory display showing a list of contacts with their names, email addresses, and phone numbers.
COMPONENTS:
- Contact: (standalone) - represents a single contact
- ContactList: (takes children) - represents a list of contacts
HTML:
<div class=""container mx-auto p-4 pt-6 md:pt-12""><h1 class=""text-3xl font-bold mb-4"">Contact Directory</h1><ContactList><Contact/><Contact/><!-- add more contacts here --></ContactList></div>
COMPONENT HTML:
Contact:
<div class=""flex justify-between mb-4""><div><h2 class=""text-lg font-bold"">{contact_name}</h2><p class=""text-gray-600"">{contact_email}</p><p class=""text-gray-600"">{contact_phone}</p></div></div>
ContactList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Contact directory display,"DESCRIPTION:
A responsive contact directory display with a list of contacts, each showing name, email, and phone number.
COMPONENTS:
- ContactDirectory: (takes children) - contains a list of `ContactCard`s
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Contact Directory</h1><ContactDirectory><!-- list of contact cards will be rendered here --></ContactDirectory></div>
COMPONENT HTML:
ContactDirectory:
<ul class=""list-none p-0 mb-0"">{children}</ul>"
Contact directory display,"DESCRIPTION:
The contact directory display should be a grid of contact cards, with each card displaying the contact's name, title, phone number, and email address. The card layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- ContactCard: (standalone): Displays a single contact's information
- ContactDirectory: (takes children): Container component that renders a grid of `ContactCard` components
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><h1 class=""text-2xl font-bold mb-4"">Contact Directory</h1><ContactDirectory><ContactCard/><ContactCard/><!-- Add more ContactCard components here --></ContactDirectory></div>
COMPONENT HTML:
ContactCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{contact_name}</h2><p class=""text-gray-600"">{contact_title}</p><p class=""text-gray-600"">{contact_phone}</p><p class=""text-gray-600"">{contact_email}</p></div>
ContactDirectory:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Breadcrumb navigation for category and subreddits,"DESCRIPTION:
The UI should display a breadcrumb navigation for categories and subreddits. Each item in the breadcrumb should display the category name and have a separator (e.g., `/`) between each item.
COMPONENTS:
- BreadCrumb: standalone component that renders a single breadcrumb item.
- BreadCrumbNavigation: container component that takes children (multiple `BreadCrumb` components).
HTML:
<nav class=""flex items-center mb-4""><BreadCrumbNavigation><BreadCrumb/><BreadCrumb/><!-- Add more Breadcrumbs as needed --></BreadCrumbNavigation></nav>
COMPONENT HTML:
BreadCrumb:
<li class=""mr-2""><a href=""{category_url}"" class=""text-gray-600 hover:text-gray-900"">{category_name}</a><span class=""text-gray-400"">/</span></li>
BreadCrumbNavigation:
<ul class=""flex"">{children}</ul>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.
COMPONENTS:
- AnimatedBox: (standalone) : A box that animates when the user scrolls to a certain point on the page.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- scrollable content --><p>{scrollable_content}</p><!-- animated box --><AnimatedBox/><!-- more scrollable content --><p>{more_scrollable_content}</p></div>
COMPONENT HTML:
AnimatedBox:
<div class=""hidden opacity-0 transition-all duration-500"" data-animate-trigger=""scroll"" data-animate-class=""block opacity-100""><!-- animated content --><p>{animated_content}</p></div>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a scroll-activated animation effect. Initially, the animation is hidden, and as the user scrolls down, the animation is triggered and becomes visible. The animation can be a fade-in, slide-in, or any other creative effect.
COMPONENTS:
- AnimatedSection: standalone component that wraps the animation effect.
- AnimationTrigger: standalone component that triggers the animation when scrolled into view.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- content before the animation --><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p><AnimatedSection/><!-- content after the animation --><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p></div>
COMPONENT HTML:
AnimatedSection:
<section class=""w-full h-64 bg-orange-200 animate-fadeIn""><!-- animation content --><h2>{animated_title}</h2><p>{animated_text}</p></section>
AnimationTrigger:
<div class=""absolute top-0 left-0 w-full h-1 bg-transparent""><!-- empty element to trigger the animation --></div>"
Dropdown list,"DESCRIPTION:
A dropdown list that displays a list of options when the user clicks on it. The list should be hidden by default and appear when the user interacts with the dropdown. The dropdown should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- DropdownButton: - standalone: The button that, when clicked, displays the dropdown list.
- DropdownList: - takes children: The container for the list of options.
- DropdownListItem: - standalone: An individual list item in the dropdown list.
HTML:
<div class=""relative inline-block""><DropdownButton/><DropdownList><!-- list items will be inserted here --></DropdownList></div>
COMPONENT HTML:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{dropdown_title}</button>
DropdownList:
<ul class=""absolute bg-white shadow-md py-1 mt-2 w-48"">{children}</ul>
DropdownListItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href={list_item_link} class=""text-gray-800"">{list_item_text}</a></li>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag links and @mention links. Each link should have a distinct style to differentiate between the two types of links.
COMPONENTS:
- HashtagLink: (standalone) - represents a single hashtag link
- MentionLink: (standalone) - represents a single @mention link
- LinkList: (takes children) - a container for a list of links
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><HashtagLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={`/${hashtag_value}`} class=""text-blue-500 hover:text-blue-700 transition duration-300"">#{hashtag_value}</a>
MentionLink:
<a href={`/@${username}`} class=""text-green-500 hover:text-green-700 transition duration-300"">@{username}</a>
LinkList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links, with each link displaying a unique identifier (e.g., #hashtag or @username). The links should be styled differently to distinguish between hashtags and @mentions.
COMPONENTS:
- HashtagLink: a standalone component displaying a hashtag link.
- MentionLink: a standalone component displaying an @mention link.
- LinkList: a component that takes children, displaying a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold"">Links</h2><LinkList><HashtagLink/><!-- displays a hashtag link --><MentionLink/><!-- displays an @mention link --><!-- add more links as needed --></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href `{hashtag_url}` class=""text-blue-600 hover:text-blue-900"">{hashtag_text}</a>
MentionLink:
<a href `{mention_url}` class=""text-orange-600 hover:text-orange-900"">@{username}</a>
LinkList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links, each link is clickable and can be styled differently.
COMPONENTS:
- HashtagLink: standalone, represents a single hashtag link.
- MentionLink: standalone, represents a single @mention link.
HTML:
<ul class=""flex flex-wrap gap-2""><li><HashtagLink/></li><li><MentionLink/></li><!-- more links here --></ul>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_link} class=""text-blue-600 hover:text-blue-900 transition duration-300"">{hashtag_text}</a>
MentionLink:
<a href={mention_link} class=""text-blue-600 hover:text-blue-900 transition duration-300"">@{mention_text}</a>"
Featured Product Price Tag,"DESCRIPTION:
The UI should display a featured product price tag with a discounted price, original price, and a percentage discount. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeaturedPriceTag: (standalone): Display the featured product price tag.
- DiscountBadge: (standalone): Display the percentage discount badge.
HTML:
<div class=""flex flex-wrap items-center mb-4""><FeaturedPriceTag/></div>
COMPONENT HTML:
FeaturedPriceTag:
<div class=""bg-gray-100 p-2 rounded""><p class=""text-lg font-bold"">{newPrice}</p><p class=""text-gray-500 line-through"">{originalPrice}</p><DiscountBadge/></div>
DiscountBadge:
<span class=""bg-orange-200 text-orange-600 px-2 py-1 rounded"">{discountPercentage}% off</span>"
Transitions,"DESCRIPTION:
The UI should feature a simple layout displaying a list of transition effects. Each transition effect should have a name and a brief description. Given that this is a UI design, transitions between elements when interacted with are implied. The design should maintain clarity and allow easy readability, ensuring that each transition effect is distinctly presented, perhaps with subtle hover effects to demonstrate the transition.
COMPONENTS:
- TransitionItem: Standalone component. Displays the name and description of a single transition effect.
- TransitionList: Component that takes children. This component acts as a container for multiple TransitionItem components.
HTML:
<div class=""p-4""><h1 class=""text-2xl font-bold text-center mb-4"">Available Transitions</h1><TransitionList><TransitionItem/><TransitionItem/><TransitionItem/><!-- Additional TransitionItem components could be added here --></TransitionList></div>
COMPONENT HTML:
TransitionItem:
<div class=""rounded-lg p-2 hover:bg-gray-100 transition duration-300 ease-in-out""><h2 class=""font-semibold text-lg"">{transition_name}</h2><p class=""text-gray-600"">{transition_description}</p></div>
TransitionList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Sidebar Widget Content,"DESCRIPTION:
The UI should be a compact sidebar widget that displays a title, a short description, and a call-to-action (CTA) button. The widget should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SidebarWidget: The main container for the sidebar widget, which takes children.
- WidgetTitle: A heading element that displays the title of the widget, standalone.
- WidgetDescription: A paragraph element that displays a short description of the widget, standalone.
- CallToActionButton: A button element that displays a call-to-action, standalone.
HTML:
<div class=""w-full md:w-1/4 lg:w-1/5 xl:w-1/6 p-4""><SidebarWidget><WidgetTitle/><WidgetDescription/><CallToActionButton/></SidebarWidget></div>
COMPONENT HTML:
SidebarWidget:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>
WidgetTitle:
<h2 class=""text-lg font-bold"">{widget_title}</h2>
WidgetDescription:
<p class=""text-sm"">{widget_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Hero Overlay Background,"DESCRIPTION:
The UI should be a hero overlay background with a subtle gradient effect, overlaying a background image. The background image should be blurred to create a sense of depth, and the gradient overlay should have a subtle animation effect to make it stand out.
COMPONENTS:
- HeroBackground: A standalone component that displays the background image and gradient overlay.
- HeroGradientOverlay: A standalone component that displays the gradient overlay with animation effect.
HTML:
<div class=""min-h-screen relative""><HeroBackground/><HeroGradientOverlay/></div>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={`background-image: url(${background_image})`}><div class=""absolute inset-0 bg-gray-900 opacity-50""></div></div>
HeroGradientOverlay:
<div class=""absolute inset-0""><div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-75 animate-pulse""></div></div>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Projects showcase with thumbnails and descriptions,"DESCRIPTION:
A projects showcase with a grid of thumbnails, each with a description and a link to view more.
COMPONENTS:
- ProjectThumbnail: standalone component that displays a single project thumbnail.
- ProjectCard: takes children, a container component that displays a project thumbnail and description.
- ProjectShowcase: takes children, the main component that displays a grid of project cards.
HTML:
<div class=""container mx-auto p-4 pt-6 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects Showcase</h1><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProjectShowcase><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><!-- and so on... --></ProjectShowcase></div></div>
COMPONENT HTML:
ProjectThumbnail:
<a href=""{project_url}"" class=""block mb-4""><img src=""{thumbnail_url}"" alt=""{project_name}"" class=""h-48 w-full object-cover rounded-md""/></a>
ProjectCard:
<div class=""p-4 md:p-6 bg-white rounded-md shadow-md"">{children} <h2 class=""text-lg font-bold"">{project_name}</h2><p>{project_description}</p></div>
ProjectShowcase:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Projects showcase with thumbnails and descriptions,"DESCRIPTION:
The UI should be a responsive grid of project showcases, with each project displaying a thumbnail, a title, and a brief description. The grid should be mobile-first, with a single column on small screens and multiple columns on larger screens.
COMPONENTS:
- ProjectShowcase: a standalone component displaying a single project's information
- ProjectsGrid: a component taking children, rendering a grid of project showcases
HTML:
<section class=""container max-w-7xl mx-auto p-4 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects</h1><ProjectsGrid><ProjectShowcase/><ProjectShowcase/><ProjectShowcase/><!-- add more ProjectShowcase components as needed --></ProjectsGrid></section>
COMPONENT HTML:
ProjectShowcase:
<div class=""bg-white rounded shadow-md p-4 mb-4""><img src=""{project_thumbnail_url}"" alt=""{project_name} thumbnail"" class=""w-full mb-2""/><h2 class=""text-lg font-bold"">{project_name}</h2><p class=""text-gray-600"">{project_description}</p></div>
ProjectsGrid:
<div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</div>"
