input,output
Friends List: List of friends with profile links,"DESCRIPTION:
The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.
COMPONENTS:
- FriendItem: A standalone component representing a single friend's profile link.
- FriendsList: A component that takes children ( FriendItems ) and renders them in an unordered list.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Friends List</h2><ul class=""flex flex-wrap justify-center mb-4""><FriendItem/><FriendItem/><FriendItem/></ul></div>
COMPONENT HTML:
FriendItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><a href=""{profileLink}"" class=""block""><img src=""{profilePicture}"" alt=""{friendName}"" class=""w-12 h-12 rounded-full mb-2""><span class=""text-lg"">{friendName}</span></a></li>
FriendsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Friends List: List of friends with profile links,"DESCRIPTION:
The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.
COMPONENTS:
- FriendItem: A standalone component representing a single friend's profile link.
- FriendsList: A component that takes children ( FriendItems ) and renders them in an unordered list.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Friends List</h2><ul class=""flex flex-wrap justify-center mb-4""><FriendItem/><FriendItem/><FriendItem/></ul></div>
COMPONENT HTML:
FriendItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><a href=""{profileLink}"" class=""block""><img src=""{profilePicture}"" alt=""{friendName}"" class=""w-12 h-12 rounded-full mb-2""><span class=""text-lg"">{friendName}</span></a></li>
FriendsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Friends List: List of friends with profile links,"DESCRIPTION:
The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.
COMPONENTS:
- FriendItem: A standalone component representing a single friend's profile link.
- FriendsList: A component that takes children ( FriendItems ) and renders them in an unordered list.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Friends List</h2><ul class=""flex flex-wrap justify-center mb-4""><FriendItem/><FriendItem/><FriendItem/></ul></div>
COMPONENT HTML:
FriendItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><a href=""{profileLink}"" class=""block""><img src=""{profilePicture}"" alt=""{friendName}"" class=""w-12 h-12 rounded-full mb-2""><span class=""text-lg"">{friendName}</span></a></li>
FriendsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Friends List: List of friends with profile links,"DESCRIPTION:
The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.
COMPONENTS:
- FriendItem: A standalone component representing a single friend's profile link.
- FriendsList: A component that takes children ( FriendItems ) and renders them in an unordered list.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Friends List</h2><ul class=""flex flex-wrap justify-center mb-4""><FriendItem/><FriendItem/><FriendItem/></ul></div>
COMPONENT HTML:
FriendItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><a href=""{profileLink}"" class=""block""><img src=""{profilePicture}"" alt=""{friendName}"" class=""w-12 h-12 rounded-full mb-2""><span class=""text-lg"">{friendName}</span></a></li>
FriendsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Friends List: List of friends with profile links,"DESCRIPTION:
The UI should be a responsive list of friends with profile links. The list should be displayed in a grid on larger screens and a vertical list on smaller screens. Each friend's name should be a link to their profile.
COMPONENTS:
- FriendCard: (standalone): a single friend's information with a profile link
- FriendsList: (takes children): a container for the list of friends
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Friends</h2><FriendsList><!-- friend cards will be inserted here --><FriendCard/><FriendCard/><!-- ... --></FriendsList></div>
COMPONENT HTML:
FriendCard:
<div class=""flex items-center mb-4""><img src={profile_image_url} alt=""Profile image"" class=""w-12 h-12 rounded-full mr-4""/><a href={profile_url} class=""text-blue-600 hover:text-blue-900"">{friend_name}</a></div>
FriendsList:
<ul class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</ul>"
GloballyUniqueIdentifiableElements,"DESCRIPTION:
The UI should display a list of unique elements, each with a unique identifier, name, and description.
COMPONENTS:
- UniqueIdCard: A standalone component that displays a single unique element's details.
- UniqueIdList: A component that takes children, which are multiple **UniqueIdCard** components.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Globally Unique Identifiable Elements</h1><UniqueIdList><UniqueIdCard/><UniqueIdCard/><UniqueIdCard/><!-- Add more UniqueIdCard components here --></UniqueIdList></div>
COMPONENT HTML:
UniqueIdCard:
<div class=""bg-white shadow-md p-4 rounded mb-4""><h2 class=""text-lg font-bold"">{element_name}</h2><p class=""text-gray-600"">{element_description}</p><p class=""text-sm text-gray-500"">Unique ID: {unique_id}</p></div>
UniqueIdList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
The UI should be a small button with a reply icon and the text ""Reply"". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.
COMPONENTS:
- ReplyButton: (standalone)
HTML:
<button><ReplyButton/></button>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-reply mr-2""></i>Reply</button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
The UI should be a small button with a reply icon and the text ""Reply"". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.
COMPONENTS:
- ReplyButton: (standalone)
HTML:
<button><ReplyButton/></button>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-reply mr-2""></i>Reply</button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Reply button to respond to tweets,"DESCRIPTION:
The UI should be a small button with a reply icon and the text ""Reply"". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.
COMPONENTS:
- ReplyButton: (standalone)
HTML:
<button><ReplyButton/></button>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-reply mr-2""></i>Reply</button>"
Reply button to respond to tweets,"DESCRIPTION:
A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.
COMPONENTS:
- ReplyButton: - Standalone
HTML:
<div class=""flex justify-end""><ReplyButton/></div>
COMPONENT HTML:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-reply"" aria-hidden=""true""></i><!-- Button text for screen readers --><span class=""sr-only"">Reply</span></button>"
Product Feature Icon Size,"DESCRIPTION:
The UI should display a product feature icon with a size indicator, which is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- FeatureIcon: A standalone component that displays a icon representing a product feature.
- IconSizeIndicator: A standalone component that displays the size of the icon.
HTML:
<div class=""flex items-center""><FeatureIcon/><IconSizeIndicator/></div>
COMPONENT HTML:
FeatureIcon:
<i class=""fas fa-{icon_type} text-2xl"" aria-label=""{icon_label}""></i>
IconSizeIndicator:
<span class=""text-sm"">{icon_size}px</span>"
Product Feature Icon Size,"DESCRIPTION:
The UI should display a product feature icon with a specific size. The icon should be responsive and accessible.
COMPONENTS:
- ProductFeatureIcon: A standalone component that displays an icon with a specific size.
HTML:
<div class=""flex justify-center mb-4""><ProductFeatureIcon/></div>
COMPONENT HTML:
ProductFeatureIcon:
<i class=""fas fa-{icon_type} text-{icon_color} text-{icon_size}""></i>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
COMPONENTS:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
HTML:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
COMPONENT HTML:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
Service section with icons and brief descriptions,"DESCRIPTION:
The UI should display a service section with three columns, each containing an icon, a brief description, and a title. The section should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- ServiceCard: standalone component that renders an icon, title, and description.
HTML:
<section class=""max-w-md mx-auto pt-12 pb-6""><h2 class=""text-3xl font-bold mb-4"">Our Services</h2><div class=""flex flex-wrap justify-center""><ServiceCard/><ServiceCard/><ServiceCard/></div></section>
COMPONENT HTML:
ServiceCard:
<div class=""w-full md:w-1/3 xl:w-1/3 p-6""><i class=""fas fa-{icon_name} text-3xl text-gray-600 mb-4""></i><h3 class=""text-lg font-bold mb-2"">{service_title}</h3><p class=""text-gray-600"">{service_description}</p></div>"
Tweet edit button for post revisions,"DESCRIPTION:
The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- EditButton: A standalone component that displays an edit icon and allows users to edit a tweet revision.
HTML:
<div class=""flex justify-end mb-2""><EditButton/></div>
COMPONENT HTML:
EditButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full""><i class=""fas fa-pencil-alt text-sm"" aria-label=""Edit tweet revision""></i></button>"
Tweet edit button for post revisions,"DESCRIPTION:
The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- EditButton: A standalone component that displays an edit icon and allows users to edit a tweet revision.
HTML:
<div class=""flex justify-end mb-2""><EditButton/></div>
COMPONENT HTML:
EditButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full""><i class=""fas fa-pencil-alt text-sm"" aria-label=""Edit tweet revision""></i></button>"
Tweet edit button for post revisions,"DESCRIPTION:
The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- EditButton: A standalone component that displays an edit icon and allows users to edit a tweet revision.
HTML:
<div class=""flex justify-end mb-2""><EditButton/></div>
COMPONENT HTML:
EditButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full""><i class=""fas fa-pencil-alt text-sm"" aria-label=""Edit tweet revision""></i></button>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.
COMPONENTS:
- VideoBackground: Standalone component that renders a full-bleed video background.
- OverlayText: Standalone component that renders the overlay text.
HTML:
<div class=""flex h-screen w-full""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<video class=""h-full w-full object-cover"" loop autoplay muted><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded""><h1 class=""text-3xl"">{heading}</h1><p class=""text-lg"">{subheading}</p></div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.
COMPONENTS:
- VideoBackground: Standalone component that renders a full-bleed video background.
- OverlayText: Standalone component that renders the overlay text.
HTML:
<div class=""flex h-screen w-full""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<video class=""h-full w-full object-cover"" loop autoplay muted><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded""><h1 class=""text-3xl"">{heading}</h1><p class=""text-lg"">{subheading}</p></div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a video background with overlay text, where the video takes up the full height and width of the screen, and the overlay text is centered on top of the video with a subtle background to make it readable.
COMPONENTS:
- VideoBackground: standalone component that renders a full-screen video background
- OverlayText: standalone component that renders text with a subtle background on top of the video
HTML:
<div class=""h-screen w-screen relative""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<div class=""absolute top-0 left-0 w-screen h-screen""><video autoplay loop muted><source src=""{video_source}"" type=""video/mp4""/></video></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl bg-gray-800 bg-opacity-50 py-4 px-8 rounded"">{overlay_text}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
COMPONENTS:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
HTML:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.
COMPONENTS:
- VideoBackground: Standalone component that renders a full-bleed video background.
- OverlayText: Standalone component that renders the overlay text.
HTML:
<div class=""flex h-screen w-full""><VideoBackground/><OverlayText/></div>
COMPONENT HTML:
VideoBackground:
<video class=""h-full w-full object-cover"" loop autoplay muted><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded""><h1 class=""text-3xl"">{heading}</h1><p class=""text-lg"">{subheading}</p></div>"
Video Background with Overlay Text,"DESCRIPTION:
The UI should be a full-screen video background with overlay text. The video background should be responsive and adapt to different screen sizes. The overlay text should be centered and easily readable.
COMPONENTS:
- VideoBackground: standalone component that renders a full-screen video background
- OverlayText: standalone component that renders the overlay text
HTML:
<div class=""h-screen w-full""><VideoBackground/><div class=""absolute inset-0 flex justify-center items-center""><OverlayText/></div></div>
COMPONENT HTML:
VideoBackground:
<video autoplay muted loop class=""h-full w-full object-cover""><source src=""{video_source}"" type=""video/mp4""></video>
OverlayText:
<h1 class=""text-3xl text-white"">{overlay_text}</h1>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Drag-and-Drop Interfaces,"DESCRIPTION:
A drag-and-drop interface with a drop zone, a list of draggable items, and a button to clear the drop zone.
COMPONENTS:
- DraggableItem: - standalone: A single item that can be dragged and dropped.
- DropZone: - takes children: The area where items can be dropped.
- ClearButton: - standalone: A button to clear the drop zone.
HTML:
<div class=""flex h-screen""><div class=""flex-1 overflow-y-auto""><!-- List of draggable items --><ul class=""space-y-2""><DraggableItem/><DraggableItem/><DraggableItem/></ul></div><div class=""flex-1 border""><!-- Drop zone --><DropZone><!-- dropped items will be rendered here --></DropZone></div><ClearButton/></div>
COMPONENT HTML:
DraggableItem:
<div class=""bg-white shadow-md p-2 rounded""><p>{item_name}</p></div>
DropZone:
<div class=""h-full p-4 border-dashed border-2"">{children}</div>
ClearButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Clear</button>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Drag-and-Drop Interfaces,"DESCRIPTION:
The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.
COMPONENTS:
- DropZone: (takes children) - A container that accepts dragged items and displays them in a list.
- DraggableList: (takes children) - A list of draggable items that can be dragged and dropped into a drop zone.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Drag and Drop Interface</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DraggableList><!-- Draggable items will be rendered here --></DraggableList></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><DropZone><!-- Dropped items will be rendered here --></DropZone></div></div></div>
COMPONENT HTML:
DropZone:
<div class=""bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400""><h2 class=""text-lg font-bold mb-2"">Drop Zone</h2><ul class=""list-none p-0 m-0"">{children} </ul></div>
DraggableList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Skeleton Screens/Loading,"DESCRIPTION:
A loading UI with a loading animation and a set of skeleton screens for a list of items. The loading animation is a simple rotating wheel and the skeleton screens display a set of rectangles with a slight animation.
COMPONENTS:
- LoadingIndicator: a standalone component that displays a rotating wheel
- SkeletonScreen: a standalone component that displays a rectangle that animates to simulate loading
- SkeletonList: a component that takes children, which are a set of `SkeletonScreen` components
HTML:
<div class=""flex justify-center mt-20""><LoadingIndicator/><SkeletonList><SkeletonScreen/><SkeletonScreen/><SkeletonScreen/></SkeletonList></div>
COMPONENT HTML:
LoadingIndicator:
<div class=""inline-block""><div class=""animate-spin h-8 w-8 border-2 border-gray-50 rounded-full border-t-2 border-t-gray-200""><!-- rotating wheel animation --></div></div>
SkeletonScreen:
<div class=""bg-gray-100 animate-pulse h-12 w-64 rounded-lg mt-2""><!-- animated rectangle --></div>
SkeletonList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hero Section with Text,"DESCRIPTION:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
COMPONENTS:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
HTML:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
COMPONENT HTML:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links, with each link displaying a unique identifier (e.g., #hashtag or @username). The links should be styled differently to distinguish between hashtags and @mentions.
COMPONENTS:
- HashtagLink: a standalone component displaying a hashtag link.
- MentionLink: a standalone component displaying an @mention link.
- LinkList: a component that takes children, displaying a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold"">Links</h2><LinkList><HashtagLink/><!-- displays a hashtag link --><MentionLink/><!-- displays an @mention link --><!-- add more links as needed --></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href `{hashtag_url}` class=""text-blue-600 hover:text-blue-900"">{hashtag_text}</a>
MentionLink:
<a href `{mention_url}` class=""text-orange-600 hover:text-orange-900"">@{username}</a>
LinkList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag links and @mention links. Each link should have a distinct style to differentiate between the two types of links.
COMPONENTS:
- HashtagLink: (standalone) - represents a single hashtag link
- MentionLink: (standalone) - represents a single @mention link
- LinkList: (takes children) - a container for a list of links
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><HashtagLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={`/${hashtag_value}`} class=""text-blue-500 hover:text-blue-700 transition duration-300"">#{hashtag_value}</a>
MentionLink:
<a href={`/@${username}`} class=""text-green-500 hover:text-green-700 transition duration-300"">@{username}</a>
LinkList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.
COMPONENTS:
- HashtagLink: (standalone): A single hashtag link component.
- MentionLink: (standalone): A single @mention link component.
- LinkList: (takes children): A container component that holds a list of hashtag and @mention links.
HTML:
<div class=""max-w-md mx-auto p-4""><LinkList><HashtagLink/><HashtagLink/><MentionLink/><MentionLink/></LinkList></div>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{hashtag_text}</a>
MentionLink:
<a href={mention_url} class=""text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out"">{mention_username}</a>
LinkList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag and @Mention Links,"DESCRIPTION:
The UI should display a list of hashtag and @mention links, each link is clickable and can be styled differently.
COMPONENTS:
- HashtagLink: standalone, represents a single hashtag link.
- MentionLink: standalone, represents a single @mention link.
HTML:
<ul class=""flex flex-wrap gap-2""><li><HashtagLink/></li><li><MentionLink/></li><!-- more links here --></ul>
COMPONENT HTML:
HashtagLink:
<a href={hashtag_link} class=""text-blue-600 hover:text-blue-900 transition duration-300"">{hashtag_text}</a>
MentionLink:
<a href={mention_link} class=""text-blue-600 hover:text-blue-900 transition duration-300"">@{mention_text}</a>"
Hero Image/Header,"DESCRIPTION:
The UI should display a hero image/header section that takes up the full width of the screen, with a background image, a heading, and a call-to-action (CTA) button. The heading and CTA button should be centered horizontally and vertically within the hero image.
COMPONENTS:
- HeroImageHeader: (standalone)
- HeroHeading: (standalone)
- CallToAction: (standalone)
HTML:
<section class=""h-screen w-full relative""><HeroImageHeader/><!-- hero image background --><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center""><HeroHeading/><CallToAction/></div></section>
COMPONENT HTML:
HeroImageHeader:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${hero_image_url});`}></div>
HeroHeading:
<h1 class=""text-3xl font-bold"">{hero_heading}</h1>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Time Pickers/Clock Icons,"DESCRIPTION:
The UI should display a clock icon with a dropdown list of time options. When a time option is selected, the clock icon should display the selected time.
COMPONENTS:
- ClockIcon: A standalone component that displays a clock icon.
- TimeOption: A component that takes children (the time option text) and is used to render each time option in the dropdown list.
HTML:
<div class=""flex items-center""><ClockIcon/><select class=""ml-2""><TimeOption>12:00 AM</TimeOption><TimeOption>12:30 AM</TimeOption><!-- more time options here --></select></div>
COMPONENT HTML:
ClockIcon:
<i class=""fas fa-clock text-gray-500 text-lg"" aria-hidden=""true""></i>
TimeOption:
<option>{children}</option>"
Projects showcase with thumbnails and descriptions,"DESCRIPTION:
The UI should be a responsive grid of project showcases, with each project displaying a thumbnail, a title, and a brief description. The grid should be mobile-first, with a single column on small screens and multiple columns on larger screens.
COMPONENTS:
- ProjectShowcase: a standalone component displaying a single project's information
- ProjectsGrid: a component taking children, rendering a grid of project showcases
HTML:
<section class=""container max-w-7xl mx-auto p-4 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects</h1><ProjectsGrid><ProjectShowcase/><ProjectShowcase/><ProjectShowcase/><!-- add more ProjectShowcase components as needed --></ProjectsGrid></section>
COMPONENT HTML:
ProjectShowcase:
<div class=""bg-white rounded shadow-md p-4 mb-4""><img src=""{project_thumbnail_url}"" alt=""{project_name} thumbnail"" class=""w-full mb-2""/><h2 class=""text-lg font-bold"">{project_name}</h2><p class=""text-gray-600"">{project_description}</p></div>
ProjectsGrid:
<div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</div>"
Projects showcase with thumbnails and descriptions,"DESCRIPTION:
The UI should be a responsive grid of project showcases, with each project displaying a thumbnail, a title, and a brief description. The grid should be mobile-first, with a single column on small screens and multiple columns on larger screens.
COMPONENTS:
- ProjectShowcase: a standalone component displaying a single project's information
- ProjectsGrid: a component taking children, rendering a grid of project showcases
HTML:
<section class=""container max-w-7xl mx-auto p-4 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects</h1><ProjectsGrid><ProjectShowcase/><ProjectShowcase/><ProjectShowcase/><!-- add more ProjectShowcase components as needed --></ProjectsGrid></section>
COMPONENT HTML:
ProjectShowcase:
<div class=""bg-white rounded shadow-md p-4 mb-4""><img src=""{project_thumbnail_url}"" alt=""{project_name} thumbnail"" class=""w-full mb-2""/><h2 class=""text-lg font-bold"">{project_name}</h2><p class=""text-gray-600"">{project_description}</p></div>
ProjectsGrid:
<div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</div>"
Projects showcase with thumbnails and descriptions,"DESCRIPTION:
A projects showcase with a grid of thumbnails, each with a description and a link to view more.
COMPONENTS:
- ProjectThumbnail: standalone component that displays a single project thumbnail.
- ProjectCard: takes children, a container component that displays a project thumbnail and description.
- ProjectShowcase: takes children, the main component that displays a grid of project cards.
HTML:
<div class=""container mx-auto p-4 pt-6 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects Showcase</h1><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProjectShowcase><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><!-- and so on... --></ProjectShowcase></div></div>
COMPONENT HTML:
ProjectThumbnail:
<a href=""{project_url}"" class=""block mb-4""><img src=""{thumbnail_url}"" alt=""{project_name}"" class=""h-48 w-full object-cover rounded-md""/></a>
ProjectCard:
<div class=""p-4 md:p-6 bg-white rounded-md shadow-md"">{children} <h2 class=""text-lg font-bold"">{project_name}</h2><p>{project_description}</p></div>
ProjectShowcase:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Responsive Table Layout,"DESCRIPTION:
The UI should display a responsive table layout with a header row, multiple data rows, and columns that adjust their width based on the screen size.
COMPONENTS:
- ResponsiveTable: The main container for the responsive table layout. Takes children.
- TableHeader: The header row of the table. Takes children.
- TableRow: A single row in the table. Takes children.
- TableCell: A single cell in the table. Takes children.
HTML:
<ResponsiveTable><TableHeader><TableCell><span>Column 1</span></TableCell><TableCell><span>Column 2</span></TableCell><TableCell><span>Column 3</span></TableCell></TableHeader><TableRow><TableCell>{cellData1}</TableCell><TableCell>{cellData2}</TableCell><TableCell>{cellData3}</TableCell></TableRow><!-- More TableRow components here --></ResponsiveTable>
COMPONENT HTML:
ResponsiveTable:
<div class=""overflow-x-auto""><table class=""w-full border-collapse"">{children} </table></div>
TableHeader:
<thead><tr class=""bg-gray-100"">{children} </tr></thead>
TableRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
A responsive, mobile-first, and accessible image grid that showcases featured images in a 2x2 layout on larger screens and stacks vertically on smaller screens.
COMPONENTS:
- FeaturedImageGrid: standalone
- ImageCard: takes children
HTML:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImageGrid/></div>
COMPONENT HTML:
FeaturedImageGrid:
<div class=""grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6""><ImageCard><img src={image1_url} alt={image1_alt}/>{image1_caption}</ImageCard><ImageCard><img src={image2_url} alt={image2_alt}/>{image2_caption}</ImageCard><ImageCard><img src={image3_url} alt={image3_alt}/>{image3_caption}</ImageCard><ImageCard><img src={image4_url} alt={image4_alt}/>{image4_caption}</ImageCard></div>
ImageCard:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>"
Featured Image Grid,"DESCRIPTION:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
COMPONENTS:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
HTML:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
COMPONENT HTML:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Background Images/Patterns,"DESCRIPTION:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
COMPONENTS:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
HTML:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
COMPONENT HTML:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style={`background-image: url('{background_image_or_pattern}');`}><!-- Background image or pattern will be displayed here --></div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Hero Background Pattern,"DESCRIPTION:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
COMPONENTS:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
COMPONENT HTML:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
About me section with bio and profile picture,"DESCRIPTION:
The UI should be a responsive, mobile-first About Me section with a profile picture and a brief bio. The profile picture should be circular and positioned above the bio. The bio should be a short paragraphs of text.
COMPONENTS:
- AboutMeContainer: Standalone component that wraps the entire About Me section.
- ProfilePicture: Standalone component that displays the profile picture.
- Bio: Standalone component that displays the bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><AboutMeContainer/></div>
COMPONENT HTML:
AboutMeContainer:
<div class=""flex flex-col items-center md:flex-row""><ProfilePicture/><Bio/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""{profile_picture_alt}"" class=""w-24 h-24 rounded-full mb-4 md:mr-4 md:mb-0""/>
Bio:
<p class=""text-lg"">{bio_text}</p>"
About me section with bio and profile picture,"DESCRIPTION:
The UI should be a responsive, mobile-first About Me section with a profile picture and a brief bio. The profile picture should be circular and positioned above the bio. The bio should be a short paragraphs of text.
COMPONENTS:
- AboutMeContainer: Standalone component that wraps the entire About Me section.
- ProfilePicture: Standalone component that displays the profile picture.
- Bio: Standalone component that displays the bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><AboutMeContainer/></div>
COMPONENT HTML:
AboutMeContainer:
<div class=""flex flex-col items-center md:flex-row""><ProfilePicture/><Bio/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""{profile_picture_alt}"" class=""w-24 h-24 rounded-full mb-4 md:mr-4 md:mb-0""/>
Bio:
<p class=""text-lg"">{bio_text}</p>"
Project Timeline Visualization Tool,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.
COMPONENTS:
- ProjectTimeline: The main component that renders the project timeline. Takes children.
- MilestoneCard: A card component that represents a milestone in the project timeline. Standalone.
- TaskCard: A card component that represents a task in the project timeline. Standalone.
- DependencyLine: A line component that represents a dependency between tasks or milestones. Standalone.
HTML:
<!-- The main project timeline component --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProjectTimeline><!-- Milestones and tasks will be rendered here --></ProjectTimeline></div>
COMPONENT HTML:
ProjectTimeline:
<!-- Container for the project timeline --><div class=""flex flex-col"">{children}</div>
MilestoneCard:
<!-- Milestone card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{milestone_name}</h3><p class=""text-gray-600"">{milestone_description}</p><p class=""text-sm text-gray-500"">{milestone_date}</p></div>
TaskCard:
<!-- Task card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><p class=""text-sm text-gray-500"">{task_date}</p></div>
DependencyLine:
<!-- Dependency line component --><div class=""h-4 w-1 bg-gray-300""></div>"
Project Timeline Visualization Tool,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.
COMPONENTS:
- ProjectTimeline: The main component that renders the project timeline. Takes children.
- MilestoneCard: A card component that represents a milestone in the project timeline. Standalone.
- TaskCard: A card component that represents a task in the project timeline. Standalone.
- DependencyLine: A line component that represents a dependency between tasks or milestones. Standalone.
HTML:
<!-- The main project timeline component --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProjectTimeline><!-- Milestones and tasks will be rendered here --></ProjectTimeline></div>
COMPONENT HTML:
ProjectTimeline:
<!-- Container for the project timeline --><div class=""flex flex-col"">{children}</div>
MilestoneCard:
<!-- Milestone card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{milestone_name}</h3><p class=""text-gray-600"">{milestone_description}</p><p class=""text-sm text-gray-500"">{milestone_date}</p></div>
TaskCard:
<!-- Task card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><p class=""text-sm text-gray-500"">{task_date}</p></div>
DependencyLine:
<!-- Dependency line component --><div class=""h-4 w-1 bg-gray-300""></div>"
Project Timeline Visualization Tool,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.
COMPONENTS:
- ProjectTimeline: The main component that renders the project timeline. Takes children.
- MilestoneCard: A card component that represents a milestone in the project timeline. Standalone.
- TaskCard: A card component that represents a task in the project timeline. Standalone.
- DependencyLine: A line component that represents a dependency between tasks or milestones. Standalone.
HTML:
<!-- The main project timeline component --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProjectTimeline><!-- Milestones and tasks will be rendered here --></ProjectTimeline></div>
COMPONENT HTML:
ProjectTimeline:
<!-- Container for the project timeline --><div class=""flex flex-col"">{children}</div>
MilestoneCard:
<!-- Milestone card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{milestone_name}</h3><p class=""text-gray-600"">{milestone_description}</p><p class=""text-sm text-gray-500"">{milestone_date}</p></div>
TaskCard:
<!-- Task card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><p class=""text-sm text-gray-500"">{task_date}</p></div>
DependencyLine:
<!-- Dependency line component --><div class=""h-4 w-1 bg-gray-300""></div>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Featured Image Lightbox Close,"DESCRIPTION:
The UI should be a lightbox close button for a featured image. It should be a responsive, mobile-first, accessible, and SEO-friendly component.
COMPONENTS:
- LightboxCloseButton: a standalone component representing the close button for the lightbox.
HTML:
<!-- Lightbox container --><div class=""fixed top-0 left-0 h-screen w-screen bg-black bg-opacity-50 flex justify-center""><!-- Lightbox content --><div class=""bg-white p-4 max-w-md m-4""><!-- Featured image --><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full""/><!-- Lightbox close button --><LightboxCloseButton/></div></div>
COMPONENT HTML:
LightboxCloseButton:
<!-- Lightbox close button --><button class=""absolute top-0 right-0 p-4 text-lg text-white hover:text-gray-200 focus:outline-none"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A Lightbox component that displays a featured image and has a close button.
COMPONENTS:
- Lightbox: A standalone component that contains the image and the close button.
- CloseButton: A standalone component that represents the close button.
HTML:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center""><Lightbox/></div>
COMPONENT HTML:
Lightbox:
<div class=""bg-white p-4 max-w-md mx-auto mt-16""><CloseButton/><img src={imageUrl} alt={imageAlt} class=""mx-auto""/></div>
CloseButton:
<button class=""absolute top-2 right-2 text-3xl text-gray-500 hover:text-gray-800"">×</button>"
Featured Image Lightbox Close,"DESCRIPTION:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
COMPONENTS:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
HTML:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
COMPONENT HTML:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
"Graphic symbol representing the brand or website, usually clickable","DESCRIPTION:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
COMPONENTS:
- Logo: a standalone component representing the brand or website.
HTML:
<a href=""/"" aria-label=""Home""><Logo/></a>
COMPONENT HTML:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
Ratings and Reviews,"DESCRIPTION:
The UI should display a rating system with an average rating and the number of reviews. It should also display a list of individual reviews from users.
COMPONENTS:
- RatingIndicator: Standalone component to display the average rating.
- ReviewList: Component that takes children (individual reviews).
- ReviewItem: Standalone component to display a single review.
HTML:
<div class=""flex flex-col gap-4""><RatingIndicator/><p>{review_count} reviews</p><ReviewList><ReviewItem/><!-- more ReviewItem components here --></ReviewList></div>
COMPONENT HTML:
RatingIndicator:
<div class=""flex items-center gap-2""><span class=""text-xl"">{average_rating}/5</span><i class=""fa fa-star text-yellow-500""></i><span class=""text-gray-500"">{rating_count} ratings</span></div>
ReviewList:
<ul class=""list-none py-4"">{children}</ul>
ReviewItem:
<li class=""py-2 border-b border-gray-200""><div class=""flex items-center justify-between""><div><span class=""text-lg"">{reviewer_name}</span><span class=""text-sm text-gray-500"">{review_date}</span></div><div><i class=""fa fa-star text-yellow-500""></i><span class=""text-sm"">{rating}/5</span></div></div><p class=""text-sm text-gray-600"">{review_text}</p></li>"
Product Description Text,"DESCRIPTION:
The UI should display a product description text, which is a brief summary of the product's features and benefits. The text should be readable on various devices and should be accessible to screen readers.
COMPONENTS:
- ProductDescriptionText: standalone component that renders the product description text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductDescriptionText/></div>
COMPONENT HTML:
ProductDescriptionText:
<p class=""text-lg leading-relaxed"">{product_description_text}</p>"
Product Description Text,"DESCRIPTION:
The UI should display a product description text, which is a brief summary of the product's features and benefits. The text should be readable on various devices and should be accessible to screen readers.
COMPONENTS:
- ProductDescriptionText: standalone component that renders the product description text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductDescriptionText/></div>
COMPONENT HTML:
ProductDescriptionText:
<p class=""text-lg leading-relaxed"">{product_description_text}</p>"
Product Description Text,"DESCRIPTION:
The UI should display a product description text, which is a brief summary of the product's features and benefits. The text should be readable on various devices and should be accessible to screen readers.
COMPONENTS:
- ProductDescriptionText: standalone component that renders the product description text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductDescriptionText/></div>
COMPONENT HTML:
ProductDescriptionText:
<p class=""text-lg leading-relaxed"">{product_description_text}</p>"
Product Price Currency,"DESCRIPTION:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
COMPONENTS:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
HTML:
<div class=""flex items-center""><ProductPriceCurrency/></div>
COMPONENT HTML:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Product Price Currency,"DESCRIPTION:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
COMPONENTS:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
HTML:
<div class=""flex items-center""><ProductPriceCurrency/></div>
COMPONENT HTML:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Product Price Currency,"DESCRIPTION:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
COMPONENTS:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
HTML:
<div class=""flex items-center""><ProductPriceCurrency/></div>
COMPONENT HTML:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Product Price Currency,"DESCRIPTION:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
COMPONENTS:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
HTML:
<div class=""flex items-center""><ProductPriceCurrency/></div>
COMPONENT HTML:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Testimonial Quote Image,"DESCRIPTION:
The UI should display a quote with an image of the person who said it, along with their name and title.
COMPONENTS:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
HTML:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
COMPONENT HTML:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
SEO Meta Tags/Optimization,"DESCRIPTION:
A basic SEO meta tags optimization setup with title, description, and keywords.
COMPONENTS:
- MetaTitle: - Standalone - Displays the title of the webpage.
- MetaDescription: - Standalone - Displays the meta description of the webpage.
- MetaKeywords: - Standalone - Displays the meta keywords of the webpage.
HTML:
<head><MetaTitle/><MetaDescription/><MetaKeywords/></head>
COMPONENT HTML:
MetaTitle:
<title>{title}</title>
MetaDescription:
<meta name=""description"" content=""{description}""/>
MetaKeywords:
<meta name=""keywords"" content=""{keywords}""/>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Button prompting users to take a specific action, like signing up or purchasing","DESCRIPTION:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ActionButton: a standalone component that renders a single button.
HTML:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Warning message displayed within the context of a form or interface element,"DESCRIPTION:
The UI should display a warning message in a distinctive style to grab the user's attention, within the context of a form or interface element. The warning message should be easily readable and accessible.
COMPONENTS:
- WarningMessage: A standalone component that displays a warning message.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><!-- Form or interface element content --><WarningMessage/><!-- Rest of the form or interface element content --></div>
COMPONENT HTML:
WarningMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 mb-4"" role=""alert""><p class=""mb-2"">{warning_message}</p></div>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle icon that can be used to expand or collapse a navigation menu. It should be accessible and SEO-friendly.
COMPONENTS:
- NavToggle: (standalone) - The navigation menu toggle icon.
HTML:
<nav class=""lg:flex hidden lg:bg-white lg:shadow-md lg:rounded""><NavToggle/><!-- navigation menu content here --></nav>
COMPONENT HTML:
NavToggle:
<button class=""lg:hidden flex justify-center w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">Toggle navigation menu</span><span class=""block w-5 h-1 bg-gray-600""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle icon that can be used to expand or collapse a navigation menu. It should be accessible and SEO-friendly.
COMPONENTS:
- NavToggle: (standalone) - The navigation menu toggle icon.
HTML:
<nav class=""lg:flex hidden lg:bg-white lg:shadow-md lg:rounded""><NavToggle/><!-- navigation menu content here --></nav>
COMPONENT HTML:
NavToggle:
<button class=""lg:hidden flex justify-center w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">Toggle navigation menu</span><span class=""block w-5 h-1 bg-gray-600""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span><span class=""block w-5 h-1 bg-gray-600 mt-1""></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should have a navigation menu toggle icon that resembles a hamburger icon. When clicked, it should toggle the navigation menu on and off.
COMPONENTS:
- NavigationMenuToggle: standalone
HTML:
<nav><NavigationMenuToggle/><ul id=""navigation-menu""><!-- navigation menu items here --></ul></nav>
COMPONENT HTML:
NavigationMenuToggle:
<button class=""block lg:hidden rounded focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"" aria-label=""Toggle navigation menu""><span class=""sr-only"">Toggle navigation menu</span><span class=""block w-6 h-6"" aria-hidden=""true""><!-- hamburger icon here --><span class=""block w-6 h-1 bg-gray-600 rounded-full mb-2""></span><span class=""block w-6 h-1 bg-gray-600 rounded-full mb-2""></span><span class=""block w-6 h-1 bg-gray-600 rounded-full""></span></span></button>"
Navigation Menu Toggle Icon,"DESCRIPTION:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
COMPONENTS:
- NavigationToggle: (standalone) - The navigation toggle icon component.
HTML:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Social Sharing: Buttons for sharing content,"DESCRIPTION:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
COMPONENTS:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
HTML:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
COMPONENT HTML:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-${social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Chart Builder: Visualize data trends,"DESCRIPTION:
The UI should be a responsive, mobile-first chart builder that allows users to visualize data trends. It should have a simple and clean design, with a prominent chart area and accessible interactive elements.
COMPONENTS:
- ChartHeader: A standalone component that displays the chart title and a dropdown menu for selecting the chart type.
- ChartCanvas: A standalone component that renders the chart using a third-party library (not included in this response).
- DataSelector: A component that takes children and allows users to select the data to display in the chart.
- AxisLabels: A standalone component that displays the axis labels for the chart.
- Legend: A standalone component that displays the legend for the chart.
HTML:
<div class=""flex flex-col h-screen overflow-hidden""><ChartHeader/><div class=""flex flex-grow overflow-hidden""><DataSelector><!-- data selector options will be rendered here --></DataSelector><div class=""flex-grow""><ChartCanvas/><AxisLabels/><Legend/></div></div></div>
COMPONENT HTML:
ChartHeader:
<header class=""bg-white py-4 shadow-md""><h2 class=""text-lg"">{chart_title}</h2><div class=""relative""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Chart Type</button><ul class=""absolute bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">Line Chart</a></li><li><a href=""#"" class=""block py-2 px-4"">Bar Chart</a></li><!-- more chart types --></ul></div></header>
ChartCanvas:
<div class=""flex-grow h-full""><!-- chart will be rendered here --></div>
DataSelector:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Select Data</h3><ul class=""list-none mb-4"">{children} </ul></div>
AxisLabels:
<div class=""flex justify-between mb-4""><p class=""text-sm"">{x_axis_label}</p><p class=""text-sm"">{y_axis_label}</p></div>
Legend:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Legend</h3><ul class=""list-none mb-4""><!-- legend items will be rendered here --></ul></div>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
COMPONENTS:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
HTML:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
COMPONENT HTML:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
COMPONENTS:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
HTML:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
COMPONENT HTML:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
COMPONENTS:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
HTML:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
COMPONENT HTML:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
COMPONENTS:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
HTML:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
COMPONENT HTML:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Post Text Editor: Input field for writing a new post,"DESCRIPTION:
The UI should be a simple text input field with a placeholder for writing a new post. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostEditor: A standalone component that contains the text input field.
- InputField: A standalone component that represents the text input field.
HTML:
<div class=""flex flex-col w-full p-4 md:p-6 lg:p-8""><PostEditor/></div>
COMPONENT HTML:
PostEditor:
<div class=""flex flex-col w-full""><InputField/></div>
InputField:
<textarea class=""w-full p-2 pl-4 pr-4 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" placeholder=""Write a new post..."" rows=""5""></textarea>"
Customer review and rating summaries,"DESCRIPTION:
The UI should display a summary of customer reviews, including the average rating and total number of reviews. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- CustomerReviewSummary: standalone component
- RatingSummary: standalone component
- ReviewCount: standalone component
HTML:
<div class=""max-w-md mx-auto py-4""><CustomerReviewSummary/><div class=""flex justify-between mb-4""><RatingSummary/><ReviewCount/></div></div>
COMPONENT HTML:
CustomerReviewSummary:
<div class=""text-lg font-bold"">{average_rating} out of 5 stars</div>
RatingSummary:
<div class=""flex items-center""><span class=""text-yellow-500"">{rating_icon}</span><span class=""ml-2"">{average_rating}</span></div>
ReviewCount:
<p>{review_count} reviews</p>"
Cookie Banners,"DESCRIPTION:
A cookie banner is a notification that appears at the top or bottom of a webpage, informing users about the use of cookies on the website. It should be a non-obtrusive, dismissible notification that contains a message, an accept button, and an optional link to learn more.
COMPONENTS:
- CookieBanner: Standalone component that contains the cookie banner message, accept button, and optional link.
- CookieButton: Standalone component that represents the accept button.
HTML:
<!-- Cookie banner container --><div class=""fixed bottom-0 left-0 right-0 p-4 bg-gray-100""><!-- Cookie banner content --><CookieBanner/></div>
COMPONENT HTML:
CookieBanner:
<!-- Cookie banner content --><div class=""flex justify-between""><p class=""text-sm"">{cookie_message}</p><div class=""flex""><CookieButton/>{optional_link && ( <a href={optional_link.href} target=""_blank"" rel=""noopener noreferrer"" class=""text-sm underline ml-4"">{optional_link.text}</a>)} </div></div>
CookieButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Accept</button>"
Message body text editor with formatting tools,"DESCRIPTION:
The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.
COMPONENTS:
- TextEditor: (standalone): The main text editor component containing the text area and toolbar.
- Toolbar: (standalone): The toolbar component containing the formatting tools.
- ToolButton: (takes children): A single tool button in the toolbar, containing an icon and optional text.
HTML:
<div class=""flex flex-col h-screen max-h-screen overflow-y-auto p-4""><TextEditor/></div>
COMPONENT HTML:
TextEditor:
<div class=""flex flex-col h-full w-full""><Toolbar/><textarea class=""w-full p-2 h-full overflow-y-auto resize-y""/></div>
Toolbar:
<div class=""flex justify-center mb-2""><ToolButton><i class=""fas fa-bold""/></ToolButton><ToolButton><i class=""fas fa-italic""/></ToolButton><ToolButton><i class=""fas fa-underline""/></ToolButton><ToolButton><span>Font size: {font_size}</span><select class=""pl-2""><option value=""10"">10px</option><option value=""12"">12px</option><option value=""14"">14px</option></select></ToolButton></div>
ToolButton:
<button class=""py-2 px-4 rounded-md hover:bg-gray-100"">{children}</button>"
Message body text editor with formatting tools,"DESCRIPTION:
The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.
COMPONENTS:
- TextEditor: (standalone): The main text editor component containing the text area and toolbar.
- Toolbar: (standalone): The toolbar component containing the formatting tools.
- ToolButton: (takes children): A single tool button in the toolbar, containing an icon and optional text.
HTML:
<div class=""flex flex-col h-screen max-h-screen overflow-y-auto p-4""><TextEditor/></div>
COMPONENT HTML:
TextEditor:
<div class=""flex flex-col h-full w-full""><Toolbar/><textarea class=""w-full p-2 h-full overflow-y-auto resize-y""/></div>
Toolbar:
<div class=""flex justify-center mb-2""><ToolButton><i class=""fas fa-bold""/></ToolButton><ToolButton><i class=""fas fa-italic""/></ToolButton><ToolButton><i class=""fas fa-underline""/></ToolButton><ToolButton><span>Font size: {font_size}</span><select class=""pl-2""><option value=""10"">10px</option><option value=""12"">12px</option><option value=""14"">14px</option></select></ToolButton></div>
ToolButton:
<button class=""py-2 px-4 rounded-md hover:bg-gray-100"">{children}</button>"
Message body text editor with formatting tools,"DESCRIPTION:
The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.
COMPONENTS:
- TextEditor: (standalone): The main text editor component containing the text area and toolbar.
- Toolbar: (standalone): The toolbar component containing the formatting tools.
- ToolButton: (takes children): A single tool button in the toolbar, containing an icon and optional text.
HTML:
<div class=""flex flex-col h-screen max-h-screen overflow-y-auto p-4""><TextEditor/></div>
COMPONENT HTML:
TextEditor:
<div class=""flex flex-col h-full w-full""><Toolbar/><textarea class=""w-full p-2 h-full overflow-y-auto resize-y""/></div>
Toolbar:
<div class=""flex justify-center mb-2""><ToolButton><i class=""fas fa-bold""/></ToolButton><ToolButton><i class=""fas fa-italic""/></ToolButton><ToolButton><i class=""fas fa-underline""/></ToolButton><ToolButton><span>Font size: {font_size}</span><select class=""pl-2""><option value=""10"">10px</option><option value=""12"">12px</option><option value=""14"">14px</option></select></ToolButton></div>
ToolButton:
<button class=""py-2 px-4 rounded-md hover:bg-gray-100"">{children}</button>"
Featured Image Caption,"DESCRIPTION:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
COMPONENTS:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
HTML:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Featured Image Caption,"DESCRIPTION:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
COMPONENTS:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
HTML:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Featured Image Caption,"DESCRIPTION:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
COMPONENTS:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
HTML:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Featured Image Caption,"DESCRIPTION:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
COMPONENTS:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
HTML:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
COMPONENT HTML:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Category List: Links to categorized content,"DESCRIPTION:
The Category List should display a list of categorized content links, with each link displaying the category name and a brief description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- CategoryList: (takes children): A container for a list of `CategoryLink` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><!-- category links will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Category List: Links to categorized content,"DESCRIPTION:
The Category List should display a list of categorized content links, with each link displaying the category name and a brief description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- CategoryList: (takes children): A container for a list of `CategoryLink` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><!-- category links will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Category List: Links to categorized content,"DESCRIPTION:
The UI should display a list of categories, with each category having a title and a link to the corresponding content.
COMPONENTS:
- CategoryLink: A standalone component representing a single category with a link.
- CategoryList: A component that takes children (multiple `CategoryLink` components) to display a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryLink:
<li class=""mb-2""><a href=""{categoryLink}"" class=""text-blue-600 hover:text-blue-900 transition duration-300"">{categoryName}</a></li>
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
Leaderboards and Rankings,"DESCRIPTION:
A simple leaderboard and ranking system that displays a table with usernames, rankings, and scores.
COMPONENTS:
- LeaderboardHeader: A standalone component that displays the header of the leaderboard table.
- RankingTable: A component that takes children and displays the entire leaderboard table.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><RankingTable><LeaderboardHeader/><!-- Leaderboard rows will be rendered here --></RankingTable></div>
COMPONENT HTML:
LeaderboardHeader:
<thead><tr><th class=""text-left"">Rank</th><th class=""text-left"">Username</th><th class=""text-right"">Score</th></tr></thead>
RankingTable:
<div class=""overflow-x-auto""><table class=""w-full"">{children} </table></div>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
Leaderboards and Rankings,"DESCRIPTION:
The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.
COMPONENTS:
- LeaderboardHeader: (standalone) - Displays the header of the leaderboard with column titles.
- RankingRow: (takes children) - Displays a single ranking row with player/team information and stats.
- PlayerInfo: (standalone) - Displays the player/team name and avatar.
- StatColumn: (standalone) - Displays a single stat column (e.g., points, wins, losses).
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><LeaderboardHeader/><table class=""w-full""><tbody><RankingRow><PlayerInfo/><StatColumn/><StatColumn/><StatColumn/></RankingRow><!-- Repeat RankingRow for each ranking --></tbody></table></div>
COMPONENT HTML:
LeaderboardHeader:
<thead class=""bg-gray-100""><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Player/Team</th><th class=""px-4 py-2"">Points</th><th class=""px-4 py-2"">Wins</th><th class=""px-4 py-2"">Losses</th></tr></thead>
RankingRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
PlayerInfo:
<td class=""px-4 py-2""><img src=""{avatar_url}"" alt=""{player_name}"" class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{player_name}</span></td>
StatColumn:
<td class=""px-4 py-2 text-center"">{stat_value}</td>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Button Groups,"DESCRIPTION:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
HTML:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
COMPONENT HTML:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Footer Newsletter Submit,"DESCRIPTION:
The UI should be a simple newsletter submit form in the footer of a website. It should have a text input for the email address and a submit button. The form should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterNewsletterSubmit: a standalone component that contains the newsletter submit form.
- NewsletterInput: a standalone component that is a text input for the email address.
- SubmitButton: a standalone component that is a submit button.
HTML:
<footer><FooterNewsletterSubmit/></footer>
COMPONENT HTML:
FooterNewsletterSubmit:
<div class=""bg-gray-200 p-4 md:p-6 lg:p-8""><h4 class=""text-lg md:text-xl lg:text-2xl"">{newsletter_title}</h4><NewsletterInput/><SubmitButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive and accessible way. The rank should be displayed as a title, and the badges should be displayed as a list of icons with tooltips.
COMPONENTS:
- UserRank: A standalone component that displays the user's rank as a title.
- BadgeList: A component that takes children, which are `Badge` components.
- Badge: A standalone component that displays a badge icon with a tooltip.
HTML:
<div class=""flex flex-col items-center md:flex-row md:items-start md:justify-center""><UserRank/><BadgeList><Badge/><Badge/><!-- Add more badges here --></BadgeList></div>
COMPONENT HTML:
UserRank:
<h2 class=""text-lg font-bold"">{user_rank}</h2>
BadgeList:
<ul class=""flex flex-wrap justify-center md:flex-row"">{children}</ul>
Badge:
<li class=""mr-2 mb-2 md:mr-4 md:mb-4""><img src={badge_icon} alt={badge_tooltip} class=""w-8 h-8 md:w-10 md:h-10""/><span class=""sr-only"">{badge_tooltip}</span></li>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a compact and visually appealing way. The design should be responsive, with the rank and badges arranged horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- RankBadge: A standalone component that displays a single badge and its associated rank.
- RankList: A component that takes children and displays a list of `RankBadge` components.
HTML:
<div class=""flex flex-wrap justify-center md:flex-nowrap""><RankList><RankBadge/><RankBadge/><RankBadge/></RankList></div>
COMPONENT HTML:
RankBadge:
<div class=""bg-gray-200 p-2 rounded-md""><img src={badgeImageUrl} alt={badgeAltText} class=""w-8 h-8""/><span class=""text-sm"">{rankName}</span></div>
RankList:
<ul class=""list-none m-0 p-0 flex flex-wrap justify-center md:flex-nowrap"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a compact and visually appealing way. The rank should be prominently displayed, and the badges should be shown as a series of icons or images below the rank.
COMPONENTS:
- UserRank: component (standalone): Displays the user's rank.
- BadgeList: component (takes children): Displays a list of badges.
HTML:
<div class=""flex flex-col items-center""><UserRank/><!-- Displays the user's rank --><BadgeList><!-- List of badges will be rendered here --></BadgeList></div>
COMPONENT HTML:
UserRank:
<div class=""text-2xl font-bold"">{rank_name}</div>
BadgeList:
<div class=""flex flex-wrap justify-center"">{children} <!-- List of Badge components will be rendered here --></div>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
User Ranks and Badges,"DESCRIPTION:
The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.
COMPONENTS:
- UserProfileRank: A standalone component that displays the user's rank.
- UserProfileBadge: A standalone component that displays a single badge.
- UserProfileBadges: A component that takes children, displaying a list of badges.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileRank/><UserProfileBadges><UserProfileBadge/><UserProfileBadge/><!-- Add more badges here --></UserProfileBadges></div>
COMPONENT HTML:
UserProfileRank:
<h2 class=""text-2xl font-bold"">{rank_name}</h2><p class=""text-lg text-gray-600"">{rank_description}</p>
UserProfileBadge:
<div class=""flex items-center mb-2""><img src={badge_image} alt={badge_name} class=""w-8 h-8 mr-2""/><span class=""text-lg"">{badge_name}</span></div>
UserProfileBadges:
<ul class=""list-none m-0 p-0"">{children}</ul>"
Breadcrumb Home Link,"DESCRIPTION:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
COMPONENTS:
- BreadcrumbHomeLink: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
Breadcrumb Home Link,"DESCRIPTION:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
COMPONENTS:
- BreadcrumbHomeLink: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
Breadcrumb Home Link,"DESCRIPTION:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
COMPONENTS:
- BreadcrumbHomeLink: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
Breadcrumb Home Link,"DESCRIPTION:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
COMPONENTS:
- BreadcrumbHomeLink: (standalone)
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
COMPONENT HTML:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
"Input field for entering tags or keywords, often with auto-suggestion functionality","DESCRIPTION:
The UI should be a text input field with a dropdown list of suggested tags or keywords below it. The input field should be responsive and adapt to different screen sizes. The dropdown list should be hidden by default and only appear when the user starts typing in the input field.
COMPONENTS:
- TagInput: A standalone component that includes the input field and dropdown list.
- DropdownList: A component that displays a list of suggested tags or keywords, takes children.
HTML:
<div class=""max-w-md mx-auto p-4""><TagInput/></div>
COMPONENT HTML:
TagInput:
<div class=""relative""><input type=""text"" class=""w-full pl-4 pr-10 text-sm"" placeholder=""Enter tags or keywords""/><DropdownList>{suggestedTags}</DropdownList></div>
DropdownList:
<ul class=""absolute bg-white shadow-md w-full rounded-b-md"">{children}</ul>"
Responsive Image Breakpoints,"DESCRIPTION:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
COMPONENTS:
- ResponsiveImage: (standalone component)
HTML:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
COMPONENT HTML:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Responsive Image Breakpoints,"DESCRIPTION:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
COMPONENTS:
- ResponsiveImage: (standalone component)
HTML:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
COMPONENT HTML:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Responsive Image Breakpoints,"DESCRIPTION:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
COMPONENTS:
- ResponsiveImage: (standalone component)
HTML:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
COMPONENT HTML:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Responsive Image Breakpoints,"DESCRIPTION:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
COMPONENTS:
- ResponsiveImage: (standalone component)
HTML:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
COMPONENT HTML:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Header: Site title and navigation links,"DESCRIPTION:
The UI should be a header section at the top of the webpage, featuring a site title on the left side and navigation links on the right side. The site title should be prominent and centered on mobile devices, while the navigation links should be stacked on top of each other on mobile devices and aligned horizontally on larger screens.
COMPONENTS:
- SiteTitle: (standalone): displays the title of the site
- NavLink: (standalone): displays a single navigation link
- NavLinks: (takes children): a container for multiple `NavLink` components
- Header: (takes children): the top-level component that contains the site title and navigation links
HTML:
<header><Header><SiteTitle/><NavLinks><NavLink/><NavLink/><!-- Add more NavLink components as needed --></NavLinks></Header></header>
COMPONENT HTML:
SiteTitle:
<h1 class=""text-3xl font-bold"">{site_title}</h1>
NavLink:
<a href=""{nav_link_url}"" class=""text-lg"">{nav_link_text}</a>
NavLinks:
<nav class=""flex flex-wrap justify-end md:flex-row"">{children}</nav>
Header:
<div class=""container mx-auto p-4 md:flex md:justify-between"">{children}</div>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Tweet input field for user input,"DESCRIPTION:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
COMPONENTS:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
HTML:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
COMPONENT HTML:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
Course Progress Bars,"DESCRIPTION:
The UI should display a progress bar indicating the completion percentage of a course, with a label showing the percentage complete. The progress bar should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ProgressBar: (standalone) - displays the progress bar with a percentage complete label
- CourseLabel: (standalone) - displays the course name and completion percentage
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- course information --><CourseLabel/><!-- progress bar --><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""w-full h-4 rounded bg-gray-200""><div class=""h-4 bg-blue-500 rounded"" style={{ width: `${progressPercentage}%` }}></div><p class=""text-lg"">{progressPercentage}% Complete</p></div>
CourseLabel:
<h2 class=""text-lg"">{courseName} - {completionPercentage}% Complete</h2>"
Project/Task Management Tools,"DESCRIPTION:
A responsive dashboard that displays a list of projects with their respective tasks. Each project should have a title, description, and a list of tasks. Tasks should have a title, description, and a completion status indicator.
COMPONENTS:
- ProjectCard: A standalone component that displays a single project.
- TaskList: A component that takes children (individual tasks) to display.
- TaskItem: A standalone component that displays a single task.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Project Dashboard</h1><ul class=""divide-y""><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components as needed --></ul></div>
COMPONENT HTML:
ProjectCard:
<div class=""p-4 mb-4 bg-white rounded shadow""><h2 class=""text-lg font-bold"">{project_title}</h2><p class=""text-gray-600"">{project_description}</p><TaskList><TaskItem/><TaskItem/><!-- Add more TaskItem components as needed --></TaskList></div>
TaskList:
<ul class=""pl-4"">{children}</ul>
TaskItem:
<li class=""py-2 border-b border-gray-200""><input type=""checkbox"" class=""mr-2"" {checked}/><span class=""text-gray-600"">{task_title}</span><p class=""text-gray-400"">{task_description}</p></li>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Visual representation of content loading progress,"DESCRIPTION:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
COMPONENTS:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
HTML:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
COMPONENT HTML:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style={{ width: `${progressPercentage}%` }}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a profile section for designers/studios, showcasing their information, projects, and skills. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- DesignerProfileHeader: A standalone component that displays the designer's/studio's name, profile picture, and tagline.
- ProjectCard: A standalone component that displays a project's information, including title, description, and image.
- SkillBadge: A standalone component that displays a skill with a title and icon.
- DesignerProfileSection: A component that takes children to display the designer's/studio's projects and skills.
HTML:
<section class=""max-w-md mx-auto p-4""><DesignerProfileHeader/><DesignerProfileSection><h2 class=""text-lg font-bold mb-4"">Projects</h2><ul class=""flex flex-wrap justify-center mb-4""><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ul><h2 class=""text-lg font-bold mb-4"">Skills</h2><ul class=""flex flex-wrap justify-center""><SkillBadge/><SkillBadge/><!-- Add more SkillBadge components here --></ul></DesignerProfileSection></section>
COMPONENT HTML:
DesignerProfileHeader:
<header class=""flex justify-center mb-4""><img src=""{profile_picture_url}"" alt=""{designer_name}"" class=""w-24 h-24 rounded-full""/><div class=""ml-4""><h1 class=""text-2xl font-bold"">{designer_name}</h1><p class=""text-sm"">{tagline}</p></div></header>
ProjectCard:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{project_image_url}"" alt=""{project_title}"" class=""w-full h-48 object-cover rounded""/><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-sm"">{project_description}</p></li>
SkillBadge:
<li class=""mr-4 mb-4""><span class=""bg-orange-100 text-orange-800 py-1 px-2 rounded"">{skill_title}</span><!-- Add icon here --><i class=""fas fa-{skill_icon}""></i></li>
DesignerProfileSection:
<!-- This component should render its children --><div class=""px-4"">{children}</div>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Designer/Studio Profiles,"DESCRIPTION:
The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- DesignerProfileCard: (standalone): A single designer/studio profile card.
- DesignerProfileList: (takes children): A container for a list of designer/studio profiles.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Designer Profiles</h1><DesignerProfileList><DesignerProfileCard/><DesignerProfileCard/><!-- Add more DesignerProfileCard components here --></DesignerProfileList></main>
COMPONENT HTML:
DesignerProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_picture_url} alt={name} class=""w-24 h-24 rounded-full mb-2""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-gray-600"">{specialty}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Portfolio</button></article>
DesignerProfileList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a post in a responsive format, with a title, content, and metadata (author and date). On smaller screens, the metadata should be displayed below the content, and on larger screens, it should be displayed to the side of the content.
COMPONENTS:
- Post: A standalone component that contains the title, content, and metadata of a post.
- PostMetadata: A standalone component that displays the author and date of a post.
- PostTitle: A standalone component that displays the title of a post.
- PostContent: A standalone component that displays the content of a post.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><Post/></div>
COMPONENT HTML:
Post:
<div class=""flex flex-wrap lg:flex-nowrap""><div class=""w-full lg:w-1/2 lg:pr-4""><PostTitle/></div><div class=""w-full lg:w-1/2 lg:pl-4""><PostContent/></div><div class=""w-full lg:w-1/2 lg:pl-4""><PostMetadata/></div></div>
PostMetadata:
<p class=""text-sm text-gray-600"">Posted by {author} on {date}</p>
PostTitle:
<h2 class=""text-2xl font-bold"">{post_title}</h2>
PostContent:
<p class=""text-lg"">{post_content}</p>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post formatting, with a profile picture, username, post text, and actions (like, comment, share). The post should adapt to different screen sizes, with the profile picture and username on the same line on larger screens, and stacked on smaller screens.
COMPONENTS:
- UserProfilePicture: Standalone component, displays the profile picture of the user who made the post.
- UserName: Standalone component, displays the username of the user who made the post.
- PostText: Standalone component, displays the text of the post.
- PostActions: Standalone component, displays the actions for the post (like, comment, share).
HTML:
<div class=""flex flex-wrap md:flex-nowrap md:justify-start mb-4""><UserProfilePicture/><div class=""md:ml-4""><UserName/><PostText/><PostActions/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full""/>
UserName:
<span class=""text-lg"">{username}</span>
PostText:
<p class=""text-gray-600"">{post_text}</p>
PostActions:
<div class=""flex justify-evenly mt-2""><button class=""text-gray-600"">{like_count} likes</button><button class=""text-gray-600"">{comment_count} comments</button><button class=""text-gray-600"">Share</button></div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
COMPONENT HTML:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Responsive Post Formatting,"DESCRIPTION:
The UI should display a responsive post formatting with a header, image, content, and footer sections. The post format should be mobile-first and adaptable to different screen sizes.
COMPONENTS:
- PostHeader: A standalone component that displays the post header.
- PostImage: A standalone component that displays the post image.
- PostContent: A component that displays the post content and takes children.
- PostFooter: A standalone component that displays the post footer.
HTML:
<article class=""mb-4 bg-white rounded shadow-md overflow-hidden""><PostHeader/><PostImage/><PostContent><!-- post content will be rendered here --></PostContent><PostFooter/></article>
COMPONENT HTML:
PostHeader:
<header class=""p-4 border-b border-gray-200""><h2 class=""text-lg font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_by} on {posted_date}</p></header>
PostImage:
<img src=""{image_url}"" class=""w-full h-48 object-cover"" alt=""{image_alt_text}"">
PostContent:
<div class=""p-4"">{children}</div>
PostFooter:
<footer class=""p-4 border-t border-gray-200""><p class=""text-sm text-gray-600"">{footer_text}</p></footer>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video analytics dashboard for creators,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
COMPONENTS:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
HTML:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
COMPONENT HTML:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Video Players/Embeds,"DESCRIPTION:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
COMPONENTS:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
HTML:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
Video Players/Embeds,"DESCRIPTION:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
COMPONENTS:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
HTML:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
Video Players/Embeds,"DESCRIPTION:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
COMPONENTS:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
HTML:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
Video Players/Embeds,"DESCRIPTION:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
COMPONENTS:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
HTML:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","DESCRIPTION:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
COMPONENTS:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
HTML:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
COMPONENT HTML:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
Year/Month Picker Calendars,"DESCRIPTION:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
COMPONENTS:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
HTML:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
COMPONENT HTML:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
Year/Month Picker Calendars,"DESCRIPTION:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
COMPONENTS:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
HTML:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
COMPONENT HTML:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
Year/Month Picker Calendars,"DESCRIPTION:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
COMPONENTS:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
HTML:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
COMPONENT HTML:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
Year/Month Picker Calendars,"DESCRIPTION:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
COMPONENTS:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
HTML:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
COMPONENT HTML:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
Footer Copyright Text,"DESCRIPTION:
The UI should be a simple footer with a copyright text, displayed at the bottom of the page. The text should be centered and have a smaller font size.
COMPONENTS:
- FooterCopyright: standalone component
HTML:
<footer><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-center text-sm text-gray-500"">&copy; {current_year} {copyright_holder}. All rights reserved.</p>"
Footer Copyright Text,"DESCRIPTION:
The UI should be a simple footer with a copyright text, displayed at the bottom of the page. The text should be centered and have a smaller font size.
COMPONENTS:
- FooterCopyright: standalone component
HTML:
<footer><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-center text-sm text-gray-500"">&copy; {current_year} {copyright_holder}. All rights reserved.</p>"
Footer Copyright Text,"DESCRIPTION:
The UI should be a simple footer with a copyright text, displayed at the bottom of the page. The text should be centered and have a smaller font size.
COMPONENTS:
- FooterCopyright: standalone component
HTML:
<footer><FooterCopyright/></footer>
COMPONENT HTML:
FooterCopyright:
<p class=""text-center text-sm text-gray-500"">&copy; {current_year} {copyright_holder}. All rights reserved.</p>"
Team or colleagues section with photos and bios,"DESCRIPTION:
The UI should display a team or colleagues section with a grid of members, each displaying a photo, name, and bio. The grid should be responsive and adapt to different screen sizes. On mobile devices, the grid should display one member per row, and on larger devices, it should display multiple members per row.
COMPONENTS:
- TeamMemberCard: A standalone component that displays a single team member's photo, name, and bio.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Our Team</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/><!-- Add more TeamMemberCard components as needed --></div></section>
COMPONENT HTML:
TeamMemberCard:
<div class=""bg-white p-4 rounded shadow-md""><img src={photo_url} alt={name} class=""w-32 h-32 rounded-full mb-4""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>"
Team or colleagues section with photos and bios,"DESCRIPTION:
The UI should display a team or colleagues section with a grid of members, each displaying a photo, name, and bio. The grid should be responsive and adapt to different screen sizes. On mobile devices, the grid should display one member per row, and on larger devices, it should display multiple members per row.
COMPONENTS:
- TeamMemberCard: A standalone component that displays a single team member's photo, name, and bio.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Our Team</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/><!-- Add more TeamMemberCard components as needed --></div></section>
COMPONENT HTML:
TeamMemberCard:
<div class=""bg-white p-4 rounded shadow-md""><img src={photo_url} alt={name} class=""w-32 h-32 rounded-full mb-4""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>"
Team or colleagues section with photos and bios,"DESCRIPTION:
The UI should display a section showcasing team members or colleagues with their photos and bios in a grid layout. The section should be responsive, with the grid adapting to different screen sizes. On mobile, the grid should display one column, and on larger screens, it should display multiple columns.
COMPONENTS:
- TeamMemberCard: (standalone) - displays a single team member's photo and bio.
- TeamSection: (takes children) - wraps the team members in a container with a header.
HTML:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-3xl font-bold mb-4"">Our Team</h2><TeamSection><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/><!-- add more TeamMemberCard components as needed --></TeamSection></section>
COMPONENT HTML:
TeamMemberCard:
<div class=""flex flex-col items-center mb-8 md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src={profile_photo_url} alt=""{name}"" class=""w-24 h-24 rounded-full mb-4""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>
TeamSection:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should display a summary of the order, including the subtotal, in a clean and simple format.
COMPONENTS:
- OrderSummary: standalone component that displays the order summary.
- SubtotalDisplay: standalone component that displays the subtotal.
HTML:
<div class=""p-4 bg-white rounded shadow-md""><OrderSummary/><SubtotalDisplay/></div>
COMPONENT HTML:
OrderSummary:
<p class=""text-lg font-bold"">Order Summary:</p><ul><li class=""py-2"">Items: {item_count}</li><li class=""py-2"">Total weight: {total_weight} kg</li><li class=""py-2"">Shipping: {shipping_method}</li></ul>
SubtotalDisplay:
<p class=""text-lg font-bold"">Subtotal: <span class=""text-orange-600"">{subtotal_amount}</span></p>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.
COMPONENTS:
- OrderSummary: standalone, displays the order summary
- OrderSubtotal: standalone, displays the subtotal
HTML:
<div class=""flex flex-wrap justify-between mb-4""><OrderSummary/><OrderSubtotal/></div>
COMPONENT HTML:
OrderSummary:
<div class=""text-lg"">{order_summary_text}</div>
OrderSubtotal:
<div class=""text-lg font-bold"">Subtotal: {subtotal_amount}</div>"
Order summary and subtotal display,"DESCRIPTION:
The UI should display an order summary with a subtotal, taxes, and a total. The design should be responsive, with a mobile-first approach, and follow accessibility guidelines.
COMPONENTS:
- OrderSummaryComponent: (standalone) - displays the order summary
- SubtotalComponent: (standalone) - displays the subtotal
- TaxComponent: (standalone) - displays the tax
- TotalComponent: (standalone) - displays the total
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-2"">Order Summary</h2><OrderSummaryComponent/><div class=""flex justify-between mb-2""><SubtotalComponent/><TaxComponent/></div><TotalComponent/></section>
COMPONENT HTML:
OrderSummaryComponent:
<ul class=""list-none mb-4""><li class=""flex justify-between mb-2"">{item_name} x {item_quantity}</li><!-- repeat for each item in the order --></ul>
SubtotalComponent:
<p>Subtotal: <span class=""font-bold"">{subtotal_amount}</span></p>
TaxComponent:
<p>Tax ({tax_percentage}%): <span class=""font-bold"">{tax_amount}</span></p>
TotalComponent:
<p class=""text-lg font-bold"">Total: <span class=""text-lg font-bold"">{total_amount}</span></p>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Hero Overlay Opacity,"DESCRIPTION:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
COMPONENTS:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
HTML:
<section class=""h-screen w-full""><HeroSection/></section>
COMPONENT HTML:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
Price and Discount Badges,"DESCRIPTION:
The UI should display a price badge with an optional discount badge next to it. The price badge should show the original price, and the discount badge should show the discount percentage and the new price.
COMPONENTS:
- PriceBadge: A standalone component that displays the original price.
- DiscountBadge: A standalone component that displays the discount percentage and the new price.
HTML:
<div class=""flex items-center""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 px-2 py-1 text-sm rounded"">{original_price}</span>
DiscountBadge:
<span class=""bg-orange-200 px-2 py-1 text-sm rounded"">{discount_percentage}% OFF <span class=""text-gray-600"">{new_price}</span></span>"
Price and Discount Badges,"DESCRIPTION:
The UI should display two badges, one for price and one for discount, with different background colors and text colors. The price badge should have a light blue background and white text, and the discount badge should have a green background and white text.
COMPONENTS:
- PriceBadge: Standalone component, displays the price of an item.
- DiscountBadge: Standalone component, displays the discount of an item.
HTML:
<div class=""flex gap-2""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 text-white rounded py-1 px-2"">{price}</span>
DiscountBadge:
<span class=""bg-green-400 text-white rounded py-1 px-2"">{discount}% off</span>"
Price and Discount Badges,"DESCRIPTION:
The UI should display two types of badges: a price badge and a discount badge. The price badge shows the original price, and the discount badge shows the discount percentage. The badges should be responsive, mobile-first, and accessible.
COMPONENTS:
- PriceBadge: a standalone component that displays the original price.
- DiscountBadge: a standalone component that displays the discount percentage.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PriceBadge/><DiscountBadge/></div>
COMPONENT HTML:
PriceBadge:
<span class=""bg-gray-200 px-2 py-1 rounded-full text-sm""><p>{original_price}</p></span>
DiscountBadge:
<span class=""bg-orange-200 px-2 py-1 rounded-full text-sm""><p>{discount_percentage}% Off</p></span>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Callout Box Border Radius,"DESCRIPTION:
A callout box with a border radius, typically used to highlight important information or provide additional context.
COMPONENTS:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
HTML:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
COMPONENTS:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
COMPONENT HTML:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Shipping and delivery options,"DESCRIPTION:
The UI should display a list of shipping and delivery options with their respective details, such as names, prices, and estimated delivery times. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.
COMPONENTS:
- ShippingOptionList: a component that takes children, which is a list of `ShippingOptionCard` components.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionList><!-- shipping options will be rendered here --></ShippingOptionList></div>
COMPONENT HTML:
ShippingOptionList:
<ul class=""list-none mb-0"">{children}</ul>"
Customizable Themes: Brand your interface,"DESCRIPTION:
A menu with a list of theme options, where each option displays a preview of the theme and allows the user to select it.
COMPONENTS:
- ThemeOption: (standalone): a single theme option with a preview and a checkbox to select it
- ThemeSelector: (takes children): a container for a list of theme options
HTML:
<div class=""w-full p-4 bg-gray-100 rounded""><h2 class=""text-lg font-bold mb-2"">Customizable Themes</h2><ThemeSelector><ThemeOption/><ThemeOption/><ThemeOption/><!-- more theme options here --></ThemeSelector></div>
COMPONENT HTML:
ThemeOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" class=""mr-2""/><div class=""w-12 h-6 bg-{theme_color} mr-2""/><span class=""text-sm"">{theme_name}</span></div>
ThemeSelector:
<ul class=""list-none mb-0"">{children}</ul>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display a form input field with an error message or success message below it, indicating the validation status of the input.
COMPONENTS:
- FormInput: A standalone component that represents a single form input field.
- ValidationFeedback: A component that takes children and displays the validation message (error or success).
HTML:
<div class=""flex flex-col gap-2""><FormInput/><ValidationFeedback><p>{validation_message}</p></ValidationFeedback></div>
COMPONENT HTML:
FormInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder={input_placeholder}/>
ValidationFeedback:
<div class={`text-xs ${validation_status === 'error' ? 'text-red-500' : 'text-green-500'}`}>{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Form Validation Feedback,"DESCRIPTION:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
COMPONENTS:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
COMPONENT HTML:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Webcam/Camera Interfaces,"DESCRIPTION:
The UI should display a webcam/video camera interface with a live feed, a capture button, and a toggle switch to switch between the front and rear cameras.
COMPONENTS:
- WebcamFeed: (standalone) - displays the live webcam feed
- CaptureButton: (standalone) - a button to capture a photo/video
- CameraToggle: (standalone) - a toggle switch to switch between the front and rear cameras
HTML:
<div class=""flex flex-col items-center h-screen""><WebcamFeed/><div class=""flex justify-center mb-4""><CaptureButton/><CameraToggle/></div></div>
COMPONENT HTML:
WebcamFeed:
<div class=""w-full h-full""><video class=""w-full h-full object-cover"" id=""video""></video></div>
CaptureButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Capture</button>
CameraToggle:
<label class=""switch""><input type=""checkbox""/><span class=""slider round""></span>Front/Rear</label>"
Email list view with sender and subject,"DESCRIPTION:
A list of emails with sender and subject information.
COMPONENTS:
- EmailListItem: (stands alone)
- EmailList: (takes children)
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Emails</h2><EmailList><EmailListItem/><EmailListItem/><!-- more EmailListItem components here --></EmailList></div>
COMPONENT HTML:
EmailListItem:
<div class=""flex items-center justify-between p-2 border-b border-gray-200""><div><span class=""text-sm"">{sender}</span><span class=""text-xs text-gray-500"">{timestamp}</span></div><div><span class=""text-lg"">{subject}</span></div></div>
EmailList:
<ul class=""list-none mb-4"">{children}</ul>"
Email list view with sender and subject,"DESCRIPTION:
The UI should display a list of emails, with each email showing the sender's name and the subject of the email. The list should be responsive, with each email item taking up the full width of the screen on mobile devices and becoming a compact list item on larger screens.
COMPONENTS:
- EmailListItem: (standalone): A single email item in the list, displaying the sender and subject.
- EmailList: (takes children): A container for the list of email items.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-2xl font-bold mb-4"">Emails</h1><EmailList><EmailListItem/><EmailListItem/><!-- add more EmailListItem components here --></EmailList></div>
COMPONENT HTML:
EmailListItem:
<div class=""flex justify-between mb-4 p-4 bg-white shadow-md rounded""><div><p class=""text-lg font-bold"">{senderName}</p><p class=""text-gray-600"">{subject}</p></div><div class=""text-right""><p class=""text-gray-600"">{receivedAt}</p></div></div>
EmailList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Callout Box Title,"DESCRIPTION:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- CalloutBoxTitle: A standalone component that displays a title.
HTML:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
COMPONENT HTML:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Featured Image Zoom Level,"DESCRIPTION:
The UI should display a featured image with a zoom level indicator, allowing users to zoom in or out of the image. The image should be responsive, adapting to different screen sizes and devices. The zoom level indicator should be visually appealing and easy to use.
COMPONENTS:
- FeaturedImage: a standalone component that displays the featured image.
- ZoomLevelIndicator: a standalone component that displays the zoom level indicator.
- ZoomControl: a component that takes children (e.g., zoom in and zoom out buttons).
HTML:
<div class=""flex justify-center""><FeaturedImage/><ZoomControl><button>+</button><button>-</button></ZoomControl><ZoomLevelIndicator/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>
ZoomLevelIndicator:
<p>Zoom: {zoom_level}%</p>
ZoomControl:
<div class=""flex justify-center"">{children}</div>"
Featured Image Zoom Level,"DESCRIPTION:
The UI should display a featured image with a zoom level indicator, allowing users to zoom in or out of the image. The image should be responsive, adapting to different screen sizes and devices. The zoom level indicator should be visually appealing and easy to use.
COMPONENTS:
- FeaturedImage: a standalone component that displays the featured image.
- ZoomLevelIndicator: a standalone component that displays the zoom level indicator.
- ZoomControl: a component that takes children (e.g., zoom in and zoom out buttons).
HTML:
<div class=""flex justify-center""><FeaturedImage/><ZoomControl><button>+</button><button>-</button></ZoomControl><ZoomLevelIndicator/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>
ZoomLevelIndicator:
<p>Zoom: {zoom_level}%</p>
ZoomControl:
<div class=""flex justify-center"">{children}</div>"
Featured Image Zoom Level,"DESCRIPTION:
The UI should display a featured image with a zoom level indicator, allowing users to zoom in or out of the image. The image should be responsive, adapting to different screen sizes and devices. The zoom level indicator should be visually appealing and easy to use.
COMPONENTS:
- FeaturedImage: a standalone component that displays the featured image.
- ZoomLevelIndicator: a standalone component that displays the zoom level indicator.
- ZoomControl: a component that takes children (e.g., zoom in and zoom out buttons).
HTML:
<div class=""flex justify-center""><FeaturedImage/><ZoomControl><button>+</button><button>-</button></ZoomControl><ZoomLevelIndicator/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>
ZoomLevelIndicator:
<p>Zoom: {zoom_level}%</p>
ZoomControl:
<div class=""flex justify-center"">{children}</div>"
User Profile and Reputation System,"DESCRIPTION:
The UI should display a user's profile information, including their username, profile picture, reputation score, and badges. The reputation score should be prominently displayed, and the badges should be displayed in a grid or list.
COMPONENTS:
- UserProfileHeader: Standalone component that displays the user's profile picture and username.
- ReputationScore: Standalone component that displays the user's reputation score.
- BadgeGrid: Component that takes children, which are `Badge` components.
- Badge: Standalone component that displays a single badge.
HTML:
<div class=""flex justify-center""><UserProfileHeader/><div class=""ml-4""><ReputationScore/><BadgeGrid><Badge/><Badge/><!-- More badges here --></BadgeGrid></div></div>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><img src=""{profile_picture_url}"" alt=""Profile Picture"" class=""w-12 h-12 rounded-full""/><h2 class=""ml-2 text-lg"">{username}</h2></div>
ReputationScore:
<h3 class=""text-lg font-bold"">{reputation_score} Reputation</h3>
BadgeGrid:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
Badge:
<li class=""mr-2 mb-2""><img src=""{badge_image_url}"" alt=""Badge"" class=""w-8 h-8""/><span class=""text-sm"">{badge_name}</span></li>"
Hero section with background image and tagline,"DESCRIPTION:
The UI should be a hero section with a background image and a tagline. The background image should cover the full width and height of the section, and the tagline should be centered vertically and horizontally on top of the image.
COMPONENTS:
- HeroBackground: A standalone component that represents the background image of the hero section.
- HeroTagline: A component that represents the tagline of the hero section. It takes children (the tagline text).
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""absolute inset-0 flex items-center justify-center""><HeroTagline><p>{tagline_text}</p></HeroTagline></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={{ backgroundImage: `url(${background_image_url})` }}></div>
HeroTagline:
<div class=""text-2xl font-bold text-white"">{children}</div>"
"User profile with karma, post history, and info","DESCRIPTION:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
"User profile with karma, post history, and info","DESCRIPTION:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
"User profile with karma, post history, and info","DESCRIPTION:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
"User profile with karma, post history, and info","DESCRIPTION:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Testimonial Quote Font,"DESCRIPTION:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
COMPONENTS:
- QuoteText: A standalone component that displays the quote text.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
COMPONENT HTML:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominently styled Call-to-Action (CTA) button that stands out on the page, with clear and concise text encouraging the user to take action.
COMPONENTS:
- PrimaryCtaButton: A standalone component representing a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><PrimaryCtaButton/></div>
COMPONENT HTML:
PrimaryCtaButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">{cta_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Call-to-Action Buttons (CTAs),"DESCRIPTION:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
COMPONENTS:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
HTML:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
COMPONENT HTML:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Upload file input field with file type and size limits,"DESCRIPTION:
A file upload input field with a label, allowing users to select a file to upload, with file type and size limits.
COMPONENTS:
- FileUploadInput: standalone component
- FileInputLabel: standalone component
- FileSizeLimit: standalone component
- FileTypeLimit: standalone component
HTML:
<div class=""flex flex-col""><FileInputLabel/><FileUploadInput/><FileSizeLimit/><FileTypeLimit/></div>
COMPONENT HTML:
FileUploadInput:
<input type=""file"" id=""file-upload"" class=""block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold"" accept=""{accepted_file_types}"" max-size=""{max_file_size}""/>
FileInputLabel:
<label for=""file-upload"" class=""text-sm mb-2 block"">Select a file to upload:</label>
FileSizeLimit:
<p class=""text-xs text-gray-500"">Max file size: {max_file_size} MB</p>
FileTypeLimit:
<p class=""text-xs text-gray-500"">Accepted file types: {accepted_file_types}</p>"
Upload file input field with file type and size limits,"DESCRIPTION:
The UI should have a file input field that allows users to upload a file. The input field should have a label indicating the accepted file types and a maximum file size.
COMPONENTS:
- FileInput: (standalone) - The file input field
- Label: (takes children) - The label for the file input field
- Description: (takes children) - The description of the file input field
HTML:
<div class=""flex flex-col gap-2""><Label>Upload File ({acceptedFileTypes})</Label><FileInput/><Description>Max file size: {maxFileSize}MB</Description></div>
COMPONENT HTML:
FileInput:
<input type=""file"" class=""block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"" accept={acceptedFileTypes} maxLength={maxFileSize * 1024 * 1024}/>
Label:
<label class=""block mb-2 text-sm font-medium text-gray-700"">{children}</label>
Description:
<p class=""text-sm text-gray-500"">{children}</p>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that when clicked, prompts the user to confirm they want to log out. If confirmed, the logout action is performed.
COMPONENTS:
- LogoutButton: standalone, displays a button with a logout icon and text.
- ConfirmLogout: takes children, displays a confirmation prompt to the user with an OK and Cancel button.
HTML:
<div class=""flex justify-center mt-4""><LogoutButton/></div><!-- Confirmation prompt will be inserted here --><div id=""confirm-logout"" class=""hidden""><ConfirmLogout><p>Are you sure you want to log out?</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">OK</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ml-2"">Cancel</button></div></ConfirmLogout></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-sign-out-alt mr-2""/>Log Out</button>
ConfirmLogout:
<div class=""bg-white p-4 rounded shadow-md"">{children}</div>"
Logout button with confirmation prompt,"DESCRIPTION:
A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.
COMPONENTS:
- LogoutButton: (standalone): A button that triggers the confirmation prompt.
- ConfirmationPrompt: (takes children): A modal dialog with a warning tone that confirms the user's intention to log out.
HTML:
<div class=""flex justify-center mb-4""><LogoutButton/><!-- confirmation prompt will be inserted here --><ConfirmationPrompt><p>Are you sure you want to log out?</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Confirm Logout</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Cancel</button></ConfirmationPrompt></div>
COMPONENT HTML:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Log out</button>
ConfirmationPrompt:
<div class=""fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75""><div class=""bg-white rounded shadow-md p-4 max-w-sm"">{children} </div></div>"
Grid layout displaying smaller versions of images or content,"DESCRIPTION:
The UI should display a grid layout of smaller versions of images or content, with a responsive design that adapts to different screen sizes. Each grid item should have a consistent size and spacing between them.
COMPONENTS:
- GridGallery: (standalone): The main component that wraps the grid items.
- GridItem: (takes children): A single item in the grid, containing the smaller version of an image or content.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><GridGallery/></div>
COMPONENT HTML:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{/* Grid items will be inserted here */ }</div>
GridItem:
<div class=""w-full h-48 md:h-64 lg:h-80 overflow-hidden rounded"">{children} <!-- Image or content will be inserted here --></div>"
Grid layout displaying smaller versions of images or content,"DESCRIPTION:
The UI should display a grid layout of smaller versions of images or content, with a responsive design that adapts to different screen sizes. Each grid item should have a consistent size and spacing between them.
COMPONENTS:
- GridGallery: (standalone): The main component that wraps the grid items.
- GridItem: (takes children): A single item in the grid, containing the smaller version of an image or content.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><GridGallery/></div>
COMPONENT HTML:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{/* Grid items will be inserted here */ }</div>
GridItem:
<div class=""w-full h-48 md:h-64 lg:h-80 overflow-hidden rounded"">{children} <!-- Image or content will be inserted here --></div>"
Grid layout displaying smaller versions of images or content,"DESCRIPTION:
The UI should display a grid layout of smaller versions of images or content, with a responsive design that adapts to different screen sizes. Each grid item should have a consistent size and spacing between them.
COMPONENTS:
- GridGallery: (standalone): The main component that wraps the grid items.
- GridItem: (takes children): A single item in the grid, containing the smaller version of an image or content.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><GridGallery/></div>
COMPONENT HTML:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{/* Grid items will be inserted here */ }</div>
GridItem:
<div class=""w-full h-48 md:h-64 lg:h-80 overflow-hidden rounded"">{children} <!-- Image or content will be inserted here --></div>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly video poster that displays a featured video with a play button and video title.
COMPONENTS:
- FeaturedVideoPoster: standalone (main component)
- VideoPlayButton: standalone (play button)
- VideoTitle: standalone (video title)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><img src=""{video_thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover rounded-md""/><VideoPlayButton/><VideoTitle/></div>
VideoPlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-3xl bg-white rounded-full p-2""><i class=""fas fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play video</span></button>
VideoTitle:
<h2 class=""text-lg font-bold mb-2"">{video_title}</h2>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly video poster that displays a featured video with a play button and video title.
COMPONENTS:
- FeaturedVideoPoster: standalone (main component)
- VideoPlayButton: standalone (play button)
- VideoTitle: standalone (video title)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><img src=""{video_thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover rounded-md""/><VideoPlayButton/><VideoTitle/></div>
VideoPlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-3xl bg-white rounded-full p-2""><i class=""fas fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play video</span></button>
VideoTitle:
<h2 class=""text-lg font-bold mb-2"">{video_title}</h2>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly video poster that displays a featured video with a play button and video title.
COMPONENTS:
- FeaturedVideoPoster: standalone (main component)
- VideoPlayButton: standalone (play button)
- VideoTitle: standalone (video title)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded-md shadow-md""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><img src=""{video_thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover rounded-md""/><VideoPlayButton/><VideoTitle/></div>
VideoPlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-3xl bg-white rounded-full p-2""><i class=""fas fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play video</span></button>
VideoTitle:
<h2 class=""text-lg font-bold mb-2"">{video_title}</h2>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Featured Video Poster,"DESCRIPTION:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
COMPONENTS:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
HTML:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
COMPONENT HTML:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Testimonial Author Name,"DESCRIPTION:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
COMPONENTS:
- TestimonialAuthorName: (standalone)
HTML:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
COMPONENT HTML:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.
COMPONENTS:
- AnimatedBox: (standalone) : A box that animates when the user scrolls to a certain point on the page.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- scrollable content --><p>{scrollable_content}</p><!-- animated box --><AnimatedBox/><!-- more scrollable content --><p>{more_scrollable_content}</p></div>
COMPONENT HTML:
AnimatedBox:
<div class=""hidden opacity-0 transition-all duration-500"" data-animate-trigger=""scroll"" data-animate-class=""block opacity-100""><!-- animated content --><p>{animated_content}</p></div>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.
COMPONENTS:
- AnimatedBox: (standalone) : A box that animates when the user scrolls to a certain point on the page.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- scrollable content --><p>{scrollable_content}</p><!-- animated box --><AnimatedBox/><!-- more scrollable content --><p>{more_scrollable_content}</p></div>
COMPONENT HTML:
AnimatedBox:
<div class=""hidden opacity-0 transition-all duration-500"" data-animate-trigger=""scroll"" data-animate-class=""block opacity-100""><!-- animated content --><p>{animated_content}</p></div>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a scroll-activated animation effect. Initially, the animation is hidden, and as the user scrolls down, the animation is triggered and becomes visible. The animation can be a fade-in, slide-in, or any other creative effect.
COMPONENTS:
- AnimatedSection: standalone component that wraps the animation effect.
- AnimationTrigger: standalone component that triggers the animation when scrolled into view.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- content before the animation --><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p><AnimatedSection/><!-- content after the animation --><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p></div>
COMPONENT HTML:
AnimatedSection:
<section class=""w-full h-64 bg-orange-200 animate-fadeIn""><!-- animation content --><h2>{animated_title}</h2><p>{animated_text}</p></section>
AnimationTrigger:
<div class=""absolute top-0 left-0 w-full h-1 bg-transparent""><!-- empty element to trigger the animation --></div>"
Scroll-Activated Animation Effect,"DESCRIPTION:
The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.
COMPONENTS:
- AnimatedBox: (standalone) : A box that animates when the user scrolls to a certain point on the page.
HTML:
<div class=""h-screen overflow-y-scroll""><!-- scrollable content --><p>{scrollable_content}</p><!-- animated box --><AnimatedBox/><!-- more scrollable content --><p>{more_scrollable_content}</p></div>
COMPONENT HTML:
AnimatedBox:
<div class=""hidden opacity-0 transition-all duration-500"" data-animate-trigger=""scroll"" data-animate-class=""block opacity-100""><!-- animated content --><p>{animated_content}</p></div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.
COMPONENTS:
- EmailFilterOption: (standalone) - A single filter option with a checkbox and label.
- EmailSortOption: (standalone) - A single sort option with a radio button and label.
- FilterPanel: (takes children) - The main filter panel that contains all the filter options.
- SortPanel: (takes children) - The main sort panel that contains all the sort options.
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><FilterPanel><EmailFilterOption/><EmailFilterOption/><EmailFilterOption/></FilterPanel><SortPanel><EmailSortOption/><EmailSortOption/><EmailSortOption/></SortPanel></div>
COMPONENT HTML:
EmailFilterOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterId}"" class=""mr-2""><label for=""{filterId}"" class=""text-sm"">{filterLabel}</label></div>
EmailSortOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{sortId}"" class=""mr-2""><label for=""{sortId}"" class=""text-sm"">{sortLabel}</label></div>
FilterPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Filters</h5>{children}</div>
SortPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Sort by</h5>{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.
COMPONENTS:
- EmailFilterOption: (standalone) - A single filter option with a checkbox and label.
- EmailSortOption: (standalone) - A single sort option with a radio button and label.
- FilterPanel: (takes children) - The main filter panel that contains all the filter options.
- SortPanel: (takes children) - The main sort panel that contains all the sort options.
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><FilterPanel><EmailFilterOption/><EmailFilterOption/><EmailFilterOption/></FilterPanel><SortPanel><EmailSortOption/><EmailSortOption/><EmailSortOption/></SortPanel></div>
COMPONENT HTML:
EmailFilterOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterId}"" class=""mr-2""><label for=""{filterId}"" class=""text-sm"">{filterLabel}</label></div>
EmailSortOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{sortId}"" class=""mr-2""><label for=""{sortId}"" class=""text-sm"">{sortLabel}</label></div>
FilterPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Filters</h5>{children}</div>
SortPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Sort by</h5>{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.
COMPONENTS:
- EmailFilterOption: (standalone) - A single filter option with a checkbox and label.
- EmailSortOption: (standalone) - A single sort option with a radio button and label.
- FilterPanel: (takes children) - The main filter panel that contains all the filter options.
- SortPanel: (takes children) - The main sort panel that contains all the sort options.
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><FilterPanel><EmailFilterOption/><EmailFilterOption/><EmailFilterOption/></FilterPanel><SortPanel><EmailSortOption/><EmailSortOption/><EmailSortOption/></SortPanel></div>
COMPONENT HTML:
EmailFilterOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterId}"" class=""mr-2""><label for=""{filterId}"" class=""text-sm"">{filterLabel}</label></div>
EmailSortOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{sortId}"" class=""mr-2""><label for=""{sortId}"" class=""text-sm"">{sortLabel}</label></div>
FilterPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Filters</h5>{children}</div>
SortPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Sort by</h5>{children}</div>"
Email filtering and sorting options,"DESCRIPTION:
The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. ""Unread"", ""Starred"", etc.), a dropdown for selecting sorting methods (e.g. ""Oldest"", ""Newest"", etc.), and a button to apply the selected filters and sorting.
COMPONENTS:
- FilterDropdown: (standalone): a dropdown component for selecting filters
- SortDropdown: (standalone): a dropdown component for selecting sorting methods
- ApplyButton: (standalone): a button to apply the selected filters and sorting
- FilterSortBar: (takes children): a container component to hold the filtering and sorting options
HTML:
<div class=""flex justify-between p-4""><FilterSortBar><FilterDropdown/><SortDropdown/><ApplyButton/></FilterSortBar></div>
COMPONENT HTML:
FilterDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a filter</option><option value=""unread"">Unread</option><option value=""starred"">Starred</option><!-- more options --></select></div>
SortDropdown:
<div class=""relative inline-block""><select class=""w-full p-2 pl-10 text-sm""><option value="""">Select a sort method</option><option value=""oldest"">Oldest</option><option value=""newest"">Newest</option><!-- more options --></select></div>
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>
FilterSortBar:
<div class=""flex justify-between items-center"">{children}</div>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a blog post category name in a clean and simple format, with a responsive design that adapts to different screen sizes. The text should be easy to read and accessible on various devices.
COMPONENTS:
- BlogPostCategoryName: a standalone component that displays the category name.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-lg md:text-xl lg:text-2xl font-bold mb-2""><BlogPostCategoryName/></h2></div>
COMPONENT HTML:
BlogPostCategoryName:
<span class=""uppercase"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a blog post category name in a clean and simple format, with a responsive design that adapts to different screen sizes. The text should be easy to read and accessible on various devices.
COMPONENTS:
- BlogPostCategoryName: a standalone component that displays the category name.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-lg md:text-xl lg:text-2xl font-bold mb-2""><BlogPostCategoryName/></h2></div>
COMPONENT HTML:
BlogPostCategoryName:
<span class=""uppercase"">{category_name}</span>"
Blog Post Category Name,"DESCRIPTION:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- CategoryName: a standalone component that displays the category name of a blog post.
HTML:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
COMPONENT HTML:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Featured Product Image,"DESCRIPTION:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
COMPONENTS:
- FeaturedProductImage: standalone
HTML:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
COMPONENT HTML:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Input area where users can enter text or data,"DESCRIPTION:
A simple text input field with a placeholder and a submit button.
COMPONENTS:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
HTML:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
COMPONENT HTML:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Message input field with send button and emoji picker,"DESCRIPTION:
A message input field with a send button on the right side, and an emoji picker button on the left side of the input field.
COMPONENTS:
- EmojiPickerButton: standalone component that renders an emoji picker
- SendButton: standalone component that renders a send button
- MessageInputField: component that takes children
HTML:
<div class=""flex items-center bg-white py-2 px-4 rounded-lg""><EmojiPickerButton/><MessageInputField><input type=""text"" class=""px-2 py-1 w-full""/><SendButton/></MessageInputField></div>
COMPONENT HTML:
EmojiPickerButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">😊</button>
SendButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{sendButtonText}</button>
MessageInputField:
<div class=""flex items-center"">{children}</div>"
Message input field with send button and emoji picker,"DESCRIPTION:
The UI should be a message input field with a send button and an emoji picker. The input field should be responsive and mobile-friendly. The send button should be enabled only when the input field has some text. The emoji picker should be a dropdown list that appears when the user clicks on the emoji icon. The UI should be accessible, with clear labels and high contrast colors.
COMPONENTS:
- MessageInputField: standalone component that renders an input field.
- SendButton: standalone component that renders a button.
- EmojiPicker: standalone component that renders a dropdown list of emojis.
- EmojiPickerTrigger: takes children, renders a button that toggles the emoji picker dropdown.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><MessageInputField/><SendButton/><EmojiPickerTrigger><EmojiPicker/></EmojiPickerTrigger></div>
COMPONENT HTML:
MessageInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type a message...""/>
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={isDisabled}>Send</button>
EmojiPicker:
<ul class=""absolute bg-white rounded shadow-md p-2"">{emojis.map((emoji) =>( <li class=""py-2 px-4 hover:bg-gray-100"">{emoji}</li>))}</ul>
EmojiPickerTrigger:
<button class=""p-2 hover:bg-gray-100 rounded text-lg"">{children}</button>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.
COMPONENTS:
- AudioIndicator: A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.
- AudioFeedback: A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.
HTML:
<div class=""flex justify-center mb-4""><AudioIndicator/><AudioFeedback/></div>
COMPONENT HTML:
AudioIndicator:
<div class=""h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}"" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' --><div class=""h-4 w-4 bg-white rounded-full mx-auto mt-2"" <!-- inner circle --></div></div>
AudioFeedback:
<div class=""w-full h-4 bg-gray-200 rounded-lg overflow-hidden""><div class=""h-4 bg-blue-500 rounded-lg"" style=""width: {audio_feedback_width}%"" <!-- audio_feedback_width is a value between 0 and 100 --></div></div>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.
COMPONENTS:
- AudioIndicator: A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.
- AudioFeedback: A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.
HTML:
<div class=""flex justify-center mb-4""><AudioIndicator/><AudioFeedback/></div>
COMPONENT HTML:
AudioIndicator:
<div class=""h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}"" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' --><div class=""h-4 w-4 bg-white rounded-full mx-auto mt-2"" <!-- inner circle --></div></div>
AudioFeedback:
<div class=""w-full h-4 bg-gray-200 rounded-lg overflow-hidden""><div class=""h-4 bg-blue-500 rounded-lg"" style=""width: {audio_feedback_width}%"" <!-- audio_feedback_width is a value between 0 and 100 --></div></div>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should display a microphone icon and a circle that represents the audio feedback. The microphone icon should be surrounded by a circle that changes color based on the audio feedback level. The UI should also display a text that indicates the audio feedback level.
COMPONENTS:
- MicrophoneIcon: A standalone component that displays a microphone icon.
- AudioFeedbackCircle: A standalone component that displays a circle that changes color based on the audio feedback level.
- AudioFeedbackText: A standalone component that displays the audio feedback level.
HTML:
<div class=""flex justify-center mb-4""><div class=""relative""><MicrophoneIcon/><AudioFeedbackCircle/></div><AudioFeedbackText/></div>
COMPONENT HTML:
MicrophoneIcon:
<i class=""fas fa-microphone text-lg text-gray-500""/>
AudioFeedbackCircle:
<div class={`w-12 h-12 bg-${audio_feedback_level_color} rounded-full`}/>
AudioFeedbackText:
<p class=""text-sm text-gray-500"">{audio_feedback_level_text}</p>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.
COMPONENTS:
- AudioIndicator: A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.
- AudioFeedback: A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.
HTML:
<div class=""flex justify-center mb-4""><AudioIndicator/><AudioFeedback/></div>
COMPONENT HTML:
AudioIndicator:
<div class=""h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}"" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' --><div class=""h-4 w-4 bg-white rounded-full mx-auto mt-2"" <!-- inner circle --></div></div>
AudioFeedback:
<div class=""w-full h-4 bg-gray-200 rounded-lg overflow-hidden""><div class=""h-4 bg-blue-500 rounded-lg"" style=""width: {audio_feedback_width}%"" <!-- audio_feedback_width is a value between 0 and 100 --></div></div>"
Voice Command/Audio Feedback,"DESCRIPTION:
The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.
COMPONENTS:
- AudioIndicator: A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.
- AudioFeedback: A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.
HTML:
<div class=""flex justify-center mb-4""><AudioIndicator/><AudioFeedback/></div>
COMPONENT HTML:
AudioIndicator:
<div class=""h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}"" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' --><div class=""h-4 w-4 bg-white rounded-full mx-auto mt-2"" <!-- inner circle --></div></div>
AudioFeedback:
<div class=""w-full h-4 bg-gray-200 rounded-lg overflow-hidden""><div class=""h-4 bg-blue-500 rounded-lg"" style=""width: {audio_feedback_width}%"" <!-- audio_feedback_width is a value between 0 and 100 --></div></div>"
Switches/Toggles/Buttons,"DESCRIPTION:
A toggle button, a switch, and a button, each with a different style, layout, and purpose.
COMPONENTS:
- ToggleSwitch: A toggle switch component that can be either on or off. Standalone.
- SwitchButton: A switch button component that can be either enabled or disabled. Standalone.
- ActionButton: A button component that can be clicked to perform an action. Standalone.
HTML:
<div class=""flex flex-col gap-4 p-4""><ToggleSwitch/><SwitchButton/><ActionButton/></div>
COMPONENT HTML:
ToggleSwitch:
<label class=""inline-flex items-center""><input type=""checkbox"" class=""hidden""/><span class=""toggle-slider round""></span></label>
SwitchButton:
<button class=""bg-{color}-500 hover:bg-{color}-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>"
Product Cards/Grids,"DESCRIPTION:
A responsive grid of product cards, with each card displaying a product image, title, price, and a ""Add to Cart"" button. The grid should be mobile-first, with a single column on small screens and a multi-column layout on larger screens.
COMPONENTS:
- ProductCard: (standalone): A single product card, containing image, title, price, and ""Add to Cart"" button.
HTML:
<!-- Product Grid container --><div class=""container mx-auto p-4""><!-- Product Grid --><div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3""><!-- Product Card 1 --><ProductCard/><!-- Product Card 2 --><ProductCard/><!-- ... --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded p-4""><!-- Product Image --><img src=""{product_image}"" alt=""{product_title}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><!-- Product Title --><h2 class=""text-lg font-bold"">{product_title}</h2><!-- Product Price --><p class=""text-lg"">{product_price}</p><!-- Add to Cart Button --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button></div></div>"
Product Cards/Grids,"DESCRIPTION:
A responsive grid of product cards, with each card displaying a product image, title, price, and a ""Add to Cart"" button. The grid should be mobile-first, with a single column on small screens and a multi-column layout on larger screens.
COMPONENTS:
- ProductCard: (standalone): A single product card, containing image, title, price, and ""Add to Cart"" button.
HTML:
<!-- Product Grid container --><div class=""container mx-auto p-4""><!-- Product Grid --><div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3""><!-- Product Card 1 --><ProductCard/><!-- Product Card 2 --><ProductCard/><!-- ... --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded p-4""><!-- Product Image --><img src=""{product_image}"" alt=""{product_title}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><!-- Product Title --><h2 class=""text-lg font-bold"">{product_title}</h2><!-- Product Price --><p class=""text-lg"">{product_price}</p><!-- Add to Cart Button --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button></div></div>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, with each item displaying a product image, name, rating, price, and a brief description. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens.
COMPONENTS:
- ProductDescriptionCard: A standalone component representing a single product description.
- ProductDescriptionList: A component that takes children, representing the list of product descriptions.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Descriptions</h2><ul class=""flex flex-wrap justify-center""><ProductDescriptionList><!-- Repeat for each product description --><ProductDescriptionCard/></ProductDescriptionList></ul></div>
COMPONENT HTML:
ProductDescriptionCard:
<li class=""w-full md:w-1/2 lg:w-1/3 p-4""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover mb-2""/><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-sm"">{product_rating}/ 5</p><p class=""text-lg"">{product_price}</p><p class=""text-sm"">{product_description}</p></li>
ProductDescriptionList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, with each item displaying a product image, name, rating, price, and a brief description. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens.
COMPONENTS:
- ProductDescriptionCard: A standalone component representing a single product description.
- ProductDescriptionList: A component that takes children, representing the list of product descriptions.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Descriptions</h2><ul class=""flex flex-wrap justify-center""><ProductDescriptionList><!-- Repeat for each product description --><ProductDescriptionCard/></ProductDescriptionList></ul></div>
COMPONENT HTML:
ProductDescriptionCard:
<li class=""w-full md:w-1/2 lg:w-1/3 p-4""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover mb-2""/><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-sm"">{product_rating}/ 5</p><p class=""text-lg"">{product_price}</p><p class=""text-sm"">{product_description}</p></li>
ProductDescriptionList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, with each item displaying a product image, name, rating, price, and a brief description. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens.
COMPONENTS:
- ProductDescriptionCard: A standalone component representing a single product description.
- ProductDescriptionList: A component that takes children, representing the list of product descriptions.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Descriptions</h2><ul class=""flex flex-wrap justify-center""><ProductDescriptionList><!-- Repeat for each product description --><ProductDescriptionCard/></ProductDescriptionList></ul></div>
COMPONENT HTML:
ProductDescriptionCard:
<li class=""w-full md:w-1/2 lg:w-1/3 p-4""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover mb-2""/><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-sm"">{product_rating}/ 5</p><p class=""text-lg"">{product_price}</p><p class=""text-sm"">{product_description}</p></li>
ProductDescriptionList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Description List,"DESCRIPTION:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
COMPONENTS:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
COMPONENT HTML:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Mention display for tagged users,"DESCRIPTION:
The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.
COMPONENTS:
- TaggedUserList: A component that takes children, rendering a list of `TaggedUser` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Mentioned Users</h2><TaggedUserList><!-- list of tagged users will be rendered here --></TaggedUserList></div>
COMPONENT HTML:
TaggedUserList:
<ul class=""list-none mb-0"">{children}</ul>"
Mention display for tagged users,"DESCRIPTION:
The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.
COMPONENTS:
- TaggedUserList: A component that takes children, rendering a list of `TaggedUser` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Mentioned Users</h2><TaggedUserList><!-- list of tagged users will be rendered here --></TaggedUserList></div>
COMPONENT HTML:
TaggedUserList:
<ul class=""list-none mb-0"">{children}</ul>"
Mention display for tagged users,"DESCRIPTION:
A list of tagged users, each with their username and a ""Remove tag"" button.
COMPONENTS:
- TaggedUser: A standalone component displaying a single tagged user's information.
- RemoveButton: A standalone component representing the ""Remove tag"" button.
HTML:
<ul class=""list-none mb-4""><li class=""flex justify-between mb-2""><TaggedUser/></li><!-- more tagged users here --></ul>
COMPONENT HTML:
TaggedUser:
<span class=""mr-2"">{username}</span><RemoveButton/>
RemoveButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Remove tag</button>"
Mention display for tagged users,"DESCRIPTION:
The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.
COMPONENTS:
- TaggedUserList: A component that takes children, rendering a list of `TaggedUser` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Mentioned Users</h2><TaggedUserList><!-- list of tagged users will be rendered here --></TaggedUserList></div>
COMPONENT HTML:
TaggedUserList:
<ul class=""list-none mb-0"">{children}</ul>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should consist of a search bar with a text input field, a search button, and filters (e.g., dropdowns or checkboxes) to narrow down the search results.
COMPONENTS:
- SearchBar: standalone component that contains a text input field and a search button.
- SearchInput: standalone component that is a text input field.
- SearchButton: standalone component that is a button.
- FilterRow: component that takes children, which will be filter options (e.g., dropdowns or checkboxes).
- FilterOption: standalone component that represents a single filter option (e.g., a dropdown item or checkbox).
HTML:
<div class=""flex flex-col""><SearchBar/><FilterRow><FilterOption/><FilterOption/><!-- Add more FilterOption components as needed --></FilterRow></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white rounded-md shadow-md p-2""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""text"" class=""border border-gray-200 p-2 w-full"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-orange-500 text-white p-2 rounded-md"">Search</button>
FilterRow:
<div class=""flex flex-wrap justify-between"">{children}</div>
FilterOption:
<div class=""mr-2 mb-2""><select class=""border border-gray-200 p-2 w-full""><option value={option_value}>{option_label}</option></select></div>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.
COMPONENTS:
- SearchBar: Standalone component for the search input field.
- FilterButton: Standalone component for each filter button.
- FilterMenu: Component that wraps all filter buttons, takes children.
- SearchAndFilters: Component that wraps the search bar and filter menu, takes children.
HTML:
<div class=""container mx-auto p-4""><SearchAndFilters><SearchBar/><FilterMenu><FilterButton/><!-- more FilterButton components here --></FilterMenu></SearchAndFilters></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" id=""search-input"" class=""w-full py-2 px-4 border-2 border-gray-200 rounded-lg"" placeholder=""Search...""/>
FilterButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{filter_name}</button>
FilterMenu:
<div class=""flex flex-wrap justify-center"">{children}</div>
SearchAndFilters:
<div class=""flex flex-col items-center"">{children}</div>"
Search Bar and Filters,"DESCRIPTION:
The UI should have a search bar with a text input field and a search button. Below the search bar, there should be a filter section with checkboxes and labels. The filter section should be collapsible. The UI should be responsive and mobile-friendly.
COMPONENTS:
- SearchBar: (standalone) - a text input field and a search button.
- FilterSection: (takes children) - a collapsible section containing filter checkboxes and labels.
- FilterItem: (standalone) - a single filter checkbox and label.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/><FilterSection><FilterItem/><FilterItem/><FilterItem/></FilterSection></div>
COMPONENT HTML:
SearchBar:
<div class=""flex mb-4""><input type=""text"" class=""w-full px-2 py-1 border border-gray-200 rounded""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded"">Search</button></div>
FilterSection:
<div class=""bg-white shadow-md p-2 mb-4""><h5 class=""mb-2"">{filterInSectionTitle}</h5><div class=""flex flex-wrap"">{children} </div></div>
FilterItem:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterItemId}"" class=""mr-2""/><label for=""{filterItemId}"" class=""text-sm"">{filterItemLabel}</label></div>"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates. Each room type should have a checkbox to select or deselect it. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- RoomTypeList: (takes children) - A list of `RoomTypeItem` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold"">Select Room Type and Rate</h2><RoomTypeList><!-- Room type items will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
RoomTypeList:
<ul class=""list-none mb-0"">{children}</ul>"
Room Type and Rate Selection,"DESCRIPTION:
A room type and rate selection UI that allows users to choose from different room types and rates.
COMPONENTS:
- RoomTypeCard: (standalone): Displays a single room type with its details and rates.
- RateSelection: (takes children): A container for selecting rates.
- RateOption: (standalone): A single rate option with its details.
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h2><div class=""flex flex-wrap -mx-4""><RoomTypeCard/><RoomTypeCard/><RoomTypeCard/><!-- Add more RoomTypeCard components as needed --></div><RateSelection><RateOption/><RateOption/><RateOption/><!-- Add more RateOption components as needed --></RateSelection></div>
COMPONENT HTML:
RoomTypeCard:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold"">{room_type_name}</h3><p class=""text-gray-600"">{room_type_description}</p><p class=""text-lg font-bold"">{price_per_night} per night</p></div>
RateSelection:
<div class=""p-4""><h3 class=""text-lg font-bold"">Select Rate</h3><div class=""flex flex-wrap -mx-4"">{children} </div></div>
RateOption:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><input type=""radio"" id={rate_id} name=""rate""/><label for={rate_id} class=""text-lg font-bold"">{rate_name}</label><p class=""text-gray-600"">{rate_description}</p><p class=""text-lg font-bold"">{rate_price} per night</p></div>"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Room Type and Rate Selection,"DESCRIPTION:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
COMPONENTS:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
COMPONENT HTML:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Statistics Section: Showcase impressive metrics and data,"DESCRIPTION:
The Statistics Section should display impressive metrics and data in a visually appealing way, with clear headings, easy-to-read fonts, and sufficient whitespace to make the numbers stand out.
COMPONENTS:
- StatisticCard: a standalone component that displays a single metric, consisting of a title, value, and optional description.
- StatisticsSection: a component that takes children, wrapping multiple `StatisticCard`s in a container with a heading.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Key Statistics</h2><StatisticsSection><StatisticCard/><StatisticCard/><StatisticCard/></StatisticsSection></section>
COMPONENT HTML:
StatisticCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{statistic_title}</h3><p class=""text-3xl font-bold"">{statistic_value}</p><p class=""text-gray-600"">{statistic_description}</p></div>
StatisticsSection:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Community Forum and Chat Tools,"DESCRIPTION:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
COMPONENTS:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
COMPONENT HTML:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
Tweet analytics for engagement metrics,"DESCRIPTION:
The UI should be a dashboard displaying tweet analytics for engagement metrics. It should show the number of likes, retweets, replies, and engagements for a tweet.
COMPONENTS:
- TweetAnalyticsCard: standalone component displaying the tweet analytics
- MetricItem: takes children, displays a single metric (e.g. likes, retweets, etc.)
HTML:
<div class="" container mx-auto p-4 pt-6 md:p-6""><TweetAnalyticsCard/></div>
COMPONENT HTML:
TweetAnalyticsCard:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold"">Tweet Analytics</h2><ul class=""list-none mb-0""><MetricItem>Likes: {likes} </MetricItem><MetricItem>Retweets: {retweets} </MetricItem><MetricItem>Replies: {replies} </MetricItem><MetricItem>Engagements: {engagements} </MetricItem></ul></div>
MetricItem:
<li class=""flex items-center mb-2""><span class=""mr-2"">{icon}</span><span>{children}</span></li>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Breadcrumb Separator Icon,"DESCRIPTION:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
COMPONENTS:
- BreadcrumbSeparatorIcon: Standalone
HTML:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
COMPONENT HTML:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Featured Image Carousel Nav,"DESCRIPTION:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
COMPONENTS:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
HTML:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
COMPONENT HTML:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.
COMPONENTS:
- PostHeader: (standalone) - Displays the post title
- PostText: (standalone) - Displays the post text
- PostImage: (standalone) - Displays the post image
- CommentSection: (takes children) - Displays a list of comments
HTML:
<article class=""max-w-md mx-auto p-4 pt-6 mb-4""><PostHeader/><PostText/><PostImage/><CommentSection><!-- comment list will be rendered here --></CommentSection></article>
COMPONENT HTML:
PostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{postTitle}</h1></header>
PostText:
<p class=""text-lg"">{postText}</p>
PostImage:
<img src={imageUrl} alt={imageAlt} class=""w-full mb-4""/>
CommentSection:
<section class=""mb-4""><h2 class=""text-2xl font-bold"">Comments</h2><ul class=""list-none mb-4"">{children} <!-- comment list will be rendered here --></ul></section>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.
COMPONENTS:
- PostHeader: (standalone) - Displays the post title
- PostText: (standalone) - Displays the post text
- PostImage: (standalone) - Displays the post image
- CommentSection: (takes children) - Displays a list of comments
HTML:
<article class=""max-w-md mx-auto p-4 pt-6 mb-4""><PostHeader/><PostText/><PostImage/><CommentSection><!-- comment list will be rendered here --></CommentSection></article>
COMPONENT HTML:
PostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{postTitle}</h1></header>
PostText:
<p class=""text-lg"">{postText}</p>
PostImage:
<img src={imageUrl} alt={imageAlt} class=""w-full mb-4""/>
CommentSection:
<section class=""mb-4""><h2 class=""text-2xl font-bold"">Comments</h2><ul class=""list-none mb-4"">{children} <!-- comment list will be rendered here --></ul></section>"
"Single post with text, image, and comments","DESCRIPTION:
A single post displayed on a webpage. The post consists of a text description, an image, and a list of comments. The text description is displayed above the image, and the comments are listed below the image.
COMPONENTS:
- PostHeader: a standalone component that displays the post's text description.
- PostImage: a standalone component that displays the post's image.
- CommentList: a component that takes children (Comment components).
- Comment: a standalone component that displays a single comment.
HTML:
<div class=""max-w-md mx-auto p-4""><PostHeader/><PostImage/><CommentList><Comment/><!-- additional Comment components... --></CommentList></div>
COMPONENT HTML:
PostHeader:
<h2 class=""text-lg font-bold"">{post_text}</h2>
PostImage:
<img src={image_url} alt=""Post image"" class=""w-full mb-4""/>
CommentList:
<ul class=""list-none p-0 m-0"">{children}</ul>
Comment:
<li class=""py-2 border-b border-gray-200""><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-500"">{comment_username}</p></li>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.
COMPONENTS:
- PostHeader: (standalone) - Displays the post title
- PostText: (standalone) - Displays the post text
- PostImage: (standalone) - Displays the post image
- CommentSection: (takes children) - Displays a list of comments
HTML:
<article class=""max-w-md mx-auto p-4 pt-6 mb-4""><PostHeader/><PostText/><PostImage/><CommentSection><!-- comment list will be rendered here --></CommentSection></article>
COMPONENT HTML:
PostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{postTitle}</h1></header>
PostText:
<p class=""text-lg"">{postText}</p>
PostImage:
<img src={imageUrl} alt={imageAlt} class=""w-full mb-4""/>
CommentSection:
<section class=""mb-4""><h2 class=""text-2xl font-bold"">Comments</h2><ul class=""list-none mb-4"">{children} <!-- comment list will be rendered here --></ul></section>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"Single post with text, image, and comments","DESCRIPTION:
A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.
COMPONENTS:
- PostHeader: (standalone) - Displays the post title
- PostText: (standalone) - Displays the post text
- PostImage: (standalone) - Displays the post image
- CommentSection: (takes children) - Displays a list of comments
HTML:
<article class=""max-w-md mx-auto p-4 pt-6 mb-4""><PostHeader/><PostText/><PostImage/><CommentSection><!-- comment list will be rendered here --></CommentSection></article>
COMPONENT HTML:
PostHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">{postTitle}</h1></header>
PostText:
<p class=""text-lg"">{postText}</p>
PostImage:
<img src={imageUrl} alt={imageAlt} class=""w-full mb-4""/>
CommentSection:
<section class=""mb-4""><h2 class=""text-2xl font-bold"">Comments</h2><ul class=""list-none mb-4"">{children} <!-- comment list will be rendered here --></ul></section>"
"Single post with text, image, and comments","DESCRIPTION:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
COMPONENTS:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
HTML:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
COMPONENT HTML:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
Testimonial Slider: Showcase social proof from happy customers,"DESCRIPTION:
The Testimonial Slider should display quotes from happy customers with their names and photos, enclosed in a container that can be navigated using previous and next buttons. The slider should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- TestimonialSlider: A container component that wraps the entire slider, including navigation buttons and testimonial items. (Takes children: TestimonialItem)
- TestimonialItem: A single testimonial item that displays a customer's quote, name, and photo. (Standalone)
- SliderNavigation: A component that contains previous and next buttons for navigating the slider. (Standalone)
HTML:
<div class=""container mx-auto p-4 lg:p-8""><TestimonialSlider><TestimonialItem/><TestimonialItem/><!-- Add more TestimonialItem components as needed --></TestimonialSlider><SliderNavigation/></div>
COMPONENT HTML:
TestimonialSlider:
<div class=""flex flex-wrap justify-center mb-4""><div class=""flex-1"">{children}</div><SliderNavigation/></div>
TestimonialItem:
<div class=""flex flex-col mb-4""><img src=""{photo_url}"" alt=""{customer_name}"" class=""rounded-full w-16 h-16 mb-2""/><p class=""text-lg"">{quote}</p><p class=""text-sm"">{customer_name}</p></div>
SliderNavigation:
<div class=""flex justify-between mb-4""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Previous</button><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Next</button></div>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
"Post list with title, score, and comments","DESCRIPTION:
A list of posts with each item displaying the title, score, and number of comments. The list should be responsive, with a maximum of 3 items per row on larger screens and 1 item per row on smaller screens.
COMPONENTS:
- PostList: A component that takes children, wrapping the list of post items.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Post List</h1><PostList><!-- list of post items --></PostList></div>
COMPONENT HTML:
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
"Post list with title, score, and comments","DESCRIPTION:
A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.
COMPONENTS:
- PostListItem: A standalone component that represents a single post item in the list.
- PostTitle: A standalone component that displays the title of the post.
- PostScore: A standalone component that displays the score of the post.
- PostComments: A standalone component that displays the comments of the post.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PostListItem/><PostListItem/><!-- Add more PostListItem components here --></div>
COMPONENT HTML:
PostListItem:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><PostTitle/><div class=""flex justify-between mb-2""><PostScore/><PostComments/></div><hr class=""mb-4""/></div>
PostTitle:
<h2 class=""text-lg font-bold"">{post_title}</h2>
PostScore:
<p class=""text-sm"">{score} points</p>
PostComments:
<p class=""text-sm"">{comment_count} comments</p>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Hero Overlay Text,"DESCRIPTION:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
COMPONENTS:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
HTML:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
COMPONENT HTML:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style={{ backgroundImage: `url(${heroBackgroundImage})` }}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Top/Bottom Navigation,"DESCRIPTION:
The UI should consist of a top navigation bar and a bottom navigation bar. The top navigation bar should have a logo on the left and some navigation links on the right. The bottom navigation bar should have some navigation links.
COMPONENTS:
- TopNavigationBar: (standalone)
- BottomNavigationBar: (standalone)
- Logo: (standalone)
- Link: (takes children)
HTML:
<div class=""h-screen flex flex-col""><TopNavigationBar/><!-- main content here --><BottomNavigationBar/></div>
COMPONENT HTML:
TopNavigationBar:
<nav class=""bg-gray-900 py-4""><Logo/><ul class=""flex justify-end""><li><Link>Link 1</Link></li><li><Link>Link 2</Link></li><li><Link>Link 3</Link></li></ul></nav>
BottomNavigationBar:
<nav class=""bg-gray-900 py-4""><ul class=""flex justify-between""><li><Link>Link 4</Link></li><li><Link>Link 5</Link></li><li><Link>Link 6</Link></li></ul></nav>
Logo:
<img src={logo_url} alt=""Logo"" class=""h-8 w-8""/>
Link:
<a href={href} class=""text-white hover:text-gray-200"">{children}</a>"
"Circular progress indicator, often used for loading animations","DESCRIPTION:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
COMPONENTS:
- CircularProgressIndicator: standalone
HTML:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
COMPONENT HTML:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style={`--progress: ${progress}%;`}></div></div>"
"Circular progress indicator, often used for loading animations","DESCRIPTION:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
COMPONENTS:
- CircularProgressIndicator: standalone
HTML:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
COMPONENT HTML:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style={`--progress: ${progress}%;`}></div></div>"
"Circular progress indicator, often used for loading animations","DESCRIPTION:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
COMPONENTS:
- CircularProgressIndicator: standalone
HTML:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
COMPONENT HTML:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style={`--progress: ${progress}%;`}></div></div>"
"Circular progress indicator, often used for loading animations","DESCRIPTION:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
COMPONENTS:
- CircularProgressIndicator: standalone
HTML:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
COMPONENT HTML:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style={`--progress: ${progress}%;`}></div></div>"
Call to Action Button Text,"DESCRIPTION:
The UI should be a responsive, mobile-first Call to Action (CTA) button with a clear and concise text.
COMPONENTS:
- CallToActionButton: A standalone component representing the CTA button.
HTML:
<button class=""cta-button""><CallToActionButton/></button>
COMPONENT HTML:
CallToActionButton:
<span class=""text-sm font-bold text-white"">{cta_text}</span>"
Call to Action Button Text,"DESCRIPTION:
The UI should be a responsive, mobile-first Call to Action (CTA) button with a clear and concise text.
COMPONENTS:
- CallToActionButton: A standalone component representing the CTA button.
HTML:
<button class=""cta-button""><CallToActionButton/></button>
COMPONENT HTML:
CallToActionButton:
<span class=""text-sm font-bold text-white"">{cta_text}</span>"
Call to Action Button Text,"DESCRIPTION:
The UI should be a call-to-action (CTA) button with custom text, responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- ActionButton: (standalone)
HTML:
<button class=""ActionButton""/>
COMPONENT HTML:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaButtonText}</button>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should display a profile picture and a header image, responsive and accessible on various devices.
COMPONENTS:
- ProfilePictureComponent: Standalone, displays a profile picture.
- HeaderImageComponent: Standalone, displays a header image.
- UserProfileHeader: Takes children, contains the profile picture and header image.
HTML:
<UserProfileHeader><ProfilePictureComponent/><HeaderImageComponent/></UserProfileHeader>
COMPONENT HTML:
ProfilePictureComponent:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>
HeaderImageComponent:
<img src={header_image_url} alt=""Header Image"" class=""w-full h-64 object-cover""/>
UserProfileHeader:
<header class=""flex flex-col items-center py-4"">{children}</header>"
Profile Picture and Header Image,"DESCRIPTION:
A profile page with a profile picture and a header image.
COMPONENTS:
- UserProfilePicture: Standalone component, displays a circular image.
- UserProfileHeader: Takes children, displays a header image with overlaid text.
HTML:
<div class=""flex flex-col w-full h-screen""><UserProfileHeader><h1>{username}</h1><p>{bio}</p></UserProfileHeader><UserProfilePicture/><!-- rest of the profile page content --></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-48 h-48 rounded-full""/>
UserProfileHeader:
<div class=""h-64 bg-cover bg-center"" style={{ backgroundImage: `url(${header_image_url})` }}><div class=""flex flex-col items-center justify-center h-full"">{children} </div></div>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Profile Picture and Header Image,"DESCRIPTION:
The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.
COMPONENTS:
- UserProfilePicture: (standalone): A circular profile picture.
- HeaderImage: (standalone): A header image that takes up the full width of the screen.
HTML:
<div class=""flex flex-col md:flex-row""><UserProfilePicture/><HeaderImage/></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4"" src={profile_picture_url} alt={profile_picture_alt_text}/>
HeaderImage:
<img class=""w-full h-64 object-cover"" src={header_image_url} alt={header_image_alt_text}/>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a list of destination cards, each containing a hotel card. The destination cards should have a background image, a title, and a description. The hotel cards should have a hotel name, a rating, and a price.
COMPONENTS:
- DestinationCard: (standalone) - A card displaying a destination's information
- HotelCard: (standalone) - A card displaying a hotel's information
- DestinationList: (takes children) - A container for a list of destination cards
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><DestinationList><DestinationCard/><DestinationCard/><DestinationCard/></DestinationList></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-cover bg-center h-64 mb-4"" style={{ backgroundImage: `url(${image_url})` }}><div class=""bg-white p-4 pt-6""><h2 class=""text-lg"">{destination_name}</h2><p>{destination_description}</p><HotelCard/></div></div>
HotelCard:
<div class=""bg-white p-4 mb-4""><h3 class=""text-md"">{hotel_name}</h3><p>Rating: {hotel_rating}/5</p><p>Price: {hotel_price}/night</p></div>
DestinationList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Destination and Hotel Cards,"DESCRIPTION:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
COMPONENTS:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
COMPONENT HTML:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Notification bell with unread count badge,"DESCRIPTION:
The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.
COMPONENTS:
- NotificationBell: standalone component representing the notification bell icon.
- UnreadCountBadge: standalone component displaying the number of unread notifications.
HTML:
<div class=""flex items-center""><NotificationBell/><UnreadCountBadge/></div>
COMPONENT HTML:
NotificationBell:
<i class=""fa fa-bell text-lg text-gray-600""></i>
UnreadCountBadge:
<div class=""bg-red-500 text-white rounded-full text-xs p-1"">{unread_count}</div>"
Notification bell with unread count badge,"DESCRIPTION:
The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.
COMPONENTS:
- NotificationBell: standalone component representing the notification bell icon.
- UnreadCountBadge: standalone component displaying the number of unread notifications.
HTML:
<div class=""flex items-center""><NotificationBell/><UnreadCountBadge/></div>
COMPONENT HTML:
NotificationBell:
<i class=""fa fa-bell text-lg text-gray-600""></i>
UnreadCountBadge:
<div class=""bg-red-500 text-white rounded-full text-xs p-1"">{unread_count}</div>"
Notification bell with unread count badge,"DESCRIPTION:
The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.
COMPONENTS:
- NotificationBell: standalone component representing the notification bell icon.
- UnreadCountBadge: standalone component displaying the number of unread notifications.
HTML:
<div class=""flex items-center""><NotificationBell/><UnreadCountBadge/></div>
COMPONENT HTML:
NotificationBell:
<i class=""fa fa-bell text-lg text-gray-600""></i>
UnreadCountBadge:
<div class=""bg-red-500 text-white rounded-full text-xs p-1"">{unread_count}</div>"
Notification bell with unread count badge,"DESCRIPTION:
A notification bell icon with a small badge displaying the number of unread notifications. The bell should be clickable, and the badge should be highlighted if there are unread notifications.
COMPONENTS:
- NotificationBell: A standalone component that wraps a clickable bell icon and an unread count badge.
- Badge: A component that takes children (the unread count) and displays it in a highlighted circle.
HTML:
<NotificationBell/>
COMPONENT HTML:
NotificationBell:
<a href=""{notification_href}"" class=""flex items-center hover:bg-gray-100 rounded-md p-2""><i class=""fas fa-bell""></i><Badge>{unread_count}</Badge></a>
Badge:
<span class=""bg-orange-500 rounded-full text-white py-1 px-2 text-xs"">{children}</span>"
Discussion Forums and Comments,"DESCRIPTION:
A discussion forum with a list of comments and a form to add new comments. Each comment should display the user's name, the comment text, and a timestamp. The UI should have a clean and modern design, with adequate spacing and clear typography.
COMPONENTS:
- CommentCard: (standalone): Displays a single comment with user name, comment text, and timestamp.
- CommentForm: (standalone): A form to add a new comment.
- CommentList: (takes children): A container for a list of comments.
- DiscussionForum: (takes children): The main container for the discussion forum.
HTML:
<!-- The main discussion forum container --><div class=""max-w-md mx-auto p-4""><DiscussionForum><CommentList><!-- List of comments will be rendered here --><CommentCard/><CommentCard/><!-- ... --></CommentList><CommentForm/></DiscussionForum></div>
COMPONENT HTML:
CommentCard:
<div class=""flex gap-2 mb-4""><img src=""{user_avatar_url}"" alt=""User Avatar"" class=""w-10 h-10 rounded-full""/><div class=""flex-1""><h5 class=""text-lg font-bold"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex gap-2 mb-4""><input type=""text"" placeholder=""Add a comment..."" class=""flex-1 p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4"">Comment</button></form>
CommentList:
<!-- This component will render a list of CommentCards --><div class=""space-y-4"">{children}</div>
DiscussionForum:
<!-- This component will render the entire discussion forum UI --><div class=""rounded-lg overflow-hidden shadow-md"">{children}</div>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should display a list of tags and categories with a header and a horizontal divider separating the two. Each tag and category should be displayed as a badge with a background color and text.
COMPONENTS:
- TagsAndCategoriesHeader: standalone, displays the header text
- TagsAndCategoriesDivider: standalone, displays a horizontal divider
- TagBadge: takes children, displays a single tag or category as a badge
- TagsAndCategoriesList: takes children, displays a list of tags or categories
HTML:
<div class=""max-w-md mx-auto p-4""><TagsAndCategoriesHeader/><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- tags --><TagBadge>{tag_name}</TagBadge><TagBadge>{tag_name}</TagBadge><!-- ... --></TagsAndCategoriesList><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- categories --><TagBadge>{category_name}</TagBadge><TagBadge>{category_name}</TagBadge><!-- ... --></TagsAndCategoriesList></div>
COMPONENT HTML:
TagsAndCategoriesHeader:
<h2 class=""text-lg font-bold mb-2"">Tags and Categories</h2>
TagsAndCategoriesDivider:
<hr class=""border-b border-gray-200""/>
TagBadge:
<span class=""bg-gray-200 text-gray-800 px-2 py-1 rounded"">{children}</span>
TagsAndCategoriesList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.
COMPONENTS:
- TagLink: A standalone component that displays a single tag as a clickable link.
- CategoryLink: A standalone component that displays a single category as a clickable link.
- TagList: A component that takes children and displays a list of tags.
- CategoryList: A component that takes children and displays a list of categories.
HTML:
<div class=""container mx-auto p-4""><h2>Tags</h2><TagList><TagLink/><TagLink/><!-- Add more TagLink components here --></TagList><h2>Categories</h2><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></div>
COMPONENT HTML:
TagLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={tag_url}>{tag_name} ({tag_count})</a>
CategoryLink:
<a class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"" href={category_url}>{category_name} ({category_count})</a>
TagList:
<ul class=""list-none mb-4"">{children}</ul>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Tags and Categories,"DESCRIPTION:
The UI should display a list of tags and categories in a responsive, mobile-first design. The list should be accessible and SEO-friendly.
COMPONENTS:
- TagList: A component that takes children, representing a list of tags.
- CategoryList: A component that takes children, representing a list of categories.
HTML:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Tags and Categories</h1><section class=""mb-6""><h2 class=""text-lg font-bold mb-2"">Tags</h2><TagList><!-- Tags will be rendered here --></TagList></section><section class=""mb-6""><h2 class=""text-lg font-bold mb-2"">Categories</h2><CategoryList><!-- Categories will be rendered here --></CategoryList></section></main>
COMPONENT HTML:
TagList:
<ul class=""list-none mb-0"">{children}</ul>
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive, mobile-first video player component that displays a featured video. It should have a video container, a play button, and optional video title and description.
COMPONENTS:
- VideoPlayer: Standalone component that contains the video element.
- PlayButton: Standalone component that displays a play button to play/pause the video.
- VideoTitle: Standalone component that displays the title of the video.
- VideoDescription: Standalone component that displays a brief description of the video.
HTML:
<div class=""mx-auto max-w-md p-4""><div class=""flex flex-col items-center""><VideoPlayer/><PlayButton/><VideoTitle/><VideoDescription/></div></div>
COMPONENT HTML:
VideoPlayer:
<div class=""video-container""><video id=""featured-video"" width=""100%"" height=""auto"" controls><source src=""{video_url}"" type=""video/mp4""/>Your browser does not support the video tag. </video></div>
PlayButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playButtonText}</button>
VideoTitle:
<h2 class=""text-lg"">{videoTitle}</h2>
VideoDescription:
<p class=""text-sm"">{videoDescription}</p>"
Featured Video Player,"DESCRIPTION:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
COMPONENTS:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
HTML:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
COMPONENT HTML:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Product Price Discount,"DESCRIPTION:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
COMPONENTS:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
HTML:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
COMPONENT HTML:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
Product Price Discount,"DESCRIPTION:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
COMPONENTS:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
HTML:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
COMPONENT HTML:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
Product Price Discount,"DESCRIPTION:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
COMPONENTS:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
HTML:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
COMPONENT HTML:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
Product Price Discount,"DESCRIPTION:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
COMPONENTS:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
HTML:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
COMPONENT HTML:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
Dropdown Menu Item Icon Color,"DESCRIPTION:
The UI should be a dropdown menu item with an icon, where the icon's color can be customized.
COMPONENTS:
- DropdownMenuItemIcon: A standalone component that displays an icon with a customizable color.
- DropdownMenuItem: A component that takes children, wraps the `DropdownMenuItemIcon` component, and displays a dropdown menu item with text.
HTML:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li><DropdownMenuItem><DropdownMenuItemIcon/><span>Menu Item 1</span></DropdownMenuItem></li></ul></nav>
COMPONENT HTML:
DropdownMenuItemIcon:
<i class=""w-4 h-4 {icon_color}"" aria-hidden=""true"">{icon_name}</i>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Dropdown Menu Item Icon Color,"DESCRIPTION:
The UI should be a dropdown menu item with an icon, where the icon's color can be customized.
COMPONENTS:
- DropdownMenuItemIcon: A standalone component that displays an icon with a customizable color.
- DropdownMenuItem: A component that takes children, wraps the `DropdownMenuItemIcon` component, and displays a dropdown menu item with text.
HTML:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li><DropdownMenuItem><DropdownMenuItemIcon/><span>Menu Item 1</span></DropdownMenuItem></li></ul></nav>
COMPONENT HTML:
DropdownMenuItemIcon:
<i class=""w-4 h-4 {icon_color}"" aria-hidden=""true"">{icon_name}</i>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Dropdown Menu Item Icon Color,"DESCRIPTION:
The UI should be a dropdown menu item with an icon, where the icon's color can be customized.
COMPONENTS:
- DropdownMenuItemIcon: A standalone component that displays an icon with a customizable color.
- DropdownMenuItem: A component that takes children, wraps the `DropdownMenuItemIcon` component, and displays a dropdown menu item with text.
HTML:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li><DropdownMenuItem><DropdownMenuItemIcon/><span>Menu Item 1</span></DropdownMenuItem></li></ul></nav>
COMPONENT HTML:
DropdownMenuItemIcon:
<i class=""w-4 h-4 {icon_color}"" aria-hidden=""true"">{icon_name}</i>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Icon Fonts/SVG Sprites,"DESCRIPTION:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
COMPONENTS:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
HTML:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
COMPONENT HTML:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
A social media feed item that displays a user's profile picture, name, timestamp, and a brief text message. The item should be responsive, mobile-first, and accessible.
COMPONENTS:
- UserProfilePicture: Standalone component that displays a user's profile picture.
- UsernameAndTimestamp: Standalone component that displays a user's name and timestamp.
- MessageText: Standalone component that displays a brief text message.
- SocialMediaFeedItem: Component that takes children (UserProfilePicture, UsernameAndTimestamp, and MessageText).
HTML:
<div class=""flex gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><UsernameAndTimestamp/><MessageText/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-10 h-10 rounded-full"" src={profilePictureUrl} alt=""User Profile Picture""/>
UsernameAndTimestamp:
<div class=""flex flex-col""><p class=""font-bold"">{userName}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div>
MessageText:
<p class=""text-sm"">{messageText}</p>
SocialMediaFeedItem:
<div class=""flex flex-wrap"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
A social media feed item that displays a user's profile picture, name, timestamp, and a brief text message. The item should be responsive, mobile-first, and accessible.
COMPONENTS:
- UserProfilePicture: Standalone component that displays a user's profile picture.
- UsernameAndTimestamp: Standalone component that displays a user's name and timestamp.
- MessageText: Standalone component that displays a brief text message.
- SocialMediaFeedItem: Component that takes children (UserProfilePicture, UsernameAndTimestamp, and MessageText).
HTML:
<div class=""flex gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><UsernameAndTimestamp/><MessageText/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-10 h-10 rounded-full"" src={profilePictureUrl} alt=""User Profile Picture""/>
UsernameAndTimestamp:
<div class=""flex flex-col""><p class=""font-bold"">{userName}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div>
MessageText:
<p class=""text-sm"">{messageText}</p>
SocialMediaFeedItem:
<div class=""flex flex-wrap"">{children}</div>"
Social Media Feed Item,"DESCRIPTION:
The UI should display a single social media feed item, showing the user's profile picture, username, post text, post image, likes, comments, and a timestamp.
COMPONENTS:
- UserProfilePicture: standalone, displays the user's profile picture
- PostHeader: standalone, displays the user's username and timestamp
- PostText: standalone, displays the post text
- PostImage: standalone, displays the post image
- EngagementStats: standalone, displays the likes and comments
- SocialMediaFeedItem: takes children, the main container for the social media feed item
HTML:
<div class=""flex flex-col gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><PostHeader/><PostText/><PostImage/><EngagementStats/></SocialMediaFeedItem></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full object-cover""/>
PostHeader:
<div class=""flex justify-between""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-500"">{timestamp}</p></div>
PostText:
<p>{post_text}</p>
PostImage:
<img src=""{post_image_url}"" alt=""Post image"" class=""w-full h-64 object-cover""/>
EngagementStats:
<ul class=""flex justify-between text-gray-500""><li>{likes} likes</li><li>{comments} comments</li></ul>
SocialMediaFeedItem:
<div class=""flex flex-col gap-2 p-4 border-b border-gray-200"">{children}</div>"
Featured Video Play Icon,"DESCRIPTION:
The UI should display a play icon overlaid on a featured video thumbnail. The play icon should be a white triangle with a rounded rectangle background. The icon should be responsive, accessible, and mobile-first.
COMPONENTS:
- FeaturedVideoPlayIcon: (standalone): displays the play icon overlaid on a featured video thumbnail.
HTML:
<div class=""w-full h-full relative""><img src=""{thumbnail_url}"" alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/><FeaturedVideoPlayIcon/></div>
COMPONENT HTML:
FeaturedVideoPlayIcon:
<div class=""absolute inset-0 flex justify-center items-center bg-gray-800 rounded-lg p-4""><div class=""w-10 h-10 bg-white rounded-full flex justify-center items-center""><span class=""text-gray-800 text-3xl"">{<!-- play icon -->}</span></div></div>"
Featured Video Play Icon,"DESCRIPTION:
The UI should display a play icon overlaid on a featured video thumbnail. The play icon should be a white triangle with a rounded rectangle background. The icon should be responsive, accessible, and mobile-first.
COMPONENTS:
- FeaturedVideoPlayIcon: (standalone): displays the play icon overlaid on a featured video thumbnail.
HTML:
<div class=""w-full h-full relative""><img src=""{thumbnail_url}"" alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/><FeaturedVideoPlayIcon/></div>
COMPONENT HTML:
FeaturedVideoPlayIcon:
<div class=""absolute inset-0 flex justify-center items-center bg-gray-800 rounded-lg p-4""><div class=""w-10 h-10 bg-white rounded-full flex justify-center items-center""><span class=""text-gray-800 text-3xl"">{<!-- play icon -->}</span></div></div>"
Pinned messages with timestamp and author display,"DESCRIPTION:
A list of pinned messages, each with a timestamp and author display.
COMPONENTS:
- PinnedMessageList: component that takes children (a list of `PinnedMessage` components)
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Pinned Messages</h2><PinnedMessageList><!-- list of pinned messages will be rendered here --></PinnedMessageList></div>
COMPONENT HTML:
PinnedMessageList:
<div class=""space-y-2"">{children}</div>"
Pinned messages with timestamp and author display,"DESCRIPTION:
The UI should display a list of pinned messages, each with a timestamp and author information. The messages should be displayed in a clean and readable format, with the timestamp and author information clearly visible.
COMPONENTS:
- PinnedMessage: A standalone component that displays a single pinned message, including the message text, timestamp, and author information.
- PinnedMessageList: A component that takes children, which is a list of `PinnedMessage` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Pinned Messages</h2><PinnedMessageList><PinnedMessage/><PinnedMessage/><!-- additional pinned messages here --></PinnedMessageList></div>
COMPONENT HTML:
PinnedMessage:
<div class=""flex items-center mb-2""><span class=""text-gray-600"">{author_name}</span><span class=""text-gray-400 text-sm ml-2"">{timestamp}</span><p class=""ml-4"">{message_text}</p></div>
PinnedMessageList:
<ul class=""list-none mb-0"">{children}</ul>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Blog Post Archive,"DESCRIPTION:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
COMPONENTS:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
COMPONENT HTML:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Small box that users can click to select or deselect an option,"DESCRIPTION:
A small checkbox that can be toggled on and off, indicating a selected or deselected option. The checkbox should be responsive and accessible.
COMPONENTS:
- CheckBox: component (standalone)
HTML:
<div class=""flex items-center""><CheckBox/><label class=""ml-2"">{option_label}</label></div>
COMPONENT HTML:
CheckBox:
<input type=""checkbox"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded"" aria-label={option_label}/>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
Footer Contact Info,"DESCRIPTION:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
COMPONENTS:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
COMPONENT HTML:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:${email_address}`}>{email_address}</a></p>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
A circular button with a prominent color scheme, typically found in mobile interfaces, that performs a primary action when clicked. The button should have a clear and contrasting background color, with a clear and readable font for the button text.
COMPONENTS:
- CircularButton: A standalone component that represents the circular button.
HTML:
<div class=""flex justify-center""><CircularButton/></div>
COMPONENT HTML:
CircularButton:
<button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded-full"">{button_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","DESCRIPTION:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
COMPONENTS:
- CircleButton: (standalone): A circular button that performs a primary action.
HTML:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
COMPONENT HTML:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
Lesson/List View of Content,"DESCRIPTION:
A responsive, mobile-first list view of lessons/content, with each item displaying a title, description, and call-to-action (CTA) button.
COMPONENTS:
- LessonCard: (standalone): A individual lesson/content item in the list.
- LessonList: (takes children): The container for the list of lessons/content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-2xl font-bold mb-4"">Lessons</h1><LessonList><LessonCard/><LessonCard/><!-- Add more LessonCard components here --></LessonList></div>
COMPONENT HTML:
LessonCard:
<div class=""mb-4 md:mb-6 lg:mb-8""><h2 class=""text-lg font-bold"">{lesson_title}</h2><p class=""text-gray-600"">{lesson_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{lesson_cta_text} </button></div>
LessonList:
<ul class=""list-none mb-0"">{children}</ul>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Send and save draft buttons,"DESCRIPTION:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
COMPONENTS:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
COMPONENT HTML:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Product Rating Stars,"DESCRIPTION:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
COMPONENTS:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
HTML:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
COMPONENT HTML:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's name, profile picture, and a short bio. It should be a compact, rectangular box with a subtle border and padding.
COMPONENTS:
- AuthorInfo: A standalone component that displays the author's information.
- Avatar: A standalone component that displays the author's profile picture.
- Bio: A standalone component that displays the author's bio.
HTML:
<div class=""max-w-md p-4 mx-auto bg-white rounded shadow-md""><AuthorInfo/></div>
COMPONENT HTML:
AuthorInfo:
<div class=""flex items-center mb-2""><Avatar/><div class=""ml-2""><p class=""text-lg"">{authorName}</p><Bio/></div></div>
Avatar:
<img src={profilePictureUrl} class=""w-12 h-12 rounded-full"" alt=""{authorName}'s profile picture""/>
Bio:
<p class=""text-gray-600"">{authorBio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's name, profile picture, and a short bio. It should be a compact, rectangular box with a subtle border and padding.
COMPONENTS:
- AuthorInfo: A standalone component that displays the author's information.
- Avatar: A standalone component that displays the author's profile picture.
- Bio: A standalone component that displays the author's bio.
HTML:
<div class=""max-w-md p-4 mx-auto bg-white rounded shadow-md""><AuthorInfo/></div>
COMPONENT HTML:
AuthorInfo:
<div class=""flex items-center mb-2""><Avatar/><div class=""ml-2""><p class=""text-lg"">{authorName}</p><Bio/></div></div>
Avatar:
<img src={profilePictureUrl} class=""w-12 h-12 rounded-full"" alt=""{authorName}'s profile picture""/>
Bio:
<p class=""text-gray-600"">{authorBio}</p>"
Blog Post Author Info,"DESCRIPTION:
The UI should display the author's information, including their name, profile picture, and a short bio. The component should be responsive, with the profile picture above the author's name and bio on mobile devices, and to the left of the text on larger screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays the author's profile picture.
- AuthorBio: Standalone component that displays the author's bio.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><ProfilePicture/><div class=""ml-4 md:ml-0""><h5 class=""mb-1"">{author_name}</h5><AuthorBio/></div></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{author_profile_picture}"" alt=""{author_name}"" class=""w-12 h-12 rounded-full mx-auto md:mx-0""/>
AuthorBio:
<p class=""text-sm"">{author_bio}</p>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a trip itinerary and booking summary, showing the trip details, booking information, and a summary of the booking.
COMPONENTS:
- TripItinerarySummary: standalone, displays trip details
- BookingInfo: standalone, displays booking information
- BookingSummary: standalone, displays a summary of the booking
- SectionCard: takes children, a card layout for displaying information
HTML:
<div class=""max-w-md mx-auto p-4""><SectionCard><TripItinerarySummary/></SectionCard><SectionCard><BookingInfo/></SectionCard><SectionCard><BookingSummary/></SectionCard></div>
COMPONENT HTML:
TripItinerarySummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Trip Itinerary</h2><p>Departure: {departure_date}</p><p>Destination: {destination}</p><p>Duration: {duration} days</p></div>
BookingInfo:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Information</h2><p>Booking ID: {booking_id}</p><p>Booking Date: {booking_date}</p><p>Payment Method: {payment_method}</p></div>
BookingSummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Summary</h2><p>Total Cost: ${total_cost}</p><p>Number of Travelers: {num_travelers}</p></div>
SectionCard:
<div class=""bg-white shadow-md rounded px-4 py-2 mb-4"">{children}</div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Trip Itinerary and Booking Summary,"DESCRIPTION:
The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.
COMPONENTS:
- TripSummary: a standalone component that displays a brief summary of the trip.
- ItinerarySection: a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).
- ItineraryItem: a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).
- BookingDetails: a standalone component that displays the booking details, such as booking number and status.
HTML:
<div class=""max-w-md mx-auto p-4""><TripSummary/><div class=""mt-4""><h2 class=""text-lg font-bold"">Itinerary</h2><ItinerarySection><ItineraryItem/><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection><ItinerarySection><ItineraryItem/><!-- Add more ItineraryItem components as needed --></ItinerarySection></div><BookingDetails/></div>
COMPONENT HTML:
TripSummary:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">{trip_destination}</h2><p>Travel dates: {travel_dates}</p></div>
ItinerarySection:
<div class=""mt-4""><h3 class=""text-lg font-bold"">{section_title}</h3>{children}</div>
ItineraryItem:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{item_title}</h4><p>{item_description}</p><p>Duration: {item_duration}</p></div>
BookingDetails:
<div class=""bg-white shadow-md p-4""><h2 class=""text-lg font-bold"">Booking Details</h2><p>Booking number: {booking_number}</p><p>Status: {booking_status}</p></div>"
Alert Notification Text,"DESCRIPTION:
The UI should display a notification text with a background color, text color, and optional close button.
COMPONENTS:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
HTML:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
COMPONENT HTML:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Alert Notification Text,"DESCRIPTION:
The UI should display a notification text with a background color, text color, and optional close button.
COMPONENTS:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
HTML:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
COMPONENT HTML:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Alert Notification Text,"DESCRIPTION:
The UI should display a notification text with a background color, text color, and optional close button.
COMPONENTS:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
HTML:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
COMPONENT HTML:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Alert Notification Text,"DESCRIPTION:
The UI should display a notification text with a background color, text color, and optional close button.
COMPONENTS:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
HTML:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
COMPONENT HTML:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Compose email button with dropdown menu,"DESCRIPTION:
The UI should be a button that says ""Compose Email"" with a dropdown arrow on the right side. When clicked, a dropdown menu should appear below the button, containing a list of email composition options.
COMPONENTS:
- ComposeEmailButton: Standalone component that displays the ""Compose Email"" button with a dropdown arrow.
- DropdownMenu: Component that takes children, representing the dropdown menu items.
HTML:
<div class=""flex justify-center""><ComposeEmailButton/></div><div class=""absolute""><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ComposeEmailButton:
<button class=""bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"">Compose Email <span class=""ml-2 text-lg"">{caret_down_icon}</span></button>
DropdownMenu:
<ul class=""bg-white shadow-md py-1"">{children}</ul>"
Features Grid: Highlight key benefits in a grid layout,"DESCRIPTION:
A responsive grid layout with 3-4 columns, showcasing key benefits of a product or service. Each grid item should have an icon, a heading, and a brief description.
COMPONENTS:
- FeatureItem: (standalone): A single feature item in the grid, containing an icon, heading, and description.
- FeaturesGrid: (takes children): The container element for the feature items, managing the grid layout.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturesGrid><FeatureItem/><FeatureItem/><FeatureItem/><!-- Add more FeatureItem components as needed --></FeaturesGrid></section>
COMPONENT HTML:
FeatureItem:
<div class=""flex flex-col items-center p-4 lg:p-6""><i class=""text-3xl {icon_class} mb-4""/><!-- icon --><h3 class=""text-lg font-bold"">{heading}</h3><p class=""text-gray-600"">{description}</p></div>
FeaturesGrid:
<div class=""grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8"">{children}</div>"
Instructor/Author Profiles,"DESCRIPTION:
The UI should display the profile information of an instructor or author, including their name, profile picture, bio, and a list of their courses or publications.
COMPONENTS:
- ProfileHeader: A standalone component that displays the profile picture and name of the instructor/author.
- BioSection: A standalone component that displays the bio of the instructor/author.
- CourseList: A component that takes children, displaying a list of courses or publications.
HTML:
<div class=""flex flex-col items-center p-4""><ProfileHeader/><BioSection/><h2 class=""text-lg font-bold mb-2"">Courses</h2><CourseList><!-- Course items will be rendered here --></CourseList></div>
COMPONENT HTML:
ProfileHeader:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{name}"" class=""w-24 h-24 rounded-full mr-4""/><h1 class=""text-2xl font-bold"">{name}</h1></div>
BioSection:
<div class=""mb-4""><p class=""text-lg"">{bio}</p></div>
CourseList:
<ul class=""list-none mb-4"">{children}</ul>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
COMPONENTS:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
HTML:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
Social Media Feed Footer,"DESCRIPTION:
The social media feed footer should be a responsive, mobile-first footer that displays social media links, a copyright notice, and an optional newsletter signup form. On mobile, the links and copyright notice should be stacked vertically, while on larger screens, they should be arranged horizontally.
COMPONENTS:
- SocialMediaLink: standalone component that takes a social media platform name and URL as props.
- CopyrightNotice: standalone component that takes a copyright year and owner as props.
- NewsletterSignup: standalone component that takes a form action URL and optional label text as props.
- SocialMediaFeedFooter: container component that takes children (e.g., `SocialMediaLink`, `CopyrightNotice`, and `NewsletterSignup`).
HTML:
<footer class=""max-w-md mx-auto p-4 lg:p-6 bg-gray-200""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/><NewsletterSignup/></SocialMediaFeedFooter></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{iconUrl}"" alt=""{platformName} icon"" class=""h-6 w-6 mx-auto lg:mx-0""><span class=""sr-only"">{platformName}</span></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyrightYear} {ownerName}. All rights reserved.</p>
NewsletterSignup:
<form action=""{formActionUrl}"" method=""post""><label for=""email"" class=""sr-only"">Email address</label><input type=""email"" id=""email"" name=""email"" placeholder=""Enter your email address"" class=""w-full lg:w-auto""><button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center lg:justify-between"">{children}</div>"
Rich media embed with video playback and playback controls,"DESCRIPTION:
The UI should be a rich media embed with a video player that has playback controls, including play/pause, volume control, and a progress bar. The video player should be responsive and adaptable to different screen sizes.
COMPONENTS:
- RichMediaEmbed: standalone component that contains the video player and playback controls.
- VideoPlayer: standalone component that contains the video element and playback controls.
- PlaybackControls: standalone component that contains the play/pause button, volume control, and progress bar.
- ProgressBar: standalone component that displays the video progress.
- VolumeControl: standalone component that allows the user to adjust the volume.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><RichMediaEmbed/></div>
COMPONENT HTML:
RichMediaEmbed:
<div class=""flex flex-col h-full""><VideoPlayer/></div>
VideoPlayer:
<div class=""flex-grow""><video src=""{videoSrc}"" class=""w-full h-full object-cover""></video><PlaybackControls/></div>
PlaybackControls:
<div class=""flex justify-between py-2""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Play/Pause"">{playPauseButtonIcon} </button><ProgressBar/><VolumeControl/></div>
ProgressBar:
<div class=""flex-grow w-full h-2 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style={{ width: `${progressPercentage}%` }}></div></div>
VolumeControl:
<div class=""flex items-center""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Mute/Unmute"">{muteButtonIcon} </button><div class=""h-2 w-16 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style={{ width: `${volumePercentage}%` }}></div></div></div>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field and a search button. The search bar should be responsive, taking up the full width of the screen on mobile devices and adding some margins on larger screens. The input field should have a placeholder text and the search button should have an icon of a magnifying glass.
COMPONENTS:
- SearchBar: standalone component that contains the input field and search button.
- SearchInput: standalone component that is the input field.
- SearchButton: standalone component that is the search button.
HTML:
<nav class=""flex justify-center md:w-3/4 md:mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white border border-gray-200 rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md""><i class=""fas fa-search""></i></button>"
Search bar for finding specific content,"DESCRIPTION:
The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: A standalone component that contains the input field and the search button.
- SearchInput: A standalone component that represents the input field.
- SearchButton: A standalone component that represents the search button.
HTML:
<nav class=""flex justify-center md:w-1/2 lg:w-1/3 mx-auto""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-lg""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full px-4 py-2 text-lg text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Google Maps Embeds,"DESCRIPTION:
The UI should display a Google Maps embed with a search bar and a map container. The search bar should allow users to enter a location, and the map container should display the location on a Google Map.
COMPONENTS:
- MapSearchBar: standalone component that renders a search input field and a search button.
- MapContainer: standalone component that renders a container for the Google Map.
- GoogleMapEmbed: component that takes children, which wraps the `MapSearchBar` and `MapContainer` components.
HTML:
<div class=""h-screen w-full flex flex-col""><GoogleMapEmbed><MapSearchBar/><MapContainer/></GoogleMapEmbed></div>
COMPONENT HTML:
MapSearchBar:
<div class=""p-4 flex justify-center""><input type=""search"" placeholder=""Enter a location"" class=""bg-white border border-gray-300 rounded-md py-2 pl-2 pr-4""/><button class=""bg-orange-500 text-white px-4 py-2 rounded-md"">Search </button></div>
MapContainer:
<div class=""h-full w-full"" id=""map"" style={{ width: '100%', height: 'calc(100vh - 64px)' }}><!-- map will be rendered here --></div>
GoogleMapEmbed:
<div class=""h-full w-full flex flex-col"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Footer Social Media Link,"DESCRIPTION:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
COMPONENTS:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
HTML:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Navigation Menu Toggle,"DESCRIPTION:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
COMPONENTS:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
HTML:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
COMPONENT HTML:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
Product Description List Item,"DESCRIPTION:
The UI should display a list item that contains a product description, which includes a product title, a product rating, and a short product description. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductDescriptionListItem: standalone component
- ProductTitle: standalone component, displays the title of the product
- ProductRating: standalone component, displays the rating of the product
- ProductDescription: standalone component, displays a short description of the product
HTML:
<ul class=""flex flex-col gap-4 md:flex-row md:flex-wrap""><ProductDescriptionListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductDescriptionListItem:
<li class=""flex flex-col gap-2""><ProductTitle/><ProductRating/><ProductDescription/></li>
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
ProductRating:
<div class=""flex gap-1"">{rating} <span class=""text-sm"">/ 5</span></div>
ProductDescription:
<p>{productDescription}</p>"
Product Description List Item,"DESCRIPTION:
The UI should display a list item that contains a product description, which includes a product title, a product rating, and a short product description. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductDescriptionListItem: standalone component
- ProductTitle: standalone component, displays the title of the product
- ProductRating: standalone component, displays the rating of the product
- ProductDescription: standalone component, displays a short description of the product
HTML:
<ul class=""flex flex-col gap-4 md:flex-row md:flex-wrap""><ProductDescriptionListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductDescriptionListItem:
<li class=""flex flex-col gap-2""><ProductTitle/><ProductRating/><ProductDescription/></li>
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
ProductRating:
<div class=""flex gap-1"">{rating} <span class=""text-sm"">/ 5</span></div>
ProductDescription:
<p>{productDescription}</p>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a search bar with a text input field, a search button, and an optional dropdown list of suggestions. The search bar should be responsive, mobile-first, and accessible.
COMPONENTS:
- SearchBar: A standalone component that contains the search input field and button.
- SearchSuggestions: A component that takes children (i.e., a list of suggested products) and renders them in a dropdown list.
HTML:
<div class=""flex justify-center pt-4""><SearchBar/><div class=""absolute z-10""><SearchSuggestions/></div></div>
COMPONENT HTML:
SearchBar:
<div class=""relative w-full lg:max-w-md""><input type=""search"" class=""w-full bg-white border border-gray-300 rounded-md pl-10 pr-3 py-2"" placeholder=""Search products...""/><button class=""absolute top-0 right-0 p-2""><i class=""fas fa-search text-gray-600""/></button></div>
SearchSuggestions:
<ul class=""bg-white border border-gray-300 rounded-b-md"">{children}</ul>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a search bar with a text input field, a search button, and an optional dropdown list of suggestions. The search bar should be responsive, mobile-first, and accessible.
COMPONENTS:
- SearchBar: A standalone component that contains the search input field and button.
- SearchSuggestions: A component that takes children (i.e., a list of suggested products) and renders them in a dropdown list.
HTML:
<div class=""flex justify-center pt-4""><SearchBar/><div class=""absolute z-10""><SearchSuggestions/></div></div>
COMPONENT HTML:
SearchBar:
<div class=""relative w-full lg:max-w-md""><input type=""search"" class=""w-full bg-white border border-gray-300 rounded-md pl-10 pr-3 py-2"" placeholder=""Search products...""/><button class=""absolute top-0 right-0 p-2""><i class=""fas fa-search text-gray-600""/></button></div>
SearchSuggestions:
<ul class=""bg-white border border-gray-300 rounded-b-md"">{children}</ul>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text ""Search for products..."". The submit button should have a search icon and the text ""Search"".
COMPONENTS:
- SearchBar: a standalone component that contains the input field and submit button.
- SearchButton: a standalone component that contains the search icon and text.
HTML:
<nav class=""max-w-md mx-auto p-4""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><input type=""text"" placeholder=""Search for products..."" class=""w-full p-2 pl-10 text-sm text-gray-700""/><SearchButton/></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i>Search</button>"
Search bar for finding products,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- SearchBar: standalone component that contains the search input field and submit button.
- SearchInput: standalone component that is a simple input field.
- SearchButton: standalone component that is a submit button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search products""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Real-time Comment and Discussion Forum,"DESCRIPTION:
The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.
COMPONENTS:
- CommentItem: A standalone component that displays a single comment.
- CommentForm: A standalone component that allows users to post a new comment.
- CommentList: A component that takes children (multiple `CommentItem` components) and displays them in a list.
- ForumHeader: A standalone component that displays the title of the forum.
- ForumContainer: A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.
HTML:
<div class=""max-w-md mx-auto p-4""><ForumHeader/><ForumContainer><CommentList><CommentItem/><CommentItem/><!-- Add more CommentItem components here --></CommentList><CommentForm/></ForumContainer></div>
COMPONENT HTML:
CommentItem:
<div class=""flex gap-2 py-2 border-b border-gray-200""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-8 h-8 rounded-full""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-gray-600"">{comment_text}</p></div></div>
CommentForm:
<form class=""flex flex-col gap-2""><input type=""text"" placeholder=""Write a comment..."" class=""w-full p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Post Comment </button></form>
CommentList:
<ul class=""list-none p-0"">{children}</ul>
ForumHeader:
<h1 class=""text-2xl font-bold"">{forum_title}</h1>
ForumContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>"
Real-time Comment and Discussion Forum,"DESCRIPTION:
The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.
COMPONENTS:
- CommentItem: A standalone component that displays a single comment.
- CommentForm: A standalone component that allows users to post a new comment.
- CommentList: A component that takes children (multiple `CommentItem` components) and displays them in a list.
- ForumHeader: A standalone component that displays the title of the forum.
- ForumContainer: A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.
HTML:
<div class=""max-w-md mx-auto p-4""><ForumHeader/><ForumContainer><CommentList><CommentItem/><CommentItem/><!-- Add more CommentItem components here --></CommentList><CommentForm/></ForumContainer></div>
COMPONENT HTML:
CommentItem:
<div class=""flex gap-2 py-2 border-b border-gray-200""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-8 h-8 rounded-full""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-gray-600"">{comment_text}</p></div></div>
CommentForm:
<form class=""flex flex-col gap-2""><input type=""text"" placeholder=""Write a comment..."" class=""w-full p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Post Comment </button></form>
CommentList:
<ul class=""list-none p-0"">{children}</ul>
ForumHeader:
<h1 class=""text-2xl font-bold"">{forum_title}</h1>
ForumContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>"
Real-time Comment and Discussion Forum,"DESCRIPTION:
The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.
COMPONENTS:
- CommentItem: A standalone component that displays a single comment.
- CommentForm: A standalone component that allows users to post a new comment.
- CommentList: A component that takes children (multiple `CommentItem` components) and displays them in a list.
- ForumHeader: A standalone component that displays the title of the forum.
- ForumContainer: A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.
HTML:
<div class=""max-w-md mx-auto p-4""><ForumHeader/><ForumContainer><CommentList><CommentItem/><CommentItem/><!-- Add more CommentItem components here --></CommentList><CommentForm/></ForumContainer></div>
COMPONENT HTML:
CommentItem:
<div class=""flex gap-2 py-2 border-b border-gray-200""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-8 h-8 rounded-full""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-gray-600"">{comment_text}</p></div></div>
CommentForm:
<form class=""flex flex-col gap-2""><input type=""text"" placeholder=""Write a comment..."" class=""w-full p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Post Comment </button></form>
CommentList:
<ul class=""list-none p-0"">{children}</ul>
ForumHeader:
<h1 class=""text-2xl font-bold"">{forum_title}</h1>
ForumContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>"
"Button that performs an action within the flow of content, often used for quick actions","DESCRIPTION:
A small, inline button that is often used for quick actions within a flow of content. It should be styled to stand out slightly from the surrounding text, but not too much.
COMPONENTS:
- InlineActionButton: A standalone component that renders a small button that performs an action within a flow of content.
HTML:
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <InlineActionButton/>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
COMPONENT HTML:
InlineActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded"">{action_text}</button>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
A simple metadata section displaying the author's name and the date of publication, aligned to the left and styled for readability.
COMPONENTS:
- AuthorMetadata: standalone component displaying the author's name.
- DateMetadata: standalone component displaying the date of publication.
- MetadataContainer: container component taking two children: AuthorMetadata and DateMetadata.
HTML:
<div class=""flex flex-wrap justify-start mb-4""><MetadataContainer><AuthorMetadata/><DateMetadata/></MetadataContainer></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-gray-600 text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-gray-600 text-sm"">{publication_date}</p>
MetadataContainer:
<div class=""flex flex-wrap items-center"">{children}</div>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication, with the author's name in a slightly larger font size than the date.
COMPONENTS:
- AuthorMetadata: standalone component that displays the author's name.
- DateMetadata: standalone component that displays the date of publication.
HTML:
<div class=""flex justify-between mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-lg"">{author_name}</p>
DateMetadata:
<p class=""text-sm text-gray-600"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.
COMPONENTS:
- AuthorMetadata: (standalone): displays the author's name
- DateMetadata: (standalone): displays the date of publication
HTML:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><AuthorMetadata/><DateMetadata/></div>
COMPONENT HTML:
AuthorMetadata:
<p class=""text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-xs text-gray-500"">{publication_date}</p>"
Author and Date Metadata,"DESCRIPTION:
The UI should display author and date metadata in a compact and readable format, typically used in blog posts, articles, or news websites. The author's name and publication date should be displayed side by side, with the author's name in a slightly larger font size.
COMPONENTS:
- AuthorMetadata: A standalone component displaying the author's name.
- DateMetadata: A standalone component displaying the publication date.
- MetadataContainer: A container component that takes children, wrapping the author and date metadata components.
HTML:
<footer class=""flex justify-between mb-4""><MetadataContainer><AuthorMetadata/><DateMetadata/></MetadataContainer></footer>
COMPONENT HTML:
AuthorMetadata:
<span class=""text-lg"">{author_name}</span>
DateMetadata:
<span class=""text-gray-600"">{publication_date}</span>
MetadataContainer:
<div class=""flex items-center"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Post Card: A single post with user info and actions,"DESCRIPTION:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
COMPONENTS:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
HTML:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Add to cart and wishlist buttons,"DESCRIPTION:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
COMPONENTS:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
HTML:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
COMPONENT HTML:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Tweet delete button for post removal,"DESCRIPTION:
A small delete button with a trash can icon to remove a tweet from a post.
COMPONENTS:
- TweetDeleteButton: (standalone)
HTML:
<button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><TweetDeleteButton/></button>
COMPONENT HTML:
TweetDeleteButton:
<span class=""text-lg inline-block""><i class=""fas fa-trash-alt""></i></span>"
Interactive Product Demo Simulation,"DESCRIPTION:
The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.
COMPONENTS:
- ProductHero: A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.
- FeatureCard: A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.
- CallToAction: A standalone component that encourages users to take a specific action, such as ""Learn More"" or ""Get Started"".
- ProductImage: A standalone component that displays a product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductHero/><section class=""flex flex-wrap justify-center mb-4""><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard></section><CallToAction/><ProductImage/></div>
COMPONENT HTML:
ProductHero:
<section class=""hero bg-cover bg-center h-screen"" style=""background-image: url('{hero_image_url}')""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl lg:text-5xl text-white"">{hero_title}</h1><p class=""text-lg lg:text-2xl text-white"">{hero_subtitle}</p></div></section>
FeatureCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><div slot=""content"">{children}</div><CallToAction/></div>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProductImage:
<img class=""w-full lg:w-1/2 xl:w-1/3 mx-auto"" src=""{product_image_url}"" alt=""{product_image_alt_text}"">"
Interactive Product Demo Simulation,"DESCRIPTION:
The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.
COMPONENTS:
- ProductHero: A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.
- FeatureCard: A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.
- CallToAction: A standalone component that encourages users to take a specific action, such as ""Learn More"" or ""Get Started"".
- ProductImage: A standalone component that displays a product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductHero/><section class=""flex flex-wrap justify-center mb-4""><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard></section><CallToAction/><ProductImage/></div>
COMPONENT HTML:
ProductHero:
<section class=""hero bg-cover bg-center h-screen"" style=""background-image: url('{hero_image_url}')""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl lg:text-5xl text-white"">{hero_title}</h1><p class=""text-lg lg:text-2xl text-white"">{hero_subtitle}</p></div></section>
FeatureCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><div slot=""content"">{children}</div><CallToAction/></div>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProductImage:
<img class=""w-full lg:w-1/2 xl:w-1/3 mx-auto"" src=""{product_image_url}"" alt=""{product_image_alt_text}"">"
Interactive Product Demo Simulation,"DESCRIPTION:
The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.
COMPONENTS:
- ProductHero: A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.
- FeatureCard: A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.
- CallToAction: A standalone component that encourages users to take a specific action, such as ""Learn More"" or ""Get Started"".
- ProductImage: A standalone component that displays a product image.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductHero/><section class=""flex flex-wrap justify-center mb-4""><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard></section><CallToAction/><ProductImage/></div>
COMPONENT HTML:
ProductHero:
<section class=""hero bg-cover bg-center h-screen"" style=""background-image: url('{hero_image_url}')""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl lg:text-5xl text-white"">{hero_title}</h1><p class=""text-lg lg:text-2xl text-white"">{hero_subtitle}</p></div></section>
FeatureCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><div slot=""content"">{children}</div><CallToAction/></div>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProductImage:
<img class=""w-full lg:w-1/2 xl:w-1/3 mx-auto"" src=""{product_image_url}"" alt=""{product_image_alt_text}"">"
Video/Audio Players,"DESCRIPTION:
The UI should have a large video or audio player in the center, with playback controls (play/pause, seek, volume) below it. There should also be a title and optional description above the player.
COMPONENTS:
- MediaPlayer: standalone, displays the video or audio content
- MediaControls: standalone, displays the playback controls (play/pause, seek, volume)
- MediaTitle: standalone, displays the title of the media
- MediaDescription: standalone, displays a optional description of the media
HTML:
<div class=""flex flex-col h-screen p-4""><div class=""flex justify-center mb-4""><MediaTitle/><!-- displays the title of the media --><MediaDescription/><!-- displays a optional description of the media --></div><MediaPlayer/><!-- displays the video or audio content --><MediaControls/><!-- displays the playback controls (play/pause, seek, volume) --></div>
COMPONENT HTML:
MediaPlayer:
<div class=""w-full h-96 bg-gray-200 rounded-lg""><!-- video or audio content will be rendered here --></div>
MediaControls:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_or_pause_text} </button><div class=""mx-4""><input type=""range"" class=""w-full""/></div><button class=""bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"">Volume: {volume_level}% </button></div>
MediaTitle:
<h2 class=""text-2xl font-bold mb-2"">{media_title}</h2>
MediaDescription:
<p class=""text-gray-600"">{media_description}</p>"
Popular Tags: Cloud of frequently used keywords,"DESCRIPTION:
A cloud of popular tags, where each tag has a different size and color based on its frequency of use. The tags should be arranged in a way that creates a visually appealing and organic shape.
COMPONENTS:
- PopularTagCloud: standalone component that contains all the popular tags
- Tag: standalone component that represents a single popular tag
HTML:
<div class=""md:max-w-md mx-auto p-4""><PopularTagCloud/></div>
COMPONENT HTML:
PopularTagCloud:
<div class=""flex flex-wrap justify-center mb-4"">{tags}</div>
Tag:
<a href=""{tag_url}"" class=""inline-block px-2 py-1 rounded {tag_color} text-lg mb-2 mr-2 hover:underline"">{tag_name} <span class=""text-sm"">({tag_frequency})</span></a>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Article Title: Headline of individual post,"DESCRIPTION:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
COMPONENTS:
- PostHeadline: standalone component
HTML:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
COMPONENT HTML:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar for finding videos,"DESCRIPTION:
A simple search bar with a search input and a search button. The search bar should be centered on the page and should be responsive.
COMPONENTS:
- SearchBar: A standalone component that contains a search input and a search button.
- SearchInput: A standalone component that renders an input field.
- SearchButton: A standalone component that renders a button.
HTML:
<div class=""flex justify-center pt-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center bg-white rounded-md shadow-md p-2""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-2 py-2 rounded-md"" placeholder=""Search for videos""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">Search</button>"
Search bar for finding videos,"DESCRIPTION:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Audio Players,"DESCRIPTION:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
COMPONENTS:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
HTML:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
COMPONENT HTML:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Customer Profile: View customer details,"DESCRIPTION:
A simple profile page with a header, customer information, and a call-to-action (CTA) button.
COMPONENTS:
- CustomerProfileHeader: Standalone component to display the customer's profile picture and name.
- CustomerInfoSection: Takes children to display customer information such as email, phone number, and address.
- CallToActionButton: Standalone component to render a CTA button with a customizable label.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><CustomerProfileHeader/><div class=""mt-4""><CustomerInfoSection><p><strong>Email:</strong>{customer_email}</p><p><strong>Phone:</strong>{customer_phone}</p><p><strong>Address:</strong>{customer_address}</p></CustomerInfoSection></div><div class=""mt-6""><CallToActionButton/></div></div>
COMPONENT HTML:
CustomerProfileHeader:
<div class=""flex flex-col items-center""><img src={customer_profile_picture} class=""w-24 h-24 rounded-full"" alt=""Customer Profile Picture""/><h2 class=""text-lg font-bold"">{customer_name}</h2></div>
CustomerInfoSection:
<div class=""bg-white shadow-md p-4"">{children}</div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_label}</button>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
A simple paragraph of text that is responsive, accessible, and readable on various devices.
COMPONENTS:
- ContentParagraph: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ContentParagraph/></div>
COMPONENT HTML:
ContentParagraph:
<p class=""text-lg leading-relaxed mb-4"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
A simple paragraph of text that is responsive, accessible, and readable on various devices.
COMPONENTS:
- ContentParagraph: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ContentParagraph/></div>
COMPONENT HTML:
ContentParagraph:
<p class=""text-lg leading-relaxed mb-4"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
A simple paragraph of text that is responsive, accessible, and readable on various devices.
COMPONENTS:
- ContentParagraph: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ContentParagraph/></div>
COMPONENT HTML:
ContentParagraph:
<p class=""text-lg leading-relaxed mb-4"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
A simple paragraph of text that is responsive, accessible, and readable on various devices.
COMPONENTS:
- ContentParagraph: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ContentParagraph/></div>
COMPONENT HTML:
ContentParagraph:
<p class=""text-lg leading-relaxed mb-4"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
Page Content Paragraph,"DESCRIPTION:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
COMPONENTS:
- Paragraph: A standalone component that displays a paragraph of text.
HTML:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
COMPONENT HTML:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
"Styled quotation displayed within the flow of text, often with distinct formatting","DESCRIPTION:
The UI should display a quotation in a distinct style, often with an italic font, and possibly with quotation marks. The quotation should be displayed within the flow of text.
COMPONENTS:
- Quotation: A standalone component that displays a quotation.
HTML:
<p>This is a sample text with a <Quotation/>within.
</p>
COMPONENT HTML:
Quotation:
<span class=""italic font-semibold text-lg"">{quotation_text}</span>"
"Styled quotation displayed within the flow of text, often with distinct formatting","DESCRIPTION:
The UI should display a quotation in a distinct style, often with an italic font, and possibly with quotation marks. The quotation should be displayed within the flow of text.
COMPONENTS:
- Quotation: A standalone component that displays a quotation.
HTML:
<p>This is a sample text with a <Quotation/>within.
</p>
COMPONENT HTML:
Quotation:
<span class=""italic font-semibold text-lg"">{quotation_text}</span>"
"Styled quotation displayed within the flow of text, often with distinct formatting","DESCRIPTION:
The UI should display a quotation in a distinct style, often with an italic font, and possibly with quotation marks. The quotation should be displayed within the flow of text.
COMPONENTS:
- Quotation: A standalone component that displays a quotation.
HTML:
<p>This is a sample text with a <Quotation/>within.
</p>
COMPONENT HTML:
Quotation:
<span class=""italic font-semibold text-lg"">{quotation_text}</span>"
Semantic HTML5 Markup,"DESCRIPTION:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
COMPONENTS:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Semantic HTML5 Markup,"DESCRIPTION:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
COMPONENTS:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Semantic HTML5 Markup,"DESCRIPTION:
A basic HTML5 document structure with semantic meaning, containing a header, navigation, main content area, sidebar, and footer.
COMPONENTS:
- HeaderComponent: - standalone
- NavComponent: - standalone
- MainComponent: - takes children
- SidebarComponent: - standalone
- FooterComponent: - standalone
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{document_title}</title></head><body><HeaderComponent/><NavComponent/><main><MainComponent><!-- Main content area --></MainComponent></main><aside><SidebarComponent/></aside><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-gray-200 p-4""><h1>{header_title}</h1></header>
NavComponent:
<nav class=""flex justify-between p-4 bg-gray-200""><ul class=""flex""><li><a href=""#"" class=""text-gray-600"">{nav_item_1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_item_2}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_item_3}</a></li></ul></nav>
MainComponent:
<div class=""p-4"">{children}</div>
SidebarComponent:
<aside class=""bg-gray-200 p-4""><h2>{sidebar_title}</h2><ul><li>{sidebar_item_1}</li><li>{sidebar_item_2}</li><li>{sidebar_item_3}</li></ul></aside>
FooterComponent:
<footer class=""bg-gray-200 p-4""><p>&copy; {current_year} {footer_text}</p></footer>"
Semantic HTML5 Markup,"DESCRIPTION:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
COMPONENTS:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Semantic HTML5 Markup,"DESCRIPTION:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
COMPONENTS:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
HTML:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
COMPONENT HTML:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Callout Box Background Image,"DESCRIPTION:
The UI should be a callout box with a background image, having a heading, description, and a call-to-action button. The background image should be responsive and adapt to different screen sizes.
COMPONENTS:
- CalloutBox: A standalone component that wraps the entire callout box.
- CalloutHeader: A standalone component that contains the heading and description.
- CalloutButton: A standalone component that contains the call-to-action button.
HTML:
<div class=""container mx-auto p-4""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""relative bg-cover bg-center h-full"" style={{ backgroundImage: `url(${background_image_url})` }}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div><CalloutHeader/><CalloutButton/></div>
CalloutHeader:
<div class=""absolute bottom-0 left-0 p-4 mb-4""><h2 class=""text-2xl font-bold"">{heading}</h2><p class=""text-lg"">{description}</p></div>
CalloutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Callout Box Background Image,"DESCRIPTION:
The UI should be a callout box with a background image, having a heading, description, and a call-to-action button. The background image should be responsive and adapt to different screen sizes.
COMPONENTS:
- CalloutBox: A standalone component that wraps the entire callout box.
- CalloutHeader: A standalone component that contains the heading and description.
- CalloutButton: A standalone component that contains the call-to-action button.
HTML:
<div class=""container mx-auto p-4""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""relative bg-cover bg-center h-full"" style={{ backgroundImage: `url(${background_image_url})` }}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div><CalloutHeader/><CalloutButton/></div>
CalloutHeader:
<div class=""absolute bottom-0 left-0 p-4 mb-4""><h2 class=""text-2xl font-bold"">{heading}</h2><p class=""text-lg"">{description}</p></div>
CalloutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Callout Box Background Image,"DESCRIPTION:
The UI should be a callout box with a background image, having a heading, description, and a call-to-action button. The background image should be responsive and adapt to different screen sizes.
COMPONENTS:
- CalloutBox: A standalone component that wraps the entire callout box.
- CalloutHeader: A standalone component that contains the heading and description.
- CalloutButton: A standalone component that contains the call-to-action button.
HTML:
<div class=""container mx-auto p-4""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""relative bg-cover bg-center h-full"" style={{ backgroundImage: `url(${background_image_url})` }}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div><CalloutHeader/><CalloutButton/></div>
CalloutHeader:
<div class=""absolute bottom-0 left-0 p-4 mb-4""><h2 class=""text-2xl font-bold"">{heading}</h2><p class=""text-lg"">{description}</p></div>
CalloutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Header Search Button,"DESCRIPTION:
A navigation header with a search button that is responsive, mobile-first, and accessible.
COMPONENTS:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
HTML:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
COMPONENT HTML:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Header Search Button,"DESCRIPTION:
A navigation header with a search button that is responsive, mobile-first, and accessible.
COMPONENTS:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
HTML:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
COMPONENT HTML:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Header Search Button,"DESCRIPTION:
A navigation header with a search button that is responsive, mobile-first, and accessible.
COMPONENTS:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
HTML:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
COMPONENT HTML:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Header Search Button,"DESCRIPTION:
A navigation header with a search button that is responsive, mobile-first, and accessible.
COMPONENTS:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
HTML:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
COMPONENT HTML:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Featured Product Price Tag,"DESCRIPTION:
The UI should display a featured product price tag with a discounted price, original price, and a percentage discount. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeaturedPriceTag: (standalone): Display the featured product price tag.
- DiscountBadge: (standalone): Display the percentage discount badge.
HTML:
<div class=""flex flex-wrap items-center mb-4""><FeaturedPriceTag/></div>
COMPONENT HTML:
FeaturedPriceTag:
<div class=""bg-gray-100 p-2 rounded""><p class=""text-lg font-bold"">{newPrice}</p><p class=""text-gray-500 line-through"">{originalPrice}</p><DiscountBadge/></div>
DiscountBadge:
<span class=""bg-orange-200 text-orange-600 px-2 py-1 rounded"">{discountPercentage}% off</span>"
Featured Product Price Tag,"DESCRIPTION:
The UI should display a featured product price tag with a discounted price, original price, and a percentage discount. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeaturedPriceTag: (standalone): Display the featured product price tag.
- DiscountBadge: (standalone): Display the percentage discount badge.
HTML:
<div class=""flex flex-wrap items-center mb-4""><FeaturedPriceTag/></div>
COMPONENT HTML:
FeaturedPriceTag:
<div class=""bg-gray-100 p-2 rounded""><p class=""text-lg font-bold"">{newPrice}</p><p class=""text-gray-500 line-through"">{originalPrice}</p><DiscountBadge/></div>
DiscountBadge:
<span class=""bg-orange-200 text-orange-600 px-2 py-1 rounded"">{discountPercentage}% off</span>"
Integrations Hub: Connect third-party apps,"DESCRIPTION:
The UI should be a card-based layout that displays a list of integrations. Each card should have a logo of the third-party app, a brief description, and a Connect button. The layout should be responsive, with the cards stacking vertically on mobile devices and displaying in a grid on larger screens.
COMPONENTS:
- IntegrationCard: A standalone component that represents a single integration.
- IntegrationsList: A component that takes children (IntegrationCard components) and displays them in a responsive grid.
HTML:
<section class=""container mx-auto p-4 pt-6 pb-10""><h1 class=""text-3xl font-bold mb-4"">Integrations Hub</h1><IntegrationsList><IntegrationCard/><IntegrationCard/><!-- Repeat IntegrationCard components for each integration --></IntegrationsList></section>
COMPONENT HTML:
IntegrationCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 hover:shadow-lg""><div class=""flex items-center mb-2""><img src=""{integration_logo_url}"" alt=""{integration_name}"" class=""w-8 h-8 mr-2""/><h2 class=""text-lg font-bold"">{integration_name}</h2></div><p class=""text-gray-600"">{integration_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Connect</button></div>
IntegrationsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Integrations Hub: Connect third-party apps,"DESCRIPTION:
The UI should be a card-based layout that displays a list of integrations. Each card should have a logo of the third-party app, a brief description, and a Connect button. The layout should be responsive, with the cards stacking vertically on mobile devices and displaying in a grid on larger screens.
COMPONENTS:
- IntegrationCard: A standalone component that represents a single integration.
- IntegrationsList: A component that takes children (IntegrationCard components) and displays them in a responsive grid.
HTML:
<section class=""container mx-auto p-4 pt-6 pb-10""><h1 class=""text-3xl font-bold mb-4"">Integrations Hub</h1><IntegrationsList><IntegrationCard/><IntegrationCard/><!-- Repeat IntegrationCard components for each integration --></IntegrationsList></section>
COMPONENT HTML:
IntegrationCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 hover:shadow-lg""><div class=""flex items-center mb-2""><img src=""{integration_logo_url}"" alt=""{integration_name}"" class=""w-8 h-8 mr-2""/><h2 class=""text-lg font-bold"">{integration_name}</h2></div><p class=""text-gray-600"">{integration_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Connect</button></div>
IntegrationsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote text with a LARGE font size, light color text on a darker background, and have some padding around it to make it stand out.
COMPONENTS:
- TestimonialQuoteText: standalone component that displays the testimonial quote text.
HTML:
<div class=""bg-neutral-800 p-4 mb-4""><TestimonialQuoteText/></div>
COMPONENT HTML:
TestimonialQuoteText:
<quote class=""text-3xl font-bold text-white"">{testimonial_text}</quote>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote text with a LARGE font size, light color text on a darker background, and have some padding around it to make it stand out.
COMPONENTS:
- TestimonialQuoteText: standalone component that displays the testimonial quote text.
HTML:
<div class=""bg-neutral-800 p-4 mb-4""><TestimonialQuoteText/></div>
COMPONENT HTML:
TestimonialQuoteText:
<quote class=""text-3xl font-bold text-white"">{testimonial_text}</quote>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote text with a LARGE font size, light color text on a darker background, and have some padding around it to make it stand out.
COMPONENTS:
- TestimonialQuoteText: standalone component that displays the testimonial quote text.
HTML:
<div class=""bg-neutral-800 p-4 mb-4""><TestimonialQuoteText/></div>
COMPONENT HTML:
TestimonialQuoteText:
<quote class=""text-3xl font-bold text-white"">{testimonial_text}</quote>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a testimonial quote with a quote text, an author name, and an optional occupation and organization. The quote text should be displayed prominently, and the author information should be displayed below the quote text.
COMPONENTS:
- TestimonialQuote: Standalone component that displays the quote text.
- AuthorInfo: Component that displays the author name, occupation, and organization. Takes children.
- AuthorName: Standalone component that displays the author name.
- AuthorDetails: Standalone component that displays the occupation and organization.
HTML:
<div class=""flex flex-col items-center""><TestimonialQuote/><AuthorInfo><AuthorName/><AuthorDetails/></AuthorInfo></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg font-serif italic mb-4"">{quote_text}</blockquote>
AuthorInfo:
<div class=""flex items-center mb-2"">{children}</div>
AuthorName:
<p class=""text-base font-bold"">{author_name}</p>
AuthorDetails:
<p class=""text-sm text-gray-600"">{occupation} at {organization}</p>"
Testimonial Quote Text,"DESCRIPTION:
The UI should display a quote from a person, with their name and occupation below the quote. The quote should be the main focus, with the person's information secondary. The UI should be responsive and accessible.
COMPONENTS:
- QuoteText: standalone, displays the quote text
- PersonInfo: standalone, displays the person's name and occupation
- Testimonial: takes children, contains the quote text and person information
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Testimonial><QuoteText/><PersonInfo/></Testimonial></div>
COMPONENT HTML:
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">""{quote_text}""</blockquote>
PersonInfo:
<div class=""text-gray-600""><p class=""font-bold"">{person_name}</p><p class=""text-sm"">{person_occupation}</p></div>
Testimonial:
<div class=""flex flex-col items-center"">{children}</div>"
Testimonial Author Image,"DESCRIPTION:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
COMPONENTS:
- TestimonialAuthorImage: Standalone component
HTML:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
COMPONENT HTML:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Testimonial Author Image,"DESCRIPTION:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
COMPONENTS:
- TestimonialAuthorImage: Standalone component
HTML:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
COMPONENT HTML:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Testimonial Author Image,"DESCRIPTION:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
COMPONENTS:
- TestimonialAuthorImage: Standalone component
HTML:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
COMPONENT HTML:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Testimonial Author Image,"DESCRIPTION:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
COMPONENTS:
- TestimonialAuthorImage: Standalone component
HTML:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
COMPONENT HTML:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Warning or error message for invalid input,"DESCRIPTION:
The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an ""X"" icon to close the message.
COMPONENTS:
- ErrorMessage: (standalone): Displays the error message.
- CloseButton: (standalone): Displays an ""X"" icon to close the message.
HTML:
<div class=""bg-red-100 p-4 rounded mb-4""><ErrorMessage/><CloseButton/></div>
COMPONENT HTML:
ErrorMessage:
<p class=""text-red-700"">{error_message}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">&times;</button>"
Warning or error message for invalid input,"DESCRIPTION:
The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an ""X"" icon to close the message.
COMPONENTS:
- ErrorMessage: (standalone): Displays the error message.
- CloseButton: (standalone): Displays an ""X"" icon to close the message.
HTML:
<div class=""bg-red-100 p-4 rounded mb-4""><ErrorMessage/><CloseButton/></div>
COMPONENT HTML:
ErrorMessage:
<p class=""text-red-700"">{error_message}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">&times;</button>"
Warning or error message for invalid input,"DESCRIPTION:
The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an ""X"" icon to close the message.
COMPONENTS:
- ErrorMessage: (standalone): Displays the error message.
- CloseButton: (standalone): Displays an ""X"" icon to close the message.
HTML:
<div class=""bg-red-100 p-4 rounded mb-4""><ErrorMessage/><CloseButton/></div>
COMPONENT HTML:
ErrorMessage:
<p class=""text-red-700"">{error_message}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">&times;</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
The UI should be a simple search input field with a placeholder text and a submit button. The input field should be responsive and accessible.
COMPONENTS:
- SearchInput: (standalone)
- SearchButton: (standalone)
HTML:
<div class=""flex justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search within the website"" class=""w-full lg:w-1/2 xl:w-1/3 px-4 py-2 text-sm text-gray-700""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Text input field for users to search within the website,"DESCRIPTION:
A simple search input field with a placeholder and a submit button.
COMPONENTS:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Toolbar that appears contextually based on user actions or selections,"DESCRIPTION:
The UI should be a contextual toolbar that appears when a user selects an element or performs a specific action. The toolbar should be floating above the main content, with a subtle hover effect and a slight animation when it appears/disappears. It should be responsive, adjusting its position and size according to the screen size and device.
COMPONENTS:
- ContextualToolbar: The main toolbar component that appears contextually. It takes children.
- ToolbarItem: An individual item within the toolbar, such as a button or a dropdown. It takes children.
HTML:
<div class=""fixed top-0 left-0 z-10 w-full lg:w-auto lg:absolute lg:top-auto lg:left-auto lg:bottom-0 lg:right-0""><ContextualToolbar><ToolbarItem><button>Item 1</button></ToolbarItem><ToolbarItem><button>Item 2</button></ToolbarItem><ToolbarItem><button>Item 3</button></ToolbarItem></ContextualToolbar></div>
COMPONENT HTML:
ContextualToolbar:
<div class=""bg-white shadow-md rounded-lg p-2 lg:p-4""><ul class=""flex flex-wrap justify-center lg:flex-no-wrap"">{children} </ul></div>
ToolbarItem:
<li class=""mr-2 lg:mr-4"">{children}</li>"
Poll/Voting Systems,"DESCRIPTION:
A poll/voting system UI should display a question, several options to choose from, and the current voting results. It should also allow users to cast their votes.
COMPONENTS:
- PollQuestion: standalone, displays the question being asked
- PollOption: takes children, represents a single option with a vote count
- VoteButton: standalone, allows users to cast their vote
- VoteResults: takes children, displays the current voting results
HTML:
<div class=""flex flex-col gap-4""><PollQuestion/><div class=""flex flex-col gap-2""><PollOption>Option 1</PollOption><PollOption>Option 2</PollOption><PollOption>Option 3</PollOption></div><VoteButton/><VoteResults><p>Results:</p><ul><li>Option 1: {option1_votes} votes</li><li>Option 2: {option2_votes} votes</li><li>Option 3: {option3_votes} votes</li></ul></VoteResults></div>
COMPONENT HTML:
PollQuestion:
<h2 class=""text-2xl"">{question_text}</h2>
PollOption:
<div class=""flex items-center gap-2""><input type=""radio"" name=""poll_option"" id={`option_${option_id}`}/><label for={`option_${option_id}`}>{children}</label><span class=""text-gray-500"">{vote_count} votes</span></div>
VoteButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Cast Your Vote</button>
VoteResults:
<div class=""bg-gray-100 p-4 rounded"">{children}</div>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a list item that displays a product feature with an icon, a brief description, and a optional link to learn more. The component should be responsive and adaptable to different screen sizes.
COMPONENTS:
- ProductFeatureListItem: standalone component that displays a product feature.
- FeatureIcon: standalone component that displays an icon for the feature.
- LearnMoreLink: standalone component that displays a link to learn more about the feature.
HTML:
<ul class=""flex flex-col md:flex-row md:flex-wrap""><li class=""mb-4 md:w-1/2 xl:w-1/3""><ProductFeatureListItem/></li></ul>
COMPONENT HTML:
ProductFeatureListItem:
<div class=""flex items-center mb-2""><FeatureIcon/><div class=""ml-4""><h5 class=""text-lg"">{feature_name}</h5><p class=""text-gray-600"">{feature_description}</p>{learn_more_url && <LearnMoreLink/>} </div></div>
FeatureIcon:
<i class=""fas fa-{feature_icon} text-2xl text-gray-600""></i>
LearnMoreLink:
<a href=""{learn_more_url}"" class=""text-blue-600 hover:text-blue-900"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a list item that displays a product feature with an icon, a brief description, and a optional link to learn more. The component should be responsive and adaptable to different screen sizes.
COMPONENTS:
- ProductFeatureListItem: standalone component that displays a product feature.
- FeatureIcon: standalone component that displays an icon for the feature.
- LearnMoreLink: standalone component that displays a link to learn more about the feature.
HTML:
<ul class=""flex flex-col md:flex-row md:flex-wrap""><li class=""mb-4 md:w-1/2 xl:w-1/3""><ProductFeatureListItem/></li></ul>
COMPONENT HTML:
ProductFeatureListItem:
<div class=""flex items-center mb-2""><FeatureIcon/><div class=""ml-4""><h5 class=""text-lg"">{feature_name}</h5><p class=""text-gray-600"">{feature_description}</p>{learn_more_url && <LearnMoreLink/>} </div></div>
FeatureIcon:
<i class=""fas fa-{feature_icon} text-2xl text-gray-600""></i>
LearnMoreLink:
<a href=""{learn_more_url}"" class=""text-blue-600 hover:text-blue-900"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single list item representing a product feature, with an icon, a brief description, and a optional learn more link. The feature item should be responsive and adaptable to different screen sizes.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon representing the feature.
- FeatureDescription: A standalone component that displays a brief description of the feature.
- LearnMoreLink: A standalone component that displays a link to learn more about the feature.
HTML:
<li class=""flex items-center py-4""><FeatureIcon/><FeatureDescription/><LearnMoreLink/></li>
COMPONENT HTML:
FeatureIcon:
<i class=""w-6 h-6 text-gray-500 {icon_class}"" aria-hidden=""true""></i>
FeatureDescription:
<p class=""ml-4 text-gray-700"">{feature_description}</p>
LearnMoreLink:
<a class=""text-blue-600 hover:text-blue-800 transition duration-300 ease-in-out"" href=""{learn_more_url}"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
A single item in a list of product features, displaying an icon, a heading, and a brief description.
COMPONENTS:
- FeatureIcon: (standalone): Displaying an icon for the feature
- FeatureHeading: (standalone): Displaying the heading of the feature
- FeatureDescription: (standalone): Displaying a brief description of the feature
- FeatureListItem: (takes children): A container for a single feature item, comprising an icon, heading, and description.
HTML:
<ul class=""list-none mb-4""><li class=""flex items-center mb-4""><FeatureListItem><FeatureIcon/><FeatureHeading/><FeatureDescription/></FeatureListItem></li><!-- Add more list items here --></ul>
COMPONENT HTML:
FeatureIcon:
<i class=""text-lg text-gray-500"">{icon_name}</i>
FeatureHeading:
<h3 class=""text-lg font-bold"">{heading_text}</h3>
FeatureDescription:
<p class=""text-gray-600"">{description_text}</p>
FeatureListItem:
<div class=""flex items-center""><div class=""mr-4"">{children}</div><div class=""flex-1"">{children}</div></div>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a list item that displays a product feature with an icon, a brief description, and a optional link to learn more. The component should be responsive and adaptable to different screen sizes.
COMPONENTS:
- ProductFeatureListItem: standalone component that displays a product feature.
- FeatureIcon: standalone component that displays an icon for the feature.
- LearnMoreLink: standalone component that displays a link to learn more about the feature.
HTML:
<ul class=""flex flex-col md:flex-row md:flex-wrap""><li class=""mb-4 md:w-1/2 xl:w-1/3""><ProductFeatureListItem/></li></ul>
COMPONENT HTML:
ProductFeatureListItem:
<div class=""flex items-center mb-2""><FeatureIcon/><div class=""ml-4""><h5 class=""text-lg"">{feature_name}</h5><p class=""text-gray-600"">{feature_description}</p>{learn_more_url && <LearnMoreLink/>} </div></div>
FeatureIcon:
<i class=""fas fa-{feature_icon} text-2xl text-gray-600""></i>
LearnMoreLink:
<a href=""{learn_more_url}"" class=""text-blue-600 hover:text-blue-900"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single list item representing a product feature, with an icon, a brief description, and a optional learn more link. The feature item should be responsive and adaptable to different screen sizes.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon representing the feature.
- FeatureDescription: A standalone component that displays a brief description of the feature.
- LearnMoreLink: A standalone component that displays a link to learn more about the feature.
HTML:
<li class=""flex items-center py-4""><FeatureIcon/><FeatureDescription/><LearnMoreLink/></li>
COMPONENT HTML:
FeatureIcon:
<i class=""w-6 h-6 text-gray-500 {icon_class}"" aria-hidden=""true""></i>
FeatureDescription:
<p class=""ml-4 text-gray-700"">{feature_description}</p>
LearnMoreLink:
<a class=""text-blue-600 hover:text-blue-800 transition duration-300 ease-in-out"" href=""{learn_more_url}"">Learn more</a>"
Product Feature List Item,"DESCRIPTION:
A single item in a list of product features, displaying an icon, a heading, and a brief description.
COMPONENTS:
- FeatureIcon: (standalone): Displaying an icon for the feature
- FeatureHeading: (standalone): Displaying the heading of the feature
- FeatureDescription: (standalone): Displaying a brief description of the feature
- FeatureListItem: (takes children): A container for a single feature item, comprising an icon, heading, and description.
HTML:
<ul class=""list-none mb-4""><li class=""flex items-center mb-4""><FeatureListItem><FeatureIcon/><FeatureHeading/><FeatureDescription/></FeatureListItem></li><!-- Add more list items here --></ul>
COMPONENT HTML:
FeatureIcon:
<i class=""text-lg text-gray-500"">{icon_name}</i>
FeatureHeading:
<h3 class=""text-lg font-bold"">{heading_text}</h3>
FeatureDescription:
<p class=""text-gray-600"">{description_text}</p>
FeatureListItem:
<div class=""flex items-center""><div class=""mr-4"">{children}</div><div class=""flex-1"">{children}</div></div>"
Product Feature List Item,"DESCRIPTION:
A product feature list item should display an icon, a brief description, and a title, with adequate spacing and margin to separate it from other list items.
COMPONENTS:
- FeatureListItem: a standalone component representing a single list item.
- FeatureIcon: a standalone component displaying an icon.
- FeatureTitle: a standalone component displaying the title of the feature.
- FeatureDescription: a standalone component displaying the brief description of the feature.
HTML:
<ul class=""list-none mb-4""><FeatureListItem/><!-- Add more list items here --></ul>
COMPONENT HTML:
FeatureListItem:
<li class=""flex items-center mb-4""><FeatureIcon/><div class=""ml-4""><FeatureTitle/><FeatureDescription/></div></li>
FeatureIcon:
<i class=""text-xl {icon_class}""></i>
FeatureTitle:
<h3 class=""text-lg font-bold"">{feature_title}</h3>
FeatureDescription:
<p class=""text-gray-600"">{feature_description}</p>"
Product Feature List Item,"DESCRIPTION:
The UI should be a single item in a list of product features, showcasing a specific benefit of the product. It should display an icon, a brief description, and optional additional information.
COMPONENTS:
- ProductFeatureListItem: (standalone): represents a single item in the list of product features
- IconWrapper: (takes children): wraps an icon with a consistent styling
- FeatureDescription: (takes children): contains the description of the feature
- OptionalInfo: (takes children): displays additional information, if available
HTML:
<ul class=""flex flex-col gap-4""><ProductFeatureListItem/><!-- more list items --></ul>
COMPONENT HTML:
ProductFeatureListItem:
<li class=""flex items-center gap-2""><IconWrapper><i class={`{icon_class}`}></i></IconWrapper><FeatureDescription>{description}</FeatureDescription><OptionalInfo>{optional_info}</OptionalInfo></li>
IconWrapper:
<span class=""w-6 h-6 text-lg"">{children}</span>
FeatureDescription:
<p class=""text-lg"">{children}</p>
OptionalInfo:
<p class=""text-sm text-gray-600"">{children}</p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberDisplay: A standalone component that displays the company phone number.
HTML:
<div class=""flex justify-center""><PhoneNumberDisplay/></div>
COMPONENT HTML:
PhoneNumberDisplay:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_phone_number}</p>"
Company Phone Number,"DESCRIPTION:
The UI should display a company phone number in a clean and readable format, with a suitable icon and styling to make it easily identifiable as a phone number.
COMPONENTS:
- PhoneNumberItem: A standalone component that displays a phone number with an icon.
HTML:
<div class=""flex items-center""><PhoneNumberItem/></div>
COMPONENT HTML:
PhoneNumberItem:
<!-- phoneNumber is a string, e.g. ""+1 123 456 7890"" --><i class=""fas fa-phone text-gray-500 mr-2""></i><a href={`tel:${phoneNumber}`} class=""text-blue-600 hover:text-blue-800"">{phoneNumber}</a>"
Company Phone Number,"DESCRIPTION:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
COMPONENTS:
- PhoneNumberComponent: (standalone)
HTML:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
COMPONENT HTML:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
Featured Video Play Button,"DESCRIPTION:
The UI should display a play button overlaid on a featured video thumbnail, encouraging users to play the video.
COMPONENTS:
- FeaturedVideoThumbnail: standalone, displays the video thumbnail.
- PlayButton: standalone, displays a play button icon.
HTML:
<div class=""relative w-full h-full flex justify-center""><FeaturedVideoThumbnail/><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><PlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<img src={video_thumbnail_url} alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/>
PlayButton:
<button aria-label=""Play Video"" class=""bg-white rounded-full p-4 text-3xl font-bold""><i class=""fas fa-play text-lg"" aria-hidden=""true""></i></button>"
Featured Video Play Button,"DESCRIPTION:
A large play button overlay on top of a featured video thumbnail, with a hover effect to indicate that it's clickable.
COMPONENTS:
- FeaturedVideoPlayButton: standalone
HTML:
<!-- Container for the featured video thumbnail and play button --><div class=""relative h-full w-full""><!-- Featured video thumbnail --><img src=""{video_thumbnail_url}"" alt=""Featured video thumbnail"" class=""w-full h-full object-cover""
/><!-- Play button overlay --><div class=""absolute inset-0 flex items-center justify-center""><FeaturedVideoPlayButton/></div></div>
COMPONENT HTML:
FeaturedVideoPlayButton:
<!-- Play button with a hover effect --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md""><!-- Play icon --><i class=""fas fa-play text-lg"" aria-hidden=""true""></i><!-- Accessibility text for screen readers --><span class=""sr-only"">Play featured video</span></button>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
User profile summary and bio,"DESCRIPTION:
The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.
COMPONENTS:
- UserProfileSummary: A standalone component that displays the user's name and profile picture.
- UserProfileBio: A standalone component that displays the user's bio text.
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileSummary/><UserProfileBio/></div>
COMPONENT HTML:
UserProfileSummary:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-16 h-16 rounded-full mr-4""><h2 class=""text-lg font-bold"">{user_name}</h2></div>
UserProfileBio:
<p class=""text-gray-600 text-sm"">{bio_text}</p>"
Unobtrusive JavaScript,"DESCRIPTION:
A simple webpage with a heading, a paragraph of text, and a button that changes the text when clicked.
COMPONENTS:
- PageHeader: standalone
- PageContent: takes children
HTML:
<div class=""h-screen flex flex-col justify-center items-center""><PageHeader/><PageContent><p id=""text"">{initial_text}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Click me!</button></PageContent></div>
COMPONENT HTML:
PageHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">Unobtrusive JavaScript</h1></header>
PageContent:
<div class=""p-4"">{children}</div>"
User Profile and Reputation Systems,"DESCRIPTION:
The UI should display a user's profile information, including their profile picture, username, bio, and reputation score. The reputation score should be displayed prominently, with an option to view a breakdown of the score.
COMPONENTS:
- UserProfile: standalone component that contains the user's profile information
- UserProfilePicture: standalone component that displays the user's profile picture
- UserProfileInfo: standalone component that displays the user's username and bio
- ReputationScore: standalone component that displays the user's reputation score
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfile/></div>
COMPONENT HTML:
UserProfile:
<div class=""flex flex-col md:flex-row items-center md:items-start""><UserProfilePicture/><UserProfileInfo/><ReputationScore/></div>
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""rounded-full w-24 h-24 md:w-48 md:h-48 object-cover"">
UserProfileInfo:
<div class=""flex flex-col ml-4 md:ml-6""><h2 class=""text-lg"">{username}</h2><p class=""text-gray-600"">{bio}</p></div>
ReputationScore:
<div class=""text-lg font-bold flex items-center""><span class=""mr-2"">{reputation_score}</span><span class=""text-gray-600"">Reputation Score</span><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Breakdown</button></div>"
User Profile and Reputation Systems,"DESCRIPTION:
A user profile and reputation system that displays the user's profile information, reputation score, and badges earned.
COMPONENTS:
- UserProfileCard: standalone component
- BadgeList: takes children
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><UserProfileCard/><div class=""mt-4""><h2 class=""text-lg font-bold"">Reputation</h2><BadgeList><!-- badges will be inserted here --></BadgeList></div></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p><p class=""text-sm text-gray-500"">{joined_at}</p></div>
BadgeList:
<ul class=""flex flex-wrap"">{children}</ul>"
Forum Categories and Subforums,"DESCRIPTION:
The UI should display a list of forum categories, each containing a title and a list of subforums. Each subforum should also display a title and a brief description.
COMPONENTS:
- ForumCategory: standalone component that displays a category title and a list of subforums.
- Subforum: standalone component that displays a subforum title and description.
HTML:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Forum Categories</h1><ul><ForumCategory/><ForumCategory/><!-- Add more ForumCategory components here --></ul></div>
COMPONENT HTML:
ForumCategory:
<li class=""py-2""><h2 class=""text-lg font-bold"">{category_title}</h2><ul><Subforum/><Subforum/><!-- Add more Subforum components here --></ul></li>
Subforum:
<li class=""py-2""><h3 class=""text-md font-bold"">{subforum_title}</h3><p>{subforum_description}</p></li>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a responsive, mobile-first section that displays a person's interests and hobbies with accompanying icons. The section should have a clear and concise layout, with each interest or hobby listed in a grid or flexbox layout.
COMPONENTS:
- InterestItem: A standalone component that displays a single interest or hobby with an icon.
- InterestsSection: A component that takes children (multiple `InterestItem` components) and displays them in a grid or flexbox layout.
HTML:
<section class=""lg:grid lg:grid-cols-2 xl:grid-cols-3 max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsSection><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsSection></section>
COMPONENT HTML:
InterestItem:
<div class=""bg-white p-4 rounded shadow-md""><i class={`w-6 h-6 text-gray-500 {icon_name}`}></i><p class=""text-sm"">{interest_name}</p></div>
InterestsSection:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a responsive, mobile-first section that displays a person's interests and hobbies with accompanying icons. The section should have a clear and concise layout, with each interest or hobby listed in a grid or flexbox layout.
COMPONENTS:
- InterestItem: A standalone component that displays a single interest or hobby with an icon.
- InterestsSection: A component that takes children (multiple `InterestItem` components) and displays them in a grid or flexbox layout.
HTML:
<section class=""lg:grid lg:grid-cols-2 xl:grid-cols-3 max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsSection><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsSection></section>
COMPONENT HTML:
InterestItem:
<div class=""bg-white p-4 rounded shadow-md""><i class={`w-6 h-6 text-gray-500 {icon_name}`}></i><p class=""text-sm"">{interest_name}</p></div>
InterestsSection:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.
COMPONENTS:
- HobbyItem: A standalone component representing a single hobby or interest, with an icon and a label.
- HobbiesSection: A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests</h2><HobbiesSection><HobbyItem/><HobbyItem/><!-- more HobbyItem components here --></HobbiesSection></section>
COMPONENT HTML:
HobbyItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon_name}</span><p>{hobby_label}</p></div>
HobbiesSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Personal interests and hobbies section with icons,"DESCRIPTION:
The UI should display a list of personal interests and hobbies, each accompanied by an icon that represents the interest or hobby. The list should be responsive, with a maximum of 3 items per row on larger screens, and a single column on mobile devices.
COMPONENTS:
- InterestItem: (standalone): Represents a single interest or hobby, consisting of an icon and a label.
- InterestsList: (takes children): A container for a list of `InterestItem`s.
HTML:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsList><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsList></section>
COMPONENT HTML:
InterestItem:
<div class=""flex items-center mb-4""><i class={`w-6 h-6 text-lg {icon_class}`}></i><span class=""ml-2"">{interest_label}</span></div>
InterestsList:
<ul class=""flex flex-wrap justify-center md:flex-nowrap md:flex-row"">{children}</ul>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Dividers/Section Separators,"DESCRIPTION:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
COMPONENTS:
- SectionSeparator: a standalone component that renders a horizontal divider
HTML:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
COMPONENT HTML:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Responsive Filtering and Sorting,"DESCRIPTION:
A responsive filtering and sorting UI that adapts to different screen sizes, with a search bar, a filtering section, a sorting section, and a list of items.
COMPONENTS:
- SearchBar: (standalone) - a search bar component
- FilterSection: (takes children) - a filtering section component that takes filter options as children
- FilterOption: (standalone) - a single filter option component
- SortingSection: (takes children) - a sorting section component that takes sorting options as children
- SortingOption: (standalone) - a single sorting option component
- ItemList: (takes children) - a list of items component that takes individual items as children
- Item: (standalone) - a single item component
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SearchBar/><div class=""flex flex-wrap -mx-4""><FilterSection><FilterOption/><FilterOption/></FilterSection><SortingSection><SortingOption/><SortingOption/></SortingSection></div><ItemList><Item/><Item/></ItemList></div>
COMPONENT HTML:
SearchBar:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search...""/>
FilterSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pr-6"">{children}</div>
FilterOption:
<label class=""block text-gray-600""><input type=""checkbox"" class=""mr-2""/>{filter_name}</label>
SortingSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pl-6"">{children}</div>
SortingOption:
<button class=""bg-white hover:bg-gray-100 text-gray-600 py-2 px-4 border border-gray-300 rounded"">{sorting_option_name}</button>
ItemList:
<ul class=""list-none p-0 m-0"">{children}</ul>
Item:
<li class=""py-4 px-4 border-b border-gray-200""><h2 class=""text-lg"">{item_name}</h2><p>{item_description}</p></li>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A profile picture with a dropdown menu that appears when the profile picture is clicked. The dropdown menu should contain several options.
COMPONENTS:
- ProfilePicture: (standalone)
- DropdownMenu: (takes children)
- MenuItem: (standalone)
HTML:
<div class=""flex justify-end""><ProfilePicture/><DropdownMenu><MenuItem/><MenuItem/><MenuItem/></DropdownMenu></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} class=""w-8 h-8 rounded-full cursor-pointer""/>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md"">{children}</div>
MenuItem:
<a href={menu_item_url} class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">{menu_item_text}</a>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Profile picture with dropdown menu options,"DESCRIPTION:
A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.
COMPONENTS:
- UserProfilePicture: (standalone)
- DropdownMenu: (takes children)
HTML:
<div class=""lg:flex justify-end mb-4""><UserProfilePicture/><DropdownMenu><!-- dropdown menu options will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
UserProfilePicture:
<div class=""h-12 w-12 rounded-full overflow-hidden""><img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""h-full w-full object-cover""/></div>
DropdownMenu:
<div class=""hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md"">{children}</div>"
Header Navigation Toggle,"DESCRIPTION:
The UI should be a responsive header navigation toggle, which is a common design pattern for mobile-first navigation. The toggle should be accessible and SEO-friendly.
COMPONENTS:
- Header: standalone component
- NavToggle: standalone component
- Nav: takes children
HTML:
<header class=""bg-gray-200 py-4 lg:py-8""><div class=""container mx-auto px-4 lg:px-8""><Header/><NavToggle/><Nav><!-- navigation items will be inserted here --></Nav></div></header>
COMPONENT HTML:
Header:
<h1 class=""text-2xl font-bold"">{site_title}</h1>
NavToggle:
<button class=""lg:hidden"" aria-label=""Navigation toggle""><span class=""sr-only"">Toggle navigation</span><i class=""fas fa-bars text-lg""></i></button>
Nav:
<nav class=""lg:flex lg:flex-wrap lg:justify-end"">{children}</nav>"
Header Navigation Toggle,"DESCRIPTION:
The UI should be a responsive header navigation toggle, which is a common design pattern for mobile-first navigation. The toggle should be accessible and SEO-friendly.
COMPONENTS:
- Header: standalone component
- NavToggle: standalone component
- Nav: takes children
HTML:
<header class=""bg-gray-200 py-4 lg:py-8""><div class=""container mx-auto px-4 lg:px-8""><Header/><NavToggle/><Nav><!-- navigation items will be inserted here --></Nav></div></header>
COMPONENT HTML:
Header:
<h1 class=""text-2xl font-bold"">{site_title}</h1>
NavToggle:
<button class=""lg:hidden"" aria-label=""Navigation toggle""><span class=""sr-only"">Toggle navigation</span><i class=""fas fa-bars text-lg""></i></button>
Nav:
<nav class=""lg:flex lg:flex-wrap lg:justify-end"">{children}</nav>"
Header Navigation Toggle,"DESCRIPTION:
The UI should be a responsive header navigation toggle, which is a common design pattern for mobile-first navigation. The toggle should be accessible and SEO-friendly.
COMPONENTS:
- Header: standalone component
- NavToggle: standalone component
- Nav: takes children
HTML:
<header class=""bg-gray-200 py-4 lg:py-8""><div class=""container mx-auto px-4 lg:px-8""><Header/><NavToggle/><Nav><!-- navigation items will be inserted here --></Nav></div></header>
COMPONENT HTML:
Header:
<h1 class=""text-2xl font-bold"">{site_title}</h1>
NavToggle:
<button class=""lg:hidden"" aria-label=""Navigation toggle""><span class=""sr-only"">Toggle navigation</span><i class=""fas fa-bars text-lg""></i></button>
Nav:
<nav class=""lg:flex lg:flex-wrap lg:justify-end"">{children}</nav>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
A list of teaser articles, with a title, image, and short summary. Should be responsive and look good on desktop and mobile.
COMPONENTS:
- PostTeaser: (standalone) - a single post teaser component
- PostList: (takes children) - the container for the list of post teasers
HTML:
<div class=""max-w-md mx-auto p-4""><h2>Latest Articles</h2><PostList><PostTeaser/><PostTeaser/><PostTeaser/></PostList></div>
COMPONENT HTML:
PostTeaser:
<article class=""mb-4 p-4 border border-gray-200 rounded""><img src={image_url} alt={post_title} class=""w-full h-48 object-cover rounded-t""/><h3 class=""text-lg font-bold"">{post_title}</h3><p class=""text-sm"">{post_summary}</p><a href={post_url} class=""text-indigo-600 hover:text-indigo-900"">Read more</a></article>
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a ""Read more"" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.
COMPONENTS:
- ArticleTeaser: (standalone) - A single article teaser component.
- PostList: (takes children) - A container component for the list of article teasers.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Latest Articles</h2><div class=""flex flex-wrap -mx-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components as needed --></PostList></div></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold mb-2"">{article_title}</h3><p class=""text-gray-600"">{article_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read more</button></div>
PostList:
<div class=""flex flex-wrap"">{children}</div>"
Post List: Teasers for latest articles,"DESCRIPTION:
The UI should be a list of article teasers, displaying the title, a brief summary, and a link to read more. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.
COMPONENTS:
- ArticleTeaser: (standalone): A single article teaser, containing a title, summary, and read more link.
- PostList: (takes children): A list of article teasers.
HTML:
<div class=""container mx-auto p-4""><PostList><ArticleTeaser/><ArticleTeaser/><ArticleTeaser/><!-- Add more ArticleTeaser components here --></PostList></div>
COMPONENT HTML:
ArticleTeaser:
<div class=""md:flex mb-4""><h2 class=""text-lg font-bold"">{article_title}</h2><p class=""text-gray-600"">{article_summary}</p><a href=""{article_link}"" class=""text-blue-600 hover:text-blue-900"">Read more</a></div>
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should be a responsive, mobile-first design that displays a list of game reviews with their corresponding ratings. Each review should include the game title, rating, and a brief review text. The UI should be accessible and SEO-friendly.
COMPONENTS:
- GameReviewsList: (takes children): A list of game reviews that wraps the `GameReviewCard` components.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameReviewsList><!-- list of GameReviewCard components will be inserted here --></GameReviewsList></div>
COMPONENT HTML:
GameReviewsList:
<ul class=""list-none mb-0""><!-- {children} will be inserted here --></ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, along with the game title, reviewer's name, and the review text.
COMPONENTS:
- GameReviewCard: standalone component that displays a single game review.
- GameReviewList: takes children (a list of `GameReviewCard` components).
HTML:
<div class=""container mx-auto p-4""><h2 class=""text-2xl mb-4"">Game Reviews</h2><GameReviewList/></div>
COMPONENT HTML:
GameReviewCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{gameTitle}</h3><p>By {reviewerName}</p><p class=""text-gray-600"">{reviewText}</p><p>Rating: {rating}/5</p></div>
GameReviewList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
Game Reviews and Ratings,"DESCRIPTION:
The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.
COMPONENTS:
- GameRatingsList: (Takes children): A container component that holds a list of `GameReviewCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Game Reviews and Ratings</h1><GameRatingsList><!-- List of GameReviewCard components will be rendered here --></GameRatingsList></main>
COMPONENT HTML:
GameRatingsList:
<ul class=""list-none"">{children}</ul>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
"Container for content, typically featuring an image, title, and brief description","DESCRIPTION:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
COMPONENTS:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
HTML:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
COMPONENT HTML:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display a bidding/auction function with a countdown timer, a current bid indicator, a ""Place Bid"" button, and a list of previous bids. The design should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- AuctionTimer: standalone component to display the countdown timer
- CurrentBidIndicator: standalone component to display the current bid
- PlaceBidButton: standalone component for the ""Place Bid"" button
- BidHistoryList: component that takes children to display the list of previous bids
- AuctionContainer: component that takes children to wrap the entire bidding/auction function UI
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionContainer><AuctionTimer/><CurrentBidIndicator/><PlaceBidButton/><BidHistoryList><!-- list of previous bids will be rendered here --></BidHistoryList></AuctionContainer></div>
COMPONENT HTML:
AuctionTimer:
<div class=""text-2xl font-bold"">{time_left} seconds left</div>
CurrentBidIndicator:
<div class=""text-lg"">{current_bid} by {highest_bidder}</div>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>
BidHistoryList:
<ul>{children}</ul>
AuctionContainer:
<div class=""shadow-md p-4 bg-white rounded"">{children}</div>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- AuctionItemCard: (standalone): displays the auction item with its details
- AuctionDetails: (standalone): displays the auction item details
- CurrentBid: (standalone): displays the current bid
- BiddingForm: (takes children): allows users to place a bid
- BidInput: (standalone): a input field for the bid amount
- PlaceBidButton: (standalone): a button to submit the bid
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionItemCard/><div class=""flex flex-wrap justify-between mb-4""><AuctionDetails/><CurrentBid/></div><BiddingForm><BidInput/><PlaceBidButton/></BiddingForm></div>
COMPONENT HTML:
AuctionItemCard:
<div class=""bg-white border border-gray-200 rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{item_name}</h2><p class=""text-gray-600"">{item_description}</p></div>
AuctionDetails:
<div class=""text-gray-600""><p>Ends: {auction_end_date}</p><p>Category: {category}</p></div>
CurrentBid:
<div class=""text-lg font-bold"">{current_bid_amount} {currency}</div>
BiddingForm:
<form class=""flex flex-wrap"">{children}</form>
BidInput:
<input type=""number"" class=""w-full p-2 border border-gray-200"" value={bid_amount}/>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>"
Bidding/Auction Functions,"DESCRIPTION:
The UI should display a list of auctions, with each auction showing its title, current price, bidding information, and a ""Place Bid"" button. The bidding information should include the current highest bidder and the number of bids. The UI should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- AuctionCard: A standalone component representing a single auction.
- BidInfo: A standalone component displaying the current highest bidder and number of bids.
- PlaceBidButton: A standalone component for the ""Place Bid"" button.
- AuctionList: A component that takes children, displaying a list of auctions.
HTML:
<div class=""max-w-md mx-auto p-4""><AuctionList><AuctionCard/><AuctionCard/><!-- Add more auction cards here --></AuctionList></div>
COMPONENT HTML:
AuctionCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{auction_title}</h2><p class=""text-gray-600"">{auction_description}</p><BidInfo/><PlaceBidButton/></div>
BidInfo:
<p class=""text-sm text-gray-600 mb-2"">Current bid: {current_bid} by {highest_bidder_name} ({num_bids} bids)</p>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>
AuctionList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
COMPONENTS:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
COMPONENTS:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
A horizontal row of social media buttons to share a video, with each button displaying the logo of the respective platform (e.g. Facebook, Twitter, LinkedIn, etc.).
COMPONENTS:
- SocialMediaButton: (standalone) - a single button for a specific social media platform
- VideoShareButtons: (takes children) - a container for the social media buttons
HTML:
<div class=""flex justify-center mb-4""><VideoShareButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/></VideoShareButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{platform_logo_url}"" alt=""{platform_name} logo"" class=""w-8 h-8 rounded-full hover:opacity-75""/></a>
VideoShareButtons:
<div class=""flex space-x-2"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
COMPONENTS:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
COMPONENTS:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Video sharing buttons for social media,"DESCRIPTION:
The UI should have a horizontal row of social media sharing buttons for a video, with each button representing a different platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive and adaptable to different screen sizes.
COMPONENTS:
- SocialMediaButton: a standalone component representing a single social media platform's sharing button.
- SocialMediaShareBar: a component that takes children, which is the container for all social media buttons.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SocialMediaShareBar><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- add more social media buttons here --></SocialMediaShareBar></div>
COMPONENT HTML:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer""><img src=""{icon_url}"" alt=""{platform_name}"" class=""w-8 h-8 mr-2""><span class=""text-sm"">{platform_name}</span></a>
SocialMediaShareBar:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
COMPONENTS:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
COMPONENT HTML:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Thread Favorites and Watching,"DESCRIPTION:
The UI should display a list of threads that the user has favorited or is watching, with each thread showing its title, a brief description, and buttons to unfavorite or unwatch.
COMPONENTS:
- ThreadList: (takes children) - A container for the list of thread cards.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Favorites and Watched Threads</h1><ThreadList><!-- thread cards will be inserted here --></ThreadList></div>
COMPONENT HTML:
ThreadList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Button that switches between two states or options when clicked,"DESCRIPTION:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
COMPONENT HTML:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Button that switches between two states or options when clicked,"DESCRIPTION:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
COMPONENT HTML:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Button that switches between two states or options when clicked,"DESCRIPTION:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
COMPONENT HTML:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Button that switches between two states or options when clicked,"DESCRIPTION:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
COMPONENT HTML:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should display a list of product features, each represented by an icon and a brief description. The list should be responsive, mobile-first, and accessible. The icons should be prominently displayed, with the descriptions below each icon.
COMPONENTS:
- IconItem: A standalone component representing a single feature icon and its description.
- FeatureList: A component that takes children, wrapping the list of `IconItem` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><FeatureList><IconItem/><IconItem/><IconItem/><!-- Add more IconItem components as needed --></FeatureList></div>
COMPONENT HTML:
IconItem:
<div class=""flex mb-4 lg:mb-6""><div class=""mr-4 lg:mr-6""><i aria-hidden=""true"" class={`fas fa-${icon_name} text-3xl lg:text-4xl`}></i></div><div class=""text-sm lg:text-base""><p class=""font-bold"">{feature_name}</p><p class=""text-gray-600"">{feature_description}</p></div></div>
FeatureList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of product features, each represented by an icon and a brief description. The list should be responsive, with a maximum of 3 items per row on desktop and 1 item per row on mobile. The icons should be large and prominent, with a subtle hover effect.
COMPONENTS:
- FeatureIconListItem: (standalone): represents a single feature icon and description
- FeatureIconList: (takes children): a container for a list of `FeatureIconListItem`s
HTML:
<div class=""container mx-auto p-4""><FeatureIconList><FeatureIconListItem/><FeatureIconListItem/><FeatureIconListItem/><!-- add more items here --></FeatureIconList></div>
COMPONENT HTML:
FeatureIconListItem:
<div class=""flex flex-col items-center p-4 md:w-1/3""><i class={`fa ${icon_class}`}></i><p class=""text-sm"">{feature_description}</p></div>
FeatureIconList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should display a list of product features, each represented by an icon and a brief description. The list should be responsive, mobile-first, and accessible. The icons should be prominently displayed, with the descriptions below each icon.
COMPONENTS:
- IconItem: A standalone component representing a single feature icon and its description.
- FeatureList: A component that takes children, wrapping the list of `IconItem` components.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><FeatureList><IconItem/><IconItem/><IconItem/><!-- Add more IconItem components as needed --></FeatureList></div>
COMPONENT HTML:
IconItem:
<div class=""flex mb-4 lg:mb-6""><div class=""mr-4 lg:mr-6""><i aria-hidden=""true"" class={`fas fa-${icon_name} text-3xl lg:text-4xl`}></i></div><div class=""text-sm lg:text-base""><p class=""font-bold"">{feature_name}</p><p class=""text-gray-600"">{feature_description}</p></div></div>
FeatureList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of product features, each represented by an icon and a brief description. The list should be responsive, with a maximum of 3 items per row on desktop and 1 item per row on mobile. The icons should be large and prominent, with a subtle hover effect.
COMPONENTS:
- FeatureIconListItem: (standalone): represents a single feature icon and description
- FeatureIconList: (takes children): a container for a list of `FeatureIconListItem`s
HTML:
<div class=""container mx-auto p-4""><FeatureIconList><FeatureIconListItem/><FeatureIconListItem/><FeatureIconListItem/><!-- add more items here --></FeatureIconList></div>
COMPONENT HTML:
FeatureIconListItem:
<div class=""flex flex-col items-center p-4 md:w-1/3""><i class={`fa ${icon_class}`}></i><p class=""text-sm"">{feature_description}</p></div>
FeatureIconList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should display a list of product features, with each feature represented by an icon and a brief description. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and a brief description of a product feature.
- FeatureIconList: A component that takes children and displays a list of `FeatureIcon` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></div>
COMPONENT HTML:
FeatureIcon:
<div class=""flex items-center mb-4""><div class=""w-12 h-12 p-2 mr-4 bg-gray-200 rounded-full""><i class=""fas {icon_class}"" aria-hidden=""true""></i></div><p class=""text-gray-600"">{feature_description}</p></div>
FeatureIconList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
COMPONENTS:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
HTML:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
COMPONENT HTML:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Product Feature Icon List,"DESCRIPTION:
The UI should be a responsive list of icons, each representing a product feature, with a brief description. The icons should be displayed in a grid on larger screens and stacked on smaller screens.
COMPONENTS:
- ProductFeatureIcon: A standalone component that represents a single product feature icon with a description.
- ProductFeatureIconList: A component that takes children, which is a list of ProductFeatureIcon components.
HTML:
<section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><ProductFeatureIconList><ProductFeatureIcon/><ProductFeatureIcon/><ProductFeatureIcon/><!-- Add more ProductFeatureIcon components as needed --></ProductFeatureIconList></section>
COMPONENT HTML:
ProductFeatureIcon:
<div class=""flex items-center mb-4 gap-2""><i class=""text-lg"">{icon_class}</i><div><p class=""text-sm"">{feature_name}</p><p class=""text-xs text-gray-600"">{feature_description}</p></div></div>
ProductFeatureIconList:
<ul class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a list view of topics, with each topic displaying a title, description, and metadata such as author and timestamp. The list should be responsive, with a card-like design on larger screens and a condensed list on smaller screens.
COMPONENTS:
- TopicCard: Standalone component that displays a single topic.
- TopicList: Component that takes children (multiple `TopicCard`s) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4""><TopicList><TopicCard/><TopicCard/><!-- repeat for each topic --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""bg-white shadow-md rounded px-4 py-2 mb-4""><h2 class=""text-lg"">{topicTitle}</h2><p class=""text-gray-600"">{topicDescription}</p><p class=""text-sm text-gray-500"">By {authorName} on {timestamp}</p></div>
TopicList:
<ul class=""list-none mb-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a threaded view, with each topic showing the topic title, author, and timestamp. The list should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- TopicThread: standalone component to display a single topic thread
- Topic: standalone component to display a single topic
- TopicTitle: standalone component to display the topic title
- TopicMeta: standalone component to display the topic author and timestamp
- TopicReplies: standalone component to display the replies to a topic
- Reply: standalone component to display a single reply
HTML:
<div class=""container mx-auto p-4""><h1>Topic List</h1><ul class=""list-none mb-4""><TopicThread/><!-- more TopicThread components will be rendered here --></ul></div>
COMPONENT HTML:
TopicThread:
<li class=""mb-4""><Topic/><TopicReplies/></li>
Topic:
<div class=""flex justify-between mb-2""><TopicTitle/><TopicMeta/></div>
TopicTitle:
<h2 class=""text-lg"">{topic_title}</h2>
TopicMeta:
<p class=""text-gray-600"">{author_name} | {timestamp}</p>
TopicReplies:
<ul class=""list-none pl-4""><Reply/><!-- more Reply components will be rendered here --></ul>
Reply:
<li class=""mb-2""><TopicTitle/><TopicMeta/></li>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.
COMPONENTS:
- TopicList: (takes children): a container component that renders a list of `TopicCard` components.
HTML:
<div class=""container mx-auto p-4 md:p-6""><h1 class=""text-3xl font-bold"">Topics</h1><TopicList><!-- List of TopicCard components will be rendered here --></TopicList></div>
COMPONENT HTML:
TopicList:
<ul class=""flex flex-wrap -mx-4"">{children}</ul>"
Thread/List View of Topics,"DESCRIPTION:
The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.
COMPONENTS:
- TopicCard: A standalone component that displays a single topic.
- TopicList: A component that takes children (topic cards) and displays them in a list.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Topic List</h1><TopicList><TopicCard/><TopicCard/><!-- more topic cards here --></TopicList></div>
COMPONENT HTML:
TopicCard:
<div class=""flex flex-col p-4 mb-4 bg-white shadow-md rounded""><h2 class=""text-lg font-bold"">{topic_title}</h2><p class=""text-gray-600"">{topic_description}</p><div class=""text-gray-500 text-sm""><span>{replies_count} replies</span><span class=""mx-2"">|</span><span>{views_count} views</span></div></div>
TopicList:
<ul class=""list-none"">{children}</ul>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Social Media Profile,"DESCRIPTION:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
COMPONENTS:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Case Study and Description Text,"DESCRIPTION:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
COMPONENTS:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
COMPONENT HTML:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Graphic element showing the progress of a task or process,"DESCRIPTION:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProgressBar: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
COMPONENT HTML:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style={{ width: `${progress_percent}%` }}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
Featured Image Zoom Button,"DESCRIPTION:
The UI should display a featured image with a zoom button overlaid on top of it. When the zoom button is clicked, a larger version of the image should be displayed. The zoom button should be circular and have a zoom icon (+) in the center.
COMPONENTS:
- FeaturedImage: standalone, displays the featured image
- ZoomButton: standalone, displays the zoom button
HTML:
<div class=""relative""><FeaturedImage/><ZoomButton/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-full object-cover rounded-md""/>
ZoomButton:
<button class=""absolute bottom-4 right-4 rounded-full bg-white p-2 shadow-md""><span class=""text-2xl"">+</span></button>"
Featured Image Zoom Button,"DESCRIPTION:
The UI should display a featured image with a zoom button overlay on top of it. The zoom button should be a circular icon with a zoom-in icon inside. When hovered, the zoom button should change its background color and cursor to indicate interactivity.
COMPONENTS:
- FeaturedImage: Standalone component that displays the featured image.
- ZoomButton: Standalone component that displays the zoom button.
HTML:
<div class=""relative""><FeaturedImage/><ZoomButton/></div>
COMPONENT HTML:
FeaturedImage:
<img src=""{imageSrc}"" alt=""{imageAlt}"" class=""w-full h-full object-cover rounded-md""/>
ZoomButton:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gray-200 hover:bg-gray-300 rounded-full p-2 cursor-pointer""><span class=""fas fa-search-plus text-lg""></span></div>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Error/Success Messages,"DESCRIPTION:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
COMPONENTS:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
HTML:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
COMPONENT HTML:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
A download button with an adjacent print option, styled with a modern and minimalistic design.
COMPONENTS:
- ResumeDownloadButton: standalone component for the download button
- PrintOption: standalone component for the print option
HTML:
<div class=""flex gap-2""><ResumeDownloadButton/><PrintOption/></div>
COMPONENT HTML:
ResumeDownloadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Download Resume ({file_size})</button>
PrintOption:
<button class=""bg-gray-500 hover:bg-gray-700 text-gray-100 font-bold py-2 px-4 rounded"">Print</button>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.
COMPONENTS:
- DownloadResumeButton: a standalone component that renders a button with a dropdown menu.
- DropdownMenu: a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.
- DropdownItem: a standalone component that represents a single item in the dropdown menu.
HTML:
<div class=""flex justify-center""><DownloadResumeButton/></div>
COMPONENT HTML:
DownloadResumeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Download Resume <span class=""caret ml-2""></span><DropdownMenu/></button>
DropdownMenu:
<ul class=""dropdown-menu absolute bg-white shadow-md py-2"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{format_url}"" download=""{filename}"">{format_name} </a><!-- or --><a href=""#"" onclick=""window.print()"">Print Resume </a></li>"
Resume download button with print option,"DESCRIPTION:
A button group with two buttons: one to download the resume and another to print the resume. The buttons should be responsive and mobile-friendly.
COMPONENTS:
- ResumeActionButtons: (standalone) - contains the download and print buttons
- ActionButton: (takes children) - a single button with a label and optional icon
HTML:
<div class=""flex justify-center mb-4""><ResumeActionButtons/></div>
COMPONENT HTML:
ResumeActionButtons:
<div class=""btn-group""><ActionButton><i class=""fas fa-download mr-2""></i>Download Resume </ActionButton><ActionButton><i class=""fas fa-print mr-2""></i>Print Resume </ActionButton></div>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{children}</button>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.
COMPONENTS:
- NotificationBell: A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.
- UpdateList: A component that takes children, which are individual update items.
HTML:
<div class=""relative inline-block""><NotificationBell/><div class=""absolute top-0 right-0 mt-2 mr-2""><UpdateList><!-- update items will be rendered here --></UpdateList></div></div>
COMPONENT HTML:
NotificationBell:
<div class=""cursor-pointer""><i class=""fas fa-bell text-lg text-gray-600""></i><span class=""bg-red-500 text-white rounded-full px-2 py-1"">{new_updates_count}</span></div>
UpdateList:
<ul class=""bg-white shadow-md py-2"">{children}</ul>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.
COMPONENTS:
- NotificationBell: A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.
- UpdateList: A component that takes children, which are individual update items.
HTML:
<div class=""relative inline-block""><NotificationBell/><div class=""absolute top-0 right-0 mt-2 mr-2""><UpdateList><!-- update items will be rendered here --></UpdateList></div></div>
COMPONENT HTML:
NotificationBell:
<div class=""cursor-pointer""><i class=""fas fa-bell text-lg text-gray-600""></i><span class=""bg-red-500 text-white rounded-full px-2 py-1"">{new_updates_count}</span></div>
UpdateList:
<ul class=""bg-white shadow-md py-2"">{children}</ul>"
Notification bell for new updates,"DESCRIPTION:
A notification bell icon with a badge indicating the number of new updates.
COMPONENTS:
- NotificationBell: (standalone) - The bell icon with a badge indicating new updates.
- Badge: (standalone) - A small circle displaying the number of new updates.
HTML:
<nav><ul><li><NotificationBell/></li></ul></nav>
COMPONENT HTML:
NotificationBell:
<a href=""#"" class=""relative""><i class=""fas fa-bell"">{/* bell icon */}</i><Badge/></a>
Badge:
<span class=""absolute top-0 right-0 -mr-2 px-1 bg-red-500 text-white rounded-full text-xs"">{new_update_count}</span>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Notification bell for new updates,"DESCRIPTION:
The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.
COMPONENTS:
- NotificationBell: A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.
- UpdateList: A component that takes children, which are individual update items.
HTML:
<div class=""relative inline-block""><NotificationBell/><div class=""absolute top-0 right-0 mt-2 mr-2""><UpdateList><!-- update items will be rendered here --></UpdateList></div></div>
COMPONENT HTML:
NotificationBell:
<div class=""cursor-pointer""><i class=""fas fa-bell text-lg text-gray-600""></i><span class=""bg-red-500 text-white rounded-full px-2 py-1"">{new_updates_count}</span></div>
UpdateList:
<ul class=""bg-white shadow-md py-2"">{children}</ul>"
Notification bell for new updates,"DESCRIPTION:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
COMPONENTS:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
HTML:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
COMPONENT HTML:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Headline and Summary Text,"DESCRIPTION:
A headline and summary text section, typically used on a blog post or article page, that is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
COMPONENTS:
- HeadlineComponent: (standalone) - Displays a headline text.
- SummaryTextComponent: (standalone) - Displays a summary text.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><HeadlineComponent/><SummaryTextComponent/></div>
COMPONENT HTML:
HeadlineComponent:
<h1 class=""text-3xl md:text-4xl lg:text-5xl font-bold"">{headline_text}</h1>
SummaryTextComponent:
<p class=""text-lg md:text-xl lg:text-2xl"">{summary_text}</p>"
Headline and Summary Text,"DESCRIPTION:
The UI should display a headline and a summary text in a responsive, mobile-first layout. The headline should be prominent and attention-grabbing, while the summary text should provide a brief overview of the content.
COMPONENTS:
- HeadlineComponent: (standalone): displays a prominent headline text
- SummaryTextComponent: (standalone): displays a brief summary text
HTML:
<div class=""flex flex-col items-center md:flex-row md:justify-center""><HeadlineComponent/><SummaryTextComponent/></div>
COMPONENT HTML:
HeadlineComponent:
<h1 class=""text-3xl font-bold mb-4"">{headline_text}</h1>
SummaryTextComponent:
<p class=""text-lg text-gray-600"">{summary_text}</p>"
Notification Alerts/Badges,"DESCRIPTION:
The UI should have a notification badge/alert that displays a small circle or rectangle with a number or a message inside, usually indicating the number of notifications, messages, or updates.
COMPONENTS:
- NotificationBadge: (standalone) - a small circle or rectangle displaying a number or message
- NotificationAlert: (standalone) - a small notification message with an icon and text
HTML:
<nav class=""flex items-center justify-between py-4""><ul class=""flex items-center""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><NotificationBadge/><!-- notification badge --></a></li></ul><NotificationAlert/><!-- notification alert --></nav>
COMPONENT HTML:
NotificationBadge:
<span class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notification_count}</span>
NotificationAlert:
<div class=""bg-orange-200 p-2 rounded border-l-4 border-orange-500""><i class=""fas fa-bell mr-2 text-orange-500""></i><span>{notification_message}</span></div>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Product Rating Average,"DESCRIPTION:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
COMPONENTS:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
HTML:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
COMPONENT HTML:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a marker indicating the company's address. The map should be responsive and adapt to different screen sizes. Below the map, the company's address should be displayed in a readable format.
COMPONENTS:
- CompanyAddressMap: A standalone component that displays a map with a marker indicating the company's address.
- AddressDisplay: A component that takes children to display the company's address in a readable format.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><CompanyAddressMap/><AddressDisplay><h2>Company Address</h2><p>{company_street}</p><p>{company_city}, {company_state} {company_zip}</p></AddressDisplay></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""w-full mb-4""><iframe src={`https://maps.google.com/maps?q={company_latitude},{company_longitude}&z=15&output=embed`} frameborder=""0"" width=""100%"" height=""300""></iframe></div>
AddressDisplay:
<div class=""text-lg leading-relaxed"">{children}</div>"
Company Address Map,"DESCRIPTION:
The UI should display a map with a pin indicating the company's location, along with the company's address and contact information.
COMPONENTS:
- CompanyAddressMap: a standalone component that displays the map and company information.
- MapPin: a standalone component that displays the pin on the map.
- AddressInfo: a standalone component that displays the company's address and contact information.
HTML:
<div class=""max-w-md mx-auto p-4""><CompanyAddressMap/></div>
COMPONENT HTML:
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><MapPin/><AddressInfo/></div>
MapPin:
<div class=""w-12 h-12 bg-red-500 rounded-full flex justify-center items-center""><i class=""fas fa-map-pin text-white text-2xl""></i></div>
AddressInfo:
<div class=""pl-4 md:pl-0""><h2 class=""text-lg"">{company_name}</h2><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>"
Company Address Map,"DESCRIPTION:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
COMPONENTS:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
HTML:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
COMPONENT HTML:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Company Address Map,"DESCRIPTION:
The UI should display a map showing the company's address, along with the address written out in text. The map should be responsive and adapt to different screen sizes.
COMPONENTS:
- AddressMap: Standalone component that displays a map with a marker at the company's address.
- AddressText: Standalone component that displays the company's address in text.
HTML:
<div class=""max-w-md mx-auto p-4""><AddressMap/><AddressText/></div>
COMPONENT HTML:
AddressMap:
<div class=""w-full h-64 mb-4""><iframe src={`https://maps.google.com/maps?q={company_address}&t=&z=13&ie=UTF8&iwloc=&output=embed`} class=""w-full h-full"" frameborder=""0"" scrolling=""no"" marginheight=""0"" marginwidth=""0""></iframe></div>
AddressText:
<div class=""text-lg mb-2"">{company_street}, {company_city}, {company_state} {company_zip}</div>"
Dropdown Menu Item,"DESCRIPTION:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
COMPONENTS:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
HTML:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Dropdown Menu Item,"DESCRIPTION:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
COMPONENTS:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
HTML:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Dropdown Menu Item,"DESCRIPTION:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
COMPONENTS:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
HTML:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Dropdown Menu Item,"DESCRIPTION:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
COMPONENTS:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
HTML:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
COMPONENT HTML:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Thumbnail generator for video previews,"DESCRIPTION:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Thumbnail generator for video previews,"DESCRIPTION:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Thumbnail generator for video previews,"DESCRIPTION:
A grid of thumbnail previews for video clips, with each thumbnail displaying a screenshot of the video and text overlay showing the video title and duration.
COMPONENTS:
- VideoThumbnail: a standalone component displaying a single video thumbnail
- ThumbnailGrid: a container component that renders a grid of `VideoThumbnail` components and takes children
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components here --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 h-32 w-48 relative overflow-hidden""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""object-cover h-full w-full""/><div class=""absolute bottom-0 left-0 p-2 text-sm text-white""><p>{video_title}</p><p>{duration} seconds</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-3 gap-4"">{children}</div>"
Thumbnail generator for video previews,"DESCRIPTION:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Thumbnail generator for video previews,"DESCRIPTION:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
COMPONENTS:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
HTML:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
COMPONENT HTML:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Error Message: Displays error message with details,"DESCRIPTION:
The UI should display an error message with details, such as an error title, error message, and possibly other details.
COMPONENTS:
- ErrorMessage: A standalone component that displays an error message with details.
HTML:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><ErrorMessage/></div>
COMPONENT HTML:
ErrorMessage:
<h5 class=""text-lg"">{error_title}</h5><p>{error_message}</p><p>{error_details}</p>"
Hero Overlay Background,"DESCRIPTION:
The UI should be a hero overlay background with a subtle gradient effect, overlaying a background image. The background image should be blurred to create a sense of depth, and the gradient overlay should have a subtle animation effect to make it stand out.
COMPONENTS:
- HeroBackground: A standalone component that displays the background image and gradient overlay.
- HeroGradientOverlay: A standalone component that displays the gradient overlay with animation effect.
HTML:
<div class=""min-h-screen relative""><HeroBackground/><HeroGradientOverlay/></div>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={`background-image: url(${background_image})`}><div class=""absolute inset-0 bg-gray-900 opacity-50""></div></div>
HeroGradientOverlay:
<div class=""absolute inset-0""><div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-75 animate-pulse""></div></div>"
Hero Overlay Background,"DESCRIPTION:
The UI should be a hero overlay background with a subtle gradient effect, overlaying a background image. The background image should be blurred to create a sense of depth, and the gradient overlay should have a subtle animation effect to make it stand out.
COMPONENTS:
- HeroBackground: A standalone component that displays the background image and gradient overlay.
- HeroGradientOverlay: A standalone component that displays the gradient overlay with animation effect.
HTML:
<div class=""min-h-screen relative""><HeroBackground/><HeroGradientOverlay/></div>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={`background-image: url(${background_image})`}><div class=""absolute inset-0 bg-gray-900 opacity-50""></div></div>
HeroGradientOverlay:
<div class=""absolute inset-0""><div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-75 animate-pulse""></div></div>"
Hero Overlay Background,"DESCRIPTION:
The UI should be a hero overlay background with a subtle gradient effect, overlaying a background image. The background image should be blurred to create a sense of depth, and the gradient overlay should have a subtle animation effect to make it stand out.
COMPONENTS:
- HeroBackground: A standalone component that displays the background image and gradient overlay.
- HeroGradientOverlay: A standalone component that displays the gradient overlay with animation effect.
HTML:
<div class=""min-h-screen relative""><HeroBackground/><HeroGradientOverlay/></div>
COMPONENT HTML:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style={`background-image: url(${background_image})`}><div class=""absolute inset-0 bg-gray-900 opacity-50""></div></div>
HeroGradientOverlay:
<div class=""absolute inset-0""><div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-75 animate-pulse""></div></div>"
Faceted search results display,"DESCRIPTION:
The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results. The search results should be displayed in a list with each item showing the title, description, and any other relevant information.
COMPONENTS:
- FacetContainer: A standalone component that wraps the facets.
- FacetItem: A standalone component that displays a single item within a facet (e.g. ""$0-$50"", ""Nike"", etc.).
- SearchResult: A standalone component that displays a single search result.
- SearchResults: A component that takes children and displays the list of search results.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/4 xl:w-1/5 p-4""><FacetContainer/></div><div class=""w-full md:w-3/4 xl:w-4/5 p-4""><SearchResults><!-- search results will be rendered here --></SearchResults></div></div></div>
COMPONENT HTML:
FacetContainer:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold mb-4"">Filters</h2><!-- facets will be rendered here --></div>
FacetItem:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{facet_item_id}""/><label for=""{facet_item_id}"" class=""ml-2"">{facet_item_name}</label></li>
SearchResult:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h3 class=""text-lg"">{result_title}</h3><p class=""text-sm"">{result_description}</p><!-- other result details can be added here --></div>
SearchResults:
<ul class=""list-none mb-0"">{children}</ul>"
Faceted search results display,"DESCRIPTION:
The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results. The search results should be displayed in a list with each item showing the title, description, and any other relevant information.
COMPONENTS:
- FacetContainer: A standalone component that wraps the facets.
- FacetItem: A standalone component that displays a single item within a facet (e.g. ""$0-$50"", ""Nike"", etc.).
- SearchResult: A standalone component that displays a single search result.
- SearchResults: A component that takes children and displays the list of search results.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/4 xl:w-1/5 p-4""><FacetContainer/></div><div class=""w-full md:w-3/4 xl:w-4/5 p-4""><SearchResults><!-- search results will be rendered here --></SearchResults></div></div></div>
COMPONENT HTML:
FacetContainer:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold mb-4"">Filters</h2><!-- facets will be rendered here --></div>
FacetItem:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{facet_item_id}""/><label for=""{facet_item_id}"" class=""ml-2"">{facet_item_name}</label></li>
SearchResult:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h3 class=""text-lg"">{result_title}</h3><p class=""text-sm"">{result_description}</p><!-- other result details can be added here --></div>
SearchResults:
<ul class=""list-none mb-0"">{children}</ul>"
Award or achievement section with icons and dates,"DESCRIPTION:
The UI should have a section that showcases awards or achievements, with icons and dates.
COMPONENTS:
- AwardItem: A standalone component that represents a single award or achievement.
- AchievementSection: A component that takes children and wraps the award items.
HTML:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl mb-4"">Awards and Achievements</h2><AchievementSection><AwardItem/><AwardItem/><AwardItem/></AchievementSection></section>
COMPONENT HTML:
AwardItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon}</span><div><h3 class=""text-lg"">{award_name}</h3><p class=""text-sm text-gray-600"">{award_date}</p></div></div>
AchievementSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Award or achievement section with icons and dates,"DESCRIPTION:
The UI should display a list of awards or achievements with icons and dates in a responsive, mobile-first, and accessible manner.
COMPONENTS:
- AwardCard: A standalone component that represents a single award or achievement.
- AwardList: A component that takes children, which is a list of `AwardCard` components.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Awards and Achievements</h2><AwardList><AwardCard/><AwardCard/><!-- Add more AwardCard components here --></AwardList></section>
COMPONENT HTML:
AwardCard:
<div class=""flex items-center mb-4""><div class=""mr-4""><i class=""fas fa-{award_icon} text-2xl text-gray-600""></i></div><div><h3 class=""text-lg font-bold"">{award_name}</h3><p class=""text-gray-600"">{award_date}</p></div></div>
AwardList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Hero Overlay Pattern,"DESCRIPTION:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
COMPONENTS:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
HTML:
<div class=""h-screen w-full relative""><HeroComponent/></div>
COMPONENT HTML:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style={`background-image: url(${heroImage});`}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Breadcrumbs for navigation,"DESCRIPTION:
The UI should display a sequence of breadcrumbs, each representing a navigation step, separated by a separator (e.g., `/`). The breadcrumbs should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- Breadcrumb: (standalone): Represents a single breadcrumb item.
- BreadcrumbList: (takes children): A container for a list of breadcrumbs.
HTML:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap mb-4 list-none""><BreadcrumbList><Breadcrumb/><!-- more breadcrumbs here --></BreadcrumbList></ol></nav>
COMPONENT HTML:
Breadcrumb:
<li class=""inline-flex items-center""><a href=""{breadcrumb_url}"" class=""text-gray-600 hover:text-gray-900"">{breadcrumb_label}</a><span class=""text-gray-600"">{separator}</span></li>
BreadcrumbList:
<ol class=""flex flex-wrap mb-4 list-none"">{children}</ol>"
Search Bar: Input field for searching the site,"DESCRIPTION:
The UI should be a simple search bar component that consists of a text input field and a search button. The search bar should be responsive, with the search button aligned to the right of the input field on larger screens, and stacked on top of each other on smaller screens.
COMPONENTS:
- SearchBar: standalone component that contains the entire search bar UI
- SearchInput: standalone component that represents the text input field
- SearchButton: standalone component that represents the search button
HTML:
<nav class=""max-w-md mx-auto p-4 flex justify-center""><SearchBar/></nav>
COMPONENT HTML:
SearchBar:
<div class=""flex flex-wrap items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Code Review and Approval Workflow,"DESCRIPTION:
The UI should display a vertical timeline of code review and approval workflow, with each step represented by a circular icon and a brief description. The timeline should be responsive and adaptable to different screen sizes.
COMPONENTS:
- CodeReviewStep: A standalone component representing a single step in the code review process.
- Timeline: A component that takes children, which are `CodeReviewStep` components.
HTML:
<div class=""max-w-md mx-auto p-4""><Timeline><CodeReviewStep/><CodeReviewStep/><CodeReviewStep/><!-- Add more CodeReviewStep components as needed --></Timeline></div>
COMPONENT HTML:
CodeReviewStep:
<div class=""flex items-center mb-4""><div class=""w-8 h-8 bg-orange-500 rounded-full text-white text-lg"">{step_icon}</div><div class=""ml-4""><p class=""text-lg"">{step_description}</p><small class=""text-gray-600"">{step_status}</small></div></div>
Timeline:
<div class=""flex flex-col items-center"">{children}</div>"
Toast/Notification Messages,"DESCRIPTION:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
COMPONENTS:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
HTML:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
COMPONENT HTML:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
Toast/Notification Messages,"DESCRIPTION:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
COMPONENTS:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
HTML:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
COMPONENT HTML:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
Toast/Notification Messages,"DESCRIPTION:
A toast/notification message is a small, non-obtrusive message that appears at the top or bottom of the screen, informing the user of a particular event or action. It usually disappears after a few seconds.
COMPONENTS:
- NotificationToast: a standalone component that displays a single notification message.
HTML:
<div class=""fixed bottom-0 left-0 p-4""><NotificationToast/></div>
COMPONENT HTML:
NotificationToast:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4""><p class=""uppercase text-orange-500"">{notificationType}</p><p>{notificationMessage}</p></div>"
Toast/Notification Messages,"DESCRIPTION:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
COMPONENTS:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
HTML:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
COMPONENT HTML:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
Toast/Notification Messages,"DESCRIPTION:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
COMPONENTS:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
HTML:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
COMPONENT HTML:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Blog Post Comment Count,"DESCRIPTION:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
COMPONENTS:
- CommentCount: A standalone component that displays the number of comments on a blog post.
HTML:
<div class=""flex justify-end mb-2""><CommentCount/></div>
COMPONENT HTML:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
User Profiles and Achievements,"DESCRIPTION:
The UI should display a user's profile information and achievements in a clean and modern layout. The profile section should show the user's name, profile picture, and bio. The achievements section should display a list of badges or icons representing the user's accomplishments.
COMPONENTS:
- UserProfileCard: A standalone component that displays the user's profile information.
- AchievementBadge: A standalone component that displays a single achievement badge.
- AchievementList: A component that takes children (a list of `AchievementBadge` components).
HTML:
<div class=""max-w-md mx-auto p-4""><UserProfileCard/><h2 class=""text-lg font-bold mb-2"">Achievements</h2><AchievementList><AchievementBadge/><AchievementBadge/><!-- more AchievementBadge components here --></AchievementList></div>
COMPONENT HTML:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><img src={profile_picture_url} class=""w-16 h-16 rounded-full"" alt=""Profile Picture""/><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p></div>
AchievementBadge:
<div class=""bg-yellow-100 rounded p-2""><img src={badge_icon_url} class=""w-8 h-8"" alt=""Achievement Badge""/><span class=""text-sm"">{badge_name}</span></div>
AchievementList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Dropdown Menu Divider,"DESCRIPTION:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
COMPONENTS:
- DropdownMenuDivider: (standalone)
HTML:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
COMPONENT HTML:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Hero Section with Form,"DESCRIPTION:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
COMPONENTS:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
HTML:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
COMPONENT HTML:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style={{ backgroundImage: `url(${hero_image_url})` }}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
Vertical or horizontal bar for scrolling through content that doesn't fit within the viewport,"DESCRIPTION:
The UI should have a scrollbar that allows users to scroll through content that exceeds the viewport's width or height. The scrollbar should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- ScrollbarContainer: (standalone): A container that wraps the scrollbar and its associated content.
- Scrollbar: (standalone): The scrollbar component that allows users to scroll through content.
- ScrollbarThumb: (standalone): The draggable thumb of the scrollbar that indicates the scrolled position.
HTML:
<div class=""overflow-auto h-screen""><ScrollbarContainer/><!-- content that exceeds the viewport's width or height --><div>Long content...</div></div>
COMPONENT HTML:
ScrollbarContainer:
<div class=""fixed right-0 top-0 h-full""><Scrollbar/></div>
Scrollbar:
<div class=""w-2 bg-gray-300 rounded-lg""><ScrollbarThumb/></div>
ScrollbarThumb:
<div class=""bg-gray-500 rounded-full w-full h-4"">{scrollbar_thumb_size}</div>"
Alert Close Button Style,"DESCRIPTION:
The UI should be a small, clickable button that allows users to close an alert message. The button should be a small ""X"" or ""Close"" text, and should be styled to stand out from the rest of the alert message.
COMPONENTS:
- AlertCloseButton: a standalone component that renders a small clickable button to close an alert message.
HTML:
<div class=""alert-message""><!-- alert message content goes here --><AlertCloseButton/></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-label=""Close"" class=""sr-only"">{close_button_text}</span><span aria-hidden=""true"">×{/* or ""Close"" text */}</span></button>"
Alert Close Button Style,"DESCRIPTION:
The UI should be a small, clickable button that allows users to close an alert message. The button should be a small ""X"" or ""Close"" text, and should be styled to stand out from the rest of the alert message.
COMPONENTS:
- AlertCloseButton: a standalone component that renders a small clickable button to close an alert message.
HTML:
<div class=""alert-message""><!-- alert message content goes here --><AlertCloseButton/></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-label=""Close"" class=""sr-only"">{close_button_text}</span><span aria-hidden=""true"">×{/* or ""Close"" text */}</span></button>"
Alert Close Button Style,"DESCRIPTION:
The UI should be a small, clickable button that allows users to close an alert message. The button should be a small ""X"" or ""Close"" text, and should be styled to stand out from the rest of the alert message.
COMPONENTS:
- AlertCloseButton: a standalone component that renders a small clickable button to close an alert message.
HTML:
<div class=""alert-message""><!-- alert message content goes here --><AlertCloseButton/></div>
COMPONENT HTML:
AlertCloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-label=""Close"" class=""sr-only"">{close_button_text}</span><span aria-hidden=""true"">×{/* or ""Close"" text */}</span></button>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Testimonial Quote Style,"DESCRIPTION:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
COMPONENTS:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
COMPONENT HTML:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Custom Field Builder: Create tailored data fields,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible interface for building custom data fields. It should consist of a header, a field-type selection section, and a field configuration section. The header should display the title ""Custom Field Builder"" and have an optional ""Save"" button. The field-type selection section should display a list of available field types (e.g., text, number, date, etc.). The field configuration section should display fields depending on the selected field type.
COMPONENTS:
- HeaderComponent: (standalone): Displays the title and optional save button.
- FieldTypeSelectorComponent: (standalone): Displays a list of available field types.
- FieldConfiguratorComponent: (takes children): Displays fields depending on the selected field type.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><HeaderComponent/><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><FieldTypeSelectorComponent/></div><div class=""w-full md:w-1/2 xl:w-2/3 p-4""><FieldConfiguratorComponent><!-- field configuration fields will be rendered here --></FieldConfiguratorComponent></div></div></div>
COMPONENT HTML:
HeaderComponent:
<header class=""flex justify-between mb-4""><h1 class=""text-lg font-bold"">Custom Field Builder</h1><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></header>
FieldTypeSelectorComponent:
<ul class=""list-none mb-4""><li><input type=""radio"" id=""text-field"" name=""field-type"" value=""text""/><label for=""text-field"">Text</label></li><li><input type=""radio"" id=""number-field"" name=""field-type"" value=""number""/><label for=""number-field"">Number</label></li><li><input type=""radio"" id=""date-field"" name=""field-type"" value=""date""/><label for=""date-field"">Date</label></li><!-- more field types will be rendered here --></ul>
FieldConfiguratorComponent:
<!-- field configuration fields will be rendered here based on the selected field type -->{children}"
Reporting Dashboard: Generate data insights,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays various data insights in a clear and organized manner. The dashboard should have a top navigation bar, a sidebar with navigation options, and a main content area that displays different charts, graphs, and data tables.
COMPONENTS:
- NavigationBar: - Standalone - Displays the top navigation bar with a dashboard title and navigation links.
- Sidebar: - Standalone - Displays the sidebar with navigation options.
- DataCard: - Takes children - Displays a single data insight, such as a chart or graph, with a title and description.
- DataSection: - Takes children - Displays a section of data insights, such as a row of charts or graphs.
- DataTable: - Takes children - Displays a table of data with column headers and rows.
HTML:
<div class=""flex h-screen""><NavigationBar/><div class=""flex-1 overflow-y-hidden""><Sidebar/><main class=""p-4""><DataSection><DataCard>{children}</DataCard><DataCard>{children}</DataCard></DataSection><DataSection><DataTable><thead><tr><th>{column1_header}</th><th>{column2_header}</th></tr></thead><tbody><tr><td>{data_point1}</td><td>{data_point2}</td></tr></tbody></DataTable></DataSection></main></div></div>
COMPONENT HTML:
NavigationBar:
<nav class=""bg-white border-b border-gray-200""><div class=""container mx-auto p-4""><h1 class=""text-lg"">{dashboard_title}</h1><ul class=""flex justify-end""><li><a href=""#"" class=""text-gray-600"">{nav_link1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_link2}</a></li></ul></div></nav>
Sidebar:
<aside class=""w-64 bg-white border-r border-gray-200""><nav class=""px-4""><ul><li><a href=""#"" class=""block py-2"">{sidebar_link1}</a></li><li><a href=""#"" class=""block py-2"">{sidebar_link2}</a></li></ul></nav></aside>
DataCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">{title}</h2><p>{description}</p>{children}</div>
DataSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>
DataTable:
<table class=""w-full"">{children}</table>"
Reporting Dashboard: Generate data insights,"DESCRIPTION:
The UI should be a responsive, mobile-first dashboard that displays various data insights in a clear and organized manner. The dashboard should have a top navigation bar, a sidebar with navigation options, and a main content area that displays different charts, graphs, and data tables.
COMPONENTS:
- NavigationBar: - Standalone - Displays the top navigation bar with a dashboard title and navigation links.
- Sidebar: - Standalone - Displays the sidebar with navigation options.
- DataCard: - Takes children - Displays a single data insight, such as a chart or graph, with a title and description.
- DataSection: - Takes children - Displays a section of data insights, such as a row of charts or graphs.
- DataTable: - Takes children - Displays a table of data with column headers and rows.
HTML:
<div class=""flex h-screen""><NavigationBar/><div class=""flex-1 overflow-y-hidden""><Sidebar/><main class=""p-4""><DataSection><DataCard>{children}</DataCard><DataCard>{children}</DataCard></DataSection><DataSection><DataTable><thead><tr><th>{column1_header}</th><th>{column2_header}</th></tr></thead><tbody><tr><td>{data_point1}</td><td>{data_point2}</td></tr></tbody></DataTable></DataSection></main></div></div>
COMPONENT HTML:
NavigationBar:
<nav class=""bg-white border-b border-gray-200""><div class=""container mx-auto p-4""><h1 class=""text-lg"">{dashboard_title}</h1><ul class=""flex justify-end""><li><a href=""#"" class=""text-gray-600"">{nav_link1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_link2}</a></li></ul></div></nav>
Sidebar:
<aside class=""w-64 bg-white border-r border-gray-200""><nav class=""px-4""><ul><li><a href=""#"" class=""block py-2"">{sidebar_link1}</a></li><li><a href=""#"" class=""block py-2"">{sidebar_link2}</a></li></ul></nav></aside>
DataCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">{title}</h2><p>{description}</p>{children}</div>
DataSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>
DataTable:
<table class=""w-full"">{children}</table>"
Product filtering and sorting controls,"DESCRIPTION:
The UI should display a set of filtering and sorting controls for products, allowing users to narrow down their search results by category, price range, and rating. The controls should be responsive, accessible, and easy to use on various devices.
COMPONENTS:
- FilterCategorySelect: A standalone dropdown component for selecting a product category.
- PriceRangeSlider: A standalone component for selecting a price range.
- RatingFilterButtons: A standalone component for selecting a rating filter.
- SortBySelect: A standalone dropdown component for selecting a sorting option.
- FilterControls: A container component that takes children ( FilterCategorySelect, PriceRangeSlider, RatingFilterButtons, and SortBySelect ).
HTML:
<div class=""max-w-md mx-auto p-4""><FilterControls><FilterCategorySelect/><PriceRangeSlider/><RatingFilterButtons/><SortBySelect/></FilterControls></div>
COMPONENT HTML:
FilterCategorySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">{category_placeholder}</option><!-- Option list will be populated dynamically --></select>
PriceRangeSlider:
<div class=""flex items-center mb-4""><span class=""mr-2"">Min: {min_price}</span><input type=""range"" min=""0"" max=""100"" value=""50"" class=""w-full""/><span class=""ml-2"">Max: {max_price}</span></div>
RatingFilterButtons:
<div class=""flex mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">4+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">3+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">2+</button></div>
SortBySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">Sort by</option><option value=""price_asc"">Price: Low to High</option><option value=""price_desc"">Price: High to Low</option><option value=""rating_desc"">Rating: High to Low</option></select>
FilterControls:
<div class=""flex flex-wrap justify-between mb-4"">{children}</div>"
Call-to-Action (CTA) Button Section,"DESCRIPTION:
The UI should have a prominent call-to-action (CTA) button section with a bold headline, a brief description, and a prominent CTA button that encourages the user to take action.
COMPONENTS:
- HeadlineComponent: Standalone component that displays a bold headline text.
- DescriptionComponent: Standalone component that displays a brief descriptive text.
- CTAButtonComponent: Standalone component that displays a prominent CTA button.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6""><HeadlineComponent/><DescriptionComponent/><CTAButtonComponent/></section>
COMPONENT HTML:
HeadlineComponent:
<h2 class=""text-3xl font-bold"">{headline_text}</h2>
DescriptionComponent:
<p class=""text-lg"">{description_text}</p>
CTAButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_button_text}</button>"
Call-to-Action (CTA) Button Section,"DESCRIPTION:
The UI should be a prominent call-to-action (CTA) button section that encourages users to take a specific action. The section should be full-width, with a bold background color, and a contrasting CTA button that stands out. The section should be responsive, with the button size and spacing adjusting based on screen size.
COMPONENTS:
- CTASection: - standalone component that contains the entire CTA section
- CTAButton: - standalone component that represents the call-to-action button
HTML:
<section class=""relative pt-12 pb-20 lg:pt-20 lg:pb-32""><div class=""container max-w-md mx-auto p-4 lg:p-8""><CTASection/></div></section>
COMPONENT HTML:
CTASection:
<div class=""bg-orange-500 text-white p-4 lg:p-8""><h2 class=""text-2xl lg:text-3xl"">{headline}</h2><p class=""text-lg lg:text-xl"">{description}</p><CTAButton/></div>
CTAButton:
<button class=""bg-white hover:bg-gray-200 text-orange-500 font-bold py-2 px-4 rounded"">{button_text}</button>"
Revealing/Hover Effects,"DESCRIPTION:
The UI should display a container with a revealing hover effect. When the user hovers over the container, a colored background and a heading should be revealed.
COMPONENTS:
- RevealContainer: standalone component that wraps the revealing hover effect.
- RevealContent: standalone component that displays the revealed content (heading and background).
HTML:
<div class=""relative w-full h-48 md:h-64 lg:h-80 XL:h-96""><RevealContainer/></div>
COMPONENT HTML:
RevealContainer:
<div class=""absolute inset-0 z-10 overflow-hidden bg-transparent transition duration-300 ease-in-out hover:bg-orange-500 hover:opacity-90""><RevealContent/></div>
RevealContent:
<div class=""flex items-center justify-center h-full""><h2 class=""text-2xl font-bold"">{heading_text}</h2></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Alert Notification Sound,"DESCRIPTION:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
COMPONENTS:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
HTML:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
COMPONENT HTML:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Coupon/Discount Codes,"DESCRIPTION:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
COMPONENTS:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
HTML:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
COMPONENT HTML:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should display a title for a product feature list, emphasizing the title text with a large font size and prominent styling.
COMPONENTS:
- FeatureListTitle: standalone component
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><FeatureListTitle/></div>
COMPONENT HTML:
FeatureListTitle:
<h2 class=""text-3xl font-bold mb-4"">{feature_list_title}</h2>"
Product Feature List Title,"DESCRIPTION:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- FeatureTitle: a standalone component that displays a title for the product feature list.
HTML:
<header><FeatureTitle/></header>
COMPONENT HTML:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Game Tiles and Grids,"DESCRIPTION:
The UI should display a grid of game tiles. Each tile should have a unique background color, a number indicating the tile's value, and an optional ""locked"" indicator.
COMPONENTS:
- GameGrid: A standalone component that displays a grid of game tiles.
- GameTile: A component that takes children (the tile's value and optional ""locked"" indicator) and displays a single game tile.
HTML:
<div class=""grid grid-cols-4 gap-4""><GameGrid/></div>
COMPONENT HTML:
GameGrid:
<div class=""flex flex-wrap justify-center"">{/* an 4x4 grid of GameTile components */ } <GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/></div>
GameTile:
<div class={`h-16 w-16 bg-${tile_color} rounded-md flex justify-center items-center`}><p class=""text-lg"">{tile_value}</p>{locked && <span class=""text-xs"">(Locked)</span>} {children}</div>"
Product Price Tag,"DESCRIPTION:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
COMPONENTS:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
HTML:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
COMPONENT HTML:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}${price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Product Price Tag,"DESCRIPTION:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
COMPONENTS:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
HTML:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
COMPONENT HTML:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}${price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Product Price Tag,"DESCRIPTION:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
COMPONENTS:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
HTML:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
COMPONENT HTML:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}${price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Product Price Tag,"DESCRIPTION:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
COMPONENTS:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
HTML:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
COMPONENT HTML:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}${price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
The UI should display a server icon and name, with a dropdown menu that appears when the user clicks on the icon or name.
COMPONENTS:
- ServerIcon: standalone component that displays a server icon
- ServerName: standalone component that displays the server name
- DropdownMenu: component that takes children, which are the menu items
HTML:
<div class=""flex items-center""><ServerIcon/><ServerName/><div class=""hidden lg:block""><DropdownMenu><!-- menu items will be inserted here --></DropdownMenu></div></div>
COMPONENT HTML:
ServerIcon:
<i class=""fas fa-server text-lg""></i>
ServerName:
<span>{server_name}</span>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md shadow-md"">{children}</div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
The UI should display a server icon and name, with a dropdown menu that appears when the user clicks on the icon or name.
COMPONENTS:
- ServerIcon: standalone component that displays a server icon
- ServerName: standalone component that displays the server name
- DropdownMenu: component that takes children, which are the menu items
HTML:
<div class=""flex items-center""><ServerIcon/><ServerName/><div class=""hidden lg:block""><DropdownMenu><!-- menu items will be inserted here --></DropdownMenu></div></div>
COMPONENT HTML:
ServerIcon:
<i class=""fas fa-server text-lg""></i>
ServerName:
<span>{server_name}</span>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md shadow-md"">{children}</div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Server icon and name display with dropdown menu,"DESCRIPTION:
A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.
COMPONENTS:
- ServerIconWithName: A standalone component that displays a server icon and name.
- DropdownMenu: A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.
HTML:
<div class=""flex items-center""><ServerIconWithName/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
COMPONENT HTML:
ServerIconWithName:
<div class=""flex items-center mb-2""><img src={serverIconUrl} alt={serverName} class=""w-6 h-6 rounded-full""/><span class=""ml-2 text-lg"">{serverName}</span></div>
DropdownMenu:
<div class=""hidden""><ul class=""bg-white shadow-md py-2"">{children} </ul></div>"
Featured Product Variations,"DESCRIPTION:
The UI should display a featured product with variations, showcasing different options for the same product. The layout should be responsive, with a mobile-first approach, and should include accessibility features.
COMPONENTS:
- ProductHeader: A standalone component displaying the product name and rating.
- ProductImage: A standalone component displaying the product image.
- VariationSelect: A standalone component displaying a dropdown to select a product variation.
- ProductPrice: A standalone component displaying the product price.
- CallToAction: A standalone component displaying a call-to-action button.
- ProductVariationsList: A component taking children, displaying a list of product variations.
- ProductVariationItem: A component taking children, displaying a single product variation item.
HTML:
<div class=""max-w-md mx-auto""><ProductHeader/><ProductImage/><div class=""flex justify-between mb-4""><VariationSelect/><ProductPrice/></div><ProductVariationsList><ProductVariationItem>{variation_name}</ProductVariationItem><!-- repeat for each variation --></ProductVariationsList><CallToAction/></div>
COMPONENT HTML:
ProductHeader:
<div class=""mb-4""><h2 class=""text-2xl"">{product_name}</h2><p>Rating: {rating}/5</p></div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full mb-4"">
VariationSelect:
<select class=""w-full p-2 mb-4""><option value="""">Select a variation</option><!-- options will be populated dynamically --></select>
ProductPrice:
<p class=""text-lg font-bold"">${price}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
ProductVariationsList:
<ul class=""list-none mb-4"">{children}</ul>
ProductVariationItem:
<li class=""py-2 border-b border-gray-200"">{children}</li>"
Featured Product Variations,"DESCRIPTION:
The UI should display a featured product with variations, showcasing different options for the same product. The layout should be responsive, with a mobile-first approach, and should include accessibility features.
COMPONENTS:
- ProductHeader: A standalone component displaying the product name and rating.
- ProductImage: A standalone component displaying the product image.
- VariationSelect: A standalone component displaying a dropdown to select a product variation.
- ProductPrice: A standalone component displaying the product price.
- CallToAction: A standalone component displaying a call-to-action button.
- ProductVariationsList: A component taking children, displaying a list of product variations.
- ProductVariationItem: A component taking children, displaying a single product variation item.
HTML:
<div class=""max-w-md mx-auto""><ProductHeader/><ProductImage/><div class=""flex justify-between mb-4""><VariationSelect/><ProductPrice/></div><ProductVariationsList><ProductVariationItem>{variation_name}</ProductVariationItem><!-- repeat for each variation --></ProductVariationsList><CallToAction/></div>
COMPONENT HTML:
ProductHeader:
<div class=""mb-4""><h2 class=""text-2xl"">{product_name}</h2><p>Rating: {rating}/5</p></div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full mb-4"">
VariationSelect:
<select class=""w-full p-2 mb-4""><option value="""">Select a variation</option><!-- options will be populated dynamically --></select>
ProductPrice:
<p class=""text-lg font-bold"">${price}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
ProductVariationsList:
<ul class=""list-none mb-4"">{children}</ul>
ProductVariationItem:
<li class=""py-2 border-b border-gray-200"">{children}</li>"
Featured Product Variations,"DESCRIPTION:
The UI should display a featured product with variations, showcasing different options for the same product. The layout should be responsive, with a mobile-first approach, and should include accessibility features.
COMPONENTS:
- ProductHeader: A standalone component displaying the product name and rating.
- ProductImage: A standalone component displaying the product image.
- VariationSelect: A standalone component displaying a dropdown to select a product variation.
- ProductPrice: A standalone component displaying the product price.
- CallToAction: A standalone component displaying a call-to-action button.
- ProductVariationsList: A component taking children, displaying a list of product variations.
- ProductVariationItem: A component taking children, displaying a single product variation item.
HTML:
<div class=""max-w-md mx-auto""><ProductHeader/><ProductImage/><div class=""flex justify-between mb-4""><VariationSelect/><ProductPrice/></div><ProductVariationsList><ProductVariationItem>{variation_name}</ProductVariationItem><!-- repeat for each variation --></ProductVariationsList><CallToAction/></div>
COMPONENT HTML:
ProductHeader:
<div class=""mb-4""><h2 class=""text-2xl"">{product_name}</h2><p>Rating: {rating}/5</p></div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full mb-4"">
VariationSelect:
<select class=""w-full p-2 mb-4""><option value="""">Select a variation</option><!-- options will be populated dynamically --></select>
ProductPrice:
<p class=""text-lg font-bold"">${price}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
ProductVariationsList:
<ul class=""list-none mb-4"">{children}</ul>
ProductVariationItem:
<li class=""py-2 border-b border-gray-200"">{children}</li>"
Search Input Field,"DESCRIPTION:
A simple search input field with a placeholder text and a submit button.
COMPONENTS:
- SearchInput: standalone component that renders a search input field.
- SearchButton: standalone component that renders a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg text-gray-700 placeholder-gray-600"" placeholder=""Search..."" aria-label=""Search input field""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Search Input Field,"DESCRIPTION:
A simple search input field with a placeholder text and a submit button.
COMPONENTS:
- SearchInput: standalone component that renders a search input field.
- SearchButton: standalone component that renders a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg text-gray-700 placeholder-gray-600"" placeholder=""Search..."" aria-label=""Search input field""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Search Input Field,"DESCRIPTION:
A simple search input field with a placeholder text and a submit button.
COMPONENTS:
- SearchInput: standalone component that renders a search input field.
- SearchButton: standalone component that renders a submit button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg text-gray-700 placeholder-gray-600"" placeholder=""Search..."" aria-label=""Search input field""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Avatar Upload: Input field for uploading a profile picture,"DESCRIPTION:
The UI should be a simple input field with a label that allows users to upload a profile picture. The input field should be responsive and adapt to different screen sizes.
COMPONENTS:
- InputLabel: (standalone) - The label for the input field.
- InputField: (standalone) - The input field for uploading the profile picture.
HTML:
<div class=""flex flex-col md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4""><InputLabel/><InputField/><!-- Optional: display uploaded image --><img src=""{uploaded_image_url}"" alt=""Profile Picture"" class=""w-full h-full object-cover rounded-full""/></div>
COMPONENT HTML:
InputLabel:
<label for=""avatar-upload"" class=""block mb-2 text-sm font-bold text-gray-700"">Upload Profile Picture</label>
InputField:
<input type=""file"" id=""avatar-upload"" class=""block w-full px-4 py-2 text-gray-700""/>"
Header Search Input,"DESCRIPTION:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
COMPONENTS:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
HTML:
<header class=""bg-white py-4""><SearchHeader/></header>
COMPONENT HTML:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
Header Search Input,"DESCRIPTION:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
COMPONENTS:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
HTML:
<header class=""bg-white py-4""><SearchHeader/></header>
COMPONENT HTML:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
Header Search Input,"DESCRIPTION:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
COMPONENTS:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
HTML:
<header class=""bg-white py-4""><SearchHeader/></header>
COMPONENT HTML:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
Header Search Input,"DESCRIPTION:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
COMPONENTS:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
HTML:
<header class=""bg-white py-4""><SearchHeader/></header>
COMPONENT HTML:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
"Visual representation of user ratings, often displayed as a row of stars","DESCRIPTION:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
COMPONENTS:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
HTML:
<Rating/>
COMPONENT HTML:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Recommendations and 'You Might Like',"DESCRIPTION:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
COMPONENTS:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
HTML:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
COMPONENT HTML:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Editable Tables,"DESCRIPTION:
A table that can be edited, with input fields for each cell, and a ""Save"" button at the bottom.
COMPONENTS:
- EditableTableCell: (takes children): a single table cell with an input field
- EditableTableRow: (takes children): a table row with editable cells
- EditableTable: (takes children): the entire editable table with multiple rows
HTML:
<div class=""max-w-md mx-auto p-4""><EditableTable><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><!-- ... more rows ... --></EditableTable><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></div>
COMPONENT HTML:
EditableTableCell:
<td class=""border p-2"">{children}</td>
EditableTableRow:
<tr class=""bg-white"">{children}</tr>
EditableTable:
<table class=""table-auto border-collapse w-full""><tbody>{children}</tbody></table>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Trust Badges: Establish credibility with security badges,"DESCRIPTION:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
COMPONENTS:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
HTML:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
COMPONENT HTML:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Product Feature List,"DESCRIPTION:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
COMPONENTS:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
HTML:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
COMPONENT HTML:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
User profile page with video history,"DESCRIPTION:
The UI should display a user profile page with a header, profile information, and a video history section that lists the user's watched videos.
COMPONENTS:
- UserProfileHeader: standalone, displays the user's profile picture and name
- ProfileInfo: standalone, displays the user's bio and profile information
- VideoHistory: takes children, lists the user's video history
- VideoHistoryItem: standalone, displays a single video in the video history
HTML:
<div class=""container max-w-md mx-auto p-4""><UserProfileHeader/><ProfileInfo/><h2 class=""text-lg font-bold mb-2"">Video History</h2><VideoHistory><VideoHistoryItem/><VideoHistoryItem/><!-- more VideoHistoryItem components here --></VideoHistory></div>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex justify-center mb-4""><img src={profile_picture} class=""w-24 h-24 rounded-full""/><h1 class=""text-2xl font-bold"">{username}</h1></div>
ProfileInfo:
<div class=""mb-4""><p>{bio}</p><!-- other profile information here --></div>
VideoHistory:
<ul class=""list-none mb-4"">{children}</ul>
VideoHistoryItem:
<li class=""py-2 border-b border-gray-200""><img src={video_thumbnail} class=""w-12 h-12 rounded""/><div class=""ml-2""><h3>{video_title}</h3><p>{video_description}</p></div></li>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: (standalone)
- StickyFooter: (standalone)
- MainContent: (takes children)
HTML:
<div class=""min-h-screen flex flex-col""><StickyHeader/><MainContent><!-- page content goes here --></MainContent><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 bg-white shadow-md py-2 px-4""><!-- header content goes here --><nav><ul><li><a href=""#"">Link 1</a></li><li><a href=""#"">Link 2</a></li><li><a href=""#"">Link 3</a></li></ul></nav></header>
StickyFooter:
<footer class=""sticky bottom-0 bg-gray-200 py-2 px-4""><!-- footer content goes here --><p>&copy; {year} My Website</p></footer>
MainContent:
<div class=""flex-grow p-4"">{children}</div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: (standalone)
- StickyFooter: (standalone)
- MainContent: (takes children)
HTML:
<div class=""min-h-screen flex flex-col""><StickyHeader/><MainContent><!-- page content goes here --></MainContent><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 bg-white shadow-md py-2 px-4""><!-- header content goes here --><nav><ul><li><a href=""#"">Link 1</a></li><li><a href=""#"">Link 2</a></li><li><a href=""#"">Link 3</a></li></ul></nav></header>
StickyFooter:
<footer class=""sticky bottom-0 bg-gray-200 py-2 px-4""><!-- footer content goes here --><p>&copy; {year} My Website</p></footer>
MainContent:
<div class=""flex-grow p-4"">{children}</div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header at the top of the page, a main content area in the middle, and a sticky footer at the bottom of the page. The header and footer should remain fixed at the top and bottom of the page, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: A standalone component that represents the sticky header.
- StickyFooter: A standalone component that represents the sticky footer.
- ContentArea: A component that takes children, representing the main content area of the page.
HTML:
<div class=""h-screen flex flex-col""><StickyHeader/><ContentArea><!-- main content goes here --></ContentArea><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- header content goes here --><h1>{header_title}</h1></header>
StickyFooter:
<footer class=""sticky bottom-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- footer content goes here --><p>{copyright_text}</p></footer>
ContentArea:
<div class=""flex-1 overflow-y-auto p-4"">{children}</div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: (standalone)
- StickyFooter: (standalone)
- MainContent: (takes children)
HTML:
<div class=""min-h-screen flex flex-col""><StickyHeader/><MainContent><!-- page content goes here --></MainContent><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 bg-white shadow-md py-2 px-4""><!-- header content goes here --><nav><ul><li><a href=""#"">Link 1</a></li><li><a href=""#"">Link 2</a></li><li><a href=""#"">Link 3</a></li></ul></nav></header>
StickyFooter:
<footer class=""sticky bottom-0 bg-gray-200 py-2 px-4""><!-- footer content goes here --><p>&copy; {year} My Website</p></footer>
MainContent:
<div class=""flex-grow p-4"">{children}</div>"
Sticky Header/Footer,"DESCRIPTION:
The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.
COMPONENTS:
- StickyHeader: (standalone)
- StickyFooter: (standalone)
- MainContent: (takes children)
HTML:
<div class=""min-h-screen flex flex-col""><StickyHeader/><MainContent><!-- page content goes here --></MainContent><StickyFooter/></div>
COMPONENT HTML:
StickyHeader:
<header class=""sticky top-0 z-50 bg-white shadow-md py-2 px-4""><!-- header content goes here --><nav><ul><li><a href=""#"">Link 1</a></li><li><a href=""#"">Link 2</a></li><li><a href=""#"">Link 3</a></li></ul></nav></header>
StickyFooter:
<footer class=""sticky bottom-0 bg-gray-200 py-2 px-4""><!-- footer content goes here --><p>&copy; {year} My Website</p></footer>
MainContent:
<div class=""flex-grow p-4"">{children}</div>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Header Search Suggestion,"DESCRIPTION:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
COMPONENTS:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
HTML:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
COMPONENT HTML:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
COMPONENTS:
- LoadingSpinner: standalone component
HTML:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
COMPONENTS:
- LoadingSpinner: standalone component
HTML:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a circular animated loading indicator that spins to indicate that the application is loading or processing something.
COMPONENTS:
- LoadingSpinner: (standalone)
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""inline-block w-8 h-8 border-4 border-solid rounded-full border-white border-t-transparent animate-spin""/>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
COMPONENTS:
- LoadingSpinner: standalone component
HTML:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Loading Spinner: Animated loading indicator,"DESCRIPTION:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
COMPONENTS:
- LoadingSpinner: standalone component
HTML:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should display a toggle button to open and close a navigation menu. The toggle button should display a text indicating its current state.
COMPONENTS:
- NavbarToggler: A standalone component that toggles the navigation menu.
- NavbarToggleText: A standalone component that displays the toggle button text.
HTML:
<nav class=""flex justify-between items-center py-4""><NavbarToggler/><NavbarToggleText/></nav>
COMPONENT HTML:
NavbarToggler:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">{toggleButtonText}</span></button>
NavbarToggleText:
<span class=""text-sm"">{toggleButtonText}</span>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should display a toggle button to open and close a navigation menu. The toggle button should display a text indicating its current state.
COMPONENTS:
- NavbarToggler: A standalone component that toggles the navigation menu.
- NavbarToggleText: A standalone component that displays the toggle button text.
HTML:
<nav class=""flex justify-between items-center py-4""><NavbarToggler/><NavbarToggleText/></nav>
COMPONENT HTML:
NavbarToggler:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Toggle navigation menu""><span class=""sr-only"">{toggleButtonText}</span></button>
NavbarToggleText:
<span class=""text-sm"">{toggleButtonText}</span>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive navigation menu toggle text that displays a toggle icon and a label. On desktop, it should be a horizontal layout, and on mobile, it should be a vertical layout.
COMPONENTS:
- NavigationToggle: Standalone component that contains the toggle icon and the label.
HTML:
<div class=""flex lg:flex-row flex-col justify-between w-full""><NavigationToggle/></div>
COMPONENT HTML:
NavigationToggle:
<div class=""flex justify-center lg:justify-start mb-4 lg:mb-0""><!-- toggle icon --><span class=""material-icons text-lg md:text-xl"">{toggle_icon}</span><!-- toggle label --><span class=""ml-2 text-sm md:text-base"">{toggle_label}</span></div>"
Navigation Menu Toggle Text,"DESCRIPTION:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
COMPONENTS:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
HTML:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
COMPONENT HTML:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
"Area displaying recent notifications or alerts, often accessible via an icon or button","DESCRIPTION:
The UI should display a dropdown list of recent notifications or alerts, accessible via a button or icon. The dropdown list should be responsive, easily accessible, and follow accessibility guidelines.
COMPONENTS:
- NotificationButton: A standalone component displaying an icon or text indicating the presence of notifications.
- NotificationDropdown: A component taking children, displaying a dropdown list of notifications.
- NotificationItem: A standalone component displaying a single notification.
HTML:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><NotificationButton/><NotificationDropdown><NotificationItem/><NotificationItem/><!-- Add more NotificationItem components here --></NotificationDropdown></button>
COMPONENT HTML:
NotificationButton:
<!-- NotificationButton component --><button class=""flex items-center""><span class=""text-lg"">{icon}</span><span class=""text-xs"">{notification_count} new</span></button>
NotificationDropdown:
<!-- NotificationDropdown component --><div class=""absolute bg-white rounded shadow-md p-2""><h5 class=""text-lg font-bold"">{dropdown_title}</h5>{children}</div>
NotificationItem:
<!-- NotificationItem component --><div class=""px-4 py-2 hover:bg-gray-100""><p class=""text-sm"">{notification_text}</p><span class=""text-xs text-gray-500"">{notification_time}</span></div>"
Project Cards/Grids,"DESCRIPTION:
A responsive grid of project cards, with each card displaying a thumbnail, title, description, and tags. The grid should be flexible to accommodate different screen sizes.
COMPONENTS:
- ProjectCard: standalone component that displays a single project card
- ProjectGrid: container component that wraps a grid of project cards, takes children
HTML:
<div class=""max-w-md mx-auto p-4""><ProjectGrid><ProjectCard/><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectGrid></div>
COMPONENT HTML:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src={thumbnail_url} alt={project_title} class=""w-full rounded-t""/><h2 class=""text-lg font-bold"">{project_title}</h2><p class=""text-gray-600"">{project_description}</p><ul class=""flex flex-wrap"">{tags.map((tag) =>( <li class=""mr-2"">{tag}</li>))} </ul></div>
ProjectGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Customer Review Stars,"DESCRIPTION:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
COMPONENTS:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
HTML:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
COMPONENT HTML:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
Product Showcase with Animated Cards,"DESCRIPTION:
The UI should be a product showcase with a grid of animated cards. Each card should have a hover effect and display a product image, title, and description. The grid should be responsive and adjust to different screen sizes.
COMPONENTS:
- ProductCard: (standalone): A single product card with a hover effect.
- ProductGrid: (takes children): A grid container that wraps multiple `ProductCard` components.
HTML:
<div class=""max-w-md mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded overflow-hidden transition duration-500 hover:scale-105""><img src={product_image} alt={product_name} class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p></div></div>
ProductGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
COMPONENTS:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
HTML:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Verified checkmark and badge for official channels,"DESCRIPTION:
The UI should display a verified checkmark and a badge to indicate that a channel is official.
COMPONENTS:
- VerifiedBadge: A standalone component that displays a verified checkmark and a badge.
- CheckmarkIcon: A standalone component that displays a checkmark icon.
HTML:
<div class=""flex items-center""><VerifiedBadge/><span class=""text-sm"">{channelName}</span></div>
COMPONENT HTML:
VerifiedBadge:
<div class=""flex items-center bg-yellow-100 rounded-full py-1 px-2 text-yellow-700""><CheckmarkIcon/><span class=""text-xs"">Official</span></div>
CheckmarkIcon:
<i class=""fas fa-check text-green-500"" aria-hidden=""true""></i>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Card,"DESCRIPTION:
The UI should be a responsive product card that displays a featured product. The card should have a prominent image of the product, a heading with the product name, a short description, and a call-to-action (CTA) button to encourage purchases. The design should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ProductImage: (standalone): Displays the product image
- ProductName: (standalone): Displays the product name
- ProductDescription: (standalone): Displays a short description of the product
- ActionButton: (standalone): Displays a CTA button
HTML:
<div class=""max-w-sm rounded overflow-hidden bg-white shadow-md""><ProductImage/><div class=""px-6 py-4""><ProductName/><ProductDescription/></div><ActionButton/></div>
COMPONENT HTML:
ProductImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover""/>
ProductName:
<h5 class=""text-lg font-bold"">{product_name}</h5>
ProductDescription:
<p class=""text-gray-700 text-base"">{product_description}</p>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Featured Product Title,"DESCRIPTION:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
COMPONENTS:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
HTML:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
COMPONENT HTML:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a user's username, profile picture, and a badge indicating their online status.
COMPONENTS:
- UserProfileDisplay: standalone component that displays the user's profile picture and username.
- OnlineBadge: standalone component that displays the online status badge.
HTML:
<div class=""flex items-center""><UserProfileDisplay/><OnlineBadge/></div>
COMPONENT HTML:
UserProfileDisplay:
<div class=""flex items-center""><img src={profile_picture_url} class=""w-8 h-8 rounded-full""/><p class=""ml-2"">{username}</p></div>
OnlineBadge:
<div class={`w-3 h-3 rounded-full ${is_online ? 'bg-green-500' : 'bg-gray-500'}`}></div>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Username display for other users,"DESCRIPTION:
The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.
COMPONENTS:
- UsernameDisplay: Standalone component that displays a username with optional online status indicator.
- OnlineStatusIndicator: Standalone component that displays an online status indicator (e.g. a green dot).
HTML:
<div class=""flex items-center""><UsernameDisplay/></div>
COMPONENT HTML:
UsernameDisplay:
<span class=""text-sm"">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/>: ''}
OnlineStatusIndicator:
<span class=""inline-block w-2 h-2 rounded-full bg-green-500""></span>"
Upload/Progress Bars,"DESCRIPTION:
The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress bar.
- ProgressText: Standalone component that displays the progress text (e.g., ""35% complete"").
HTML:
<div class=""flex flex-col items-center py-4""><ProgressBar/><ProgressText/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 w-full rounded-md overflow-hidden""><div class=""bg-blue-500 h-4"" style={`width: ${progressPercentage}%`}></div></div>
ProgressText:
<p class=""text-lg font-bold"">{progressPercentage}% complete</p>"
Upload/Progress Bars,"DESCRIPTION:
The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress bar.
- ProgressText: Standalone component that displays the progress text (e.g., ""35% complete"").
HTML:
<div class=""flex flex-col items-center py-4""><ProgressBar/><ProgressText/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 w-full rounded-md overflow-hidden""><div class=""bg-blue-500 h-4"" style={`width: ${progressPercentage}%`}></div></div>
ProgressText:
<p class=""text-lg font-bold"">{progressPercentage}% complete</p>"
Upload/Progress Bars,"DESCRIPTION:
A horizontal progress bar that fills up as the upload progresses, with a percentage indicator.
COMPONENTS:
- ProgressBar: a standalone component that displays the progress of the upload
- ProgressIndicator: a standalone component that displays the percentage of the upload
HTML:
<div class=""flex items-center gap-2""><ProgressBar/><ProgressIndicator/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-2 rounded-lg overflow-hidden""><div class=""bg-blue-500 h-2 rounded-lg"" style={{ width: `${progressPercentage}%` }}/></div>
ProgressIndicator:
<p class=""text-sm"">{progressPercentage} %</p>"
Upload/Progress Bars,"DESCRIPTION:
The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress bar.
- ProgressText: Standalone component that displays the progress text (e.g., ""35% complete"").
HTML:
<div class=""flex flex-col items-center py-4""><ProgressBar/><ProgressText/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 w-full rounded-md overflow-hidden""><div class=""bg-blue-500 h-4"" style={`width: ${progressPercentage}%`}></div></div>
ProgressText:
<p class=""text-lg font-bold"">{progressPercentage}% complete</p>"
Upload/Progress Bars,"DESCRIPTION:
The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.
COMPONENTS:
- ProgressBar: Standalone component that displays the progress bar.
- ProgressText: Standalone component that displays the progress text (e.g., ""35% complete"").
HTML:
<div class=""flex flex-col items-center py-4""><ProgressBar/><ProgressText/></div>
COMPONENT HTML:
ProgressBar:
<div class=""bg-gray-200 h-4 w-full rounded-md overflow-hidden""><div class=""bg-blue-500 h-4"" style={`width: ${progressPercentage}%`}></div></div>
ProgressText:
<p class=""text-lg font-bold"">{progressPercentage}% complete</p>"
User Comments and Feedback,"DESCRIPTION:
The UI should display a list of user comments and feedback, with each comment showing the user's name, profile picture, comment text, and a timestamp. The UI should also include a form for users to submit new comments.
COMPONENTS:
- CommentCard: (Standalone): Displays a single comment, including the user's name, profile picture, comment text, and timestamp.
- CommentForm: (Standalone): Provides a form for users to submit new comments.
- CommentList: (Takes Children): Displays a list of `CommentCard` components.
- UserProfilePicture: (Standalone): Displays a user's profile picture.
HTML:
<div class=""max-w-md mx-auto p-4""><CommentForm/><CommentList><CommentCard/><CommentCard/><!-- more CommentCard components here --></CommentList></div>
COMPONENT HTML:
CommentCard:
<div class=""flex mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex mb-4""><input type=""text"" placeholder=""Enter your comment..."" class=""w-full p-2""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
CommentList:
<ul class=""list-none mb-4"">{children}</ul>
UserProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""User Profile Picture""/>"
Notification Badge: Displays new notification count,"DESCRIPTION:
A small badge that displays a count of new notifications, often placed in the top right corner of a navigation item or icon.
COMPONENTS:
- NotificationBadge: Standalone component that displays the notification count.
HTML:
<nav><ul><li><a href=""#"" class=""flex items-center""><span>Notifications</span><NotificationBadge/></a></li></ul></nav>
COMPONENT HTML:
NotificationBadge:
<div class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notificationCount}</div>"
Social media feed with latest posts and images,"DESCRIPTION:
The UI should be a social media feed that displays the latest posts and images in a responsive, mobile-first layout. The feed should be accessible and SEO-friendly, with alt text for images and semantic HTML5 elements.
COMPONENTS:
- PostCard: A standalone component that displays a single post with an image, post text, and post author.
- PostImage: A standalone component that displays an image with alt text.
- PostText: A standalone component that displays the post text.
- PostAuthor: A standalone component that displays the post author's name.
- SocialMediaFeed: A component that takes children (multiple PostCard components) and displays them in a feed layout.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SocialMediaFeed><PostCard/><PostCard/><!-- Repeat PostCard components for each post in the feed --></SocialMediaFeed></div>
COMPONENT HTML:
PostCard:
<article class=""flex flex-col mb-4 md:mb-6 lg:mb-12""><PostImage/><PostText/><PostAuthor/></article>
PostImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md"">
PostText:
<p class=""text-lg"">{post_text}</p>
PostAuthor:
<p class=""text-sm text-gray-600"">{post_author_name}</p>
SocialMediaFeed:
<div class=""flex flex-col divide-y divide-gray-200"">{children}</div>"
Social media feed with latest posts and images,"DESCRIPTION:
The UI should be a social media feed that displays the latest posts and images in a responsive, mobile-first layout. The feed should be accessible and SEO-friendly, with alt text for images and semantic HTML5 elements.
COMPONENTS:
- PostCard: A standalone component that displays a single post with an image, post text, and post author.
- PostImage: A standalone component that displays an image with alt text.
- PostText: A standalone component that displays the post text.
- PostAuthor: A standalone component that displays the post author's name.
- SocialMediaFeed: A component that takes children (multiple PostCard components) and displays them in a feed layout.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SocialMediaFeed><PostCard/><PostCard/><!-- Repeat PostCard components for each post in the feed --></SocialMediaFeed></div>
COMPONENT HTML:
PostCard:
<article class=""flex flex-col mb-4 md:mb-6 lg:mb-12""><PostImage/><PostText/><PostAuthor/></article>
PostImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md"">
PostText:
<p class=""text-lg"">{post_text}</p>
PostAuthor:
<p class=""text-sm text-gray-600"">{post_author_name}</p>
SocialMediaFeed:
<div class=""flex flex-col divide-y divide-gray-200"">{children}</div>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
COMPONENTS:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
COMPONENT HTML:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
COMPONENTS:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
COMPONENT HTML:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
A simple page with a header, a section for a QR code, and a section for a 2FA code.
COMPONENTS:
- AuthHeader: - standalone (header for the 2FA page)
- QrCodeSection: - standalone (section for displaying the QR code)
- TwoFactorCode: - standalone (section for displaying the 2FA code)
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><AuthHeader/><div class=""flex justify-center mb-4""><QrCodeSection/></div><div class=""mb-4""><TwoFactorCode/></div></div>
COMPONENT HTML:
AuthHeader:
<header class=""mb-4""><h1 class=""text-2xl font-bold"">Two-Factor Authentication</h1></header>
QrCodeSection:
<section class=""bg-white p-4 rounded shadow-md""><img src=""{qr_code_image_url}"" alt=""QR Code"" class=""w-64 h-64 mx-auto""/><p class=""text-sm text-gray-600"">{qr_code_instructions}</p></section>
TwoFactorCode:
<section class=""bg-white p-4 rounded shadow-md""><h2 class=""text-lg font-bold"">Your 2FA Code</h2><p class=""text-2xl"">{two_factor_code}</p><p class=""text-sm text-gray-600"">{two_factor_code_instructions}</p></section>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
COMPONENTS:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
COMPONENT HTML:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
Two-Factor Auth/QR Codes,"DESCRIPTION:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
COMPONENTS:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
COMPONENT HTML:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
Navigation Dropdown Icon,"DESCRIPTION:
The UI should be a navigation dropdown icon that expands when clicked, displaying a list of navigation links. The icon should be a responsive, mobile-first, accessible, and SEO-friendly dropdown menu.
COMPONENTS:
- DropdownToggle: (standalone) - the clickable icon that expands the dropdown menu
- DropdownMenu: (takes children) - the container for the navigation links
- DropdownLink: (standalone) - an individual navigation link within the dropdown menu
HTML:
<nav><DropdownToggle/><DropdownMenu><ul><li><DropdownLink/></li><li><DropdownLink/></li><!-- more links here --></ul></DropdownMenu></nav>
COMPONENT HTML:
DropdownToggle:
<button class=""w-8 h-8 flex justify-center items-center bg-gray-200 hover:bg-gray-300 rounded-full""><!-- icon here, e.g. <span>▼</span>-->{toggle_icon}</button>
DropdownMenu:
<div class=""absolute bg-white py-2 rounded-md shadow-md"">{children}</div>
DropdownLink:
<a href={link_href} class=""block px-4 py-2 text-gray-600 hover:text-gray-900"">{link_text}</a>"
Navigation Dropdown Icon,"DESCRIPTION:
The UI should be a navigation dropdown icon that expands when clicked, displaying a list of navigation links. The icon should be a responsive, mobile-first, accessible, and SEO-friendly dropdown menu.
COMPONENTS:
- DropdownToggle: (standalone) - the clickable icon that expands the dropdown menu
- DropdownMenu: (takes children) - the container for the navigation links
- DropdownLink: (standalone) - an individual navigation link within the dropdown menu
HTML:
<nav><DropdownToggle/><DropdownMenu><ul><li><DropdownLink/></li><li><DropdownLink/></li><!-- more links here --></ul></DropdownMenu></nav>
COMPONENT HTML:
DropdownToggle:
<button class=""w-8 h-8 flex justify-center items-center bg-gray-200 hover:bg-gray-300 rounded-full""><!-- icon here, e.g. <span>▼</span>-->{toggle_icon}</button>
DropdownMenu:
<div class=""absolute bg-white py-2 rounded-md shadow-md"">{children}</div>
DropdownLink:
<a href={link_href} class=""block px-4 py-2 text-gray-600 hover:text-gray-900"">{link_text}</a>"
Navigation Dropdown Icon,"DESCRIPTION:
The UI should be a navigation dropdown icon that expands when clicked, displaying a list of navigation links. The icon should be a responsive, mobile-first, accessible, and SEO-friendly dropdown menu.
COMPONENTS:
- DropdownToggle: (standalone) - the clickable icon that expands the dropdown menu
- DropdownMenu: (takes children) - the container for the navigation links
- DropdownLink: (standalone) - an individual navigation link within the dropdown menu
HTML:
<nav><DropdownToggle/><DropdownMenu><ul><li><DropdownLink/></li><li><DropdownLink/></li><!-- more links here --></ul></DropdownMenu></nav>
COMPONENT HTML:
DropdownToggle:
<button class=""w-8 h-8 flex justify-center items-center bg-gray-200 hover:bg-gray-300 rounded-full""><!-- icon here, e.g. <span>▼</span>-->{toggle_icon}</button>
DropdownMenu:
<div class=""absolute bg-white py-2 rounded-md shadow-md"">{children}</div>
DropdownLink:
<a href={link_href} class=""block px-4 py-2 text-gray-600 hover:text-gray-900"">{link_text}</a>"
Product Description Textarea,"DESCRIPTION:
The UI should be a responsive, mobile-first, and accessible textarea component for entering product descriptions. It should have a clear and concise design, with a clear label and sufficient space for user input.
COMPONENTS:
- ProductDescriptionTextarea: A standalone component representing the textarea for entering product descriptions.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""product-description"" class=""block mb-2 text-lg"">Product Description</label><ProductDescriptionTextarea/></div>
COMPONENT HTML:
ProductDescriptionTextarea:
<textarea id=""product-description"" class=""block w-full p-2 pl-10 text-lg text-gray-700 bg-gray-50 rounded"" placeholder=""Enter product description...""/>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Ability to edit text or data directly within its context on the page,"DESCRIPTION:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
COMPONENTS:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
COMPONENT HTML:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply input field with editing tools. The editing tools include a bold button, an italic button, and a link button. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- PostReplyInput: standalone component
- EditingTools: standalone component
- BoldButton: standalone component
- ItalicButton: standalone component
- LinkButton: standalone component
HTML:
<div class=""flex flex-col""><PostReplyInput/><EditingTools/></div>
COMPONENT HTML:
PostReplyInput:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between mb-2""><BoldButton/><ItalicButton/><LinkButton/></div>
BoldButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-bold"">{bold_icon}</i></button>
ItalicButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-italic"">{italic_icon}</i></button>
LinkButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded""><i class=""fas fa-link"">{link_icon}</i></button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Post Reply and Editing Tools,"DESCRIPTION:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
HTML:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
COMPONENT HTML:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media sharing buttons, each with an icon and a text label. The buttons should be medium-sized, round, and have a slight hover effect. The row should be centered and have some padding.
COMPONENTS:
- SocialSharingButton: (standalone): a single social media sharing button with an icon and text label
- SocialSharingButtonsRow: (takes children): a horizontal row of social sharing buttons
HTML:
<div class=""flex justify-center py-4""><SocialSharingButtonsRow><SocialSharingButton/><SocialSharingButton/><SocialSharingButton/><!-- add more buttons here --></SocialSharingButtonsRow></div>
COMPONENT HTML:
SocialSharingButton:
<a href=""{sharing_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-200""><i class={`fab fa-${social_media_icon} text-lg`}></i><span class=""sr-only"">{social_media_name}</span></a>
SocialSharingButtonsRow:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Sharing Buttons,"DESCRIPTION:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
HTML:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
COMPONENT HTML:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-${social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Tooltip providing additional information specific to the context of the element,"DESCRIPTION:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
COMPONENTS:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
HTML:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
COMPONENT HTML:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Tooltip providing additional information specific to the context of the element,"DESCRIPTION:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
COMPONENTS:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
HTML:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
COMPONENT HTML:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Tooltip providing additional information specific to the context of the element,"DESCRIPTION:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
COMPONENTS:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
HTML:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
COMPONENT HTML:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Tooltip providing additional information specific to the context of the element,"DESCRIPTION:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
COMPONENTS:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
HTML:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
COMPONENT HTML:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., ""Reply"" and ""Reply All"") below the email body.
COMPONENTS:
- EmailThread: Standalone component that displays an individual email thread.
- EmailMetadata: Standalone component that displays the sender's name and email subject.
- EmailBody: Standalone component that displays the email body.
- ReplyButtons: Standalone component that displays the reply buttons.
HTML:
<div class=""max-w-md mx-auto p-4""><EmailThread/></div>
COMPONENT HTML:
EmailThread:
<div class=""border bg-white rounded p-4""><EmailMetadata/><EmailBody/><ReplyButtons/></div>
EmailMetadata:
<div class=""flex justify-between mb-2""><p class=""font-bold"">{sender_name}</p><p class=""text-gray-600"">{email_subject}</p></div>
EmailBody:
<div class=""mb-4""><p>{email_body}</p></div>
ReplyButtons:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply All</button></div>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., ""Reply"" and ""Reply All"") below the email body.
COMPONENTS:
- EmailThread: Standalone component that displays an individual email thread.
- EmailMetadata: Standalone component that displays the sender's name and email subject.
- EmailBody: Standalone component that displays the email body.
- ReplyButtons: Standalone component that displays the reply buttons.
HTML:
<div class=""max-w-md mx-auto p-4""><EmailThread/></div>
COMPONENT HTML:
EmailThread:
<div class=""border bg-white rounded p-4""><EmailMetadata/><EmailBody/><ReplyButtons/></div>
EmailMetadata:
<div class=""flex justify-between mb-2""><p class=""font-bold"">{sender_name}</p><p class=""text-gray-600"">{email_subject}</p></div>
EmailBody:
<div class=""mb-4""><p>{email_body}</p></div>
ReplyButtons:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply All</button></div>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons, showing the email's sender, subject, and content, along with buttons to reply to or delete the email.
COMPONENTS:
- EmailThreadHeader: standalone, displays email sender and subject
- EmailContent: standalone, displays email content
- ReplyButton: standalone, displays a reply button
- DeleteButton: standalone, displays a delete button
- EmailThread: takes children, wraps the entire email thread
HTML:
<EmailThread><EmailThreadHeader/><EmailContent/><ReplyButton/><DeleteButton/></EmailThread>
COMPONENT HTML:
EmailThreadHeader:
<div class=""flex justify-between""><p>{sender}</p><p>{subject}</p></div>
EmailContent:
<div><p>{content}</p></div>
ReplyButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button>
DeleteButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button>
EmailThread:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Individual email thread with reply buttons,"DESCRIPTION:
The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., ""Reply"" and ""Reply All"") below the email body.
COMPONENTS:
- EmailThread: Standalone component that displays an individual email thread.
- EmailMetadata: Standalone component that displays the sender's name and email subject.
- EmailBody: Standalone component that displays the email body.
- ReplyButtons: Standalone component that displays the reply buttons.
HTML:
<div class=""max-w-md mx-auto p-4""><EmailThread/></div>
COMPONENT HTML:
EmailThread:
<div class=""border bg-white rounded p-4""><EmailMetadata/><EmailBody/><ReplyButtons/></div>
EmailMetadata:
<div class=""flex justify-between mb-2""><p class=""font-bold"">{sender_name}</p><p class=""text-gray-600"">{email_subject}</p></div>
EmailBody:
<div class=""mb-4""><p>{email_body}</p></div>
ReplyButtons:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply All</button></div>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button. The edit button should be aligned to the right side of the container. On smaller screens, the edit button should be aligned below the channel topic.
COMPONENTS:
- ChannelTopic: standalone - displays the channel topic
- ChannelDescription: standalone - displays the channel description
- EditButton: standalone - displays an edit button
- ChannelInfo: takes children - wraps the channel topic, description, and edit button
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><ChannelInfo><ChannelTopic/><ChannelDescription/><EditButton/></ChannelInfo></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>
ChannelInfo:
<div class=""flex flex-wrap justify-between"">{children}</div>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button. The edit button should be aligned to the right side of the container. On smaller screens, the edit button should be aligned below the channel topic.
COMPONENTS:
- ChannelTopic: standalone - displays the channel topic
- ChannelDescription: standalone - displays the channel description
- EditButton: standalone - displays an edit button
- ChannelInfo: takes children - wraps the channel topic, description, and edit button
HTML:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><ChannelInfo><ChannelTopic/><ChannelDescription/><EditButton/></ChannelInfo></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>
ChannelInfo:
<div class=""flex flex-wrap justify-between"">{children}</div>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button.
COMPONENTS:
- ChannelTopic: standalone component to display the channel topic
- ChannelDescription: standalone component to display the channel description
- EditButton: standalone component for the edit button
HTML:
<div class=""flex flex-col gap-2""><ChannelTopic/><ChannelDescription/><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<p class=""text-lg font-bold"">{channel_topic}</p>
ChannelDescription:
<p class=""text-sm"">{channel_description}</p>
EditButton:
<button class=""px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded"">Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
COMPONENTS:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
HTML:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Channel topic and description with edit button,"DESCRIPTION:
The UI should display a channel topic and description with an edit button. The topic and description should be clearly readable, and the edit button should be prominent and accessible.
COMPONENTS:
- ChannelTopic: A standalone component that displays the channel topic.
- ChannelDescription: A standalone component that displays the channel description.
- EditButton: A standalone component that displays an edit button.
HTML:
<div class=""flex flex-col gap-4 md:flex-row md:items-center""><div class=""flex-1""><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
COMPONENT HTML:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-sm"">{channel_description}</p>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Quiz and Assessment Tools,"DESCRIPTION:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
COMPONENTS:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
HTML:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
COMPONENT HTML:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.
COMPONENTS:
- UserProfileSuggestion: a standalone component representing a single user suggestion, with a profile picture, username, and follow button.
- UserList: a component that takes children, rendering a list of `UserProfileSuggestion` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Who to Follow</h2><UserList><UserProfileSuggestion/><UserProfileSuggestion/><!-- more user suggestions here --></UserList></div>
COMPONENT HTML:
UserProfileSuggestion:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full mr-4""/><div><p class=""text-lg"">{username}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div></div>
UserList:
<ul class=""list-none mb-0"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.
COMPONENTS:
- UserProfileSuggestion: a standalone component representing a single user suggestion, with a profile picture, username, and follow button.
- UserList: a component that takes children, rendering a list of `UserProfileSuggestion` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Who to Follow</h2><UserList><UserProfileSuggestion/><UserProfileSuggestion/><!-- more user suggestions here --></UserList></div>
COMPONENT HTML:
UserProfileSuggestion:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full mr-4""/><div><p class=""text-lg"">{username}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div></div>
UserList:
<ul class=""list-none mb-0"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The UI should display a list of user suggestions with their profile pictures, names, and a ""Follow"" button. The list should be scrollable and have a header with a title.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which is a list of `UserSuggestionCard` components.
HTML:
<div class=""max-h-screen overflow-y-scroll px-4 pt-4""><h2 class=""text-lg font-bold"">Who to follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} class=""w-12 h-12 rounded-full""/><div class=""ml-4""><p class=""text-lg"">{username}</p><p class=""text-gray-600"">{name}</p></div><button class=""ml-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow </button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.
COMPONENTS:
- UserProfileSuggestion: a standalone component representing a single user suggestion, with a profile picture, username, and follow button.
- UserList: a component that takes children, rendering a list of `UserProfileSuggestion` components.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Who to Follow</h2><UserList><UserProfileSuggestion/><UserProfileSuggestion/><!-- more user suggestions here --></UserList></div>
COMPONENT HTML:
UserProfileSuggestion:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" class=""w-12 h-12 rounded-full mr-4""/><div><p class=""text-lg"">{username}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div></div>
UserList:
<ul class=""list-none mb-0"">{children}</ul>"
Who to follow suggestions for users,"DESCRIPTION:
The ""Who to Follow"" component should display a list of user suggestions with their profile pictures, usernames, and a ""Follow"" button. It should be responsive, accessible, and easy to use.
COMPONENTS:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which are multiple `UserSuggestionCard` components.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Who to Follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
COMPONENT HTML:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full mr-4""><div class=""flex-1""><p class=""text-lg"">{username}</p><p class=""text-gray-600 text-sm"">{bio}</p></div><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Hashtag display for topic tracking,"DESCRIPTION:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
COMPONENT HTML:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating, with the title in a larger font size and the rating displayed as a fraction of 5.
COMPONENTS:
- ProductTitle: standalone component that displays the product title
- ProductRating: standalone component that displays the product rating
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><ProductRating/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-3xl font-bold"">{productName}</h2>
ProductRating:
<p class=""text-lg"">{rating}/5</p>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating, with the title in a larger font size and the rating displayed as a fraction of 5.
COMPONENTS:
- ProductTitle: standalone component that displays the product title
- ProductRating: standalone component that displays the product rating
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><ProductRating/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-3xl font-bold"">{productName}</h2>
ProductRating:
<p class=""text-lg"">{rating}/5</p>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.
COMPONENTS:
- ProductTitle: A standalone component that displays the product title.
- RatingIndicator: A standalone component that displays the product rating.
HTML:
<div class=""flex flex-wrap justify-between""><ProductTitle/><RatingIndicator/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
RatingIndicator:
<div class=""flex items-center""><span class=""text-sm"">{ratingValue}/ 5</span><span class=""rating-icon"">{/* rating icon */}</span></div>"
Product title and rating display,"DESCRIPTION:
The UI should display a product title and its corresponding rating. The rating should be displayed as a series of stars, with the number of filled stars indicating the rating. The product title should be prominent and easy to read.
COMPONENTS:
- ProductTitle: a standalone component that displays the product title.
- RatingDisplay: a standalone component that displays the rating as a series of stars.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><RatingDisplay/></div>
COMPONENT HTML:
ProductTitle:
<h2 class=""text-2xl font-bold"">{productName}</h2>
RatingDisplay:
<div class=""flex"">{rating}/5 <div class=""flex"">{[...Array(5).keys()].map((_, i) =>( <i key={i} class={`text-yellow-400 ${i < rating ? 'fas fa-star' : 'far fa-star'}`}></i>))} </div></div>"
Post/Tweet Box,"DESCRIPTION:
A post/tweet box with a profile picture, username, input field, and a send button.
COMPONENTS:
- UserProfilePicture: Standalone component
- Username: Standalone component
- PostInput: Takes children
- SendButton: Standalone component
HTML:
<div class=""flex p-4""><UserProfilePicture/><div class=""flex-1 ml-4""><Username/><PostInput><PostInput/></PostInput><SendButton/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img class=""w-12 h-12 rounded-full"" src={profile_picture_url} alt=""Profile Picture""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
PostInput:
<textarea class=""w-full p-2 pl-10 text-lg"" rows=""3"" placeholder=""What's on your mind?"">{children}</textarea>
SendButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a button to submit the search query. The search bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- SearchBar: standalone component that contains the input field and search button.
- SearchInput: standalone component that represents the input field.
- SearchButton: standalone component that represents the search button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center mb-4""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"" placeholder=""Search..."">
SearchButton:
<button type=""submit"" class=""text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5"">Search</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar,"DESCRIPTION:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
COMPONENTS:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
HTML:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
COMPONENT HTML:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Callout Box Border Style,"DESCRIPTION:
A callout box with a border style, usually used to highlight important information.
COMPONENTS:
- CalloutBox: A standalone component that contains the callout box content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""bg-yellow-100 border-l-4 border-orange-500 p-4 rounded-md""><p>{callout_message}</p></div>"
Callout Box Border Style,"DESCRIPTION:
A callout box with a border style, usually used to highlight important information.
COMPONENTS:
- CalloutBox: A standalone component that contains the callout box content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""bg-yellow-100 border-l-4 border-orange-500 p-4 rounded-md""><p>{callout_message}</p></div>"
Callout Box Border Style,"DESCRIPTION:
A callout box with a border style, usually used to highlight important information.
COMPONENTS:
- CalloutBox: A standalone component that contains the callout box content.
HTML:
<div class=""container mx-auto p-4 md:p-6""><CalloutBox/></div>
COMPONENT HTML:
CalloutBox:
<div class=""bg-yellow-100 border-l-4 border-orange-500 p-4 rounded-md""><p>{callout_message}</p></div>"
Shopping Cart Icon,"DESCRIPTION:
The UI should be a shopping cart icon with a badge indicating the number of items in the cart.
COMPONENTS:
- ShoppingCartIcon: Standalone component representing the shopping cart icon.
- Badge: Standalone component representing the badge displaying the number of items in the cart.
HTML:
<div class=""absolute top-2 right-2""><ShoppingCartIcon/><Badge/></div>
COMPONENT HTML:
ShoppingCartIcon:
<i class=""fas fa-shopping-cart text-lg text-gray-500 hover:text-gray-800 cursor-pointer""></i>
Badge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{item_count}</span>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple footer newsletter input field with a submit button, responsive and accessible, with a clean and minimalistic design.
COMPONENTS:
- FooterNewsletterInput: standalone component that contains the input field and submit button.
- NewsletterInputField: standalone component that is the input field for the newsletter email address.
- SubmitButton: standalone component that is the submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-4""><div class=""container mx-auto p-4 md:p-6""><FooterNewsletterInput/></div></footer>
COMPONENT HTML:
FooterNewsletterInput:
<div class=""w-full max-w-md mx-auto mb-4""><NewsletterInputField/><SubmitButton/></div>
NewsletterInputField:
<input type=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple footer newsletter input field with a submit button, responsive and accessible, with a clean and minimalistic design.
COMPONENTS:
- FooterNewsletterInput: standalone component that contains the input field and submit button.
- NewsletterInputField: standalone component that is the input field for the newsletter email address.
- SubmitButton: standalone component that is the submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-4""><div class=""container mx-auto p-4 md:p-6""><FooterNewsletterInput/></div></footer>
COMPONENT HTML:
FooterNewsletterInput:
<div class=""w-full max-w-md mx-auto mb-4""><NewsletterInputField/><SubmitButton/></div>
NewsletterInputField:
<input type=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a responsive footer newsletter input component that is mobile-first, accessible, and SEO-friendly. It should consist of a container with a heading, a brief description, an input field for email, a submit button, and a privacy policy link.
COMPONENTS:
- FooterNewsletter: Standalone component that contains all the elements (heading, description, input, button, and link)
- InputField: Standalone component that contains the email input field
- SubmitButton: Standalone component that contains the submit button
- PrivacyPolicyLink: Standalone component that contains the privacy policy link
HTML:
<footer class=""bg-gray-200 h-screen p-4""><FooterNewsletter/></footer>
COMPONENT HTML:
FooterNewsletter:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Stay updated</h2><p class=""text-sm mb-4"">Get the latest news and updates from us.</p><InputField/><SubmitButton/><PrivacyPolicyLink/></div>
InputField:
<input type=""email"" placeholder=""Enter your email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
PrivacyPolicyLink:
<p class=""text-xs text-gray-600"">By subscribing, you agree to our <a href={privacy_policy_url} target=""_blank"" class=""text-blue-600 hover:text-blue-900"">privacy policy</a>.</p>"
Footer Newsletter Input,"DESCRIPTION:
The UI should be a simple newsletter input field with a button to submit the email address. It should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- NewsletterInputWrapper: - standalone component that wraps the newsletter input and button.
- NewsletterInput: - standalone component that is a text input field.
- SubscribeButton: - standalone component that is a submit button.
HTML:
<footer class=""bg-gray-200 h-screen pt-12 pb-6""><NewsletterInputWrapper/></footer>
COMPONENT HTML:
NewsletterInputWrapper:
<div class=""max-w-md mx-auto p-4""><NewsletterInput/><SubscribeButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should display a profile picture, username, and a button to follow/unfollow the user. It should be responsive, with the profile picture and username aligned to the left and the follow button to the right on larger screens, and stacked on smaller screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays a profile picture.
- Username: Standalone component that displays the username.
- FollowButton: Standalone component that displays a button to follow or unfollow the user.
- SocialMediaFeedHeader: Component that takes children, which consists of the profile picture, username, and follow button.
HTML:
<header class=""flex flex-wrap justify-between p-4 lg:p-6""><SocialMediaFeedHeader><ProfilePicture/><Username/><FollowButton/></SocialMediaFeedHeader></header>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""Profile Picture""/>
Username:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{follow_button_text}</button>
SocialMediaFeedHeader:
<div class=""flex flex-wrap lg:flex-nowrap justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should display a profile picture, username, and a button to follow/unfollow the user. It should be responsive, with the profile picture and username aligned to the left and the follow button to the right on larger screens, and stacked on smaller screens.
COMPONENTS:
- ProfilePicture: Standalone component that displays a profile picture.
- Username: Standalone component that displays the username.
- FollowButton: Standalone component that displays a button to follow or unfollow the user.
- SocialMediaFeedHeader: Component that takes children, which consists of the profile picture, username, and follow button.
HTML:
<header class=""flex flex-wrap justify-between p-4 lg:p-6""><SocialMediaFeedHeader><ProfilePicture/><Username/><FollowButton/></SocialMediaFeedHeader></header>
COMPONENT HTML:
ProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""Profile Picture""/>
Username:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{follow_button_text}</button>
SocialMediaFeedHeader:
<div class=""flex flex-wrap lg:flex-nowrap justify-between items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The UI should display a header for a social media feed, showing the profile picture, username, and a button to follow the user. The header should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UserProfilePicture: Standalone component to display the user's profile picture.
- UsernameDisplay: Standalone component to display the username.
- FollowButton: Standalone component to display a button to follow the user.
- SocialMediaFeedHeader: Component that takes children (UserProfilePicture, UsernameDisplay, and FollowButton).
HTML:
<div class=""flex justify-between p-4""><SocialMediaFeedHeader><UserProfilePicture/><UsernameDisplay/><FollowButton/></SocialMediaFeedHeader></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-12 h-12 rounded-full mr-4""/>
UsernameDisplay:
<p class=""text-lg font-bold"">{username}</p>
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow</button>
SocialMediaFeedHeader:
<div class=""flex items-center"">{children}</div>"
Social Media Feed Header,"DESCRIPTION:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
HTML:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
COMPONENT HTML:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
Social Media Feed Header,"DESCRIPTION:
The UI should be a responsive header that contains a username, profile picture, and a post count. It should be easily accessible on both desktop and mobile devices.
COMPONENTS:
- UserProfile: (standalone) - contains the profile picture and username
- PostCount: (standalone) - displays the number of posts
- SocialMediaHeader: (takes children) - the main header component that contains the `UserProfile` and `PostCount` components
HTML:
<header class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SocialMediaHeader><UserProfile/><PostCount/></SocialMediaHeader></header>
COMPONENT HTML:
UserProfile:
<div class=""flex items-center mb-4 lg:mb-6""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg lg:text-xl"">{username}</h2></div>
PostCount:
<p class=""text-sm lg:text-base"">{post_count} posts</p>
SocialMediaHeader:
<div class=""flex flex-col lg:flex-row justify-between items-center"">{children}</div>"
Skills section with icons and proficiency levels,"DESCRIPTION:
A Skills section that displays a list of skills with their corresponding icons and proficiency levels.
COMPONENTS:
- SkillCard: Standalone component that displays a single skill with its icon and proficiency level.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Skills</h2><ul class=""list-none mb-0""><SkillCard/><SkillCard/><SkillCard/><!-- Add more SkillCard components as needed --></ul></div>
COMPONENT HTML:
SkillCard:
<li class=""flex items-center mb-4""><i class=""mr-2 {icon_class}"" aria-hidden=""true""></i><span class=""text-lg"">{skill_name}</span><span class=""text-sm text-gray-600"">{proficiency_level}</span></li>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Responsive Video Embeds,"DESCRIPTION:
A responsive video embed that adjusts to different screen sizes, with a maximum width of 800px and a height that scales accordingly.
COMPONENTS:
- VideoEmbed: standalone component, contains the video iframe and styling.
HTML:
<div class=""max-w-md mx-auto p-4""><VideoEmbed/></div>
COMPONENT HTML:
VideoEmbed:
<!-- wrapper div for video iframe --><div class=""aspect-w-16 aspect-h-9""><!-- iframe with video content --><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Responsive Video Embeds,"DESCRIPTION:
The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.
COMPONENTS:
- ResponsiveVideoEmbed: A standalone component that wraps the video iframe.
- VideoIFrame: A standalone component that renders the video iframe.
HTML:
<div class=""container max-w-md mx-auto p-4""><ResponsiveVideoEmbed/></div>
COMPONENT HTML:
ResponsiveVideoEmbed:
<div class=""aspect-w-16 aspect-h-9""><VideoIFrame/></div>
VideoIFrame:
<iframe class=""w-full h-full"" src={`https://www.youtube.com/embed/${video_id}`} frameBorder=""0"" allowFullScreen/>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.
COMPONENTS:
- TweetHeader: standalone, displays the profile picture, username, handle, and timestamp
- TweetText: standalone, displays the text of the tweet
- TweetMedia: standalone, displays any media associated with the tweet (e.g. images or videos)
- TweetFooter: standalone, displays any additional information or actions (e.g. likes, retweets, replies)
HTML:
<div class=""flex w-full p-4 rounded-lg shadow-md bg-white""><TweetHeader/><TweetText/><TweetMedia/><TweetFooter/></div>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center mb-2""><img src=""{profilePictureUrl}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-2""/><div><span class=""text-lg font-bold"">{username}</span><span class=""text-gray-600"">@{handle}</span><span class=""text-gray-600"">{timestamp}</span></div></div>
TweetText:
<p class=""text-lg"">{tweetText}</p>
TweetMedia:
<!-- If there is media, display it -->{mediaUrl && ( <img src={mediaUrl} alt=""Tweet media"" class=""w-full mb-2""/>)}
TweetFooter:
<div class=""flex justify-between text-gray-600 mb-2""><span>Likes: {likeCount}</span><span>Retweets: {retweetCount}</span><span>Replies: {replyCount}</span><!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.
COMPONENTS:
- TweetHeader: standalone, displays the profile picture, username, handle, and timestamp
- TweetText: standalone, displays the text of the tweet
- TweetMedia: standalone, displays any media associated with the tweet (e.g. images or videos)
- TweetFooter: standalone, displays any additional information or actions (e.g. likes, retweets, replies)
HTML:
<div class=""flex w-full p-4 rounded-lg shadow-md bg-white""><TweetHeader/><TweetText/><TweetMedia/><TweetFooter/></div>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center mb-2""><img src=""{profilePictureUrl}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-2""/><div><span class=""text-lg font-bold"">{username}</span><span class=""text-gray-600"">@{handle}</span><span class=""text-gray-600"">{timestamp}</span></div></div>
TweetText:
<p class=""text-lg"">{tweetText}</p>
TweetMedia:
<!-- If there is media, display it -->{mediaUrl && ( <img src={mediaUrl} alt=""Tweet media"" class=""w-full mb-2""/>)}
TweetFooter:
<div class=""flex justify-between text-gray-600 mb-2""><span>Likes: {likeCount}</span><span>Retweets: {retweetCount}</span><span>Replies: {replyCount}</span><!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet post with the user's profile picture, username, timestamp, tweet content, and a reply button.
COMPONENTS:
- UserProfilePicture: Standalone component that displays the user's profile picture.
- TweetContent: Takes children component that displays the tweet content.
- ReplyButton: Standalone component that displays a reply button.
- TweetPost: Takes children component that displays the entire tweet post.
HTML:
<TweetPost><UserProfilePicture/><TweetContent><h2>{username}</h2><p>{tweet_content}</p><p>{timestamp}</p></TweetContent><ReplyButton/></TweetPost>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} alt={username} class=""w-10 h-10 rounded-full""/>
TweetContent:
<div class=""ml-4"">{children}</div>
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Reply</button>
TweetPost:
<div class=""flex mb-4"">{children}</div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.
COMPONENTS:
- TweetHeader: standalone, displays the profile picture, username, handle, and timestamp
- TweetText: standalone, displays the text of the tweet
- TweetMedia: standalone, displays any media associated with the tweet (e.g. images or videos)
- TweetFooter: standalone, displays any additional information or actions (e.g. likes, retweets, replies)
HTML:
<div class=""flex w-full p-4 rounded-lg shadow-md bg-white""><TweetHeader/><TweetText/><TweetMedia/><TweetFooter/></div>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center mb-2""><img src=""{profilePictureUrl}"" alt=""{username}"" class=""w-12 h-12 rounded-full mr-2""/><div><span class=""text-lg font-bold"">{username}</span><span class=""text-gray-600"">@{handle}</span><span class=""text-gray-600"">{timestamp}</span></div></div>
TweetText:
<p class=""text-lg"">{tweetText}</p>
TweetMedia:
<!-- If there is media, display it -->{mediaUrl && ( <img src={mediaUrl} alt=""Tweet media"" class=""w-full mb-2""/>)}
TweetFooter:
<div class=""flex justify-between text-gray-600 mb-2""><span>Likes: {likeCount}</span><span>Retweets: {retweetCount}</span><span>Replies: {replyCount}</span><!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet in a compact, readable format. It should include the user's profile picture, username, tweet text, and timestamp. The tweet text should be the primary focus, with the user's profile picture and username secondary. The timestamp should be displayed lightly.
COMPONENTS:
- UserProfilePicture: standalone component to display the user's profile picture.
- Username: standalone component to display the user's username.
- TweetText: standalone component to display the tweet text.
- Timestamp: standalone component to display the timestamp.
- Tweet: takes children, a container component to display the entire tweet.
HTML:
<div class=""max-w-md mx-auto p-4 mb-4 bg-white rounded shadow-md""><Tweet><UserProfilePicture/><div class=""flex items-center""><Username/><Timestamp/></div><TweetText/></Tweet></div>
COMPONENT HTML:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User profile picture"" class=""w-12 h-12 rounded-full mr-2""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
Timestamp:
<small class=""text-gray-500"">{timestamp}</small>
Tweet:
<div class=""flex flex-wrap"">{children}</div>"
Tweet display for individual posts,"DESCRIPTION:
The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.
COMPONENTS:
- TweetHeader: Standalone component displaying the user's profile picture, name, and username.
- TweetTimestamp: Standalone component displaying the timestamp of the tweet.
- TweetText: Standalone component displaying the text of the tweet.
- TweetMedia: Component that takes children to display optional media (e.g., images or videos).
- TweetFooter: Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).
HTML:
<article class=""max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md""><TweetHeader/><TweetTimestamp/><TweetText/><TweetMedia><!-- Optional media content --></TweetMedia><TweetFooter/></article>
COMPONENT HTML:
TweetHeader:
<div class=""flex items-center pb-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-10 h-10 rounded-full mr-2""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{name}</p></div></div>
TweetTimestamp:
<p class=""text-gray-600 text-sm"">{timestamp}</p>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
TweetMedia:
<!-- Optional media content --><div class=""flex justify-center"">{children}</div>
TweetFooter:
<div class=""flex justify-between pt-2""><p class=""text-gray-600 text-sm"">{timestamp}</p><p class=""text-gray-600 text-sm"">{engagement_metrics}</p></div>"
Avatar display for user profile picture,"DESCRIPTION:
The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.
COMPONENTS:
- Avatar: standalone component
HTML:
<div class=""flex justify-center mb-4""><Avatar/></div>
COMPONENT HTML:
Avatar:
<img src={avatarUrl} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>"
Avatar display for user profile picture,"DESCRIPTION:
The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.
COMPONENTS:
- Avatar: standalone component
HTML:
<div class=""flex justify-center mb-4""><Avatar/></div>
COMPONENT HTML:
Avatar:
<img src={avatarUrl} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>"
Avatar display for user profile picture,"DESCRIPTION:
The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.
COMPONENTS:
- Avatar: standalone component
HTML:
<div class=""flex justify-center mb-4""><Avatar/></div>
COMPONENT HTML:
Avatar:
<img src={avatarUrl} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>"
Related Project Suggestions,"DESCRIPTION:
The UI should be a list of suggested projects, each with a title, description, and a ""View Project"" button. The list should be displayed in a grid format, with 2-3 columns on larger screens and 1 column on smaller screens.
COMPONENTS:
- ProjectSuggestionCard: a standalone component that displays a single project suggestion.
- ProjectSuggestionsList: a component that takes children, displaying a list of `ProjectSuggestionCard`s.
HTML:
<div class=""max-w-md mx-auto pt-4""><h2 class=""text-lg font-bold mb-4"">Related Projects</h2><ProjectSuggestionsList><ProjectSuggestionCard/><ProjectSuggestionCard/><ProjectSuggestionCard/></ProjectSuggestionsList></div>
COMPONENT HTML:
ProjectSuggestionCard:
<div class=""bg-white p-4 rounded shadow-md""><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-gray-600"">{project_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Project</button></div>
ProjectSuggestionsList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Loading Animations/Spinners,"DESCRIPTION:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
COMPONENTS:
- LoadingSpinner: A standalone component that displays a loading animation.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates with each item displaying a date and title. The list should be responsive and accessible on various devices.
COMPONENTS:
- NewsItem: component: standalone
- NewsList: component: takes children
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">News & Updates</h2><NewsList><NewsItem/><NewsItem/><!-- insert more NewsItem components here --></NewsList></div>
COMPONENT HTML:
NewsItem:
<div class=""flex mb-4""><p class=""text-gray-500 text-sm"">{date}</p><h3 class=""text-lg font-bold"">{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates with each item displaying a date and title. The list should be responsive and accessible on various devices.
COMPONENTS:
- NewsItem: component: standalone
- NewsList: component: takes children
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">News & Updates</h2><NewsList><NewsItem/><NewsItem/><!-- insert more NewsItem components here --></NewsList></div>
COMPONENT HTML:
NewsItem:
<div class=""flex mb-4""><p class=""text-gray-500 text-sm"">{date}</p><h3 class=""text-lg font-bold"">{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
A section displaying news or updates with a date and title.
COMPONENTS:
- UpdateCard: Standalone component displaying a single update.
- UpdateDate: Standalone component displaying the date of the update.
- UpdateTitle: Standalone component displaying the title of the update.
HTML:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><UpdateCard/><UpdateCard/><!-- Add more UpdateCard components as needed --></section>
COMPONENT HTML:
UpdateCard:
<div class=""flex flex-wrap mb-4""><UpdateDate/><UpdateTitle/></div>
UpdateDate:
<p class=""text-sm text-gray-600"">{date}</p>
UpdateTitle:
<h3 class=""text-lg font-bold"">{title}</h3>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
News or updates section with date and title,"DESCRIPTION:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
COMPONENTS:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
HTML:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
COMPONENT HTML:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Stencil Portals/Masking,"DESCRIPTION:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
COMPONENTS:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
HTML:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
COMPONENT HTML:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Stencil Portals/Masking,"DESCRIPTION:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
COMPONENTS:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
HTML:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
COMPONENT HTML:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Stencil Portals/Masking,"DESCRIPTION:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
COMPONENTS:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
HTML:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
COMPONENT HTML:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Stencil Portals/Masking,"DESCRIPTION:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
COMPONENTS:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
HTML:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
COMPONENT HTML:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Blog Post Author Profile,"DESCRIPTION:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
COMPONENTS:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
COMPONENT HTML:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Floating Action Buttons,"DESCRIPTION:
A set of floating action buttons (FABs) that can be used to perform various actions. There should be a main FAB and several smaller FABs that can be toggled on and off.
COMPONENTS:
- MainFab: Standalone component that represents the main FAB.
- MiniFab: Standalone component that represents a smaller FAB.
- FabContainer: Component that takes children, used to wrap the FABs.
HTML:
<div class=""fixed bottom-0 right-0 mb-4 mr-4""><FabContainer><MainFab/><MiniFab/><MiniFab/><MiniFab/></FabContainer></div>
COMPONENT HTML:
MainFab:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{main_fab_icon}</button>
MiniFab:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full"">{mini_fab_icon}</button>
FabContainer:
<div class=""relative"">{children}</div>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Sidebar Widget Title,"DESCRIPTION:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
COMPONENTS:
- SidebarWidgetTitle: (standalone)
HTML:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
COMPONENT HTML:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Text providing guidance or instructions within the context of a form field or interface element,"DESCRIPTION:
The UI should display a help text or hint that provides guidance or instructions to the user within the context of a form field or interface element. The text should be clearly visible and easily readable.
COMPONENTS:
- HintText: (standalone): This component will display the help text or hint.
HTML:
<div class=""form-group""><label for=""fieldName"">Field Label</label><input type=""text"" id=""fieldName""/><HintText/></div>
COMPONENT HTML:
HintText:
<span class=""text-sm text-gray-500"">{hint_text}</span>"
Text providing guidance or instructions within the context of a form field or interface element,"DESCRIPTION:
The UI should display a help text or hint that provides guidance or instructions to the user within the context of a form field or interface element. The text should be clearly visible and easily readable.
COMPONENTS:
- HintText: (standalone): This component will display the help text or hint.
HTML:
<div class=""form-group""><label for=""fieldName"">Field Label</label><input type=""text"" id=""fieldName""/><HintText/></div>
COMPONENT HTML:
HintText:
<span class=""text-sm text-gray-500"">{hint_text}</span>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Featured Video Controls Bar,"DESCRIPTION:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
COMPONENTS:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
HTML:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
COMPONENT HTML:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Featured Video Controls Bar,"DESCRIPTION:
The Featured Video Controls Bar is a horizontal bar that sits below a video player, providing controls for playback, volume, and fullscreen mode. It should be compact, compactible, and easily accessible on various devices.
COMPONENTS:
- VideoPlaybackControl: A standalone component that toggles video playback.
- VideoVolumeControl: A standalone component that adjusts video volume.
- VideoFullscreenControl: A standalone component that toggles fullscreen mode.
- PlaybackTimeIndicator: A standalone component that displays the current playback time.
HTML:
<div class=""flex justify-between items-center py-2""><VideoPlaybackControl/><PlaybackTimeIndicator/><VideoVolumeControl/><VideoFullscreenControl/></div>
COMPONENT HTML:
VideoPlaybackControl:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fa fa-play"" aria-hidden=""true""></i><span class=""sr-only"">Play/Pause</span></button>
VideoVolumeControl:
<div class=""flex items-center""><button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-volume-up"" aria-hidden=""true""></i></button><input type=""range"" class=""w-20""/></div>
VideoFullscreenControl:
<button class=""bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded""><i class=""fa fa-arrows-alt"" aria-hidden=""true""></i><span class=""sr-only"">Toggle Fullscreen</span></button>
PlaybackTimeIndicator:
<p class=""text-sm"">{current_time}/ {total_time}</p>"
Video upload tool with encoding options,"DESCRIPTION:
The UI should be a video upload tool with encoding options. It should have a file input field, a dropdown menu for selecting the encoding preset, a checkbox for enabling watermarks, and a submit button. The UI should be responsive, accessible, and SEO-friendly.
COMPONENTS:
- UploadInput: A standalone component for the file input field.
- EncodingPresetSelect: A standalone component for the dropdown menu for selecting the encoding preset.
- WatermarkCheckbox: A standalone component for the checkbox for enabling watermarks.
- SubmitButton: A standalone component for the submit button.
- VideoUploadForm: A component that takes children, which is the parent component that wraps all the other components.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><VideoUploadForm><UploadInput/><EncodingPresetSelect/><WatermarkCheckbox/><SubmitButton/></VideoUploadForm></div>
COMPONENT HTML:
UploadInput:
<div class=""mb-4""><input type=""file"" id=""video-upload"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><label for=""video-upload"" class=""sr-only"">Select a video file</label></div>
EncodingPresetSelect:
<div class=""mb-4""><select id=""encoding-preset"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><option value="""">{select_preset}</option><!-- more options will be generated dynamically --></select><label for=""encoding-preset"" class=""sr-only"">Select an encoding preset</label></div>
WatermarkCheckbox:
<div class=""mb-4""><input type=""checkbox"" id=""watermark"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:ring-blue-500""><label for=""watermark"" class=""ml-2 text-sm text-gray-600"">Enable watermark</label></div>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Video</button>
VideoUploadForm:
<!-- this component will wrap all the other components --><div class=""p-4"">{children}</div>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Testimonial Quote Mark,"DESCRIPTION:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
COMPONENTS:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
HTML:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
COMPONENT HTML:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Header User Profile,"DESCRIPTION:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
COMPONENTS:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
HTML:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Header User Profile,"DESCRIPTION:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
COMPONENTS:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
HTML:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Header User Profile,"DESCRIPTION:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
COMPONENTS:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
HTML:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Header User Profile,"DESCRIPTION:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
COMPONENTS:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
HTML:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
COMPONENT HTML:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Suggested products carousel,"DESCRIPTION:
A horizontal carousel displaying multiple products with images, names, and prices. The carousel should be responsive and have navigation arrows on both sides.
COMPONENTS:
- ProductCard: (standalone): Displays a single product with image, name, and price.
- CarouselNavigation: (standalone): Displays navigation arrows for the carousel.
- Carousel: (takes children): Container for the carousel, holds multiple **ProductCard** components.
HTML:
<div class=""flex justify-center""><CarouselNavigation/><Carousel><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></Carousel><CarouselNavigation/></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white shadow-md rounded""><img src=""{image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h5 class=""text-lg"">{product_name}</h5><p class=""text-gray-600"">{price}</p></div></div>
CarouselNavigation:
<button class=""bg-white border-none text-lg hover:text-gray-600 transition duration-300"">{navigation_arrow}</button>
Carousel:
<div class=""flex overflow-x-hidden"">{children}</div>"
Trending topics display for popular discussions,"DESCRIPTION:
The UI should display a list of trending topics, each with a title, a brief description, and a call-to-action button.
COMPONENTS:
- TrendingTopicList: component that takes children, which will be a list of `TrendingTopicCard` components
HTML:
<div class=""container mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- list of TrendingTopicCard components will go here --></TrendingTopicList></div>
COMPONENT HTML:
TrendingTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Footer Social Media Icon,"DESCRIPTION:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
COMPONENTS:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
HTML:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
COMPONENT HTML:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a thumbnail of a featured video, with a play button overlay and a darkened background to focus attention on the video. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- FeaturedVideoThumbnail: standalone
- PlayButton: standalone
HTML:
<div class=""lg:w-1/2 xl:w-1/3 p-4 md:p-6 lg:p-8 xl:p-10""><FeaturedVideoThumbnail/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative overflow-hidden rounded-md shadow-md""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover""/><PlayButton/><div class=""absolute w-full h-full bg-gray-800 opacity-50""></div></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">▶</button>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a featured video thumbnail with a play button on top of it, and a title below the thumbnail.
COMPONENTS:
- FeaturedVideoThumbnail: (standalone)
- PlayButton: (standalone)
- VideoTitle: (standalone)
HTML:
<div class=""flex flex-col md:flex-row items-center""><FeaturedVideoThumbnail/><VideoTitle/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative""><img src={image_src} alt={alt_text} class=""w-full rounded-md object-cover""/><PlayButton/></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-full p-2""><i class=""fas fa-play""></i></button>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a thumbnail of a featured video, with a play button overlay and a darkened background to focus attention on the video. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- FeaturedVideoThumbnail: standalone
- PlayButton: standalone
HTML:
<div class=""lg:w-1/2 xl:w-1/3 p-4 md:p-6 lg:p-8 xl:p-10""><FeaturedVideoThumbnail/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative overflow-hidden rounded-md shadow-md""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover""/><PlayButton/><div class=""absolute w-full h-full bg-gray-800 opacity-50""></div></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">▶</button>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a featured video thumbnail with a play button on top of it, and a title below the thumbnail.
COMPONENTS:
- FeaturedVideoThumbnail: (standalone)
- PlayButton: (standalone)
- VideoTitle: (standalone)
HTML:
<div class=""flex flex-col md:flex-row items-center""><FeaturedVideoThumbnail/><VideoTitle/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative""><img src={image_src} alt={alt_text} class=""w-full rounded-md object-cover""/><PlayButton/></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-full p-2""><i class=""fas fa-play""></i></button>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a thumbnail of a featured video, with a play button overlay and a darkened background to focus attention on the video. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- FeaturedVideoThumbnail: standalone
- PlayButton: standalone
HTML:
<div class=""lg:w-1/2 xl:w-1/3 p-4 md:p-6 lg:p-8 xl:p-10""><FeaturedVideoThumbnail/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative overflow-hidden rounded-md shadow-md""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover""/><PlayButton/><div class=""absolute w-full h-full bg-gray-800 opacity-50""></div></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">▶</button>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a thumbnail of a featured video, with a play button overlay and a darkened background to focus attention on the video. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- FeaturedVideoThumbnail: standalone
- PlayButton: standalone
HTML:
<div class=""lg:w-1/2 xl:w-1/3 p-4 md:p-6 lg:p-8 xl:p-10""><FeaturedVideoThumbnail/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative overflow-hidden rounded-md shadow-md""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-48 object-cover""/><PlayButton/><div class=""absolute w-full h-full bg-gray-800 opacity-50""></div></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">▶</button>"
Featured Video Thumbnail,"DESCRIPTION:
The UI should display a featured video thumbnail with a play button on top of it, and a title below the thumbnail.
COMPONENTS:
- FeaturedVideoThumbnail: (standalone)
- PlayButton: (standalone)
- VideoTitle: (standalone)
HTML:
<div class=""flex flex-col md:flex-row items-center""><FeaturedVideoThumbnail/><VideoTitle/></div>
COMPONENT HTML:
FeaturedVideoThumbnail:
<div class=""relative""><img src={image_src} alt={alt_text} class=""w-full rounded-md object-cover""/><PlayButton/></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-full p-2""><i class=""fas fa-play""></i></button>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>"
Loading spinner with animation and progress circle,"DESCRIPTION:
The UI should be a responsive, mobile-first loading spinner with an animation and a progress circle. The progress circle should show the percentage of completion.
COMPONENTS:
- LoadingSpinner: a standalone component that displays the loading animation and progress circle.
HTML:
<div class=""flex justify-center""><LoadingSpinner/></div>
COMPONENT HTML:
LoadingSpinner:
<div class=""relative w-12 h-12 mx-auto""><!-- animation --><div class=""animate-spin h-12 w-12 border-4 border-gray-200 rounded-full border-t-transparent""></div><!-- progress circle --><div class=""absolute top-0 left-0 w-12 h-12 text-lg text-gray-600""><span>{progress}%</span></div></div>"
Price and availability information,"DESCRIPTION:
The UI should display price and availability information in a clean and easy-to-read format. The price should be prominent, and the availability information should be displayed below it.
COMPONENTS:
- PriceInfo: Standalone component to display the price information.
- AvailabilityInfo: Standalone component to display the availability information.
HTML:
<div class=""flex flex-col gap-2""><PriceInfo/><AvailabilityInfo/></div>
COMPONENT HTML:
PriceInfo:
<p class=""text-lg font-bold"">{price_amount} {currency}</p>
AvailabilityInfo:
<p>Availability: {availability_status}</p><!-- availability_status can be ""In Stock"", ""Out of Stock"", etc. --><p>Ships in {shipping_time} from {warehouse_location}</p>"
Page Content List Item,"DESCRIPTION:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
HTML:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
COMPONENT HTML:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Page Content List Item,"DESCRIPTION:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
HTML:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
COMPONENT HTML:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Page Content List Item,"DESCRIPTION:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
HTML:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
COMPONENT HTML:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Page Content List Item,"DESCRIPTION:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
COMPONENTS:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
HTML:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
COMPONENT HTML:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Availability and Pricing Calendars,"DESCRIPTION:
The UI should display a calendar for availability and pricing, showing the dates and corresponding prices. It should have a title, a month selector, and a grid of days with prices.
COMPONENTS:
- CalendarTitle: Standalone component to display the title of the calendar.
- MonthSelector: Standalone component to select the month.
- AvailabilityGrid: Component that takes children to render the grid of days with prices.
- DayCell: Standalone component to render a single day with its price.
HTML:
<div class=""flex flex-col""><CalendarTitle/><MonthSelector/><AvailabilityGrid><!-- grid of days with prices --><DayCell/><DayCell/><DayCell/><!-- repeat for each day of the month --></AvailabilityGrid></div>
COMPONENT HTML:
CalendarTitle:
<h2 class=""text-2xl font-bold"">{calendar_title}</h2>
MonthSelector:
<select class=""py-2 pl-2 pr-4 text-gray-700""><option value=""January"">{month_name}</option><!-- repeat for each month --></select>
AvailabilityGrid:
<table class=""w-full""><tbody><tr>{children} </tr></tbody></table>
DayCell:
<td class=""px-2 py-1 border border-gray-200""><span class=""text-sm"">{day_number}</span><span class=""text-xs"">{day_price}</span></td>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The search bar should be a simple input field with a search icon on the left and a clear button on the right. It should be full-width on mobile devices and have a maximum width on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and clear button.
- SearchIcon: standalone component that displays a search icon.
- ClearButton: standalone component that displays a clear button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full rounded-md border border-gray-300""><SearchIcon/><input type=""search"" class=""w-full pl-8 pr-4 py-2"" placeholder=""Search...""/><ClearButton/></div>
SearchIcon:
<span class=""text-gray-400 text-lg""><!-- search icon will go here --></span>
ClearButton:
<button class=""text-gray-400 hover:text-gray-600 transition duration-300""><!-- clear icon will go here --></button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The search bar should be a simple input field with a search icon on the left and a clear button on the right. It should be full-width on mobile devices and have a maximum width on larger screens.
COMPONENTS:
- SearchBar: standalone component that contains the input field, search icon, and clear button.
- SearchIcon: standalone component that displays a search icon.
- ClearButton: standalone component that displays a clear button.
HTML:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
COMPONENT HTML:
SearchBar:
<div class=""flex items-center w-full rounded-md border border-gray-300""><SearchIcon/><input type=""search"" class=""w-full pl-8 pr-4 py-2"" placeholder=""Search...""/><ClearButton/></div>
SearchIcon:
<span class=""text-gray-400 text-lg""><!-- search icon will go here --></span>
ClearButton:
<button class=""text-gray-400 hover:text-gray-600 transition duration-300""><!-- clear icon will go here --></button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Search Bar: Input field for searching content,"DESCRIPTION:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
COMPONENTS:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
HTML:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
COMPONENT HTML:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a clean and readable format. The email address should be clickable, allowing users to send an email to the company. The component should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- EmailAddress: (standalone)
HTML:
<div class=""max-w-md mx-auto p-4""><p class=""text-lg font-bold"">Get in touch with us:</p><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<a href=""mailto: {company_email_address}"" class=""text-blue-600 hover:text-blue-900"">{company_email_address}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a label indicating that it's an email address.
COMPONENTS:
- EmailLabel: A standalone component to display the label ""Email"".
- EmailAddress: A component that takes children to display the actual email address.
HTML:
<div class=""flex flex-col md:flex-row items-center mb-4""><EmailLabel/><EmailAddress>{companyEmailAddress}</EmailAddress></div>
COMPONENT HTML:
EmailLabel:
<span class=""text-sm text-gray-600"">Email</span>
EmailAddress:
<a href={`mailto:${children}`} class=""text-blue-600 hover:text-blue-800"">{children}</a>"
Company Email Address,"DESCRIPTION:
The UI should display a company email address in a simple and clean format, with a responsive design that adapts to different screen sizes.
COMPONENTS:
- EmailAddress: component (standalone)
HTML:
<div class=""mx-auto p-4 md:p-6 lg:p-8""><EmailAddress/></div>
COMPONENT HTML:
EmailAddress:
<p class=""text-lg md:text-xl lg:text-2xl"">{company_email_address}</p>"
Callout Box Shadow,"DESCRIPTION:
The UI should be a callout box with a shadow effect, which is a rectangular box with a subtle shadow effect to give it a sense of depth. The callout box should be responsive and mobile-friendly.
COMPONENTS:
- CalloutBoxShadow: A standalone component that represents the callout box with a shadow effect.
HTML:
<div class=""max-w-md mx-auto mt-4 p-4 bg-white rounded shadow-md""><CalloutBoxShadow/></div>
COMPONENT HTML:
CalloutBoxShadow:
<div class=""px-4 py-3""><p class=""text-lg font-bold"">{callout_title}</p><p class=""text-gray-600"">{callout_text}</p></div>"
Callout Box Shadow,"DESCRIPTION:
The UI should be a callout box with a shadow effect, which is a rectangular box with a subtle shadow effect to give it a sense of depth. The callout box should be responsive and mobile-friendly.
COMPONENTS:
- CalloutBoxShadow: A standalone component that represents the callout box with a shadow effect.
HTML:
<div class=""max-w-md mx-auto mt-4 p-4 bg-white rounded shadow-md""><CalloutBoxShadow/></div>
COMPONENT HTML:
CalloutBoxShadow:
<div class=""px-4 py-3""><p class=""text-lg font-bold"">{callout_title}</p><p class=""text-gray-600"">{callout_text}</p></div>"
Callout Box Shadow,"DESCRIPTION:
The UI should be a callout box with a shadow effect, which is a rectangular box with a subtle shadow effect to give it a sense of depth. The callout box should be responsive and mobile-friendly.
COMPONENTS:
- CalloutBoxShadow: A standalone component that represents the callout box with a shadow effect.
HTML:
<div class=""max-w-md mx-auto mt-4 p-4 bg-white rounded shadow-md""><CalloutBoxShadow/></div>
COMPONENT HTML:
CalloutBoxShadow:
<div class=""px-4 py-3""><p class=""text-lg font-bold"">{callout_title}</p><p class=""text-gray-600"">{callout_text}</p></div>"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should display course recommendations in a card layout, with each card showing the course title, description, and rating. The cards should be arranged in a grid, with multiple cards per row.
COMPONENTS:
- CourseCard: A standalone component that displays a course's information, including title, description, and rating.
- CourseRecommendationsGrid: A component that takes children (multiple `CourseCard` components) and arranges them in a grid layout.
HTML:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold"">Course Recommendations</h1><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><CourseRecommendationsGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components as needed --></CourseRecommendationsGrid></div></div>
COMPONENT HTML:
CourseCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{course_title}</h2><p>{course_description}</p><p>Rating: {rating}/5</p></div>
CourseRecommendationsGrid:
<!-- Children will be placed here -->{children}"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.
COMPONENTS:
- CourseRecommendationCard: (standalone): A single course recommendation card.
- CourseRecommendationList: (takes children): A list of course recommendation cards.
HTML:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Recommended Courses</h2><CourseRecommendationList><CourseRecommendationCard/><CourseRecommendationCard/><!-- Add more CourseRecommendationCard components here --></CourseRecommendationList></div>
COMPONENT HTML:
CourseRecommendationCard:
<div class=""bg-white shadow-md rounded px-4 py-4 mb-4""><h3 class=""text-lg font-bold"">{course_title}</h3><p class=""text-gray-600"">{course_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
CourseRecommendationList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Course Recommendations,"DESCRIPTION:
The UI should display a list of course recommendations with their titles, short descriptions, and ratings. The list should be responsive and accessible.
COMPONENTS:
- CourseRecommendationsList: Component that takes children (a list of `CourseRecommendationCard` components).
HTML:
<!-- The main container for the course recommendations list --><div class=""max-w-3xl mx-auto p-4""><h2>Course Recommendations</h2><!-- The list of course recommendations --><CourseRecommendationsList>{/*
This will be replaced with multiple CourseRecommendationCard components
*/}
</CourseRecommendationsList></div>
COMPONENT HTML:
CourseRecommendationsList:
<!-- The list of course recommendations --><ul class=""list-none mb-0"">{children}</ul>"
Character counter for tweet length,"DESCRIPTION:
A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).
COMPONENTS:
- TextAreaInput: a standalone component for the text input field
- CharacterCountDisplay: a standalone component for displaying the character count
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><TextAreaInput/><CharacterCountDisplay/></div>
COMPONENT HTML:
TextAreaInput:
<textarea class=""w-full p-2 text-lg"" placeholder=""What's on your mind?""/>
CharacterCountDisplay:
<p class=""text-sm text-gray-600"">{remaining_characters} characters remaining</p>"
Character counter for tweet length,"DESCRIPTION:
A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).
COMPONENTS:
- TextAreaInput: a standalone component for the text input field
- CharacterCountDisplay: a standalone component for displaying the character count
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><TextAreaInput/><CharacterCountDisplay/></div>
COMPONENT HTML:
TextAreaInput:
<textarea class=""w-full p-2 text-lg"" placeholder=""What's on your mind?""/>
CharacterCountDisplay:
<p class=""text-sm text-gray-600"">{remaining_characters} characters remaining</p>"
Character counter for tweet length,"DESCRIPTION:
The UI should be a text input field with a character counter that displays the remaining characters available for a tweet. The counter should turn red when the character limit is exceeded.
COMPONENTS:
- TweetInput: A standalone component that represents the text input field.
- CharacterCounter: A standalone component that displays the remaining characters available for a tweet.
HTML:
<div class=""flex flex-col""><TweetInput/><CharacterCounter/></div>
COMPONENT HTML:
TweetInput:
<input type=""text"" class=""w-full p-2 border border-gray-200 rounded""/>
CharacterCounter:
<p class={ remaining_characters <= 0 ? ""text-red-500"" : """" }>Characters remaining: {remaining_characters}</p>"
Character counter for tweet length,"DESCRIPTION:
A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).
COMPONENTS:
- TextAreaInput: a standalone component for the text input field
- CharacterCountDisplay: a standalone component for displaying the character count
HTML:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><TextAreaInput/><CharacterCountDisplay/></div>
COMPONENT HTML:
TextAreaInput:
<textarea class=""w-full p-2 text-lg"" placeholder=""What's on your mind?""/>
CharacterCountDisplay:
<p class=""text-sm text-gray-600"">{remaining_characters} characters remaining</p>"
Character counter for tweet length,"DESCRIPTION:
The UI should display a text input field where the user can type their tweet. Below the input field, a counter should display the number of characters remaining, indicating how many more characters the user can type before reaching the tweet limit (280 characters).
COMPONENTS:
- TweetInput: a standalone component that takes a text input.
- CharacterCounter: a standalone component that displays the remaining character count.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TweetInput/><CharacterCounter/></div>
COMPONENT HTML:
TweetInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your tweet...""/>
CharacterCounter:
<p class=""text-sm text-gray-500"">{remaining_characters} characters remaining</p>"
Cover Photo Upload: Input field for uploading a cover photo,"DESCRIPTION:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
COMPONENTS:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
COMPONENT HTML:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Cover Photo Upload: Input field for uploading a cover photo,"DESCRIPTION:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
COMPONENTS:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
COMPONENT HTML:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Cover Photo Upload: Input field for uploading a cover photo,"DESCRIPTION:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
COMPONENTS:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
COMPONENT HTML:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Cover Photo Upload: Input field for uploading a cover photo,"DESCRIPTION:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
COMPONENTS:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
HTML:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
COMPONENT HTML:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Hover Effects/Animations,"DESCRIPTION:
The UI should display a box that changes its background color and text color when hovered over, along with a scaling effect.
COMPONENTS:
- HoverEffectBox: A standalone component that displays a box with hover effects.
HTML:
<div class=""flex justify-center h-screen""><HoverEffectBox/></div>
COMPONENT HTML:
HoverEffectBox:
<div class=""bg-orange-300 hover:bg-orange-500 transition duration-300 ease-in-out p-10 rounded-md cursor-pointer hover:scale-110""><p class=""text-lg text-orange-800 hover:text-white"">{hover_text}</p></div>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Arrangement of product images and details in a structured grid format,"DESCRIPTION:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
COMPONENTS:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
HTML:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
COMPONENT HTML:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Send button to post new tweet,"DESCRIPTION:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
COMPONENTS:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
HTML:
<div class=""flex justify-center mb-4""><TweetButton/></div>
COMPONENT HTML:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Featured Product Badge,"DESCRIPTION:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
COMPONENTS:
- FeaturedBadge: (standalone)
HTML:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
COMPONENT HTML:
FeaturedBadge:
<span>Featured</span>"
Featured Product Badge,"DESCRIPTION:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
COMPONENTS:
- FeaturedBadge: (standalone)
HTML:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
COMPONENT HTML:
FeaturedBadge:
<span>Featured</span>"
Featured Product Badge,"DESCRIPTION:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
COMPONENTS:
- FeaturedBadge: (standalone)
HTML:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
COMPONENT HTML:
FeaturedBadge:
<span>Featured</span>"
Featured Product Badge,"DESCRIPTION:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
COMPONENTS:
- FeaturedBadge: (standalone)
HTML:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
COMPONENT HTML:
FeaturedBadge:
<span>Featured</span>"
Tag Clouds/Folksonomy,"DESCRIPTION:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
COMPONENTS:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
COMPONENT HTML:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Tag Clouds/Folksonomy,"DESCRIPTION:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
COMPONENTS:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
COMPONENT HTML:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Tag Clouds/Folksonomy,"DESCRIPTION:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
COMPONENTS:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
COMPONENT HTML:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Tag Clouds/Folksonomy,"DESCRIPTION:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
COMPONENTS:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
HTML:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
COMPONENT HTML:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Customer Review Profile,"DESCRIPTION:
The Customer Review Profile UI should display a customer's name, profile picture, rating, review, and date of review. It should be responsive, displaying the profile picture and review text side by side on larger screens, and stacked on smaller screens.
COMPONENTS:
- CustomerProfilePicture: (standalone): displays the customer's profile picture
- ReviewRating: (standalone): displays the customer's rating (e.g. 4/5 stars)
- ReviewText: (standalone): displays the customer's written review
- ReviewDate: (standalone): displays the date of the review
- CustomerName: (standalone): displays the customer's name
- ReviewContainer: (takes children): contains the review rating, text, and date
HTML:
<div class=""md:flex md:items-center mb-4""><CustomerProfilePicture/><div class=""md:ml-4""><CustomerName/><ReviewContainer><ReviewRating/><ReviewText/><ReviewDate/></ReviewContainer></div></div>
COMPONENT HTML:
CustomerProfilePicture:
<img src={profile_picture_url} alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full object-cover""/>
ReviewRating:
<div class=""text-lg"">{rating_out_of_five}/ 5</div>
ReviewText:
<p>{review_text}</p>
ReviewDate:
<p class=""text-sm text-gray-600"">{review_date}</p>
CustomerName:
<h3 class=""text-lg"">{customer_name}</h3>
ReviewContainer:
<div class=""flex flex-col md:flex-row items-center"">{children}</div>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Customer Review Profile,"DESCRIPTION:
The Customer Review Profile UI should display a customer's name, profile picture, rating, review, and date of review. It should be responsive, displaying the profile picture and review text side by side on larger screens, and stacked on smaller screens.
COMPONENTS:
- CustomerProfilePicture: (standalone): displays the customer's profile picture
- ReviewRating: (standalone): displays the customer's rating (e.g. 4/5 stars)
- ReviewText: (standalone): displays the customer's written review
- ReviewDate: (standalone): displays the date of the review
- CustomerName: (standalone): displays the customer's name
- ReviewContainer: (takes children): contains the review rating, text, and date
HTML:
<div class=""md:flex md:items-center mb-4""><CustomerProfilePicture/><div class=""md:ml-4""><CustomerName/><ReviewContainer><ReviewRating/><ReviewText/><ReviewDate/></ReviewContainer></div></div>
COMPONENT HTML:
CustomerProfilePicture:
<img src={profile_picture_url} alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full object-cover""/>
ReviewRating:
<div class=""text-lg"">{rating_out_of_five}/ 5</div>
ReviewText:
<p>{review_text}</p>
ReviewDate:
<p class=""text-sm text-gray-600"">{review_date}</p>
CustomerName:
<h3 class=""text-lg"">{customer_name}</h3>
ReviewContainer:
<div class=""flex flex-col md:flex-row items-center"">{children}</div>"
Customer Review Profile,"DESCRIPTION:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
COMPONENTS:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
HTML:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
COMPONENT HTML:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 ${i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Job/Project Listings,"DESCRIPTION:
The UI should be a list of job/project listings, each displaying essential information such as the job title, company, location, and a brief description. The listings should be responsive, accessible, and easy to read.
COMPONENTS:
- JobListing: A standalone component that represents a single job listing.
- JobListingCard: A standalone component that wraps the job listing information.
- JobTitle: A standalone component that displays the job title.
- CompanyName: A standalone component that displays the company name.
- Location: A standalone component that displays the location.
- JobDescription: A standalone component that displays a brief job description.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Job Listings</h1><ul class=""list-none mb-0""><JobListing/><JobListing/><!-- Add more JobListing components here --></ul></div>
COMPONENT HTML:
JobListing:
<li class=""mb-4""><JobListingCard/></li>
JobListingCard:
<div class=""bg-white shadow-md rounded p-4""><JobTitle/><CompanyName/><Location/><JobDescription/></div>
JobTitle:
<h2 class=""text-lg font-bold"">{job_title}</h2>
CompanyName:
<p class=""text-gray-600"">{company_name}</p>
Location:
<p class=""text-gray-600"">{location}</p>
JobDescription:
<p class=""text-gray-600"">{job_description}</p>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
A responsive article layout with a header, image, and content area that adapts to different screen sizes.
COMPONENTS:
- ArticleHeader: Standalone component that renders the article title and meta information.
- ArticleImage: Standalone component that renders the article image.
- ArticleContent: Component that takes children to render the article content.
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><div class=""flex justify-center mb-4 md:mb-6 lg:mb-12""><ArticleImage/></div><ArticleContent><!-- article content will be rendered here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{article_meta}</p></header>
ArticleImage:
<img src={image_src} alt={image_alt} class=""w-full md:w-1/2 lg:w-2/3""/>
ArticleContent:
<div class=""prose lg:prose-lg xl:prose-xl"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Responsive Article Layout,"DESCRIPTION:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
COMPONENT HTML:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
Content moderation tools for admin teams,"DESCRIPTION:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
COMPONENTS:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
HTML:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
COMPONENT HTML:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Content moderation tools for admin teams,"DESCRIPTION:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
COMPONENTS:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
HTML:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
COMPONENT HTML:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Content moderation tools for admin teams,"DESCRIPTION:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
COMPONENTS:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
HTML:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
COMPONENT HTML:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Content moderation tools for admin teams,"DESCRIPTION:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
COMPONENTS:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
HTML:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
COMPONENT HTML:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Page Content Header Image,"DESCRIPTION:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
COMPONENTS:
- PageContentHeaderImage: Standalone component, displays a full-width image.
HTML:
<header><PageContentHeaderImage/></header>
COMPONENT HTML:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
A simple input field with a placeholder text ""Write a comment..."" and a submit button.
COMPONENTS:
- CommentInput: (standalone) - The input field component.
- CommentSubmit: (standalone) - The submit button component.
HTML:
<div class=""flex justify-center mb-4""><CommentInput/><CommentSubmit/></div>
COMPONENT HTML:
CommentInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentSubmit:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Comment Input: Input field for writing a new comment,"DESCRIPTION:
The UI should be a simple input field with a placeholder text ""Write a comment..."" and a submit button ""Post"" next to it. The input field should be responsive and adaptive to different screen sizes.
COMPONENTS:
- CommentInput: standalone component that contains an input field and a submit button.
- CommentTextArea: standalone component that is the input field itself.
- CommentButton: standalone component that is the submit button.
HTML:
<div class=""flex flex-wrap gap-2""><CommentInput/></div>
COMPONENT HTML:
CommentInput:
<div class=""flex items-center""><CommentTextArea/><CommentButton/></div>
CommentTextArea:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should display a responsive, accessible, and SEO-friendly featured video poster image component. The image should be centered and take up the full width of the container on mobile devices and smaller screens, and resize to fit the container on larger screens.
COMPONENTS:
- FeaturedVideoPosterImage: (standalone): This component will contain the featured video poster image.
HTML:
<div class=""container mx-auto p-4""><FeaturedVideoPosterImage/></div>
COMPONENT HTML:
FeaturedVideoPosterImage:
<img class=""object-cover w-full h-64 md:h-80 lg:h-96 xl:h-112 mb-4"" src={poster_image_url} alt={poster_image_alt_text}/>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Featured Video Poster Image,"DESCRIPTION:
The UI should display a responsive, accessible, and SEO-friendly featured video poster image component. The image should be centered and take up the full width of the container on mobile devices and smaller screens, and resize to fit the container on larger screens.
COMPONENTS:
- FeaturedVideoPosterImage: (standalone): This component will contain the featured video poster image.
HTML:
<div class=""container mx-auto p-4""><FeaturedVideoPosterImage/></div>
COMPONENT HTML:
FeaturedVideoPosterImage:
<img class=""object-cover w-full h-64 md:h-80 lg:h-96 xl:h-112 mb-4"" src={poster_image_url} alt={poster_image_alt_text}/>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component. It should display a poster image for a video, with an optional play button overlay.
COMPONENTS:
- FeaturedVideoPosterImage: (standalone): The main component for the featured video poster image.
- PlayButton: (standalone): An optional play button that can be overlaid on the poster image.
HTML:
<div class=""container mx-auto p-4""><FeaturedVideoPosterImage/></div>
COMPONENT HTML:
FeaturedVideoPosterImage:
<img src=""{poster_image_url}"" alt=""{video_title}"" class=""w-full h-full object-cover rounded-lg shadow-lg""/><!-- Optional play button overlay -->{play_button ? <PlayButton/>: null}
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white text-black rounded-full p-2""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>"
Featured Video Poster Image,"DESCRIPTION:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
COMPONENTS:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
HTML:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
COMPONENT HTML:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Search Result Item Link,"DESCRIPTION:
The Search Result Item Link should display a link with a title, a summary, and a URL. The link should be visually appealing, with a clear hierarchy of information and sufficient whitespace for readability.
COMPONENTS:
- SearchResultItemLink: A standalone component that contains a link with a title, summary, and URL.
HTML:
<ul class=""list-none mb-4""><li><SearchResultItemLink/></li></ul>
COMPONENT HTML:
SearchResultItemLink:
<a href=""{url}"" class=""block py-4 no-underline hover:underline""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{summary}</p></a>"
Search Result Item Link,"DESCRIPTION:
The Search Result Item Link should display a link with a title, a summary, and a URL. The link should be visually appealing, with a clear hierarchy of information and sufficient whitespace for readability.
COMPONENTS:
- SearchResultItemLink: A standalone component that contains a link with a title, summary, and URL.
HTML:
<ul class=""list-none mb-4""><li><SearchResultItemLink/></li></ul>
COMPONENT HTML:
SearchResultItemLink:
<a href=""{url}"" class=""block py-4 no-underline hover:underline""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{summary}</p></a>"
Search Result Item Link,"DESCRIPTION:
The UI should be a link item that displays a search result, with a title, a description, and a URL. It should be responsive, mobile-first, accessible, and SEO-friendly.
COMPONENTS:
- SearchResultItemLink: (standalone)
- SearchResultItemTitle: (standalone)
- SearchResultItemDescription: (standalone)
- SearchResultItemUrl: (standalone)
HTML:
<div class=""flex flex-col mb-4""><SearchResultItemLink/></div>
COMPONENT HTML:
SearchResultItemLink:
<a href={url} class=""text-lg font-bold text-blue-600 hover:text-blue-900 transition duration-300""><SearchResultItemTitle/><SearchResultItemDescription/><SearchResultItemUrl/></a>
SearchResultItemTitle:
<span class=""text-lg font-bold"">{title}</span>
SearchResultItemDescription:
<p class=""text-gray-600"">{description}</p>
SearchResultItemUrl:
<p class=""text-sm text-gray-600"">{url}</p>"
Dependancy Graph Visualization Component,"DESCRIPTION:
The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.
COMPONENTS:
- DependencyGraphComponent: (takes children) - contains the graph and handles node relationships
- TooltipComponent: (takes children) - displays additional information when a node is hovered or clicked
HTML:
<div class=""max-w-md mx-auto pt-4""><DependencyGraphComponent><!-- graph content here --></DependencyGraphComponent></div>
COMPONENT HTML:
DependencyGraphComponent:
<div class=""flex flex-wrap justify-center"">{children}</div>
TooltipComponent:
<div class=""absolute bg-gray-100 p-2 rounded-md"">{children}</div>"
Dependancy Graph Visualization Component,"DESCRIPTION:
The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.
COMPONENTS:
- DependencyGraphComponent: (takes children) - contains the graph and handles node relationships
- TooltipComponent: (takes children) - displays additional information when a node is hovered or clicked
HTML:
<div class=""max-w-md mx-auto pt-4""><DependencyGraphComponent><!-- graph content here --></DependencyGraphComponent></div>
COMPONENT HTML:
DependencyGraphComponent:
<div class=""flex flex-wrap justify-center"">{children}</div>
TooltipComponent:
<div class=""absolute bg-gray-100 p-2 rounded-md"">{children}</div>"
Dependancy Graph Visualization Component,"DESCRIPTION:
The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.
COMPONENTS:
- DependencyGraphComponent: (takes children) - contains the graph and handles node relationships
- TooltipComponent: (takes children) - displays additional information when a node is hovered or clicked
HTML:
<div class=""max-w-md mx-auto pt-4""><DependencyGraphComponent><!-- graph content here --></DependencyGraphComponent></div>
COMPONENT HTML:
DependencyGraphComponent:
<div class=""flex flex-wrap justify-center"">{children}</div>
TooltipComponent:
<div class=""absolute bg-gray-100 p-2 rounded-md"">{children}</div>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with a slight gap between each button.
COMPONENTS:
- LikeButton: - standalone
- CommentButton: - standalone
- ShareButton: - standalone
HTML:
<div class=""flex justify-between items-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-thumbs-up""/>{like_count}</button>
CommentButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-comment""/>{comment_count}</button>
ShareButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-share""/>{share_count}</button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
Like/Comment/Share Buttons,"DESCRIPTION:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
COMPONENTS:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
HTML:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
COMPONENT HTML:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
API Explorer: Discover APIs and endpoints,"DESCRIPTION:
The UI should display a sidebar with a list of APIs, and a main content area that shows the details of the selected API, including its endpoints.
COMPONENTS:
- ApiSidebar: a standalone component that displays a list of APIs
- ApiDetails: a component that takes children, displaying details about a selected API
- ApiEndpoint: a standalone component that displays a single API endpoint
HTML:
<div class=""flex h-screen""><ApiSidebar/><div class=""flex-1 p-4""><ApiDetails><h1>{api_name}</h1><p>{api_description}</p><ul><!-- list of endpoints --><ApiEndpoint/><ApiEndpoint/><!-- ... --></ul></ApiDetails></div></div>
COMPONENT HTML:
ApiSidebar:
<nav class=""w-64 p-4 bg-gray-100""><h2>APIs</h2><ul><!-- list of APIs --><li><a href=""#"" class=""block p-2"">{api_name}</a></li><!-- ... --></ul></nav>
ApiDetails:
<div>{children}</div>
ApiEndpoint:
<li class=""p-2 border-b border-gray-200""><h3>{endpoint_method} {endpoint_path}</h3><p>{endpoint_description}</p></li>"
Alert Notification Icon Color,"DESCRIPTION:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
COMPONENTS:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
HTML:
<div class=""flex justify-center""><NotificationIcon/></div>
COMPONENT HTML:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Alert Notification Icon Color,"DESCRIPTION:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
COMPONENTS:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
HTML:
<div class=""flex justify-center""><NotificationIcon/></div>
COMPONENT HTML:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Alert Notification Icon Color,"DESCRIPTION:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
COMPONENTS:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
HTML:
<div class=""flex justify-center""><NotificationIcon/></div>
COMPONENT HTML:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Alert Notification Icon Color,"DESCRIPTION:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
COMPONENTS:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
HTML:
<div class=""flex justify-center""><NotificationIcon/></div>
COMPONENT HTML:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should have a clickable button with a label ""Upload File"" and a file browser input field that appears when the button is clicked.
COMPONENTS:
- AttachmentUploadButton: standalone component that contains a button with a label ""Upload File"" and a hidden file input field.
- FileInput: standalone component that represents the file input field.
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload File <FileInput/></button>
FileInput:
<input type=""file"" id=""{fileInputId}"" class=""sr-only""/>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should have a clickable button with a label ""Upload File"" and a file browser input field that appears when the button is clicked.
COMPONENTS:
- AttachmentUploadButton: standalone component that contains a button with a label ""Upload File"" and a hidden file input field.
- FileInput: standalone component that represents the file input field.
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload File <FileInput/></button>
FileInput:
<input type=""file"" id=""{fileInputId}"" class=""sr-only""/>"
Attachment upload button with file browser,"DESCRIPTION:
A simple attachment upload button with a file browser dialog that opens when clicked.
COMPONENTS:
- AttachmentUploadButton: (standalone)
- FileBrowserDialog: (takes children)
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/><FileBrowserDialog><!-- file browser dialog content will be inserted here --></FileBrowserDialog></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Attach File <input type=""file"" class=""hidden"" id=""{input_id}""/><label for=""{input_id}"" class=""cursor-pointer"">Browse</label></button>
FileBrowserDialog:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center""><div class=""bg-white p-4 rounded""><h2 class=""text-lg font-bold"">Select a file</h2>{children} </div></div>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should have a clickable button with a label ""Upload File"" and a file browser input field that appears when the button is clicked.
COMPONENTS:
- AttachmentUploadButton: standalone component that contains a button with a label ""Upload File"" and a hidden file input field.
- FileInput: standalone component that represents the file input field.
HTML:
<div class=""flex justify-center mb-4""><AttachmentUploadButton/></div>
COMPONENT HTML:
AttachmentUploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload File <FileInput/></button>
FileInput:
<input type=""file"" id=""{fileInputId}"" class=""sr-only""/>"
Attachment upload button with file browser,"DESCRIPTION:
The UI should be a responsive button that allows users to upload a file. The button should be styled with a background color, border, and hover effect. When clicked, it should open a file browser for the user to select a file.
COMPONENTS:
- UploadButton: Standalone component that renders a button with a label and a file input.
- FileInputLabel: Standalone component that renders a label for the file input.
HTML:
<div class=""flex justify-center""><UploadButton/></div>
COMPONENT HTML:
UploadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><FileInputLabel/><input type=""file"" class=""hidden""/></button>
FileInputLabel:
<span>Choose a file...</span>"
Breadcrumb navigation for category and subreddits,"DESCRIPTION:
The UI should display a breadcrumb navigation for categories and subreddits. Each item in the breadcrumb should display the category name and have a separator (e.g., `/`) between each item.
COMPONENTS:
- BreadCrumb: standalone component that renders a single breadcrumb item.
- BreadCrumbNavigation: container component that takes children (multiple `BreadCrumb` components).
HTML:
<nav class=""flex items-center mb-4""><BreadCrumbNavigation><BreadCrumb/><BreadCrumb/><!-- Add more Breadcrumbs as needed --></BreadCrumbNavigation></nav>
COMPONENT HTML:
BreadCrumb:
<li class=""mr-2""><a href=""{category_url}"" class=""text-gray-600 hover:text-gray-900"">{category_name}</a><span class=""text-gray-400"">/</span></li>
BreadCrumbNavigation:
<ul class=""flex"">{children}</ul>"
Pop-up text providing additional information when users hover over an element,"DESCRIPTION:
A small, rounded rectangle with a subtle shadow that appears when a user hovers over a specific element, displaying additional information related to that element. The pop-up text should be easily readable and disappear when the user stops hovering.
COMPONENTS:
- Tooltip: a standalone component that wraps the additional information.
HTML:
<span class=""hover:cursor-help"" onMouseOver={(e) =>{/* show tooltip */ }}><!-- hoverable element --><Tooltip/><!-- inserts the tooltip component --><!-- hoverable element's content --></span>
COMPONENT HTML:
Tooltip:
<div class=""absolute bg-white rounded-sm p-1 text-xs text-gray-600 shadow-md"">{tooltip_text}</div>"
Contact list with avatar and online status,"DESCRIPTION:
A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.
COMPONENTS:
- ContactItem: A standalone component representing a single contact.
- Avatar: A standalone component representing the avatar image of a contact.
- OnlineStatus: A standalone component indicating the online status of a contact.
HTML:
<main class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""flex flex-wrap justify-center""><ContactItem/><ContactItem/><ContactItem/></ul></main>
COMPONENT HTML:
ContactItem:
<li class=""flex items-center mb-4""><Avatar/><div class=""ml-2""><p class=""text-lg"">{contact_name}</p><OnlineStatus/></div></li>
Avatar:
<img src={avatar_url} alt=""{contact_name}'s avatar"" class=""w-12 h-12 rounded-full""/>
OnlineStatus:
<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>{online_status === 'online' ? 'Online' : 'Offline'}</span>"
Contact list with avatar and online status,"DESCRIPTION:
A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.
COMPONENTS:
- ContactItem: A standalone component representing a single contact.
- Avatar: A standalone component representing the avatar image of a contact.
- OnlineStatus: A standalone component indicating the online status of a contact.
HTML:
<main class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""flex flex-wrap justify-center""><ContactItem/><ContactItem/><ContactItem/></ul></main>
COMPONENT HTML:
ContactItem:
<li class=""flex items-center mb-4""><Avatar/><div class=""ml-2""><p class=""text-lg"">{contact_name}</p><OnlineStatus/></div></li>
Avatar:
<img src={avatar_url} alt=""{contact_name}'s avatar"" class=""w-12 h-12 rounded-full""/>
OnlineStatus:
<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>{online_status === 'online' ? 'Online' : 'Offline'}</span>"
Contact list with avatar and online status,"DESCRIPTION:
A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.
COMPONENTS:
- ContactItem: A standalone component representing a single contact.
- Avatar: A standalone component representing the avatar image of a contact.
- OnlineStatus: A standalone component indicating the online status of a contact.
HTML:
<main class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""flex flex-wrap justify-center""><ContactItem/><ContactItem/><ContactItem/></ul></main>
COMPONENT HTML:
ContactItem:
<li class=""flex items-center mb-4""><Avatar/><div class=""ml-2""><p class=""text-lg"">{contact_name}</p><OnlineStatus/></div></li>
Avatar:
<img src={avatar_url} alt=""{contact_name}'s avatar"" class=""w-12 h-12 rounded-full""/>
OnlineStatus:
<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>{online_status === 'online' ? 'Online' : 'Offline'}</span>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone) - The main footer component that contains the copyright information and disclaimer.
- CopyrightComponent: (standalone) - Displays the copyright information.
- DisclaimerComponent: (standalone) - Displays the disclaimer text.
HTML:
<footer class=""bg-gray-200 h-screen""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto p-4 pt-6""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p>&copy; {current_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p>{disclaimer_text}</p>"
Footer with copyright information and disclaimer,"DESCRIPTION:
The UI should be a footer section that displays copyright information and a disclaimer. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- FooterComponent: (standalone): The main footer component that wraps the copyright information and disclaimer.
- CopyrightComponent: (standalone): Displays the copyright information.
- DisclaimerComponent: (standalone): Displays the disclaimer.
HTML:
<footer class=""bg-gray-200 h-screen pt-4 pb-4""><FooterComponent/></footer>
COMPONENT HTML:
FooterComponent:
<div class=""max-w-md mx-auto px-4 lg:px-8""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p class=""text-sm text-gray-600"">&copy; {copyright_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p class=""text-sm text-gray-600"">{disclaimer_text}</p>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of blog post categories, with each category displaying its name and the number of posts it contains. The list should be responsive, mobile-first, and easily accessible.
COMPONENTS:
- BlogPostCategoryList: (takes children): Represents the list of blog post categories.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Post Categories</h2><BlogPostCategoryList><!-- list of categories will be rendered here --></BlogPostCategoryList></div>
COMPONENT HTML:
BlogPostCategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of blog post categories, with each category displaying its name and the number of posts it contains. The list should be responsive, mobile-first, and easily accessible.
COMPONENTS:
- BlogPostCategoryList: (takes children): Represents the list of blog post categories.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Post Categories</h2><BlogPostCategoryList><!-- list of categories will be rendered here --></BlogPostCategoryList></div>
COMPONENT HTML:
BlogPostCategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should display a list of blog post categories in a responsive and accessible manner. The categories should be displayed in a vertical list with each category displaying its name and the number of posts in that category.
COMPONENTS:
- CategoryList: a standalone component that displays a list of categories
- CategoryItem: a component that takes children (the category name and post count) to display a single category
HTML:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Categories</h2><CategoryList/></div>
COMPONENT HTML:
CategoryList:
<ul class=""list-none mb-0"">{categories.map(category =>( <li key={category.id} class=""mb-4""><CategoryItem>{category.name} ({category.postCount})</CategoryItem></li>))}</ul>
CategoryItem:
<a href={categoryUrl} class=""text-gray-900 hover:text-gray-600 transition duration-300"">{children}</a>"
Blog Post Category List,"DESCRIPTION:
The UI should be a responsive list of blog post categories, with each category displayed as a separate item in a vertical list. The list should be accessible, mobile-first, and SEO-friendly.
COMPONENTS:
- CategoryListItem: A standalone component representing a single category item in the list.
- CategoryList: A component that takes children, wrapping the list of category items.
HTML:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-lg font-bold mb-4"">Blog Categories</h2><CategoryList><!-- Category list items will be rendered here --><CategoryListItem/><CategoryListItem/><!-- ... --></CategoryList></div>
COMPONENT HTML:
CategoryListItem:
<li class=""py-2 border-b border-gray-200""><a href=""{category_url}"" class=""text-gray-900 hover:text-gray-600 transition duration-300""><span class=""text-lg"">{category_name}</span><span class=""text-sm text-gray-600"">{category_description}</span></a></li>
CategoryList:
<ul class=""list-none mb-4"">{children}</ul>"
Blog Post Category List,"DESCRIPTION:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
COMPONENTS:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
HTML:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
COMPONENT HTML:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Secure payment information input,"DESCRIPTION:
The UI should be a secure payment information input section with input fields for card number, expiration date, security code, and a button to submit the payment information.
COMPONENTS:
- CardNumberInput: A standalone component for inputting the card number.
- ExpirationDateInput: A standalone component for inputting the expiration date.
- SecurityCodeInput: A standalone component for inputting the security code.
- SubmitButton: A standalone component for submitting the payment information.
- PaymentInfoForm: A component that takes children to wrap all the input fields and the submit button.
HTML:
<div class=""max-w-md mx-auto p-4 pt-6""><PaymentInfoForm><CardNumberInput/><ExpirationDateInput/><SecurityCodeInput/><SubmitButton/></PaymentInfoForm></div>
COMPONENT HTML:
CardNumberInput:
<div class=""mb-4""><label htmlFor=""card-number"" class=""block mb-2"">Card Number</label><input type=""text"" id=""card-number"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
ExpirationDateInput:
<div class=""mb-4""><label htmlFor=""expiration-date"" class=""block mb-2"">Expiration Date</label><input type=""text"" id=""expiration-date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
SecurityCodeInput:
<div class=""mb-4""><label htmlFor=""security-code"" class=""block mb-2"">Security Code</label><input type=""text"" id=""security-code"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>
PaymentInfoForm:
<form>{children}</form>"
Secure payment information input,"DESCRIPTION:
The UI should be a secure payment information input form, responsive and accessible, with clear labels and placeholders, and enough space for the user to input their payment details.
COMPONENTS:
- CardNumberInput: (standalone): a text input for the card number
- ExpirationDateInput: (standalone): a text input for the expiration date
- CvcInput: (standalone): a text input for the CVC code
- PaymentForm: (takes children): a container for the payment input fields
HTML:
<form class=""max-w-md mx-auto p-4 mt-4 mb-4 bg-white rounded shadow-md""><h2 class=""text-xl font-bold mb-4"">Secure Payment Information</h2><PaymentForm><CardNumberInput/><ExpirationDateInput/><CvcInput/></PaymentForm><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
COMPONENT HTML:
CardNumberInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cardNumber"" placeholder=""Card Number"" required/>
ExpirationDateInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""expirationDate"" placeholder=""MM/YY"" required/>
CvcInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cvc"" placeholder=""CVC"" required/>
PaymentForm:
<div class=""flex flex-wrap -mx-3 mb-6"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
A post/tweet embed component that displays a user's profile picture, username, tweet/post text, and any media (e.g. image, video) associated with the post.
COMPONENTS:
- UserProfilePicture: standalone component that displays a user's profile picture.
- Username: standalone component that displays a user's username.
- PostText: standalone component that displays the text of the post/tweet.
- PostMedia: standalone component that displays the media associated with the post (e.g. image, video).
HTML:
<div class=""flex bg-white p-4 border-b border-gray-200""><UserProfilePicture/><div class=""ml-4""><Username/><PostText/><PostMedia/></div></div>
COMPONENT HTML:
UserProfilePicture:
<img src={profile_picture_url} class=""rounded-full h-10 w-10""/>
Username:
<p class=""font-bold"">{username}</p>
PostText:
<p>{post_text}</p>
PostMedia:
<img src={media_url} class=""max-w-full h-56""/>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.
COMPONENTS:
- PostHeader: standalone component to display the author's name and profile picture.
- PostContent: standalone component to display the post content.
- PostMetadata: standalone component to display additional metadata such as the post date and EngagementButton.
- EngagementButton: standalone component to display the engagement options (e.g., like, retweet, reply).
- PostEmbed: takes children to wrap the entire post embed.
HTML:
<div class=""max-w-md p-4 mx-auto""><PostEmbed><PostHeader/><PostContent/><PostMetadata/></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={profile_picture_url} class=""h-10 w-10 rounded-full mr-2"" alt={author_name}/><span class=""text-sm"">{author_name}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<div class=""flex justify-between mt-2""><span class=""text-sm"">{post_date}</span><EngagementButton/></div>
EngagementButton:
<button class=""text-sm text-blue-500 hover:text-blue-800"">{engagement_text} <!-- e.g., ""Like"", ""Retweet"", ""Reply"" --></button>
PostEmbed:
<div class=""bg-white shadow-md p-4 rounded-lg"">{children}</div>"
Post/Tweet Embeds,"DESCRIPTION:
The UI should display a single post or tweet embed with a username, avatar, timestamp, and content. The embed should be responsive, displaying well on both desktop and mobile devices.
COMPONENTS:
- PostHeader: Standalone component displaying the username and avatar.
- PostMeta: Standalone component displaying the timestamp.
- PostContent: Takes children, displaying the content of the post.
- PostEmbed: Takes children, wrapping the entire post embed.
HTML:
<div class=""max-w-md mx-auto p-4""><PostEmbed><PostHeader/><PostMeta/><PostContent><!-- Post content goes here --></PostContent></PostEmbed></div>
COMPONENT HTML:
PostHeader:
<div class=""flex items-center mb-2""><img src={avatarUrl} alt={username} class=""w-10 h-10 rounded-full mr-2""/><p class=""font-bold"">{username}</p></div>
PostMeta:
<p class=""text-gray-500 text-sm"">{timestamp}</p>
PostContent:
<div class=""prose"">{children}</div>
PostEmbed:
<div class="" bg-white p-4 rounded shadow-md"">{children}</div>"
Social media links with icons and tooltips,"DESCRIPTION:
The UI should display a row of social media links with their respective icons and tooltips when hovered.
COMPONENTS:
- SocialMediaLink: A standalone component that represents a single social media link with an icon and tooltip.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></div>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><i class=""{social_media_icon} w-6 h-6 text-2xl transition duration-300""/><span class=""sr-only"">{social_media_name}</span><span class=""tooltip tooltip-simple"">{social_media_name}</span></a>"
Social media links with icons and tooltips,"DESCRIPTION:
The UI should display a row of social media links with their respective icons and tooltips when hovered.
COMPONENTS:
- SocialMediaLink: A standalone component that represents a single social media link with an icon and tooltip.
HTML:
<div class=""flex justify-center mb-4""><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></div>
COMPONENT HTML:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><i class=""{social_media_icon} w-6 h-6 text-2xl transition duration-300""/><span class=""sr-only"">{social_media_name}</span><span class=""tooltip tooltip-simple"">{social_media_name}</span></a>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Like Button: Button for liking a post,"DESCRIPTION:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
COMPONENTS:
- LikeButton: standalone
- LikeCounter: standalone
HTML:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
COMPONENT HTML:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
COMPONENTS:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
HTML:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
COMPONENTS:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
HTML:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
The UI should be a compact user profile card that displays the user's profile picture, name, and a link to their profile.
COMPONENTS:
- UserProfileCard: Standalone component that contains the user's profile information.
- ProfilePicture: Standalone component that displays the user's profile picture.
- ProfileLink: Standalone component that links to the user's profile.
HTML:
<div class=""bg-white rounded shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center""><ProfilePicture/><div class=""ml-4""><p class=""text-lg"">{userName}</p><ProfileLink/></div></div>
ProfilePicture:
<img src={profilePictureUrl} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover""/>
ProfileLink:
<a href={profileUrl} class=""text-blue-600 hover:text-blue-400"">View Profile</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
COMPONENTS:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
HTML:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
User Profile Card: Compact user info and profile link,"DESCRIPTION:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
COMPONENTS:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
HTML:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
COMPONENT HTML:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
Countdown Timers,"DESCRIPTION:
The UI should display a countdown timer showing days, hours, minutes, and seconds until a specific date and time.
COMPONENTS:
- CountdownTimer: (standalone): The main countdown timer component.
- DayCounter: (standalone): Displays the number of days.
- HourCounter: (standalone): Displays the number of hours.
- MinuteCounter: (standalone): Displays the number of minutes.
- SecondCounter: (standalone): Displays the number of seconds.
HTML:
<div class=""flex justify-center""><CountdownTimer/></div>
COMPONENT HTML:
CountdownTimer:
<div class=""flex gap-4""><DayCounter/><span>:</span><HourCounter/><span>:</span><MinuteCounter/><span>:</span><SecondCounter/></div>
DayCounter:
<div class=""text-4xl"">{days} <span>days</span></div>
HourCounter:
<div class=""text-4xl"">{hours} <span>hours</span></div>
MinuteCounter:
<div class=""text-4xl"">{minutes} <span>minutes</span></div>
SecondCounter:
<div class=""text-4xl"">{seconds} <span>seconds</span></div>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Social Media Follow Count,"DESCRIPTION:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
COMPONENTS:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
HTML:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
COMPONENT HTML:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Testimonial Author Profile,"DESCRIPTION:
The UI should display a testimonial author's profile information, including their name, role, and photo, along with a quote and a rating. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- TestimonialAuthorProfile: A standalone component that displays the author's profile information and testimonial.
- AuthorAvatar: A standalone component that displays the author's photo.
- Rating: A standalone component that displays the rating.
- TestimonialQuote: A standalone component that displays the testimonial quote.
HTML:
<div class=""max-w-md mx-auto mb-4 md:mb-8""><TestimonialAuthorProfile/></div>
COMPONENT HTML:
TestimonialAuthorProfile:
<div class=""flex flex-col md:flex-row items-center mb-4""><AuthorAvatar/><div class=""md:ml-4""><p class=""text-lg font-bold"">{author_name}</p><p class=""text-gray-600"">{author_role}</p><Rating/></div></div><TestimonialQuote/>
AuthorAvatar:
<img class=""w-24 h-24 rounded-full"" src={author_photo_url} alt={author_name}/>
Rating:
<div class=""flex mb-2"">{rating_out_of_five} <i class=""fas fa-star text-yellow-500""></i></div>
TestimonialQuote:
<blockquote class=""text-lg italic mb-4"">{testimonial_quote}</blockquote>"
Testimonial Author Profile,"DESCRIPTION:
The UI should display a testimonial author's profile information, including their name, role, and photo, along with a quote and a rating. The component should be responsive, mobile-first, and accessible.
COMPONENTS:
- TestimonialAuthorProfile: A standalone component that displays the author's profile information and testimonial.
- AuthorAvatar: A standalone component that displays the author's photo.
- Rating: A standalone component that displays the rating.
- TestimonialQuote: A standalone component that displays the testimonial quote.
HTML:
<div class=""max-w-md mx-auto mb-4 md:mb-8""><TestimonialAuthorProfile/></div>
COMPONENT HTML:
TestimonialAuthorProfile:
<div class=""flex flex-col md:flex-row items-center mb-4""><AuthorAvatar/><div class=""md:ml-4""><p class=""text-lg font-bold"">{author_name}</p><p class=""text-gray-600"">{author_role}</p><Rating/></div></div><TestimonialQuote/>
AuthorAvatar:
<img class=""w-24 h-24 rounded-full"" src={author_photo_url} alt={author_name}/>
Rating:
<div class=""flex mb-2"">{rating_out_of_five} <i class=""fas fa-star text-yellow-500""></i></div>
TestimonialQuote:
<blockquote class=""text-lg italic mb-4"">{testimonial_quote}</blockquote>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Direct message conversation list with online status,"DESCRIPTION:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
COMPONENTS:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
HTML:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
COMPONENT HTML:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Product Rating Count,"DESCRIPTION:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
COMPONENT HTML:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
Product Rating Count,"DESCRIPTION:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
COMPONENT HTML:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
Product Rating Count,"DESCRIPTION:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
COMPONENT HTML:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
Product Rating Count,"DESCRIPTION:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
COMPONENTS:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
HTML:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
COMPONENT HTML:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
Feed/List View of Posts,"DESCRIPTION:
The UI should be a responsive list view of posts, displaying the title, content, and metadata of each post. On smaller screens, the list items should be stacked vertically, and on larger screens, they should be displayed in a grid with multiple columns.
COMPONENTS:
- PostListItem: (standalone): a single list item representing a post
- PostList: (takes children): a container for the list of posts, which wraps the PostListItem components
HTML:
<main class=""container mx-auto p-4""><PostList><PostListItem/><PostListItem/><!-- add more PostListItem components here --></PostList></main>
COMPONENT HTML:
PostListItem:
<article class=""mb-4 bg-white rounded-lg shadow-md p-4""><h2 class=""text-lg"">{post_title}</h2><p class=""text-gray-600"">{post_excerpt}</p><p class=""text-sm text-gray-500"">{post_author} | {post_date}</p></article>
PostList:
<ul class=""flex flex-wrap justify-center lg:justify-start"">{children}</ul>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Simple product listing with thumbnails,"DESCRIPTION:
A grid of product thumbnails with a title and price overlay.
COMPONENTS:
- ProductThumbnail: standalone
- ProductListing: takes children (`ProductThumbnail` components)
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><h1>Product Listing</h1><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><ProductThumbnail/><ProductThumbnail/><ProductThumbnail/><!-- repeat ProductThumbnail components here --></div></div>
COMPONENT HTML:
ProductThumbnail:
<div class=""relative overflow-hidden shadow-md rounded-lg""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover""/><div class=""absolute bottom-0 left-0 p-4 text-white""><h5>{product_name}</h5><p>${product_price}</p></div></div>
ProductListing:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8"">{children}</div>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
Simple product listing with thumbnails,"DESCRIPTION:
A responsive grid of product cards with thumbnails, displaying product information.
COMPONENTS:
- ProductCard: A standalone component displaying a single product's information.
- ProductCardThumbnail: A standalone component displaying a product's thumbnail.
- ProductCardInfo: A standalone component displaying a product's details.
HTML:
<div class=""container mx-auto p-4 pt-6 md:p-6""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard/><ProductCard/><ProductCard/><!-- add more ProductCard components here --></div></div>
COMPONENT HTML:
ProductCard:
<div class=""bg-white rounded shadow-md p-4""><ProductCardThumbnail/><ProductCardInfo/></div>
ProductCardThumbnail:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/>
ProductCardInfo:
<h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-sm"">{product_price}</p>"
