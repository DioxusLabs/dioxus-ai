[
  {
    "description": "A grid of thumbnail previews for video clips, with each thumbnail displaying a screenshot of the video and text overlay showing the video title and duration.",
    "component_list": [
      {
        "name": "VideoThumbnail",
        "is_standalone": true,
        "description": "a standalone component displaying a single video thumbnail "
      },
      {
        "name": "ThumbnailGrid",
        "is_standalone": false,
        "description": "a container component that renders a grid of `VideoThumbnail` components and takes children "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <ThumbnailGrid>\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <!-- Add more VideoThumbnail components here -->\n  </ThumbnailGrid>\n</div>\n",
    "component_html": [
      {
        "name": "VideoThumbnail",
        "html": "<div className=\"bg-gray-200 h-32 w-48 relative overflow-hidden\">  <img src=\"{thumbnail_url}\" alt=\"{video_title}\" className=\"object-cover h-full w-full\" />  <div className=\"absolute bottom-0 left-0 p-2 text-sm text-white\">    <p>{video_title}</p>    <p>{duration} seconds</p>  </div></div>"
      },
      {
        "name": "ThumbnailGrid",
        "html": "<div className=\"grid grid-cols-3 gap-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A responsive video player with playback controls, including play/pause, volume, and a seek bar.",
    "component_list": [
      {
        "name": "VideoPlayer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire video player. "
      },
      {
        "name": "VideoContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the video element. "
      },
      {
        "name": "PlaybackControls",
        "is_standalone": true,
        "description": "A standalone component that wraps the playback controls. "
      },
      {
        "name": "PlayPauseButton",
        "is_standalone": true,
        "description": "A standalone component that toggles playback. "
      },
      {
        "name": "VolumeControl",
        "is_standalone": true,
        "description": "A standalone component that controls the volume. "
      },
      {
        "name": "SeekBar",
        "is_standalone": true,
        "description": "A standalone component that displays the video's progress. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto\">\n  <VideoPlayer>\n    <VideoContainer>\n      <video src={video_src} />\n    </VideoContainer>\n    <PlaybackControls>\n      <PlayPauseButton />\n      <VolumeControl />\n      <SeekBar />\n    </PlaybackControls>\n  </VideoPlayer>\n</div>\n",
    "component_html": [
      {
        "name": "VideoPlayer",
        "html": "<div class=\"flex flex-col bg-gray-100 rounded-md shadow-md\">  {children}</div>"
      },
      {
        "name": "VideoContainer",
        "html": "<div class=\"flex-1\">  {children}</div>"
      },
      {
        "name": "PlaybackControls",
        "html": "<div class=\"flex justify-between px-4 py-2\">  {children}</div>"
      },
      {
        "name": "PlayPauseButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {playback_status === 'playing' ? 'Pause' : 'Play'}</button>"
      },
      {
        "name": "VolumeControl",
        "html": "<div class=\"flex items-center\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {volume_icon}  </button>  <input type=\"range\" min=\"0\" max=\"100\" value={volume} class=\"w-full\" /></div>"
      },
      {
        "name": "SeekBar",
        "html": "<div class=\"flex items-center\">  <p class=\"text-sm\">{current_time}</p>  <input type=\"range\" min=\"0\" max={duration} value={current_time} class=\"w-full\" />  <p class=\"text-sm\">{duration}</p></div>"
      }
    ]
  },
  {
    "description": "A video upload tool with encoding options should have a file input field, a dropdown to select the encoding quality, and a button to upload the video. The UI should also display the selected file name and the encoding quality chosen by the user.",
    "component_list": [
      {
        "name": "VideoUploader",
        "is_standalone": true,
        "description": "standalone component that wraps the entire UI "
      },
      {
        "name": "FileInput",
        "is_standalone": true,
        "description": "standalone component that allows users to select a file "
      },
      {
        "name": "EncodingQualitySelect",
        "is_standalone": true,
        "description": "standalone component that displays a dropdown for selecting encoding quality "
      },
      {
        "name": "UploadButton",
        "is_standalone": true,
        "description": "standalone component that triggers the upload action "
      },
      {
        "name": "FileInfo",
        "is_standalone": false,
        "description": "component that displays the selected file name and encoding quality (takes children) "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <VideoUploader>\n    <FileInput />\n    <FileInfo>\n      <span>{fileName}</span>\n      <span> - Encoding quality: {encodingQuality}</span>\n    </FileInfo>\n    <EncodingQualitySelect />\n    <UploadButton />\n  </VideoUploader>\n</div>\n",
    "component_html": [
      {
        "name": "VideoUploader",
        "html": "<div className=\"flex flex-col w-full\">  {children}</div>"
      },
      {
        "name": "FileInput",
        "html": "<input type=\"file\" className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\" />"
      },
      {
        "name": "EncodingQualitySelect",
        "html": "<select className=\"block w-full text-sm text-gray-500\">  <option value=\"low\">Low</option>  <option value=\"medium\">Medium</option>  <option value=\"high\">High</option></select>"
      },
      {
        "name": "UploadButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Upload Video</button>"
      },
      {
        "name": "FileInfo",
        "html": "<p className=\"text-sm text-gray-500\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a user profile page with a header, profile information, and a video history section that lists the user's watched videos.",
    "component_list": [
      {
        "name": "UserProfileHeader",
        "is_standalone": true,
        "description": "standalone, displays the user's profile picture and name "
      },
      {
        "name": "ProfileInfo",
        "is_standalone": true,
        "description": "standalone, displays the user's bio and profile information "
      },
      {
        "name": "VideoHistory",
        "is_standalone": false,
        "description": "takes children, lists the user's video history "
      },
      {
        "name": "VideoHistoryItem",
        "is_standalone": true,
        "description": "standalone, displays a single video in the video history "
      }
    ],
    "main_html": "<div className=\"container max-w-md mx-auto p-4\">\n  <UserProfileHeader />\n  <ProfileInfo />\n  <h2 className=\"text-lg font-bold mb-2\">Video History</h2>\n  <VideoHistory>\n    <VideoHistoryItem />\n    <VideoHistoryItem />\n    <!-- more VideoHistoryItem components here -->\n  </VideoHistory>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileHeader",
        "html": "<div className=\"flex justify-center mb-4\">  <img src={profile_picture} className=\"w-24 h-24 rounded-full\" />  <h1 className=\"text-2xl font-bold\">{username}</h1></div>"
      },
      {
        "name": "ProfileInfo",
        "html": "<div className=\"mb-4\">  <p>{bio}</p>  <!-- other profile information here --></div>"
      },
      {
        "name": "VideoHistory",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "VideoHistoryItem",
        "html": "<li className=\"py-2 border-b border-gray-200\">  <img src={video_thumbnail} className=\"w-12 h-12 rounded\" />  <div className=\"ml-2\">    <h3>{video_title}</h3>    <p>{video_description}</p>  </div></li>"
      }
    ]
  },
  {
    "description": "The UI should be a video category browser with a search bar at the top, a category filter menu on the left, and a grid of video thumbnails that update based on the search query and category filter.",
    "component_list": [
      {
        "name": "VideoBrowser",
        "is_standalone": true,
        "description": "(standalone): The top-level component that contains the entire video browser UI. "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone): A search bar component that allows users to type in a search query. "
      },
      {
        "name": "CategoryFilter",
        "is_standalone": true,
        "description": "(standalone): A filter menu component that lists video categories. "
      },
      {
        "name": "VideoThumb",
        "is_standalone": false,
        "description": "(takes children): A component that displays a single video thumbnail with a title and optional description. "
      },
      {
        "name": "VideoGrid",
        "is_standalone": false,
        "description": "(takes children): A component that displays a grid of video thumbnails. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <SearchBar />\n  <div className=\"flex flex-wrap -mx-2\">\n    <CategoryFilter />\n    <VideoGrid>\n      <VideoThumb />\n      <VideoThumb />\n      <!-- more VideoThumb components here -->\n    </VideoGrid>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<input  type=\"search\"  placeholder=\"Search videos...\"  className=\"w-full px-4 py-2 text-lg rounded-md\"/>"
      },
      {
        "name": "CategoryFilter",
        "html": "<ul className=\"list-none mb-4\">  <li><a href=\"#\" className=\"block py-2 px-4\">{category_name}</a></li>  <!-- more categories here --></ul>"
      },
      {
        "name": "VideoThumb",
        "html": "<div className=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-2\">  <img src={video_thumbnail_url} alt={video_title} className=\"w-full h-40 object-cover rounded-md\" />  <h4 className=\"text-lg\">{video_title}</h4>  <p>{video_description}</p></div>"
      },
      {
        "name": "VideoGrid",
        "html": "<div className=\"flex flex-wrap -mx-2\">{children}</div>"
      }
    ]
  },
  {
    "description": "A horizontal carousel of video thumbnails with titles and durations, with navigation arrows on either side.",
    "component_list": [
      {
        "name": "RecommendedVideosCarousel",
        "is_standalone": true,
        "description": "(standalone) - The main carousel component. "
      },
      {
        "name": "VideoThumbnail",
        "is_standalone": false,
        "description": "(takes children) - A single video thumbnail with title and duration. "
      },
      {
        "name": "NavigationArrow",
        "is_standalone": true,
        "description": "(standalone) - A navigation arrow (left or right). "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap -mx-4\">\n  <NavigationArrow direction=\"left\" />\n  <div className=\"flex-1 overflow-x-hidden\">\n    <!-- thumbnails will be rendered here -->\n    <RecommendedVideosCarousel/>\n  </div>\n  <NavigationArrow direction=\"right\" />\n</div>\n",
    "component_html": [
      {
        "name": "RecommendedVideosCarousel",
        "html": "<div className=\"flex overflow-x-auto\">  { /* VideoThumbnail components will be rendered here */ }</div>"
      },
      {
        "name": "VideoThumbnail",
        "html": "<div className=\"flex-shrink-0 w-56 mr-4\">  <img src={videoThumbnailUrl} alt={videoTitle} className=\"w-full h-32 object-cover rounded-md\" />  <h3 className=\"text-lg font-bold\">{videoTitle}</h3>  <p>{videoDuration} min</p></div>"
      },
      {
        "name": "NavigationArrow",
        "html": "<button className=\"bg-gray-200 hover:bg-gray-300 rounded-full p-2\">  {direction === 'left' ? `<` : `>`}</button>"
      }
    ]
  },
  {
    "description": "A horizontal row of social media buttons to share a video, with each button displaying the logo of the respective platform (e.g. Facebook, Twitter, LinkedIn, etc.).",
    "component_list": [
      {
        "name": "SocialMediaButton",
        "is_standalone": true,
        "description": "(standalone) - a single button for a specific social media platform "
      },
      {
        "name": "VideoShareButtons",
        "is_standalone": false,
        "description": "(takes children) - a container for the social media buttons "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <VideoShareButtons>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n  </VideoShareButtons>\n</div>\n",
    "component_html": [
      {
        "name": "SocialMediaButton",
        "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\">  <img src=\"{platform_logo_url}\" alt=\"{platform_name} logo\" class=\"w-8 h-8 rounded-full hover:opacity-75\" /></a>"
      },
      {
        "name": "VideoShareButtons",
        "html": "<div class=\"flex space-x-2\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a dashboard that displays video analytics for creators. It should have a navigation menu on the top, a sidebar on the left, and a main content area that displays charts and graphs showing video views, engagement, and earnings.",
    "component_list": [
      {
        "name": "NavigationBar",
        "is_standalone": true,
        "description": "A standalone component that displays the navigation menu. "
      },
      {
        "name": "Sidebar",
        "is_standalone": true,
        "description": "A standalone component that displays a list of video thumbnails and analytics links. "
      },
      {
        "name": "ChartContainer",
        "is_standalone": false,
        "description": "A component that takes children (charts) that display video analytics data. "
      },
      {
        "name": "VideoThumbnail",
        "is_standalone": true,
        "description": "A standalone component that displays a video thumbnail with a play button. "
      },
      {
        "name": "AnalyticsCard",
        "is_standalone": false,
        "description": "A component that takes children (analytics data) that displays video analytics data. "
      },
      {
        "name": "LineChart",
        "is_standalone": true,
        "description": "A standalone component that displays a line chart showing video views over time. "
      },
      {
        "name": "BarChart",
        "is_standalone": true,
        "description": "A standalone component that displays a bar chart showing engagement metrics. "
      },
      {
        "name": "EarningsCard",
        "is_standalone": true,
        "description": "A standalone component that displays earnings data. "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <NavigationBar />\n  <div className=\"flex flex-row\">\n    <Sidebar />\n    <div className=\"flex-1 p-4\">\n      <ChartContainer>\n        <LineChart />\n        <BarChart />\n      </ChartContainer>\n      <AnalyticsCard>\n        <p>{video_views} views</p>\n        <p>{engagement} engagement</p>\n      </AnalyticsCard>\n      <EarningsCard>\n        <p>{earnings} earnings</p>\n      </EarningsCard>\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "NavigationBar",
        "html": "<nav className=\"flex justify-between p-4\">  <a href=\"#\" className=\"text-lg font-bold\">Video Analytics</a>  <ul className=\"flex justify-between\">    <li><a href=\"#\" className=\"text-sm\">Dashboard</a></li>    <li><a href=\"#\" className=\"text-sm\">Videos</a></li>    <li><a href=\"#\" className=\"text-sm\">Settings</a></li>  </ul></nav>"
      },
      {
        "name": "Sidebar",
        "html": "<div className=\"w-64 p-4\">  <h5 className=\"text-lg font-bold\">Videos</h5>  <ul>    <li><VideoThumbnail videoTitle=\"Video 1\" /></li>    <li><VideoThumbnail videoTitle=\"Video 2\" /></li>    <!-- more video thumbnails -->  </ul></div>"
      },
      {
        "name": "VideoThumbnail",
        "html": "<div className=\"flex mb-4\">  <img src={video_thumbnail_url} className=\"w-16 h-16\" />  <div className=\"ml-2\">    <h6 className=\"text-sm font-bold\">{videoTitle}</h6>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Play</button>  </div></div>"
      },
      {
        "name": "ChartContainer",
        "html": "<div className=\"flex flex-wrap justify-center p-4\">  {children}</div>"
      },
      {
        "name": "LineChart",
        "html": "<div className=\"w-full\">  <!-- chart.js chart code here --></div>"
      },
      {
        "name": "BarChart",
        "html": "<div className=\"w-full\">  <!-- chart.js chart code here --></div>"
      },
      {
        "name": "AnalyticsCard",
        "html": "<div className=\"p-4 bg-white rounded shadow-md\">  <h5 className=\"text-lg font-bold\">{cardTitle}</h5>  {children}</div>"
      },
      {
        "name": "EarningsCard",
        "html": "<div className=\"p-4 bg-white rounded shadow-md\">  <h5 className=\"text-lg font-bold\">Earnings</h5>  <p>{earnings} earnings</p></div>"
      }
    ]
  },
  {
    "description": "A simple card-based interface that lists all subscribed channels, with options to edit or unsubscribe from each channel.",
    "component_list": [
      {
        "name": "ChannelCard",
        "is_standalone": true,
        "description": "A standalone component that displays information about a single channel. "
      },
      {
        "name": "ChannelList",
        "is_standalone": false,
        "description": "A component that takes children (i.e., multiple `ChannelCard`s) to display a list of subscribed channels. "
      },
      {
        "name": "SubscriptionManagement",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire UI and provides a title and any other necessary context. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <SubscriptionManagement>\n    <h2>Subscription Management</h2>\n    <ChannelList>\n      <ChannelCard />\n      <ChannelCard />\n      <!-- Add more ChannelCard components for each subscribed channel -->\n    </ChannelList>\n  </SubscriptionManagement>\n</div>\n",
    "component_html": [
      {
        "name": "ChannelCard",
        "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3>{channel_name}</h3>  <p className=\"text-gray-600\">{channel_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit</button>  <button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Unsubscribe</button></div>"
      },
      {
        "name": "ChannelList",
        "html": "<ul>  {children}</ul>"
      },
      {
        "name": "SubscriptionManagement",
        "html": "<div className=\"p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A live streaming platform with a video player on top and a real-time chat section below. The chat section displays a list of chat messages, with an input box at the bottom for users to type and send new messages.",
    "component_list": [
      {
        "name": "VideoPlayer",
        "is_standalone": true,
        "description": "component - standalone, displays the live streaming video. "
      },
      {
        "name": "ChatSection",
        "is_standalone": false,
        "description": "component - takes children, contains the chat messages and input box. "
      },
      {
        "name": "ChatMessage",
        "is_standalone": false,
        "description": "component - takes children, displays a single chat message. "
      },
      {
        "name": "ChatInput",
        "is_standalone": true,
        "description": "component - standalone, input box for users to type and send new messages. "
      }
    ],
    "main_html": "<div class=\"flex h-screen flex-col\">\n  <VideoPlayer />\n  <ChatSection>\n    <!-- list of chat messages -->\n    <ChatMessage>{chat_message}</ChatMessage>\n    <!-- input box for new messages -->\n    <ChatInput />\n  </ChatSection>\n</div>\n",
    "component_html": [
      {
        "name": "VideoPlayer",
        "html": "<div class=\"w-full h-2/3 rounded\">  <!-- video player iframe or element -->  <iframe src={stream_url} frameborder=\"0\" allowfullscreen></iframe></div>"
      },
      {
        "name": "ChatSection",
        "html": "<div class=\"p-4 overflow-y-auto h-1/3\">  {children}</div>"
      },
      {
        "name": "ChatMessage",
        "html": "<div class=\"flex p-2\">  <p class=\"text-sm\">{username}</p>  <p class=\"text-sm\">{chat_message}</p></div>"
      },
      {
        "name": "ChatInput",
        "html": "<input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\" />"
      }
    ]
  },
  {
    "description": "A simple form with two input fields for editing video metadata: one for the title and one for tags. The form should be clean and minimalist, with proper spacing and alignment.",
    "component_list": [
      {
        "name": "VideoMetadataEditor",
        "is_standalone": true,
        "description": "- Standalone component "
      },
      {
        "name": "InputField",
        "is_standalone": false,
        "description": "- Takes children (label and input element) "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h2 className=\"text-lg font-bold mb-4\">Edit Video Metadata</h2>\n  <VideoMetadataEditor>\n    <InputField label=\"Title\">\n      <input type=\"text\" className=\"w-full p-2\" value={video_title} />\n    </InputField>\n    <InputField label=\"Tags\">\n      <input type=\"text\" className=\"w-full p-2\" value={tags} />\n    </InputField>\n  </VideoMetadataEditor>\n</div>\n",
    "component_html": [
      {
        "name": "VideoMetadataEditor",
        "html": "<div className=\"flex flex-col gap-4\">  {children}</div>"
      },
      {
        "name": "InputField",
        "html": "<div className=\"flex flex-col mb-4\">  <label className=\"text-sm font-bold mb-1\">{label}</label>  <div className=\"w-full\">    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "A single post card displaying user information, post content, and actions.",
    "component_list": [
      {
        "name": "PostCard",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "UserInfo",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "PostContent",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "PostActions",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"max-w-md rounded overflow-hidden shadow-md\">\n  <UserInfo/>\n  <PostContent/>\n  <PostActions/>\n</div>\n",
    "component_html": [
      {
        "name": "UserInfo",
        "html": "<div class=\"flex items-center mb-2\">  <img src={profilePictureUrl} alt=\"Profile Picture\" class=\"w-8 h-8 rounded-full mr-2\" />  <div>    <span class=\"text-sm\">{userName}</span>    <span class=\"text-xs text-gray-600\">{userRole}</span>  </div></div>"
      },
      {
        "name": "PostContent",
        "html": "<p class=\"text-sm\">{postText}</p>"
      },
      {
        "name": "PostActions",
        "html": "<div class=\"flex justify-between mt-4\">  <button class=\"text-sm text-blue-500 hover:text-blue-700\">Like</button>  <button class=\"text-sm text-blue-500 hover:text-blue-700\">Comment</button>  <button class=\"text-sm text-blue-500 hover:text-blue-700\">Share</button></div>"
      }
    ]
  },
  {
    "description": "The UI should consist of a text input field where users can write their new post. The input field should be resizable, allowing users to type as much or as little text as they want. There should also be a character count display showing how many characters the user has typed.",
    "component_list": [
      {
        "name": "PostEditor",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "ResizableInput",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "CharacterCountDisplay",
        "is_standalone": true,
        "description": "standalone "
      }
    ],
    "main_html": "<div className=\"flex flex-col w-full p-4\">\n  <ResizableInput />\n  <CharacterCountDisplay />\n</div>\n",
    "component_html": [
      {
        "name": "ResizableInput",
        "html": "<textarea   className=\"w-full p-2 resize-vertical overflow-auto\"   placeholder=\"Write your post here...\">{children}</textarea>"
      },
      {
        "name": "CharacterCountDisplay",
        "html": "<p className=\"text-sm text-gray-500\">{character_count} characters</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of comments with their corresponding replies indented underneath each comment. Each comment should have a username, comment text, and a reply button. Each reply should also have a username and reply text.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "Standalone component that displays the entire comment thread. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "Component that displays a single comment, takes children (replies). "
      },
      {
        "name": "Reply",
        "is_standalone": true,
        "description": "Standalone component that displays a single reply. "
      },
      {
        "name": "CommentHeader",
        "is_standalone": true,
        "description": "Standalone component that displays the username and comment text. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "Standalone component that displays a reply button. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <!-- comment 1 -->\n    <Comment>\n      <CommentHeader>{username}</CommentHeader>\n      <p>{comment_text}</p>\n      <ReplyButton />\n      <!-- replies -->\n      <Reply>{reply_text}</Reply>\n      <Reply>{reply_text}</Reply>\n    </Comment>\n    <!-- comment 2 -->\n    <Comment>\n      <CommentHeader>{username}</CommentHeader>\n      <p>{comment_text}</p>\n      <ReplyButton />\n      <!-- replies -->\n      <Reply>{reply_text}</Reply>\n    </Comment>\n    <!-- ... -->\n  </CommentThread>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"flex flex-col gap-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex flex-col gap-2\">  <CommentHeader>{children}</CommentHeader>  <p>{comment_text}</p>  <ReplyButton />  <div class=\"pl-4\">    {children}  </div></div>"
      },
      {
        "name": "Reply",
        "html": "<div class=\"pl-4 pt-2\">  <CommentHeader>{username}</CommentHeader>  <p>{reply_text}</p></div>"
      },
      {
        "name": "CommentHeader",
        "html": "<div class=\"flex items-center\">  <span class=\"font-bold\">{username}</span>  <span class=\"text-gray-500\">{comment_time}</span></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Reply</button>"
      }
    ]
  },
  {
    "description": "A simple input field with a placeholder text \"Write a comment...\" and a submit button.",
    "component_list": [
      {
        "name": "CommentInput",
        "is_standalone": true,
        "description": "(standalone) - The input field component. "
      },
      {
        "name": "CommentSubmit",
        "is_standalone": true,
        "description": "(standalone) - The submit button component. "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <CommentInput />\n  <CommentSubmit />\n</div>\n",
    "component_html": [
      {
        "name": "CommentInput",
        "html": "<input type=\"text\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
      },
      {
        "name": "CommentSubmit",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Post</button>"
      }
    ]
  },
  {
    "description": "The UI should be a compact user profile card that displays the user's profile picture, name, and a link to their profile.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "Standalone component that contains the user's profile information. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile picture. "
      },
      {
        "name": "ProfileLink",
        "is_standalone": true,
        "description": "Standalone component that links to the user's profile. "
      }
    ],
    "main_html": "<div class=\"bg-white rounded shadow-md p-4\">\n  <UserProfileCard/>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"flex items-center\">  <ProfilePicture/>  <div class=\"ml-4\">    <p class=\"text-lg\">{userName}</p>    <ProfileLink/>  </div></div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src={profilePictureUrl} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full object-cover\" />"
      },
      {
        "name": "ProfileLink",
        "html": "<a href={profileUrl} class=\"text-blue-600 hover:text-blue-400\">View Profile</a>"
      }
    ]
  },
  {
    "description": "The NavBar should be a horizontal navigation menu that appears at the top of the page, with a logo on the left and navigation links on the right. It should have a clean and simple design, with a subtle background color and hover effects on the links.",
    "component_list": [
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "Standalone component that contains the entire navigation menu. "
      },
      {
        "name": "NavLogo",
        "is_standalone": true,
        "description": "Standalone component that displays the site's logo. "
      },
      {
        "name": "NavLink",
        "is_standalone": false,
        "description": "Component that takes children, representing a single navigation link. "
      }
    ],
    "main_html": "<nav className=\"flex justify-between items-center py-4\">\n  <NavLogo />\n  <ul className=\"flex justify-end\">\n    <li><NavLink>Link 1</NavLink></li>\n    <li><NavLink>Link 2</NavLink></li>\n    <li><NavLink>Link 3</NavLink></li>\n  </ul>\n</nav>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<nav className=\"bg-gray-200 h-16 flex justify-between items-center py-4\">  {children}</nav>"
      },
      {
        "name": "NavLogo",
        "html": "<a href=\"/\" className=\"text-lg font-bold text-indigo-600 hover:text-indigo-900\">  {site_name}</a>"
      },
      {
        "name": "NavLink",
        "html": "<a href=\"#\" className=\"text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">  {children}</a>"
      }
    ]
  },
  {
    "description": "A horizontal list of trending topics, each with a hashtag, topic name, and number of tweets.",
    "component_list": [
      {
        "name": "TrendingTopicList",
        "is_standalone": true,
        "description": "standalone, displays a list of trending topics "
      },
      {
        "name": "TrendingTopic",
        "is_standalone": false,
        "description": "takes children, displays a single trending topic "
      },
      {
        "name": "Hashtag",
        "is_standalone": true,
        "description": "standalone, displays a hashtag "
      },
      {
        "name": "TopicName",
        "is_standalone": true,
        "description": "standalone, displays the name of a topic "
      },
      {
        "name": "TweetsCount",
        "is_standalone": true,
        "description": "standalone, displays the number of tweets for a topic "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <TrendingTopicList/>\n</div>\n",
    "component_html": [
      {
        "name": "TrendingTopicList",
        "html": "<ul className=\"list-none flex flex-wrap justify-center\">  {children}</ul>"
      },
      {
        "name": "TrendingTopic",
        "html": "<li className=\"mr-4 mb-2\">  <Hashtag/> <TopicName/> <TweetsCount/></li>"
      },
      {
        "name": "Hashtag",
        "html": "<a href={`https://twitter.com/hashtag/${hashtag_name}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:text-blue-700\">  #{hashtag_name}</a>"
      },
      {
        "name": "TopicName",
        "html": "<span>{topic_name}</span>"
      },
      {
        "name": "TweetsCount",
        "html": "<span>({tweet_count} tweets)</span>"
      }
    ]
  },
  {
    "description": "A list of friends with their names and links to their profiles. Each friend's information is displayed in a separate row.",
    "component_list": [
      {
        "name": "FriendCard",
        "is_standalone": false,
        "description": "- takes children (renders a single friend's information) "
      },
      {
        "name": "FriendsList",
        "is_standalone": false,
        "description": "- takes children (renders a list of friends) "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold\">Friends</h2>\n  <ul class=\"divide-y divide-gray-200\">\n    <FriendCard/><FriendCard/><FriendCard/> <!-- and so on -->\n  </ul>\n</section>\n",
    "component_html": [
      {
        "name": "FriendCard",
        "html": "<li class=\"py-4\">  <img src={profile_picture_url} alt={friend_name}'s profile picture\" class=\"w-10 h-10 rounded-full\" />  <a href={profile_link} class=\"text-blue-600 hover:underline\">    {friend_name}  </a></li>"
      },
      {
        "name": "FriendsList",
        "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A small badge that displays a count of new notifications, often placed in the top right corner of a navigation item or icon.",
    "component_list": [
      {
        "name": "NotificationBadge",
        "is_standalone": true,
        "description": "Standalone component that displays the notification count. "
      }
    ],
    "main_html": "<nav>\n  <ul>\n    <li>\n      <a href=\"#\" className=\"flex items-center\">\n        <span>Notifications</span>\n        <NotificationBadge />\n      </a>\n    </li>\n  </ul>\n</nav>\n",
    "component_html": [
      {
        "name": "NotificationBadge",
        "html": "<div className=\"bg-red-500 text-white rounded-full px-2 py-1 text-xs\">  {notificationCount}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a circular animated loading indicator that spins to indicate that the application is loading or processing something.",
    "component_list": [
      {
        "name": "LoadingSpinner",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
    "component_html": [
      {
        "name": "LoadingSpinner",
        "html": "<div class=\"inline-block w-8 h-8 border-4 border-solid rounded-full border-white border-t-transparent animate-spin\" />"
      }
    ]
  },
  {
    "description": "The UI should display an error message with details, such as an error title, error message, and possibly other details.",
    "component_list": [
      {
        "name": "ErrorMessage",
        "is_standalone": true,
        "description": "A standalone component that displays an error message with details. "
      }
    ],
    "main_html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">\n  <ErrorMessage/>\n</div>\n",
    "component_html": [
      {
        "name": "ErrorMessage",
        "html": "<h5 class=\"text-lg\">{error_title}</h5><p>{error_message}</p><p>{error_details}</p>"
      }
    ]
  },
  {
    "description": "A simple login form with input fields for username and password, a submit button, and possibly some error messages or additional links (e.g., \"Forgot password\").",
    "component_list": [
      {
        "name": "LoginForm",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "InputField",
        "is_standalone": false,
        "description": "takes children (label and input element) "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ErrorMessage",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ForgotPasswordLink",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"max-w-md p-4 mx-auto mt-4 bg-white shadow-md\">\n  <h1 class=\"text-2xl\">Login</h1>\n  <LoginForm>\n    <InputField label=\"Username\" type=\"text\" />\n    <InputField label=\"Password\" type=\"password\" />\n    <SubmitButton>Log in</SubmitButton>\n    {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    <ForgotPasswordLink>Forgot password?</ForgotPasswordLink>\n  </LoginForm>\n</div>\n",
    "component_html": [
      {
        "name": "LoginForm",
        "html": "<form>  {children}</form>"
      },
      {
        "name": "InputField",
        "html": "<div class=\"mb-4\">  <label class=\"block text-gray-700\">{label}</label>  <input class=\"w-full p-2 pl-10 text-sm text-gray-700\" type={type} /></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "ErrorMessage",
        "html": "<p class=\"text-red-500 text-sm\">{children}</p>"
      },
      {
        "name": "ForgotPasswordLink",
        "html": "<a class=\"text-blue-500 hover:text-blue-700\" href=\"#\">{children}</a>"
      }
    ]
  },
  {
    "description": "A simple input field with a label and a button to upload a profile picture.",
    "component_list": [
      {
        "name": "AvatarUploadInput",
        "is_standalone": true,
        "description": "(standalone): An input field to upload a profile picture. "
      },
      {
        "name": "UploadButton",
        "is_standalone": true,
        "description": "(standalone): A button to trigger the upload action. "
      }
    ],
    "main_html": "<div className=\"flex justify-center\">\n  <label className=\"block mb-2 text-sm\">\n    Profile Picture\n  </label>\n  <AvatarUploadInput />\n  <UploadButton>Upload</UploadButton>\n</div>\n",
    "component_html": [
      {
        "name": "AvatarUploadInput",
        "html": "<input  type=\"file\"  id=\"avatar-upload-input\"  className=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"/>"
      },
      {
        "name": "UploadButton",
        "html": "<button  className=\"bg-emerald-500 hover:bg-emerald-700 text-white font-bold py-2 px-4 rounded-full\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A small popup window with a warning icon, an alert message, and an \"OK\" button to close the popup.",
    "component_list": [
      {
        "name": "AlertPopup",
        "is_standalone": true,
        "description": "A standalone component that contains the entire popup. "
      },
      {
        "name": "WarningIcon",
        "is_standalone": true,
        "description": "A standalone component that displays a warning icon. "
      },
      {
        "name": "AlertMessage",
        "is_standalone": false,
        "description": "A component that takes children (the alert message text). "
      },
      {
        "name": "PopupButton",
        "is_standalone": true,
        "description": "A standalone component that displays a button to close the popup. "
      }
    ],
    "main_html": "<div class=\"fixed top-0 left-0 w-full h-full bg-gray-500 bg-opacity-50 flex justify-center\">\n  <div class=\"bg-white shadow-md rounded px-4 py-2\">\n    <WarningIcon/>\n    <AlertMessage><AlertMessageContent/></AlertMessage>\n    <PopupButton>OK</PopupButton>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "WarningIcon",
        "html": "<i class=\"fas fa-exclamation-triangle text-yellow-500 text-2xl\"></i>"
      },
      {
        "name": "AlertMessage",
        "html": "<p>{children}</p>"
      },
      {
        "name": "PopupButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">OK</button>"
      }
    ]
  },
  {
    "description": "A header bar with a logo on the left and navigation links on the right.",
    "component_list": [
      {
        "name": "Navbar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "NavbarLogo",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "NavbarNav",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "NavbarNavLink",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<header class=\"bg-gray-900 h-16 flex items-center justify-between px-4\">\n  <NavbarLogo />\n  <NavbarNav>\n    <NavbarNavLink>Link 1</NavbarNavLink>\n    <NavbarNavLink>Link 2</NavbarNavLink>\n    <NavbarNavLink>Link 3</NavbarNavLink>\n  </NavbarNav>\n</header>\n",
    "component_html": [
      {
        "name": "Navbar",
        "html": "<div class=\"flex items-center justify-between px-4 h-16\">  {children}</div>"
      },
      {
        "name": "NavbarLogo",
        "html": "<a href=\"#\" class=\"text-lg font-bold\">  <img src={logo_url} alt=\"Logo\" class=\"h-8\" /></a>"
      },
      {
        "name": "NavbarNav",
        "html": "<ul class=\"flex items-center\">  {children}</ul>"
      },
      {
        "name": "NavbarNavLink",
        "html": "<li class=\"ml-4\">  <a href=\"#\" class=\"text-white\">{children}</a></li>"
      }
    ]
  },
  {
    "description": "A simple search bar with a text input, a search icon, and a clear button to reset the input.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "SearchInput",
        "is_standalone": false,
        "description": "(takes children) "
      },
      {
        "name": "SearchIcon",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "ClearButton",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex items-center bg-white rounded-md shadow-md\">\n  <SearchIcon/>\n  <SearchInput><input type=\"text\" placeholder=\"Search...\">{children}</SearchInput>\n  <ClearButton/>\n</div>\n",
    "component_html": [
      {
        "name": "SearchIcon",
        "html": "<i class=\"fas fa-search text-gray-400\" aria-hidden=\"true\"></i>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"text\" class=\"w-full pl-10 pr-4 py-2 text-gray-700\" placeholder={placeholder}/>"
      },
      {
        "name": "ClearButton",
        "html": "<button class=\"px-4 py-2 text-gray-400 hover:text-gray-600\">  <i class=\"fas fa-times\" aria-hidden=\"true\"></i></button>"
      }
    ]
  },
  {
    "description": "A list of posts with a title, score, and comments. Each post should have a clear separation from the others, and the title should be prominent.",
    "component_list": [
      {
        "name": "PostItem",
        "is_standalone": true,
        "description": "standalone component that represents a single post "
      },
      {
        "name": "PostTitle",
        "is_standalone": true,
        "description": "standalone component that displays the title of a post "
      },
      {
        "name": "PostScore",
        "is_standalone": true,
        "description": "standalone component that displays the score of a post "
      },
      {
        "name": "PostComments",
        "is_standalone": true,
        "description": "standalone component that displays the comments of a post "
      }
    ],
    "main_html": "<div className=\"flex flex-col gap-4\">\n  <PostItem>\n    <PostTitle>{post_title}</PostTitle>\n    <PostScore.score>{post_score}</PostScore.score>\n    <PostComments>{post_comments}</PostComments>\n  </PostItem>\n  <!-- more PostItems here -->\n</div>\n",
    "component_html": [
      {
        "name": "PostItem",
        "html": "<div className=\"bg-white p-4 shadow-md rounded-md\">  {children}</div>"
      },
      {
        "name": "PostTitle",
        "html": "<h2 className=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "PostScore",
        "html": "<p className=\"text-sm text-gray-600\">{children} points</p>"
      },
      {
        "name": "PostComments",
        "html": "<p className=\"text-sm text-gray-600\">{children} comments</p>"
      }
    ]
  },
  {
    "description": "A single post displayed on a webpage. The post consists of a text description, an image, and a list of comments. The text description is displayed above the image, and the comments are listed below the image.",
    "component_list": [
      {
        "name": "PostHeader",
        "is_standalone": true,
        "description": "a standalone component that displays the post's text description. "
      },
      {
        "name": "PostImage",
        "is_standalone": true,
        "description": "a standalone component that displays the post's image. "
      },
      {
        "name": "CommentList",
        "is_standalone": false,
        "description": "a component that takes children (Comment components). "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "a standalone component that displays a single comment. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostHeader />\n  <PostImage />\n  <CommentList>\n    <Comment />\n    <!-- additional Comment components... -->\n  </CommentList>\n</div>\n",
    "component_html": [
      {
        "name": "PostHeader",
        "html": "<h2 class=\"text-lg font-bold\">{post_text}</h2>"
      },
      {
        "name": "PostImage",
        "html": "<img src={image_url} alt=\"Post image\" class=\"w-full mb-4\" />"
      },
      {
        "name": "CommentList",
        "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "Comment",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <p class=\"text-sm\">{comment_text}</p>  <p class=\"text-xs text-gray-500\">{comment_username}</p></li>"
      }
    ]
  },
  {
    "description": "A comment thread with replies and nested comments, where each comment has a username, timestamp, and text. Replies are indented below their corresponding comments.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "(standalone) - the entire comment thread "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "(takes children) - a single comment with replies "
      },
      {
        "name": "Reply",
        "is_standalone": false,
        "description": "(takes children) - a reply to a comment "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "(standalone) - the text of a single comment or reply "
      },
      {
        "name": "UserInfo",
        "is_standalone": true,
        "description": "(standalone) - the username and timestamp of a comment or reply "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <Comment>\n      <!-- comment text and replies -->\n      <CommentText />\n      <!-- replies to this comment -->\n      <Reply>\n        <CommentText />\n        <!-- nested replies -->\n        <Reply>\n          <CommentText />\n        </Reply>\n      </Reply>\n    </Comment>\n    <!-- more comments -->\n    <Comment>\n      <CommentText />\n    </Comment>\n  </CommentThread>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "Comment",
        "html": "<li className=\"mb-4\">  <UserInfo />  <CommentText />  {children}</li>"
      },
      {
        "name": "Reply",
        "html": "<ul className=\"list-none ml-4 mb-4\">  <li>    <UserInfo />    <CommentText />    {children}  </li></ul>"
      },
      {
        "name": "CommentText",
        "html": "<p className=\"text-sm\">{comment_text}</p>"
      },
      {
        "name": "UserInfo",
        "html": "<p className=\"text-xs text-gray-500\">{username} <span className=\"text-gray-400\">{timestamp}</span></p>"
      }
    ]
  },
  {
    "description": "A user profile card with info, karma points, and post history.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "(standalone) - A card component to hold all the user profile information. "
      },
      {
        "name": "UserProfileHeader",
        "is_standalone": true,
        "description": "(standalone) - A component for the header section of the user profile card. "
      },
      {
        "name": "UserProfileInfo",
        "is_standalone": true,
        "description": "(standalone) - A component to display user info (e.g. username, bio). "
      },
      {
        "name": "KarmaPoints",
        "is_standalone": true,
        "description": "(standalone) - A component to display the user's karma points. "
      },
      {
        "name": "PostHistory",
        "is_standalone": false,
        "description": "(takes children) - A component to display the user's post history. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <UserProfileCard>\n    <UserProfileHeader />\n    <UserProfileInfo />\n    <KarmaPoints />\n    <PostHistory>\n      <!-- post history items will be rendered here -->\n    </PostHistory>\n  </UserProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"p-4 flex flex-col\">  {children}</div>"
      },
      {
        "name": "UserProfileHeader",
        "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} class=\"w-12 h-12 rounded-full\" />  <h2 class=\"text-lg ml-4\">{username}</h2></div>"
      },
      {
        "name": "UserProfileInfo",
        "html": "<div class=\"text-sm mb-4\">  <p>{bio}</p></div>"
      },
      {
        "name": "KarmaPoints",
        "html": "<div class=\"mb-4\">  <p>{karma_points} karma points</p></div>"
      },
      {
        "name": "PostHistory",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A vertical sidebar with two sections: popular posts and trending topics. The popular posts section lists a few post titles with a brief description, and the trending topics section displays a list of topic titles.",
    "component_list": [
      {
        "name": "Sidebar",
        "is_standalone": true,
        "description": "(standalone): The main container for the sidebar. "
      },
      {
        "name": "PopularPosts",
        "is_standalone": false,
        "description": "(takes children): A section for popular posts. "
      },
      {
        "name": "PopularPost",
        "is_standalone": false,
        "description": "(takes children): An individual popular post item. "
      },
      {
        "name": "TrendingTopics",
        "is_standalone": false,
        "description": "(takes children): A section for trending topics. "
      },
      {
        "name": "TrendingTopic",
        "is_standalone": false,
        "description": "(takes children): An individual trending topic item. "
      }
    ],
    "main_html": "<div class=\"fixed h-screen w-64 bg-gray-100 dark:bg-gray-800 transition duration-300\">\n  <Sidebar>\n    <PopularPosts>\n      <PopularPost/><PopularPost/><PopularPost/>\n    </PopularPosts>\n    <TrendingTopics>\n      <TrendingTopic/><TrendingTopic/><TrendingTopic/>\n    </TrendingTopics>\n  </Sidebar>\n</div>\n",
    "component_html": [
      {
        "name": "Sidebar",
        "html": "<div class=\"p-4\">  {children}</div>"
      },
      {
        "name": "PopularPosts",
        "html": "<div class=\"mb-4\">  <h5 class=\"text-lg font-bold mb-2\">Popular Posts</h5>  {children}</div>"
      },
      {
        "name": "PopularPost",
        "html": "<div class=\"flex items-center mb-2\">  <img src=\"{post_image}\" alt=\"\" class=\"w-8 h-8 rounded-full mr-2\"/>  <div>    <h6 class=\"text-sm font-bold\">{post_title}</h6>    <p class=\"text-xs text-gray-600\">{post_description}</p>  </div></div>"
      },
      {
        "name": "TrendingTopics",
        "html": "<div class=\"mb-4\">  <h5 class=\"text-lg font-bold mb-2\">Trending Topics</h5>  <ul class=\"list-none mb-0\">    {children}  </ul></div>"
      },
      {
        "name": "TrendingTopic",
        "html": "<li class=\"mb-2\">  <a href=\"#\" class=\"text-sm font-bold\">{topic_name}</a></li>"
      }
    ]
  },
  {
    "description": "A simple footer with three links to policies, terms, and help.",
    "component_list": [
      {
        "name": "Footer",
        "is_standalone": true,
        "description": "standalone component that renders the entire footer. "
      },
      {
        "name": "FooterLink",
        "is_standalone": false,
        "description": "component that takes children (the link text) and renders a single link in the footer. "
      }
    ],
    "main_html": "<footer class=\"bg-gray-200 h-screen pt-10 pb-10\">\n  <div class=\"container mx-auto p-4\">\n    <FooterLink>< FooterLink/>\n    <FooterLink><FooterLink/>\n    <FooterLink><FooterLink/>\n  </div>\n</footer>\n",
    "component_html": [
      {
        "name": "Footer",
        "html": "<div class=\"bg-gray-200 h-screen pt-10 pb-10\">  <div class=\"container mx-auto p-4\">    {children}  </div></div>"
      },
      {
        "name": "FooterLink",
        "html": "<a class=\"text-gray-600 hover:text-gray-900\" href={link_url}>{children}</a>"
      }
    ]
  },
  {
    "description": "A modal dialog with a header, a text input field for the title, a text area for the content, and a button to submit the new post or comment.",
    "component_list": [
      {
        "name": "ModalDialog",
        "is_standalone": true,
        "description": "(standalone) - the outer modal dialog container "
      },
      {
        "name": "DialogTitle",
        "is_standalone": true,
        "description": "(standalone) - the header of the modal dialog "
      },
      {
        "name": "InputField",
        "is_standalone": false,
        "description": "(takes children) - a text input field "
      },
      {
        "name": "TextArea",
        "is_standalone": false,
        "description": "(takes children) - a text area for the content "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "(standalone) - the submit button "
      }
    ],
    "main_html": "<div class=\"fixed inset-0 flex justify-center items-center\">\n  <ModalDialog>\n    <DialogTitle>{modal_title}</DialogTitle>\n    <InputField>\n      <input type=\"text\" placeholder=\"Title\" />\n    </InputField>\n    <TextArea>\n      <textarea placeholder=\"Content\" rows=\"5\"></textarea>\n    </TextArea>\n    <SubmitButton>Post</SubmitButton>\n  </ModalDialog>\n</div>\n",
    "component_html": [
      {
        "name": "ModalDialog",
        "html": "<div class=\"bg-white rounded shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "DialogTitle",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "InputField",
        "html": "<div class=\"mb-4\">  <label class=\"block mb-1\">{children}</label></div>"
      },
      {
        "name": "TextArea",
        "html": "<div class=\"mb-4\">  {children}</div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A pager component with previous and next buttons, and a text indicator showing the current page and total pages.",
    "component_list": [
      {
        "name": "Pager",
        "is_standalone": true,
        "description": "A standalone component that renders the pager controls. "
      },
      {
        "name": "PagerButton",
        "is_standalone": false,
        "description": "A component that takes children ( previous or next button text). "
      },
      {
        "name": "PagerIndicator",
        "is_standalone": true,
        "description": "A standalone component that displays the current page and total pages. "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <Pager>\n    <PagerButton><PagerButton/> <!-- previous button -->\n    <PagerIndicator/>\n    <PagerButton>»</PagerButton> <!-- next button -->\n  </Pager>\n</div>\n",
    "component_html": [
      {
        "name": "Pager",
        "html": "<div className=\"flex justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "PagerButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "PagerIndicator",
        "html": "<p className=\"text-gray-600\">  Page {current_page} of {total_pages}</p>"
      }
    ]
  },
  {
    "description": "A dropdown menu that allows users to select a category or subreddit.",
    "component_list": [
      {
        "name": "CategoryDropdown",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "DropdownOption",
        "is_standalone": false,
        "description": "takes children (the text of the option) "
      }
    ],
    "main_html": "<div class=\"flex flex-col w-48\">\n  <label for=\"category\" class=\"text-sm\">Category/Subreddit</label>\n  <CategoryDropdown id=\"category\">\n    <DropdownOption>Option 1</DropdownOption>\n    <DropdownOption>Option 2</DropdownOption>\n    <!-- Add more options here -->\n  </CategoryDropdown>\n</div>\n",
    "component_html": [
      {
        "name": "CategoryDropdown",
        "html": "<select class=\"bg-white border border-gray-300 rounded-lg py-2 px-4 w-full\">  {children}</select>"
      },
      {
        "name": "DropdownOption",
        "html": "<option class=\"bg-white hover:bg-gray-100 py-2\">{children}</option>"
      }
    ]
  },
  {
    "description": "The UI should be a text input field with a character counter that displays the remaining characters available for a tweet. The counter should turn red when the character limit is exceeded.",
    "component_list": [
      {
        "name": "TweetInput",
        "is_standalone": true,
        "description": "A standalone component that represents the text input field. "
      },
      {
        "name": "CharacterCounter",
        "is_standalone": true,
        "description": "A standalone component that displays the remaining characters available for a tweet. "
      }
    ],
    "main_html": "<div class=\"flex flex-col\">\n  <TweetInput />\n  <CharacterCounter />\n</div>\n",
    "component_html": [
      {
        "name": "TweetInput",
        "html": "<input type=\"text\" class=\"w-full p-2 border border-gray-200 rounded\" />"
      },
      {
        "name": "CharacterCounter",
        "html": "<p class={ remaining_characters <= 0 ? \"text-red-500\" : \"\" }>Characters remaining: {remaining_characters}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a user's username, profile picture, and a badge indicating their online status.",
    "component_list": [
      {
        "name": "UserProfileDisplay",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile picture and username. "
      },
      {
        "name": "OnlineBadge",
        "is_standalone": true,
        "description": "standalone component that displays the online status badge. "
      }
    ],
    "main_html": "<div className=\"flex items-center\">\n  <UserProfileDisplay />\n  <OnlineBadge />\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileDisplay",
        "html": "<div className=\"flex items-center\">  <img src={profile_picture_url} className=\"w-8 h-8 rounded-full\" />  <p className=\"ml-2\">{username}</p></div>"
      },
      {
        "name": "OnlineBadge",
        "html": "<div className={`w-3 h-3 rounded-full ${is_online ? 'bg-green-500' : 'bg-gray-500'}`}></div>"
      }
    ]
  },
  {
    "description": "The UI should display an individual tweet post with the user's profile picture, username, timestamp, tweet content, and a reply button.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile picture. "
      },
      {
        "name": "TweetContent",
        "is_standalone": false,
        "description": "Takes children component that displays the tweet content. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "Standalone component that displays a reply button. "
      },
      {
        "name": "TweetPost",
        "is_standalone": false,
        "description": "Takes children component that displays the entire tweet post. "
      }
    ],
    "main_html": "<TweetPost>\n  <UserProfilePicture />\n  <TweetContent>\n    <h2>{username}</h2>\n    <p>{tweet_content}</p>\n    <p>{timestamp}</p>\n  </TweetContent>\n  <ReplyButton />\n</TweetPost>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src={profile_picture_url} alt={username} className=\"w-10 h-10 rounded-full\" />"
      },
      {
        "name": "TweetContent",
        "html": "<div className=\"ml-4\">  {children}</div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
      },
      {
        "name": "TweetPost",
        "html": "<div className=\"flex mb-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A small circular button with a retweet icon and a count of retweets.",
    "component_list": [
      {
        "name": "RetweetButton",
        "is_standalone": true,
        "description": "(standalone) - A button to retweet a tweet. "
      },
      {
        "name": "RetweetIcon",
        "is_standalone": true,
        "description": "(standalone) - An icon to represent retweeting. "
      },
      {
        "name": "RetweetCount",
        "is_standalone": true,
        "description": "(standalone) - A display of how many times the tweet has been retweeted. "
      }
    ],
    "main_html": "<button className=\"flex items-center text-xs py-1 px-2 rounded-full\">\n  <RetweetIcon/>\n  <RetweetCount/> Retweets\n</button>\n",
    "component_html": [
      {
        "name": "RetweetIcon",
        "html": "<i className=\"fas fa-retweet text-green-500\">{/* icon */}</i>"
      },
      {
        "name": "RetweetCount",
        "html": "<span className=\"text-gray-600\">{retweet_count}</span>"
      }
    ]
  },
  {
    "description": "A comment display for conversation threads should resemble a chat-like interface, with each comment indented to show the conversation flow. Each comment should have a username, comment text, and a timestamp.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "standalone, displays a list of comments "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "takes children, displays a single comment with username, comment text, and timestamp "
      },
      {
        "name": "Timestamp",
        "is_standalone": true,
        "description": "standalone, displays a timestamp for a comment "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <Comment><Comment/></Comment>\n    <Comment><Comment/></Comment>\n    <!-- more comments here -->\n  </CommentThread>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "Comment",
        "html": "<li className=\"mb-4\">  <span className=\"text-sm text-gray-500\">{username}</span>  <p className=\"text-base\">{commentText}</p>  <Timestamp />  <div className=\"pl-4\">{children}</div></li>"
      },
      {
        "name": "Timestamp",
        "html": "<span className=\"text-xs text-gray-400\">{timestamp}</span>"
      }
    ]
  },
  {
    "description": "A list of tagged users, each with their username and a \"Remove tag\" button.",
    "component_list": [
      {
        "name": "TaggedUser",
        "is_standalone": true,
        "description": "A standalone component displaying a single tagged user's information. "
      },
      {
        "name": "RemoveButton",
        "is_standalone": true,
        "description": "A standalone component representing the \"Remove tag\" button. "
      }
    ],
    "main_html": "<ul className=\"list-none mb-4\">\n  <li className=\"flex justify-between mb-2\">\n    <TaggedUser />\n  </li>\n  <!-- more tagged users here -->\n</ul>\n",
    "component_html": [
      {
        "name": "TaggedUser",
        "html": "<span className=\"mr-2\">{username}</span><RemoveButton />"
      },
      {
        "name": "RemoveButton",
        "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Remove tag</button>"
      }
    ]
  },
  {
    "description": "The UI should display a list of hashtags, each with a label and a count of posts associated with it. The hashtags should be clickable, and the ones with more posts should be displayed in a larger font size.",
    "component_list": [
      {
        "name": "HashtagList",
        "is_standalone": true,
        "description": "standalone component that displays a list of hashtags "
      },
      {
        "name": "HashtagItem",
        "is_standalone": false,
        "description": "component that displays a single hashtag with its post count; takes children "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap gap-2\">\n  <HashtagList/>\n</div>\n",
    "component_html": [
      {
        "name": "HashtagList",
        "html": "<ul class=\"list-none m-0 p-0\">  {hashtags.map((hashtag, index) => (    <li key={index} class=\"mb-2\">      <HashtagItem>{hashtag}</HashtagItem>    </li>  ))}</ul>"
      },
      {
        "name": "HashtagItem",
        "html": "<a href={`topic/${hashtag_name}`}>  <span class=\"text-sm\">{hashtag_name}</span>  <span class=\"text-xs text-gray-500\">{post_count} posts</span></a>"
      }
    ]
  },
  {
    "description": "A simple search bar with a text input and a search button.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div className=\"flex items-center max-w-md\">\n  <SearchInput />\n  <SearchButton />\n</div>\n",
    "component_html": [
      {
        "name": "SearchInput",
        "html": "<input type=\"text\" className=\"px-4 py-2 w-full rounded-md\" placeholder=\"Search...\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Search</button>"
      }
    ]
  },
  {
    "description": "A horizontal navigation menu with clickable items, each representing a different section of the app.",
    "component_list": [
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "standalone component to wrap the navigation menu "
      },
      {
        "name": "NavItem",
        "is_standalone": true,
        "description": "standalone component to represent a single navigation item "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <NavBar>\n    <NavItem><ComponentName/></NavItem>\n    <NavItem><ComponentName/></NavItem>\n    <!-- add more NavItem components as needed -->\n  </NavBar>\n</div>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<nav className=\"flex items-center justify-between w-full\">  {children}</nav>"
      },
      {
        "name": "NavItem",
        "html": "<a href=\"#\" className=\"text-lg mx-4 hover:text-blue-500\">  {children}</a>"
      }
    ]
  },
  {
    "description": "A notification bell icon with a badge indicating the number of new updates.",
    "component_list": [
      {
        "name": "NotificationBell",
        "is_standalone": true,
        "description": "(standalone) - The bell icon with a badge indicating new updates. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "(standalone) - A small circle displaying the number of new updates. "
      }
    ],
    "main_html": "<nav>\n  <ul>\n    <li>\n      <NotificationBell/>\n    </li>\n  </ul>\n</nav>\n",
    "component_html": [
      {
        "name": "NotificationBell",
        "html": "<a href=\"#\" className=\"relative\">  <i className=\"fas fa-bell\">{/* bell icon */}</i>  <Badge/></a>"
      },
      {
        "name": "Badge",
        "html": "<span className=\"absolute top-0 right-0 -mr-2 px-1 bg-red-500 text-white rounded-full text-xs\">{new_update_count}</span>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile summary and bio, including their profile picture, name, and bio information.",
    "component_list": [
      {
        "name": "UserProfileSummary",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile summary information. "
      },
      {
        "name": "UserProfileBio",
        "is_standalone": true,
        "description": "standalone component that displays the user's bio information. "
      },
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile picture. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-4 p-4\">\n  <div class=\"flex justify-center\">\n    <UserProfilePicture />\n  </div>\n  <UserProfileSummary />\n  <UserProfileBio />\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-24 h-24 rounded-full object-cover object-center\" />"
      },
      {
        "name": "UserProfileSummary",
        "html": "<div class=\"flex flex-col gap-2\">  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-500\">{user_title}</p></div>"
      },
      {
        "name": "UserProfileBio",
        "html": "<p class=\"text-gray-500\">{bio_text}</p>"
      }
    ]
  },
  {
    "description": "A small delete button with a trash can icon to remove a tweet from a post.",
    "component_list": [
      {
        "name": "TweetDeleteButton",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<button className=\"text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\">\n  <TweetDeleteButton/>\n</button>\n",
    "component_html": [
      {
        "name": "TweetDeleteButton",
        "html": "<span className=\"text-lg inline-block\">  <i className=\"fas fa-trash-alt\"></i></span>"
      }
    ]
  },
  {
    "description": "The UI should display a list of trending topics, each with a title, a brief description, and a call-to-action button.",
    "component_list": [
      {
        "name": "TrendingTopicCard",
        "is_standalone": true,
        "description": "standalone component representing a single trending topic "
      },
      {
        "name": "TrendingTopicList",
        "is_standalone": false,
        "description": "component that takes children, which will be a list of `TrendingTopicCard` components "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <TrendingTopicList>\n    <!-- list of TrendingTopicCard components will go here -->\n  </TrendingTopicList>\n</div>\n",
    "component_html": [
      {
        "name": "TrendingTopicCard",
        "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{topicTitle}</h3>  <p className=\"text-gray-600\">{topicDescription}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Join Discussion  </button></div>"
      },
      {
        "name": "TrendingTopicList",
        "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a list of user suggestions with their profile pictures, names, and a \"Follow\" button. The list should be scrollable and have a header with a title.",
    "component_list": [
      {
        "name": "UserSuggestionCard",
        "is_standalone": true,
        "description": "A standalone component that displays a single user suggestion. "
      },
      {
        "name": "WhoToFollowList",
        "is_standalone": false,
        "description": "A component that takes children, which is a list of `UserSuggestionCard` components. "
      }
    ],
    "main_html": "<div className=\"max-h-screen overflow-y-scroll px-4 pt-4\">\n  <h2 className=\"text-lg font-bold\">Who to follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard />\n    <UserSuggestionCard />\n    <UserSuggestionCard />\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
    "component_html": [
      {
        "name": "UserSuggestionCard",
        "html": "<div className=\"flex items-center mb-4\">  <img src={profile_picture_url} className=\"w-12 h-12 rounded-full\" />  <div className=\"ml-4\">    <p className=\"text-lg\">{username}</p>    <p className=\"text-gray-600\">{name}</p>  </div>  <button className=\"ml-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Follow  </button></div>"
      },
      {
        "name": "WhoToFollowList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a dashboard displaying tweet analytics for engagement metrics. It should show the number of likes, retweets, replies, and engagements for a tweet.",
    "component_list": [
      {
        "name": "TweetAnalyticsCard",
        "is_standalone": true,
        "description": "standalone component displaying the tweet analytics "
      },
      {
        "name": "MetricItem",
        "is_standalone": false,
        "description": "takes children, displays a single metric (e.g. likes, retweets, etc.) "
      }
    ],
    "main_html": "<div class=\" container mx-auto p-4 pt-6 md:p-6\">\n  <TweetAnalyticsCard/>\n</div>\n",
    "component_html": [
      {
        "name": "TweetAnalyticsCard",
        "html": "<div class=\"bg-white rounded shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Tweet Analytics</h2>  <ul class=\"list-none mb-0\">    <MetricItem> Likes: {likes} </MetricItem>    <MetricItem> Retweets: {retweets} </MetricItem>    <MetricItem> Replies: {replies} </MetricItem>    <MetricItem> Engagements: {engagements} </MetricItem>  </ul></div>"
      },
      {
        "name": "MetricItem",
        "html": "<li class=\"flex items-center mb-2\">  <span class=\"mr-2\">{icon}</span>  <span>{children}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should consist of a navigation menu with a list of mailbox folders and labels. The menu should be divided into two sections: one for folders and one for labels. Each folder and label should be represented by a list item with an icon and text.",
    "component_list": [
      {
        "name": "NavigationMenu",
        "is_standalone": true,
        "description": "(standalone): The outermost container of the navigation menu. "
      },
      {
        "name": "MenuSection",
        "is_standalone": false,
        "description": "(takes children): A section of the navigation menu, dividing folders and labels. "
      },
      {
        "name": "MenuItem",
        "is_standalone": false,
        "description": "(takes children): An individual item in the navigation menu, representing a folder or label. "
      }
    ],
    "main_html": "<NavigationMenu>\n  <MenuSection title=\"Folders\">\n    <MenuItem><FolderIcon /> <span>Inbox</span></MenuItem>\n    <MenuItem><FolderIcon /> <span>Drafts</span></MenuItem>\n    <MenuItem><FolderIcon /> <span>Sent</span></MenuItem>\n    <!-- more folders... -->\n  </MenuSection>\n  <MenuSection title=\"Labels\">\n    <MenuItem><LabelIcon /> <span>Work</span></MenuItem>\n    <MenuItem><LabelIcon /> <span>Personal</span></MenuItem>\n    <MenuItem><LabelIcon /> <span>Urgent</span></MenuItem>\n    <!-- more labels... -->\n  </MenuSection>\n</NavigationMenu>\n",
    "component_html": [
      {
        "name": "NavigationMenu",
        "html": "<nav class=\"flex flex-col w-64 bg-gray-200 h-screen p-4\">  {children}</nav>"
      },
      {
        "name": "MenuSection",
        "html": "<section class=\"mb-4\">  <h2 class=\"text-lg font-semibold\">{title}</h2>  <ul class=\"list-none mb-0\">    {children}  </ul></section>"
      },
      {
        "name": "MenuItem",
        "html": "<li class=\"flex items-center py-2 pl-4 pr-2 hover:bg-gray-300\">  {children}</li>"
      }
    ]
  },
  {
    "description": "A list of emails with sender and subject information.",
    "component_list": [
      {
        "name": "EmailListItem",
        "is_standalone": true,
        "description": "(stands alone) "
      },
      {
        "name": "EmailList",
        "is_standalone": false,
        "description": "(takes children) "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Emails</h2>\n  <EmailList>\n    <EmailListItem />\n    <EmailListItem />\n    <!-- more EmailListItem components here -->\n  </EmailList>\n</div>\n",
    "component_html": [
      {
        "name": "EmailListItem",
        "html": "<div className=\"flex items-center justify-between p-2 border-b border-gray-200\">  <div>    <span className=\"text-sm\">{sender}</span>    <span className=\"text-xs text-gray-500\">{timestamp}</span>  </div>  <div>    <span className=\"text-lg\">{subject}</span>  </div></div>"
      },
      {
        "name": "EmailList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display an individual email thread with reply buttons, showing the email's sender, subject, and content, along with buttons to reply to or delete the email.",
    "component_list": [
      {
        "name": "EmailThreadHeader",
        "is_standalone": true,
        "description": "standalone, displays email sender and subject "
      },
      {
        "name": "EmailContent",
        "is_standalone": true,
        "description": "standalone, displays email content "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "standalone, displays a reply button "
      },
      {
        "name": "DeleteButton",
        "is_standalone": true,
        "description": "standalone, displays a delete button "
      },
      {
        "name": "EmailThread",
        "is_standalone": false,
        "description": "takes children, wraps the entire email thread "
      }
    ],
    "main_html": "<EmailThread>\n  <EmailThreadHeader/>\n  <EmailContent/>\n  <ReplyButton/>\n  <DeleteButton/>\n</EmailThread>\n",
    "component_html": [
      {
        "name": "EmailThreadHeader",
        "html": "<div class=\"flex justify-between\">  <p>{sender}</p>  <p>{subject}</p></div>"
      },
      {
        "name": "EmailContent",
        "html": "<div>  <p>{content}</p></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
      },
      {
        "name": "DeleteButton",
        "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Delete</button>"
      },
      {
        "name": "EmailThread",
        "html": "<div class=\"bg-white rounded shadow-md p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A simple attachment upload button with a file browser dialog that opens when clicked.",
    "component_list": [
      {
        "name": "AttachmentUploadButton",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "FileBrowserDialog",
        "is_standalone": false,
        "description": "(takes children) "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <AttachmentUploadButton/>\n  <FileBrowserDialog>\n    <!-- file browser dialog content will be inserted here -->\n  </FileBrowserDialog>\n</div>\n",
    "component_html": [
      {
        "name": "AttachmentUploadButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Attach File  <input type=\"file\" class=\"hidden\" id=\"{input_id}\"/>  <label for=\"{input_id}\" class=\"cursor-pointer\">Browse</label></button>"
      },
      {
        "name": "FileBrowserDialog",
        "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center\">  <div class=\"bg-white p-4 rounded\">    <h2 class=\"text-lg font-bold\">Select a file</h2>    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "A list of contacts, each with an avatar, name, and online status indicator.",
    "component_list": [
      {
        "name": "ContactListItem",
        "is_standalone": true,
        "description": "(standalone): Represents a single contact in the list. "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "(standalone): Displays an avatar image. "
      },
      {
        "name": "OnlineStatusIndicator",
        "is_standalone": true,
        "description": "(standalone): Displays an online status indicator (e.g., a green dot). "
      }
    ],
    "main_html": "<ul class=\"flex flex-col\">\n  <ContactListItem />\n  <ContactListItem />\n  <!-- more contact list items -->\n</ul>\n",
    "component_html": [
      {
        "name": "ContactListItem",
        "html": "<li class=\"flex py-2\">  <Avatar src=\"{avatar_url}\" />  <div class=\"ml-2\">    <p class=\"text-lg\">{name}</p>    <OnlineStatusIndicator online={online_status} />  </div></li>"
      },
      {
        "name": "Avatar",
        "html": "<img src=\"{src}\" alt=\"{alt}\" class=\"w-8 h-8 rounded-full\" />"
      },
      {
        "name": "OnlineStatusIndicator",
        "html": "<span class=\"inline-block w-2 h-2 rounded-full {online ? 'bg-green-500' : 'bg-red-500'}\" />"
      }
    ]
  },
  {
    "description": "The UI should be a settings icon with a dropdown menu that appears when the icon is clicked. The dropdown menu should have multiple options.",
    "component_list": [
      {
        "name": "SettingsIcon",
        "is_standalone": true,
        "description": "standalone component that renders the settings icon "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "component that takes children, which are the dropdown menu options "
      },
      {
        "name": "DropdownMenuItem",
        "is_standalone": true,
        "description": "standalone component that renders a single dropdown menu option "
      }
    ],
    "main_html": "<div className=\"relative inline-block\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "SettingsIcon",
        "html": "<i className=\"fas fa-cog text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\" />"
      },
      {
        "name": "DropdownMenu",
        "html": "<div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  {children}</div>"
      },
      {
        "name": "DropdownMenuItem",
        "html": "<a href=\"#\" className=\"block px-4 py-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">  {menuItemLabel}</a>"
      }
    ]
  },
  {
    "description": "A notification bell icon with a red badge displaying the number of unread notifications.",
    "component_list": [
      {
        "name": "NotificationBell",
        "is_standalone": true,
        "description": "standalone component that displays a notification bell icon with a badge. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "standalone component that displays a small, rounded badge with a number. "
      }
    ],
    "main_html": "<button>\n  <NotificationBell />\n</button>\n",
    "component_html": [
      {
        "name": "NotificationBell",
        "html": "<i className=\"fas fa-bell text-lg text-gray-600\"></i><Badge>{unread_count}</Badge>"
      },
      {
        "name": "Badge",
        "html": "<div className=\"bg-red-500 text-white text-xs rounded-full w-4 h-4 flex justify-center items-center\">{children}</div>"
      }
    ]
  },
  {
    "description": "A profile picture with a dropdown menu that appears when the profile picture is clicked. The dropdown menu should contain several options.",
    "component_list": [
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "(takes children) "
      },
      {
        "name": "MenuItem",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex justify-end\">\n  <ProfilePicture/>\n  <DropdownMenu>\n    <MenuItem />\n    <MenuItem />\n    <MenuItem />\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "ProfilePicture",
        "html": "<img src={profile_picture_url} class=\"w-8 h-8 rounded-full cursor-pointer\" />"
      },
      {
        "name": "DropdownMenu",
        "html": "<div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  {children}</div>"
      },
      {
        "name": "MenuItem",
        "html": "<a href={menu_item_url} class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">  {menu_item_text}</a>"
      }
    ]
  },
  {
    "description": "The UI should resemble a file explorer interface, with a list of folders and labels on the left, and a workspace on the right to manage the selected folder or label.",
    "component_list": [
      {
        "name": "FolderTree",
        "is_standalone": true,
        "description": "(standalone): a hierarchical list of folders "
      },
      {
        "name": "LabelList",
        "is_standalone": true,
        "description": "(standalone): a list of labels "
      },
      {
        "name": "FolderWorkspace",
        "is_standalone": false,
        "description": "(takes children): a workspace to manage the selected folder "
      },
      {
        "name": "LabelWorkspace",
        "is_standalone": false,
        "description": "(takes children): a workspace to manage the selected label "
      },
      {
        "name": "Breadcrumb",
        "is_standalone": true,
        "description": "(standalone): a breadcrumb trail to show the current folder or label path "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <div class=\"w-1/3 bg-gray-100 p-4\">\n    <FolderTree />\n    <LabelList />\n  </div>\n  <div class=\"w-2/3 p-4\">\n    <Breadcrumb />\n    {selectedFolderOrLabel === 'folder' ? <FolderWorkspace /> : <LabelWorkspace />}\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "FolderTree",
        "html": "<ul class=\"list-none pl-0 mb-4\">  {folders.map((folder) => (    <li key={folder.id} class=\"py-2 pl-4\">      <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{folder.name}</a>      {folder.children ? <FolderTree folders={folder.children} /> : null}    </li>  ))}</ul>"
      },
      {
        "name": "LabelList",
        "html": "<ul class=\"list-none pl-0 mb-4\">  {labels.map((label) => (    <li key={label.id} class=\"py-2 pl-4\">      <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label.name}</a>    </li>  ))}</ul>"
      },
      {
        "name": "FolderWorkspace",
        "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{selectedFolder.name}</h2>  <p class=\"text-gray-600\">{selectedFolder.description}</p>  {children}</div>"
      },
      {
        "name": "LabelWorkspace",
        "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{selectedLabel.name}</h2>  <p class=\"text-gray-600\">{selectedLabel.description}</p>  {children}</div>"
      },
      {
        "name": "Breadcrumb",
        "html": "<nav class=\"flex mb-4\">  <ol class=\"list-none flex\">    {breadcrumbTrail.map((crumb, idx) => (      <li key={idx} class=\"mr-2\">        <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{crumb.name}</a>      </li>    ))}  </ol></nav>"
      }
    ]
  },
  {
    "description": "The UI should be a dropdown menu with filtering and sorting options for emails. The menu should have a heading, followed by filtering options (e.g., \"unread\", \"starred\", \"all\"), and then sorting options (e.g., \"date\", \"priority\").",
    "component_list": [
      {
        "name": "EmailFilterMenu",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "FilterOption",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "SortingOption",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<div className=\"absolute top-0 right-0 z-10 w-48 bg-white rounded shadow-md\">\n  <h5 className=\"px-4 py-2 text-sm font-bold\">Filter and sort emails</h5>\n  <EmailFilterMenu>\n    <FilterOption>Unread</FilterOption>\n    <FilterOption>Starred</FilterOption>\n    <FilterOption>All</FilterOption>\n  </EmailFilterMenu>\n  <hr className=\"mx-4 border-b\" />\n  <h5 className=\"px-4 py-2 text-sm font-bold\">Sort by</h5>\n  <SortingOption>Date</SortingOption>\n  <SortingOption>Priority</SortingOption>\n  <!-- more sorting options here -->\n</div>\n",
    "component_html": [
      {
        "name": "EmailFilterMenu",
        "html": "<div className=\"flex flex-col\">{children}</div>"
      },
      {
        "name": "FilterOption",
        "html": "<button className=\"block w-full px-4 py-2 text-left text-sm\">{children}</button>"
      },
      {
        "name": "SortingOption",
        "html": "<button className=\"block w-full px-4 py-2 text-left text-sm\">{children}</button>"
      }
    ]
  },
  {
    "description": "A text editor with a toolbar containing formatting tools such as Bold, Italic, Underline, and a text area to input content.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Editor",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "FormatButton",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "EditorBody",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div className=\"flex flex-col w-full h-screen\">\n  <Toolbar />\n  <Editor>\n    <EditorBody />\n  </Editor>\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<div className=\"flex justify-between p-2 bg-gray-200\">  <FormatButton iconName=\"bold\" />  <FormatButton iconName=\"italic\" />  <FormatButton iconName=\"underline\" />  <!-- Add more format buttons here --></div>"
      },
      {
        "name": "Editor",
        "html": "<div className=\"flex-1 overflow-y-auto p-2\">  {children}</div>"
      },
      {
        "name": "FormatButton",
        "html": "<button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i className={`fas fa-${iconName}`} /></button>"
      },
      {
        "name": "EditorBody",
        "html": "<textarea className=\"w-full h-full p-2 overflow-y-auto\" />"
      }
    ]
  },
  {
    "description": "A text input field with a dropdown list that appears below it, displaying a list of suggested recipients as the user types.",
    "component_list": [
      {
        "name": "AutoCompleteInput",
        "is_standalone": true,
        "description": "standalone component, a text input field that triggers the dropdown list. "
      },
      {
        "name": "RecipientItem",
        "is_standalone": false,
        "description": "takes children, a single item in the dropdown list, displaying a recipient's name and email. "
      },
      {
        "name": "RecipientList",
        "is_standalone": false,
        "description": "takes children, the dropdown list of suggested recipients. "
      }
    ],
    "main_html": "<div className=\"flex flex-col w-full\">\n  <AutoCompleteInput />\n  <RecipientList>\n    <!-- list of recipient items -->\n  </RecipientList>\n</div>\n",
    "component_html": [
      {
        "name": "AutoCompleteInput",
        "html": "<input type=\"text\" className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\" />"
      },
      {
        "name": "RecipientItem",
        "html": "<div className=\"flex justify-between px-4 py-2 hover:bg-gray-100\">  <span>{recipientName}</span>  <span>{recipientEmail}</span></div>"
      },
      {
        "name": "RecipientList",
        "html": "<ul className=\"bg-white border border-gray-200 rounded-lg absolute w-full\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A horizontal row with two adjacent buttons, a \"Send\" button and a \"Save Draft\" button.",
    "component_list": [
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "SaveDraftButton",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex justify-end\">\n  <SendButton/>\n  <SaveDraftButton class=\"ml-2\"/>\n</div>\n",
    "component_html": [
      {
        "name": "SendButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Send</button>"
      },
      {
        "name": "SaveDraftButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Save Draft</button>"
      }
    ]
  },
  {
    "description": "A user interface for editing an email signature with various formatting options. The UI should have a text area for editing the signature, and a toolbar above the text area with buttons for formatting options such as bold, italic, underline, font size, font family, and text color.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "(standalone) - A horizontal bar with formatting option buttons. "
      },
      {
        "name": "FormattingButton",
        "is_standalone": true,
        "description": "(standalone) - A button for a specific formatting option (e.g. bold, italic, underline). "
      },
      {
        "name": "SignatureEditor",
        "is_standalone": false,
        "description": "(takes children) - A text area for editing the email signature. "
      },
      {
        "name": "ColorPicker",
        "is_standalone": true,
        "description": "(standalone) - A dropdown menu for selecting a text color. "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <SignatureEditor>\n    <textarea class=\"w-full h-full p-2\" value={signature_text}></textarea>\n  </SignatureEditor>\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<div class=\"flex justify-center mb-2\">  <FormattingButton icon=\"bold\" />  <FormattingButton icon=\"italic\" />  <FormattingButton icon=\"underline\" />  <select class=\"px-2 py-1\" value={font_size}>    <option value=\"10\">10px</option>    <option value=\"12\">12px</option>    <option value=\"14\">14px</option>  </select>  <select class=\"px-2 py-1\" value={font_family}>    <option value=\"Arial\">Arial</option>    <option value=\"Calibri\">Calibri</option>    <option value=\"Times New Roman\">Times New Roman</option>  </select>  <ColorPicker /></div>"
      },
      {
        "name": "FormattingButton",
        "html": "<button class=\"px-2 py-1\">{icon}</button>"
      },
      {
        "name": "SignatureEditor",
        "html": "<div class=\"flex-1\">{children}</div>"
      },
      {
        "name": "ColorPicker",
        "html": "<div class=\"relative\">  <button class=\"px-2 py-1\">Select color</button>  <div class=\"absolute bg-white border shadow-md\">    <div class=\"flex flex-wrap\">      <div class=\"w-6 h-6 bg-red-500\" />      <div class=\"w-6 h-6 bg-blue-500\" />      <!-- more colors -->    </div>  </div></div>"
      }
    ]
  },
  {
    "description": "A interactive project timeline visualization tool that displays a horizontal timeline with key milestones and events. The timeline should have a scrollable interface to accommodate a large number of events.",
    "component_list": [
      {
        "name": "ProjectTimeline",
        "is_standalone": true,
        "description": "The main component that renders the entire timeline (standalone) "
      },
      {
        "name": "TimelineHeader",
        "is_standalone": true,
        "description": "Displays the timeline header with labels for each section (standalone) "
      },
      {
        "name": "TimelineSection",
        "is_standalone": true,
        "description": "Represents a section of the timeline with a label and a horizontal line (standalone) "
      },
      {
        "name": "EventCard",
        "is_standalone": false,
        "description": "Displays a single event or milestone on the timeline (takes children) "
      },
      {
        "name": "EventMarker",
        "is_standalone": true,
        "description": "A small circle marker indicating an event on the timeline (standalone) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <ProjectTimeline>\n    <TimelineHeader />\n    <div class=\"timeline\">\n      <TimelineSection label=\"Planning\" />\n      <TimelineSection label=\"Design\" />\n      <TimelineSection label=\"Development\" />\n      <TimelineSection label=\"Testing\" />\n      <TimelineSection label=\"Deployment\" />\n    </div>\n  </ProjectTimeline>\n</div>\n",
    "component_html": [
      {
        "name": "ProjectTimeline",
        "html": "<div class=\"flex flex-col h-screen overflow-y-auto\">  <div class=\"px-4 py-2\">{children}</div></div>"
      },
      {
        "name": "TimelineHeader",
        "html": "<div class=\"flex justify-between mb-2\">  <span class=\"text-sm\">Start Date</span>  <span class=\"text-sm\">End Date</span></div>"
      },
      {
        "name": "TimelineSection",
        "html": "<div class=\"flex items-center py-2\">  <span class=\"text-sm\">{label}</span>  <div class=\"h-px flex-1 bg-gray-200\"></div></div>"
      },
      {
        "name": "EventCard",
        "html": "<div class=\"bg-white shadow-md p-2 rounded\">  <h3 class=\"text-lg\">{children}</h3>  <p class=\"text-sm\">{description}</p></div>"
      },
      {
        "name": "EventMarker",
        "html": "<div class=\"w-4 h-4 bg-blue-500 rounded-full\"></div>"
      }
    ]
  },
  {
    "description": "The UI should display a hierarchical navigation system for a repository, with a tree-like structure showing folders and files.",
    "component_list": [
      {
        "name": "RepositoryNavigation",
        "is_standalone": true,
        "description": "standalone component that contains the entire navigation system "
      },
      {
        "name": "FolderNode",
        "is_standalone": true,
        "description": "standalone component that represents a folder in the repository "
      },
      {
        "name": "FileNode",
        "is_standalone": true,
        "description": "standalone component that represents a file in the repository "
      },
      {
        "name": "NavigationItem",
        "is_standalone": false,
        "description": "takes children, represents a single item in the navigation system (either a folder or file) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto py-4\">\n  <RepositoryNavigation>\n    <NavigationItem>\n      <FolderNode name={folder_name_1}>\n        <NavigationItem>\n          <FolderNode name={folder_name_2}>\n            <NavigationItem>\n              <FileNode name={file_name_1} />\n            </NavigationItem>\n            <NavigationItem>\n              <FileNode name={file_name_2} />\n            </NavigationItem>\n          </FolderNode>\n        </NavigationItem>\n        <NavigationItem>\n          <FileNode name={file_name_3} />\n        </NavigationItem>\n      </FolderNode>\n    </NavigationItem>\n  </RepositoryNavigation>\n</div>\n",
    "component_html": [
      {
        "name": "RepositoryNavigation",
        "html": "<nav class=\"flex flex-col\">  {children}</nav>"
      },
      {
        "name": "FolderNode",
        "html": "<div class=\"flex items-center mb-2\">  <i class=\"fa fa-folder mr-2 text-gray-400\" />  <span class=\"text-lg\">{name}</span>  <div class=\"ml-2\">{children}</div></div>"
      },
      {
        "name": "FileNode",
        "html": "<div class=\"flex items-center mb-2\">  <i class=\"fa fa-file mr-2 text-gray-400\" />  <span class=\"text-lg\">{name}</span></div>"
      },
      {
        "name": "NavigationItem",
        "html": "<div class=\"ml-4\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a table-based permission management system that displays a list of collaborators, their respective permissions, and buttons to edit or remove their permissions.",
    "component_list": [
      {
        "name": "CollaboratorList",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "CollaboratorRow",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "PermissionCell",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "EditButton",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "RemoveButton",
        "is_standalone": true,
        "description": "standalone "
      }
    ],
    "main_html": "<table className=\"w-full\">\n  <thead>\n    <tr>\n      <th className=\"px-4 py-2\">Name</th>\n      <th className=\"px-4 py-2\">Permissions</th>\n      <th className=\"px-4 py-2\">Actions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <CollaboratorRow />\n    <!-- repeat for each collaborator -->\n  </tbody>\n</table>\n",
    "component_html": [
      {
        "name": "CollaboratorRow",
        "html": "<tr>  <td className=\"px-4 py-2\">{collaborator_name}</td>  <td className=\"px-4 py-2\">    <PermissionCell />    <!-- repeat for each permission -->  </td>  <td className=\"px-4 py-2\">    <EditButton />    <RemoveButton />  </td></tr>"
      },
      {
        "name": "PermissionCell",
        "html": "<span className=\"px-2\">{permission_name}</span>"
      },
      {
        "name": "EditButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit</button>"
      },
      {
        "name": "RemoveButton",
        "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Remove</button>"
      }
    ]
  },
  {
    "description": "A scrolling discussion forum with real-time comments, where users can post and read comments. The UI should display the latest comments at the top, with the ability to paginate through older comments. Each comment should display the author's username, comment text, and timestamp.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "Container component that holds all comments, standalone. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "Component that displays a single comment, takes children. "
      },
      {
        "name": "CommentHeader",
        "is_standalone": true,
        "description": "Component that displays the author's username and timestamp, standalone. "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "Component that displays the comment text, standalone. "
      },
      {
        "name": "Pagination",
        "is_standalone": true,
        "description": "Component that displays pagination controls, standalone. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto pt-4 pb-8\">\n  <CommentThread>\n    {comments.map(comment => (\n      <Comment key={comment.id}>\n        <CommentHeader>\n          <span>{comment.author.username}</span>\n          <span>{comment.timestamp}</span>\n        </CommentHeader>\n        <CommentText>\n          <p>{comment.text}</p>\n        </CommentText>\n      </Comment>\n    ))}\n  </CommentThread>\n  <Pagination>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Prev</button>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Next</button>\n  </Pagination>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"flex flex-col pt-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex mb-4\">  <img src=\"{author.avatar}\" alt={author.username} class=\"w-8 h-8 rounded-full mr-4\" />  <div class=\"flex-1\">    {children}  </div></div>"
      },
      {
        "name": "CommentHeader",
        "html": "<div class=\"flex mb-2\">  <span class=\"text-gray-600\">{author.username}</span>  <span class=\"text-gray-600\">{timestamp}</span></div>"
      },
      {
        "name": "CommentText",
        "html": "<p class=\"text-gray-800\">{children}</p>"
      },
      {
        "name": "Pagination",
        "html": "<div class=\"flex justify-center mt-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a personalized dashboard with project insights, including a greeting, a list of projects, and key metrics for each project.",
    "component_list": [
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "standalone, displays a greeting and navigation "
      },
      {
        "name": "ProjectList",
        "is_standalone": false,
        "description": "takes children, displays a list of projects "
      },
      {
        "name": "ProjectCard",
        "is_standalone": false,
        "description": "takes children, displays key metrics for a single project "
      },
      {
        "name": "MetricBadge",
        "is_standalone": true,
        "description": "standalone, displays a single key metric (e.g., \"Tasks: 10\") "
      }
    ],
    "main_html": "<div class=\"h-screen flex flex-col\">\n  <DashboardHeader />\n  <div class=\"flex-1 overflow-y-auto p-4\">\n    <ProjectList>\n      <ProjectCard>\n        <!-- project metrics here -->\n      </ProjectCard>\n      <ProjectCard>\n        <!-- project metrics here -->\n      </ProjectCard>\n      <!-- more project cards here -->\n    </ProjectList>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "DashboardHeader",
        "html": "<div class=\"bg-gray-100 p-4 shadow-md\">  <h1 class=\"text-2xl font-bold\">Welcome, {username}!</h1>  <nav class=\"flex justify-end\">    <a class=\"text-gray-600 hover:text-gray-900\" href=\"#\">Settings</a>  </nav></div>"
      },
      {
        "name": "ProjectList",
        "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
      },
      {
        "name": "ProjectCard",
        "html": "<li class=\"p-4 hover:bg-gray-100\">  <h2 class=\"text-lg font-bold\">{project_name}</h2>  <ul class=\"flex flex-wrap\">    <MetricBadge>Tasks: {task_count}</MetricBadge>    <MetricBadge>Due: {due_date}</MetricBadge>  </ul>  <p class=\"text-gray-600\">{project_description}</p></li>"
      },
      {
        "name": "MetricBadge",
        "html": "<span class=\"bg-gray-200 p-1 rounded\">{children}</span>"
      }
    ]
  },
  {
    "description": "A rectangular box with a dashed border, a label that says \"Drag and drop files here\" and a \"Browse\" button. When files are selected or dropped, the component should display a list of uploaded files.",
    "component_list": [
      {
        "name": "FileUploaderContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the file uploader. "
      },
      {
        "name": "UploaderLabel",
        "is_standalone": true,
        "description": "(standalone): The label that says \"Drag and drop files here\". "
      },
      {
        "name": "BrowseButton",
        "is_standalone": true,
        "description": "(standalone): The \"Browse\" button. "
      },
      {
        "name": "UploadedFilesList",
        "is_standalone": false,
        "description": "(takes children): A list of uploaded files. "
      },
      {
        "name": "UploadedFile",
        "is_standalone": true,
        "description": "(standalone): An individual uploaded file item. "
      }
    ],
    "main_html": "<div class=\"bg-gray-100 border-2 border-dashed border-gray-400 p-4 rounded\">\n  <UploaderLabel />\n  <BrowseButton />\n  <UploadedFilesList>\n    <!-- child components will be rendered here -->\n  </UploadedFilesList>\n</div>\n",
    "component_html": [
      {
        "name": "FileUploaderContainer",
        "html": "<div class=\"bg-gray-100 border-2 border-dashed border-gray-400 p-4 rounded\">  {children}</div>"
      },
      {
        "name": "UploaderLabel",
        "html": "<p class=\"text-lg text-gray-600\">Drag and drop files here</p>"
      },
      {
        "name": "BrowseButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Browse</button>"
      },
      {
        "name": "UploadedFilesList",
        "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "UploadedFile",
        "html": "<li class=\"mb-2\">  <p class=\"text-gray-600\">{filename}</p>  <p class=\"text-sm text-gray-400\">{filesize} bytes</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a main editor area with a sidebar containing a table of contents and a search bar. The editor area should have a header with a title, breadcrumbs, and action buttons. The sidebar should be collapsible.",
    "component_list": [
      {
        "name": "Sidebar",
        "is_standalone": true,
        "description": "(standalone) - Contains a table of contents and a search bar. "
      },
      {
        "name": "EditorHeader",
        "is_standalone": true,
        "description": "(standalone) - Header component with a title, breadcrumbs, and action buttons. "
      },
      {
        "name": "EditorArea",
        "is_standalone": false,
        "description": "(takes children) - Main editor area where content is displayed. "
      },
      {
        "name": "ActionBar",
        "is_standalone": true,
        "description": "(standalone) - Container for action buttons. "
      },
      {
        "name": "Breadcrumb",
        "is_standalone": true,
        "description": "(standalone) - Single breadcrumb item. "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) - Search input field. "
      },
      {
        "name": "TableOfContents",
        "is_standalone": false,
        "description": "(takes children) - Container for table of contents items. "
      },
      {
        "name": "TOCItem",
        "is_standalone": true,
        "description": "(standalone) - Single table of contents item. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <Sidebar/>\n  <div class=\"flex-1 overflow-y-auto\">\n    <EditorHeader/>\n    <EditorArea>\n      <!-- Editor content will be rendered here -->\n    </EditorArea>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "Sidebar",
        "html": "<div class=\"hidden md:block bg-gray-100 w-64 h-screen p-4 overflow-y-auto\">  <SearchBar/>  <TableOfContents>    <!-- TOC items will be rendered here -->  </TableOfContents></div>"
      },
      {
        "name": "EditorHeader",
        "html": "<div class=\"bg-white shadow-md p-4\">  <h1 class=\"text-2xl\">{title}</h1>  <div class=\"flex items-center\">    <Breadcrumb/>    <ActionBar/>  </div></div>"
      },
      {
        "name": "EditorArea",
        "html": "<div class=\"p-4 overflow-y-auto\">{children}</div>"
      },
      {
        "name": "ActionBar",
        "html": "<div class=\"flex items-center\">  <button class=\"btn btn-primary\">Save</button>  <button class=\"btn btn-secondary\">Cancel</button></div>"
      },
      {
        "name": "Breadcrumb",
        "html": "<a href=\"#\" class=\"text-gray-600\">{breadcrumb_label}</a>"
      },
      {
        "name": "SearchBar",
        "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\"/>"
      },
      {
        "name": "TableOfContents",
        "html": "<ul class=\"list-none\">{children}</ul>"
      },
      {
        "name": "TOCItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <a href=\"#\" class=\"text-gray-600\">{toc_item_label}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information, including their username, profile picture, reputation score, and badges. The reputation score should be prominently displayed, and the badges should be displayed in a grid or list.",
    "component_list": [
      {
        "name": "UserProfileHeader",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile picture and username. "
      },
      {
        "name": "ReputationScore",
        "is_standalone": true,
        "description": "Standalone component that displays the user's reputation score. "
      },
      {
        "name": "BadgeGrid",
        "is_standalone": false,
        "description": "Component that takes children, which are `Badge` components. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "Standalone component that displays a single badge. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <UserProfileHeader />\n  <div class=\"ml-4\">\n    <ReputationScore />\n    <BadgeGrid>\n      <Badge />\n      <Badge />\n      <!-- More badges here -->\n    </BadgeGrid>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileHeader",
        "html": "<div class=\"flex items-center\">  <img src=\"{profile_picture_url}\" alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full\" />  <h2 class=\"ml-2 text-lg\">{username}</h2></div>"
      },
      {
        "name": "ReputationScore",
        "html": "<h3 class=\"text-lg font-bold\">{reputation_score} Reputation</h3>"
      },
      {
        "name": "BadgeGrid",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      },
      {
        "name": "Badge",
        "html": "<li class=\"mr-2 mb-2\">  <img src=\"{badge_image_url}\" alt=\"Badge\" class=\"w-8 h-8\" />  <span class=\"text-sm\">{badge_name}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a search bar at the top, followed by a filter section with dropdowns for filtering by language, license, and stars. Below the filter section, a list of repository cards should be displayed, each showing the repository name, description, language, and stars.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone): A text input for searching repositories. "
      },
      {
        "name": "FilterSection",
        "is_standalone": true,
        "description": "(standalone): A section containing dropdowns for filtering by language, license, and stars. "
      },
      {
        "name": "RepositoryCard",
        "is_standalone": false,
        "description": "(takes children): A card displaying information about a single repository. "
      },
      {
        "name": "RepositoryList",
        "is_standalone": false,
        "description": "(takes children): A container for displaying a list of repository cards. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <FilterSection />\n  <RepositoryList>\n    <!-- Repository cards will be inserted here -->\n  </RepositoryList>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center mb-4\">  <input type=\"text\" class=\"w-full px-4 py-2\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4\">Search</button></div>"
      },
      {
        "name": "FilterSection",
        "html": "<div class=\"mb-4\">  <div class=\"flex justify-between mb-2\">    <label>Language:</label>    <select class=\"bg-gray-200 border border-gray-200 text-gray-700 py-2 px-4 pr-8\">      <option value=\"\">All</option>      <!-- Options will be inserted here -->    </select>  </div>  <div class=\"flex justify-between mb-2\">    <label>License:</label>    <select class=\"bg-gray-200 border border-gray-200 text-gray-700 py-2 px-4 pr-8\">      <option value=\"\">All</option>      <!-- Options will be inserted here -->    </select>  </div>  <div class=\"flex justify-between mb-2\">    <label>Stars:</label>    <select class=\"bg-gray-200 border border-gray-200 text-gray-700 py-2 px-4 pr-8\">      <option value=\"\">All</option>      <!-- Options will be inserted here -->    </select>  </div></div>"
      },
      {
        "name": "RepositoryCard",
        "html": "<div class=\"bg-white p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p>  <p class=\"text-gray-600\">Stars: {repository_stars}</p></div>"
      },
      {
        "name": "RepositoryList",
        "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of commits with their corresponding authors, dates, and commit messages. Each commit should have a \"Blame\" button that, when clicked, shows a blame view with the commit history for that file.",
    "component_list": [
      {
        "name": "CommitHistoryList",
        "is_standalone": true,
        "description": "(standalone): displays a list of commits "
      },
      {
        "name": "Commit",
        "is_standalone": false,
        "description": "(takes children): represents a single commit with its details "
      },
      {
        "name": "BlameButton",
        "is_standalone": true,
        "description": "(standalone): a button to toggle the blame view "
      },
      {
        "name": "BlameView",
        "is_standalone": false,
        "description": "(takes children): displays the commit history for a file "
      },
      {
        "name": "CommitHistoryItem",
        "is_standalone": false,
        "description": "(takes children): a single item in the commit history list "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <CommitHistoryList>\n    {/* List of commits will be rendered here */}\n  </CommitHistoryList>\n</div>\n",
    "component_html": [
      {
        "name": "CommitHistoryList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "Commit",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <div class=\"flex items-center\">    <img src=\"{authorAvatarUrl}\" alt=\"{authorName}\" class=\"w-8 h-8 rounded-full mr-2\" />    <div>      <h2 class=\"text-sm\">{commitMessage}</h2>      <p class=\"text-xs text-gray-600\">{commitDate}</p>    </div>    <BlameButton />  </div></li>"
      },
      {
        "name": "BlameButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Blame</button>"
      },
      {
        "name": "BlameView",
        "html": "<div class=\"bg-white p-4\">  <h2 class=\"text-lg\">Blame View</h2>  <ul class=\"list-none mb-0\">    {children}  </ul></div>"
      },
      {
        "name": "CommitHistoryItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <div class=\"flex items-center\">    <img src=\"{commitAuthorAvatarUrl}\" alt=\"{commitAuthorName}\" class=\"w-8 h-8 rounded-full mr-2\" />    <div>      <h2 class=\"text-sm\">{commitMessage}</h2>      <p class=\"text-xs text-gray-600\">{commitDate}</p>    </div>  </div></li>"
      }
    ]
  },
  {
    "description": "The UI should display a list of pull requests, each with its title, description, and status (e.g. \"Open\", \"In Review\", \"Merged\"). The list should be sorted by the most recent update time. Each pull request item should have buttons to view details, approve, and reject.",
    "component_list": [
      {
        "name": "PullRequestList",
        "is_standalone": true,
        "description": "standalone, displays a list of pull requests "
      },
      {
        "name": "PullRequestItem",
        "is_standalone": false,
        "description": "takes children, displays a single pull request with buttons to view details, approve, and reject "
      },
      {
        "name": "PullRequestDetails",
        "is_standalone": true,
        "description": "standalone, displays detailed information about a pull request "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6\">\n  <h1 class=\"text-3xl font-bold mb-4\">Pull Requests</h1>\n  <PullRequestList/>\n</div>\n",
    "component_html": [
      {
        "name": "PullRequestList",
        "html": "<ul class=\"list-none mb-4\">  {pullRequests.map(pr => (    <PullRequestItem key={pr.id}>{pr.title}</PullRequestItem>  ))}</ul>"
      },
      {
        "name": "PullRequestItem",
        "html": "<li class=\"py-4 border-b border-gray-200\">  <h2 class=\"text-lg\">{children}</h2>  <p class=\"text-gray-600\">{description}</p>  <p class=\"text-gray-600\">{status}</p>  <div class=\"flex justify-end\">    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Details</button>    <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">Approve</button>    <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Reject</button>  </div></li>"
      },
      {
        "name": "PullRequestDetails",
        "html": "<div class=\"max-w-md mx-auto p-4 pt-6\">  <h2 class=\"text-2xl font-bold\">{pr.title}</h2>  <p class=\"text-gray-600\">{pr.description}</p>  <p class=\"text-gray-600\">Updated {pr.updated_at}</p>  <!-- additional details about the pull request --></div>"
      }
    ]
  },
  {
    "description": "A full-width hero header with a background image, containing a heading and a subheading.",
    "component_list": [
      {
        "name": "HeroHeader",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "HeroBackgroundImage",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "HeroHeading",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "HeroSubheading",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<section className=\"h-screen w-full relative\">\n  <HeroBackgroundImage />\n  <div className=\"absolute top-0 left-0 w-full h-full flex items-center justify-center\">\n    <div className=\"max-w-md p-4\">\n      <HeroHeading />\n      <HeroSubheading />\n    </div>\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "HeroBackgroundImage",
        "html": "<img src={backgroundImageUrl} alt=\"Hero Background Image\" className=\"w-full h-screen object-cover\" />"
      },
      {
        "name": "HeroHeading",
        "html": "<h1 className=\"text-4xl font-bold\">{heroHeadingText}</h1>"
      },
      {
        "name": "HeroSubheading",
        "html": "<p className=\"text-lg\">{heroSubheadingText}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a showcase of products with animated cards that flip on hover, revealing additional information about the product on the back side.",
    "component_list": [
      {
        "name": "ProductShowcase",
        "is_standalone": true,
        "description": "standalone component that wraps the entire UI "
      },
      {
        "name": "ProductCard",
        "is_standalone": false,
        "description": "takes children, a single product card with animated flip effect "
      },
      {
        "name": "ProductFront",
        "is_standalone": true,
        "description": "standalone component, the front side of the product card "
      },
      {
        "name": "ProductBack",
        "is_standalone": true,
        "description": "standalone component, the back side of the product card "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap justify-center\">\n  <ProductShowcase>\n    <ProductCard>\n      <!-- product 1 -->\n    </ProductCard>\n    <ProductCard>\n      <!-- product 2 -->\n    </ProductCard>\n    <!-- ... more product cards ... -->\n  </ProductShowcase>\n</div>\n",
    "component_html": [
      {
        "name": "ProductShowcase",
        "html": "<div className=\"max-w-md mx-auto py-12\">  {children}</div>"
      },
      {
        "name": "ProductCard",
        "html": "<div  className=\"w-full md:w-1/2 xl:w-1/3 p-6 transition duration-500 ease-in-out hover:shadow-xl\"  onMouseEnter={(e) => { /* animate flip effect */ }}  onMouseLeave={(e) => { /* animate flip effect */ }}>  <div className=\"relative\">    <ProductFront />    <ProductBack />  </div></div>"
      },
      {
        "name": "ProductFront",
        "html": "<div className=\"bg-white rounded shadow-md p-4\">  <img src={productImage} alt={productName} />  <h2 className=\"text-lg font-bold\">{productName}</h2>  <p>{productDescription}</p></div>"
      },
      {
        "name": "ProductBack",
        "html": "<div className=\"bg-white rounded shadow-md p-4\">  <p>{productLongDescription}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Learn More  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should have a prominent call-to-action (CTA) button section with a bold headline, a brief description, and a prominent CTA button that encourages the user to take action.",
    "component_list": [
      {
        "name": "HeadlineComponent",
        "is_standalone": true,
        "description": "Standalone component that displays a bold headline text. "
      },
      {
        "name": "DescriptionComponent",
        "is_standalone": true,
        "description": "Standalone component that displays a brief descriptive text. "
      },
      {
        "name": "CTAButtonComponent",
        "is_standalone": true,
        "description": "Standalone component that displays a prominent CTA button. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4 pt-6\">\n  <HeadlineComponent/>\n  <DescriptionComponent/>\n  <CTAButtonComponent/>\n</section>\n",
    "component_html": [
      {
        "name": "HeadlineComponent",
        "html": "<h2 class=\"text-3xl font-bold\">{headline_text}</h2>"
      },
      {
        "name": "DescriptionComponent",
        "html": "<p class=\"text-lg\">{description_text}</p>"
      },
      {
        "name": "CTAButtonComponent",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_button_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a customer testimonial with a profile picture, name, and occupation. The profile picture should be circular and have a subtle border. The testimonial text should be in a serif font with a comfortable line height. The name and occupation should be in a sans-serif font with the occupation in a lighter color.",
    "component_list": [
      {
        "name": "TestimonialContainer",
        "is_standalone": true,
        "description": "(standalone): The main container for the testimonial. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "(standalone): The circular profile picture. "
      },
      {
        "name": "TestimonialText",
        "is_standalone": true,
        "description": "(standalone): The text of the testimonial. "
      },
      {
        "name": "UserInfo",
        "is_standalone": false,
        "description": "(takes children): Displays the name and occupation. "
      }
    ],
    "main_html": "<TestimonialContainer>\n  <ProfilePicture src={profile_picture_url} />\n  <UserInfo>\n    <h2>{name}</h2>\n    <p>{occupation}</p>\n  </UserInfo>\n  <TestimonialText>{testimonial_text}</TestimonialText>\n</TestimonialContainer>\n",
    "component_html": [
      {
        "name": "TestimonialContainer",
        "html": "<div className=\"flex flex-col items-center max-w-md p-4 mx-auto\">  {children}</div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src={src} className=\"w-20 h-20 rounded-full border-2 border-gray-200\" />"
      },
      {
        "name": "TestimonialText",
        "html": "<p className=\"text-lg leading-relaxed text-gray-600\">{children}</p>"
      },
      {
        "name": "UserInfo",
        "html": "<div className=\"text-center\">  <h2 className=\"text-lg font-bold\">{children}</h2>  <p className=\"text-lg text-gray-400\">{children}</p></div>"
      }
    ]
  },
  {
    "description": "A split-screen comparison section with two columns, one for each option (e.g., \"Option A\" and \"Option B\"). Each column should have a heading, a description, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "SplitScreenComparisonSection",
        "is_standalone": true,
        "description": "Standalone component that contains two columns. "
      },
      {
        "name": "ComparisonColumn",
        "is_standalone": false,
        "description": "Component that represents a single column, takes children. "
      },
      {
        "name": "ComparisonHeading",
        "is_standalone": true,
        "description": "Standalone component that displays a heading. "
      },
      {
        "name": "ComparisonDescription",
        "is_standalone": true,
        "description": "Standalone component that displays a description. "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "Standalone component that displays a CTA button. "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <SplitScreenComparisonSection>\n    <ComparisonColumn>\n      <ComparisonHeading>Option A</ComparisonHeading>\n      <ComparisonDescription>{option_a_description}</ComparisonDescription>\n      <CallToActionButton>{option_a_cta_text}</CallToActionButton>\n    </ComparisonColumn>\n    <ComparisonColumn>\n      <ComparisonHeading>Option B</ComparisonHeading>\n      <ComparisonDescription>{option_b_description}</ComparisonDescription>\n      <CallToActionButton>{option_b_cta_text}</CallToActionButton>\n    </ComparisonColumn>\n  </SplitScreenComparisonSection>\n</div>\n",
    "component_html": [
      {
        "name": "SplitScreenComparisonSection",
        "html": "<div className=\"flex grow flex-wrap md:flex-nowrap justify-center\">  {children}</div>"
      },
      {
        "name": "ComparisonColumn",
        "html": "<div className=\"md:w-1/2 xl:w-1/2 p-6\">  {children}</div>"
      },
      {
        "name": "ComparisonHeading",
        "html": "<h2 className=\"text-3xl leading-9 font-bold\">{children}</h2>"
      },
      {
        "name": "ComparisonDescription",
        "html": "<p className=\"mt-4 text-lg\">{children}</p>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{children}</button>"
      }
    ]
  },
  {
    "description": "A list of product features, each with a title and description, with a bold title and a smaller text for the description.",
    "component_list": [
      {
        "name": "FeatureList",
        "is_standalone": true,
        "description": "standalone component that renders a list of features "
      },
      {
        "name": "FeatureItem",
        "is_standalone": false,
        "description": "component that takes children (the feature title and description) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <FeatureList>\n    <!-- Each feature item will be rendered here -->\n  </FeatureList>\n</div>\n",
    "component_html": [
      {
        "name": "FeatureList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "FeatureItem",
        "html": "<li class=\"mb-2\">  <h3 class=\"font-bold\">{feature_title}</h3>  <p class=\"text-sm\">{feature_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a statistics section that displays various metrics (e.g. downloads, users, ratings) with animated counters that increment to the final value. The section should have a background color, a title, and each metric should have a label and a value that animates from 0 to the final value.",
    "component_list": [
      {
        "name": "StatisticSection",
        "is_standalone": true,
        "description": "(standalone): the outermost container for the section "
      },
      {
        "name": "StatisticBlock",
        "is_standalone": false,
        "description": "(takes children): a container for each individual metric "
      },
      {
        "name": "AnimatedCounter",
        "is_standalone": false,
        "description": "(takes children): displays the animated counter "
      },
      {
        "name": "MetricLabel",
        "is_standalone": true,
        "description": "(standalone): displays the label for each metric "
      }
    ],
    "main_html": "<section className=\"bg-gray-100 py-20\">\n  <h2 className=\"text-3xl font-bold mb-4\">Statistics</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <StatisticBlock>\n      <MetricLabel>Downloads</MetricLabel>\n      <AnimatedCounter><p>{download_count}+</p></AnimatedCounter>\n    </StatisticBlock>\n    <StatisticBlock>\n      <MetricLabel>Users</MetricLabel>\n      <AnimatedCounter><p>{user_count}+</p></AnimatedCounter>\n    </StatisticBlock>\n    <StatisticBlock>\n      <MetricLabel>Ratings</MetricLabel>\n      <AnimatedCounter><p>{rating_count}+</p></AnimatedCounter>\n    </StatisticBlock>\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "StatisticSection",
        "html": "<div className=\"container mx-auto p-4\">{children}</div>"
      },
      {
        "name": "StatisticBlock",
        "html": "<div className=\"w-full md:w-1/3 xl:w-1/4 p-4\">{children}</div>"
      },
      {
        "name": "AnimatedCounter",
        "html": "<div className=\"text-4xl font-bold\">{children}</div>"
      },
      {
        "name": "MetricLabel",
        "html": "<p className=\"text-lg\">{children}</p>"
      }
    ]
  },
  {
    "description": "A simple and minimalistic footer section with a dark background, white text, and a copyright notice.",
    "component_list": [
      {
        "name": "Footer",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire footer section. "
      },
      {
        "name": "CopyrightNotice",
        "is_standalone": true,
        "description": "Standalone component that displays the copyright notice. "
      }
    ],
    "main_html": "<div className=\"h-screen bg-dark text-white p-4\">\n  <Footer>\n    <CopyrightNotice/>\n  </Footer>\n</div>\n",
    "component_html": [
      {
        "name": "Footer",
        "html": "<div className=\"container mx-auto p-4\">{children}</div>"
      },
      {
        "name": "CopyrightNotice",
        "html": "<p>Copyright {current_year} {website_name}. All rights reserved.</p>"
      }
    ]
  },
  {
    "description": "The UI should be a video background with overlay text, where the video takes up the full height and width of the screen, and the overlay text is centered on top of the video with a subtle background to make it readable.",
    "component_list": [
      {
        "name": "VideoBackground",
        "is_standalone": true,
        "description": "standalone component that renders a full-screen video background "
      },
      {
        "name": "OverlayText",
        "is_standalone": true,
        "description": "standalone component that renders text with a subtle background on top of the video "
      }
    ],
    "main_html": "<div class=\"h-screen w-screen relative\">\n  <VideoBackground/>\n  <OverlayText/>\n</div>\n",
    "component_html": [
      {
        "name": "VideoBackground",
        "html": "<div class=\"absolute top-0 left-0 w-screen h-screen\">  <video autoplay loop muted>    <source src=\"{video_source}\" type=\"video/mp4\" />  </video></div>"
      },
      {
        "name": "OverlayText",
        "html": "<div class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl bg-gray-800 bg-opacity-50 py-4 px-8 rounded\">  {overlay_text}</div>"
      }
    ]
  },
  {
    "description": "A interactive product demo simulation UI with a hero section, features section, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "HeroSection",
        "is_standalone": true,
        "description": "Standalone component "
      },
      {
        "name": "FeatureCard",
        "is_standalone": false,
        "description": "Takes children "
      },
      {
        "name": "CTAButton",
        "is_standalone": true,
        "description": "Standalone component "
      }
    ],
    "main_html": "<div className=\"max-w-7xl mx-auto py-12\">\n  <HeroSection />\n  <div className=\"flex flex-wrap justify-center -mx-4\">\n    <FeatureCard><ComponentName/></FeatureCard>\n    <FeatureCard><ComponentName/></FeatureCard>\n    <FeatureCard><ComponentName/></FeatureName>\n  </div>\n  <CTAButton />\n</div>\n",
    "component_html": [
      {
        "name": "HeroSection",
        "html": "<section className=\"bg-hero bg-cover h-screen flex justify-center items-center\">  <h1 className=\"text-4xl font-bold\">{hero_title}</h1>  <p className=\"text-lg\">{hero_subtitle}</p></section>"
      },
      {
        "name": "FeatureCard",
        "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <img src={feature_icon} alt={feature_name} />  <h3 className=\"text-lg\">{feature_name}</h3>  <p>{feature_description}</p>  {children}</div>"
      },
      {
        "name": "CTAButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a featured story with a large header text, accompanied by a brief summary and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "FeaturedStoryContainer",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the featured story. "
      },
      {
        "name": "LargeHeaderText",
        "is_standalone": true,
        "description": "(standalone): The large header text component. "
      },
      {
        "name": "StorySummary",
        "is_standalone": true,
        "description": "(standalone): The brief summary component. "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "(standalone): The call-to-action button component. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <FeaturedStoryContainer>\n    <LargeHeaderText />\n    <StorySummary />\n    <CallToActionButton />\n  </FeaturedStoryContainer>\n</div>\n",
    "component_html": [
      {
        "name": "FeaturedStoryContainer",
        "html": "<div class=\"bg-white shadow-md rounded px-4 py-6\">  {children}</div>"
      },
      {
        "name": "LargeHeaderText",
        "html": "<h1 class=\"text-3xl font-bold\">{story_title}</h1>"
      },
      {
        "name": "StorySummary",
        "html": "<p class=\"text-lg\">{story_summary}</p>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_text}</button>"
      }
    ]
  },
  {
    "description": "A list of bullet points with icons and text, focusing on the benefits of a particular product or service. The list should be visually appealing and easy to read.",
    "component_list": [
      {
        "name": "BenefitsList",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire list. "
      },
      {
        "name": "BenefitItem",
        "is_standalone": false,
        "description": "Component that takes children (icon, text) and represents a single bullet point. "
      }
    ],
    "main_html": "<BenefitsList>\n  <BenefitItem />\n  <BenefitItem />\n  <BenefitItem />\n</BenefitsList>\n",
    "component_html": [
      {
        "name": "BenefitsList",
        "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "BenefitItem",
        "html": "<li className=\"flex items-center mb-4\">  <Icon name={icon_name} className=\"w-6 h-6 text-primary\" />  <p className=\"ml-4\">{text}</p></li>"
      }
    ]
  },
  {
    "description": "A grid-based product gallery section with multiple product cards, each showcasing a product image, name, price, and a \"Quick View\" button. The section should have a heading and a subtle background image.",
    "component_list": [
      {
        "name": "ProductGallery",
        "is_standalone": true,
        "description": "standalone component, contains the entire product gallery section "
      },
      {
        "name": "ProductCard",
        "is_standalone": true,
        "description": "standalone component, represents a single product card "
      },
      {
        "name": "ProductImage",
        "is_standalone": true,
        "description": "standalone component, displays the product image "
      },
      {
        "name": "ProductInfo",
        "is_standalone": true,
        "description": "standalone component, displays the product name and price "
      },
      {
        "name": "QuickViewButton",
        "is_standalone": true,
        "description": "standalone component, a button for quick view "
      }
    ],
    "main_html": "<section className=\"bg-gray-100 py-20\">\n  <h2 className=\"text-3xl font-bold mb-4\">Product Gallery</h2>\n  <ProductGallery>\n    <ProductCard>\n      <ProductImage/>\n      <ProductInfo/>\n      <QuickViewButton/>\n    </ProductCard>\n    <ProductCard>\n      <ProductImage/>\n      <ProductInfo/>\n      <QuickViewButton/>\n    </ProductCard>\n    <!-- Multiple ProductCard components here -->\n  </ProductGallery>\n</section>\n",
    "component_html": [
      {
        "name": "ProductGallery",
        "html": "<div className=\"container mx-auto p-4 grid grid-cols-3 gap-4\">  {children}</div>"
      },
      {
        "name": "ProductCard",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  {children}</div>"
      },
      {
        "name": "ProductImage",
        "html": "<img src={product_image_url} alt={product_name} className=\"w-full h-48 object-cover rounded-t\"/>"
      },
      {
        "name": "ProductInfo",
        "html": "<div className=\"p-4\">  <h3 className=\"text-lg font-bold\">{product_name}</h3>  <p className=\"text-gray-600\">${product_price}</p></div>"
      },
      {
        "name": "QuickViewButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Quick View</button>"
      }
    ]
  },
  {
    "description": "The UI should display a scroll-activated animation effect. Initially, the animation is hidden, and as the user scrolls down, the animation is triggered and becomes visible. The animation can be a fade-in, slide-in, or any other creative effect.",
    "component_list": [
      {
        "name": "AnimatedSection",
        "is_standalone": true,
        "description": "standalone component that wraps the animation effect. "
      },
      {
        "name": "AnimationTrigger",
        "is_standalone": true,
        "description": "standalone component that triggers the animation when scrolled into view. "
      }
    ],
    "main_html": "<div class=\"h-screen overflow-y-scroll\">\n  <!-- content before the animation -->\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n  <AnimatedSection/>\n  <!-- content after the animation -->\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n</div>\n",
    "component_html": [
      {
        "name": "AnimatedSection",
        "html": "<section class=\"w-full h-64 bg-orange-200 animate-fadeIn\">  <!-- animation content -->  <h2>{animated_title}</h2>  <p>{animated_text}</p></section>"
      },
      {
        "name": "AnimationTrigger",
        "html": "<div class=\"absolute top-0 left-0 w-full h-1 bg-transparent\">  <!-- empty element to trigger the animation --></div>"
      }
    ]
  },
  {
    "description": "The UI should display a carousel of testimonials from happy customers, with each slide featuring a customer's photo, name, quote, and rating (e.g., 5-star rating). The carousel should have navigation controls (e.g., previous and next arrows) to allow users to cycle through the testimonials.",
    "component_list": [
      {
        "name": "TestimonialSlider",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire testimonial slider. "
      },
      {
        "name": "TestimonialSlide",
        "is_standalone": false,
        "description": "Component that represents a single testimonial slide, takes children. "
      },
      {
        "name": "TestimonialAvatar",
        "is_standalone": true,
        "description": "Component that displays the customer's photo, standalone. "
      },
      {
        "name": "TestimonialQuote",
        "is_standalone": true,
        "description": "Component that displays the customer's quote, standalone. "
      },
      {
        "name": "Rating",
        "is_standalone": true,
        "description": "Component that displays the customer's rating (e.g., 5 stars), standalone. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto pt-20\">\n  <TestimonialSlider>\n    <TestimonialSlide>\n      <!-- slide content here -->\n    </TestimonialSlide>\n    <TestimonialSlide>\n      <!-- slide content here -->\n    </TestimonialSlide>\n    <!-- add more slides here -->\n  </TestimonialSlider>\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialSlider",
        "html": "<div className=\"flex flex-col justify-center\">  <!-- navigation controls here -->  <div className=\"flex overflow-x-hidden\">{children}</div>  <!-- navigation controls here --></div>"
      },
      {
        "name": "TestimonialSlide",
        "html": "<div className=\"flex flex-col items-center p-4\">  <TestimonialAvatar />  <TestimonialQuote />  <Rating /></div>"
      },
      {
        "name": "TestimonialAvatar",
        "html": "<img src={avatarUrl} alt={customerName} className=\"w-24 h-24 rounded-full\" />"
      },
      {
        "name": "TestimonialQuote",
        "html": "<blockquote className=\"text-lg italic\">{quoteText}</blockquote>"
      },
      {
        "name": "Rating",
        "html": "<div className=\"flex\">  {stars.map((star, index) => (    <i key={index} className={`fas fa-star ${star ? 'text-yellow-400' : 'text-gray-300'}`} />  ))}</div>"
      }
    ]
  },
  {
    "description": "A carousel of images showcasing a product from multiple angles. The carousel should have navigation buttons to switch between images.",
    "component_list": [
      {
        "name": "ProductImageCarousel",
        "is_standalone": true,
        "description": "(standalone) - the main carousel component "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "(standalone) - navigation buttons for the carousel "
      },
      {
        "name": "ImageSlide",
        "is_standalone": false,
        "description": "(takes children) - a single image slide in the carousel "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <ProductImageCarousel>\n    <ImageSlide><img src=\"{image1}\" alt=\"Product Image 1\" /></ImageSlide>\n    <ImageSlide><img src=\"{image2}\" alt=\"Product Image 2\" /></ImageSlide>\n    <ImageSlide><img src=\"{image3}\" alt=\"Product Image 3\" /></ImageSlide>\n  </ProductImageCarousel>\n  <CarouselNavigation />\n</div>\n",
    "component_html": [
      {
        "name": "ProductImageCarousel",
        "html": "<div class=\"flex flex-nowrap overflow-x-hidden\">  {children}</div>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Prev</button>  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Next</button></div>"
      },
      {
        "name": "ImageSlide",
        "html": "<div class=\"w-full\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The Statistics Section should display impressive metrics and data in a visually appealing way, with clear headings, easy-to-read fonts, and sufficient whitespace to make the numbers stand out.",
    "component_list": [
      {
        "name": "StatisticCard",
        "is_standalone": true,
        "description": "a standalone component that displays a single metric, consisting of a title, value, and optional description. "
      },
      {
        "name": "StatisticsSection",
        "is_standalone": false,
        "description": "a component that takes children, wrapping multiple `StatisticCard`s in a container with a heading. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-3xl font-bold mb-4\">Key Statistics</h2>\n  <StatisticsSection>\n    <StatisticCard/>\n    <StatisticCard/>\n    <StatisticCard/>\n  </StatisticsSection>\n</section>\n",
    "component_html": [
      {
        "name": "StatisticCard",
        "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{statistic_title}</h3>  <p className=\"text-3xl font-bold\">{statistic_value}</p>  <p className=\"text-gray-600\">{statistic_description}</p></div>"
      },
      {
        "name": "StatisticsSection",
        "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a pricing table with multiple plans, each with its own pricing information, features, and a call-to-action button.",
    "component_list": [
      {
        "name": "PricingTable",
        "is_standalone": true,
        "description": "standalone component that contains multiple `PricingPlan` components. "
      },
      {
        "name": "PricingPlan",
        "is_standalone": true,
        "description": "standalone component that displays a single pricing plan with its information and features. "
      },
      {
        "name": "PricingFeature",
        "is_standalone": true,
        "description": "standalone component that displays a single feature of a pricing plan. "
      },
      {
        "name": "CallToAction",
        "is_standalone": true,
        "description": "standalone component that displays a call-to-action button. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto\">\n  <PricingTable>\n    <PricingPlan name=\"Basic\" price={monthly_price}>\n      <PricingFeature>1 GB Storage</PricingFeature>\n      <PricingFeature> Limited Support</PricingFeature>\n      <CallToAction>Sign up</CallToAction>\n    </PricingPlan>\n    <PricingPlan name=\"Pro\" price={monthly_price}>\n      <PricingFeature>10 GB Storage</PricingFeature>\n      <PricingFeature> Priority Support</PricingFeature>\n      <CallToAction>Sign up</CallToAction>\n    </PricingPlan>\n    <PricingPlan name=\"Enterprise\" price={monthly_price}>\n      <PricingFeature>100 GB Storage</PricingFeature>\n      <PricingFeature> Dedicated Support</PricingFeature>\n      <CallToAction>Contact us</CallToAction>\n    </PricingPlan>\n  </PricingTable>\n</div>\n",
    "component_html": [
      {
        "name": "PricingTable",
        "html": "<div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">  {children}</div>"
      },
      {
        "name": "PricingPlan",
        "html": "<div className=\"bg-white rounded shadow-md p-4 mb-4\">  <h5 className=\"uppercase\">{name}</h5>  <p className=\"text-lg\">{price}/month</p>  <ul>    {children}  </ul></div>"
      },
      {
        "name": "PricingFeature",
        "html": "<li className=\"text-gray-600\">{children}</li>"
      },
      {
        "name": "CallToAction",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A horizontal sliders of customer logos with previous and next navigation buttons.",
    "component_list": [
      {
        "name": "CustomerLogos",
        "is_standalone": true,
        "description": "A standalone component that renders the entire customer logos slider. "
      },
      {
        "name": "LogoItem",
        "is_standalone": false,
        "description": "A component that takes children, rendering a single customer logo. "
      },
      {
        "name": "NavigationButton",
        "is_standalone": true,
        "description": "A standalone component that renders a previous or next navigation button. "
      }
    ],
    "main_html": "<div class=\"container mx-auto flex justify-center\">\n  <CustomerLogos>\n    <!-- logos will be rendered here -->\n  </CustomerLogos>\n  <NavigationButton direction=\"prev\" />\n  <NavigationButton direction=\"next\" />\n</div>\n",
    "component_html": [
      {
        "name": "CustomerLogos",
        "html": "<div class=\"flex overflow-x-auto\">  <div class=\"flex flex-nowrap\">{children}</div></div>"
      },
      {
        "name": "LogoItem",
        "html": "<div class=\"mx-4\">  <img src=\"{logo_url}\" alt=\"{company_name}\" class=\"w-32 h-12 object-contain\" /></div>"
      },
      {
        "name": "NavigationButton",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded\">  {direction === 'prev' ? 'Previous' : 'Next'}</button>"
      }
    ]
  },
  {
    "description": "The footer section should be a concise section at the bottom of the page, providing additional resources and links to the user. It should have a clean and simple design, with a dark background and white text.",
    "component_list": [
      {
        "name": "Footer",
        "is_standalone": true,
        "description": "A standalone component that contains all the footer content. "
      },
      {
        "name": "FooterSection",
        "is_standalone": false,
        "description": "A component that groups related links and resources together. Takes children. "
      },
      {
        "name": "FooterLink",
        "is_standalone": true,
        "description": "A standalone component that represents a single link in the footer. "
      },
      {
        "name": "FooterCopyright",
        "is_standalone": true,
        "description": "A standalone component that displays the copyright information. "
      }
    ],
    "main_html": "<footer className=\"bg-gray-800 h-screen pt-12 pb-6\">\n  <div className=\"max-w-md mx-auto px-4\">\n    <FooterSection>\n      <FooterLink href={contact_href}>Contact Us</FooterLink>\n      <FooterLink href={about_href}>About Us</FooterLink>\n    </FooterSection>\n    <FooterSection>\n      <FooterLink href={terms_href}>Terms of Service</FooterLink>\n      <FooterLink href={privacy_href}>Privacy Policy</FooterLink>\n    </FooterSection>\n    <FooterCopyright />\n  </div>\n</footer>\n",
    "component_html": [
      {
        "name": "Footer",
        "html": "<div className=\"footer\">  {children}</div>"
      },
      {
        "name": "FooterSection",
        "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "FooterLink",
        "html": "<a href={href} className=\"text-white hover:text-gray-400\">  {children}</a>"
      },
      {
        "name": "FooterCopyright",
        "html": "<p className=\"text-white text-center\">  &copy; {year} {company_name}. All rights reserved.</p>"
      }
    ]
  },
  {
    "description": "A full-bleed hero section with a background video, overlaying text and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "HeroVideoContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the hero section. "
      },
      {
        "name": "HeroVideo",
        "is_standalone": true,
        "description": "(standalone): The background video element. "
      },
      {
        "name": "HeroOverlay",
        "is_standalone": false,
        "description": "(takes children): A div that overlays the video, containing text and CTA. "
      },
      {
        "name": "HeroCTA",
        "is_standalone": true,
        "description": "(standalone): The call-to-action button. "
      },
      {
        "name": "HeroHeadline",
        "is_standalone": true,
        "description": "(standalone): The main headline text. "
      },
      {
        "name": "HeroSubheading",
        "is_standalone": true,
        "description": "(standalone): The subheading text below the headline. "
      }
    ],
    "main_html": "<div className=\"h-screen w-full flex items-center justify-center\">\n  <HeroVideoContainer>\n    <HeroVideo />\n    <HeroOverlay>\n      <HeroHeadline />\n      <HeroSubheading />\n      <HeroCTA />\n    </HeroOverlay>\n  </HeroVideoContainer>\n</div>\n",
    "component_html": [
      {
        "name": "HeroVideoContainer",
        "html": "<div className=\"absolute inset-0 overflow-hidden\">  {children}</div>"
      },
      {
        "name": "HeroVideo",
        "html": "<video playsInline loop muted autobuffer className=\"object-cover w-full h-full\">  <source src={video_source} type=\"video/mp4\" /></video>"
      },
      {
        "name": "HeroOverlay",
        "html": "<div className=\"absolute inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center\">  {children}</div>"
      },
      {
        "name": "HeroCTA",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_text}</button>"
      },
      {
        "name": "HeroHeadline",
        "html": "<h1 className=\"text-4xl font-bold\">{headline_text}</h1>"
      },
      {
        "name": "HeroSubheading",
        "html": "<p className=\"text-xl\">{subheading_text}</p>"
      }
    ]
  },
  {
    "description": "A carousel that displays multiple screenshots of a product in action. The carousel should have navigation arrows and indicators to navigate through the screenshots.",
    "component_list": [
      {
        "name": "ScreenshotCarouselContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the carousel. "
      },
      {
        "name": "CarouselIndicator",
        "is_standalone": true,
        "description": "(standalone): A single indicator dot to navigate through the screenshots. "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "(standalone): The navigation arrows for the carousel. "
      },
      {
        "name": "ScreenshotSlide",
        "is_standalone": false,
        "description": "(takes children): A single slide in the carousel that displays a screenshot. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <ScreenshotCarouselContainer>\n    <CarouselNavigation />\n    <div className=\"carousel-inner\">\n      <ScreenshotSlide><ComponentName/></ScreenshotSlide>\n      <ScreenshotSlide><ComponentName/></ScreenshotSlide>\n      <!-- Add more ScreenshotSlide components here -->\n    </div>\n    <div className=\"carousel-indicators\">\n      <CarouselIndicator />\n      <CarouselIndicator />\n      <!-- Add more CarouselIndicator components here -->\n    </div>\n  </ScreenshotCarouselContainer>\n</div>\n",
    "component_html": [
      {
        "name": "ScreenshotCarouselContainer",
        "html": "<div className=\"carousel w-full h-full relative\">  {children}</div>"
      },
      {
        "name": "CarouselIndicator",
        "html": "<button className=\"bg-gray-300 w-2 h-2 rounded-full mx-1\"></button>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div className=\"absolute top-0 right-0 p-4\">  <button className=\"text-xl\">‹</button>  <button className=\"text-xl\">›</button></div>"
      },
      {
        "name": "ScreenshotSlide",
        "html": "<div className=\"carousel-item relative\">  <img src={screenshot_url} alt={screenshot_alt} className=\"w-full h-full object-cover\"/>  <div className=\"absolute bottom-0 left-0 p-4 text-white\">{screenshot_caption}</div></div>"
      }
    ]
  },
  {
    "description": "A row of security badges that establish credibility, with each badge representing a different aspect of security.",
    "component_list": [
      {
        "name": "TrustBadgeContainer",
        "is_standalone": true,
        "description": "(standalone): A container that wraps all the trust badges. "
      },
      {
        "name": "TrustBadge",
        "is_standalone": false,
        "description": "(takes children): A single trust badge that displays a logo and a label. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <TrustBadgeContainer>\n    <TrustBadge/><TrustBadge/><TrustBadge/>\n  </TrustBadgeContainer>\n</div>\n",
    "component_html": [
      {
        "name": "TrustBadgeContainer",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "TrustBadge",
        "html": "<div class=\"inline-flex items-center mr-4 mb-4\">  <img src={logo_src} alt={alt_text} class=\"w-6 h-6 mr-2\" />  <span class=\"text-sm\">{label}</span></div>"
      }
    ]
  },
  {
    "description": "A basic header with a site title and navigation links.",
    "component_list": [
      {
        "name": "SiteHeader",
        "is_standalone": true,
        "description": "(standalone) - The overall header component. "
      },
      {
        "name": "SiteTitle",
        "is_standalone": true,
        "description": "(standalone) - The title of the site. "
      },
      {
        "name": "NavLinks",
        "is_standalone": false,
        "description": "(takes children) - A container for navigation links. "
      },
      {
        "name": "NavLink",
        "is_standalone": true,
        "description": "(standalone) - An individual navigation link. "
      }
    ],
    "main_html": "<header className=\"bg-gray-200 py-4\">\n  <SiteTitle />\n  <NavLinks>\n    <NavLink />\n    <NavLink />\n    <!-- Add more NavLink components here -->\n  </NavLinks>\n</header>\n",
    "component_html": [
      {
        "name": "SiteHeader",
        "html": "<header className=\"bg-gray-200 py-4\">  {children}</header>"
      },
      {
        "name": "SiteTitle",
        "html": "<h1 className=\"text-3xl\">{site_title}</h1>"
      },
      {
        "name": "NavLinks",
        "html": "<nav className=\"flex justify-end\">  {children}</nav>"
      },
      {
        "name": "NavLink",
        "html": "<a href={nav_link_href} className=\"text-blue-600 hover:underline\">{nav_link_text}</a>"
      }
    ]
  },
  {
    "description": "The UI should be a showcase of featured posts, displaying a preview of each article, including a title, a brief summary, and an image. The section should have a heading and a brief description.",
    "component_list": [
      {
        "name": "FeaturedPostsSection",
        "is_standalone": true,
        "description": "(standalone): The outer container for the featured posts section. "
      },
      {
        "name": "PostPreview",
        "is_standalone": false,
        "description": "(takes children): A component to display a single post preview, containing the title, summary, and image. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto py-12 md:py-16 lg:py-20\">\n  <h2 className=\"text-3xl font-bold mb-4\">Featured Posts</h2>\n  <p className=\"text-gray-600 mb-12\">Check out our latest and greatest articles!</p>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostPreview/>\n    <PostPreview/>\n    <!-- Add more PostPreview components here -->\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "PostPreview",
        "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <img src={post_image_url} alt={post_title} className=\"w-full h-40 object-cover mb-4\" />  <h3 className=\"text-lg font-bold\">{post_title}</h3>  <p className=\"text-gray-600\">{post_summary}</p></div>"
      }
    ]
  },
  {
    "description": "The footer should have a dark background and contain copyright information and contact details. The text should be white and easily readable.",
    "component_list": [
      {
        "name": "FooterContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire footer. "
      },
      {
        "name": "CopyrightInfo",
        "is_standalone": true,
        "description": "A standalone component that displays the copyright information. "
      },
      {
        "name": "ContactInfo",
        "is_standalone": true,
        "description": "A standalone component that displays the contact details. "
      }
    ],
    "main_html": "<footer className=\"bg-gray-900 h-screen pt-12 pb-4\">\n  <FooterContainer>\n    <CopyrightInfo/>\n    <ContactInfo/>\n  </FooterContainer>\n</footer>\n",
    "component_html": [
      {
        "name": "FooterContainer",
        "html": "<div className=\"container mx-auto p-4\">  {children}</div>"
      },
      {
        "name": "CopyrightInfo",
        "html": "<p className=\"text-white\">{copyright_text}</p>"
      },
      {
        "name": "ContactInfo",
        "html": "<ul className=\"list-none mb-4\">  <li><a href={`mailto:{email}`} className=\"text-white\">{email}</a></li>  <li><a href={`tel:{phone_number}`} className=\"text-white\">{phone_number}</a></li>  <li><a href={website_url} className=\"text-white\">{website_url}</a></li></ul>"
      }
    ]
  },
  {
    "description": "A list of teaser articles, with a title, image, and short summary. Should be responsive and look good on desktop and mobile.",
    "component_list": [
      {
        "name": "PostTeaser",
        "is_standalone": true,
        "description": "(standalone) - a single post teaser component "
      },
      {
        "name": "PostList",
        "is_standalone": false,
        "description": "(takes children) - the container for the list of post teasers "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2>Latest Articles</h2>\n  <PostList>\n    <PostTeaser />\n    <PostTeaser />\n    <PostTeaser />\n  </PostList>\n</div>\n",
    "component_html": [
      {
        "name": "PostTeaser",
        "html": "<article className=\"mb-4 p-4 border border-gray-200 rounded\">  <img src={image_url} alt={post_title} className=\"w-full h-48 object-cover rounded-t\" />  <h3 className=\"text-lg font-bold\">{post_title}</h3>  <p className=\"text-sm\">{post_summary}</p>  <a href={post_url} className=\"text-indigo-600 hover:text-indigo-900\">Read more</a></article>"
      },
      {
        "name": "PostList",
        "html": "<ul className=\"flex flex-wrap justify-center\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should resemble a typical comment section, with a list of comment cards containing user avatars, names, comments, and timestamps. Each comment card should have a reply button to initiate a new comment.",
    "component_list": [
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire comment section. "
      },
      {
        "name": "CommentCard",
        "is_standalone": false,
        "description": "A component that represents an individual comment, takes children. "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "A standalone component that displays a user's avatar. "
      },
      {
        "name": "CommentMeta",
        "is_standalone": false,
        "description": "A component that displays a user's name and timestamp, takes children. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "A standalone component that initiates a new comment reply. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Comments</h2>\n  <CommentSection>\n    <CommentCard>\n      <Avatar />\n      <CommentMeta>\n        <span>{username}</span>\n        <span>{timestamp}</span>\n      </CommentMeta>\n      <p>{comment_text}</p>\n      <ReplyButton />\n    </CommentCard>\n    <!-- more CommentCards here -->\n  </CommentSection>\n</div>\n",
    "component_html": [
      {
        "name": "CommentSection",
        "html": "<div class=\"divide-y\">  {children}</div>"
      },
      {
        "name": "CommentCard",
        "html": "<div class=\"flex gap-2 p-4\">  <div class=\"shrink-0\">    {children[0]} <!-- Avatar -->  </div>  <div class=\"grow\">    {children[1]} <!-- CommentMeta -->    <p class=\"text-gray-600\">{children[2]}</p> <!-- Comment text -->    {children[3]} <!-- ReplyButton -->  </div></div>"
      },
      {
        "name": "Avatar",
        "html": "<img src={avatar_url} alt=\"User Avatar\" class=\"w-10 h-10 rounded-full\" />"
      },
      {
        "name": "CommentMeta",
        "html": "<div class=\"flex items-center text-gray-600\">  {children[0]} <!-- Username -->  <span class=\"text-xs\">{children[1]}</span> <!-- Timestamp --></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-gray-100 hover:bg-gray-200 text-gray-600 py-2 px-4 rounded\">  Reply</button>"
      }
    ]
  },
  {
    "description": "The author bio component should display the author's name, profile picture, and a short bio.",
    "component_list": [
      {
        "name": "AuthorBio",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "standalone component, displays the author's profile picture "
      },
      {
        "name": "BioText",
        "is_standalone": true,
        "description": "standalone component, displays the author's bio "
      }
    ],
    "main_html": "<div className=\"flex items-center mb-4\">\n  <Avatar />\n  <div className=\"ml-4\">\n    <h5 className=\"text-lg font-bold\">{authorName}</h5>\n    <BioText />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "Avatar",
        "html": "<img src={avatarUrl} alt={authorName} className=\"w-12 h-12 rounded-full\" />"
      },
      {
        "name": "BioText",
        "html": "<p className=\"text-gray-600\">{bioText}</p>"
      },
      {
        "name": "AuthorBio",
        "html": "<div className=\"flex items-center mb-4\">  <Avatar />  <div className=\"ml-4\">    <h5 className=\"text-lg font-bold\">{authorName}</h5>    <BioText />  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a section of related posts with a header and a list of post previews. Each post preview should show a title, a brief summary, and a \"Read more\" link.",
    "component_list": [
      {
        "name": "RelatedPostsSection",
        "is_standalone": true,
        "description": "(standalone): The container for the related posts section. "
      },
      {
        "name": "RelatedPostsHeader",
        "is_standalone": true,
        "description": "(standalone): The header for the related posts section. "
      },
      {
        "name": "PostPreview",
        "is_standalone": false,
        "description": "(takes children): A preview of a single related post. "
      }
    ],
    "main_html": "<section className=\"bg-white py-12\">\n  <RelatedPostsHeader/>\n  <ul className=\"divide-y\">\n    <li className=\"py-4\">\n      <PostPreview/>\n    </li>\n    <li className=\"py-4\">\n      <PostPreview/>\n    </li>\n    <!-- Add more post previews here -->\n  </ul>\n</section>\n",
    "component_html": [
      {
        "name": "RelatedPostsHeader",
        "html": "<h2 className=\"text-2xl font-bold mb-2\">Related Posts</h2>"
      },
      {
        "name": "PostPreview",
        "html": "<article className=\"flex\">  <h3 className=\"text-lg font-bold\">{post_title}</h3>  <p className=\"text-gray-600\">{post_summary}</p>  <a href={post_url} className=\"text-blue-500 hover:text-blue-700 transition duration-300\">Read more</a></article>"
      }
    ]
  },
  {
    "description": "The UI should display a navigation system for multiple pages, typically with previous and next buttons, and a series of numbered pages in between.",
    "component_list": [
      {
        "name": "PaginationContainer",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the pagination system. "
      },
      {
        "name": "PaginationButton",
        "is_standalone": false,
        "description": "(takes children): Individual buttons for navigating to previous/next pages or a specific page. "
      },
      {
        "name": "PaginationPages",
        "is_standalone": true,
        "description": "(standalone): The container for the numbered page links. "
      }
    ],
    "main_html": "<!-- Pagination navigation -->\n<PaginationContainer>\n  <!-- Previous button -->\n  <PaginationButton>Previous</PaginationButton>\n  <!-- Page links -->\n  <PaginationPages>\n    <PaginationButton>{page_1}</PaginationButton>\n    <PaginationButton>{page_2}</PaginationButton>\n    <!-- ... -->\n  </PaginationPages>\n  <!-- Next button -->\n  <PaginationButton>Next</PaginationButton>\n</ PaginationContainer>\n",
    "component_html": [
      {
        "name": "PaginationContainer",
        "html": "<!-- Outer container for the pagination system --><div class=\"flex justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "PaginationButton",
        "html": "<!-- Individual button for navigating to a page --><button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\">  {children}</button>"
      },
      {
        "name": "PaginationPages",
        "html": "<!-- Container for the numbered page links --><ul class=\"flex justify-center\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A cloud of popular tags, with each tag represented as a pill with the tag name and a count of its frequency, varying in size and color based on the frequency.",
    "component_list": [
      {
        "name": "TagCloud",
        "is_standalone": true,
        "description": "standalone component representing the entire tag cloud "
      },
      {
        "name": "TagPill",
        "is_standalone": true,
        "description": "standalone component representing a single tag pill "
      },
      {
        "name": "TagName",
        "is_standalone": true,
        "description": "standalone component representing the name of a tag "
      },
      {
        "name": "TagCount",
        "is_standalone": true,
        "description": "standalone component representing the count of a tag "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap justify-center\">\n  <TagCloud/>\n</div>\n",
    "component_html": [
      {
        "name": "TagCloud",
        "html": "<div className=\"flex flex-wrap justify-center\">  {tags.map((tag, index) => (    <TagPill key={index} tag={tag} />  ))}</div>"
      },
      {
        "name": "TagPill",
        "html": "<div className=\"inline-flex items-center mr-2 mb-2\">  <TagName tagName={tagName} />  <TagCount count={tagCount} /></div>"
      },
      {
        "name": "TagName",
        "html": "<span className=\"text-sm font-bold\">{tagName}</span>"
      },
      {
        "name": "TagCount",
        "html": "<span className=\"text-xs text-gray-600\">{tagCount}</span>"
      }
    ]
  },
  {
    "description": "The UI should display a list of categories, with each category having a title and a link to the corresponding content.",
    "component_list": [
      {
        "name": "CategoryLink",
        "is_standalone": true,
        "description": "A standalone component representing a single category with a link. "
      },
      {
        "name": "CategoryList",
        "is_standalone": false,
        "description": "A component that takes children (multiple `CategoryLink` components) to display a list of categories. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-xl font-bold mb-4\">Categories</h2>\n  <ul class=\"list-none mb-0\">\n    <CategoryList>\n      <CategoryLink />\n      <CategoryLink />\n      <!-- Add more CategoryLink components here -->\n    </CategoryList>\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "CategoryLink",
        "html": "<li class=\"mb-2\">  <a href=\"{categoryLink}\" class=\"text-blue-600 hover:text-blue-900 transition duration-300\">{categoryName}</a></li>"
      },
      {
        "name": "CategoryList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A list of past articles organized by date, with each article displaying its title, brief summary, and publication date.",
    "component_list": [
      {
        "name": "ArchiveList",
        "is_standalone": true,
        "description": "A standalone component that renders a list of `ArchiveItem` components. "
      },
      {
        "name": "ArchiveItem",
        "is_standalone": false,
        "description": "A component that takes children (title, summary, and date) and displays a single archive item. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Archives</h1>\n  <ArchiveList/>\n</div>\n",
    "component_html": [
      {
        "name": "ArchiveList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "ArchiveItem",
        "html": "<li class=\"py-4 border-b border-gray-200\">  <h2 class=\"text-lg\">{title}</h2>  <p class=\"text-gray-600\">{summary}</p>  <p class=\"text-gray-500\">{date}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should have a header section that contains a logo on the left and a navigation menu on the right. The logo should be a clickable link that takes the user to the homepage. The navigation menu should have multiple items, each with a text label.",
    "component_list": [
      {
        "name": "Header",
        "is_standalone": true,
        "description": "Standalone component that contains the logo and navigation menu. "
      },
      {
        "name": "Logo",
        "is_standalone": true,
        "description": "Standalone component that displays the logo. "
      },
      {
        "name": "NavigationMenu",
        "is_standalone": false,
        "description": "Component that takes children (menu items). "
      },
      {
        "name": "NavigationMenuItem",
        "is_standalone": true,
        "description": "Standalone component that displays a single navigation menu item. "
      }
    ],
    "main_html": "<header className=\"bg-gray-100 h-16 flex justify-between items-center px-4\">\n  <Logo />\n  <NavigationMenu>\n    <NavigationMenuItem>Menu Item 1</NavigationMenuItem>\n    <NavigationMenuItem>Menu Item 2</NavigationMenuItem>\n    <!-- Add more menu items here -->\n  </NavigationMenu>\n</header>\n",
    "component_html": [
      {
        "name": "Header",
        "html": "<header className=\"bg-gray-100 h-16 flex justify-between items-center px-4\">  {children}</header>"
      },
      {
        "name": "Logo",
        "html": "<a href=\"/\" className=\"text-lg font-bold text-blue-600\">  <img src={logo_src} alt=\"Logo\" className=\"h-8 w-8\" /></a>"
      },
      {
        "name": "NavigationMenu",
        "html": "<nav className=\"flex justify-center\">  {children}</nav>"
      },
      {
        "name": "NavigationMenuItem",
        "html": "<a href={menu_item_href} className=\"text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">  {menu_item_text}</a>"
      }
    ]
  },
  {
    "description": "A hero section with a background image and a tagline that grabs the user's attention.",
    "component_list": [
      {
        "name": "HeroSection",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "HeroBackground",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "HeroTagline",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<HeroSection>\n  <HeroBackground/>\n  <HeroTagline/>\n</HeroSection>\n",
    "component_html": [
      {
        "name": "HeroSection",
        "html": "<div className=\"h-screen w-full flex justify-center items-center\">  {children}</div>"
      },
      {
        "name": "HeroBackground",
        "html": "<div className=\"absolute top-0 left-0 w-full h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${hero_image_url})` }} />"
      },
      {
        "name": "HeroTagline",
        "html": "<h1 className=\"text-3xl font-bold text-white\">{tagline}</h1>"
      }
    ]
  },
  {
    "description": "A projects showcase with a grid of thumbnails, each with a description and a link to view more.",
    "component_list": [
      {
        "name": "ProjectThumbnail",
        "is_standalone": true,
        "description": "standalone component that displays a single project thumbnail. "
      },
      {
        "name": "ProjectCard",
        "is_standalone": false,
        "description": "takes children, a container component that displays a project thumbnail and description. "
      },
      {
        "name": "ProjectShowcase",
        "is_standalone": false,
        "description": "takes children, the main component that displays a grid of project cards. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 lg:p-6\">\n  <h1 className=\"text-3xl font-bold mb-4\">Projects Showcase</h1>\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProjectShowcase>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <!-- and so on... -->\n    </ProjectShowcase>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ProjectThumbnail",
        "html": "<a href=\"{project_url}\" className=\"block mb-4\">  <img src=\"{thumbnail_url}\" alt=\"{project_name}\" className=\"h-48 w-full object-cover rounded-md\" /></a>"
      },
      {
        "name": "ProjectCard",
        "html": "<div className=\"p-4 md:p-6 bg-white rounded-md shadow-md\">  {children}  <h2 className=\"text-lg font-bold\">{project_name}</h2>  <p>{project_description}</p></div>"
      },
      {
        "name": "ProjectShowcase",
        "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A blog section with a header, latest posts section, and archives section. The latest posts section will display a list of recent blog posts with titles, dates, and excerpts. The archives section will display a list of months with the number of posts for each month.",
    "component_list": [
      {
        "name": "BlogSection",
        "is_standalone": true,
        "description": "standalone component that contains the entire blog section "
      },
      {
        "name": "LatestPosts",
        "is_standalone": true,
        "description": "standalone component that displays a list of recent blog posts "
      },
      {
        "name": "PostPreview",
        "is_standalone": false,
        "description": "component that displays a single blog post preview, takes children "
      },
      {
        "name": "Archives",
        "is_standalone": true,
        "description": "standalone component that displays a list of months with post counts "
      },
      {
        "name": "ArchiveMonth",
        "is_standalone": false,
        "description": "component that displays a single month with post count, takes children "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <BlogSection>\n    <h1 className=\"text-3xl font-bold mb-4\">Blog</h1>\n    <LatestPosts />\n    <Archives />\n  </BlogSection>\n</div>\n",
    "component_html": [
      {
        "name": "BlogSection",
        "html": "<div className=\"blog-section\">  {children}</div>"
      },
      {
        "name": "LatestPosts",
        "html": "<div className=\"latest-posts mb-12\">  <h2 className=\"text-2xl font-bold mb-4\">Latest Posts</h2>  <ul>    { /* PostPreview components will be rendered here */ }  </ul></div>"
      },
      {
        "name": "PostPreview",
        "html": "<li className=\"post-preview mb-6\">  <h3 className=\"text-lg font-bold mb-2\">{postTitle}</h3>  <p className=\"text-gray-600\">{postExcerpt}</p>  <p className=\"text-gray-600\">{postDate}</p>  {children}</li>"
      },
      {
        "name": "Archives",
        "html": "<div className=\"archives mb-12\">  <h2 className=\"text-2xl font-bold mb-4\">Archives</h2>  <ul>    { /* ArchiveMonth components will be rendered here */ }  </ul></div>"
      },
      {
        "name": "ArchiveMonth",
        "html": "<li className=\"archive-month mb-2\">  <a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">    {monthName} ({postCount} posts)  </a>  {children}</li>"
      }
    ]
  },
  {
    "description": "A horizontal row of social media links with icons and tooltips, where each link has a hover effect and a tooltip that appears when hovered.",
    "component_list": [
      {
        "name": "SocialMediaLink",
        "is_standalone": true,
        "description": "(standalone): A single social media link with an icon and a tooltip. "
      },
      {
        "name": "SocialMediaLinks",
        "is_standalone": false,
        "description": "(takes children): A container component that holds multiple `SocialMediaLink` components. "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap gap-2\">\n  <SocialMediaLinks>\n    <SocialMediaLink />\n    <SocialMediaLink />\n    <SocialMediaLink />\n  </SocialMediaLinks>\n</div>\n",
    "component_html": [
      {
        "name": "SocialMediaLinks",
        "html": "<div className=\"flex flex-wrap gap-2\">{children}</div>"
      },
      {
        "name": "SocialMediaLink",
        "html": "<a href=\"{social_media_url}\" className=\"text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\" target=\"_blank\" rel=\"noopener noreferrer\">  <i className={`fab fa-${social_media_icon} text-2xl`}></i>  <span className=\"hidden sm:inline-block sm:ml-2\">{social_media_tooltip}</span></a>"
      }
    ]
  },
  {
    "description": "A Skills section that displays a list of skills with their corresponding icons and proficiency levels.",
    "component_list": [
      {
        "name": "SkillCard",
        "is_standalone": true,
        "description": "Standalone component that displays a single skill with its icon and proficiency level. "
      },
      {
        "name": "SkillsSection",
        "is_standalone": false,
        "description": "Component that takes children, which is a list of `SkillCard` components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <h2 class=\"text-2xl font-bold mb-4\">Skills</h2>\n  <ul class=\"list-none mb-0\">\n    <SkillCard />\n    <SkillCard />\n    <SkillCard />\n    <!-- Add more SkillCard components as needed -->\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "SkillCard",
        "html": "<li class=\"flex items-center mb-4\">  <i class=\"mr-2 {icon_class}\" aria-hidden=\"true\"></i>  <span class=\"text-lg\">{skill_name}</span>  <span class=\"text-sm text-gray-600\">{proficiency_level}</span></li>"
      }
    ]
  },
  {
    "description": "A vertical timeline with a list of experiences, each containing a job title, company name, and duration.",
    "component_list": [
      {
        "name": "ExperienceTimeline",
        "is_standalone": true,
        "description": "(standalone): The parent component that wraps the entire timeline. "
      },
      {
        "name": "ExperienceItem",
        "is_standalone": false,
        "description": "(takes children): An individual experience item in the timeline, containing a job title, company name, and duration. "
      }
    ],
    "main_html": "<div className=\"w-full h-screen p-4\">\n  <ExperienceTimeline>\n    <ExperienceItem/>\n    <ExperienceItem/>\n    { /* more ExperienceItem components */ }\n  </ExperienceTimeline>\n</div>\n",
    "component_html": [
      {
        "name": "ExperienceTimeline",
        "html": "<div className=\"flex flex-col justify-center h-full\">  {children}</div>"
      },
      {
        "name": "ExperienceItem",
        "html": "<div className=\"flex flex-col mb-4\">  <h3 className=\"text-lg font-bold\">{job_title}</h3>  <p className=\"text-gray-600\">{company_name}</p>  <p className=\"text-gray-600\">{start_date} - {end_date}</p>  <p className=\"text-gray-600\">{description}</p></div>"
      }
    ]
  },
  {
    "description": "A hero section with an animated typography effect, typically used to grab the user's attention. The background is a gradient that transitions from a dark blue to a lighter blue. The animated typography is a heading element with a dynamic text that scales up and changes color on hover.",
    "component_list": [
      {
        "name": "HeroSection",
        "is_standalone": true,
        "description": "Standalone component that contains the hero section. "
      },
      {
        "name": "AnimatedTypography",
        "is_standalone": true,
        "description": "Standalone component that contains the animated typography effect. "
      },
      {
        "name": "GradientBackground",
        "is_standalone": true,
        "description": "Standalone component that sets the gradient background. "
      }
    ],
    "main_html": "<section className=\"h-screen w-full relative\">\n  <GradientBackground/>\n  <div className=\"container mx-auto p-4 pt-10\">\n    <AnimatedTypography/>\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "AnimatedTypography",
        "html": "<h1 className=\"text-4xl font-bold mb-4\">{animated_text}</h1>"
      },
      {
        "name": "GradientBackground",
        "html": "<div className=\"absolute inset-0 bg-gradient-to-r from-{dark_blue} to-{light_blue}\"></div>"
      }
    ]
  },
  {
    "description": "A portfolio filter component that allows users to filter projects by categories and tags. The component consists of two sections: a category filter and a tag filter. Each section has a title, a reset button, and a list of filter options.",
    "component_list": [
      {
        "name": "CategoryFilter",
        "is_standalone": true,
        "description": "(standalone) - renders the category filter section "
      },
      {
        "name": "TagFilter",
        "is_standalone": true,
        "description": "(standalone) - renders the tag filter section "
      },
      {
        "name": "FilterOption",
        "is_standalone": false,
        "description": "(takes children) - renders a single filter option with a label and a checkbox "
      },
      {
        "name": "FilterResetButton",
        "is_standalone": true,
        "description": "(standalone) - renders a reset button for the filter "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap -mx-4\">\n  <CategoryFilter />\n  <TagFilter />\n</div>\n",
    "component_html": [
      {
        "name": "CategoryFilter",
        "html": "<div class=\"w-full md:w-1/2 px-4 mb-4\">  <h5 class=\"uppercase tracking-wide mb-2\">Categories</h5>  <FilterResetButton />  <ul class=\"list-none mb-0\">    {categories.map((category) => (      <FilterOption key={category.id}>{category.name}</FilterOption>    ))}  </ul></div>"
      },
      {
        "name": "TagFilter",
        "html": "<div class=\"w-full md:w-1/2 px-4 mb-4\">  <h5 class=\"uppercase tracking-wide mb-2\">Tags</h5>  <FilterResetButton />  <ul class=\"list-none mb-0\">    {tags.map((tag) => (      <FilterOption key={tag.id}>{tag.name}</FilterOption>    ))}  </ul></div>"
      },
      {
        "name": "FilterOption",
        "html": "<li class=\"mb-2\">  <input    type=\"checkbox\"    id={`filter-option-${id}`}    name={name}    class=\"mr-2\"  />  <label for={`filter-option-${id}`}>{children}</label></li>"
      },
      {
        "name": "FilterResetButton",
        "html": "<button class=\"btn btn-sm btn-secondary\">Reset Filter</button>"
      }
    ]
  },
  {
    "description": "A modal window with a white background, a close button at the top right corner, a heading, project details, and a section for images. The modal window should be vertically and horizontally centered on the screen.",
    "component_list": [
      {
        "name": "ModalWrapper",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the modal window. "
      },
      {
        "name": "ModalHeader",
        "is_standalone": true,
        "description": "(standalone): The header section of the modal window with a close button. "
      },
      {
        "name": "ModalTitle",
        "is_standalone": true,
        "description": "(standalone): The heading of the modal window. "
      },
      {
        "name": "ProjectDetails",
        "is_standalone": true,
        "description": "(standalone): The section that displays project details. "
      },
      {
        "name": "ImageGallery",
        "is_standalone": false,
        "description": "(takes children): A container for the images. "
      }
    ],
    "main_html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-gray-500 bg-opacity-50 flex justify-center\">\n  <ModalWrapper>\n    <ModalHeader />\n    <ModalTitle>{project_title}</ModalTitle>\n    <ProjectDetails>\n      <p>{project_description}</p>\n      <p>Category: {project_category}</p>\n      <p>Tags: {project_tags}</p>\n    </ProjectDetails>\n    <ImageGallery>\n      <ImageGalleryItem><img src={image1_url} alt=\"Image 1\" /></ImageGalleryItem>\n      <ImageGalleryItem><img src={image2_url} alt=\"Image 2\" /></ImageGalleryItem>\n      <!-- ... add more images ... -->\n    </ImageGallery>\n  </ModalWrapper>\n</div>\n",
    "component_html": [
      {
        "name": "ModalWrapper",
        "html": "<div className=\"bg-white rounded shadow-md p-4 w-full max-w-md\">  {children}</div>"
      },
      {
        "name": "ModalHeader",
        "html": "<div className=\"flex justify-end\">  <button className=\"text-gray-500 hover:text-gray-800 transition duration-300\" onClick={() => closeModal()}>&times;</button></div>"
      },
      {
        "name": "ModalTitle",
        "html": "<h2 className=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "ProjectDetails",
        "html": "<div className=\"p-4\">  {children}</div>"
      },
      {
        "name": "ImageGallery",
        "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
      },
      {
        "name": "ImageGalleryItem",
        "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-2\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A download button with an adjacent print option, styled with a modern and minimalistic design.",
    "component_list": [
      {
        "name": "ResumeDownloadButton",
        "is_standalone": true,
        "description": "standalone component for the download button "
      },
      {
        "name": "PrintOption",
        "is_standalone": true,
        "description": "standalone component for the print option "
      }
    ],
    "main_html": "<div class=\"flex gap-2\">\n  <ResumeDownloadButton />\n  <PrintOption />\n</div>\n",
    "component_html": [
      {
        "name": "ResumeDownloadButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Download Resume ({file_size})</button>"
      },
      {
        "name": "PrintOption",
        "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-gray-100 font-bold py-2 px-4 rounded\">  Print</button>"
      }
    ]
  },
  {
    "description": "The UI should display a personal quote or mantra in a elegant font with a fade-in animation effect.",
    "component_list": [
      {
        "name": "The",
        "is_standalone": false,
        "description": "UI consists of one component: `QuoteDisplay`, which takes children. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <QuoteDisplay />\n</div>\n",
    "component_html": [
      {
        "name": "QuoteDisplay",
        "html": "<div class=\"text-3xl font-bold animate-fade-in\">{children}</div>"
      }
    ]
  },
  {
    "description": "A section displaying news or updates with a date and title.",
    "component_list": [
      {
        "name": "UpdateCard",
        "is_standalone": true,
        "description": "Standalone component displaying a single update. "
      },
      {
        "name": "UpdateDate",
        "is_standalone": true,
        "description": "Standalone component displaying the date of the update. "
      },
      {
        "name": "UpdateTitle",
        "is_standalone": true,
        "description": "Standalone component displaying the title of the update. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <UpdateCard />\n  <UpdateCard />\n  <!-- Add more UpdateCard components as needed -->\n</section>\n",
    "component_html": [
      {
        "name": "UpdateCard",
        "html": "<div className=\"flex flex-wrap mb-4\">  <UpdateDate />  <UpdateTitle /></div>"
      },
      {
        "name": "UpdateDate",
        "html": "<p className=\"text-sm text-gray-600\">{date}</p>"
      },
      {
        "name": "UpdateTitle",
        "html": "<h3 className=\"text-lg font-bold\">{title}</h3>"
      }
    ]
  },
  {
    "description": "The UI should have a section that showcases awards or achievements, with icons and dates.",
    "component_list": [
      {
        "name": "AwardItem",
        "is_standalone": true,
        "description": "A standalone component that represents a single award or achievement. "
      },
      {
        "name": "AchievementSection",
        "is_standalone": false,
        "description": "A component that takes children and wraps the award items. "
      }
    ],
    "main_html": "<section class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl mb-4\">Awards and Achievements</h2>\n  <AchievementSection>\n    <AwardItem/>\n    <AwardItem/>\n    <AwardItem/>\n  </AchievementSection>\n</section>\n",
    "component_html": [
      {
        "name": "AwardItem",
        "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon}</span>  <div>    <h3 class=\"text-lg\">{award_name}</h3>    <p class=\"text-sm text-gray-600\">{award_date}</p>  </div></div>"
      },
      {
        "name": "AchievementSection",
        "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a certifications or licenses section with issuers, showing the certification/license name, issuer, and date earned. The section should have a header and a list of certifications/licensing with each item showing the necessary information.",
    "component_list": [
      {
        "name": "CertificationSection",
        "is_standalone": true,
        "description": "standalone component that renders the entire certifications/ licenses section. "
      },
      {
        "name": "CertificationItem",
        "is_standalone": false,
        "description": "component that takes children to render a single certification/license item. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 md:p-6 md:pt-0\">\n  <CertificationSection>\n    <CertificationItem/>\n    <!-- can have multiple CertificationItem components here -->\n  </CertificationSection>\n</div>\n",
    "component_html": [
      {
        "name": "CertificationSection",
        "html": "<section className=\"bg-white shadow-md rounded px-4 py-6\">  <h2 className=\"text-lg font-bold\">{section_title}</h2>  <ul>    {children}  </ul></section>"
      },
      {
        "name": "CertificationItem",
        "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <div className=\"flex-1\">      <h3 className=\"text-sm font-bold\">{certification_name}</h3>      <p className=\"text-sm\">{issuer}</p>    </div>    <p className=\"text-sm text-gray-600\">{date_earned}</p>  </div></li>"
      }
    ]
  },
  {
    "description": "A carousel displaying a sequence of client or testimonial logos. The carousel should have navigation buttons (previous and next) and a visible indicator of the current slide.",
    "component_list": [
      {
        "name": "TestimonialCarousel",
        "is_standalone": true,
        "description": "a standalone component that contains the entire carousel. "
      },
      {
        "name": "CarouselSlide",
        "is_standalone": false,
        "description": "a component that takes children (multiple logo images) to be displayed in a single slide. "
      },
      {
        "name": "NavigationButton",
        "is_standalone": true,
        "description": "a standalone component for the previous and next buttons. "
      },
      {
        "name": "SlideIndicator",
        "is_standalone": true,
        "description": "a standalone component that displays the current slide number. "
      }
    ],
    "main_html": "<div className=\"container mx-auto px-4 pt-12\">\n  <TestimonialCarousel>\n    <CarouselSlide>\n      <img src={logo1} alt=\"Client Logo 1\" />\n      <img src={logo2} alt=\"Client Logo 2\" />\n      <!-- more logos -->\n    </CarouselSlide>\n    <CarouselSlide>\n      <img src={logo3} alt=\"Client Logo 3\" />\n      <img src={logo4} alt=\"Client Logo 4\" />\n      <!-- more logos -->\n    </CarouselSlide>\n    <!-- more slides -->\n  </TestimonialCarousel>\n  <NavigationButton direction=\"prev\" />\n  <NavigationButton direction=\"next\" />\n  <SlideIndicator />\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialCarousel",
        "html": "<div className=\"flex overflow-hidden\">  {children}  <NavigationButton direction=\"prev\" />  <NavigationButton direction=\"next\" />  <SlideIndicator /></div>"
      },
      {
        "name": "CarouselSlide",
        "html": "<div className=\"flex items-center justify-center px-4\">  {children}</div>"
      },
      {
        "name": "NavigationButton",
        "html": "<button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded\">  {direction === 'prev' ? 'Previous' : 'Next'}</button>"
      },
      {
        "name": "SlideIndicator",
        "html": "<div className=\"flex justify-center mb-4\">  <span className=\"text-gray-600\">{currentSlide} / {totalSlides}</span></div>"
      }
    ]
  },
  {
    "description": "A compact popup displaying a user's profile information, including their avatar and username.",
    "component_list": [
      {
        "name": "UserProfilePopup",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"fixed top-0 right-0 p-4\">\n  <UserProfilePopup>\n    <Avatar/>\n    <Username/>\n  </UserProfilePopup>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePopup",
        "html": "<div class=\"bg-white rounded shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "Avatar",
        "html": "<img src={avatar_url} alt=\"User Avatar\" class=\"w-12 h-12 rounded-full\" />"
      },
      {
        "name": "Username",
        "html": "<p class=\"text-lg font-bold\">{username}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of channels, categorized by collapsible categories. Each category should display the number of unread messages. When a category is collapsed, only the category name and unread count should be visible. When a category is expanded, a list of channels under that category should be displayed, with each channel showing its own unread count.",
    "component_list": [
      {
        "name": "ChannelList",
        "is_standalone": true,
        "description": "(standalone) - the outermost component that contains the list of categories "
      },
      {
        "name": "Category",
        "is_standalone": false,
        "description": "(takes children) - a collapsible category that contains a list of channels "
      },
      {
        "name": "Channel",
        "is_standalone": true,
        "description": "(standalone) - a single channel with an unread count "
      },
      {
        "name": "UnreadCount",
        "is_standalone": true,
        "description": "(standalone) - a small badge displaying the number of unread messages "
      }
    ],
    "main_html": "<div className=\"h-screen overflow-y-auto p-4\">\n  <ChannelList>\n    <!-- categories will be inserted here -->\n    <Category><Category/>\n    <Category><Category/>\n    ...\n  </ChannelList>\n</div>\n",
    "component_html": [
      {
        "name": "ChannelList",
        "html": "<div className=\"flex flex-col\">  {children}</div>"
      },
      {
        "name": "Category",
        "html": "<div className=\"flex justify-between mb-2\">  <div className=\"text-lg\">{category_name}</div>  <UnreadCount>{unread_count}</UnreadCount>  <button className=\"text-gray-500 hover:text-gray-800\" onClick={toggleCollapse}>    {collapsed ? '+' : '-'}  </button>  {collapsed ? '' : (    <div className=\"pl-4\">      {children}    </div>  )}</div>"
      },
      {
        "name": "Channel",
        "html": "<div className=\"pl-8 mb-2\">  <span className=\"text-lg\">{channel_name}</span>  <UnreadCount>{unread_count}</UnreadCount></div>"
      },
      {
        "name": "UnreadCount",
        "html": "<span className=\"bg-red-500 text-white rounded-full px-2 py-1 text-sm\">  {count}</span>"
      }
    ]
  },
  {
    "description": "A message input field with a send button on the right side, and an emoji picker button on the left side of the input field.",
    "component_list": [
      {
        "name": "EmojiPickerButton",
        "is_standalone": true,
        "description": "standalone component that renders an emoji picker "
      },
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "standalone component that renders a send button "
      },
      {
        "name": "MessageInputField",
        "is_standalone": false,
        "description": "component that takes children "
      }
    ],
    "main_html": "<div className=\"flex items-center bg-white py-2 px-4 rounded-lg\">\n  <EmojiPickerButton />\n  <MessageInputField>\n    <input type=\"text\" className=\"px-2 py-1 w-full\" />\n    <SendButton />\n  </MessageInputField>\n</div>\n",
    "component_html": [
      {
        "name": "EmojiPickerButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  😊</button>"
      },
      {
        "name": "SendButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {sendButtonText}</button>"
      },
      {
        "name": "MessageInputField",
        "html": "<div className=\"flex items-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A threaded conversation view with a list of comments, each with reply and reaction buttons.",
    "component_list": [
      {
        "name": "ConversationThread",
        "is_standalone": true,
        "description": "standalone, represents the entire conversation thread "
      },
      {
        "name": "CommentItem",
        "is_standalone": false,
        "description": "takes children, represents a single comment in the conversation "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "standalone, a button to reply to a comment "
      },
      {
        "name": "ReactionButton",
        "is_standalone": true,
        "description": "standalone, a button to react to a comment "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6\">\n  <ConversationThread>\n    <!-- list of comments -->\n    <CommentItem>\n      <!-- comment content and metadata -->\n      <ReplyButton />\n      <ReactionButton />\n    </CommentItem>\n    <CommentItem>\n      <!-- comment content and metadata -->\n      <ReplyButton />\n      <ReactionButton />\n    </CommentItem>\n    <!-- more comments -->\n  </ConversationThread>\n</div>\n",
    "component_html": [
      {
        "name": "ConversationThread",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "CommentItem",
        "html": "<li class=\"p-4 bg-white rounded-md shadow-sm\">  <div class=\"mb-2\">    <span class=\"text-sm text-gray-600\">{author_name}</span>    <span class=\"text-xs text-gray-500\">{created_at}</span>  </div>  <p class=\"text-lg\">{comment_text}</p>  <div class=\"flex justify-end mt-2\">    <ReplyButton />    <ReactionButton />  </div></li>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
      },
      {
        "name": "ReactionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {reaction_count} ❤️</button>"
      }
    ]
  },
  {
    "description": "A server icon (e.g. a globe or a building) followed by the server name, with a dropdown menu that appears when the icon is clicked.",
    "component_list": [
      {
        "name": "ServerIconDropdown",
        "is_standalone": true,
        "description": "a standalone component that contains a server icon and a dropdown menu. "
      },
      {
        "name": "ServerIcon",
        "is_standalone": true,
        "description": "a standalone component that displays a server icon. "
      },
      {
        "name": "ServerName",
        "is_standalone": true,
        "description": "a standalone component that displays the server name. "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "a component that takes children to display inside the dropdown menu. "
      }
    ],
    "main_html": "<div class=\"flex items-center\">\n  <ServerIcon />\n  <ServerName />\n  <DropdownMenu>\n    <!-- dropdown menu items here -->\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "ServerIcon",
        "html": "<i class=\"fas fa-globe mr-2 text-lg\"></i>"
      },
      {
        "name": "ServerName",
        "html": "<span class=\"text-lg\">{server_name}</span>"
      },
      {
        "name": "DropdownMenu",
        "html": "<div class=\"hidden absolute bg-white shadow-md py-2 w-48 rounded\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A rich media embed with a video player that has playback controls, allowing users to play, pause, and control the video.",
    "component_list": [
      {
        "name": "MediaEmbed",
        "is_standalone": true,
        "description": "standalone component that contains the video player and playback controls. "
      },
      {
        "name": "VideoPlayer",
        "is_standalone": true,
        "description": "standalone component that renders the video element. "
      },
      {
        "name": "PlaybackControls",
        "is_standalone": true,
        "description": "standalone component that renders the playback controls (play, pause, etc.). "
      },
      {
        "name": "ControlsButton",
        "is_standalone": true,
        "description": "standalone component that renders a single playback control button (e.g. play, pause). "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto mt-4 p-4 bg-white rounded-lg shadow-md\">\n  <MediaEmbed>\n    <VideoPlayer />\n    <PlaybackControls>\n      <ControlsButton />\n      <ControlsButton />\n      <!-- add more control buttons here -->\n    </PlaybackControls>\n  </MediaEmbed>\n</div>\n",
    "component_html": [
      {
        "name": "MediaEmbed",
        "html": "<div class=\"relative overflow-hidden\">  {children}</div>"
      },
      {
        "name": "VideoPlayer",
        "html": "<video class=\"w-full h-full object-cover\" src=\"{video_url}\" controls={false} />"
      },
      {
        "name": "PlaybackControls",
        "html": "<div class=\"flex justify-center mt-2\">  {children}</div>"
      },
      {
        "name": "ControlsButton",
        "html": "<button class=\"px-4 py-2 text-gray-600 hover:text-gray-900\">  {button_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a dropdown menu that displays a list of user mentions and role mentions. Each mention should display the mention's name and a brief description.",
    "component_list": [
      {
        "name": "MentionDropdown",
        "is_standalone": true,
        "description": "standalone component that wraps the entire dropdown menu. "
      },
      {
        "name": "MentionItem",
        "is_standalone": false,
        "description": "a single mention item in the dropdown list. Takes children. "
      }
    ],
    "main_html": "<div class=\"relative\">\n  <button class=\"btn btn-primary\">Mentions</button>\n  <div class=\"dropdown-menu\">\n    <MentionItem />\n    <MentionItem />\n    <!-- more mention items here -->\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "MentionDropdown",
        "html": "<div class=\"relative\">  <button class=\"btn btn-primary\">{displayText}</button>  <div class=\"dropdown-menu\">    {children}  </div></div>"
      },
      {
        "name": "MentionItem",
        "html": "<div class=\"flex items-center py-2 px-4 hover:bg-gray-100\">  <img src={avatarUrl} class=\"w-8 h-8 rounded-full mr-2\" />  <div>    <p class=\"text-sm\">{mentionName}</p>    <p class=\"text-xs text-gray-600\">{mentionDescription}</p>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a reaction picker with two sections: popular reactions and custom reactions. The popular reactions section displays a set of commonly used emojis, while the custom reactions section allows users to search and select from a larger library of emojis.",
    "component_list": [
      {
        "name": "ReactionPicker",
        "is_standalone": true,
        "description": "(standalone) - The main reaction picker component. "
      },
      {
        "name": "ReactionSection",
        "is_standalone": false,
        "description": "(takes children) - A section component that wraps a set of reactions. "
      },
      {
        "name": "PopularReactions",
        "is_standalone": true,
        "description": "(standalone) - A component that displays a set of popular reactions. "
      },
      {
        "name": "CustomReactions",
        "is_standalone": false,
        "description": "(takes children) - A component that allows users to search and select custom reactions. "
      },
      {
        "name": "Reaction",
        "is_standalone": false,
        "description": "(takes children) - An individual reaction component that displays an emoji and an optional count. "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) - A search bar component for searching custom reactions. "
      }
    ],
    "main_html": "<div className=\"w-full h-screen overflow-y-auto bg-white rounded-lg shadow-md\">\n  <ReactionPicker>\n    <ReactionSection title=\"Popular Reactions\">\n      <PopularReactions />\n    </ReactionSection>\n    <ReactionSection title=\"Custom Reactions\">\n      <SearchBar />\n      <CustomReactions>\n        <Reaction>👍</Reaction>\n        <!-- More custom reactions will be rendered here -->\n      </CustomReactions>\n    </ReactionSection>\n  </ReactionPicker>\n</div>\n",
    "component_html": [
      {
        "name": "ReactionPicker",
        "html": "<div className=\"flex flex-col h-full\">  {children}</div>"
      },
      {
        "name": "ReactionSection",
        "html": "<div className=\"p-4\">  <h2 className=\"text-lg font-bold\">{title}</h2>  {children}</div>"
      },
      {
        "name": "PopularReactions",
        "html": "<div className=\"flex justify-center mb-4\">  <!-- List of popular reactions will be rendered here -->  <Reaction>😊</Reaction>  <Reaction>👍</Reaction>  <Reaction>😍</Reaction></div>"
      },
      {
        "name": "CustomReactions",
        "html": "<div className=\"max-h-64 overflow-y-auto\">  {children}</div>"
      },
      {
        "name": "Reaction",
        "html": "<button className=\"w-12 h-12 rounded-full bg-gray-200 hover:bg-gray-300 active:bg-gray-400\">  {emoji}  <span className=\"text-xs\">{count}</span></button>"
      },
      {
        "name": "SearchBar",
        "html": "<input  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  type=\"text\"  placeholder=\"Search reactions\"/>"
      }
    ]
  },
  {
    "description": "A list of direct message conversations with the user's name, online status, and a preview of the last message.",
    "component_list": [
      {
        "name": "ConversationList",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "ConversationItem",
        "is_standalone": false,
        "description": "(takes children) "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "ConversationInfo",
        "is_standalone": false,
        "description": "(takes children) "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "OnlineStatus",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "LastMessage",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen p-4\">\n  <ConversationList>\n    <ConversationItem>\n      <Avatar/>\n      <ConversationInfo>\n        <Username/>\n        <OnlineStatus/>\n        <LastMessage/>\n      </ConversationInfo>\n    </ConversationItem>\n    <!-- repeat ConversationItem for each conversation -->\n  </ConversationList>\n</div>\n",
    "component_html": [
      {
        "name": "ConversationList",
        "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
      },
      {
        "name": "ConversationItem",
        "html": "<li class=\"py-4\">  <div class=\"flex items-center\">    <Avatar/>    <ConversationInfo>      {children}    </ConversationInfo>  </div></li>"
      },
      {
        "name": "Avatar",
        "html": "<img src={`https://avatars.githubusercontent.com/${username}`} alt={username} class=\"w-10 h-10 rounded-full\" />"
      },
      {
        "name": "ConversationInfo",
        "html": "<div class=\"ml-4\">  {children}</div>"
      },
      {
        "name": "Username",
        "html": "<h5 class=\"text-lg\">{username}</h5>"
      },
      {
        "name": "OnlineStatus",
        "html": "<p class={`text-${online ? 'green' : 'red'}-500`}>{online ? 'Online' : 'Offline'}</p>"
      },
      {
        "name": "LastMessage",
        "html": "<p class=\"text-sm\">{last_message}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a popup error message with a retry and cancel button. The error message should be prominent and displayed in a container with a red background color. The retry and cancel buttons should be displayed at the bottom of the popup.",
    "component_list": [
      {
        "name": "ErrorMessagePopup",
        "is_standalone": true,
        "description": "(standalone) - the top-level component for the error message popup "
      },
      {
        "name": "ErrorMessageBox",
        "is_standalone": false,
        "description": "(takes children) - a container for the error message text "
      },
      {
        "name": "ButtonRow",
        "is_standalone": false,
        "description": "(takes children) - a container for the retry and cancel buttons "
      }
    ],
    "main_html": "<div className=\"absolute top-0 left-0 w-full h-full bg-red-50\">\n  <ErrorMessagePopup>\n    <ErrorMessageBox>\n      <p>{error_message}</p>\n    </ErrorMessageBox>\n    <ButtonRow>\n      <RetryButton/>\n      <CancelButton/>\n    </ButtonRow>\n  </ErrorMessagePopup>\n</div>\n",
    "component_html": [
      {
        "name": "ErrorMessagePopup",
        "html": "<div className=\"fixed z-50 p-4 rounded-md bg-red-50 shadow-md\">  {children}</div>"
      },
      {
        "name": "ErrorMessageBox",
        "html": "<div className=\"p-4 mb-4 bg-red-100 rounded-md\">  {children}</div>"
      },
      {
        "name": "ButtonRow",
        "html": "<div className=\"flex justify-end p-4\">  {children}</div>"
      },
      {
        "name": "RetryButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Retry</button>"
      },
      {
        "name": "CancelButton",
        "html": "<button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">  Cancel</button>"
      }
    ]
  },
  {
    "description": "The UI should be a panel with two sections: a notification section and an account section. The notification section will display a notification message, and the account section will have options to update account information and log out.",
    "component_list": [
      {
        "name": "NotificationSection",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "AccountSection",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "LogoutButton",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "AccountOption",
        "is_standalone": false,
        "description": "(takes children) "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen justify-center\">\n  <NotificationSection />\n  <AccountSection>\n    <AccountOption>Account Information</AccountOption>\n    <AccountOption>Update Password</AccountOption>\n    <LogoutButton />\n  </AccountSection>\n</div>\n",
    "component_html": [
      {
        "name": "NotificationSection",
        "html": "<div class=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\">  <p>{notification_message}</p></div>"
      },
      {
        "name": "AccountSection",
        "html": "<div class=\"p-4\">  {children}</div>"
      },
      {
        "name": "LogoutButton",
        "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Log Out</button>"
      },
      {
        "name": "AccountOption",
        "html": "<div class=\"py-2\">  <p>{option_text}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should display a channel topic and description with an edit button.",
    "component_list": [
      {
        "name": "ChannelTopic",
        "is_standalone": true,
        "description": "standalone component to display the channel topic "
      },
      {
        "name": "ChannelDescription",
        "is_standalone": true,
        "description": "standalone component to display the channel description "
      },
      {
        "name": "EditButton",
        "is_standalone": true,
        "description": "standalone component for the edit button "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <ChannelTopic />\n  <ChannelDescription />\n  <EditButton />\n</div>\n",
    "component_html": [
      {
        "name": "ChannelTopic",
        "html": "<p class=\"text-lg font-bold\">{channel_topic}</p>"
      },
      {
        "name": "ChannelDescription",
        "html": "<p class=\"text-sm\">{channel_description}</p>"
      },
      {
        "name": "EditButton",
        "html": "<button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded\">  Edit</button>"
      }
    ]
  },
  {
    "description": "A list of pinned messages, each with a timestamp and author display.",
    "component_list": [
      {
        "name": "PinnedMessage",
        "is_standalone": true,
        "description": "standalone component that displays a single pinned message "
      },
      {
        "name": "PinnedMessageList",
        "is_standalone": false,
        "description": "component that takes children (a list of `PinnedMessage` components) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Pinned Messages</h2>\n  <PinnedMessageList>\n    <!-- list of pinned messages will be rendered here -->\n  </PinnedMessageList>\n</div>\n",
    "component_html": [
      {
        "name": "PinnedMessage",
        "html": "<div class=\"flex items-center mb-2\">  <div class=\"mr-2\">{author_avatar}</div>  <div class=\"flex-1\">    <p class=\"text-sm\">{message_text}</p>    <p class=\"text-xs text-gray-500\">{timestamp} - {author_name}</p>  </div></div>"
      },
      {
        "name": "PinnedMessageList",
        "html": "<div class=\"space-y-2\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A file upload input field with a label, allowing users to select a file to upload, with file type and size limits.",
    "component_list": [
      {
        "name": "FileUploadInput",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "FileInputLabel",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "FileSizeLimit",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "FileTypeLimit",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"flex flex-col\">\n  <FileInputLabel />\n  <FileUploadInput />\n  <FileSizeLimit />\n  <FileTypeLimit />\n</div>\n",
    "component_html": [
      {
        "name": "FileUploadInput",
        "html": "<input  type=\"file\"  id=\"file-upload\"  class=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold\"  accept=\"{accepted_file_types}\"  max-size=\"{max_file_size}\"/>"
      },
      {
        "name": "FileInputLabel",
        "html": "<label for=\"file-upload\" class=\"text-sm mb-2 block\">Select a file to upload:</label>"
      },
      {
        "name": "FileSizeLimit",
        "html": "<p class=\"text-xs text-gray-500\">Max file size: {max_file_size} MB</p>"
      },
      {
        "name": "FileTypeLimit",
        "html": "<p class=\"text-xs text-gray-500\">Accepted file types: {accepted_file_types}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of roles with their corresponding permissions. Each role should have an edit button that opens a modal to edit the permissions.",
    "component_list": [
      {
        "name": "RoleList",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "RoleItem",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "PermissionModal",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "PermissionEditor",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "PermissionToggle",
        "is_standalone": true,
        "description": "standalone "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <RoleList>\n    <!-- list of roles -->\n    <RoleItem>\n      <span>{role_name}</span>\n      <button className=\"ml-2\">Edit</button>\n      <PermissionModal>\n        <PermissionEditor />\n      </PermissionModal>\n    </RoleItem>\n  </RoleList>\n</div>\n",
    "component_html": [
      {
        "name": "RoleList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "RoleItem",
        "html": "<li className=\"flex justify-between mb-2\">  {children}</li>"
      },
      {
        "name": "PermissionModal",
        "html": "<div className=\"fixed top-0 left-0 w-full h-full bg-gray-500 bg-opacity-50 z-50\">  <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 p-4 bg-white rounded\">    {children}  </div></div>"
      },
      {
        "name": "PermissionEditor",
        "html": "<div className=\"flex flex-col\">  <h2 className=\"mb-2\">Edit Permissions</h2>  <div className=\"flex flex-col\">    <PermissionToggle label=\"Manage Users\" permission=\"manage_users\" />    <PermissionToggle label=\"Manage Roles\" permission=\"manage_roles\" />    <!-- add more permissions here -->  </div>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Save</button></div>"
      },
      {
        "name": "PermissionToggle",
        "html": "<div className=\"flex mb-2\">  <input type=\"checkbox\" id={permission} />  <label htmlFor={permission}>{label}</label></div>"
      }
    ]
  },
  {
    "description": "A UI with a search bar at the top, followed by a tabs bar with categories (e.g. \"Smileys\", \"Animals\", etc.), and a grid of emojis below.",
    "component_list": [
      {
        "name": "EmojiPicker",
        "is_standalone": true,
        "description": "standalone, contains the entire emoji picker UI "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone, contains the search input field "
      },
      {
        "name": "CategoriesBar",
        "is_standalone": true,
        "description": "standalone, contains the tabs for categories "
      },
      {
        "name": "EmojiGrid",
        "is_standalone": false,
        "description": "takes children, contains the grid of emojis "
      },
      {
        "name": "Emoji",
        "is_standalone": true,
        "description": "standalone, represents a single emoji "
      },
      {
        "name": "CategoryTab",
        "is_standalone": true,
        "description": "standalone, represents a single category tab "
      }
    ],
    "main_html": "<div className=\"flex flex-col h-screen\">\n  <SearchBar />\n  <CategoriesBar>\n    <CategoryTab>Smileys</CategoryTab>\n    <CategoryTab>Animals</CategoryTab>\n    <!-- more categories here -->\n  </CategoriesBar>\n  <EmojiGrid>\n    <Emoji>{emoji1}</Emoji>\n    <Emoji>{emoji2}</Emoji>\n    <!-- more emojis here -->\n  </EmojiGrid>\n</div>\n",
    "component_html": [
      {
        "name": "EmojiPickerjs",
        "html": "<div className=\"flex flex-col h-screen\">  <SearchBar />  <CategoriesBar>    {children}  </CategoriesBar>  <EmojiGrid>    {children}  </EmojiGrid></div>"
      },
      {
        "name": "SearchBarjs",
        "html": "<input   className=\"bg-white border border-gray-300 rounded py-2 px-4 w-full\"  type=\"search\"   placeholder=\"Search emojis\"/>"
      },
      {
        "name": "CategoriesBarjs",
        "html": "<div className=\"flex justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "EmojiGridjs",
        "html": "<div className=\"grid grid-cols-4 gap-4\">  {children}</div>"
      },
      {
        "name": "Emojijs",
        "html": "<div className=\"text-3xl\">{emoji}</div>"
      },
      {
        "name": "CategoryTabjs",
        "html": "<button   className=\"bg-white border border-gray-300 rounded py-2 px-4 mr-2\">{categoryName}</button>"
      }
    ]
  },
  {
    "description": "A dashboard that displays key metrics and KPIs in a clean and organized manner, with clear headings and visualizations to help users quickly understand the data.",
    "component_list": [
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "(standalone): A navigation bar that displays the dashboard title and any additional navigation options. "
      },
      {
        "name": "MetricCard",
        "is_standalone": false,
        "description": "(takes children): A card that displays a single metric or KPI, such as a title, value, and optional icon or chart. "
      },
      {
        "name": "MetricSection",
        "is_standalone": false,
        "description": "(takes children): A section that groups multiple `MetricCard`s together, with a title and optional description. "
      }
    ],
    "main_html": "<!-- Navigation and header -->\n<DashboardHeader />\n\n<!-- Main content area -->\n<div class=\"flex flex-wrap justify-center\">\n  <!-- Section 1: Overview -->\n  <MetricSection>\n    <MetricCard />\n    <MetricCard />\n    <MetricCard />\n  </MetricSection>\n\n  <!-- Section 2: Revenue -->\n  <MetricSection>\n    <MetricCard />\n    <MetricCard />\n  </MetricSection>\n\n  <!-- Section 3: Engagement -->\n  <MetricSection>\n    <MetricCard />\n    <MetricCard />\n    <MetricCard />\n  </MetricSection>\n</div>\n",
    "component_html": [
      {
        "name": "DashboardHeader",
        "html": "<nav class=\"bg-gray-100 py-4\">  <h1 class=\"text-2xl font-bold\">{dashboard_title}</h1>  <!-- Additional navigation options -->  <ul class=\"flex justify-end\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>  </ul></nav>"
      },
      {
        "name": "MetricCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">{metric_title}</h2>  <p class=\"text-3xl font-bold\">{metric_value}</p>  <!-- Optional icon or chart -->  <div class=\"text-gray-500\">{metric_icon_or_chart}</div></div>"
      },
      {
        "name": "MetricSection",
        "html": "<section class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{section_title}</h2>  <!-- Optional description -->  <p class=\"text-gray-600\">{section_description}</p>  {children}</section>"
      }
    ]
  },
  {
    "description": "The Lead Form UI should be a compact, responsive form with a simple and clean design. It should have input fields for the prospect's name, email, phone number, and a message. The form should also have a submit button.",
    "component_list": [
      {
        "name": "LeadFormContainer",
        "is_standalone": true,
        "description": "a standalone component that wraps the entire form. "
      },
      {
        "name": "FormLabel",
        "is_standalone": true,
        "description": "a standalone component that displays a label for an input field. "
      },
      {
        "name": "FormInput",
        "is_standalone": false,
        "description": "a component that takes children (the input field itself). "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "a standalone component for the submit button. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <LeadFormContainer>\n    <FormLabel forKey=\"name\">Name:</FormLabel>\n    <FormInput type=\"text\" id=\"name\" />\n    <FormLabel forKey=\"email\">Email:</FormLabel>\n    <FormInput type=\"email\" id=\"email\" />\n    <FormLabel forKey=\"phone\">Phone:</FormLabel>\n    <FormInput type=\"tel\" id=\"phone\" />\n    <FormLabel forKey=\"message\">Message:</FormLabel>\n    <FormInput type=\"textarea\" id=\"message\" />\n    <SubmitButton>Submit</SubmitButton>\n  </LeadFormContainer>\n</div>\n",
    "component_html": [
      {
        "name": "LeadFormContainer",
        "html": "<div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">  {children}</div>"
      },
      {
        "name": "FormLabel",
        "html": "<label class=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" for=\"{forKey}\">  {children}</label>"
      },
      {
        "name": "FormInput",
        "html": "<input class=\"appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white\" id=\"{id}\" type=\"{type}\" />"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A minimalist contact list with a search bar, a list of contacts, and a button to add a new contact.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component for searching contacts "
      },
      {
        "name": "ContactList",
        "is_standalone": false,
        "description": "takes children (list of contacts) "
      },
      {
        "name": "ContactItem",
        "is_standalone": false,
        "description": "takes children (contact information) "
      },
      {
        "name": "AddContactButton",
        "is_standalone": true,
        "description": "standalone component for adding a new contact "
      }
    ],
    "main_html": "<div className=\"flex flex-col h-screen\">\n  <SearchBar />\n  <ContactList>\n    <!-- list of contacts will be rendered here -->\n  </ContactList>\n  <AddContactButton />\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<input   type=\"search\"   className=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder=\"Search contacts...\" />"
      },
      {
        "name": "ContactList",
        "html": "<ul className=\"divide-y divide-gray-200\">  {children} <!-- list of ContactItem components --></ul>"
      },
      {
        "name": "ContactItem",
        "html": "<li className=\"py-4\">  <div className=\"flex items-center\">    <img       src=\"{contact_image}\"       alt=\"Contact image\"       className=\"w-10 h-10 rounded-full\"    />    <div className=\"ml-4\">      <p className=\"text-sm font-medium\">{contact_name}</p>      <p className=\"text-xs text-gray-500\">{contact_email}</p>    </div>  </div></li>"
      },
      {
        "name": "AddContactButton",
        "html": "<button   className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add Contact</button>"
      }
    ]
  },
  {
    "description": "The UI should be a calendar view with a sidebar to create and assign tasks. The calendar should have a header with the current month and navigation buttons to move between months. The calendar grid should display days of the week and dates, with tasks listed underneath each date. The sidebar should have a form to create a new task and a list of existing tasks that can be assigned to users.",
    "component_list": [
      {
        "name": "CalendarHeader",
        "is_standalone": true,
        "description": "(standalone): Display the current month and navigation buttons. "
      },
      {
        "name": "CalendarGrid",
        "is_standalone": true,
        "description": "(standalone): Display the calendar grid with days of the week and dates. "
      },
      {
        "name": "TaskList",
        "is_standalone": false,
        "description": "(takes children): Display a list of existing tasks that can be assigned to users. "
      },
      {
        "name": "TaskForm",
        "is_standalone": true,
        "description": "(standalone): A form to create a new task. "
      },
      {
        "name": "TaskCard",
        "is_standalone": false,
        "description": "(takes children): Display a single task with its details and assignment information. "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <div className=\"w-64 bg-white shadow-md p-4\">\n    <TaskForm />\n    <TaskList>\n      <TaskCard />\n    </TaskList>\n  </div>\n  <div className=\"flex-1 p-4\">\n    <CalendarHeader />\n    <CalendarGrid />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "CalendarHeader",
        "html": "<div className=\"flex justify-between p-4\">  <h2>{currentMonth}</h2>  <button className=\"text-gray-600 hover:text-gray-900\" onClick={() => {navigateToPreviousMonth()}}>«</button>  <button className=\"text-gray-600 hover:text-gray-900\" onClick={() => {navigateToNextMonth()}}>»</button></div>"
      },
      {
        "name": "CalendarGrid",
        "html": "<table className=\"w-full\">  <thead>    <tr>      <th>Mon</th>      <th>Tue</th>      <th>Wed</th>      <th>Thu</th>      <th>Fri</th>      <th>Sat</th>      <th>Sun</th>    </tr>  </thead>  <tbody>    <!-- calendar grid cells with dates and tasks -->    {calendarCells}  </tbody></table>"
      },
      {
        "name": "TaskList",
        "html": "<div>  <h3>Tasks</h3>  <ul>    {children}  </ul></div>"
      },
      {
        "name": "TaskForm",
        "html": "<form className=\"p-4\">  <label>Task Name:</label>  <input type=\"text\" className=\"w-full p-2\" />  <label>Assign to:</label>  <select className=\"w-full p-2\">    {users}  </select>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white p-2\" type=\"submit\">Create Task</button></form>"
      },
      {
        "name": "TaskCard",
        "html": "<div className=\"p-4 border-b\">  <h4>{taskName}</h4>  <p>Assigned to: {assignedTo}</p>  <p>Due: {dueDate}</p></div>"
      }
    ]
  },
  {
    "description": "A table displaying a list of users with their respective roles and permissions, along with actions to edit or delete the user.",
    "component_list": [
      {
        "name": "PermissionTable",
        "is_standalone": true,
        "description": "Standalone component that displays the table of users and their permissions. "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "Takes children, represents a single row in the table, displaying user information and actions. "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "Standalone component, a button for editing or deleting a user. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">User Permissions</h2>\n  <PermissionTable/>\n</div>\n",
    "component_html": [
      {
        "name": "PermissionTable",
        "html": "<table class=\"w-full border-collapse\">  <thead>    <tr class=\"bg-gray-100\">      <th class=\"py-2 px-4\">User</th>      <th class=\"py-2 px-4\">Role</th>      <th class=\"py-2 px-4\">Permissions</th>      <th class=\"py-2 px-4\">Actions</th>    </tr>  </thead>  <tbody>    <!-- TableRow components will be rendered here -->  </tbody></table>"
      },
      {
        "name": "TableRow",
        "html": "<tr>  <td class=\"py-2 px-4\">{username}</td>  <td class=\"py-2 px-4\">{role}</td>  <td class=\"py-2 px-4\">{permissions}</td>  <td class=\"py-2 px-4\">    <ActionButton type=\"edit\" label=\"Edit\" />    <ActionButton type=\"delete\" label=\"Delete\" />  </td></tr>"
      },
      {
        "name": "ActionButton",
        "html": "<button class={`bg-${type === 'edit' ? 'blue-500' : 'red-500'} hover:bg-${type === 'edit' ? 'blue-700' : 'red-700'} text-white font-bold py-2 px-4 rounded`}>  {label}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a simple card component that displays a title, a brief description, and a chart to visualize the revenue forecast. The card should have a clean and modern design, with a prominent title and a subtle background color.",
    "component_list": [
      {
        "name": "RevenueCard",
        "is_standalone": true,
        "description": "A standalone component that renders a card with a title, description, and a chart. "
      },
      {
        "name": "Chart",
        "is_standalone": true,
        "description": "A standalone component that renders a chart to visualize the revenue forecast. "
      },
      {
        "name": "CardTitle",
        "is_standalone": false,
        "description": "A component that takes children to render a title inside the card. "
      },
      {
        "name": "CardDescription",
        "is_standalone": false,
        "description": "A component that takes children to render a brief description inside the card. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto bg-white shadow-md p-4 rounded\">\n  <RevenueCard>\n    <CardTitle>Revenue Forecast</CardTitle>\n    <CardDescription>Predict future sales</CardDescription>\n    <Chart />\n  </RevenueCard>\n</div>\n",
    "component_html": [
      {
        "name": "RevenueCard",
        "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{children[0]}</h2>  <p class=\"text-gray-600\">{children[1]}</p>  <div class=\"h-48\">{children[2]}</div></div>"
      },
      {
        "name": "Chart",
        "html": "<canvas class=\"w-full h-full\" id=\"revenue-chart\"></canvas>"
      },
      {
        "name": "CardTitle",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "CardDescription",
        "html": "<p class=\"text-gray-600\">{children}</p>"
      }
    ]
  },
  {
    "description": "A sales pipeline visualization, a horizontal timeline showing the different stages of a sales process, with each stage represented by a column, and deal cards displayed within each column.",
    "component_list": [
      {
        "name": "PipelineStage",
        "is_standalone": true,
        "description": "(standalone) - A single stage in the sales pipeline. "
      },
      {
        "name": "DealCard",
        "is_standalone": true,
        "description": "(standalone) - A card representing a deal at a specific stage in the pipeline. "
      },
      {
        "name": "Pipeline",
        "is_standalone": false,
        "description": "(takes children) - The container for all pipeline stages. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center\">\n  <Pipeline>\n    <PipelineStage stageName=\"Lead\" />\n    <PipelineStage stageName=\"Qualification\" />\n    <PipelineStage stageName=\"Demo\" />\n    <PipelineStage stageName=\"Proposal\" />\n    <PipelineStage stageName=\"Closed Won\" />\n  </Pipeline>\n</div>\n",
    "component_html": [
      {
        "name": "Pipeline",
        "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
      },
      {
        "name": "PipelineStage",
        "html": "<div class=\"px-4 py-2 w-1/5 xl:w-1/6\">  <h3 class=\"text-lg\">{stageName}</h3>  <div class=\"flex flex-wrap justify-center\">    <!-- Deal cards will be rendered here -->  </div></div>"
      },
      {
        "name": "DealCard",
        "html": "<div class=\"bg-white shadow-md rounded px-4 py-2 mb-2 w-full\">  <h4 class=\"text-lg\">{dealName}</h4>  <p>Value: {dealValue}</p>  <p>Owner: {dealOwner}</p></div>"
      }
    ]
  },
  {
    "description": "A simple profile page with a header, customer information, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "CustomerProfileHeader",
        "is_standalone": true,
        "description": "Standalone component to display the customer's profile picture and name. "
      },
      {
        "name": "CustomerInfoSection",
        "is_standalone": false,
        "description": "Takes children to display customer information such as email, phone number, and address. "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "Standalone component to render a CTA button with a customizable label. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <CustomerProfileHeader />\n  <div class=\"mt-4\">\n    <CustomerInfoSection>\n      <p><strong>Email:</strong> {customer_email}</p>\n      <p><strong>Phone:</strong> {customer_phone}</p>\n      <p><strong>Address:</strong> {customer_address}</p>\n    </CustomerInfoSection>\n  </div>\n  <div class=\"mt-6\">\n    <CallToActionButton />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "CustomerProfileHeader",
        "html": "<div class=\"flex flex-col items-center\">  <img src={customer_profile_picture} class=\"w-24 h-24 rounded-full\" alt=\"Customer Profile Picture\" />  <h2 class=\"text-lg font-bold\">{customer_name}</h2></div>"
      },
      {
        "name": "CustomerInfoSection",
        "html": "<div class=\"bg-white shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{cta_label}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a structured overview of data insights, providing an at-a-glance view of key metrics and trends. The layout should be clean, modern, and easy to navigate, with clear headings, concise labels, and prominent use of data visualization elements.",
    "component_list": [
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "Standalone component displaying the title and navigation for the dashboard. "
      },
      {
        "name": "MetricCard",
        "is_standalone": false,
        "description": "Component that takes children, displaying a single key metric (e.g., \"Total Users\") with a value and optional visualization (e.g., chart, gauge). "
      },
      {
        "name": "TrendChart",
        "is_standalone": true,
        "description": "Standalone component rendering a line chart or area chart to illustrate trends over time. "
      },
      {
        "name": "DataGrid",
        "is_standalone": false,
        "description": "Component that takes children, displaying a sortable, paginated table of data with customizable columns. "
      },
      {
        "name": "FilterBar",
        "is_standalone": true,
        "description": "Standalone component providing filters and sorting options for the data grid. "
      }
    ],
    "main_html": "<div className=\"max-w-7xl mx-auto py-6 px-4\">\n  <DashboardHeader />\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <MetricCard><MetricCard/>\n    <MetricCard><MetricCard/>\n    <MetricCard><MetricCard/>\n  </div>\n  <TrendChart />\n  <FilterBar />\n  <DataGrid>\n    <!-- Data grid rows will be rendered here -->\n  </DataGrid>\n</div>\n",
    "component_html": [
      {
        "name": "DashboardHeader",
        "html": "<div className=\"flex justify-between mb-4\">  <h1 className=\"text-3xl font-bold\">{dashboard_title}</h1>  <nav>    <ul className=\"flex space-x-4\">      <li><a href=\"#\" className=\"text-gray-600\">{nav_item_1}</a></li>      <li><a href=\"#\" className=\"text-gray-600\">{nav_item_2}</a></li>    </ul>  </nav></div>"
      },
      {
        "name": "MetricCard",
        "html": "<div className=\"bg-white shadow-md p-4\">  <h2 className=\"text-lg font-bold\">{metric_label}</h2>  <p className=\"text-3xl font-bold\">{metric_value}</p>  <!-- Optional visualization -->  <div className=\"h-48\">{children}</div></div>"
      },
      {
        "name": "TrendChart",
        "html": "<div className=\"bg-white shadow-md p-4\">  <h2 className=\"text-lg font-bold\">{chart_title}</h2>  <div className=\"h-96\">{chart_data}</div></div>"
      },
      {
        "name": "DataGrid",
        "html": "<table className=\"w-full\">  <thead>    <tr>      <th>{column_header_1}</th>      <th>{column_header_2}</th>      <th>{column_header_3}</th>    </tr>  </thead>  <tbody>    <!-- Data grid rows will be rendered here -->    {children}  </tbody></table>"
      },
      {
        "name": "FilterBar",
        "html": "<div className=\"flex justify-between mb-4\">  <select className=\"py-2 px-3 border border-gray-300\">    <option value=\"\">{filter_option_1}</option>    <option value=\"\">{filter_option_2}</option>  </select>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {filter_button_label}  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should be a user management page that displays a list of user accounts, with options to edit or delete each account. The page should have a header with a title, a search bar, and an \"Add User\" button. Below the header, there should be a table with columns for user name, email, role, and actions.",
    "component_list": [
      {
        "name": "HeaderView",
        "is_standalone": true,
        "description": "standalone, displays the page title and search bar "
      },
      {
        "name": "UserTable",
        "is_standalone": true,
        "description": "standalone, displays the table with user data "
      },
      {
        "name": "UserTableHeader",
        "is_standalone": true,
        "description": "standalone, displays the table header with column names "
      },
      {
        "name": "UserTableRow",
        "is_standalone": false,
        "description": "takes children, displays a single row of user data with actions "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "standalone, displays an edit or delete button "
      },
      {
        "name": "AddUserButton",
        "is_standalone": true,
        "description": "standalone, displays the \"Add User\" button "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen\">\n  <HeaderView />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <UserTable>\n      <UserTableHeader />\n      <!-- table rows will be rendered here -->\n    </UserTable>\n  </div>\n  <AddUserButton />\n</div>\n",
    "component_html": [
      {
        "name": "HeaderView",
        "html": "<header class=\"flex justify-between items-center p-4\">  <h1 class=\"text-2xl font-bold\">User Management</h1>  <input type=\"search\" class=\"py-2 pl-10 pr-4 text-sm text-gray-700\" placeholder=\"Search users\" /></header>"
      },
      {
        "name": "UserTable",
        "html": "<table class=\"w-full text-sm\">  <thead>    <UserTableHeader />  </thead>  <tbody>    <!-- table rows will be rendered here -->  </tbody></table>"
      },
      {
        "name": "UserTableHeader",
        "html": "<tr>  <th class=\"px-4 py-2\">Name</th>  <th class=\"px-4 py-2\">Email</th>  <th class=\"px-4 py-2\">Role</th>  <th class=\"px-4 py-2\">Actions</th></tr>"
      },
      {
        "name": "UserTableRow",
        "html": "<tr class=\"hover:bg-gray-100\">  <td class=\"px-4 py-2\">{userName}</td>  <td class=\"px-4 py-2\">{userEmail}</td>  <td class=\"px-4 py-2\">{userRole}</td>  <td class=\"px-4 py-2\">    <ActionButton> Edit </ActionButton>    <ActionButton> Delete </ActionButton>  </td></tr>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-sm text-white py-1 px-2 rounded\">  {buttonText}</button>"
      },
      {
        "name": "AddUserButton",
        "html": "<button class=\"bg-green-500 hover:bg-green-700 text-sm text-white py-1 px-2 rounded\">  Add User</button>"
      }
    ]
  },
  {
    "description": "The UI should be a simple upload form with a file input and a submit button. It should also display the status of the upload (e.g. \"Uploading...\", \"Upload successful\", or \"Upload failed\").",
    "component_list": [
      {
        "name": "DataImporter",
        "is_standalone": true,
        "description": "The main component that wraps the entire UI. Standalone. "
      },
      {
        "name": "FileInput",
        "is_standalone": true,
        "description": "A component that renders a file input field. Standalone. "
      },
      {
        "name": "UploadButton",
        "is_standalone": true,
        "description": "A component that renders a submit button. Standalone. "
      },
      {
        "name": "UploadStatus",
        "is_standalone": true,
        "description": "A component that displays the status of the upload. Standalone. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <DataImporter>\n    <FileInput/>\n    <UploadButton/>\n    <UploadStatus/>\n  </DataImporter>\n</div>\n",
    "component_html": [
      {
        "name": "DataImporter",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  {children}</div>"
      },
      {
        "name": "FileInput",
        "html": "<input type=\"file\" className=\"block w-full text-sm text-gray-700\" />"
      },
      {
        "name": "UploadButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Upload</button>"
      },
      {
        "name": "UploadStatus",
        "html": "<p className=\"text-sm text-gray-600\">{upload_status}</p>"
      }
    ]
  },
  {
    "description": "A menu with a list of theme options, where each option displays a preview of the theme and allows the user to select it.",
    "component_list": [
      {
        "name": "ThemeOption",
        "is_standalone": true,
        "description": "(standalone): a single theme option with a preview and a checkbox to select it "
      },
      {
        "name": "ThemeSelector",
        "is_standalone": false,
        "description": "(takes children): a container for a list of theme options "
      }
    ],
    "main_html": "<div class=\"w-full p-4 bg-gray-100 rounded\">\n  <h2 class=\"text-lg font-bold mb-2\">Customizable Themes</h2>\n  <ThemeSelector>\n    <ThemeOption />\n    <ThemeOption />\n    <ThemeOption />\n    <!-- more theme options here -->\n  </ThemeSelector>\n</div>\n",
    "component_html": [
      {
        "name": "ThemeOption",
        "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" class=\"mr-2\" />  <div class=\"w-12 h-6 bg-{theme_color} mr-2\" />  <span class=\"text-sm\">{theme_name}</span></div>"
      },
      {
        "name": "ThemeSelector",
        "html": "<ul class=\"list-none mb-0\">{children}</ul>"
      }
    ]
  },
  {
    "description": "The Notifications Panel should be a dropdown list of system updates, with each update displaying a brief message and a timestamp. The panel should have a subtle background and border, with a slight shadow to give it depth.",
    "component_list": [
      {
        "name": "NotificationPanel",
        "is_standalone": true,
        "description": "Standalone component that renders the dropdown list of system updates. "
      },
      {
        "name": "NotificationItem",
        "is_standalone": false,
        "description": "Component that takes children, rendering a single system update with a brief message and timestamp. "
      }
    ],
    "main_html": "<div className=\"bg-white shadow-md rounded px-4 py-2 absolute top-12 right-4 w-64\">\n  <NotificationPanel/>\n</div>\n",
    "component_html": [
      {
        "name": "NotificationPanel",
        "html": "<div className=\"divide-y divide-gray-200\">  {children}</div>"
      },
      {
        "name": "NotificationItem",
        "html": "<div className=\"py-2\">  <p>{update_message}</p>  <p className=\"text-xs text-gray-400\">{update_timestamp}</p></div>"
      }
    ]
  },
  {
    "description": "A multi-step wizard with a sidebar that displays the different steps, and a main content area that changes based on the current step.",
    "component_list": [
      {
        "name": "ReportingWizard",
        "is_standalone": false,
        "description": "The main wizard component that contains the sidebar and main content area. (Takes children) "
      },
      {
        "name": "WizardSidebar",
        "is_standalone": true,
        "description": "The sidebar that displays the different steps. (Standalone) "
      },
      {
        "name": "WizardStep",
        "is_standalone": true,
        "description": "A single step in the wizard that contains a title and description. (Standalone) "
      },
      {
        "name": "WizardContent",
        "is_standalone": false,
        "description": "The main content area that displays the current step's content. (Takes children) "
      },
      {
        "name": "WizardActionButtons",
        "is_standalone": true,
        "description": "The buttons to navigate through the wizard (next, previous, finish). (Standalone) "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <WizardSidebar>\n    <WizardStep title=\"Select Report Type\" description=\"Choose the type of report you want to create.\" />\n    <WizardStep title=\"Configure Report\" description=\"Customize your report settings.\" />\n    <WizardStep title=\"Review and Finish\" description=\"Review your report and finish creating it.\" />\n  </WizardSidebar>\n  <WizardContent>\n    < ReportingWizardContentStepOne /> <!-- inserted by ReportingWizard -->\n  </WizardContent>\n  <WizardActionButtons />\n</div>\n",
    "component_html": [
      {
        "name": "ReportingWizard",
        "html": "<div className=\"flex flex-grow\">  <WizardSidebar>{children}</WizardSidebar>  <WizardContent>{children}</WizardContent>  <WizardActionButtons /></div>"
      },
      {
        "name": "WizardSidebar",
        "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h5 className=\"uppercase text-sm font-bold mb-4\">Steps</h5>  {children}</div>"
      },
      {
        "name": "WizardStep",
        "html": "<div className=\"flex flex-col mb-4\">  <h5 className=\"text-sm font-bold\">{title}</h5>  <p className=\"text-gray-600\">{description}</p></div>"
      },
      {
        "name": "WizardContent",
        "html": "<div className=\"flex-grow p-4\">  {children}</div>"
      },
      {
        "name": "WizardActionButtons",
        "html": "<div className=\"fixed bottom-0 left-0 right-0 p-4 bg-gray-100\">  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Next</button>  <button className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded ml-2\">Previous</button>  <button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ml-2\">Finish</button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a chart builder with a header, a sidebar, and a main content area. The header will have a title and a button to toggle the sidebar. The sidebar will have a list of chart types and a search bar. The main content area will display the selected chart type and a chart configuration section.",
    "component_list": [
      {
        "name": "ChartBuilder",
        "is_standalone": true,
        "description": "(standalone): The top-level component that contains the entire UI. "
      },
      {
        "name": "HeaderBar",
        "is_standalone": true,
        "description": "(standalone): The top navigation bar with a title and a toggle button. "
      },
      {
        "name": "Sidebar",
        "is_standalone": false,
        "description": "(takes children): The sidebar component that contains the chart type list and search bar. "
      },
      {
        "name": "ChartTypeList",
        "is_standalone": false,
        "description": "(takes children): The list of chart types. "
      },
      {
        "name": "ChartTypeItem",
        "is_standalone": true,
        "description": "(standalone): A single chart type item in the list. "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone): The search bar component. "
      },
      {
        "name": "MainContent",
        "is_standalone": false,
        "description": "(takes children): The main content area that displays the selected chart type and chart configuration. "
      },
      {
        "name": "ChartDisplay",
        "is_standalone": false,
        "description": "(takes children): The component that displays the selected chart type. "
      },
      {
        "name": "ChartConfigurator",
        "is_standalone": false,
        "description": "(takes children): The component that allows users to configure the chart. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <HeaderBar />\n  <div class=\"flex-1 flex\">\n    <Sidebar>\n      <ChartTypeList>\n        <ChartTypeItem />\n        <!-- more chart type items -->\n      </ChartTypeList>\n      <SearchBar />\n    </Sidebar>\n    <MainContent>\n      <ChartDisplay>\n        <!-- chart will be rendered here -->\n      </ChartDisplay>\n      <ChartConfigurator>\n        <!-- chart configuration options will be rendered here -->\n      </ChartConfigurator>\n    </MainContent>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "HeaderBar",
        "html": "<div class=\"flex justify-between p-4 bg-gray-100\">  <h1 class=\"text-lg\">{app_title}</h1>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Toggle Sidebar  </button></div>"
      },
      {
        "name": "Sidebar",
        "html": "<div class=\"w-64 bg-gray-100 p-4\">  {children}</div>"
      },
      {
        "name": "ChartTypeList",
        "html": "<ul class=\"list-none p-0\">  {children}</ul>"
      },
      {
        "name": "ChartTypeItem",
        "html": "<li class=\"py-2 pl-4 pr-2 hover:bg-gray-200\">  <a class=\"text-gray-600 hover:text-gray-900\">{chart_type_name}</a></li>"
      },
      {
        "name": "SearchBar",
        "html": "<input class=\"bg-gray-200 p-2 pl-10 text-gray-600\" type=\"text\" placeholder=\"Search charts\" />"
      },
      {
        "name": "MainContent",
        "html": "<div class=\"flex-1 p-4\">  {children}</div>"
      },
      {
        "name": "ChartDisplay",
        "html": "<div class=\"flex-1\">  <!-- chart will be rendered here --></div>"
      },
      {
        "name": "ChartConfigurator",
        "html": "<div class=\"p-4\">  <!-- chart configuration options will be rendered here --></div>"
      }
    ]
  },
  {
    "description": "The Security Center UI should display a header with a title and a navigation menu. The main content area should have a grid layout with three sections: System Overview, Threat Detection, and Security Recommendations.",
    "component_list": [
      {
        "name": "HeaderBar",
        "is_standalone": true,
        "description": "(standalone): a navigation bar with a title and menu items "
      },
      {
        "name": "SystemOverview",
        "is_standalone": true,
        "description": "(standalone): a section displaying system security overview "
      },
      {
        "name": "ThreatDetection",
        "is_standalone": true,
        "description": "(standalone): a section displaying threat detection information "
      },
      {
        "name": "SecurityRecommendations",
        "is_standalone": true,
        "description": "(standalone): a section displaying security recommendations "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "(takes children): a navigation item in the header bar "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6\">\n  <HeaderBar/>\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n    <SystemOverview/>\n    <ThreatDetection/>\n    <SecurityRecommendations/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "HeaderBar",
        "html": "<nav class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Security Center</h1>  <ul class=\"flex\">    <NavItem>Dashboard</NavItem>    <NavItem>Settings</NavItem>    <NavItem>Help</NavItem>  </ul></nav>"
      },
      {
        "name": "NavItem",
        "html": "<li class=\"mr-4\"><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{navItemLabel}</a></li>"
      },
      {
        "name": "SystemOverview",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg\">System Overview</h2>  <p>System Status: {systemStatus}</p>  <p>Updated: {lastUpdated}</p></section>"
      },
      {
        "name": "ThreatDetection",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg\">Threat Detection</h2>  <p>{threatDetectionMessage}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Details</button></section>"
      },
      {
        "name": "SecurityRecommendations",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg\">Security Recommendations</h2>  <ul>    <li>{recommendation1}</li>    <li>{recommendation2}</li>    <li>{recommendation3}</li>  </ul></section>"
      }
    ]
  },
  {
    "description": "The UI should display a sidebar with a list of APIs, and a main content area that shows the details of the selected API, including its endpoints.",
    "component_list": [
      {
        "name": "ApiSidebar",
        "is_standalone": true,
        "description": "a standalone component that displays a list of APIs "
      },
      {
        "name": "ApiDetails",
        "is_standalone": false,
        "description": "a component that takes children, displaying details about a selected API "
      },
      {
        "name": "ApiEndpoint",
        "is_standalone": true,
        "description": "a standalone component that displays a single API endpoint "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <ApiSidebar />\n  <div class=\"flex-1 p-4\">\n    <ApiDetails>\n      <h1>{api_name}</h1>\n      <p>{api_description}</p>\n      <ul>\n        <!-- list of endpoints -->\n        <ApiEndpoint />\n        <ApiEndpoint />\n        <!-- ... -->\n      </ul>\n    </ApiDetails>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ApiSidebar",
        "html": "<nav class=\"w-64 p-4 bg-gray-100\">  <h2>APIs</h2>  <ul>    <!-- list of APIs -->    <li><a href=\"#\" class=\"block p-2\">{api_name}</a></li>    <!-- ... -->  </ul></nav>"
      },
      {
        "name": "ApiDetails",
        "html": "<div>  {children}</div>"
      },
      {
        "name": "ApiEndpoint",
        "html": "<li class=\"p-2 border-b border-gray-200\">  <h3>{endpoint_method} {endpoint_path}</h3>  <p>{endpoint_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should look like a simple search bar with a text input field and a submit button. The search bar should be placed inside a container with a slight shadow and a white background. The text input field should have a placeholder text that says \"Search products...\" and the submit button should have a blue background color and white text that says \"Search\".",
    "component_list": [
      {
        "name": "SearchBarContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire search bar. "
      },
      {
        "name": "SearchInput",
        "is_standalone": false,
        "description": "A component that takes children (the input field and the submit button). "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "A standalone component that represents the submit button. "
      }
    ],
    "main_html": "<div className=\"shadow-md bg-white rounded p-4\">\n  <SearchBarContainer>\n    <SearchInput>\n      <input type=\"text\" placeholder=\"Search products...\"/>\n      <SearchButton>Search</SearchButton>\n    </SearchInput>\n  </SearchBarContainer>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBarContainer",
        "html": "<div className=\"flex justify-center\">  {children}</div>"
      },
      {
        "name": "SearchInput",
        "html": "<div className=\"flex items-center\">  <input type=\"text\" className=\"w-full p-2 border border-gray-200 rounded\" placeholder={placeholder} />  {children}</div>"
      },
      {
        "name": "SearchButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A product title and rating display, with the title in a larger font and the rating information below it.",
    "component_list": [
      {
        "name": "ProductTitle",
        "is_standalone": false,
        "description": "takes children (the title of the product) "
      },
      {
        "name": "ProductRating",
        "is_standalone": false,
        "description": "takes children (the rating information) "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <h2><ProductTitle/></h2>\n  <div class=\"text-sm text-gray-500\"><ProductRating/></div>\n</div>\n",
    "component_html": [
      {
        "name": "ProductTitle",
        "html": "<span class=\"text-lg font-bold\">{product_title}</span>"
      },
      {
        "name": "ProductRating",
        "html": "<span class=\"mr-2\">{rating}</span><span class=\"text-yellow-500\">{rating_icon}</span><span>({review_count} reviews)</span>"
      }
    ]
  },
  {
    "description": "The UI should display price and availability information in a clean and easy-to-read format. The price should be prominent, and the availability information should be displayed below it.",
    "component_list": [
      {
        "name": "PriceInfo",
        "is_standalone": true,
        "description": "Standalone component to display the price information. "
      },
      {
        "name": "AvailabilityInfo",
        "is_standalone": true,
        "description": "Standalone component to display the availability information. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <PriceInfo/>\n  <AvailabilityInfo/>\n</div>\n",
    "component_html": [
      {
        "name": "PriceInfo",
        "html": "<p class=\"text-lg font-bold\">{price_amount} {currency}</p>"
      },
      {
        "name": "AvailabilityInfo",
        "html": "<p>Availability: {availability_status}</p><!-- availability_status can be \"In Stock\", \"Out of Stock\", etc. --><p> Ships in {shipping_time} from {warehouse_location}</p>"
      }
    ]
  },
  {
    "description": "The UI should display two buttons side by side, one for adding an item to the cart and one for adding an item to the wishlist. The buttons should be rectangular with a slight rounded corner and a subtle shadow. The add to cart button should have a green background and white text, while the wishlist button should have a gray background and dark gray text.",
    "component_list": [
      {
        "name": "CartButton",
        "is_standalone": true,
        "description": "(standalone) - a button to add an item to the cart "
      },
      {
        "name": "WishlistButton",
        "is_standalone": true,
        "description": "(standalone) - a button to add an item to the wishlist "
      },
      {
        "name": "ButtonContainer",
        "is_standalone": false,
        "description": "(takes children) - a container to hold the two buttons side by side "
      }
    ],
    "main_html": "<div className=\"flex justify-content-between mb-4\">\n  <ButtonContainer>\n    <CartButton />\n    <WishlistButton />\n  </ButtonContainer>\n</div>\n",
    "component_html": [
      {
        "name": "ButtonContainer",
        "html": "<div className=\"inline-flex\">  {children}</div>"
      },
      {
        "name": "CartButton",
        "html": "<button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
      },
      {
        "name": "WishlistButton",
        "html": "<button className=\"bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
      }
    ]
  },
  {
    "description": "The UI should display a summary of customer reviews and ratings, showing the average rating, total number of reviews, and a breakdown of the rating distribution (e.g., 5-star, 4-star, 3-star, etc.).",
    "component_list": [
      {
        "name": "ReviewSummary",
        "is_standalone": true,
        "description": "a standalone component displaying the review summary. "
      },
      {
        "name": "RatingBreakdown",
        "is_standalone": true,
        "description": "a standalone component displaying the rating breakdown. "
      },
      {
        "name": "StarRating",
        "is_standalone": true,
        "description": "a standalone component displaying a single star rating. "
      }
    ],
    "main_html": "<div className=\"flex flex-col gap-4\">\n  <ReviewSummary />\n  <RatingBreakdown />\n</div>\n",
    "component_html": [
      {
        "name": "ReviewSummary",
        "html": "<div className=\"flex items-center gap-2\">  <p>Average rating: <span className=\"font-bold\">{average_rating}/5</span></p>  <p>{total_reviews} reviews</p></div>"
      },
      {
        "name": "RatingBreakdown",
        "html": "<dl className=\"flex flex-wrap gap-4\">  <dt>5-star:</dt>  <dd>{five_star_count}</dd>  <dt>4-star:</dt>  <dd>{four_star_count}</dd>  <dt>3-star:</dt>  <dd>{three_star_count}</dd>  <dt>2-star:</dt>  <dd>{two_star_count}</dd>  <dt>1-star:</dt>  <dd>{one_star_count}</dd></dl>"
      },
      {
        "name": "StarRating",
        "html": "<span className=\"text-lg\">  { Array(5).fill(0).map((_, i) => (    <i key={i} className={i < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733;</i>  ))}</span>"
      }
    ]
  },
  {
    "description": "A horizontal carousel displaying multiple products with images, names, and prices. The carousel should be responsive and have navigation arrows on both sides.",
    "component_list": [
      {
        "name": "ProductCard",
        "is_standalone": true,
        "description": "(standalone): Displays a single product with image, name, and price. "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "(standalone): Displays navigation arrows for the carousel. "
      },
      {
        "name": "Carousel",
        "is_standalone": false,
        "description": "(takes children): Container for the carousel, holds multiple **ProductCard** components. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <CarouselNavigation />\n  <Carousel>\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- Add more ProductCard components here -->\n  </Carousel>\n  <CarouselNavigation />\n</div>\n",
    "component_html": [
      {
        "name": "ProductCard",
        "html": "<div class=\"bg-white shadow-md rounded\">  <img src=\"{image_url}\" alt=\"{product_name}\" class=\"w-full h-48 object-cover rounded-t\" />  <div class=\"p-4\">    <h5 class=\"text-lg\">{product_name}</h5>    <p class=\"text-gray-600\">{price}</p>  </div></div>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<button class=\"bg-white border-none text-lg hover:text-gray-600 transition duration-300\">  {navigation_arrow}</button>"
      },
      {
        "name": "Carousel",
        "html": "<div class=\"flex overflow-x-hidden\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A horizontal list of links indicating the current navigation path.",
    "component_list": [
      {
        "name": "BreadcrumbNavigation",
        "is_standalone": true,
        "description": "standalone component that contains a list of breadcrumbs. "
      },
      {
        "name": "Breadcrumb",
        "is_standalone": true,
        "description": "standalone component that represents a single breadcrumb. "
      },
      {
        "name": "BreadcrumbSeparator",
        "is_standalone": true,
        "description": "standalone component that separates breadcrumbs. "
      }
    ],
    "main_html": "<nav class=\"flex items-center\">\n  <BreadcrumbNavigation>\n    <Breadcrumb><ComponentName/></Breadcrumb>\n    <BreadcrumbSeparator>/</BreadcrumbSeparator>\n    <Breadcrumb><ComponentName/></Breadcrumb>\n    <BreadcrumbSeparator>/</BreadcrumbSeparator>\n    <Breadcrumb><ComponentName/></Breadcrumb>\n  </BreadcrumbNavigation>\n</nav>\n",
    "component_html": [
      {
        "name": "BreadcrumbNavigation",
        "html": "<ul class=\"flex items-center\">  {children}</ul>"
      },
      {
        "name": "Breadcrumb",
        "html": "<li class=\"mr-2\"><a href=\"{breadcrumb_url}\" class=\"text-gray-600 hover:text-gray-900\">{breadcrumb_label}</a></li>"
      },
      {
        "name": "BreadcrumbSeparator",
        "html": "<li class=\"mx-2 text-gray-600\">{separator_symbol}</li>"
      }
    ]
  },
  {
    "description": "The UI should display search results with facets ( filters ) on the side, and a list of search results below.",
    "component_list": [
      {
        "name": "FacetFilter",
        "is_standalone": true,
        "description": "standalone component that displays a single facet filter (e.g. \"Price\", \"Brand\", etc.) "
      },
      {
        "name": "FacetFilters",
        "is_standalone": true,
        "description": "standalone component that displays a list of facet filters "
      },
      {
        "name": "SearchResult",
        "is_standalone": true,
        "description": "standalone component that displays a single search result "
      },
      {
        "name": "SearchResults",
        "is_standalone": false,
        "description": "component that takes children (a list of `SearchResult` components) to display the search results "
      },
      {
        "name": "FacetedSearch",
        "is_standalone": false,
        "description": "component that takes children (FacetFilters and SearchResults components) to display the faceted search results "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex flex-wrap -mx-4\">\n    <aside class=\"w-1/4 xl:w-1/5 px-4\">\n      <FacetFilters />\n    </aside>\n    <main class=\"w-3/4 xl:w-4/5 px-4\">\n      <SearchResults>\n        <SearchResult />\n        <!-- more SearchResult components here -->\n      </SearchResults>\n    </main>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "FacetFilter",
        "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h5 class=\"text-lg\">{facet_name}</h5>  <ul>    <li><a href=\"#\" class=\"text-blue-600\">{facet_option}</a></li>    <!-- more facet options here -->  </ul></div>"
      },
      {
        "name": "FacetFilters",
        "html": "<div class=\"space-y-4\">  <FacetFilter />  <!-- more FacetFilter components here --></div>"
      },
      {
        "name": "SearchResult",
        "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg\">{result_title}</h2>  <p>{result_description}</p>  <p>{download_count} downloads</p></div>"
      },
      {
        "name": "SearchResults",
        "html": "<div class=\"space-y-4\">  {children}</div>"
      },
      {
        "name": "FacetedSearch",
        "html": "<div class=\"container mx-auto p-4\">  <div class=\"flex flex-wrap -mx-4\">    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "A grid of product thumbnails with a title and price overlay.",
    "component_list": [
      {
        "name": "ProductThumbnail",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "ProductListing",
        "is_standalone": false,
        "description": "takes children (`ProductThumbnail` components) "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8\">\n  <h1>Product Listing</h1>\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n    <ProductThumbnail />\n    <ProductThumbnail />\n    <ProductThumbnail />\n    <!-- repeat ProductThumbnail components here -->\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ProductThumbnail",
        "html": "<div className=\"relative overflow-hidden shadow-md rounded-lg\">  <img src=\"{product_image}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover\" />  <div className=\"absolute bottom-0 left-0 p-4 text-white\">    <h5>{product_name}</h5>    <p>${product_price}</p>  </div></div>"
      },
      {
        "name": "ProductListing",
        "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A table displaying detailed product information, including product image, name, price, rating, and short description.",
    "component_list": [
      {
        "name": "ProductTable",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ProductTableRow",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "ProductImage",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ProductInfo",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "ProductRating",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <ProductTable>\n    <ProductTableRow>\n      <ProductImage />\n      <ProductInfo>\n        <h2 className=\"text-lg\">{product_name}</h2>\n        <p className=\"text-gray-600\">{short_description}</p>\n      </ProductInfo>\n      <ProductRating />\n      <p className=\"text-lg\">{price}</p>\n    </ProductTableRow>\n  </ProductTable>\n</div>\n",
    "component_html": [
      {
        "name": "ProductTable",
        "html": "<table className=\"table-auto border-collapse w-full\">  {children}</table>"
      },
      {
        "name": "ProductTableRow",
        "html": "<tr className=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
      },
      {
        "name": "ProductImage",
        "html": "<img src={image_url} className=\"w-24 h-24 rounded-lg\" />"
      },
      {
        "name": "ProductInfo",
        "html": "<div className=\"flex flex-col justify-center\">  {children}</div>"
      },
      {
        "name": "ProductRating",
        "html": "<div className=\"flex items-center\">  {rating} / 5  <i className=\"fas fa-star text-yellow-500 ml-1\"></i></div>"
      }
    ]
  },
  {
    "description": "The UI should display a product variant selector, which allows users to select a specific variant of a product (e.g., size, color). The selector should display a list of available variants, with each variant showing its name and a radio button to select it.",
    "component_list": [
      {
        "name": "ProductVariantSelector",
        "is_standalone": true,
        "description": "(standalone): The top-level component for the product variant selector. "
      },
      {
        "name": "VariantOption",
        "is_standalone": false,
        "description": "(takes children): A single variant option, displaying the variant name and a radio button. "
      }
    ],
    "main_html": "<div class=\"flex flex-col\">\n  <h2 class=\"text-lg font-bold\">Select a variant</h2>\n  <ul class=\"list-none mb-0\">\n    <ProductVariantSelector/>\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "ProductVariantSelector",
        "html": "<ul class=\"list-none mb-0\">  {variants.map((variant) => (    <li key={variant.id}>      <VariantOption value={variant.id}>{variant.name}</VariantOption>    </li>  ))}</ul>"
      },
      {
        "name": "VariantOption",
        "html": "<li class=\"flex items-center mb-2\">  <input type=\"radio\" id={value} name=\"variant\" value={value} />  <label for={value} class=\"ml-2\">{children}</label></li>"
      }
    ]
  },
  {
    "description": "The UI should be a secure payment information input section with input fields for card number, expiration date, security code, and a button to submit the payment information.",
    "component_list": [
      {
        "name": "CardNumberInput",
        "is_standalone": true,
        "description": "A standalone component for inputting the card number. "
      },
      {
        "name": "ExpirationDateInput",
        "is_standalone": true,
        "description": "A standalone component for inputting the expiration date. "
      },
      {
        "name": "SecurityCodeInput",
        "is_standalone": true,
        "description": "A standalone component for inputting the security code. "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "A standalone component for submitting the payment information. "
      },
      {
        "name": "PaymentInfoForm",
        "is_standalone": false,
        "description": "A component that takes children to wrap all the input fields and the submit button. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6\">\n  <PaymentInfoForm>\n    <CardNumberInput />\n    <ExpirationDateInput />\n    <SecurityCodeInput />\n    <SubmitButton />\n  </PaymentInfoForm>\n</div>\n",
    "component_html": [
      {
        "name": "CardNumberInput",
        "html": "<div className=\"mb-4\">  <label htmlFor=\"card-number\" className=\"block mb-2\">Card Number</label>  <input type=\"text\" id=\"card-number\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
      },
      {
        "name": "ExpirationDateInput",
        "html": "<div className=\"mb-4\">  <label htmlFor=\"expiration-date\" className=\"block mb-2\">Expiration Date</label>  <input type=\"text\" id=\"expiration-date\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
      },
      {
        "name": "SecurityCodeInput",
        "html": "<div className=\"mb-4\">  <label htmlFor=\"security-code\" className=\"block mb-2\">Security Code</label>  <input type=\"text\" id=\"security-code\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Submit</button>"
      },
      {
        "name": "PaymentInfoForm",
        "html": "<form>  {children}</form>"
      }
    ]
  },
  {
    "description": "The UI should display a summary of the order, including the subtotal, in a clean and simple format.",
    "component_list": [
      {
        "name": "OrderSummary",
        "is_standalone": true,
        "description": "standalone component that displays the order summary. "
      },
      {
        "name": "SubtotalDisplay",
        "is_standalone": true,
        "description": "standalone component that displays the subtotal. "
      }
    ],
    "main_html": "<div class=\"p-4 bg-white rounded shadow-md\">\n  <OrderSummary />\n  <SubtotalDisplay />\n</div>\n",
    "component_html": [
      {
        "name": "OrderSummary",
        "html": "<p class=\"text-lg font-bold\">Order Summary:</p><ul>  <li class=\"py-2\">Items: {item_count}</li>  <li class=\"py-2\">Total weight: {total_weight} kg</li>  <li class=\"py-2\">Shipping: {shipping_method}</li></ul>"
      },
      {
        "name": "SubtotalDisplay",
        "html": "<p class=\"text-lg font-bold\">Subtotal: <span class=\"text-orange-600\">{subtotal_amount}</span></p>"
      }
    ]
  },
  {
    "description": "A card-like component with a title, a list of shipping options, and a call-to-action button.",
    "component_list": [
      {
        "name": "ShippingOptionCard",
        "is_standalone": true,
        "description": "(standalone) - a card-like component that contains shipping options and a call-to-action button "
      },
      {
        "name": "ShippingOption",
        "is_standalone": false,
        "description": "(takes children) - a list item representing a shipping option "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "(standalone) - a button that triggers an action "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md\">\n  <h2 class=\"text-2xl font-bold mb-4\">Shipping Options</h2>\n  <ul>\n    <ShippingOption/>\n    <ShippingOption/>\n    <ShippingOption/>\n  </ul>\n  <CallToActionButton/>\n</div>\n",
    "component_html": [
      {
        "name": "ShippingOptionCard",
        "html": "<div class=\"p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md\">  <h2 class=\"text-2xl font-bold mb-4\">{title}</h2>  <ul>    {children}  </ul>  <CallToActionButton/></div>"
      },
      {
        "name": "ShippingOption",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <input type=\"radio\" id={option_id} name=\"shipping_option\" />  <label for={option_id}>{shipping_option_name}</label>  <p class=\"text-gray-500\">{delivery_estimate}</p></li>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Select Shipping Option</button>"
      }
    ]
  },
  {
    "description": "The UI should be a shopping cart icon with a badge indicating the number of items in the cart.",
    "component_list": [
      {
        "name": "ShoppingCartIcon",
        "is_standalone": true,
        "description": "Standalone component representing the shopping cart icon. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "Standalone component representing the badge displaying the number of items in the cart. "
      }
    ],
    "main_html": "<div className=\"absolute top-2 right-2\">\n  <ShoppingCartIcon/>\n  <Badge/>\n</div>\n",
    "component_html": [
      {
        "name": "ShoppingCartIcon",
        "html": "<i className=\"fas fa-shopping-cart text-lg text-gray-500 hover:text-gray-800 cursor-pointer\"></i>"
      },
      {
        "name": "Badge",
        "html": "<span className=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{item_count}</span>"
      }
    ]
  },
  {
    "description": "The UI should be a simple search bar with an input field and a search button.",
    "component_list": [
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "A standalone component that represents the search input field. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "A standalone component that represents the search button. "
      },
      {
        "name": "SearchBar",
        "is_standalone": false,
        "description": "A component that takes children and represents the search bar container. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <SearchBar>\n    <SearchInput />\n    <SearchButton />\n  </SearchBar>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center bg-white shadow-md rounded-lg px-4 py-2\">  {children}</div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"text\" class=\"w-full py-2 pl-2 pr-10 text-sm text-gray-700\" placeholder=\"Search...\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Search</button>"
      }
    ]
  },
  {
    "description": "The UI should be a horizontal navigation bar that displays categories. Each category should be a clickable item with a title and an optional count of items in that category.",
    "component_list": [
      {
        "name": "CategoryNavItem",
        "is_standalone": true,
        "description": "A standalone component that displays a single category. "
      },
      {
        "name": "CategoryNav",
        "is_standalone": false,
        "description": "A component that takes children, which are multiple `CategoryNavItem` components. "
      }
    ],
    "main_html": "<nav class=\"flex justify-center mb-4\">\n  <ul class=\"flex flex-wrap justify-center\">\n    <CategoryNav>\n      <CategoryNavItem/>\n      <CategoryNavItem/>\n      <!-- Add more CategoryNavItem components here -->\n    </CategoryNav>\n  </ul>\n</nav>\n",
    "component_html": [
      {
        "name": "CategoryNav",
        "html": "<ul class=\"flex flex-wrap justify-center\">{children}</ul>"
      },
      {
        "name": "CategoryNavItem",
        "html": "<li class=\"mr-4\">  <a class=\"text-gray-600 hover:text-gray-900 transition duration-300\" href={categoryUrl}>{categoryTitle} <span class=\"text-sm text-gray-500\">({itemCount})</span></a></li>"
      }
    ]
  },
  {
    "description": "A product image section with a zoom-in feature, allowing users to enlarge the image when hovered or clicked.",
    "component_list": [
      {
        "name": "ProductImage",
        "is_standalone": true,
        "description": "a standalone component that displays the product image. "
      },
      {
        "name": "ImageZoom",
        "is_standalone": true,
        "description": "a standalone component that displays the zoomed-in image. "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <ProductImage src=\"{imageSrc}\" />\n  <ImageZoom src=\"{imageSrc}\" />\n</div>\n",
    "component_html": [
      {
        "name": "ProductImage",
        "html": "<img src=\"{src}\" class=\"w-full max-w-md h-auto rounded-md\" />"
      },
      {
        "name": "ImageZoom",
        "html": "<div class=\"hidden group-hover:block absolute top-0 left-0 w-full h-full bg-white shadow-md rounded-md p-4\">  <img src=\"{src}\" class=\"w-full h-full object-contain\" /></div>"
      }
    ]
  },
  {
    "description": "The UI should display a rating system with an average rating and the number of reviews. It should also display a list of individual reviews from users.",
    "component_list": [
      {
        "name": "RatingIndicator",
        "is_standalone": true,
        "description": "Standalone component to display the average rating. "
      },
      {
        "name": "ReviewList",
        "is_standalone": false,
        "description": "Component that takes children (individual reviews). "
      },
      {
        "name": "ReviewItem",
        "is_standalone": true,
        "description": "Standalone component to display a single review. "
      }
    ],
    "main_html": "<div className=\"flex flex-col gap-4\">\n  <RatingIndicator/>\n  <p>{review_count} reviews</p>\n  <ReviewList>\n    <ReviewItem/>\n    <!-- more ReviewItem components here -->\n  </ReviewList>\n</div>\n",
    "component_html": [
      {
        "name": "RatingIndicator",
        "html": "<div className=\"flex items-center gap-2\">  <span className=\"text-xl\">{average_rating}/5</span>  <i className=\"fa fa-star text-yellow-500\"></i>  <span className=\"text-gray-500\">{rating_count} ratings</span></div>"
      },
      {
        "name": "ReviewList",
        "html": "<ul className=\"list-none py-4\">  {children}</ul>"
      },
      {
        "name": "ReviewItem",
        "html": "<li className=\"py-2 border-b border-gray-200\">  <div className=\"flex items-center justify-between\">    <div>      <span className=\"text-lg\">{reviewer_name}</span>      <span className=\"text-sm text-gray-500\">{review_date}</span>    </div>    <div>      <i className=\"fa fa-star text-yellow-500\"></i>      <span className=\"text-sm\">{rating}/5</span>    </div>  </div>  <p className=\"text-sm text-gray-600\">{review_text}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display two badges, one for price and one for discount, with different background colors and text colors. The price badge should have a light blue background and white text, and the discount badge should have a green background and white text.",
    "component_list": [
      {
        "name": "PriceBadge",
        "is_standalone": true,
        "description": "Standalone component, displays the price of an item. "
      },
      {
        "name": "DiscountBadge",
        "is_standalone": true,
        "description": "Standalone component, displays the discount of an item. "
      }
    ],
    "main_html": "<div class=\"flex gap-2\">\n  <PriceBadge/>\n  <DiscountBadge/>\n</div>\n",
    "component_html": [
      {
        "name": "PriceBadge",
        "html": "<span class=\"bg-gray-200 text-white rounded py-1 px-2\">{price}</span>"
      },
      {
        "name": "DiscountBadge",
        "html": "<span class=\"bg-green-400 text-white rounded py-1 px-2\">{discount}% off</span>"
      }
    ]
  },
  {
    "description": "A collection of call-to-action buttons, each with a different style, size, and color.",
    "component_list": [
      {
        "name": "Large",
        "is_standalone": true,
        "description": "PrimaryButton` (standalone) - A large primary call-to-action button. "
      },
      {
        "name": "Medium",
        "is_standalone": true,
        "description": "SecondaryButton` (standalone) - A medium-sized secondary call-to-action button. "
      },
      {
        "name": "Small",
        "is_standalone": true,
        "description": "TertiaryButton` (standalone) - A small tertiary call-to-action button. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap gap-4\">\n  <PrimaryButton/>\n  <SecondaryButton/>\n  <TertiaryButton/>\n</div>\n",
    "component_html": [
      {
        "name": "PrimaryButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {primaryButtonText}</button>"
      },
      {
        "name": "SecondaryButton",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-1.5 px-3 rounded\">  {secondaryButtonText}</button>"
      },
      {
        "name": "TertiaryButton",
        "html": "<button class=\"bg-transparent hover:bg-gray-200 text-gray-800 font-bold py-1 px-2 rounded border border-gray-200\">  {tertiaryButtonText}</button>"
      }
    ]
  },
  {
    "description": "A carousel/slider that displays promotional banners with a navigation system (prev/next) and possibly dots/indicators for each slide.",
    "component_list": [
      {
        "name": "PromotionCarousel",
        "is_standalone": true,
        "description": "(standalone) - The main carousel/slider component that contains the navigation and indicators. "
      },
      {
        "name": "PromotionSlide",
        "is_standalone": false,
        "description": "(takes children) - A single slide in the carousel/slider that contains a promotional banner. "
      },
      {
        "name": "PromotionNavigation",
        "is_standalone": true,
        "description": "(standalone) - The navigation component that includes prev/next buttons. "
      },
      {
        "name": "PromotionIndicator",
        "is_standalone": true,
        "description": "(standalone) - An individual indicator dot for each slide. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <PromotionCarousel>\n    <PromotionSlide><img src={banner1_url} alt=\"Banner 1\" /></PromotionSlide>\n    <PromotionSlide><img src={banner2_url} alt=\"Banner 2\" /></PromotionSlide>\n    <PromotionSlide><img src={banner3_url} alt=\"Banner 3\" /></PromotionSlide>\n  </PromotionCarousel>\n  <PromotionNavigation />\n</div>\n",
    "component_html": [
      {
        "name": "PromotionCarousel",
        "html": "<div class=\"carousel-container\">  <div class=\"carousel-inner\">{children}</div>  <PromotionNavigation />  <div class=\"indicator-container\">    {Array(num_slides).fill(0).map((_, i) => (      <PromotionIndicator key={i} />    ))}  </div></div>"
      },
      {
        "name": "PromotionSlide",
        "html": "<div class=\"carousel-slide\">{children}</div>"
      },
      {
        "name": "PromotionNavigation",
        "html": "<div class=\"carousel-navigation\">  <button class=\"prev-button\" onClick={prevSlide}>‹</button>  <button class=\"next-button\" onClick={nextSlide}>›</button></div>"
      },
      {
        "name": "PromotionIndicator",
        "html": "<span class=\"indicator-dot\" aria-hidden=\"true\"></span>"
      }
    ]
  },
  {
    "description": "A responsive filtering and sorting UI that adapts to different screen sizes, with a search bar, a filtering section, a sorting section, and a list of items.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) - a search bar component "
      },
      {
        "name": "FilterSection",
        "is_standalone": false,
        "description": "(takes children) - a filtering section component that takes filter options as children "
      },
      {
        "name": "FilterOption",
        "is_standalone": true,
        "description": "(standalone) - a single filter option component "
      },
      {
        "name": "SortingSection",
        "is_standalone": false,
        "description": "(takes children) - a sorting section component that takes sorting options as children "
      },
      {
        "name": "SortingOption",
        "is_standalone": true,
        "description": "(standalone) - a single sorting option component "
      },
      {
        "name": "ItemList",
        "is_standalone": false,
        "description": "(takes children) - a list of items component that takes individual items as children "
      },
      {
        "name": "Item",
        "is_standalone": true,
        "description": "(standalone) - a single item component "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <SearchBar />\n  <div className=\"flex flex-wrap -mx-4\">\n    <FilterSection>\n      <FilterOption/>\n      <FilterOption/>\n    </FilterSection>\n    <SortingSection>\n      <SortingOption/>\n      <SortingOption/>\n    </SortingSection>\n  </div>\n  <ItemList>\n    <Item/>\n    <Item/>\n  </ItemList>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<input type=\"search\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search...\" />"
      },
      {
        "name": "FilterSection",
        "html": "<div className=\"w-full lg:w-1/2 xl:w-1/3 p-4 lg:pr-6\">  {children}</div>"
      },
      {
        "name": "FilterOption",
        "html": "<label className=\"block text-gray-600\">  <input type=\"checkbox\" className=\"mr-2\" />  {filter_name}</label>"
      },
      {
        "name": "SortingSection",
        "html": "<div className=\"w-full lg:w-1/2 xl:w-1/3 p-4 lg:pl-6\">  {children}</div>"
      },
      {
        "name": "SortingOption",
        "html": "<button className=\"bg-white hover:bg-gray-100 text-gray-600 py-2 px-4 border border-gray-300 rounded\">  {sorting_option_name}</button>"
      },
      {
        "name": "ItemList",
        "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "Item",
        "html": "<li className=\"py-4 px-4 border-b border-gray-200\">  <h2 className=\"text-lg\">{item_name}</h2>  <p>{item_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display the author's name and the date of publication, with the author's name in a slightly larger font size than the date.",
    "component_list": [
      {
        "name": "AuthorMetadata",
        "is_standalone": true,
        "description": "standalone component that displays the author's name. "
      },
      {
        "name": "DateMetadata",
        "is_standalone": true,
        "description": "standalone component that displays the date of publication. "
      }
    ],
    "main_html": "<div class=\"flex justify-between mb-4\">\n  <AuthorMetadata/>\n  <DateMetadata/>\n</div>\n",
    "component_html": [
      {
        "name": "AuthorMetadata",
        "html": "<p class=\"text-lg\">{author_name}</p>"
      },
      {
        "name": "DateMetadata",
        "html": "<p class=\"text-sm text-gray-600\">{publication_date}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a row of social media sharing buttons, including Facebook, Twitter, and LinkedIn.",
    "component_list": [
      {
        "name": "SocialSharingButtons",
        "is_standalone": true,
        "description": "(standalone) - The container component that holds all the social media buttons. "
      },
      {
        "name": "SocialButton",
        "is_standalone": false,
        "description": "(takes children) - A single social media button component. "
      }
    ],
    "main_html": "<div className=\"flex justify-center\">\n  <SocialSharingButtons>\n    <SocialButton><FacebookIcon/></SocialButton>\n    <SocialButton><TwitterIcon/></SocialButton>\n    <SocialButton><LinkedInIcon/></SocialButton>\n  </SocialSharingButtons>\n</div>\n",
    "component_html": [
      {
        "name": "SocialSharingButtons",
        "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "SocialButton",
        "html": "<a href=\"{social_share_url}\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"mr-4\">  {children}</a>"
      }
    ]
  },
  {
    "description": "The UI should display a list of tags and categories in a card-like layout. Each tag and category should have a label and a count of associated items.",
    "component_list": [
      {
        "name": "TagCategoryList",
        "is_standalone": true,
        "description": "(standalone) - A container component for the list of tags and categories. "
      },
      {
        "name": "TagCategoryItem",
        "is_standalone": false,
        "description": "(takes children) - A single item in the list, displays a label and count. "
      }
    ],
    "main_html": "<div class=\"max-w-sm p-4 mx-auto bg-white rounded shadow-md\">\n  <h2 class=\"text-lg font-bold mb-2\">Tags and Categories</h2>\n  <TagCategoryList>\n    <!-- list of tags and categories -->\n  </TagCategoryList>\n</div>\n",
    "component_html": [
      {
        "name": "TagCategoryList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "TagCategoryItem",
        "html": "<li class=\"flex justify-between py-2\">  <span class=\"text-gray-600\">{label}</span>  <span class=\"text-gray-400\">{count} items</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a list of comments, with each comment showing the user's name, comment text, and a timestamp. There should be a input field for the user to type in their comment, along with a \"Post\" button to submit the comment.",
    "component_list": [
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "CommentInput",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "CommentList",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <CommentInput />\n  <CommentList>\n    <Comment />\n    <Comment />\n    <!-- more comments here -->\n  </CommentList>\n</div>\n",
    "component_html": [
      {
        "name": "CommentSection",
        "html": "<!-- not applicable, this is the top-level component -->"
      },
      {
        "name": "Comment",
        "html": "<div className=\"mb-4\">  <p class=\"text-gray-900\">{username}</p>  <p class=\"text-gray-600\">{comment_text}</p>  <p class=\"text-gray-500\">{timestamp}</p></div>"
      },
      {
        "name": "CommentInput",
        "html": "<div>  <input type=\"text\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" value={newCommentText} />  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Post</button></div>"
      },
      {
        "name": "CommentList",
        "html": "<div className=\"divide-y divide-gray-200\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of related articles or recommended content, possibly with a heading and a horizontal line separating each item.",
    "component_list": [
      {
        "name": "RelatedContentSection",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the related content section. "
      },
      {
        "name": "RelatedContentHeading",
        "is_standalone": true,
        "description": "(standalone): The heading for the section. "
      },
      {
        "name": "RecommendedItem",
        "is_standalone": false,
        "description": "(takes children): An individual recommended item, which may contain a title, description, and image. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8\">\n  <RelatedContentHeading/>\n  <div className=\"flex flex-wrap justify-center mb-4\">\n    <RecommendedItem/><RecommendedItem/><RecommendedItem/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "RelatedContentHeading",
        "html": "<h2 className=\"text-lg font-bold mb-4\">Related Articles</h2>"
      },
      {
        "name": "RecommendedItem",
        "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-6\">  <a href=\"{article_url}\" className=\"block\">    <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-40 object-cover mb-4\"/>    <h3 className=\"text-lg font-bold\">{article_title}</h3>    <p className=\"text-gray-600\">{article_description}</p>  </a></div>"
      }
    ]
  },
  {
    "description": "A compact author bio/profile section that displays the author's name, profile picture, bio, and social media links.",
    "component_list": [
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "standalone component for the author's profile picture "
      },
      {
        "name": "BioText",
        "is_standalone": true,
        "description": "standalone component for the author's bio text "
      },
      {
        "name": "SocialMediaLinks",
        "is_standalone": false,
        "description": "component that takes children for the social media links "
      },
      {
        "name": "AuthorProfile",
        "is_standalone": false,
        "description": "component that takes children for the entire author bio/profile section "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center mb-4\">\n  <Avatar />\n  <h2 class=\"text-lg font-bold\">{author_name}</h2>\n  <BioText />\n  <SocialMediaLinks>\n    <!-- social media links will be inserted here -->\n  </SocialMediaLinks>\n</div>\n",
    "component_html": [
      {
        "name": "Avatar",
        "html": "<img src=\"{profile_picture_url}\" alt=\"Author Profile Picture\" class=\"w-24 h-24 rounded-full\" />"
      },
      {
        "name": "BioText",
        "html": "<p class=\"text-gray-600\">{bio_text}</p>"
      },
      {
        "name": "SocialMediaLinks",
        "html": "<ul class=\"flex justify-center mb-4\">  {children}</ul>"
      },
      {
        "name": "AuthorProfile",
        "html": "<!-- this component will render the entire author bio/profile section --><div class=\"flex flex-col items-center mb-4\">  <Avatar />  <h2 class=\"text-lg font-bold\">{author_name}</h2>  <BioText />  <SocialMediaLinks>    <!-- social media links will be inserted here -->  </SocialMediaLinks></div>"
      }
    ]
  },
  {
    "description": "A responsive article layout with a header, image, and content area that adapts to different screen sizes.",
    "component_list": [
      {
        "name": "ArticleHeader",
        "is_standalone": true,
        "description": "Standalone component that renders the article title and meta information. "
      },
      {
        "name": "ArticleImage",
        "is_standalone": true,
        "description": "Standalone component that renders the article image. "
      },
      {
        "name": "ArticleContent",
        "is_standalone": false,
        "description": "Component that takes children to render the article content. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <div class=\"flex justify-center mb-4 md:mb-6 lg:mb-12\">\n    <ArticleImage />\n  </div>\n  <ArticleContent>\n    <!-- article content will be rendered here -->\n  </ArticleContent>\n</div>\n",
    "component_html": [
      {
        "name": "ArticleHeader",
        "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{article_meta}</p></header>"
      },
      {
        "name": "ArticleImage",
        "html": "<img src={image_src} alt={image_alt} class=\"w-full md:w-1/2 lg:w-2/3\" />"
      },
      {
        "name": "ArticleContent",
        "html": "<div class=\"prose lg:prose-lg xl:prose-xl\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A profile page with a profile picture and a header image.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "Standalone component, displays a circular image. "
      },
      {
        "name": "UserProfileHeader",
        "is_standalone": false,
        "description": "Takes children, displays a header image with overlaid text. "
      }
    ],
    "main_html": "<div class=\"flex flex-col w-full h-screen\">\n  <UserProfileHeader>\n    <h1>{username}</h1>\n    <p>{bio}</p>\n  </UserProfileHeader>\n  <UserProfilePicture />\n  <!-- rest of the profile page content -->\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-48 h-48 rounded-full\" />"
      },
      {
        "name": "UserProfileHeader",
        "html": "<div class=\"h-64 bg-cover bg-center\" style={{ backgroundImage: `url(${header_image_url})` }}>  <div class=\"flex flex-col items-center justify-center h-full\">    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "A post/tweet box with a profile picture, username, input field, and a send button.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "Standalone component "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "Standalone component "
      },
      {
        "name": "PostInput",
        "is_standalone": false,
        "description": "Takes children "
      },
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "Standalone component "
      }
    ],
    "main_html": "<div className=\"flex p-4\">\n  <UserProfilePicture />\n  <div className=\"flex-1 ml-4\">\n    <Username />\n    <PostInput><PostInput /></PostInput>\n    <SendButton />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img className=\"w-12 h-12 rounded-full\" src={profile_picture_url} alt=\"Profile Picture\" />"
      },
      {
        "name": "Username",
        "html": "<span className=\"text-lg font-bold\">{username}</span>"
      },
      {
        "name": "PostInput",
        "html": "<textarea className=\"w-full p-2 pl-10 text-lg\" rows=\"3\" placeholder=\"What's on your mind?\">{children}</textarea>"
      },
      {
        "name": "SendButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
      }
    ]
  },
  {
    "description": "A horizontal row of three buttons for liking, commenting, and sharing, with a slight gap between each button.",
    "component_list": [
      {
        "name": "LikeButton",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "CommentButton",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "ShareButton",
        "is_standalone": true,
        "description": "- standalone "
      }
    ],
    "main_html": "<div className=\"flex justify-between items-center mb-4\">\n  <LikeButton/> \n  <CommentButton/> \n  <ShareButton/> \n</div>\n",
    "component_html": [
      {
        "name": "LikeButton",
        "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-thumbs-up\" /> {like_count}</button>"
      },
      {
        "name": "CommentButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-comment\" /> {comment_count}</button>"
      },
      {
        "name": "ShareButton",
        "html": "<button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-share\" /> {share_count}</button>"
      }
    ]
  },
  {
    "description": "A post/tweet embed component that displays a user's profile picture, username, tweet/post text, and any media (e.g. image, video) associated with the post.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "standalone component that displays a user's profile picture. "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "standalone component that displays a user's username. "
      },
      {
        "name": "PostText",
        "is_standalone": true,
        "description": "standalone component that displays the text of the post/tweet. "
      },
      {
        "name": "PostMedia",
        "is_standalone": true,
        "description": "standalone component that displays the media associated with the post (e.g. image, video). "
      },
      {
        "name": "PostEmbed",
        "is_standalone": false,
        "description": "parent component that takes children and displays the entire post/tweet embed. "
      }
    ],
    "main_html": "<div class=\"flex bg-white p-4 border-b border-gray-200\">\n  <UserProfilePicture />\n  <div class=\"ml-4\">\n    <Username />\n    <PostText />\n    <PostMedia />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src={profile_picture_url} class=\"rounded-full h-10 w-10\" />"
      },
      {
        "name": "Username",
        "html": "<p class=\"font-bold\">{username}</p>"
      },
      {
        "name": "PostText",
        "html": "<p>{post_text}</p>"
      },
      {
        "name": "PostMedia",
        "html": "<img src={media_url} class=\"max-w-full h-56\" />"
      }
    ]
  },
  {
    "description": "The UI should display a list of hashtag links and @mention links. Each link should have a distinct style to differentiate between the two types of links.",
    "component_list": [
      {
        "name": "HashtagLink",
        "is_standalone": true,
        "description": "(standalone) - represents a single hashtag link "
      },
      {
        "name": "MentionLink",
        "is_standalone": true,
        "description": "(standalone) - represents a single @mention link "
      },
      {
        "name": "LinkList",
        "is_standalone": false,
        "description": "(takes children) - a container for a list of links "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <HashtagLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
    "component_html": [
      {
        "name": "HashtagLink",
        "html": "<a href={`/${hashtag_value}`} class=\"text-blue-500 hover:text-blue-700 transition duration-300\">  #{hashtag_value}</a>"
      },
      {
        "name": "MentionLink",
        "html": "<a href={`/@${username}`} class=\"text-green-500 hover:text-green-700 transition duration-300\">  @{username}</a>"
      },
      {
        "name": "LinkList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a navigation menu for a user's profile page, with multiple sections or tabs that can be clicked to navigate to different parts of the profile.",
    "component_list": [
      {
        "name": "ProfileNav",
        "is_standalone": true,
        "description": "a standalone component that contains the navigation menu. "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "a component that takes children and represents a single navigation item in the menu. "
      },
      {
        "name": "NavTab",
        "is_standalone": false,
        "description": "a component that takes children and represents a single tab in the navigation menu. "
      }
    ],
    "main_html": "<nav className=\"flex flex-wrap justify-center p-4 bg-gray-100\">\n  <ProfileNav>\n    <NavItem><NavTab>Profile</NavTab></NavItem>\n    <NavItem><NavTab>Settings</NavTab></NavItem>\n    <NavItem><NavTab>Activity</NavTab></NavItem>\n  </ProfileNav>\n</nav>\n",
    "component_html": [
      {
        "name": "ProfileNav",
        "html": "<div className=\"flex flex-wrap justify-center p-4 bg-gray-100\">  {children}</div>"
      },
      {
        "name": "NavItem",
        "html": "<li className=\"mr-4\">  {children}</li>"
      },
      {
        "name": "NavTab",
        "html": "<button className=\"py-2 px-4 hover:bg-gray-200 transition duration-300\">{children}</button>"
      }
    ]
  },
  {
    "description": "The UI should have a notification badge/alert that displays a small circle or rectangle with a number or a message inside, usually indicating the number of notifications, messages, or updates.",
    "component_list": [
      {
        "name": "NotificationBadge",
        "is_standalone": true,
        "description": "(standalone) - a small circle or rectangle displaying a number or message "
      },
      {
        "name": "NotificationAlert",
        "is_standalone": true,
        "description": "(standalone) - a small notification message with an icon and text "
      }
    ],
    "main_html": "<nav className=\"flex items-center justify-between py-4\">\n  <ul className=\"flex items-center\">\n    <li className=\"mr-4\">\n      <a href=\"#\" className=\"text-gray-600 hover:text-gray-900 transition duration-300\">\n        <NotificationBadge/> <!-- notification badge -->\n      </a>\n    </li>\n  </ul>\n  <NotificationAlert/> <!-- notification alert -->\n</nav>\n",
    "component_html": [
      {
        "name": "NotificationBadge",
        "html": "<span className=\"bg-red-500 text-white rounded-full px-2 py-1 text-xs\">{notification_count}</span>"
      },
      {
        "name": "NotificationAlert",
        "html": "<div className=\"bg-orange-200 p-2 rounded border-l-4 border-orange-500\">  <i className=\"fas fa-bell mr-2 text-orange-500\"></i>  <span>{notification_message}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should display a responsive post formatting, with a profile picture, username, post text, and actions (like, comment, share). The post should adapt to different screen sizes, with the profile picture and username on the same line on larger screens, and stacked on smaller screens.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "Standalone component, displays the profile picture of the user who made the post. "
      },
      {
        "name": "UserName",
        "is_standalone": true,
        "description": "Standalone component, displays the username of the user who made the post. "
      },
      {
        "name": "PostText",
        "is_standalone": true,
        "description": "Standalone component, displays the text of the post. "
      },
      {
        "name": "PostActions",
        "is_standalone": true,
        "description": "Standalone component, displays the actions for the post (like, comment, share). "
      },
      {
        "name": "Post",
        "is_standalone": false,
        "description": "Takes children, wraps the entire post formatting. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap md:flex-nowrap md:justify-start mb-4\">\n  <UserProfilePicture />\n  <div class=\"md:ml-4\">\n    <UserName />\n    <PostText />\n    <PostActions />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src=\"{profile_picture_url}\" class=\"w-12 h-12 rounded-full\" />"
      },
      {
        "name": "UserName",
        "html": "<span class=\"text-lg\">{username}</span>"
      },
      {
        "name": "PostText",
        "html": "<p class=\"text-gray-600\">{post_text}</p>"
      },
      {
        "name": "PostActions",
        "html": "<div class=\"flex justify-evenly mt-2\">  <button class=\"text-gray-600\">{like_count} likes</button>  <button class=\"text-gray-600\">{comment_count} comments</button>  <button class=\"text-gray-600\">Share</button></div>"
      }
    ]
  },
  {
    "description": "A provider profile page displaying information about a healthcare provider, including their name, image, specialty, and bio.",
    "component_list": [
      {
        "name": "ProviderProfileCard",
        "is_standalone": true,
        "description": "(standalone): a container component displaying the provider's information "
      },
      {
        "name": "ProviderImage",
        "is_standalone": true,
        "description": "(standalone): a component displaying the provider's image "
      },
      {
        "name": "ProviderInfo",
        "is_standalone": false,
        "description": "(takes children): a component displaying the provider's name and specialty "
      },
      {
        "name": "ProviderBio",
        "is_standalone": false,
        "description": "(takes children): a component displaying the provider's bio "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <ProviderProfileCard>\n    <ProviderImage />\n    <ProviderInfo>\n      <h2>{provider_name}</h2>\n      <p>{specialty}</p>\n    </ProviderInfo>\n    <ProviderBio>\n      <p>{bio}</p>\n    </ProviderBio>\n  </ProviderProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "ProviderProfileCard",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  {children}</div>"
      },
      {
        "name": "ProviderImage",
        "html": "<img src={image_url} alt={provider_name} className=\"w-24 h-24 rounded-full mb-4\" />"
      },
      {
        "name": "ProviderInfo",
        "html": "<div className=\"flex flex-col\">  <h2>{children[0]}</h2>  <p>{children[1]}</p></div>"
      },
      {
        "name": "ProviderBio",
        "html": "<div className=\"text-gray-600 text-sm\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display an average rating (e.g., 4.5/5) with a visual representation of the rating (e.g., stars), followed by a list of reviews. Each review should display the reviewer's name, rating (with a visual representation of the rating), and the review text.",
    "component_list": [
      {
        "name": "RatingStars",
        "is_standalone": true,
        "description": "A standalone component that displays a rating as a series of stars (e.g., ⭐️⭐️⭐️⭐️☆). "
      },
      {
        "name": "Review",
        "is_standalone": false,
        "description": "A component that takes children (the review text) and displays a single review with the reviewer's name, rating, and review text. "
      },
      {
        "name": "RatingAndReviews",
        "is_standalone": false,
        "description": "A component that takes children (the list of reviews) and displays the average rating and the list of reviews. "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <div className=\"mb-4\">\n    <RatingStars rating={average_rating} />\n    <p>Average rating: {average_rating}/5</p>\n  </div>\n  <RatingAndReviews>\n    {reviews.map(review => (\n      <Review key={review.id}>\n        {review.text}\n      </Review>\n    ))}\n  </RatingAndReviews>\n</div>\n",
    "component_html": [
      {
        "name": "RatingStars",
        "html": "<span className=\"text-lg\">  {[...Array(5).keys()].map(i => (    <i key={i} className={i < rating ? 'fas fa-star' : 'far fa-star'} />  ))}</span>"
      },
      {
        "name": "Review",
        "html": "<div className=\"mb-4\">  <p className=\"font-bold\">{reviewer_name}</p>  <RatingStars rating={review_rating} />  <p>{children}</p></div>"
      },
      {
        "name": "RatingAndReviews",
        "html": "<div className=\"flex flex-col\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a banner with the auction details, a bid input field, a \"Place Bid\" button, and a list of previous bids.",
    "component_list": [
      {
        "name": "AuctionBanner",
        "is_standalone": true,
        "description": "(standalone): Displays auction details such as title, description, and current highest bid. "
      },
      {
        "name": "BidInput",
        "is_standalone": true,
        "description": "(standalone): A text input field for users to enter their bid amount. "
      },
      {
        "name": "PlaceBidButton",
        "is_standalone": true,
        "description": "(standalone): A button to submit the user's bid. "
      },
      {
        "name": "BidHistory",
        "is_standalone": false,
        "description": "(takes children): A list of previous bids. "
      },
      {
        "name": "BidItem",
        "is_standalone": false,
        "description": "(takes children): A single bid item in the bid history list. "
      }
    ],
    "main_html": "<div class=\"flex flex-col p-4\">\n  <AuctionBanner />\n  <div class=\"flex justify-center mb-4\">\n    <BidInput />\n    <PlaceBidButton />\n  </div>\n  <BidHistory>\n    <!-- bid items will be rendered here -->\n  </BidHistory>\n</div>\n",
    "component_html": [
      {
        "name": "AuctionBanner",
        "html": "<div class=\"bg-orange-200 p-4 mb-4\">  <h2 class=\"text-lg\">{auction_title}</h2>  <p>{auction_description}</p>  <p>Current highest bid: {current_highest_bid}</p></div>"
      },
      {
        "name": "BidInput",
        "html": "<input type=\"number\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />"
      },
      {
        "name": "PlaceBidButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Place Bid</button>"
      },
      {
        "name": "BidHistory",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "BidItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <p>{bid_username} bid {bid_amount}</p>  <p class=\"text-sm text-gray-600\">{bid_time}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should resemble a dashboard for managing payment and invoicing tools. It should display a navigation menu, a dashboard header, and a main content area with two sections: a summary section and a tools section. The summary section should display a brief overview of the payment and invoicing status, including the total amount of pending invoices and the total amount of overdue invoices. The tools section should display a list of payment and invoicing tools, each with a title, description, and a \"View details\" button.",
    "component_list": [
      {
        "name": "Navbar",
        "is_standalone": true,
        "description": "(standalone): The navigation menu at the top of the page. "
      },
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "(standalone): The header section of the dashboard, displaying the page title and any relevant actions. "
      },
      {
        "name": "SummarySection",
        "is_standalone": true,
        "description": "(standalone): The section displaying a brief overview of the payment and invoicing status. "
      },
      {
        "name": "ToolsSection",
        "is_standalone": true,
        "description": "(standalone): The section displaying a list of payment and invoicing tools. "
      },
      {
        "name": "ToolCard",
        "is_standalone": false,
        "description": "(takes children): An individual tool card displaying the tool's title, description, and a \"View details\" button. "
      }
    ],
    "main_html": "<div className=\"min-h-screen flex flex-col\">\n  <Navbar/>\n  <div className=\"flex-1 p-4\">\n    <DashboardHeader title=\"Payment and Invoicing Tools\"/>\n    <div className=\"flex flex-wrap -mx-4\">\n      <SummarySection/>\n      <ToolsSection>\n        <ToolCard/>\n        <ToolCard/>\n        <!-- Add more ToolCard components here -->\n      </ToolsSection>\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "Navbar",
        "html": "<nav className=\"bg-gray-800 h-16 flex justify-between items-center p-4\">  <a className=\"text-white\" href=\"#\">Logo</a>  <ul className=\"flex justify-end\">    <li><a className=\"text-white\" href=\"#\">Dashboard</a></li>    <li><a className=\"text-white\" href=\"#\">Settings</a></li>  </ul></nav>"
      },
      {
        "name": "DashboardHeader",
        "html": "<header className=\"bg-white p-4\">  <h1 className=\"text-2xl\">{pageTitle}</h1>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">New Invoice</button></header>"
      },
      {
        "name": "SummarySection",
        "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Summary</h2>  <ul>    <li>      <span className=\"text-gray-600\">{pendingInvoicesCount} pending invoices</span>      <span className=\"text-orange-600\">{overdueInvoicesCount} overdue invoices</span>    </li>  </ul></section>"
      },
      {
        "name": "ToolsSection",
        "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Tools</h2>  <ul className=\"flex flex-wrap -mx-4\">    {children}  </ul></section>"
      },
      {
        "name": "ToolCard",
        "html": "<article className=\"bg-white p-4 rounded shadow-md\">  <h3 className=\"text-lg\">{toolName}</h3>  <p>{toolDescription}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View details</button></article>"
      }
    ]
  },
  {
    "description": "A time tracking and scheduling UI that displays a calendar with scheduled events and allows users to add new events.",
    "component_list": [
      {
        "name": "CalendarHeader",
        "is_standalone": true,
        "description": "standalone, displays the month and year of the calendar. "
      },
      {
        "name": "CalendarDay",
        "is_standalone": true,
        "description": "standalone, represents a single day in the calendar, displaying the date and any scheduled events. "
      },
      {
        "name": "EventCard",
        "is_standalone": false,
        "description": "takes children, displays a scheduled event with details such as title, time, and description. "
      },
      {
        "name": "NewEventForm",
        "is_standalone": false,
        "description": "takes children, a form to add new events, with inputs for title, date, and time. "
      }
    ],
    "main_html": "<div className=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div className=\"flex-grow overflow-y-auto\">\n    <div className=\"grid grid-cols-7 gap-2 p-4\">\n      {Array(35).fill(0).map((_, index) => (\n        <CalendarDay key={index} />\n      ))}\n    </div>\n  </div>\n  <NewEventForm>\n    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Add Event</button>\n  </NewEventForm>\n</div>\n",
    "component_html": [
      {
        "name": "CalendarHeader",
        "html": "<div className=\"flex justify-between p-4\">  <h2 className=\"text-2xl\">{month_name} {year}</h2>  <button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">{/* toggle calendar view */}</button></div>"
      },
      {
        "name": "CalendarDay",
        "html": "<div className=\"bg-white border p-2 rounded\">  <p className=\"text-lg\">{date}</p>  <EventCard>    {events.map((event) => (      <div key={event.id} className=\"py-2\">        <h3 className=\"text-lg\">{event.title}</h3>        <p>{event.time}</p>        <p>{event.description}</p>      </div>    ))}  </EventCard></div>"
      },
      {
        "name": "EventCard",
        "html": "<div className=\"bg-white border p-2 rounded\">  {children}</div>"
      },
      {
        "name": "NewEventForm",
        "html": "<form className=\"flex flex-col p-4\">  <input type=\"text\" placeholder=\"Event Title\" className=\"mr-2\" />  <input type=\"date\" className=\"mr-2\" />  <input type=\"time\" className=\"mr-2\" />  <textarea placeholder=\"Event Description\" className=\"mr-2\" />  {children}</form>"
      }
    ]
  },
  {
    "description": "The UI should resemble a modern messaging or chat system, with a list of conversations on the left and a chat window on the right. The chat window should display conversation history and allow users to send new messages.",
    "component_list": [
      {
        "name": "ConversationSidebar",
        "is_standalone": true,
        "description": "A standalone component that displays a list of conversations. "
      },
      {
        "name": "ConversationListItem",
        "is_standalone": false,
        "description": "A component that takes children, representing a single conversation in the sidebar. "
      },
      {
        "name": "ChatWindow",
        "is_standalone": true,
        "description": "A standalone component that displays conversation history and allows users to send new messages. "
      },
      {
        "name": "MessageBubble",
        "is_standalone": false,
        "description": "A component that takes children, representing a single message in the conversation history. "
      },
      {
        "name": "MessageInput",
        "is_standalone": true,
        "description": "A standalone component that allows users to input and send new messages. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <aside class=\"w-64 bg-gray-100 p-4\">\n    <ConversationSidebar>\n      <ConversationListItem /><ConversationListItem /><ConversationListItem />\n    </ConversationSidebar>\n  </aside>\n  <section class=\"flex-1 p-4\">\n    <ChatWindow>\n      <MessageBubble /><MessageBubble /><MessageBubble />\n      <MessageInput />\n    </ChatWindow>\n  </section>\n</div>\n",
    "component_html": [
      {
        "name": "ConversationSidebar",
        "html": "<div class=\"h-full overflow-y-auto\">  {children}</div>"
      },
      {
        "name": "ConversationListItem",
        "html": "<div class=\"p-2 hover:bg-gray-200\">  <img src={conversation_avatar} class=\"w-8 h-8 rounded-full mr-2\" />  <span class=\"text-sm\">{conversation_name}</span>  <span class=\"text-xs text-gray-500\">{last_message_preview}</span></div>"
      },
      {
        "name": "ChatWindow",
        "html": "<div class=\"h-full overflow-y-auto p-4\">  <div class=\"flex flex-col\">    {children}  </div>  <MessageInput /></div>"
      },
      {
        "name": "MessageBubble",
        "html": "<div class=\"flex mb-2\">  <img src={sender_avatar} class=\"w-8 h-8 rounded-full mr-2\" />  <div class=\"flex-1\">    <span class=\"text-sm\">{sender_name}</span>    <p>{message_text}</p>    <span class=\"text-xs text-gray-500\">{timestamp}</span>  </div></div>"
      },
      {
        "name": "MessageInput",
        "html": "<form class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\" />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
      }
    ]
  },
  {
    "description": "A responsive dashboard that displays a list of projects with their respective tasks. Each project should have a title, description, and a list of tasks. Tasks should have a title, description, and a completion status indicator.",
    "component_list": [
      {
        "name": "ProjectCard",
        "is_standalone": true,
        "description": "A standalone component that displays a single project. "
      },
      {
        "name": "TaskList",
        "is_standalone": false,
        "description": "A component that takes children (individual tasks) to display. "
      },
      {
        "name": "TaskItem",
        "is_standalone": true,
        "description": "A standalone component that displays a single task. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Project Dashboard</h1>\n  <ul class=\"divide-y\">\n    <ProjectCard/>\n    <ProjectCard/>\n    <!-- Add more ProjectCard components as needed -->\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "ProjectCard",
        "html": "<div class=\"p-4 mb-4 bg-white rounded shadow\">  <h2 class=\"text-lg font-bold\">{project_title}</h2>  <p class=\"text-gray-600\">{project_description}</p>  <TaskList>    <TaskItem/>    <TaskItem/>    <!-- Add more TaskItem components as needed -->  </TaskList></div>"
      },
      {
        "name": "TaskList",
        "html": "<ul class=\"pl-4\">  {children}</ul>"
      },
      {
        "name": "TaskItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <input type=\"checkbox\" class=\"mr-2\" {checked} />  <span class=\"text-gray-600\">{task_title}</span>  <p class=\"text-gray-400\">{task_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should consist of a responsive grid that adapts to different screen sizes, displaying a list of items in a grid layout. The grid should have a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens.",
    "component_list": [
      {
        "name": "GridContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container of the grid. "
      },
      {
        "name": "GridItem",
        "is_standalone": false,
        "description": "(takes children): An individual item in the grid. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <GridContainer>\n    <GridItem><GridItem/>\n    <GridItem><GridItem/>\n    <GridItem><GridItem/>\n    <!-- add more GridItem components here -->\n  </GridContainer>\n</div>\n",
    "component_html": [
      {
        "name": "GridContainer",
        "html": "<div class=\"grid gap-4 lg:grid-cols-3 md:grid-cols-2 grid-cols-1\">  {children}</div>"
      },
      {
        "name": "GridItem",
        "html": "<div class=\"bg-white p-4 shadow-md rounded\">  <h2 class=\"text-lg font-bold\">{itemName}</h2>  <p>{itemDescription}</p>  <!-- add more item details here --></div>"
      }
    ]
  },
  {
    "description": "A grid of course cards, with each card displaying the course title, description, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "CourseGrid",
        "is_standalone": true,
        "description": "A standalone component that wraps the course cards in a grid layout. "
      },
      {
        "name": "CourseCard",
        "is_standalone": true,
        "description": "A standalone component that displays the course title, description, and CTA button. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <CourseGrid>\n    <CourseCard />\n    <CourseCard />\n    <CourseCard />\n    <!-- Add more CourseCard components here -->\n  </CourseGrid>\n</div>\n",
    "component_html": [
      {
        "name": "CourseGrid",
        "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
      },
      {
        "name": "CourseCard",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  <h2 className=\"text-lg font-bold\">{course_title}</h2>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {cta_text}  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should display the profile information of an instructor or author, including their name, profile picture, bio, and a list of their courses or publications.",
    "component_list": [
      {
        "name": "ProfileHeader",
        "is_standalone": true,
        "description": "A standalone component that displays the profile picture and name of the instructor/author. "
      },
      {
        "name": "BioSection",
        "is_standalone": true,
        "description": "A standalone component that displays the bio of the instructor/author. "
      },
      {
        "name": "CourseList",
        "is_standalone": false,
        "description": "A component that takes children, displaying a list of courses or publications. "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center p-4\">\n  <ProfileHeader />\n  <BioSection />\n  <h2 class=\"text-lg font-bold mb-2\">Courses</h2>\n  <CourseList>\n    <!-- Course items will be rendered here -->\n  </CourseList>\n</div>\n",
    "component_html": [
      {
        "name": "ProfileHeader",
        "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{name}\" class=\"w-24 h-24 rounded-full mr-4\" />  <h1 class=\"text-2xl font-bold\">{name}</h1></div>"
      },
      {
        "name": "BioSection",
        "html": "<div class=\"mb-4\">  <p class=\"text-lg\">{bio}</p></div>"
      },
      {
        "name": "CourseList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "A list view of lessons, with each lesson displaying its title, description, and a button to view more details.",
    "component_list": [
      {
        "name": "LessonComponent",
        "is_standalone": true,
        "description": "(standalone): displays a single lesson "
      },
      {
        "name": "LessonsListComponent",
        "is_standalone": false,
        "description": "(takes children): a container for a list of lessons "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold mb-4\">Lessons</h1>\n  <LessonsListComponent>\n    <LessonComponent />\n    <LessonComponent />\n    <!-- add more LessonComponents here -->\n  </LessonsListComponent>\n</div>\n",
    "component_html": [
      {
        "name": "LessonsListComponent",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "LessonComponent",
        "html": "<li className=\"mb-4\">  <h2 className=\"text-lg font-bold\">{lesson_title}</h2>  <p>{lesson_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View More</button></li>"
      }
    ]
  },
  {
    "description": "The UI should have a large video or audio player in the center, with playback controls (play/pause, seek, volume) below it. There should also be a title and optional description above the player.",
    "component_list": [
      {
        "name": "MediaPlayer",
        "is_standalone": true,
        "description": "standalone, displays the video or audio content "
      },
      {
        "name": "MediaControls",
        "is_standalone": true,
        "description": "standalone, displays the playback controls (play/pause, seek, volume) "
      },
      {
        "name": "MediaTitle",
        "is_standalone": true,
        "description": "standalone, displays the title of the media "
      },
      {
        "name": "MediaDescription",
        "is_standalone": true,
        "description": "standalone, displays a optional description of the media "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen p-4\">\n  <div class=\"flex justify-center mb-4\">\n    <MediaTitle/> <!-- displays the title of the media -->\n    <MediaDescription/> <!-- displays a optional description of the media -->\n  </div>\n  <MediaPlayer/> <!-- displays the video or audio content -->\n  <MediaControls/> <!-- displays the playback controls (play/pause, seek, volume) -->\n</div>\n",
    "component_html": [
      {
        "name": "MediaPlayer",
        "html": "<div class=\"w-full h-96 bg-gray-200 rounded-lg\">  <!-- video or audio content will be rendered here --></div>"
      },
      {
        "name": "MediaControls",
        "html": "<div class=\"flex justify-center mb-4\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {play_or_pause_text}  </button>  <div class=\"mx-4\">    <input type=\"range\" class=\"w-full\" />  </div>  <button class=\"bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">    Volume: {volume_level}%  </button></div>"
      },
      {
        "name": "MediaTitle",
        "html": "<h2 class=\"text-2xl font-bold mb-2\">{media_title}</h2>"
      },
      {
        "name": "MediaDescription",
        "html": "<p class=\"text-gray-600\">{media_description}</p>"
      }
    ]
  },
  {
    "description": "A comprehensive quiz and assessment tools page that displays a list of quizzes and assessments with their respective details and actions.",
    "component_list": [
      {
        "name": "QuizAssessmentToolsPage",
        "is_standalone": true,
        "description": "- Standalone component that wraps the entire UI. "
      },
      {
        "name": "QuizAssessmentCard",
        "is_standalone": false,
        "description": "- Component that displays a single quiz or assessment with its details and actions. Takes children. "
      },
      {
        "name": "QuizAssessmentList",
        "is_standalone": false,
        "description": "- Component that displays a list of quizzes and assessments. Takes children. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <QuizAssessmentToolsPage>\n    <QuizAssessmentList>\n      <QuizAssessmentCard />\n      <QuizAssessmentCard />\n      <!-- Add more QuizAssessmentCard components here -->\n    </QuizAssessmentList>\n  </QuizAssessmentToolsPage>\n</div>\n",
    "component_html": [
      {
        "name": "QuizAssessmentToolsPage",
        "html": "<div className=\"flex flex-col h-screen\">  <h1 className=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>  {children}</div>"
      },
      {
        "name": "QuizAssessmentList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "QuizAssessmentCard",
        "html": "<li className=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 className=\"text-lg font-bold\">{quiz_name}</h2>  <p className=\"text-gray-600\">{description}</p>  <p><span className=\"text-gray-600\">{num_questions} questions</span></p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Take Quiz</button>  <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\">View Results</button></li>"
      }
    ]
  },
  {
    "description": "A discussion forum with a list of comments and a form to add new comments. Each comment should display the user's name, the comment text, and a timestamp. The UI should have a clean and modern design, with adequate spacing and clear typography.",
    "component_list": [
      {
        "name": "CommentCard",
        "is_standalone": true,
        "description": "(standalone): Displays a single comment with user name, comment text, and timestamp. "
      },
      {
        "name": "CommentForm",
        "is_standalone": true,
        "description": "(standalone): A form to add a new comment. "
      },
      {
        "name": "CommentList",
        "is_standalone": false,
        "description": "(takes children): A container for a list of comments. "
      },
      {
        "name": "DiscussionForum",
        "is_standalone": false,
        "description": "(takes children): The main container for the discussion forum. "
      }
    ],
    "main_html": "<!-- The main discussion forum container -->\n<div className=\"max-w-md mx-auto p-4\">\n  <DiscussionForum>\n    <CommentList>\n      <!-- List of comments will be rendered here -->\n      <CommentCard />\n      <CommentCard />\n      <!-- ... -->\n    </CommentList>\n    <CommentForm />\n  </DiscussionForum>\n</div>\n",
    "component_html": [
      {
        "name": "CommentCard",
        "html": "<div className=\"flex gap-2 mb-4\">  <img src=\"{user_avatar_url}\" alt=\"User Avatar\" className=\"w-10 h-10 rounded-full\" />  <div className=\"flex-1\">    <h5 className=\"text-lg font-bold\">{username}</h5>    <p>{comment_text}</p>    <p className=\"text-sm text-gray-500\">{timestamp}</p>  </div></div>"
      },
      {
        "name": "CommentForm",
        "html": "<form className=\"flex gap-2 mb-4\">  <input type=\"text\" placeholder=\"Add a comment...\" className=\"flex-1 p-2\" />  <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4\">Comment</button></form>"
      },
      {
        "name": "CommentList",
        "html": "<!-- This component will render a list of CommentCards --><div className=\"space-y-4\">  {children}</div>"
      },
      {
        "name": "DiscussionForum",
        "html": "<!-- This component will render the entire discussion forum UI --><div className=\"rounded-lg overflow-hidden shadow-md\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display course recommendations in a card layout, with each card showing the course title, description, and rating. The cards should be arranged in a grid, with multiple cards per row.",
    "component_list": [
      {
        "name": "CourseCard",
        "is_standalone": true,
        "description": "A standalone component that displays a course's information, including title, description, and rating. "
      },
      {
        "name": "CourseRecommendationsGrid",
        "is_standalone": false,
        "description": "A component that takes children (multiple `CourseCard` components) and arranges them in a grid layout. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold\">Course Recommendations</h1>\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <CourseRecommendationsGrid>\n      <CourseCard/>\n      <CourseCard/>\n      <CourseCard/>\n      <!-- Add more CourseCard components as needed -->\n    </CourseRecommendationsGrid>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "CourseCard",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  <h2 className=\"text-lg font-bold\">{course_title}</h2>  <p>{course_description}</p>  <p>Rating: {rating}/5</p></div>"
      },
      {
        "name": "CourseRecommendationsGrid",
        "html": "<!-- Children will be placed here -->{children}"
      }
    ]
  },
  {
    "description": "A responsive video embed that adjusts to different screen sizes, with a maximum width of 800px and a height that scales accordingly.",
    "component_list": [
      {
        "name": "VideoEmbed",
        "is_standalone": true,
        "description": "standalone component, contains the video iframe and styling. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <VideoEmbed />\n</div>\n",
    "component_html": [
      {
        "name": "VideoEmbed",
        "html": "<!-- wrapper div for video iframe --><div class=\"aspect-w-16 aspect-h-9\">  <!-- iframe with video content -->  <iframe src=\"{video_url}\" frameborder=\"0\" allowfullscreen></iframe></div>"
      }
    ]
  },
  {
    "description": "A list view of topics, with each topic displaying its title, description, and metadata (e.g. number of replies, last post time).",
    "component_list": [
      {
        "name": "TopicListView",
        "is_standalone": true,
        "description": "(standalone) - The container component for the list of topics. "
      },
      {
        "name": "TopicListItem",
        "is_standalone": false,
        "description": "(takes children) - A single topic item in the list. "
      }
    ],
    "main_html": "<TopicListView>\n  <!-- list of topics -->\n  <TopicListItem />\n  <TopicListItem />\n  <!-- ... -->\n</TopicListView>\n",
    "component_html": [
      {
        "name": "TopicListView",
        "html": "<div class=\"max-w-md mx-auto p-4\">  <h2 class=\"text-lg font-bold mb-4\">Topics</h2>  <ul class=\"list-none mb-0\">    {children}  </ul></div>"
      },
      {
        "name": "TopicListItem",
        "html": "<li class=\"py-4 border-b border-gray-200\">  <h3 class=\"text-lg font-bold\">{topic_title}</h3>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-sm text-gray-500\">{reply_count} replies • {last_post_time}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a post reply with editing tools, including a text area for writing the reply, a submit button, and editing tools such as bold, italic, and link insertion.",
    "component_list": [
      {
        "name": "PostReplyEditor",
        "is_standalone": true,
        "description": "standalone component that wraps the entire post reply interface. "
      },
      {
        "name": "ReplyTextArea",
        "is_standalone": true,
        "description": "standalone component that renders a text area for writing the reply. "
      },
      {
        "name": "EditingTools",
        "is_standalone": true,
        "description": "standalone component that renders a set of editing tools (e.g., bold, italic, link). "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "standalone component that renders a submit button. "
      }
    ],
    "main_html": "<div className=\"flex flex-col gap-4\">\n  <PostReplyEditor>\n    <ReplyTextArea />\n    <EditingTools />\n    <SubmitButton />\n  </PostReplyEditor>\n</div>\n",
    "component_html": [
      {
        "name": "PostReplyEditor",
        "html": "<div className=\"p-4 bg-white rounded-md shadow-md\">  {children}</div>"
      },
      {
        "name": "ReplyTextArea",
        "html": "<textarea   className=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder=\"Write your reply...\" />"
      },
      {
        "name": "EditingTools",
        "html": "<div className=\"flex justify-between mb-4\">  <button className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">    <i className=\"fas fa-bold\"></i>  </button>  <button className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">    <i className=\"fas fa-italic\"></i>  </button>  <button className=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">    <i className=\"fas fa-link\"></i>  </button></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button   className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information, including their profile picture, username, reputation score, and badges earned.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile information "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile picture "
      },
      {
        "name": "UsernameBadge",
        "is_standalone": true,
        "description": "standalone component that displays the user's username and reputation score "
      },
      {
        "name": "BadgeList",
        "is_standalone": false,
        "description": "takes children, displays a list of badges earned by the user "
      },
      {
        "name": "BadgeItem",
        "is_standalone": true,
        "description": "standalone component that displays a single badge earned by the user "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 bg-white rounded shadow-md\">\n  <UserProfileCard>\n    <ProfilePicture />\n    <UsernameBadge />\n    <BadgeList>\n      <!-- badge items will be inserted here -->\n    </BadgeList>\n  </UserProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img class=\"w-24 h-24 rounded-full\" src={profile_picture_url} alt=\"Profile Picture\" />"
      },
      {
        "name": "UsernameBadge",
        "html": "<div class=\"flex items-center\">  <span class=\"text-lg font-bold\">{username}</span>  <span class=\"text-sm text-gray-600 ml-2\">{reputation_score} points</span></div>"
      },
      {
        "name": "BadgeList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "BadgeItem",
        "html": "<li class=\"flex items-center mb-2\">  <img class=\"w-8 h-8\" src={badge_icon_url} alt={badge_name} />  <span class=\"text-sm text-gray-600 ml-2\">{badge_name}</span></li>"
      }
    ]
  },
  {
    "description": "A threaded commenting system where comments can be nested within each other, with each comment displaying the user's username, comment text, and a reply button.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "A standalone component that contains a list of Comment components. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "A component that takes children (replies) and displays a comment. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "A standalone component that displays a \"Reply\" button. "
      }
    ],
    "main_html": "<CommentThread>\n  <Comment>\n    <!-- username and comment text -->\n    <ReplyButton />\n    <!-- replies -->\n    <CommentThread>\n      <!-- nested comments -->\n    </CommentThread>\n  </Comment>\n</CommentThread>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"flex flex-col gap-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex items-start gap-2 mb-2\">  <p class=\"text-sm\">{username}</p>  <p class=\"text-base\">{comment_text}</p>  <ReplyButton />  <CommentThread>    {children}  </CommentThread></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded\">Reply</button>"
      }
    ]
  },
  {
    "description": "The UI should be a navigation bar with two sections: Tags and Categories. Each section should have a header and a list of items. The tags and categories should be clickable.",
    "component_list": [
      {
        "name": "TagNavItem",
        "is_standalone": true,
        "description": "a standalone component representing a single tag item in the navigation bar. "
      },
      {
        "name": "CategoryNavItem",
        "is_standalone": true,
        "description": "a standalone component representing a single category item in the navigation bar. "
      },
      {
        "name": "NavItemGroup",
        "is_standalone": false,
        "description": "a component that takes children, representing a group of navigation items (e.g. Tags or Categories). "
      },
      {
        "name": "NavHeader",
        "is_standalone": true,
        "description": "a standalone component representing a header for a navigation group. "
      }
    ],
    "main_html": "<nav class=\"flex justify-between\">\n  <NavItemGroup>\n    <NavHeader>Tags</NavHeader>\n    <!-- list of tags -->\n    <TagNavItem/><TagNavItem/><TagNavItem/>\n  </NavItemGroup>\n  <NavItemGroup>\n    <NavHeader>Categories</NavHeader>\n    <!-- list of categories -->\n    <CategoryNavItem/><CategoryNavItem/><CategoryNavItem/>\n  </NavItemGroup>\n</nav>\n",
    "component_html": [
      {
        "name": "TagNavItem",
        "html": "<a href `{tag_url}` class=\"block py-2 px-4 hover:bg-gray-100\">  {tag_name}</a>"
      },
      {
        "name": "CategoryNavItem",
        "html": "<a href `{category_url}` class=\"block py-2 px-4 hover:bg-gray-100\">  {category_name}</a>"
      },
      {
        "name": "NavItemGroup",
        "html": "<div class=\"mr-4\">  {children}</div>"
      },
      {
        "name": "NavHeader",
        "html": "<h5 class=\"uppercase text-sm text-gray-600\">{header_text}</h5>"
      }
    ]
  },
  {
    "description": "The UI should have a search bar input field, a search button, and a filters section with dropdowns for filtering by category, rating, and price.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Filters",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "DropdownFilter",
        "is_standalone": false,
        "description": "takes children (options) "
      }
    ],
    "main_html": "<div className=\"flex flex-col md:flex-row justify-between mb-4\">\n  <SearchBar />\n  <Filters />\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div className=\"w-full md:w-1/2 px-3 mb-4 md:mb-0\">  <input    type=\"text\"    placeholder=\"Search...\"    className=\"w-full pl-2 py-2 text-sm text-gray-700\"  />  <button    type=\"submit\"    className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  >    Search  </button></div>"
      },
      {
        "name": "Filters",
        "html": "<div className=\"w-full md:w-1/2 px-3\">  <h5 className=\"text-sm text-gray-600 mb-2\">Filters</h5>  <div className=\"flex flex-wrap -mx-3\">    <div className=\"w-1/3 px-3 mb-4\">      <DropdownFilter label=\"Category\">        {children}      </DropdownFilter>    </div>    <div className=\"w-1/3 px-3 mb-4\">      <DropdownFilter label=\"Rating\">        {children}      </DropdownFilter>    </div>    <div className=\"w-1/3 px-3 mb-4\">      <DropdownFilter label=\"Price\">        {children}      </DropdownFilter>    </div>  </div></div>"
      },
      {
        "name": "DropdownFilter",
        "html": "<div className=\"relative\">  <label className=\"block text-sm text-gray-600 mb-1\">{label}</label>  <select    className=\"block w-full pl-2 py-2 text-sm text-gray-700\"  >    {children}  </select></div>"
      }
    ]
  },
  {
    "description": "The UI should display a user's rank and badges in a compact and visually appealing way. The rank should be prominently displayed, and the badges should be shown as a series of icons or images below the rank.",
    "component_list": [
      {
        "name": "UserRank",
        "is_standalone": true,
        "description": "component (standalone): Displays the user's rank. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "component (standalone): Displays a single badge icon. "
      },
      {
        "name": "BadgeList",
        "is_standalone": false,
        "description": "component (takes children): Displays a list of badges. "
      }
    ],
    "main_html": "<div className=\"flex flex-col items-center\">\n  <UserRank/> <!-- Displays the user's rank -->\n  <BadgeList>\n    <!-- List of badges will be rendered here -->\n  </BadgeList>\n</div>\n",
    "component_html": [
      {
        "name": "UserRank",
        "html": "<div className=\"text-2xl font-bold\">{rank_name}</div>"
      },
      {
        "name": "Badge",
        "html": "<img src={badge_icon_url} alt={badge_name} className=\"w-6 h-6\" />"
      },
      {
        "name": "BadgeList",
        "html": "<div className=\"flex flex-wrap justify-center\">  {children} <!-- List of Badge components will be rendered here --></div>"
      }
    ]
  },
  {
    "description": "The UI should display a toolbar with various editing and formatting tools for a text area. The toolbar should have a clean and minimalistic design, with clear and recognizable icons for each tool.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "(standalone) - The main toolbar component that contains all the editing and formatting tools. "
      },
      {
        "name": "ToolButton",
        "is_standalone": false,
        "description": "(takes children) - An individual button component that represents a single editing or formatting tool. It can contain an icon and a tooltip. "
      },
      {
        "name": "TextArea",
        "is_standalone": true,
        "description": "(standalone) - The text area component where the user can edit and format their text. "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <Toolbar>\n    <ToolButton><i class=\"fas fa-bold\"></i></ToolButton>\n    <ToolButton><i class=\"fas fa-italic\"></i></ToolButton>\n    <ToolButton><i class=\"fas fa-underline\"></i></ToolButton>\n    <!-- more tool buttons here -->\n  </Toolbar>\n  <TextArea />\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<nav class=\"bg-gray-200 h-10 px-4 py-2 flex items-center justify-between\">  {children}</nav>"
      },
      {
        "name": "ToolButton",
        "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\">  <i class={iconClass}></i>  <span class=\"tooltip\">{tooltip}</span></button>"
      },
      {
        "name": "TextArea",
        "html": "<textarea class=\"w-full h-64 p-4 text-lg bg-white border border-gray-400 rounded\" placeholder=\"Edit your text here...\"></textarea>"
      }
    ]
  },
  {
    "description": "The UI should display a responsive table layout with a header row, multiple data rows, and columns that adjust their width based on the screen size.",
    "component_list": [
      {
        "name": "ResponsiveTable",
        "is_standalone": false,
        "description": "The main container for the responsive table layout. Takes children. "
      },
      {
        "name": "TableHeader",
        "is_standalone": false,
        "description": "The header row of the table. Takes children. "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "A single row in the table. Takes children. "
      },
      {
        "name": "TableCell",
        "is_standalone": false,
        "description": "A single cell in the table. Takes children. "
      }
    ],
    "main_html": "<ResponsiveTable>\n  <TableHeader>\n    <TableCell><span>Column 1</span></TableCell>\n    <TableCell><span>Column 2</span></TableCell>\n    <TableCell><span>Column 3</span></TableCell>\n  </TableHeader>\n  <TableRow>\n    <TableCell>{cellData1}</TableCell>\n    <TableCell>{cellData2}</TableCell>\n    <TableCell>{cellData3}</TableCell>\n  </TableRow>\n  <!-- More TableRow components here -->\n</ResponsiveTable>\n",
    "component_html": [
      {
        "name": "ResponsiveTable",
        "html": "<div class=\"overflow-x-auto\">  <table class=\"w-full border-collapse\">    {children}  </table></div>"
      },
      {
        "name": "TableHeader",
        "html": "<thead>  <tr class=\"bg-gray-100\">    {children}  </tr></thead>"
      },
      {
        "name": "TableRow",
        "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
      },
      {
        "name": "TableCell",
        "html": "<td class=\"px-4 py-2\">{children}</td>"
      }
    ]
  },
  {
    "description": "A responsive grid of project cards, with each card displaying a thumbnail, title, description, and tags. The grid should be flexible to accommodate different screen sizes.",
    "component_list": [
      {
        "name": "ProjectCard",
        "is_standalone": true,
        "description": "standalone component that displays a single project card "
      },
      {
        "name": "ProjectGrid",
        "is_standalone": false,
        "description": "container component that wraps a grid of project cards, takes children "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProjectGrid>\n    <ProjectCard />\n    <ProjectCard />\n    <ProjectCard />\n    <!-- Add more ProjectCard components here -->\n  </ProjectGrid>\n</div>\n",
    "component_html": [
      {
        "name": "ProjectCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={thumbnail_url} alt={project_title} class=\"w-full rounded-t\" />  <h2 class=\"text-lg font-bold\">{project_title}</h2>  <p class=\"text-gray-600\">{project_description}</p>  <ul class=\"flex flex-wrap\">    {tags.map((tag) => (      <li class=\"mr-2\">{tag}</li>    ))}  </ul></div>"
      },
      {
        "name": "ProjectGrid",
        "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A profile page for a designer or studio, showcasing their information, skills, and portfolio.",
    "component_list": [
      {
        "name": "DesignerProfileHeader",
        "is_standalone": true,
        "description": "standalone, displays the designer's/studio's name, profile picture, and bio. "
      },
      {
        "name": "SkillList",
        "is_standalone": false,
        "description": "takes children, displays a list of skills with icons. "
      },
      {
        "name": "PortfolioItem",
        "is_standalone": true,
        "description": "standalone, displays a single portfolio item with image, title, and description. "
      },
      {
        "name": "PortfolioGrid",
        "is_standalone": false,
        "description": "takes children, displays a grid of portfolio items. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <DesignerProfileHeader/>\n  <section class=\"mb-4\">\n    <h2 class=\"text-lg font-bold\">Skills</h2>\n    <SkillList>\n      <!-- skill items will be inserted here -->\n    </SkillList>\n  </section>\n  <section class=\"mb-4\">\n    <h2 class=\"text-lg font-bold\">Portfolio</h2>\n    <PortfolioGrid>\n      <!-- portfolio items will be inserted here -->\n    </PortfolioGrid>\n  </section>\n</div>\n",
    "component_html": [
      {
        "name": "DesignerProfileHeader",
        "html": "<div class=\"flex mb-4\">  <img src=\"{profile_picture_url}\" class=\"w-24 h-24 rounded-full mr-4\" />  <div>    <h1 class=\"text-2xl font-bold\">{designer_name}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
      },
      {
        "name": "SkillList",
        "html": "<ul class=\"flex flex-wrap mb-4\">  {children}</ul>"
      },
      {
        "name": "PortfolioItem",
        "html": "<div class=\"shadow-md p-4 mb-4\">  <img src=\"{image_url}\" class=\"w-full mb-2\" />  <h3 class=\"text-lg font-bold\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
      },
      {
        "name": "PortfolioGrid",
        "html": "<div class=\"grid grid-cols-1 gap-4 mb-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A section that displays a case study with a description text, possibly with a title and some visual elements.",
    "component_list": [
      {
        "name": "CaseStudySection",
        "is_standalone": true,
        "description": "standalone component that wraps the entire case study section "
      },
      {
        "name": "CaseStudyTitle",
        "is_standalone": true,
        "description": "standalone component that displays the title of the case study "
      },
      {
        "name": "DescriptionText",
        "is_standalone": true,
        "description": "standalone component that displays the description text "
      }
    ],
    "main_html": "<section className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <CaseStudySection>\n    <CaseStudyTitle />\n    <DescriptionText />\n    <!-- possibly some visual elements here -->\n  </CaseStudySection>\n</section>\n",
    "component_html": [
      {
        "name": "CaseStudySection",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  {children}</div>"
      },
      {
        "name": "CaseStudyTitle",
        "html": "<h2 className=\"text-2xl font-bold\">{case_study_title}</h2>"
      },
      {
        "name": "DescriptionText",
        "html": "<p className=\"text-gray-600\">{description_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a navigation component that displays a list of tags and categories, allowing users to filter content.",
    "component_list": [
      {
        "name": "NavigationMenu",
        "is_standalone": true,
        "description": "standalone component that wraps the entire navigation UI "
      },
      {
        "name": "FilterGroup",
        "is_standalone": true,
        "description": "standalone component that groups related filters (e.g., tags or categories) "
      },
      {
        "name": "FilterItem",
        "is_standalone": false,
        "description": "component that represents a single filter item (e.g., a tag or category), takes children "
      }
    ],
    "main_html": "<NavigationMenu>\n  <FilterGroup>\n    <h2>Tags</h2>\n    <!-- list of tags will be rendered here -->\n    <FilterItem/><FilterItem/><FilterItem/>\n  </FilterGroup>\n  <FilterGroup>\n    <h2>Categories</h2>\n    <!-- list of categories will be rendered here -->\n    <FilterItem/><FilterItem/><FilterItem/>\n  </FilterGroup>\n</NavigationMenu>\n",
    "component_html": [
      {
        "name": "NavigationMenu",
        "html": "<nav class=\"flex flex-wrap bg-white shadow-md rounded-md\">  {children}</nav>"
      },
      {
        "name": "FilterGroup",
        "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{groupName}</h2>  <ul class=\"list-none mb-0\">    {children}  </ul></div>"
      },
      {
        "name": "FilterItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <a href=\"#\" class=\"block py-2 px-4\">{filterName}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should consist of a search bar with a text input field, a search button, and filters (e.g., dropdowns or checkboxes) to narrow down the search results.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that contains a text input field and a search button. "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component that is a text input field. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component that is a button. "
      },
      {
        "name": "FilterRow",
        "is_standalone": false,
        "description": "component that takes children, which will be filter options (e.g., dropdowns or checkboxes). "
      },
      {
        "name": "FilterOption",
        "is_standalone": true,
        "description": "standalone component that represents a single filter option (e.g., a dropdown item or checkbox). "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <SearchBar/>\n  <FilterRow>\n    <FilterOption/>\n    <FilterOption/>\n    <!-- Add more FilterOption components as needed -->\n  </FilterRow>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div className=\"flex items-center bg-white rounded-md shadow-md p-2\">  <SearchInput/>  <SearchButton/></div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"text\" className=\"border border-gray-200 p-2 w-full\" placeholder=\"Search...\"/>"
      },
      {
        "name": "SearchButton",
        "html": "<button className=\"bg-orange-500 text-white p-2 rounded-md\">  Search</button>"
      },
      {
        "name": "FilterRow",
        "html": "<div className=\"flex flex-wrap justify-between\">  {children}</div>"
      },
      {
        "name": "FilterOption",
        "html": "<div className=\"mr-2 mb-2\">  <select className=\"border border-gray-200 p-2 w-full\">    <option value={option_value}>{option_label}</option>  </select></div>"
      }
    ]
  },
  {
    "description": "A comment section where users can view and leave comments and feedback. The UI should display the comments in a list format, with each comment showing the user's name, comment text, and a timestamp. There should also be a text input field and a submit button for users to leave new comments.",
    "component_list": [
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "A standalone component that contains the entire comment section. "
      },
      {
        "name": "CommentItem",
        "is_standalone": false,
        "description": "A component that displays a single comment, takes children. "
      },
      {
        "name": "CommentInput",
        "is_standalone": true,
        "description": "A standalone component that contains the text input field and submit button. "
      }
    ],
    "main_html": "< CommentSection >\n  <!-- List of comments -->\n  <ul>\n    <CommentItem />\n    <CommentItem />\n    <!-- more comments -->\n  </ul>\n  <!-- Input field and submit button -->\n  <CommentInput />\n</ CommentSection >\n",
    "component_html": [
      {
        "name": "CommentSection",
        "html": "<div class=\"w-full p-4 md:p-6 bg-white rounded shadow-md\">  {children}</div>"
      },
      {
        "name": "CommentItem",
        "html": "<li class=\"py-4 border-b\">  <p class=\"text-sm\">{username}</p>  <p class=\"text-gray-600\">{commentText}</p>  <p class=\"text-xs text-gray-500\">{timestamp}</p>  {children}</li>"
      },
      {
        "name": "CommentInput",
        "html": "<div class=\"flex\">  <input type=\"text\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Leave a comment...\" />  <button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded\">Submit</button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of favorites and bookmarks, allowing users to easily add, remove, and view their saved items.",
    "component_list": [
      {
        "name": "FavoritesHeader",
        "is_standalone": true,
        "description": "A standalone component displaying the title and subtitle of the favorites section. "
      },
      {
        "name": "BookmarkItem",
        "is_standalone": false,
        "description": "A component that takes children, representing a single bookmark item with title, description, and actions. "
      },
      {
        "name": "BookmarkList",
        "is_standalone": false,
        "description": "A component that takes children, displaying a list of bookmark items. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <FavoritesHeader />\n  <BookmarkList>\n    <BookmarkItem />\n    <BookmarkItem />\n    <!-- Add more BookmarkItem components here -->\n  </BookmarkList>\n</div>\n",
    "component_html": [
      {
        "name": "FavoritesHeader",
        "html": "<div className=\"flex justify-between mb-4\">  <h2 className=\"text-lg font-bold\">Favorites</h2>  <p className=\"text-gray-500\">{favorite_count} items</p></div>"
      },
      {
        "name": "BookmarkItem",
        "html": "<div className=\"flex p-4 border-b border-gray-200\">  <div className=\"flex-grow mr-4\">    <h3 className=\"text-lg font-bold\">{title}</h3>    <p className=\"text-gray-500\">{description}</p>  </div>  <div className=\"flex-shrink-0\">    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Remove</button>  </div></div>"
      },
      {
        "name": "BookmarkList",
        "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a responsive image gallery with a grid layout that adapts to different screen sizes. The gallery should have a maximum of three columns on large screens, two columns on medium screens, and one column on small screens.",
    "component_list": [
      {
        "name": "ImageGallery",
        "is_standalone": true,
        "description": "a standalone component that contains the entire gallery. "
      },
      {
        "name": "GalleryItem",
        "is_standalone": false,
        "description": "a component that takes children (an image and optional caption) and represents a single item in the gallery. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <ImageGallery>\n    <GalleryItem><img src=\"{image_url}\" alt=\"{image_alt}\" /></GalleryItem>\n    <GalleryItem><img src=\"{image_url}\" alt=\"{image_alt}\" /></GalleryItem>\n    <GalleryItem><img src=\"{image_url}\" alt=\"{image_alt}\" /></GalleryItem>\n    <!-- ... more GalleryItem components here -->\n  </ImageGallery>\n</div>\n",
    "component_html": [
      {
        "name": "ImageGallery",
        "html": "<div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">  {children}</div>"
      },
      {
        "name": "GalleryItem",
        "html": "<div className=\"relative\">  <img src=\"{image_url}\" alt=\"{image_alt}\" />  {children} <!-- optional caption --></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of forum categories, each containing a title and a list of subforums. Each subforum should also display a title and a brief description.",
    "component_list": [
      {
        "name": "ForumCategory",
        "is_standalone": true,
        "description": "standalone component that displays a category title and a list of subforums. "
      },
      {
        "name": "Subforum",
        "is_standalone": true,
        "description": "standalone component that displays a subforum title and description. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold mb-4\">Forum Categories</h1>\n  <ul>\n    <ForumCategory />\n    <ForumCategory />\n    <!-- Add more ForumCategory components here -->\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "ForumCategory",
        "html": "<li className=\"py-2\">  <h2 className=\"text-lg font-bold\">{category_title}</h2>  <ul>    <Subforum />    <Subforum />    <!-- Add more Subforum components here -->  </ul></li>"
      },
      {
        "name": "Subforum",
        "html": "<li className=\"py-2\">  <h3 className=\"text-md font-bold\">{subforum_title}</h3>  <p>{subforum_description}</p></li>"
      }
    ]
  },
  {
    "description": "A vertical list of topics with a title, description, and some metadata (e.g. author, timestamp). Each topic should have a clear visual distinction from the others.",
    "component_list": [
      {
        "name": "TopicListItem",
        "is_standalone": true,
        "description": "(standalone): a single topic item in the list "
      },
      {
        "name": "TopicList",
        "is_standalone": false,
        "description": "(takes children): the container for the list of topics "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <TopicList>\n    <TopicListItem/>\n    <TopicListItem/>\n    <!-- add more TopicListItem components here -->\n  </TopicList>\n</div>\n",
    "component_html": [
      {
        "name": "TopicList",
        "html": "<ul className=\"divide-y divide-gray-200\">  {children}</ul>"
      },
      {
        "name": "TopicListItem",
        "html": "<li className=\"py-4\">  <h2 className=\"text-lg\">{topic_title}</h2>  <p className=\"text-gray-500\">{topic_description}</p>  <p className=\"text-xs text-gray-400\">    Posted by {author_name} on {timestamp}  </p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a post reply input field with a reply button, and editing tools such as Bold, Italic, and Strikethrough.",
    "component_list": [
      {
        "name": "PostReplyInput",
        "is_standalone": true,
        "description": "Standalone component that renders a text input field. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "Standalone component that renders a button to submit the reply. "
      },
      {
        "name": "EditingTools",
        "is_standalone": false,
        "description": "Component that takes children and renders a container for the editing tools. "
      },
      {
        "name": "FormattingOption",
        "is_standalone": true,
        "description": "Standalone component that renders a single editing tool (e.g. Bold, Italic, Strikethrough). "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <PostReplyInput />\n  <ReplyButton />\n  <EditingTools>\n    <FormattingOption> Bold </FormattingOption>\n    <FormattingOption> Italic </FormattingOption>\n    <FormattingOption> Strikethrough </FormattingOption>\n  </EditingTools>\n</div>\n",
    "component_html": [
      {
        "name": "PostReplyInput",
        "html": "<input type=\"text\" class=\"w-full p-2 border border-gray-200 rounded\" />"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Reply</button>"
      },
      {
        "name": "EditingTools",
        "html": "<div class=\"flex gap-2\">{children}</div>"
      },
      {
        "name": "FormattingOption",
        "html": "<button class=\"border border-gray-200 rounded py-1 px-2\">{children}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information, including their username, profile picture, and reputation score. It should also show the user's reputation level and a progress bar indicating their progress towards the next level.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "a standalone component that displays the user's profile information, including their username, profile picture, and reputation score. "
      },
      {
        "name": "ReputationBar",
        "is_standalone": false,
        "description": "a component that displays the user's reputation level and progress towards the next level. Takes children. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "a standalone component that displays the user's profile picture. "
      }
    ],
    "main_html": "<div class=\"flex flex-col p-4\">\n  <UserProfileCard>\n    <ProfilePicture />\n    <h2 class=\"text-lg\">{username}</h2>\n    <p class=\"text-sm text-gray-600\">{bio}</p>\n  </UserProfileCard>\n  <ReputationBar>\n    <p>Reputation: {reputation_score}</p>\n    <div class=\"w-full bg-gray-200 h-2\">\n      <div class=\"bg-orange-500 h-2\" style={{ width: `${progress_percent}%` }}></div>\n    </div>\n    <p>{reputation_level} ({progress_percent}%)</p>\n  </ReputationBar>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"bg-white shadow-md p-4 rounded\">  {children}</div>"
      },
      {
        "name": "ReputationBar",
        "html": "<div class=\"bg-white shadow-md p-4 rounded mt-4\">  {children}</div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src={profile_picture_url} class=\"w-20 h-20 rounded-full\" />"
      }
    ]
  },
  {
    "description": "A threaded commenting system where each comment can have multiple replies, and each reply can have multiple replies of its own, forming a nested structure.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "(standalone) - The top-level commenting component. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "(takes children) - A single comment with a reply button and a reply input field. "
      },
      {
        "name": "Reply",
        "is_standalone": false,
        "description": "(takes children) - A reply to a comment, which can have its own replies. "
      },
      {
        "name": "ReplyInput",
        "is_standalone": true,
        "description": "(standalone) - An input field for writing a new reply. "
      },
      {
        "name": "CancelButton",
        "is_standalone": true,
        "description": "(standalone) - A cancel button to cancel composing a reply. "
      }
    ],
    "main_html": "<div class=\"max-w-lg mx-auto p-4\">\n  <CommentThread />\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<section class=\"flex flex-col gap-4\">  {children}</section>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex gap-2 mb-4\">  <img src=\"{avatarUrl}\" alt=\"User Avatar\" class=\"w-10 h-10 rounded-full\" />  <div class=\"flex-1\">    <p class=\"text-sm\">{commentText}</p>    <div class=\"flex gap-2 text-sm\">      <ReplyInput />      <CancelButton />    </div>    <Reply />  </div></div>"
      },
      {
        "name": "Reply",
        "html": "<div class=\"ml-4\">  <Comment /></div>"
      },
      {
        "name": "ReplyInput",
        "html": "<input type=\"text\" placeholder=\"Write a reply...\" class=\"bg-gray-100 p-2 w-full\" />"
      },
      {
        "name": "CancelButton",
        "html": "<button class=\"bg-red-500 text-white py-1 px-2 rounded\">Cancel</button>"
      }
    ]
  },
  {
    "description": "A navigation bar with tags and categories. The navigation bar should have a dark background and white text. The tags and categories should be white with a dark background on hover.",
    "component_list": [
      {
        "name": "NavigationBar",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "- takes children "
      },
      {
        "name": "NavItemLink",
        "is_standalone": false,
        "description": "- takes children "
      }
    ],
    "main_html": "<nav className=\"bg-dark text-white h-screen p-4\">\n  <NavigationBar>\n    <NavItem>\n      <NavItemLink>Tags</NavItemLink>\n      <ul>\n        <NavItem>\n          <NavItemLink>Tag 1</NavItemLink>\n        </NavItem>\n        <NavItem>\n          <NavItemLink>Tag 2</NavItemLink>\n        </NavItem>\n        <!-- more tags here -->\n      </ul>\n    </NavItem>\n    <NavItem>\n      <NavItemLink>Categories</NavItemLink>\n      <ul>\n        <NavItem>\n          <NavItemLink>Category 1</NavItemLink>\n        </NavItem>\n        <NavItem>\n          <NavItemLink>Category 2</NavItemLink>\n        </NavItem>\n        <!-- more categories here -->\n      </ul>\n    </NavItem>\n  </NavigationBar>\n</nav>\n",
    "component_html": [
      {
        "name": "NavigationBar",
        "html": "<div className=\"flex flex-col\">{children}</div>"
      },
      {
        "name": "NavItem",
        "html": "<li className=\"my-2\">{children}</li>"
      },
      {
        "name": "NavItemLink",
        "html": "<a className=\"block py-2 px-4 hover:bg-dark hover:text-white rounded\" href=\"{link_href}\">{children}</a>"
      }
    ]
  },
  {
    "description": "The UI should be a search bar with a input field and a button to submit the search query. Additionally, there should be filters to narrow down the search results, such as categories and tags.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that renders the search input field and submit button. "
      },
      {
        "name": "FilterList",
        "is_standalone": true,
        "description": "standalone component that renders a list of filters. "
      },
      {
        "name": "FilterItem",
        "is_standalone": false,
        "description": "child component of `FilterList` that renders a single filter option. "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <SearchBar />\n  <FilterList>\n    <FilterItem />\n    <FilterItem />\n    <!-- more FilterItem components here -->\n  </FilterList>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div className=\"flex items-center mb-4\">  <input     type=\"text\"     className=\"border border-gray-300 px-2 py-1 rounded-md w-full\"     placeholder=\"Search...\"  />  <button     className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"  >    Search  </button></div>"
      },
      {
        "name": "FilterList",
        "html": "<div className=\"flex flex-wrap\">  {children}</div>"
      },
      {
        "name": "FilterItem",
        "html": "<div className=\"mr-2 mb-2\">  <input     type=\"checkbox\"     id={`filter-${filter_name}`}    className=\"mr-2\"  />  <label     className=\"text-gray-600\"     htmlFor={`filter-${filter_name}`}  >    {filter_name}  </label></div>"
      }
    ]
  },
  {
    "description": "A user rank and badge display with a circular avatar, username, rank, and badges.",
    "component_list": [
      {
        "name": "UserAvatar",
        "is_standalone": true,
        "description": "(standalone): displays a circular avatar image "
      },
      {
        "name": "UserProfile",
        "is_standalone": false,
        "description": "(takes children): displays the user's profile information "
      },
      {
        "name": "UserRank",
        "is_standalone": true,
        "description": "(standalone): displays the user's rank "
      },
      {
        "name": "BadgeList",
        "is_standalone": false,
        "description": "(takes children): displays a list of badges "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "(standalone): displays a single badge "
      }
    ],
    "main_html": "<div class=\"flex items-center mb-4\">\n  <UserAvatar/>\n  <UserProfile>\n    <p class=\"text-lg\">{username}</p>\n    <UserRank/>\n  </UserProfile>\n  <BadgeList>\n    <Badge src={badgeSrc1} alt={badgeAlt1}/>\n    <Badge src={badgeSrc2} alt={badgeAlt2}/>\n    <!-- more badges here -->\n  </BadgeList>\n</div>\n",
    "component_html": [
      {
        "name": "UserAvatar",
        "html": "<img src={avatarSrc} alt={avatarAlt} class=\"w-12 h-12 rounded-full mr-4\"/>"
      },
      {
        "name": "UserProfile",
        "html": "<div class=\"flex-1\">{children}</div>"
      },
      {
        "name": "UserRank",
        "html": "<p class=\"text-gray-600\">{rank}</p>"
      },
      {
        "name": "BadgeList",
        "html": "<div class=\"flex\">{children}</div>"
      },
      {
        "name": "Badge",
        "html": "<img src={src} alt={alt} class=\"w-6 h-6 mr-2\"/>"
      }
    ]
  },
  {
    "description": "The UI should display a list of threads that the user has favorited or is watching, with a clear distinction between favorited and watching threads. Each thread should display essential information such as the thread title, and an indication of whether it's favorited or being watched.",
    "component_list": [
      {
        "name": "ThreadList",
        "is_standalone": true,
        "description": "(standalone) - The container component that holds all the threads. "
      },
      {
        "name": "ThreadItem",
        "is_standalone": false,
        "description": "(takes children) - A single thread component that displays the thread title and favorited/watching status. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Favorites and Watching</h2>\n  <ThreadList>\n    <!-- Thread items will be rendered here -->\n  </ThreadList>\n</div>\n",
    "component_html": [
      {
        "name": "ThreadList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "ThreadItem",
        "html": "<li class=\"py-3 border-b border-gray-200\">  <h3 class=\"text-lg\">{thread_title}</h3>  <p class=\"text-sm\">{is_favorite ? 'Favorited' : 'Watching'}</p>  <ThreadActions/> <!-- Assume ThreadActions component is already defined --></li>"
      }
    ]
  },
  {
    "description": "A responsive table layout that adapts to different screen sizes, with a sticky header and vertical scrolling.",
    "component_list": [
      {
        "name": "ResponsiveTable",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire table. "
      },
      {
        "name": "TableHeader",
        "is_standalone": true,
        "description": "A standalone component that defines the table header. "
      },
      {
        "name": "TableBody",
        "is_standalone": false,
        "description": "A component that takes children to render the table body. "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "A component that takes children to render a single table row. "
      },
      {
        "name": "TableCell",
        "is_standalone": false,
        "description": "A component that takes children to render a single table cell. "
      }
    ],
    "main_html": "<div className=\"w-full overflow-x-auto\">\n  <ResponsiveTable>\n    <TableHeader />\n    <TableBody>\n      <TableRow>\n        <TableCell>{column1}</TableCell>\n        <TableCell>{column2}</TableCell>\n        <TableCell>{column3}</TableCell>\n      </TableRow>\n      <!-- more table rows here -->\n    </TableBody>\n  </ResponsiveTable>\n</div>\n",
    "component_html": [
      {
        "name": "ResponsiveTable",
        "html": "<table className=\"min-w-full divide-y divide-gray-200\">  {children}</table>"
      },
      {
        "name": "TableHeader",
        "html": "<thead className=\"bg-gray-50\">  <tr>    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">      Column 1    </th>    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">      Column 2    </th>    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">      Column 3    </th>  </tr></thead>"
      },
      {
        "name": "TableBody",
        "html": "<tbody className=\"bg-white divide-y divide-gray-200\">  {children}</tbody>"
      },
      {
        "name": "TableRow",
        "html": "<tr className=\"even:bg-white odd:bg-gray-50\">  {children}</tr>"
      },
      {
        "name": "TableCell",
        "html": "<td className=\"px-6 py-4 whitespace-nowrap\">  {children}</td>"
      }
    ]
  },
  {
    "description": "The UI should display a list of destination cards, each containing a hotel card. The destination cards should have a background image, a title, and a description. The hotel cards should have a hotel name, a rating, and a price.",
    "component_list": [
      {
        "name": "DestinationCard",
        "is_standalone": true,
        "description": "(standalone) - A card displaying a destination's information "
      },
      {
        "name": "HotelCard",
        "is_standalone": true,
        "description": "(standalone) - A card displaying a hotel's information "
      },
      {
        "name": "DestinationList",
        "is_standalone": false,
        "description": "(takes children) - A container for a list of destination cards "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <DestinationList>\n    <DestinationCard />\n    <DestinationCard />\n    <DestinationCard />\n  </DestinationList>\n</div>\n",
    "component_html": [
      {
        "name": "DestinationCard",
        "html": "<div className=\"bg-cover bg-center h-64 mb-4\" style={{ backgroundImage: `url(${image_url})` }}>  <div className=\"bg-white p-4 pt-6\">    <h2 className=\"text-lg\">{destination_name}</h2>    <p>{destination_description}</p>    <HotelCard />  </div></div>"
      },
      {
        "name": "HotelCard",
        "html": "<div className=\"bg-white p-4 mb-4\">  <h3 className=\"text-md\">{hotel_name}</h3>  <p>Rating: {hotel_rating}/5</p>  <p>Price: {hotel_price}/night</p></div>"
      },
      {
        "name": "DestinationList",
        "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a calendar for availability and pricing, showing the dates and corresponding prices. It should have a title, a month selector, and a grid of days with prices.",
    "component_list": [
      {
        "name": "CalendarTitle",
        "is_standalone": true,
        "description": "Standalone component to display the title of the calendar. "
      },
      {
        "name": "MonthSelector",
        "is_standalone": true,
        "description": "Standalone component to select the month. "
      },
      {
        "name": "AvailabilityGrid",
        "is_standalone": false,
        "description": "Component that takes children to render the grid of days with prices. "
      },
      {
        "name": "DayCell",
        "is_standalone": true,
        "description": "Standalone component to render a single day with its price. "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <CalendarTitle/>\n  <MonthSelector/>\n  <AvailabilityGrid>\n    <!-- grid of days with prices -->\n    <DayCell/><DayCell/><DayCell/> <!-- repeat for each day of the month -->\n  </AvailabilityGrid>\n</div>\n",
    "component_html": [
      {
        "name": "CalendarTitle",
        "html": "<h2 className=\"text-2xl font-bold\">{calendar_title}</h2>"
      },
      {
        "name": "MonthSelector",
        "html": "<select className=\"py-2 pl-2 pr-4 text-gray-700\">  <option value=\"January\">{month_name}</option>  <!-- repeat for each month --></select>"
      },
      {
        "name": "AvailabilityGrid",
        "html": "<table className=\"w-full\">  <tbody>    <tr>      {children}    </tr>  </tbody></table>"
      },
      {
        "name": "DayCell",
        "html": "<td className=\"px-2 py-1 border border-gray-200\">  <span className=\"text-sm\">{day_number}</span>  <span className=\"text-xs\">{day_price}</span></td>"
      }
    ]
  },
  {
    "description": "A room type and rate selection UI that allows users to choose from different room types and rates.",
    "component_list": [
      {
        "name": "RoomTypeCard",
        "is_standalone": true,
        "description": "(standalone): Displays a single room type with its details and rates. "
      },
      {
        "name": "RateSelection",
        "is_standalone": false,
        "description": "(takes children): A container for selecting rates. "
      },
      {
        "name": "RateOption",
        "is_standalone": true,
        "description": "(standalone): A single rate option with its details. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h2>\n  \n  <div class=\"flex flex-wrap -mx-4\">\n    <RoomTypeCard />\n    <RoomTypeCard />\n    <RoomTypeCard />\n    <!-- Add more RoomTypeCard components as needed -->\n  </div>\n  \n  <RateSelection>\n    <RateOption />\n    <RateOption />\n    <RateOption />\n    <!-- Add more RateOption components as needed -->\n  </RateSelection>\n</div>\n",
    "component_html": [
      {
        "name": "RoomTypeCard",
        "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 class=\"text-lg font-bold\">{room_type_name}</h3>  <p class=\"text-gray-600\">{room_type_description}</p>  <p class=\"text-lg font-bold\">{price_per_night} per night</p></div>"
      },
      {
        "name": "RateSelection",
        "html": "<div class=\"p-4\">  <h3 class=\"text-lg font-bold\">Select Rate</h3>  <div class=\"flex flex-wrap -mx-4\">    {children}  </div></div>"
      },
      {
        "name": "RateOption",
        "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <input type=\"radio\" id={rate_id} name=\"rate\" />  <label for={rate_id} class=\"text-lg font-bold\">{rate_name}</label>  <p class=\"text-gray-600\">{rate_description}</p>  <p class=\"text-lg font-bold\">{rate_price} per night</p></div>"
      }
    ]
  },
  {
    "description": "A booking and payment form UI that includes a form with fields for user information, travel dates, room selection, and payment details.",
    "component_list": [
      {
        "name": "BookingFormContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire form. "
      },
      {
        "name": "UserInfoSection",
        "is_standalone": false,
        "description": "A component that takes children, containing fields for user information (e.g., name, email, phone number). "
      },
      {
        "name": "TravelDatesSection",
        "is_standalone": false,
        "description": "A component that takes children, containing fields for travel dates (e.g., check-in, check-out). "
      },
      {
        "name": "RoomSelectionSection",
        "is_standalone": false,
        "description": "A component that takes children, containing fields for room selection (e.g., room type, number of guests). "
      },
      {
        "name": "PaymentDetailsSection",
        "is_standalone": false,
        "description": "A component that takes children, containing fields for payment details (e.g., credit card number, expiration date). "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "A standalone component for submitting the form. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <BookingFormContainer>\n    <UserInfoSection>\n      <ComponentName/>\n    </UserInfoSection>\n    <TravelDatesSection>\n      <ComponentName/>\n    </TravelDatesSection>\n    <RoomSelectionSection>\n      <ComponentName/>\n    </RoomSelectionSection>\n    <PaymentDetailsSection>\n      <ComponentName/>\n    </PaymentDetailsSection>\n    <SubmitButton/>\n  </BookingFormContainer>\n</div>\n",
    "component_html": [
      {
        "name": "BookingFormContainer",
        "html": "<div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">  {children}</div>"
      },
      {
        "name": "UserInfoSection",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">User Information</h2>  <label for=\"name\" class=\"block text-sm font-bold mb-2\">Name:</label>  <input type=\"text\" id=\"name\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <label for=\"email\" class=\"block text-sm font-bold mb-2\">Email:</label>  <input type=\"email\" id=\"email\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <label for=\"phone\" class=\"block text-sm font-bold mb-2\">Phone:</label>  <input type=\"tel\" id=\"phone\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  {children}</div>"
      },
      {
        "name": "TravelDatesSection",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">Travel Dates</h2>  <label for=\"checkin\" class=\"block text-sm font-bold mb-2\">Check-in:</label>  <input type=\"date\" id=\"checkin\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <label for=\"checkout\" class=\"block text-sm font-bold mb-2\">Check-out:</label>  <input type=\"date\" id=\"checkout\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  {children}</div>"
      },
      {
        "name": "RoomSelectionSection",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">Room Selection</h2>  <label for=\"room_type\" class=\"block text-sm font-bold mb-2\">Room Type:</label>  <select id=\"room_type\" class=\"w-full p-2 pl-10 text-sm text-gray-700\">    <option value=\"\">Select room type</option>    {room_type_options}  </select>  <label for=\"num_guests\" class=\"block text-sm font-bold mb-2\">Number of Guests:</label>  <input type=\"number\" id=\"num_guests\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  {children}</div>"
      },
      {
        "name": "PaymentDetailsSection",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">Payment Details</h2>  <label for=\"card_number\" class=\"block text-sm font-bold mb-2\">Card Number:</label>  <input type=\"text\" id=\"card_number\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <label for=\"expiration_date\" class=\"block text-sm font-bold mb-2\">Expiration Date:</label>  <input type=\"date\" id=\"expiration_date\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  {children}</div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Book Now</button>"
      }
    ]
  },
  {
    "description": "The UI should display a gallery of photos for a hotel and its attractions. The gallery should be responsive and have a clean, modern design.",
    "component_list": [
      {
        "name": "PhotoGallery",
        "is_standalone": true,
        "description": "A standalone component that displays a grid of photos. "
      },
      {
        "name": "PhotoCard",
        "is_standalone": false,
        "description": "A component that takes a single photo as a child and displays it with a caption. "
      },
      {
        "name": "Photo",
        "is_standalone": true,
        "description": "A standalone component that displays an individual photo. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h2 className=\"text-2xl font-bold mb-4\">Hotel and Attraction Photos</h2>\n  <PhotoGallery>\n    <PhotoCard><Photo/></PhotoCard>\n    <PhotoCard><Photo/></PhotoCard>\n    <PhotoCard><Photo/></PhotoCard>\n    <!-- Add more PhotoCard components here -->\n  </PhotoGallery>\n</div>\n",
    "component_html": [
      {
        "name": "PhotoGallery",
        "html": "<ul className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</ul>"
      },
      {
        "name": "PhotoCard",
        "html": "<li className=\"mb-4\">  <Photo>{children}</Photo>  <p className=\"text-sm text-gray-600\">{photo_caption}</p></li>"
      },
      {
        "name": "Photo",
        "html": "<img src={photo_url} alt={photo_alt} className=\"w-full h-48 object-cover\" />"
      }
    ]
  },
  {
    "description": "The UI should display a trip itinerary and booking summary, showing the trip details, booking information, and a summary of the booking.",
    "component_list": [
      {
        "name": "TripItinerarySummary",
        "is_standalone": true,
        "description": "standalone, displays trip details "
      },
      {
        "name": "BookingInfo",
        "is_standalone": true,
        "description": "standalone, displays booking information "
      },
      {
        "name": "BookingSummary",
        "is_standalone": true,
        "description": "standalone, displays a summary of the booking "
      },
      {
        "name": "SectionCard",
        "is_standalone": false,
        "description": "takes children, a card layout for displaying information "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <SectionCard>\n    <TripItinerarySummary/>\n  </SectionCard>\n  <SectionCard>\n    <BookingInfo/>\n  </SectionCard>\n  <SectionCard>\n    <BookingSummary/>\n  </SectionCard>\n</div>\n",
    "component_html": [
      {
        "name": "TripItinerarySummary",
        "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Trip Itinerary</h2>  <p>Departure: {departure_date}</p>  <p>Destination: {destination}</p>  <p>Duration: {duration} days</p></div>"
      },
      {
        "name": "BookingInfo",
        "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Booking Information</h2>  <p>Booking ID: {booking_id}</p>  <p>Booking Date: {booking_date}</p>  <p>Payment Method: {payment_method}</p></div>"
      },
      {
        "name": "BookingSummary",
        "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Booking Summary</h2>  <p>Total Cost: ${total_cost}</p>  <p>Number of Travelers: {num_travelers}</p></div>"
      },
      {
        "name": "SectionCard",
        "html": "<div className=\"bg-white shadow-md rounded px-4 py-2 mb-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should consist of two dropdowns, one for currency and one for language, placed side by side. The dropdowns should be styled with a subtle border and have a slight hover effect. The selected options should be displayed in the dropdown, and the dropdown lists should be hidden by default.",
    "component_list": [
      {
        "name": "CurrencySwitcher",
        "is_standalone": true,
        "description": "(standalone) - a dropdown to select the currency "
      },
      {
        "name": "LanguageSwitcher",
        "is_standalone": true,
        "description": "(standalone) - a dropdown to select the language "
      },
      {
        "name": "DropdownOption",
        "is_standalone": false,
        "description": "(takes children) - a single option in the dropdown list "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <CurrencySwitcher />\n  <LanguageSwitcher className=\"ml-2\" />\n</div>\n",
    "component_html": [
      {
        "name": "CurrencySwitcher",
        "html": "<div className=\"relative inline-block\">  <button className=\"px-4 py-2 border rounded-md hover:bg-gray-100\">{selectedCurrency}</button>  <ul className=\"absolute hidden w-full bg-white shadow-md\">    {children}  </ul></div>"
      },
      {
        "name": "LanguageSwitcher",
        "html": "<div className=\"relative inline-block\">  <button className=\"px-4 py-2 border rounded-md hover:bg-gray-100\">{selectedLanguage}</button>  <ul className=\"absolute hidden w-full bg-white shadow-md\">    {children}  </ul></div>"
      },
      {
        "name": "DropdownOption",
        "html": "<li className=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"#\" className=\"text-gray-600\">{optionText}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should display a responsive map with a search bar, and a directions panel that shows the route and directions between two points.",
    "component_list": [
      {
        "name": "ResponsiveMapContainer",
        "is_standalone": true,
        "description": "(standalone) - a container for the map "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) - a search bar for entering locations "
      },
      {
        "name": "DirectionsPanel",
        "is_standalone": false,
        "description": "(takes children) - a panel for displaying directions "
      },
      {
        "name": "RouteDetails",
        "is_standalone": false,
        "description": "(takes children) - a component for displaying route details (e.g. distance, time) "
      },
      {
        "name": "DirectionStep",
        "is_standalone": false,
        "description": "(takes children) - a component for displaying a single direction step "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <ResponsiveMapContainer />\n  <div class=\"w-1/3 p-4\">\n    <SearchBar />\n    <DirectionsPanel>\n      <RouteDetails>\n        <p>{distance} km, {time} minutes</p>\n      </RouteDetails>\n      {directions.map((direction, index) => (\n        <DirectionStep key={index}>{direction}</DirectionStep>\n      ))}\n    </DirectionsPanel>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ResponsiveMapContainer",
        "html": "<div class=\"w-full h-full relative\">  <div class=\"absolute top-0 left-0 w-full h-full\" id=\"map\"></div></div>"
      },
      {
        "name": "SearchBar",
        "html": "<input class=\"w-full p-2 pl-10 text-sm\" type=\"text\" placeholder=\"Enter location\" /><button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Search</button>"
      },
      {
        "name": "DirectionsPanel",
        "html": "<div class=\"p-4 bg-white shadow-md rounded\">{children}</div>"
      },
      {
        "name": "RouteDetails",
        "html": "<div class=\"p-2 border-b border-gray-200\">  {children}</div>"
      },
      {
        "name": "DirectionStep",
        "html": "<div class=\"p-2 border-b border-gray-200\">  <p>{children}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should display a grid of game tiles. Each tile should have a unique background color, a number indicating the tile's value, and an optional \"locked\" indicator.",
    "component_list": [
      {
        "name": "GameGrid",
        "is_standalone": true,
        "description": "A standalone component that displays a grid of game tiles. "
      },
      {
        "name": "GameTile",
        "is_standalone": false,
        "description": "A component that takes children (the tile's value and optional \"locked\" indicator) and displays a single game tile. "
      }
    ],
    "main_html": "<div className=\"grid grid-cols-4 gap-4\">\n  <GameGrid />\n</div>\n",
    "component_html": [
      {
        "name": "GameGrid",
        "html": "<div className=\"flex flex-wrap justify-center\">  { /* an 4x4 grid of GameTile components */ }  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile /></div>"
      },
      {
        "name": "GameTile",
        "html": "<div   className={`h-16 w-16 bg-${tile_color} rounded-md flex justify-center items-center`}>  <p className=\"text-lg\">{tile_value}</p>  {locked && <span className=\"text-xs\">(Locked)</span>}  {children}</div>"
      }
    ]
  },
  {
    "description": "A game trailer section with a video embed, accompanied by a brief game description and a prominent call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "GameTrailerSection",
        "is_standalone": true,
        "description": "- Standalone component "
      },
      {
        "name": "VideoEmbed",
        "is_standalone": true,
        "description": "- Standalone component "
      },
      {
        "name": "GameDescription",
        "is_standalone": true,
        "description": "- Standalone component "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "- Standalone component "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <GameTrailerSection>\n    <VideoEmbed />\n    <GameDescription />\n    <CallToActionButton />\n  </GameTrailerSection>\n</div>\n",
    "component_html": [
      {
        "name": "GameTrailerSection",
        "html": "<div class=\"bg-gray-100 rounded-lg shadow-md p-4 md:p-6 lg:p-12\">  {children}</div>"
      },
      {
        "name": "VideoEmbed",
        "html": "<div class=\"aspect-w-16 aspect-h-9\">  <iframe     width=\"100%\"     height=\"100%\"     src={`https://www.youtube.com/embed/${video_id}`}     title=\"Game Trailer\"    frameborder=\"0\"     allowfullscreen  ></iframe></div>"
      },
      {
        "name": "GameDescription",
        "html": "<p class=\"text-lg md:text-xl lg:text-2xl\">{game_description}</p>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg\">  {cta_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information and achievements in a clean and modern layout. The profile section should show the user's name, profile picture, and bio. The achievements section should display a list of badges or icons representing the user's accomplishments.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "A standalone component that displays the user's profile information. "
      },
      {
        "name": "AchievementBadge",
        "is_standalone": true,
        "description": "A standalone component that displays a single achievement badge. "
      },
      {
        "name": "AchievementList",
        "is_standalone": false,
        "description": "A component that takes children (a list of `AchievementBadge` components). "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileCard />\n  <h2 class=\"text-lg font-bold mb-2\">Achievements</h2>\n  <AchievementList>\n    <AchievementBadge />\n    <AchievementBadge />\n    <!-- more AchievementBadge components here -->\n  </AchievementList>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src={profile_picture_url} class=\"w-16 h-16 rounded-full\" alt=\"Profile Picture\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
      },
      {
        "name": "AchievementBadge",
        "html": "<div class=\"bg-yellow-100 rounded p-2\">  <img src={badge_icon_url} class=\"w-8 h-8\" alt=\"Achievement Badge\" />  <span class=\"text-sm\">{badge_name}</span></div>"
      },
      {
        "name": "AchievementList",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a list of game reviews with their corresponding ratings, along with the game title, reviewer's name, and the review text.",
    "component_list": [
      {
        "name": "GameReviewCard",
        "is_standalone": true,
        "description": "standalone component that displays a single game review. "
      },
      {
        "name": "GameReviewList",
        "is_standalone": false,
        "description": "takes children (a list of `GameReviewCard` components). "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl mb-4\">Game Reviews</h2>\n  <GameReviewList/>\n</div>\n",
    "component_html": [
      {
        "name": "GameReviewCard",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{gameTitle}</h3>  <p>By {reviewerName}</p>  <p class=\"text-gray-600\">{reviewText}</p>  <p>Rating: {rating}/5</p></div>"
      },
      {
        "name": "GameReviewList",
        "html": "<ul class=\"list-none\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a section for \"Recommendations\" and another section for \"You Might Like\". Both sections should have a heading, followed by a list of items. Each item should display an image, title, and a brief description.",
    "component_list": [
      {
        "name": "RecommendationsSection",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "YouMightLikeSection",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ItemCard",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <RecommendationsSection />\n  <YouMightLikeSection />\n</div>\n",
    "component_html": [
      {
        "name": "RecommendationsSection",
        "html": "<section class=\"mb-8\">  <h2 class=\"text-2xl font-bold mb-4\">Recommendations</h2>  <ul class=\"flex flex-wrap -mx-4\">    <ItemCard />    <ItemCard />    <ItemCard />    <!-- Add more ItemCard components as needed -->  </ul></section>"
      },
      {
        "name": "YouMightLikeSection",
        "html": "<section class=\"mb-8\">  <h2 class=\"text-2xl font-bold mb-4\">You Might Like</h2>  <ul class=\"flex flex-wrap -mx-4\">    <ItemCard />    <ItemCard />    <ItemCard />    <!-- Add more ItemCard components as needed -->  </ul></section>"
      },
      {
        "name": "ItemCard",
        "html": "<li class=\"w-1/3 xl:w-1/4 p-4\">  <img src=\"{image_url}\" alt=\"{title}\" class=\"w-full h-48 object-cover mb-4\" />  <h3 class=\"text-lg font-bold\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></li>"
      }
    ]
  },
  {
    "description": "The Community Forum and Chat Tools UI should resemble a modern online forum, with a navigation menu, a list of discussion topics, and a chat window for real-time conversations.",
    "component_list": [
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "(standalone): a navigation menu component "
      },
      {
        "name": "TopicList",
        "is_standalone": false,
        "description": "(takes children): a list of discussion topics "
      },
      {
        "name": "TopicTile",
        "is_standalone": false,
        "description": "(takes children): an individual discussion topic component "
      },
      {
        "name": "ChatWindow",
        "is_standalone": true,
        "description": "(standalone): a real-time chat window component "
      },
      {
        "name": "MessageInput",
        "is_standalone": true,
        "description": "(standalone): a text input field for sending chat messages "
      },
      {
        "name": "ChatMessage",
        "is_standalone": false,
        "description": "(takes children): an individual chat message component "
      }
    ],
    "main_html": "<div class=\"h-screen flex\">\n  <NavBar />\n  <div class=\"flex-1 overflow-y-auto\">\n    <TopicList>\n      <TopicTile />\n      <TopicTile />\n      <!-- more TopicTile components -->\n    </TopicList>\n    <ChatWindow>\n      <div class=\"p-4\">\n        <ChatMessage />\n        <ChatMessage />\n        <!-- more ChatMessage components -->\n      </div>\n      <MessageInput />\n    </ChatWindow>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<nav class=\"bg-white h-16 flex justify-between items-center px-4\">  <a href=\"#\" class=\"text-gray-600\">Forum</a>  <a href=\"#\" class=\"text-gray-600\">Chat</a></nav>"
      },
      {
        "name": "TopicList",
        "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "TopicTile",
        "html": "<li class=\"p-4 border-b border-gray-200\">  <h3 class=\"text-lg\">{topic_title}</h3>  <p>{topic_description}</p></li>"
      },
      {
        "name": "ChatWindow",
        "html": "<div class=\"h-full flex flex-col\">  <div class=\"flex-1 overflow-y-auto\">    {children}  </div>  <MessageInput /></div>"
      },
      {
        "name": "MessageInput",
        "html": "<input type=\"text\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Type a message...\" />"
      },
      {
        "name": "ChatMessage",
        "html": "<div class=\"p-2\">  <span class=\"text-gray-600\">{username}:</span>  <span>{message_text}</span></div>"
      }
    ]
  },
  {
    "description": "A simple leaderboard and ranking system that displays a table with usernames, rankings, and scores.",
    "component_list": [
      {
        "name": "LeaderboardHeader",
        "is_standalone": true,
        "description": "A standalone component that displays the header of the leaderboard table. "
      },
      {
        "name": "LeaderboardRow",
        "is_standalone": false,
        "description": "A component that takes children and displays a single row in the leaderboard table. "
      },
      {
        "name": "RankingTable",
        "is_standalone": false,
        "description": "A component that takes children and displays the entire leaderboard table. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6\">\n  <RankingTable>\n    <LeaderboardHeader />\n    <!-- Leaderboard rows will be rendered here -->\n  </RankingTable>\n</div>\n",
    "component_html": [
      {
        "name": "LeaderboardHeader",
        "html": "<thead>  <tr>    <th class=\"text-left\">Rank</th>    <th class=\"text-left\">Username</th>    <th class=\"text-right\">Score</th>  </tr></thead>"
      },
      {
        "name": "LeaderboardRow",
        "html": "<tr>  <td class=\"text-left\">{rank}</td>  <td class=\"text-left\">{username}</td>  <td class=\"text-right\">{score}</td>  {children}</tr>"
      },
      {
        "name": "RankingTable",
        "html": "<div class=\"overflow-x-auto\">  <table class=\"w-full\">    {children}  </table></div>"
      }
    ]
  },
  {
    "description": "A compact summary of a game, including its title, rating, genres, and stats such as playtime, achievements, and friends playing.",
    "component_list": [
      {
        "name": "GameInfoCard",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire UI. "
      },
      {
        "name": "GameTitle",
        "is_standalone": true,
        "description": "Standalone component that displays the game title. "
      },
      {
        "name": "GameRating",
        "is_standalone": true,
        "description": "Standalone component that displays the game rating. "
      },
      {
        "name": "GameGenres",
        "is_standalone": true,
        "description": "Standalone component that displays the game genres. "
      },
      {
        "name": "GameStat",
        "is_standalone": true,
        "description": "Standalone component that displays a single game stat. "
      },
      {
        "name": "GameStatContainer",
        "is_standalone": false,
        "description": "Component that takes children and wraps the game stats. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 bg-white shadow-md rounded\">\n  <GameInfoCard>\n    <GameTitle>{game_title}</GameTitle>\n    <GameRating rating={game_rating} />\n    <GameGenres genres={game_genres} />\n    <GameStatContainer>\n      <GameStat label=\"Playtime\" value={playtime_hours} unit=\"hours\" />\n      <GameStat label=\"Achievements\" value={achievement_count} />\n      <GameStat label=\"Friends Playing\" value={friends_playing} />\n    </GameStatContainer>\n  </GameInfoCard>\n</div>\n",
    "component_html": [
      {
        "name": "GameInfoCard",
        "html": "<div class=\"px-4 pt-4 pb-2\">  {children}</div>"
      },
      {
        "name": "GameTitle",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "GameRating",
        "html": "<div class=\"text-sm text-gray-600\">{rating}/10</div>"
      },
      {
        "name": "GameGenres",
        "html": "<ul class=\"list-none mb-2\">  {genres.map(genre => (    <li key={genre} class=\"inline-block mr-2\">{genre}</li>  ))}</ul>"
      },
      {
        "name": "GameStat",
        "html": "<div class=\"flex items-center mb-2\">  <span class=\"text-sm text-gray-600\">{label}:</span>  <span class=\"ml-2\">{value} {unit}</span></div>"
      },
      {
        "name": "GameStatContainer",
        "html": "<div class=\"flex flex-wrap -mx-2\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A section that displays download and installation tools for a library, with a heading, a brief description, and a list of tools.",
    "component_list": [
      {
        "name": "DownloadSection",
        "is_standalone": true,
        "description": "standalone, contains the entire download and installation tools section "
      },
      {
        "name": "DescriptionText",
        "is_standalone": true,
        "description": "standalone, displays the brief description "
      },
      {
        "name": "ToolList",
        "is_standalone": false,
        "description": "takes children, displays the list of tools "
      },
      {
        "name": "ToolItem",
        "is_standalone": true,
        "description": "standalone, displays a single tool "
      }
    ],
    "main_html": "<div className=\"container max-w-md mx-auto p-4 pt-6 md:p-6\">\n  <DownloadSection>\n    <h2 className=\"text-2xl font-bold\">Download and Installation Tools</h2>\n    <DescriptionText />\n    <ToolList>\n      <ToolItem/>\n      <ToolItem/>\n      <!-- more tool items here -->\n    </ToolList>\n  </DownloadSection>\n</div>\n",
    "component_html": [
      {
        "name": "DownloadSection",
        "html": "<div className=\"bg-white rounded shadow-md p-4 mb-4\">  {children}</div>"
      },
      {
        "name": "DescriptionText",
        "html": "<p className=\"text-gray-600\">{description_text}</p>"
      },
      {
        "name": "ToolList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "ToolItem",
        "html": "<li className=\"mb-2\">  <a href=\"{tool_url}\" className=\"text-blue-600 hover:text-blue-900\">{tool_name}</a>  <p className=\"text-gray-600\">{tool_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a toggleable accordion component with a header and a collapsible content section. When the header is clicked, the content section should toggle its visibility.",
    "component_list": [
      {
        "name": "AccordionItem",
        "is_standalone": true,
        "description": "A standalone component that renders a single accordion item. "
      },
      {
        "name": "AccordionHeader",
        "is_standalone": true,
        "description": "A standalone component that renders the header of the accordion item. "
      },
      {
        "name": "AccordionContent",
        "is_standalone": true,
        "description": "A standalone component that renders the collapsible content section. "
      }
    ],
    "main_html": "<div class=\"accordion\">\n  <AccordionItem>\n    <AccordionHeader>Toggle me!</AccordionHeader>\n    <AccordionContent>\n      <p>This is some collapsible content.</p>\n    </AccordionContent>\n  </AccordionItem>\n</div>\n",
    "component_html": [
      {
        "name": "AccordionItem",
        "html": "<div class=\"accordion-item\">  <AccordionHeader>{children[0]}</AccordionHeader>  <AccordionContent>{children[1]}</AccordionContent></div>"
      },
      {
        "name": "AccordionHeader",
        "html": "<div class=\"accordion-header\">  <button class=\"accordion-trigger\">{children}</button></div>"
      },
      {
        "name": "AccordionContent",
        "html": "<div class=\"accordion-content\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A simple audio player with controls to play, pause, and stop the audio, along with a progress bar to display the current playback position.",
    "component_list": [
      {
        "name": "AudioPlayerContainer",
        "is_standalone": true,
        "description": "- Standalone component that wraps the entire audio player. "
      },
      {
        "name": "PlayPauseButton",
        "is_standalone": false,
        "description": "- Takes children (the play/pause icons). "
      },
      {
        "name": "StopButton",
        "is_standalone": true,
        "description": "- Standalone component. "
      },
      {
        "name": "ProgressBar",
        "is_standalone": true,
        "description": "- Standalone component that displays the current playback position. "
      }
    ],
    "main_html": "<AudioPlayerContainer>\n  <div class=\"flex justify-between mb-4\">\n    <PlayPauseButton><i class=\"fas fa-play\" /></PlayPauseButton>\n    <StopButton>Stop</StopButton>\n  </div>\n  <ProgressBar />\n  <p>Audio Title: {audio_title}</p>\n  <p>Duration: {audio_duration}</p>\n</AudioPlayerContainer>\n",
    "component_html": [
      {
        "name": "AudioPlayerContainer",
        "html": "<div class=\"bg-white p-4 rounded shadow-md\">  {children}</div>"
      },
      {
        "name": "PlayPauseButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "StopButton",
        "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Stop</button>"
      },
      {
        "name": "ProgressBar",
        "html": "<div class=\"w-full bg-gray-200 h-2 mb-4\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${progress_percentage}%` }} /></div>"
      }
    ]
  },
  {
    "description": "The UI should display a section with a background image or pattern. The background image or pattern should take up the full width of the section and have a height of 300 pixels. The section should have a heading and a paragraph of text.",
    "component_list": [
      {
        "name": "BackgroundSection",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "SectionHeading",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "SectionContent",
        "is_standalone": false,
        "description": "- takes children "
      }
    ],
    "main_html": "<BackgroundSection>\n  <SectionHeading />\n  <SectionContent>\n    <p>{section_text}</p>\n  </SectionContent>\n</BackgroundSection>\n",
    "component_html": [
      {
        "name": "BackgroundSection",
        "html": "<section class=\"h-300 w-full\">  {children}</section>"
      },
      {
        "name": "SectionHeading",
        "html": "<h2 class=\"text-3xl\">{heading_text}</h2>"
      },
      {
        "name": "SectionContent",
        "html": "<div class=\"p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should look like a horizontal or vertical grouping of buttons. The buttons can be of different styles (e.g., primary, secondary, danger) and sizes (e.g., small, large).",
    "component_list": [
      {
        "name": "ButtonGroup",
        "is_standalone": true,
        "description": "Standalone component that wraps around buttons. "
      },
      {
        "name": "Button",
        "is_standalone": true,
        "description": "Standalone component that represents an individual button. "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap gap-2\">\n  <ButtonGroup/>\n</div>\n",
    "component_html": [
      {
        "name": "ButtonGroup",
        "html": "<div className=\"inline-flex flex-wrap gap-2\">  {children}</div>"
      },
      {
        "name": "Button",
        "html": "<button   type=\"button\"   className={`py-2 px-4 font-semibold rounded ${styleType} ${size}`}>  {children}</button>"
      }
    ]
  },
  {
    "description": "A responsive grid of cards/tiles with equal width and flexible height, with each card/tty displaying some information. The grid should adapt to different screen sizes.",
    "component_list": [
      {
        "name": "CardGrid",
        "is_standalone": true,
        "description": "standalone component that renders a grid of cards "
      },
      {
        "name": "Card",
        "is_standalone": false,
        "description": "takes children, renders a single card in the grid "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <CardGrid>\n    <Card/><Card/><Card/><Card/>\n    <!-- Add more Card components as needed -->\n  </CardGrid>\n</div>\n",
    "component_html": [
      {
        "name": "CardGrid",
        "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">  {children}</div>"
      },
      {
        "name": "Card",
        "html": "<div className=\"bg-white rounded shadow-md p-4\">  <h5 className=\"text-lg\">{card_title}</h5>  <p className=\"text-gray-600\">{card_description}</p>  <p className=\"text-sm\">{card_footer}</p>  <!-- Add more card content as needed --></div>"
      }
    ]
  },
  {
    "description": "A carousel/slider component that displays multiple items (e.g., images, cards, or other content) in a horizontal scrolling format. The component should have navigation controls (previous and next buttons) and indicator dots to show the current slide.",
    "component_list": [
      {
        "name": "CarouselContainer",
        "is_standalone": true,
        "description": "(standalone) - The outer container of the carousel. "
      },
      {
        "name": "CarouselSlide",
        "is_standalone": false,
        "description": "(takes children) - An individual slide within the carousel. "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "(standalone) - The navigation controls (previous and next buttons). "
      },
      {
        "name": "CarouselIndicator",
        "is_standalone": true,
        "description": "(standalone) - The indicator dots. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <CarouselContainer>\n    <CarouselNavigation />\n    <CarouselSlide><ComponentName/></CarouselSlide>\n    <CarouselSlide><ComponentName/></CarouselSlide>\n    <!-- Add more CarouselSlide components here -->\n    <CarouselIndicator />\n  </CarouselContainer>\n</div>\n",
    "component_html": [
      {
        "name": "CarouselContainer",
        "html": "<div className=\"relative overflow-hidden\">  {children}</div>"
      },
      {
        "name": "CarouselSlide",
        "html": "<div className=\"flex-shrink-0 w-full\">  {children}</div>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div className=\"absolute top-0 right-0 mr-4 mt-4\">  <button className=\"bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded\">Previous</button>  <button className=\"bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded\">Next</button></div>"
      },
      {
        "name": "CarouselIndicator",
        "html": "<div className=\"flex justify-center mb-4\">  {Array({slide_count}).fill(0).map((_, index) => (    <button      key={index}      className=\"mx-1 w-4 h-4 rounded-full bg-gray-300 hover:bg-gray-500\"    />  ))}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a chart or graph visualization that shows data in a visually appealing way. The chart/graph should have a title, labels for the x and y axes, and a legend to explain the different data series.",
    "component_list": [
      {
        "name": "ChartContainer",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the chart/graph. "
      },
      {
        "name": "ChartTitle",
        "is_standalone": true,
        "description": "(standalone): The title of the chart/graph. "
      },
      {
        "name": "AxisLabel",
        "is_standalone": true,
        "description": "(standalone): The labels for the x and y axes. "
      },
      {
        "name": "Legend",
        "is_standalone": true,
        "description": "(standalone): The legend that explains the different data series. "
      },
      {
        "name": "DataSeries",
        "is_standalone": false,
        "description": "(takes children): A single data series in the chart/graph, which can contain multiple `DataPoint` components. "
      },
      {
        "name": "DataPoint",
        "is_standalone": true,
        "description": "(standalone): A single data point in a data series. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <ChartContainer>\n    <ChartTitle>{chart_title}</ChartTitle>\n    <AxisLabel>x-axis label</AxisLabel>\n    <AxisLabel>y-axis label</AxisLabel>\n    <Legend>\n      <DataSeries>\n        <DataPoint>x: {x_value}, y: {y_value}</DataPoint>\n        <!-- add more DataPoint components here -->\n      </DataSeries>\n      <!-- add more DataSeries components here -->\n    </Legend>\n  </ChartContainer>\n</div>\n",
    "component_html": [
      {
        "name": "ChartContainer",
        "html": "<div className=\"bg-white p-4 rounded shadow-md\">  {children}</div>"
      },
      {
        "name": "ChartTitle",
        "html": "<h2 className=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "AxisLabel",
        "html": "<p className=\"text-sm\">{children}</p>"
      },
      {
        "name": "Legend",
        "html": "<ul className=\"flex flex-wrap justify-center mb-4\">  {children}</ul>"
      },
      {
        "name": "DataSeries",
        "html": "<li className=\"mr-4\">  <span className=\"text-sm\">{children}</span></li>"
      },
      {
        "name": "DataPoint",
        "html": "<p className=\"text-sm\">{children}</p>"
      }
    ]
  },
  {
    "description": "A simple order summary section that displays the items in the cart, subtotal, tax, and total.",
    "component_list": [
      {
        "name": "OrderSummaryHeader",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "OrderSummaryItem",
        "is_standalone": false,
        "description": "- takes children "
      },
      {
        "name": "OrderSummaryFooter",
        "is_standalone": true,
        "description": "- standalone "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <OrderSummaryHeader />\n  <ul>\n    <OrderSummaryItem />\n    <!-- repeat for each item in cart -->\n  </ul>\n  <OrderSummaryFooter />\n</div>\n",
    "component_html": [
      {
        "name": "OrderSummaryHeader",
        "html": "<div class=\"flex justify-between mb-4\">  <h2 class=\"text-lg font-bold\">Order Summary</h2>  <p class=\"text-sm\">{cartItemCount} items</p></div>"
      },
      {
        "name": "OrderSummaryItem",
        "html": "<li class=\"flex justify-between py-4 border-b\">  <img src=\"{itemImage}\" alt=\"{itemName}\" class=\"w-12 h-12 mr-4\" />  <div class=\"flex-1\">    <h3 class=\"text-lg\">{itemName}</h3>    <p class=\"text-sm\">{itemDescription}</p>  </div>  <p class=\"text-sm\">x {itemQuantity}</p>  <p class=\"text-sm\">{itemPrice}</p></li>"
      },
      {
        "name": "OrderSummaryFooter",
        "html": "<div class=\"bg-gray-100 p-4\">  <div class=\"flex justify-between mb-2\">    <p class=\"text-sm\">Subtotal:</p>    <p class=\"text-sm\">{subtotal}</p>  </div>  <div class=\"flex justify-between mb-2\">    <p class=\"text-sm\">Tax (20%):</p>    <p class=\"text-sm\">{tax}</p>  </div>  <div class=\"flex justify-between font-bold mb-4\">    <p class=\"text-lg\">Total:</p>    <p class=\"text-lg\">{total}</p>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a section for comments and reviews, with a heading, a list of comments or reviews, and a form to add a new comment or review.",
    "component_list": [
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "standalone component that contains the entire comments/reviews section "
      },
      {
        "name": "CommentHeader",
        "is_standalone": true,
        "description": "standalone component that displays the heading for the comments section "
      },
      {
        "name": "CommentList",
        "is_standalone": true,
        "description": "standalone component that displays a list of comments or reviews "
      },
      {
        "name": "CommentItem",
        "is_standalone": false,
        "description": "takes children, displays a single comment or review "
      },
      {
        "name": "CommentForm",
        "is_standalone": false,
        "description": "takes children, displays a form to add a new comment or review "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentSection>\n    <CommentHeader />\n    <CommentList>\n      <CommentItem><p>{comment_text}</p></CommentItem>\n      <CommentItem><p>{comment_text}</p></CommentItem>\n      <!-- more CommentItem components -->\n    </CommentList>\n    <CommentForm>\n      <input type=\"text\" class=\"w-full p-2\" placeholder=\"Add a comment...\" />\n      <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Post</button>\n    </CommentForm>\n  </CommentSection>\n</div>\n",
    "component_html": [
      {
        "name": "CommentSection",
        "html": "<div class=\"border-b pb-4 mb-4\">  {children}</div>"
      },
      {
        "name": "CommentHeader",
        "html": "<h2 class=\"text-lg font-bold mb-2\">Comments ({comment_count})</h2>"
      },
      {
        "name": "CommentList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "CommentItem",
        "html": "<li class=\"mb-4\">  <div class=\"flex\">    <img src={avatar_url} alt={username} class=\"h-8 w-8 rounded-full mr-2\" />    <div>      <h3 class=\"font-bold\">{username}</h3>      <p>{children}</p>    </div>  </div></li>"
      },
      {
        "name": "CommentForm",
        "html": "<form class=\"flex mb-4\">  {children}</form>"
      }
    ]
  },
  {
    "description": "A comparison table with two columns, each representing a different product or service. The table has a header row with columns for the product name, feature 1, feature 2, and price. Each product has a row in the table with checkboxes indicating which features are included.",
    "component_list": [
      {
        "name": "ComparisonTable",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "TableCell",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "TableHeader",
        "is_standalone": true,
        "description": "standalone "
      }
    ],
    "main_html": "<div class=\"w-full overflow-hidden\">\n  <table class=\"w-full\">\n    <thead>\n      <tr>\n        <TableHeader>Product Name</TableHeader>\n        <TableHeader>Feature 1</TableHeader>\n        <TableHeader>Feature 2</TableHeader>\n        <TableHeader>Price</TableHeader>\n      </tr>\n    </thead>\n    <tbody>\n      <TableRow>\n        <TableCell>{product1_name}</TableCell>\n        <TableCell><input type=\"checkbox\" {feature1_in_product1} /></TableCell>\n        <TableCell><input type=\"checkbox\" {feature2_in_product1} /></TableCell>\n        <TableCell>{product1_price}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>{product2_name}</TableCell>\n        <TableCell><input type=\"checkbox\" {feature1_in_product2} /></TableCell>\n        <TableCell><input type=\"checkbox\" {feature2_in_product2} /></TableCell>\n        <TableCell>{product2_price}</TableCell>\n      </TableRow>\n    </tbody>\n  </table>\n</div>\n",
    "component_html": [
      {
        "name": "ComparisonTable",
        "html": "<!-- no HTML, just a wrapper component -->"
      },
      {
        "name": "TableRow",
        "html": "<tr>{children}</tr>"
      },
      {
        "name": "TableCell",
        "html": "<td class=\"px-6 py-4\">{children}</td>"
      },
      {
        "name": "TableHeader",
        "html": "<th class=\"px-6 py-4\">{children}</th>"
      }
    ]
  },
  {
    "description": "A contact or feedback form that allows users to send a message to the website administrator or owner. It should have input fields for the user's name, email, and message, as well as a submit button.",
    "component_list": [
      {
        "name": "ContactForm",
        "is_standalone": true,
        "description": "(standalone) - The main contact form component "
      },
      {
        "name": "FormGroup",
        "is_standalone": false,
        "description": "(takes children) - A component to wrap a form label and input field "
      },
      {
        "name": "FormLabel",
        "is_standalone": true,
        "description": "(standalone) - A component to display a form label "
      },
      {
        "name": "FormInput",
        "is_standalone": true,
        "description": "(standalone) - A component to display a form input field "
      },
      {
        "name": "FormTextarea",
        "is_standalone": true,
        "description": "(standalone) - A component to display a form textarea field "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "(standalone) - A component to display a submit button "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <ContactForm>\n    <FormGroup>\n      <FormLabel htmlFor=\"name\">Your Name</FormLabel>\n      <FormInput type=\"text\" id=\"name\" />\n    </FormGroup>\n    <FormGroup>\n      <FormLabel htmlFor=\"email\">Your Email</FormLabel>\n      <FormInput type=\"email\" id=\"email\" />\n    </FormGroup>\n    <FormGroup>\n      <FormLabel htmlFor=\"message\">Your Message</FormLabel>\n      <FormTextarea id=\"message\" />\n    </FormGroup>\n    <SubmitButton>Send Message</SubmitButton>\n  </ContactForm>\n</div>\n",
    "component_html": [
      {
        "name": "ContactForm",
        "html": "<div className=\"bg-white shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "FormGroup",
        "html": "<div className=\"mb-4\">  {children}</div>"
      },
      {
        "name": "FormLabel",
        "html": "<label className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\" htmlFor={htmlFor}>{children}</label>"
      },
      {
        "name": "FormInput",
        "html": "<input className=\"w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-2 px-4\" type={type} id={id} />"
      },
      {
        "name": "FormTextarea",
        "html": "<textarea className=\"w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-2 px-4\" id={id} />"
      },
      {
        "name": "SubmitButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{children}</button>"
      }
    ]
  },
  {
    "description": "A cookie banner is a notification that appears at the top or bottom of a webpage, informing users about the use of cookies on the website. It should be a non-obtrusive, dismissible notification that contains a message, an accept button, and an optional link to learn more.",
    "component_list": [
      {
        "name": "CookieBanner",
        "is_standalone": true,
        "description": "Standalone component that contains the cookie banner message, accept button, and optional link. "
      },
      {
        "name": "CookieButton",
        "is_standalone": true,
        "description": "Standalone component that represents the accept button. "
      }
    ],
    "main_html": "<!-- Cookie banner container -->\n<div class=\"fixed bottom-0 left-0 right-0 p-4 bg-gray-100\">\n  <!-- Cookie banner content -->\n  <CookieBanner />\n</div>\n",
    "component_html": [
      {
        "name": "CookieBanner",
        "html": "<!-- Cookie banner content --><div class=\"flex justify-between\">  <p class=\"text-sm\">{cookie_message}</p>  <div class=\"flex\">    <CookieButton />    {optional_link && (      <a href={optional_link.href} target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-sm underline ml-4\">{optional_link.text}</a>    )}  </div></div>"
      },
      {
        "name": "CookieButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Accept</button>"
      }
    ]
  },
  {
    "description": "The UI should display a countdown timer showing days, hours, minutes, and seconds until a specific date and time.",
    "component_list": [
      {
        "name": "CountdownTimer",
        "is_standalone": true,
        "description": "(standalone): The main countdown timer component. "
      },
      {
        "name": "DayCounter",
        "is_standalone": true,
        "description": "(standalone): Displays the number of days. "
      },
      {
        "name": "HourCounter",
        "is_standalone": true,
        "description": "(standalone): Displays the number of hours. "
      },
      {
        "name": "MinuteCounter",
        "is_standalone": true,
        "description": "(standalone): Displays the number of minutes. "
      },
      {
        "name": "SecondCounter",
        "is_standalone": true,
        "description": "(standalone): Displays the number of seconds. "
      }
    ],
    "main_html": "<div className=\"flex justify-center\">\n  <CountdownTimer/>\n</div>\n",
    "component_html": [
      {
        "name": "CountdownTimer",
        "html": "<div className=\"flex gap-4\">  <DayCounter/><span>:</span>  <HourCounter/><span>:</span>  <MinuteCounter/><span>:</span>  <SecondCounter/></div>"
      },
      {
        "name": "DayCounter",
        "html": "<div className=\"text-4xl\">{days} <span>days</span></div>"
      },
      {
        "name": "HourCounter",
        "html": "<div className=\"text-4xl\">{hours} <span>hours</span></div>"
      },
      {
        "name": "MinuteCounter",
        "html": "<div className=\"text-4xl\">{minutes} <span>minutes</span></div>"
      },
      {
        "name": "SecondCounter",
        "html": "<div className=\"text-4xl\">{seconds} <span>seconds</span></div>"
      }
    ]
  },
  {
    "description": "The UI should display a section for coupon/discount codes, with a title, a text input field to enter the code, a button to apply the code, and a message to display the result of applying the code (e.g. \"Code applied successfully!\" or \"Invalid code\").",
    "component_list": [
      {
        "name": "CouponCodeSection",
        "is_standalone": true,
        "description": "standalone component that contains the entire coupon/discount code section "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "standalone component for the text input field to enter the code "
      },
      {
        "name": "ApplyButton",
        "is_standalone": true,
        "description": "standalone component for the button to apply the code "
      },
      {
        "name": "ResultMessage",
        "is_standalone": true,
        "description": "standalone component to display the result of applying the code "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CouponCodeSection>\n    <h2 class=\"text-lg font-bold\">Enter Coupon/Discount Code</h2>\n    <InputField type=\"text\" placeholder=\"Enter code\" />\n    <ApplyButton>Apply</ApplyButton>\n    <ResultMessage />\n  </CouponCodeSection>\n</div>\n",
    "component_html": [
      {
        "name": "CouponCodeSection",
        "html": "<div class=\"bg-white shadow-md rounded px-4 py-4\">  {children}</div>"
      },
      {
        "name": "InputField",
        "html": "<input type=\"{type}\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{placeholder}\" />"
      },
      {
        "name": "ApplyButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "ResultMessage",
        "html": "<p class=\"text-sm {result_message_class}\">{result_message}</p>"
      }
    ]
  },
  {
    "description": "The UI should have a scrollbar with a custom design, replacing the default browser scrollbar. The scrollbar should have a track (the background of the scrollbar) and a thumb (the moving part of the scrollbar).",
    "component_list": [
      {
        "name": "Scrollbar",
        "is_standalone": true,
        "description": "A standalone component that wraps the content and provides the custom scrollbar. "
      },
      {
        "name": "ScrollbarTrack",
        "is_standalone": true,
        "description": "A standalone component that represents the track of the scrollbar. "
      },
      {
        "name": "ScrollbarThumb",
        "is_standalone": true,
        "description": "A standalone component that represents the thumb of the scrollbar. "
      }
    ],
    "main_html": "<div className=\"h-screen overflow-y-scroll\">\n  <Scrollbar>\n    <!-- scrollbar content -->\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n    <!-- more content -->\n    <ScrollbarTrack />\n    <ScrollbarThumb />\n  </Scrollbar>\n</div>\n",
    "component_html": [
      {
        "name": "Scrollbar",
        "html": "<div className=\"fixed top-0 right-0 bottom-0 w-4 bg-gray-100 rounded\">{children}<ScrollbarTrack /><ScrollbarThumb /></div>"
      },
      {
        "name": "ScrollbarTrack",
        "html": "<div className=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-200 rounded\"></div>"
      },
      {
        "name": "ScrollbarThumb",
        "html": "<div className=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-500 rounded\">{/* thumb content */}</div>"
      }
    ]
  },
  {
    "description": "A simple date picker with a input field to select a date.",
    "component_list": [
      {
        "name": "DatePicker",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "DateInput",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "Calendar",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <DatePicker>\n    <DateInput />\n  </DatePicker>\n</div>\n",
    "component_html": [
      {
        "name": "DatePicker",
        "html": "<div class=\"relative\">  {children}  <Calendar /></div>"
      },
      {
        "name": "DateInput",
        "html": "<input type=\"text\" class=\"p-2 pl-10 text-sm text-gray-700\" value={selected_date} />"
      },
      {
        "name": "Calendar",
        "html": "<div class=\"absolute top-0 left-0 p-2 z-10 bg-white shadow-md\">  <!-- calendar table here -->  <table class=\"w-full\">    <tr>      <th>Mon</th>      <th>Tue</th>      <th>Wed</th>      <th>Thu</th>      <th>Fri</th>      <th>Sat</th>      <th>Sun</th>    </tr>    <tr>      <td>{day_1}</td>      <td>{day_2}</td>      <td>{day_3}</td>      <td>{day_4}</td>      <td>{day_5}</td>      <td>{day_6}</td>      <td>{day_7}</td>    </tr>    <!-- more days... -->  </table></div>"
      }
    ]
  },
  {
    "description": "A dialog box with a title, a message, and a set of buttons (e.g., \"OK\", \"Cancel\") that floats on top of the main content.",
    "component_list": [
      {
        "name": "DialogContainer",
        "is_standalone": true,
        "description": "- Standalone: The main container for the dialog box. "
      },
      {
        "name": "DialogTitle",
        "is_standalone": false,
        "description": "- Takes children: Displays the title of the dialog box. "
      },
      {
        "name": "DialogMessage",
        "is_standalone": false,
        "description": "- Takes children: Displays the message of the dialog box. "
      },
      {
        "name": "DialogButton",
        "is_standalone": false,
        "description": "- Takes children: Represents a single button in the dialog box. "
      },
      {
        "name": "DialogButtonGroup",
        "is_standalone": false,
        "description": "- Takes children: A container for multiple `DialogButton` components. "
      }
    ],
    "main_html": "<div class=\"fixed inset-0 z-10 overflow-y-auto\" aria-labelledby=\"dialog-title\" role=\"dialog\" aria-modal=\"true\">\n  <div class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n    <<DialogContainer>\n      <<DialogTitle>{dialog_title}</DialogTitle>\n      <<DialogMessage>{dialog_message}</DialogMessage>\n      <<DialogButtonGroup>\n        <<DialogButton>{button_1_text}</DialogButton>\n        <<DialogButton>{button_2_text}</DialogButton>\n      </DialogButtonGroup>\n    </DialogContainer>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "DialogContainer",
        "html": "<div class=\"bg-white rounded-lg shadow-md overflow-hidden\">  {children}</div>"
      },
      {
        "name": "DialogTitle",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "DialogMessage",
        "html": "<p class=\"text-gray-600\">{children}</p>"
      },
      {
        "name": "DialogButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "DialogButtonGroup",
        "html": "<div class=\"flex justify-end pt-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A drag-and-drop interface with a drop zone, a list of draggable items, and a button to clear the drop zone.",
    "component_list": [
      {
        "name": "DraggableItem",
        "is_standalone": true,
        "description": "- standalone: A single item that can be dragged and dropped. "
      },
      {
        "name": "DropZone",
        "is_standalone": false,
        "description": "- takes children: The area where items can be dropped. "
      },
      {
        "name": "ClearButton",
        "is_standalone": true,
        "description": "- standalone: A button to clear the drop zone. "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <div className=\"flex-1 overflow-y-auto\">\n    <!-- List of draggable items -->\n    <ul className=\"space-y-2\">\n      <DraggableItem />\n      <DraggableItem />\n      <DraggableItem />\n    </ul>\n  </div>\n  <div className=\"flex-1 border\">\n    <!-- Drop zone -->\n    <DropZone>\n      <!-- dropped items will be rendered here -->\n    </DropZone>\n  </div>\n  <ClearButton />\n</div>\n",
    "component_html": [
      {
        "name": "DraggableItem",
        "html": "<div className=\"bg-white shadow-md p-2 rounded\">  <p>{item_name}</p></div>"
      },
      {
        "name": "DropZone",
        "html": "<div className=\"h-full p-4 border-dashed border-2\">  {children}</div>"
      },
      {
        "name": "ClearButton",
        "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Clear</button>"
      }
    ]
  },
  {
    "description": "A table that can be edited, with input fields for each cell, and a \"Save\" button at the bottom.",
    "component_list": [
      {
        "name": "EditableTableCell",
        "is_standalone": false,
        "description": "(takes children): a single table cell with an input field "
      },
      {
        "name": "EditableTableRow",
        "is_standalone": false,
        "description": "(takes children): a table row with editable cells "
      },
      {
        "name": "EditableTable",
        "is_standalone": false,
        "description": "(takes children): the entire editable table with multiple rows "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <EditableTable>\n    <EditableTableRow>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n    </EditableTableRow>\n    <EditableTableRow>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n    </EditableTableRow>\n    <!-- ... more rows ... -->\n  </EditableTable>\n  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Save</button>\n</div>\n",
    "component_html": [
      {
        "name": "EditableTableCell",
        "html": "<td class=\"border p-2\">{children}</td>"
      },
      {
        "name": "EditableTableRow",
        "html": "<tr class=\"bg-white\">{children}</tr>"
      },
      {
        "name": "EditableTable",
        "html": "<table class=\"table-auto border-collapse w-full\">  <tbody>{children}</tbody></table>"
      }
    ]
  },
  {
    "description": "The UI should be a simple email newsletter signup form with a input field for email address, a submit button, and an optional headline and text description.",
    "component_list": [
      {
        "name": "Newsletter",
        "is_standalone": true,
        "description": "Hero`: A standalone component that includes the headline and text description. "
      },
      {
        "name": "InputEmail",
        "is_standalone": true,
        "description": "A standalone component that includes an input field for email address. "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "A standalone component that includes a submit button. "
      },
      {
        "name": "NewsletterForm",
        "is_standalone": false,
        "description": "Takes children, includes the entire newsletter signup form. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <NewsletterHero/>\n  <NewsletterForm>\n    <InputEmail/>\n    <SubmitButton/>\n  </NewsletterForm>\n</div>\n",
    "component_html": [
      {
        "name": "NewsletterHero",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">{headline}</h2>  <p class=\"text-gray-600\">{description}</p></div>"
      },
      {
        "name": "InputEmail",
        "html": "<input type=\"email\" class=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full\" placeholder=\"Enter your email address\" />"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Sign Up</button>"
      },
      {
        "name": "NewsletterForm",
        "html": "<form>  {children}</form>"
      }
    ]
  },
  {
    "description": "The UI should display a list of accordion sections, each containing a question and an answer. The question should be displayed as a heading, and the answer should be hidden by default. When the user clicks on the question, the answer should be toggled to display or hide.",
    "component_list": [
      {
        "name": "AccordionSection",
        "is_standalone": false,
        "description": "(takes children) - represents a single accordion section "
      },
      {
        "name": "AccordionQuestion",
        "is_standalone": true,
        "description": "(standalone) - displays the question as a heading "
      },
      {
        "name": "AccordionAnswer",
        "is_standalone": true,
        "description": "(standalone) - displays the answer "
      }
    ],
    "main_html": "<div className=\"flex flex-col max-w-md mx-auto mt-10\">\n  <AccordionSection>\n    <!-- accordion section 1 -->\n  </AccordionSection>\n  <AccordionSection>\n    <!-- accordion section 2 -->\n  </AccordionSection>\n  <!-- more accordion sections -->\n</div>\n",
    "component_html": [
      {
        "name": "AccordionSection",
        "html": "<div className=\"border-b border-gray-200\">  <AccordionQuestion>{question}</AccordionQuestion>  <AccordionAnswer>{answer}</AccordionAnswer></div>"
      },
      {
        "name": "AccordionQuestion",
        "html": "<h3 className=\"cursor-pointer mb-2\">{question}</h3>"
      },
      {
        "name": "AccordionAnswer",
        "html": "<div className=\"pb-4\">{answer}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of filters and a dropdown for sorting options. The filters should be checkboxes that allow the user to select multiple options. The sorting dropdown should have a default option and allow the user to select from a list of options.",
    "component_list": [
      {
        "name": "FilterComponent",
        "is_standalone": true,
        "description": "A standalone component that displays a single filter option as a checkbox. "
      },
      {
        "name": "SortComponent",
        "is_standalone": true,
        "description": "A standalone component that displays the sorting options as a dropdown. "
      },
      {
        "name": "FilterAndSortComponent",
        "is_standalone": false,
        "description": "A component that contains all the filters and the sort dropdown. Takes children. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div class=\"flex flex-wrap\">\n    <FilterAndSortComponent>\n      {filters}.map((filter, index) => (\n        <FilterComponent key={index} />\n      ))}\n    </FilterAndSortComponent>\n  </div>\n  <SortComponent />\n</div>\n",
    "component_html": [
      {
        "name": "FilterComponent",
        "html": "<div class=\"mr-4 mb-2\">  <input type=\"checkbox\" id={`filter-${filter_id}`} />  <label for={`filter-${filter_id}`}>{filter_name}</label></div>"
      },
      {
        "name": "SortComponent",
        "html": "<select class=\"px-2 py-1 border border-gray-200 rounded\">  <option value=\"\">Default sorting</option>  {sort_options}.map((option, index) => (    <option key={index} value={option.value}>{option.label}</option>  ))}</select>"
      },
      {
        "name": "FilterAndSortComponent",
        "html": "<div class=\"flex flex-wrap\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A set of floating action buttons (FABs) that can be used to perform various actions. There should be a main FAB and several smaller FABs that can be toggled on and off.",
    "component_list": [
      {
        "name": "MainFab",
        "is_standalone": true,
        "description": "Standalone component that represents the main FAB. "
      },
      {
        "name": "MiniFab",
        "is_standalone": true,
        "description": "Standalone component that represents a smaller FAB. "
      },
      {
        "name": "FabContainer",
        "is_standalone": false,
        "description": "Component that takes children, used to wrap the FABs. "
      }
    ],
    "main_html": "<div class=\"fixed bottom-0 right-0 mb-4 mr-4\">\n  <FabContainer>\n    <MainFab/>\n    <MiniFab/>\n    <MiniFab/>\n    <MiniFab/>\n  </FabContainer>\n</div>\n",
    "component_html": [
      {
        "name": "MainFab",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">  {main_fab_icon}</button>"
      },
      {
        "name": "MiniFab",
        "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full\">  {mini_fab_icon}</button>"
      },
      {
        "name": "FabContainer",
        "html": "<div class=\"relative\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a footer section at the bottom of the page, containing social media links and a copyright notice.",
    "component_list": [
      {
        "name": "Footer",
        "is_standalone": true,
        "description": "(standalone): the main footer container "
      },
      {
        "name": "SocialLink",
        "is_standalone": false,
        "description": "(takes children): a single social media link "
      },
      {
        "name": "CopyrightNotice",
        "is_standalone": true,
        "description": "(standalone): the copyright notice text "
      }
    ],
    "main_html": "<footer className=\"bg-gray-200 h-screen p-4\">\n  <div className=\"container mx-auto p-4\">\n    <Footer>\n      <div className=\"flex justify-center mb-4\">\n        <SocialLink><ComponentName/></SocialLink>\n        <SocialLink><ComponentName/></SocialLink>\n        <SocialLink><ComponentName/></SocialLink>\n      </div>\n      <CopyrightNotice/>\n    </Footer>\n  </div>\n</footer>\n",
    "component_html": [
      {
        "name": "Footer",
        "html": "<div className=\"flex flex-col items-center\">  {children}</div>"
      },
      {
        "name": "SocialLink",
        "html": "<a href={socialLinkUrl} className=\"text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">  {children}</a>"
      },
      {
        "name": "CopyrightNotice",
        "html": "<p className=\"text-gray-600 text-sm\">{copyrightYear} {companyName}. All rights reserved.</p>"
      }
    ]
  },
  {
    "description": "The UI should display a form input field with an error message or success message below it, indicating the validation status of the input.",
    "component_list": [
      {
        "name": "FormInput",
        "is_standalone": true,
        "description": "A standalone component that represents a single form input field. "
      },
      {
        "name": "ValidationFeedback",
        "is_standalone": false,
        "description": "A component that takes children and displays the validation message (error or success). "
      }
    ],
    "main_html": "<div className=\"flex flex-col gap-2\">\n  <FormInput />\n  <ValidationFeedback>\n    <p>{validation_message}</p>\n  </ValidationFeedback>\n</div>\n",
    "component_html": [
      {
        "name": "FormInput",
        "html": "<input   type=\"text\"   className=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder={input_placeholder} />"
      },
      {
        "name": "ValidationFeedback",
        "html": "<div   className={`text-xs ${validation_status === 'error' ? 'text-red-500' : 'text-green-500'}`}>  {children}</div>"
      }
    ]
  },
  {
    "description": "A gallery of images with a lightbox feature that allows users to view larger versions of the images in a modal window.",
    "component_list": [
      {
        "name": "PhotoThumbnail",
        "is_standalone": true,
        "description": "(standalone): A small image thumbnail. "
      },
      {
        "name": "PhotoLightbox",
        "is_standalone": false,
        "description": "(takes children): A modal window that displays a larger version of the image. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h2 className=\"text-2xl mb-4\">Gallery</h2>\n  <div className=\"flex flex-wrap -mx-2\">\n    <PhotoThumbnail src=\"image1.jpg\" alt=\"Image 1\" />\n    <PhotoThumbnail src=\"image2.jpg\" alt=\"Image 2\" />\n    <PhotoThumbnail src=\"image3.jpg\" alt=\"Image 3\" />\n    <!-- More thumbnails here... -->\n  </div>\n\n  <PhotoLightbox>\n    <img src=\"image1.jpg\" alt=\"Image 1\" />\n  </PhotoLightbox>\n  <PhotoLightbox>\n    <img src=\"image2.jpg\" alt=\"Image 2\" />\n  </PhotoLightbox>\n  <PhotoLightbox>\n    <img src=\"image3.jpg\" alt=\"Image 3\" />\n  </PhotoLightbox>\n  <!-- More lightboxes here... -->\n</div>\n",
    "component_html": [
      {
        "name": "PhotoThumbnail",
        "html": "<img className=\"w-32 h-32 object-cover rounded-md shadow-md\" src={src} alt={alt} />"
      },
      {
        "name": "PhotoLightbox",
        "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50\">  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">    <button className=\"absolute top-0 right-0 text-2xl text-white hover:text-gray-300\" onClick={() => { /* Close lightbox */ }}>      &times;    </button>    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a map with multiple markers indicating different geo-locations. Each marker should have a popup that displays information about the location.",
    "component_list": [
      {
        "name": "MapComponent",
        "is_standalone": true,
        "description": "standalone, displays a map "
      },
      {
        "name": "MarkerComponent",
        "is_standalone": false,
        "description": "takes children, represents a marker on the map "
      },
      {
        "name": "PopupComponent",
        "is_standalone": false,
        "description": "takes children, displays information about a location "
      }
    ],
    "main_html": "<div className=\"h-full w-full\">\n  <MapComponent>\n    <MarkerComponent lat={lat1} lng={lng1}>\n      <PopupComponent>\n        <h2>{locationName1}</h2>\n        <p>{locationDescription1}</p>\n      </PopupComponent>\n    </MarkerComponent>\n    <MarkerComponent lat={lat2} lng={lng2}>\n      <PopupComponent>\n        <h2>{locationName2}</h2>\n        <p>{locationDescription2}</p>\n      </PopupComponent>\n    </MarkerComponent>\n    <!-- Add more markers here -->\n  </MapComponent>\n</div>\n",
    "component_html": [
      {
        "name": "MapComponent",
        "html": "<div className=\"map h-full w-full\"></div>"
      },
      {
        "name": "MarkerComponent",
        "html": "<div className=\"marker\">  {children}</div>"
      },
      {
        "name": "PopupComponent",
        "html": "<div className=\"popup\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of unique elements, each with a unique identifier, name, and description.",
    "component_list": [
      {
        "name": "UniqueIdCard",
        "is_standalone": true,
        "description": "A standalone component that displays a single unique element's details. "
      },
      {
        "name": "UniqueIdList",
        "is_standalone": false,
        "description": "A component that takes children, which are multiple **UniqueIdCard** components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Globally Unique Identifiable Elements</h1>\n  <UniqueIdList>\n    <UniqueIdCard/>\n    <UniqueIdCard/>\n    <UniqueIdCard/>\n    <!-- Add more UniqueIdCard components here -->\n  </UniqueIdList>\n</div>\n",
    "component_html": [
      {
        "name": "UniqueIdCard",
        "html": "<div class=\"bg-white shadow-md p-4 rounded mb-4\">  <h2 class=\"text-lg font-bold\">{element_name}</h2>  <p class=\"text-gray-600\">{element_description}</p>  <p class=\"text-sm text-gray-500\">Unique ID: {unique_id}</p></div>"
      },
      {
        "name": "UniqueIdList",
        "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a Google Maps embed with a search bar and a map container. The search bar should allow users to enter a location, and the map container should display the location on a Google Map.",
    "component_list": [
      {
        "name": "MapSearchBar",
        "is_standalone": true,
        "description": "standalone component that renders a search input field and a search button. "
      },
      {
        "name": "MapContainer",
        "is_standalone": true,
        "description": "standalone component that renders a container for the Google Map. "
      },
      {
        "name": "GoogleMapEmbed",
        "is_standalone": false,
        "description": "component that takes children, which wraps the `MapSearchBar` and `MapContainer` components. "
      }
    ],
    "main_html": "<div className=\"h-screen w-full flex flex-col\">\n  <GoogleMapEmbed>\n    <MapSearchBar />\n    <MapContainer />\n  </GoogleMapEmbed>\n</div>\n",
    "component_html": [
      {
        "name": "MapSearchBar",
        "html": "<div className=\"p-4 flex justify-center\">  <input    type=\"search\"    placeholder=\"Enter a location\"    className=\"bg-white border border-gray-300 rounded-md py-2 pl-2 pr-4\"  />  <button    className=\"bg-orange-500 text-white px-4 py-2 rounded-md\"  >    Search  </button></div>"
      },
      {
        "name": "MapContainer",
        "html": "<div  className=\"h-full w-full\"  id=\"map\"  style={{ width: '100%', height: 'calc(100vh - 64px)' }}>  <!-- map will be rendered here --></div>"
      },
      {
        "name": "GoogleMapEmbed",
        "html": "<div className=\"h-full w-full flex flex-col\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A simple header with a navigation menu and a footer with a copyright notice.",
    "component_list": [
      {
        "name": "HeaderBar",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "FooterBar",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "NavLink",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<header>\n  <HeaderBar>\n    <nav>\n      <ul>\n        <li><NavLink>Home</NavLink></li>\n        <li><NavLink>About</NavLink></li>\n        <li><NavLink>Contact</NavLink></li>\n      </ul>\n    </nav>\n  </HeaderBar>\n</header>\n<footer>\n  <FooterBar>\n    <p>&#169; {year} {company_name}</p>\n  </FooterBar>\n</footer>\n",
    "component_html": [
      {
        "name": "HeaderBar",
        "html": "<div class=\"bg-gray-100 p-4\">  {children}</div>"
      },
      {
        "name": "FooterBar",
        "html": "<div class=\"bg-gray-200 p-4\">  {children}</div>"
      },
      {
        "name": "NavLink",
        "html": "<a href={linkHref} class=\"text-blue-500 hover:text-blue-800\">{children}</a>"
      }
    ]
  },
  {
    "description": "The UI should display a box that changes its background color and text color when hovered over, along with a scaling effect.",
    "component_list": [
      {
        "name": "HoverEffectBox",
        "is_standalone": true,
        "description": "A standalone component that displays a box with hover effects. "
      }
    ],
    "main_html": "<div class=\"flex justify-center h-screen\">\n  <HoverEffectBox/>\n</div>\n",
    "component_html": [
      {
        "name": "HoverEffectBox",
        "html": "<div  class=\"bg-orange-300 hover:bg-orange-500 transition duration-300 ease-in-out p-10 rounded-md cursor-pointer hover:scale-110\">  <p class=\"text-lg text-orange-800 hover:text-white\">{hover_text}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should display a set of icons using font icons and SVG sprites. The icons will be displayed in a grid with three columns. Each icon will have a title and a brief description.",
    "component_list": [
      {
        "name": "IconGrid",
        "is_standalone": true,
        "description": "- standalone component that displays a grid of icons "
      },
      {
        "name": "IconItem",
        "is_standalone": false,
        "description": "- component that takes children, displays a single icon with title and description "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <IconGrid>\n    <IconItem> <!-- Icon Item 1 --> </IconItem>\n    <IconItem> <!-- Icon Item 2 --> </IconItem>\n    <!-- more IconItems ... -->\n  </IconGrid>\n</div>\n",
    "component_html": [
      {
        "name": "IconGrid",
        "html": "<div class=\"grid grid-cols-3 gap-4\">  {children}</div>"
      },
      {
        "name": "IconItem",
        "html": "<div class=\"flex flex-col items-center p-4\">  <i class={`icon-${icon_name}`} /> <!-- font icon or SVG sprite -->  <h5 class=\"text-lg\">{icon_title}</h5>  <p class=\"text-gray-600\">{icon_description}</p></div>"
      }
    ]
  },
  {
    "description": "A horizontal carousel that displays a series of images with navigation buttons to move through the images.",
    "component_list": [
      {
        "name": "ImageCarouselContainer",
        "is_standalone": true,
        "description": "- standalone container component that holds the carousel "
      },
      {
        "name": "ImageCarouselNavigation",
        "is_standalone": true,
        "description": "- standalone component that holds the navigation buttons "
      },
      {
        "name": "ImageCarouselSlide",
        "is_standalone": false,
        "description": "- takes children, a single slide in the carousel that displays an image "
      },
      {
        "name": "ImageCarouselImage",
        "is_standalone": true,
        "description": "- standalone component that displays a single image "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto\">\n  <ImageCarouselContainer>\n    <ImageCarouselNavigation/>\n    <ImageCarouselSlide>\n      <ImageCarouselImage src=\"{image_url}\" />\n    </ImageCarouselSlide>\n    <!-- Add more ImageCarouselSlide components here -->\n  </ImageCarouselContainer>\n</div>\n",
    "component_html": [
      {
        "name": "ImageCarouselContainer",
        "html": "<div class=\"relative overflow-hidden\">  {children}</div>"
      },
      {
        "name": "ImageCarouselNavigation",
        "html": "<div class=\"absolute top-1/2 transform -translate-y-1/2 flex justify-between w-full\">  <button class=\"text-gray-500 hover:text-gray-900 transition duration-300\">Previous</button>  <button class=\"text-gray-500 hover:text-gray-900 transition duration-300\">Next</button></div>"
      },
      {
        "name": "ImageCarouselSlide",
        "html": "<div class=\"flex justify-center\">  {children}</div>"
      },
      {
        "name": "ImageCarouselImage",
        "html": "<img src=\"{src}\" alt=\" carousel image\" class=\"w-full h-full object-cover\" />"
      }
    ]
  },
  {
    "description": "The UI should display a list of items that can be scrolled through, with a loading indicator at the bottom that appears when the user reaches the end of the list. When the user scrolls to the bottom, more items are loaded and appended to the list.",
    "component_list": [
      {
        "name": "ScrollableList",
        "is_standalone": true,
        "description": "A standalone component that contains the list of items and the loading indicator. "
      },
      {
        "name": "ListItem",
        "is_standalone": false,
        "description": "A component that takes children, representing a single item in the list. "
      },
      {
        "name": "LoadingIndicator",
        "is_standalone": true,
        "description": "A standalone component that displays a loading animation. "
      }
    ],
    "main_html": "<div className=\"h-screen overflow-y-auto p-4\">\n  <ScrollableList>\n    <!-- list items will be rendered here -->\n  </ScrollableList>\n</div>\n",
    "component_html": [
      {
        "name": "ScrollableList",
        "html": "<div className=\"space-y-4\">  {children}  <LoadingIndicator /></div>"
      },
      {
        "name": "ListItem",
        "html": "<div className=\"px-4 py-2 border-b border-gray-200\">  {children}</div>"
      },
      {
        "name": "LoadingIndicator",
        "html": "<div className=\"flex justify-center py-4\">  <div className=\"animate-spin h-5 w-5 border-2 border-gray-600 rounded-full\"></div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a table with inline editing capabilities. Each table row should have columns for id, name, and actions. The actions column should have edit and delete buttons. When the edit button is clicked, the name column should become an editable input field. The user can then edit the name and save the changes or cancel the edit.",
    "component_list": [
      {
        "name": "DataTable",
        "is_standalone": true,
        "description": "A standalone component that renders a table with inline editing capabilities. "
      },
      {
        "name": "DataRow",
        "is_standalone": false,
        "description": "A component that takes children, representing a single row in the table. "
      },
      {
        "name": "EditableCell",
        "is_standalone": false,
        "description": "A component that takes children, representing a single editable cell in the table. "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "A standalone component that renders a single action button (edit or delete). "
      }
    ],
    "main_html": "<DataTable>\n  <DataRow>\n    <td><EditableCell>{id}</EditableCell></td>\n    <td><EditableCell>{name}</EditableCell></td>\n    <td>\n      <ActionButton>edit</ActionButton>\n      <ActionButton>delete</ActionButton>\n    </td>\n  </DataRow>\n  <!-- More DataRow components here -->\n</DataTable>\n",
    "component_html": [
      {
        "name": "DataTable",
        "html": "<table class=\"w-full border-collapse\">  <thead>    <tr>      <th class=\"px-4 py-2\">ID</th>      <th class=\"px-4 py-2\">Name</th>      <th class=\"px-4 py-2\">Actions</th>    </tr>  </thead>  <tbody>{children}</tbody></table>"
      },
      {
        "name": "DataRow",
        "html": "<tr class=\"border-b\">{children}</tr>"
      },
      {
        "name": "EditableCell",
        "html": "<td class=\"px-4 py-2\">  {children}  <!-- Editing mode -->  <input type=\"text\" value={value} class=\"w-full p-2\" />  <!-- Read-only mode -->  <span>{value}</span></td>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"px-2 py-1 text-sm\">{children}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a modal dialog with a warning sign, a heading, a message, and two buttons: \"Cancel\" and \"Intercept\".",
    "component_list": [
      {
        "name": "WarningIcon",
        "is_standalone": true,
        "description": "(standalone): A warning sign icon. "
      },
      {
        "name": "ModalDialog",
        "is_standalone": false,
        "description": "(takes children): A modal dialog container. "
      },
      {
        "name": "DialogHeading",
        "is_standalone": false,
        "description": "(takes children): A heading inside the modal dialog. "
      },
      {
        "name": "DialogMessage",
        "is_standalone": false,
        "description": "(takes children): A message inside the modal dialog. "
      },
      {
        "name": "CancelButton",
        "is_standalone": true,
        "description": "(standalone): A \"Cancel\" button. "
      },
      {
        "name": "InterceptButton",
        "is_standalone": true,
        "description": "(standalone): An \"Intercept\" button. "
      }
    ],
    "main_html": "<ModalDialog>\n  <WarningIcon />\n  <DialogHeading> Intercept Request </DialogHeading>\n  <DialogMessage> {message} </DialogMessage>\n  <div class=\"flex justify-end\">\n    <CancelButton> Cancel </CancelButton>\n    <InterceptButton> Intercept </InterceptButton>\n  </div>\n</ModalDialog>\n",
    "component_html": [
      {
        "name": "WarningIcon",
        "html": "<i class=\"fas fa-exclamation-triangle text-yellow-600 text-lg\" />"
      },
      {
        "name": "ModalDialog",
        "html": "<div class=\"fixed overflow-hidden z-10 bg-gray-900 bg-opacity-75 inset-0 flex justify-center items-center\">  <div class=\"bg-white rounded-lg p-4\">    {children}  </div></div>"
      },
      {
        "name": "DialogHeading",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "DialogMessage",
        "html": "<p class=\"text-gray-600\">{children}</p>"
      },
      {
        "name": "CancelButton",
        "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-bold py-2 px-4 border border-gray-200 rounded\">  {children}</button>"
      },
      {
        "name": "InterceptButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 border border-orange-500 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A JSON data visualization UI that displays key-value pairs in a tree-like structure, with nested objects and arrays expandable and collapsible. The UI should have a clean and minimalistic design.",
    "component_list": [
      {
        "name": "DataTreeNode",
        "is_standalone": true,
        "description": "(standalone) - a single node in the data tree "
      },
      {
        "name": "DataTree",
        "is_standalone": false,
        "description": "(takes children) - the main container for the data tree "
      },
      {
        "name": "KeyValuePair",
        "is_standalone": true,
        "description": "(standalone) - a single key-value pair "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <DataTree>\n    <DataTreeNode />\n  </DataTree>\n</div>\n",
    "component_html": [
      {
        "name": "DataTreeNode",
        "html": "<div class=\"flex items-center mb-2\">  <span class=\"mr-2\">{key}</span>  <span class=\"text-gray-600\">{value}</span>  <!-- if nested object or array, add an expand/collapse button -->  {nestedContent ? <button class=\"ml-2 text-xs\">+</button> : null}  <!-- if nested object or array, show the nested content -->  {nestedContent ? <DataTree><DataTreeNode /></DataTree> : null}</div>"
      },
      {
        "name": "DataTree",
        "html": "<ul class=\"list-none mb-0 pl-0\">  {children}</ul>"
      },
      {
        "name": "KeyValuePair",
        "html": "<!-- this component is not needed, as DataTreeNode already handles key-value pairs -->"
      }
    ]
  },
  {
    "description": "A keyboard-navigable interface with a navigation menu that allows users to navigate using their keyboard.",
    "component_list": [
      {
        "name": "NavigationMenu",
        "is_standalone": true,
        "description": "standalone component that displays a list of navigable items "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "takes children, a single navigable item in the navigation menu "
      },
      {
        "name": "FocusIndicator",
        "is_standalone": true,
        "description": "standalone component that highlights the currently focused item "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen\">\n  <NavigationMenu>\n    <NavItem><a href=\"#\">Item 1</a></NavItem>\n    <NavItem><a href=\"#\">Item 2</a></NavItem>\n    <NavItem><a href=\"#\">Item 3</a></NavItem>\n  </NavigationMenu>\n  <FocusIndicator />\n</div>\n",
    "component_html": [
      {
        "name": "NavigationMenu",
        "html": "<nav class=\"flex flex-col\">  {children}</nav>"
      },
      {
        "name": "NavItem",
        "html": "<li class=\"py-2 px-4\">  {children}</li>"
      },
      {
        "name": "FocusIndicator",
        "html": "<div class=\"absolute w-2 h-2 bg-orange-500 rounded-full\"></div>"
      }
    ]
  },
  {
    "description": "The UI should have a card-like layout with a header, a form, and a call-to-action (CTA) button. The form should have fields for username, password, and an optional password confirmation field for registration. There should also be a toggle button to switch between login and registration forms.",
    "component_list": [
      {
        "name": "AuthCard",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "AuthForm",
        "is_standalone": false,
        "description": "- takes children "
      },
      {
        "name": "FormHeader",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "LoginForm",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "RegisterForm",
        "is_standalone": true,
        "description": "- standalone component "
      },
      {
        "name": "ToggleSwitch",
        "is_standalone": true,
        "description": "- standalone component "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <AuthCard>\n    <FormHeader/>\n    <AuthForm>\n      <!-- login/register form fields here -->\n      <ToggleSwitch/>\n      {children}\n    </AuthForm>\n  </AuthCard>\n</div>\n",
    "component_html": [
      {
        "name": "AuthCard",
        "html": "<div class=\"p-4 bg-white rounded shadow-md\">  {children}</div>"
      },
      {
        "name": "AuthForm",
        "html": "<form class=\"flex flex-col\">  {children}</form>"
      },
      {
        "name": "FormHeader",
        "html": "<header class=\"mb-4\">  <h2 class=\"text-lg font-bold\">{header_text}</h2></header>"
      },
      {
        "name": "LoginForm",
        "html": "<div>  <label class=\"block mb-2\" for=\"username\">Username</label>  <input class=\"w-full p-2\" type=\"text\" id=\"username\" />  <label class=\"block mb-2\" for=\"password\">Password</label>  <input class=\"w-full p-2\" type=\"password\" id=\"password\" />  <button class=\"w-full p-2 bg-blue-500 hover:bg-blue-700 text-white font-bold\">Login</button></div>"
      },
      {
        "name": "RegisterForm",
        "html": "<div>  <label class=\"block mb-2\" for=\"username\">Username</label>  <input class=\"w-full p-2\" type=\"text\" id=\"username\" />  <label class=\"block mb-2\" for=\"email\">Email</label>  <input class=\"w-full p-2\" type=\"email\" id=\"email\" />  <label class=\"block mb-2\" for=\"password\">Password</label>  <input class=\"w-full p-2\" type=\"password\" id=\"password\" />  <label class=\"block mb-2\" for=\"confirm_password\">Confirm Password</label>  <input class=\"w-full p-2\" type=\"password\" id=\"confirm_password\" />  <button class=\"w-full p-2 bg-blue-500 hover:bg-blue-700 text-white font-bold\">Register</button></div>"
      },
      {
        "name": "ToggleSwitch",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\" id=\"toggle_switch\">  {toggle_text}</button>"
      }
    ]
  },
  {
    "description": "A modal window with a dark background overlay, a centered white dialog box with a title, content, and buttons for confirmation and cancellation.",
    "component_list": [
      {
        "name": "ModalContainer",
        "is_standalone": true,
        "description": "(standalone) - the outermost container for the modal window "
      },
      {
        "name": "ModalBackground",
        "is_standalone": true,
        "description": "(standalone) - the dark background overlay "
      },
      {
        "name": "ModalDialog",
        "is_standalone": false,
        "description": "(takes children) - the white dialog box "
      },
      {
        "name": "ModalTitle",
        "is_standalone": true,
        "description": "(standalone) - the title of the dialog box "
      },
      {
        "name": "ModalContent",
        "is_standalone": false,
        "description": "(takes children) - the content area of the dialog box "
      },
      {
        "name": "ModalFooter",
        "is_standalone": false,
        "description": "(takes children) - the footer area with buttons "
      }
    ],
    "main_html": "<div className=\"fixed inset-0 z-50\">\n  <ModalBackground/>\n  <div className=\"fixed inset-x-0 top-1/2 mx-4 md:mx-auto w-full md:max-w-md\">\n    <ModalDialog>\n      <ModalTitle>{modal_title}</ModalTitle>\n      <ModalContent>\n        <ComponentName/>\n      </ModalContent>\n      <ModalFooter>\n        <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm</button>\n        <button className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Cancel</button>\n      </ModalFooter>\n    </ModalDialog>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ModalContainer",
        "html": "<div className=\"fixed inset-0 flex justify-center pt-4 px-4 pb-20 text-center sm:block sm:p-0\">  <!-- content --></div>"
      },
      {
        "name": "ModalBackground",
        "html": "<div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"></div>"
      },
      {
        "name": "ModalDialog",
        "html": "<div className=\"bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full\">  <!-- content --></div>"
      },
      {
        "name": "ModalTitle",
        "html": "<div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">  <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3></div>"
      },
      {
        "name": "ModalContent",
        "html": "<div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">  {children}</div>"
      },
      {
        "name": "ModalFooter",
        "html": "<div className=\"px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive navbar with a mega menu that has multiple columns. The navbar should have a logo on the left, navigation links in the middle, and a call-to-action (CTA) button on the right. When a navigation link is hovered, a mega menu should dropdown with multiple columns of links.",
    "component_list": [
      {
        "name": "Navbar",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "NavLinks",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "NavLink",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "MegaMenu",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "MegaMenuColumn",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "MegaMenuItem",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "Logo",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "CTAButton",
        "is_standalone": true,
        "description": "standalone "
      }
    ],
    "main_html": "<nav class=\"flex justify-between items-center py-4\">\n  <Logo />\n  <NavLinks>\n    <NavLink>Movies</NavLink>\n    <NavLink>TV Shows</NavLink>\n    <NavLink>Music</NavLink>\n  </NavLinks>\n  <CTAButton>Sign Up</CTAButton>\n</nav>\n",
    "component_html": [
      {
        "name": "Navbar",
        "html": "<nav class=\"flex justify-between items-center py-4\">  {children}</nav>"
      },
      {
        "name": "NavLinks",
        "html": "<ul class=\"flex justify-between items-center\">  {children}</ul>"
      },
      {
        "name": "NavLink",
        "html": "<li class=\"mr-4\">  <a class=\"text-gray-600 hover:text-gray-900\" href=\"#\">{label}</a></li>"
      },
      {
        "name": "MegaMenu",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  {children}</div>"
      },
      {
        "name": "MegaMenuColumn",
        "html": "<div class=\"w-1/3 p-4\">  <h5 class=\"uppercase text-gray-600\">{column_title}</h5>  <ul>    {children}  </ul></div>"
      },
      {
        "name": "MegaMenuItem",
        "html": "<li>  <a class=\"text-gray-600 hover:text-gray-900\" href=\"#\">{label}</a></li>"
      },
      {
        "name": "Logo",
        "html": "<a href=\"#\" class=\"text-lg font-bold text-blue-600\">  {logo_text}</a>"
      },
      {
        "name": "CTAButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {label}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a horizontal scrolling marquee of news headlines with a black background and white text.",
    "component_list": [
      {
        "name": "NewsTicker",
        "is_standalone": true,
        "description": "standalone component that wraps the entire marquee. "
      },
      {
        "name": "MarqueeItem",
        "is_standalone": true,
        "description": "standalone component that represents a single news headline. "
      }
    ],
    "main_html": "<div class=\"h-screen w-full bg-black\">\n  <NewsTicker/>\n</div>\n",
    "component_html": [
      {
        "name": "NewsTicker",
        "html": "<div class=\"flex overflow-x-hidden\">  { /* Loop through news items */ }  <MarqueeItem> {marquee_item_text} </MarqueeItem>  { /* End loop */ }</div>"
      },
      {
        "name": "MarqueeItem",
        "html": "<div class=\"px-4 py-2 text-white\">  {marquee_item_text}</div>"
      }
    ]
  },
  {
    "description": "A nested comment thread with multiple levels of nesting, displaying a comment, its replies, and their respective replies, with a clear visual hierarchy.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "The outermost component that wraps the entire comment thread. (standalone) "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "A single comment with its content and replies. (takes children) "
      },
      {
        "name": "Reply",
        "is_standalone": false,
        "description": "A reply to a comment, which can have its own replies. (takes children) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <Comment>\n      <!-- comment content -->\n      <p>{comment_text}</p>\n      <Reply>\n        <!-- reply content -->\n        <p>{reply_text}</p>\n        <Reply>\n          <!-- nested reply content -->\n          <p>{nested_reply_text}</p>\n        </Reply>\n      </Reply>\n    </Comment>\n  </CommentThread>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"bg-white rounded shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex mb-4\">  <!-- comment avatar -->  <img src=\"{comment_avatar}\" class=\"w-8 h-8 rounded-full mr-4\" />  <div class=\"flex-1\">    <!-- comment content -->    {children}    <!-- reply button -->    <button class=\"text-blue-500 hover:text-blue-700\">Reply</button>  </div></div>"
      },
      {
        "name": "Reply",
        "html": "<div class=\"pl-4 mb-4\">  <!-- reply content -->  {children}  <!-- reply button -->  <button class=\"text-blue-500 hover:text-blue-700\">Reply</button></div>"
      }
    ]
  },
  {
    "description": "The UI should be an off-canvas or flyout menu that slides out from the side of the screen when triggered. The menu should have a header, a list of menu items, and a footer with social media links.",
    "component_list": [
      {
        "name": "FlyoutMenu",
        "is_standalone": true,
        "description": "standalone - the outermost component that wraps the flyout menu "
      },
      {
        "name": "FlyoutHeader",
        "is_standalone": true,
        "description": "standalone - the header of the flyout menu "
      },
      {
        "name": "FlyoutMenuItem",
        "is_standalone": false,
        "description": "takes children - an individual menu item in the flyout menu "
      },
      {
        "name": "FlyoutMenuFooter",
        "is_standalone": true,
        "description": "standalone - the footer of the flyout menu "
      }
    ],
    "main_html": "<div class=\"fixed inset-0 z-50\">\n  <FlyoutMenu/>\n</div>\n",
    "component_html": [
      {
        "name": "FlyoutMenu",
        "html": "<div class=\"bg-white w-64 h-screen p-4 overflow-y-auto\">  <FlyoutHeader/>  <ul class=\"divide-y divide-gray-200\">    {children}  </ul>  <FlyoutMenuFooter/></div>"
      },
      {
        "name": "FlyoutHeader",
        "html": "<div class=\"flex justify-between mb-2\">  <h5 class=\"text-lg\">{header_title}</h5>  <button class=\"text-gray-500 hover:text-gray-800\">&times;</button></div>"
      },
      {
        "name": "FlyoutMenuItem",
        "html": "<li class=\"py-2\">  <a href=\"#\" class=\"text-gray-800 hover:text-gray-900\">{children}</a></li>"
      },
      {
        "name": "FlyoutMenuFooter",
        "html": "<div class=\"pt-4\">  <ul class=\"flex justify-between\">    <li><a href=\"#\" class=\"text-gray-500 hover:text-gray-800\">Twitter</a></li>    <li><a href=\"#\" class=\"text-gray-500 hover:text-gray-800\">Facebook</a></li>  </ul></div>"
      }
    ]
  },
  {
    "description": "A simple tooltip that appears when the user hovers over an element, providing additional information.",
    "component_list": [
      {
        "name": "TooltipTrigger",
        "is_standalone": true,
        "description": "A standalone component that wraps the element that triggers the tooltip. "
      },
      {
        "name": "Tooltip",
        "is_standalone": false,
        "description": "A component that takes children to display the tooltip content. "
      }
    ],
    "main_html": "<div className=\"cursor-pointer\">\n  <TooltipTrigger><button>Hover me!</button></TooltipTrigger>\n  <Tooltip><Tooltip/></Tooltip>\n</div>\n",
    "component_html": [
      {
        "name": "TooltipTrigger",
        "html": "<div className=\"relative\">  {children}  <div className=\"absolute hidden group-hover:block\">{/* tooltip will be inserted here */}</div></div>"
      },
      {
        "name": "Tooltip",
        "html": "<div className=\"bg-gray-100 text-gray-600 py-1 px-2 rounded text-sm whitespace-nowrap\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of items with pagination controls at the bottom. The pagination controls should have options to navigate to previous and next pages. If the user reaches the end of the list, an \"Load more\" button should appear to load more items.",
    "component_list": [
      {
        "name": "PaginationControls",
        "is_standalone": true,
        "description": "(standalone) - Displays the pagination controls. "
      },
      {
        "name": "PaginationButtonItem",
        "is_standalone": true,
        "description": "(standalone) - A single pagination button (e.g. \"Prev\", \"Next\", etc.). "
      },
      {
        "name": "LoadMoreButton",
        "is_standalone": true,
        "description": "(standalone) - The \"Load more\" button. "
      },
      {
        "name": "ListItem",
        "is_standalone": false,
        "description": "(takes children) - A single item in the list. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ul>\n    <ListItem/> <!-- repeat for each item in the list -->\n  </ul>\n  <PaginationControls/>\n</div>\n",
    "component_html": [
      {
        "name": "PaginationControls",
        "html": "<div class=\"flex justify-center mb-4\">  <PaginationButtonItem>Prev</PaginationButtonItem>  <PaginationButtonItem>Next</PaginationButtonItem>  <LoadMoreButton>Load more</LoadMoreButton></div>"
      },
      {
        "name": "PaginationButtonItem",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">{button_label}</button>"
      },
      {
        "name": "LoadMoreButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{load_more_label}</button>"
      },
      {
        "name": "ListItem",
        "html": "<li class=\"my-2\">{children}</li>"
      }
    ]
  },
  {
    "description": "A password strength meter is a UI component that provides visual feedback to users about the strength of their chosen password. It usually consists of a progress bar or a meter that fills up as the password meets certain strength criteria, such as length, complexity, and uniqueness.",
    "component_list": [
      {
        "name": "PasswordStrengthMeter",
        "is_standalone": true,
        "description": "A standalone component that displays the strength of a password. "
      },
      {
        "name": "ProgressBar",
        "is_standalone": false,
        "description": "A component that displays a progress bar, takes children (optional). "
      },
      {
        "name": "StrengthIndicator",
        "is_standalone": true,
        "description": "A standalone component that displays a textual representation of the password strength (e.g., \"Weak\", \"Medium\", \"Strong\"). "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center p-4\">\n  <PasswordStrengthMeter>\n    <ProgressBar />\n    <StrengthIndicator />\n  </PasswordStrengthMeter>\n</div>\n",
    "component_html": [
      {
        "name": "PasswordStrengthMeter",
        "html": "<div class=\"w-full bg-gray-200 h-2 rounded-full overflow-hidden\">  {children}</div>"
      },
      {
        "name": "ProgressBar",
        "html": "<div class=\"h-2 bg-green-500 rounded-full\" style={`width: ${progressPercentage}%`} />"
      },
      {
        "name": "StrengthIndicator",
        "html": "<p class=\"text-sm\">{strengthText}</p>"
      }
    ]
  },
  {
    "description": "A circular chart divided into sections, each representing a proportion of the total. The chart should have a hollow center (doughnut chart) or be fully filled (pie chart). Each section should have a distinct color and a tooltip or label displaying the section's value and percentage.",
    "component_list": [
      {
        "name": "PieChartContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the chart. "
      },
      {
        "name": "PieChartSegment",
        "is_standalone": false,
        "description": "(takes children): A single section of the chart, representing a proportion of the total. "
      },
      {
        "name": "Tooltip",
        "is_standalone": true,
        "description": "(standalone): A small box displaying the section's value and percentage when hovered over. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto\">\n  <PieChartContainer>\n    <PieChartSegment style={{ backgroundColor: '{segment1Color}' }} />\n    <PieChartSegment style={{ backgroundColor: '{segment2Color}' }} />\n    <!-- Add more segments as needed -->\n  </PieChartContainer>\n  <Tooltip>{segmentValue} ({segmentPercentage}%)</Tooltip>\n</div>\n",
    "component_html": [
      {
        "name": "PieChartContainer",
        "html": "<div class=\"flex justify-center mb-4 p-4 rounded-full bg-white shadow-md\">  {children}</div>"
      },
      {
        "name": "PieChartSegment",
        "html": "<div class=\"pie-chart-segment\" style={style}>{children}</div>"
      },
      {
        "name": "Tooltip",
        "html": "<div class=\"absolute bg-white p-2 rounded text-sm\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display audio controls with play/pause, previous, and next track buttons, along with a progress bar to show the audio's playback progress. The UI should also display the current track's title and artist.",
    "component_list": [
      {
        "name": "AudioControls",
        "is_standalone": true,
        "description": "A standalone component that contains all the audio controls. "
      },
      {
        "name": "PlayPauseButton",
        "is_standalone": true,
        "description": "A standalone component that toggles play/pause state. "
      },
      {
        "name": "PreviousTrackButton",
        "is_standalone": true,
        "description": "A standalone component that navigates to the previous track. "
      },
      {
        "name": "NextTrackButton",
        "is_standalone": true,
        "description": "A standalone component that navigates to the next track. "
      },
      {
        "name": "TrackInfo",
        "is_standalone": false,
        "description": "A component that displays the current track's title and artist. Takes children. "
      },
      {
        "name": "ProgressBar",
        "is_standalone": true,
        "description": "A standalone component that displays the audio's playback progress. "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <AudioControls>\n    <PreviousTrackButton />\n    <PlayPauseButton />\n    <NextTrackButton />\n  </AudioControls>\n  <TrackInfo>\n    <p className=\"text-lg\">{track_title}</p>\n    <p>{artist_name}</p>\n  </TrackInfo>\n  <ProgressBar className=\"w-full\" />\n</div>\n",
    "component_html": [
      {
        "name": "AudioControls",
        "html": "<div className=\"flex items-center mb-2\">  {children}</div>"
      },
      {
        "name": "PlayPauseButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {is_playing ? 'Pause' : 'Play'}</button>"
      },
      {
        "name": "PreviousTrackButton",
        "html": "<button className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Previous</button>"
      },
      {
        "name": "NextTrackButton",
        "html": "<button className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Next</button>"
      },
      {
        "name": "TrackInfo",
        "html": "<div className=\"flex flex-col mb-2\">  {children}</div>"
      },
      {
        "name": "ProgressBar",
        "html": "<div className=\"w-full h-4 bg-gray-200 rounded\">  <div     className=\"h-4 bg-orange-500 rounded\"    style={{ width: `${progress_percentage}%` }}  /></div>"
      }
    ]
  },
  {
    "description": "A poll/voting system UI should display a question, several options to choose from, and the current voting results. It should also allow users to cast their votes.",
    "component_list": [
      {
        "name": "PollQuestion",
        "is_standalone": true,
        "description": "standalone, displays the question being asked "
      },
      {
        "name": "PollOption",
        "is_standalone": false,
        "description": "takes children, represents a single option with a vote count "
      },
      {
        "name": "VoteButton",
        "is_standalone": true,
        "description": "standalone, allows users to cast their vote "
      },
      {
        "name": "VoteResults",
        "is_standalone": false,
        "description": "takes children, displays the current voting results "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-4\">\n  <PollQuestion />\n  <div class=\"flex flex-col gap-2\">\n    <PollOption>Option 1</PollOption>\n    <PollOption>Option 2</PollOption>\n    <PollOption>Option 3</PollOption>\n  </div>\n  <VoteButton />\n  <VoteResults>\n    <p>Results:</p>\n    <ul>\n      <li>Option 1: {option1_votes} votes</li>\n      <li>Option 2: {option2_votes} votes</li>\n      <li>Option 3: {option3_votes} votes</li>\n    </ul>\n  </VoteResults>\n</div>\n",
    "component_html": [
      {
        "name": "PollQuestion",
        "html": "<h2 class=\"text-2xl\">{question_text}</h2>"
      },
      {
        "name": "PollOption",
        "html": "<div class=\"flex items-center gap-2\">  <input type=\"radio\" name=\"poll_option\" id={`option_${option_id}`} />  <label for={`option_${option_id}`}>{children}</label>  <span class=\"text-gray-500\">{vote_count} votes</span></div>"
      },
      {
        "name": "VoteButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Cast Your Vote</button>"
      },
      {
        "name": "VoteResults",
        "html": "<div class=\"bg-gray-100 p-4 rounded\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A price/discount table that displays a list of prices with their corresponding discounts.",
    "component_list": [
      {
        "name": "PriceTable",
        "is_standalone": true,
        "description": "standalone component that wraps the entire table "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "a single row in the table that takes children "
      },
      {
        "name": "TableCell",
        "is_standalone": false,
        "description": "a single cell in the table row that takes children "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <PriceTable>\n    <TableRow>\n      <TableCell><p>Price</p></TableCell>\n      <TableCell><p>Discount</p></TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell><p>{price1}</p></TableCell>\n      <TableCell><p>{discount1}</p></TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell><p>{price2}</p></TableCell>\n      <TableCell><p>{discount2}</p></TableCell>\n    </TableRow>\n    <!-- more table rows -->\n  </PriceTable>\n</div>\n",
    "component_html": [
      {
        "name": "PriceTable",
        "html": "<table className=\"w-full border-collapse\">  {children}</table>"
      },
      {
        "name": "TableRow",
        "html": "<tr className=\"border-b border-gray-200\">  {children}</tr>"
      },
      {
        "name": "TableCell",
        "html": "<td className=\"px-4 py-2\">{children}</td>"
      }
    ]
  },
  {
    "description": "The UI should resemble a progress bar with multiple steps, where each step is a distinct stage in a process. Each step should have a visual indicator (e.g., a circle) with a line connecting each step. The current step should be highlighted or emphasized.",
    "component_list": [
      {
        "name": "StepItem",
        "is_standalone": false,
        "description": "A single step in the progress bar. This component takes children (e.g., a label). "
      },
      {
        "name": "ProgressBar",
        "is_standalone": false,
        "description": "The container component that holds all the steps. This component takes children (i.e., multiple StepItem components). "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <ProgressBar>\n    <StepItem><StepItem/>\n    <StepItem><StepItem/>\n    <StepItem><StepItem/>\n    <StepItem><StepItem/>\n  </ProgressBar>\n</div>\n",
    "component_html": [
      {
        "name": "Here",
        "html": "<!-- ProgressBar component --><div className=\"flex justify-between w-full mb-4\">  <div className=\"w-full h-2 bg-gray-200 rounded-full\">    <div className=\"h-2 bg-blue-600 rounded-full\" style={{ width: `${progress_percentage}%` }}></div>  </div>  {children}</div><!-- StepItem component --><div className=\"flex flex-col items-center\">  <div className=\"w-6 h-6 bg-white border-2 border-gray-300 rounded-full flex justify-center items-center\">    <span className=\"text-lg\">{step_number}</span>  </div>  <div className=\"text-sm\">{step_label}</div></div>"
      }
    ]
  },
  {
    "description": "A testimonial UI that showcases a quote, author, and optional title, with a clean and modern design.",
    "component_list": [
      {
        "name": "TestimonialCard",
        "is_standalone": true,
        "description": "a standalone component that displays a single testimonial. "
      },
      {
        "name": "QuoteText",
        "is_standalone": true,
        "description": "a standalone component that displays the quote text. "
      },
      {
        "name": "AuthorInfo",
        "is_standalone": true,
        "description": "a standalone component that displays the author's name and title. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <TestimonialCard>\n    <QuoteText />\n    <AuthorInfo />\n  </TestimonialCard>\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialCard",
        "html": "<div className=\"bg-white p-8 rounded-md shadow-md\">  {children}</div>"
      },
      {
        "name": "QuoteText",
        "html": "<blockquote className=\"text-lg font-bold mb-4\">{quote_text}</blockquote>"
      },
      {
        "name": "AuthorInfo",
        "html": "<p className=\"text-sm text-gray-500\">{author_name}, {author_title}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a rating system with a number of stars, a numerical rating, and a reviews section with a list of reviewer names and their corresponding ratings.",
    "component_list": [
      {
        "name": "RatingStars",
        "is_standalone": true,
        "description": "Standalone component to display a rating system with a number of stars. "
      },
      {
        "name": "ReviewCard",
        "is_standalone": false,
        "description": "Component that takes children, displaying a reviewer's name and rating. "
      },
      {
        "name": "ReviewsList",
        "is_standalone": false,
        "description": "Component that takes children, displaying a list of `ReviewCard` components. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Ratings and Reviews</h2>\n  <div class=\"flex items-center mb-4\">\n    <RatingStars />\n    <p class=\"text-lg ml-2\">{overall_rating} / 5</p>\n  </div>\n  <ReviewsList>\n    <ReviewCard />\n    <ReviewCard />\n    <!-- more ReviewCard components here -->\n  </ReviewsList>\n</div>\n",
    "component_html": [
      {
        "name": "RatingStars",
        "html": "<div class=\"flex\">  {stars}.map((star, index) => (    <i class={`mr-1 ${star === 'filled' ? 'text-yellow-400' : 'text-gray-400'}`}>&#x2605;</i>  ))</div>"
      },
      {
        "name": "ReviewCard",
        "html": "<div class=\"flex mb-2\">  <p class=\"font-bold\">{reviewer_name}</p>  <RatingStars /></div>"
      },
      {
        "name": "ReviewsList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a feed of real-time updates, with each update showing the update text, timestamp, and an optional image or icon. The feed should have infinite scrolling, with new updates loading automatically as the user reaches the end of the feed.",
    "component_list": [
      {
        "name": "RealTimeFeed",
        "is_standalone": false,
        "description": "The main feed component that contains the list of updates. (Takes children) "
      },
      {
        "name": "UpdateItem",
        "is_standalone": false,
        "description": "A single update item that displays the update text, timestamp, and optional image or icon. (Takes children) "
      },
      {
        "name": "UpdateText",
        "is_standalone": true,
        "description": "The text component that displays the update text. (Standalone) "
      },
      {
        "name": "UpdateTimestamp",
        "is_standalone": true,
        "description": "The timestamp component that displays the update timestamp. (Standalone) "
      },
      {
        "name": "UpdateImage",
        "is_standalone": true,
        "description": "The image component that displays the update image or icon. (Standalone) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <RealTimeFeed>\n    <!-- Update items will be rendered here -->\n  </RealTimeFeed>\n</div>\n",
    "component_html": [
      {
        "name": "RealTimeFeed",
        "html": "<div class=\"space-y-4\">  {children}</div>"
      },
      {
        "name": "UpdateItem",
        "html": "<div class=\"flex items-start p-4\">  <UpdateImage/>  <div class=\"ml-4\">    <UpdateText/>    <UpdateTimestamp/>  </div></div>"
      },
      {
        "name": "UpdateText",
        "html": "<p class=\"text-sm\">{update_text}</p>"
      },
      {
        "name": "UpdateTimestamp",
        "html": "<p class=\"text-xs text-gray-500\">{update_timestamp}</p>"
      },
      {
        "name": "UpdateImage",
        "html": "<img src={update_image_url} alt=\"\" class=\"w-8 h-8 rounded-full mr-2\" />"
      }
    ]
  },
  {
    "description": "The UI should display a container with a revealing hover effect. When the user hovers over the container, a colored background and a heading should be revealed.",
    "component_list": [
      {
        "name": "RevealContainer",
        "is_standalone": true,
        "description": "standalone component that wraps the revealing hover effect. "
      },
      {
        "name": "RevealContent",
        "is_standalone": true,
        "description": "standalone component that displays the revealed content (heading and background). "
      }
    ],
    "main_html": "<div class=\"relative w-full h-48 md:h-64 lg:h-80 XL:h-96\">\n  <RevealContainer/>\n</div>\n",
    "component_html": [
      {
        "name": "RevealContainer",
        "html": "<div  class=\"absolute inset-0 z-10 overflow-hidden bg-transparent transition duration-300 ease-in-out hover:bg-orange-500 hover:opacity-90\">  <RevealContent/></div>"
      },
      {
        "name": "RevealContent",
        "html": "<div class=\"flex items-center justify-center h-full\">  <h2 class=\"text-2xl font-bold\">{heading_text}</h2></div>"
      }
    ]
  },
  {
    "description": "A rich text editor with a toolbar and a text area, similar to a simple word processor.",
    "component_list": [
      {
        "name": "ToolBar",
        "is_standalone": true,
        "description": "standalone, contains buttons for formatting options "
      },
      {
        "name": "Editor",
        "is_standalone": true,
        "description": "standalone, a text area where the user can input and format text "
      },
      {
        "name": "Button",
        "is_standalone": true,
        "description": "standalone, a single button in the toolbar "
      },
      {
        "name": "DropDown",
        "is_standalone": false,
        "description": "takes children, a dropdown menu in the toolbar "
      }
    ],
    "main_html": "<div className=\"flex h-screen\">\n  <ToolBar/>\n  <Editor/>\n</div>\n",
    "component_html": [
      {
        "name": "ToolBar",
        "html": "<div className=\"flex gap-2 p-2 bg-gray-200\">  <Button>Bold</Button>  <Button>Italic</Button>  <DropDown>    {children}  </DropDown>  <!-- Add more buttons and dropdowns here --></div>"
      },
      {
        "name": "Editor",
        "html": "<textarea className=\"w-full h-full p-4 border border-gray-300 rounded-md\" />"
      },
      {
        "name": "Button",
        "html": "<button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">  {button_text}</button>"
      },
      {
        "name": "DropDown",
        "html": "<div className=\"relative\">  <button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">    {dropdown_text}  </button>  <div className=\"absolute bg-white border border-gray-300 p-2 rounded-md\">    {children}  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should be a simple webpage with RTL support, which means the text direction should be from right to left. The page should have a header, a main content area, and a footer.",
    "component_list": [
      {
        "name": "PageLayout",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire page. "
      },
      {
        "name": "PageHeader",
        "is_standalone": true,
        "description": "Standalone component that displays the title of the page. "
      },
      {
        "name": "MainContent",
        "is_standalone": false,
        "description": "Takes children, displays the main content of the page. "
      },
      {
        "name": "FooterComponent",
        "is_standalone": true,
        "description": "Standalone component that displays the footer of the page. "
      }
    ],
    "main_html": "<PageLayout>\n  <PageHeader/>\n  <MainContent>\n    <ComponentName/>\n  </MainContent>\n  <FooterComponent/>\n</PageLayout>\n",
    "component_html": [
      {
        "name": "PageLayout",
        "html": "<div class=\"flex h-screen flex-col\">  {children}</div>"
      },
      {
        "name": "PageHeader",
        "html": "<header class=\"bg-orange-500 text-white py-4\">  <h1 class=\"text-3xl\">{title}</h1></header>"
      },
      {
        "name": "MainContent",
        "html": "<main class=\"flex-1 p-4\">  {children}</main>"
      },
      {
        "name": "FooterComponent",
        "html": "<footer class=\"bg-gray-200 py-4\">  <p class=\"text-sm\">{footer_text}</p></footer>"
      }
    ]
  },
  {
    "description": "The UI should display a roadmap or Gantt chart, which is a type of bar chart that illustrates a project schedule. It should show a timeline with tasks or milestones represented as horizontal bars, and their dependencies and relationships.",
    "component_list": [
      {
        "name": "RoadmapChart",
        "is_standalone": true,
        "description": "(standalone) - the main container for the roadmap chart "
      },
      {
        "name": "TaskBar",
        "is_standalone": false,
        "description": "(takes children) - represents a single task or milestone in the chart "
      },
      {
        "name": "DependencyLine",
        "is_standalone": true,
        "description": "(standalone) - represents a dependency between two tasks "
      },
      {
        "name": "TimelineHeader",
        "is_standalone": true,
        "description": "(standalone) - displays the timeline headers (e.g., days, weeks, months) "
      }
    ],
    "main_html": "<div class=\"flex h-screen w-full overflow-hidden\">\n  <TimelineHeader />\n  <div class=\"flex-1 overflow-y-auto\">\n    <RoadmapChart>\n      <TaskBar />\n      <TaskBar />\n      <TaskBar />\n      <DependencyLine />\n      <DependencyLine />\n      <!-- more TaskBar and DependencyLine components -->\n    </RoadmapChart>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "RoadmapChart",
        "html": "<div class=\"flex flex-wrap justify-center pb-4\">  {children}</div>"
      },
      {
        "name": "TaskBar",
        "html": "<div class=\"bg-blue-500 rounded-sm px-2 py-1 text-sm text-white\">  <span>{task_name}</span>  <span class=\"text-gray-500\">{task_duration} days</span></div>"
      },
      {
        "name": "DependencyLine",
        "html": "<div class=\"absolute w-1 h-full bg-gray-300\" style=\"left: {dependency_left}px; top: {dependency_top}px;\"></div>"
      },
      {
        "name": "TimelineHeader",
        "html": "<div class=\"flex justify-between mb-2\">  <span class=\"text-sm\">{start_date}</span>  <span class=\"text-sm\">{end_date}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should consist of a text input field with a dropdown list of suggested search results that appears below the input field as the user types.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "A standalone component that contains the text input field and the autocomplete list. "
      },
      {
        "name": "AutocompleteItem",
        "is_standalone": false,
        "description": "A component that represents a single suggested search result. It takes children (the text to be displayed). "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <SearchBar/>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div className=\"relative\">  <input    type=\"text\"    className=\"w-full py-2 pl-10 text-sm text-gray-700\"    placeholder=\"Search...\"  />  <div className=\"absolute w-full bg-white shadow-md\">    {children}  </div></div>"
      },
      {
        "name": "AutocompleteItem",
        "html": "<div className=\"py-2 px-4 hover:bg-gray-100\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A basic HTML5 document structure with semantic meaning, containing a header, navigation, main content area, sidebar, and footer.",
    "component_list": [
      {
        "name": "HeaderComponent",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "NavComponent",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "MainComponent",
        "is_standalone": false,
        "description": "- takes children "
      },
      {
        "name": "SidebarComponent",
        "is_standalone": true,
        "description": "- standalone "
      },
      {
        "name": "FooterComponent",
        "is_standalone": true,
        "description": "- standalone "
      }
    ],
    "main_html": "<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{document_title}</title>\n  </head>\n  <body>\n    <HeaderComponent />\n    <NavComponent />\n    <main>\n      <MainComponent>\n        <!-- Main content area -->\n      </MainComponent>\n    </main>\n    <aside>\n      <SidebarComponent />\n    </aside>\n    <FooterComponent />\n  </body>\n</html>\n",
    "component_html": [
      {
        "name": "HeaderComponent",
        "html": "<header class=\"bg-gray-200 p-4\">  <h1>{header_title}</h1></header>"
      },
      {
        "name": "NavComponent",
        "html": "<nav class=\"flex justify-between p-4 bg-gray-200\">  <ul class=\"flex\">    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_3}</a></li>  </ul></nav>"
      },
      {
        "name": "MainComponent",
        "html": "<div class=\"p-4\">{children}</div>"
      },
      {
        "name": "SidebarComponent",
        "html": "<aside class=\"bg-gray-200 p-4\">  <h2>{sidebar_title}</h2>  <ul>    <li>{sidebar_item_1}</li>    <li>{sidebar_item_2}</li>    <li>{sidebar_item_3}</li>  </ul></aside>"
      },
      {
        "name": "FooterComponent",
        "html": "<footer class=\"bg-gray-200 p-4\">  <p>&copy; {current_year} {footer_text}</p></footer>"
      }
    ]
  },
  {
    "description": "A basic SEO meta tags optimization setup with title, description, and keywords.",
    "component_list": [
      {
        "name": "MetaTitle",
        "is_standalone": true,
        "description": "- Standalone - Displays the title of the webpage. "
      },
      {
        "name": "MetaDescription",
        "is_standalone": true,
        "description": "- Standalone - Displays the meta description of the webpage. "
      },
      {
        "name": "MetaKeywords",
        "is_standalone": true,
        "description": "- Standalone - Displays the meta keywords of the webpage. "
      }
    ],
    "main_html": "<head>\n  <MetaTitle/>\n  <MetaDescription/>\n  <MetaKeywords/>\n</head>\n",
    "component_html": [
      {
        "name": "MetaTitle",
        "html": "<title>{title}</title>"
      },
      {
        "name": "MetaDescription",
        "html": "<meta name=\"description\" content=\"{description}\"/>"
      },
      {
        "name": "MetaKeywords",
        "html": "<meta name=\"keywords\" content=\"{keywords}\"/>"
      }
    ]
  },
  {
    "description": "The UI should display a beautiful gradient or shader background that can be used behind other components or as a hero section on a webpage. The background should have a mesmerizing visual effect, such as a gradient or a shader animation.",
    "component_list": [
      {
        "name": "GradientBackground",
        "is_standalone": true,
        "description": "A standalone component that displays a gradient or shader background. "
      }
    ],
    "main_html": "<div class=\"h-screen w-full\">\n  <GradientBackground />\n</div>\n",
    "component_html": [
      {
        "name": "Here",
        "html": "<div   class=\"absolute h-full w-full bg-gradient-to-r from-{start_color} to-{end_color} via-{mid_color}          opacity-{opacity} duration-{duration} ease-in-out\">  <!-- You can add more complex shader/gradient effects here --></div>"
      }
    ]
  },
  {
    "description": "The UI should display a set of social media buttons that allow users to share content on various platforms. The UI should be visually appealing and easy to use.",
    "component_list": [
      {
        "name": "SocialShareBar",
        "is_standalone": true,
        "description": "A standalone component that contains all the social media buttons. "
      },
      {
        "name": "SocialMediaButton",
        "is_standalone": false,
        "description": "A component that represents a single social media button (e.g., Facebook, Twitter, etc.). Takes children. "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <SocialShareBar />\n</div>\n",
    "component_html": [
      {
        "name": "SocialShareBar",
        "html": "<div className=\"flex justify-center\">  <SocialMediaButton><FaFacebookF /></SocialMediaButton>  <SocialMediaButton><FaTwitter /></SocialMediaButton>  <SocialMediaButton><FaLinkedinIn /></SocialMediaButton>  <!-- Add more social media buttons here --></div>"
      },
      {
        "name": "SocialMediaButton",
        "html": "<a href=\"{share_url}\" className=\"text-2xl mx-2 transition duration-300 hover:text-{primary_color}\">  {children}</a>"
      }
    ]
  },
  {
    "description": "A loading UI with a loading animation and a set of skeleton screens for a list of items. The loading animation is a simple rotating wheel and the skeleton screens display a set of rectangles with a slight animation.",
    "component_list": [
      {
        "name": "LoadingIndicator",
        "is_standalone": true,
        "description": "a standalone component that displays a rotating wheel "
      },
      {
        "name": "SkeletonScreen",
        "is_standalone": true,
        "description": "a standalone component that displays a rectangle that animates to simulate loading "
      },
      {
        "name": "SkeletonList",
        "is_standalone": false,
        "description": "a component that takes children, which are a set of `SkeletonScreen` components "
      }
    ],
    "main_html": "<div class=\"flex justify-center mt-20\">\n  <LoadingIndicator />\n  <SkeletonList>\n    <SkeletonScreen />\n    <SkeletonScreen />\n    <SkeletonScreen />\n  </SkeletonList>\n</div>\n",
    "component_html": [
      {
        "name": "LoadingIndicator",
        "html": "<div class=\"inline-block\">  <div class=\"animate-spin h-8 w-8 border-2 border-gray-50 rounded-full border-t-2 border-t-gray-200\">    <!-- rotating wheel animation -->  </div></div>"
      },
      {
        "name": "SkeletonScreen",
        "html": "<div class=\"bg-gray-100 animate-pulse h-12 w-64 rounded-lg mt-2\">  <!-- animated rectangle --></div>"
      },
      {
        "name": "SkeletonList",
        "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a social media embedded post, which includes the post content, author's profile picture, author's name, posted time, and engagement metrics (e.g., likes, comments).",
    "component_list": [
      {
        "name": "SocialMediaPost",
        "is_standalone": true,
        "description": "standalone component that displays a single social media post. "
      },
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "standalone component that displays the author's profile picture. "
      },
      {
        "name": "PostContent",
        "is_standalone": true,
        "description": "standalone component that displays the post content. "
      },
      {
        "name": "PostMeta",
        "is_standalone": true,
        "description": "standalone component that displays the posted time and engagement metrics. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <div class=\"flex gap-2\">\n    <UserProfilePicture />\n    <div>\n      <h2 class=\"text-lg font-bold\">{author_name}</h2>\n      <PostMeta />\n    </div>\n  </div>\n  <PostContent />\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img class=\"w-12 h-12 rounded-full\" src={profile_picture_url} alt={author_name} />"
      },
      {
        "name": "PostContent",
        "html": "<p class=\"text-lg\">{post_content}</p>"
      },
      {
        "name": "PostMeta",
        "html": "<div class=\"text-sm text-gray-500\">  <span>{posted_time_ago}</span>  <span>&middot;</span>  <span>{like_count} likes</span>  <span>&middot;</span>  <span>{comment_count} comments</span></div>"
      }
    ]
  },
  {
    "description": "The UI should resemble a sortable table or grid with headers and rows of data. The headers should be clickable to sort the data.",
    "component_list": [
      {
        "name": "SortableTable",
        "is_standalone": true,
        "description": "A standalone component that renders a table with sortable headers. "
      },
      {
        "name": "SortableHeader",
        "is_standalone": false,
        "description": "A component that represents a single header cell. It takes children. "
      },
      {
        "name": "SortableRow",
        "is_standalone": false,
        "description": "A component that represents a single row of data. It takes children. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <SortableTable>\n    <thead>\n      <tr>\n        <SortableHeader>Column 1</SortableHeader>\n        <SortableHeader>Column 2</SortableHeader>\n        <SortableHeader>Column 3</SortableHeader>\n      </tr>\n    </thead>\n    <tbody>\n      <SortableRow>\n        <td>{cell_data_1}</td>\n        <td>{cell_data_2}</td>\n        <td>{cell_data_3}</td>\n      </SortableRow>\n      <!-- More rows... -->\n    </tbody>\n  </SortableTable>\n</div>\n",
    "component_html": [
      {
        "name": "SortableTable",
        "html": "<table class=\"table-auto border-collapse w-full\">  {children}</table>"
      },
      {
        "name": "SortableHeader",
        "html": "<th class=\"cursor-pointer\" onclick={handleSort}>{children}</th>"
      },
      {
        "name": "SortableRow",
        "html": "<tr class=\"hover:bg-gray-100\">  {children}</tr>"
      }
    ]
  },
  {
    "description": "The UI should have a navigation bar that sticks to the top of the screen as the user scrolls.",
    "component_list": [
      {
        "name": "NavigationBar",
        "is_standalone": true,
        "description": "(standalone) - The navigation bar that sticks to the top of the screen. "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "(takes children) - An individual item in the navigation bar. "
      }
    ],
    "main_html": "<header>\n  <NavigationBar/>\n</header>\n",
    "component_html": [
      {
        "name": "NavigationBar",
        "html": "<nav class=\"fixed top-0 left-0 w-full h-16 bg-gray-800 p-4\">  <ul class=\"flex justify-between\">    <NavItem/{children}/>  </ul></nav>"
      },
      {
        "name": "NavItem",
        "html": "<li class=\"mr-4\">  <a href={`{nav_item_href}`} class=\"text-gray-200 hover:text-gray-100\">{nav_item_text}</a></li>"
      }
    ]
  },
  {
    "description": "A candlestick chart displaying a stock's historical price action, with movable date range, zoom-in/out capabilities, and interactive features like hover-over price points.",
    "component_list": [
      {
        "name": "StockChartContainer",
        "is_standalone": true,
        "description": "(standalone) - The outer container for the chart. "
      },
      {
        "name": "ChartCanvas",
        "is_standalone": false,
        "description": "(takes children) - The area where the chart is rendered. "
      },
      {
        "name": "DateRangeSelector",
        "is_standalone": true,
        "description": "(standalone) - Allows the user to select a date range for the chart. "
      },
      {
        "name": "ZoomControls",
        "is_standalone": true,
        "description": "(standalone) - Buttons to zoom in/out of the chart. "
      },
      {
        "name": "Tooltip",
        "is_standalone": false,
        "description": "(takes children) - Displays price point information on hover. "
      }
    ],
    "main_html": "<div class=\"flex h-screen w-full\">\n  <StockChartContainer>\n    <ChartCanvas>\n      <!-- chart rendering area -->\n      <ChartCanvas/>\n    </ChartCanvas>\n    <DateRangeSelector/>\n    <ZoomControls/>\n  </StockChartContainer>\n  <Tooltip/>\n</div>\n",
    "component_html": [
      {
        "name": "StockChartContainer",
        "html": "<div class=\"flex flex-col h-full w-full p-4\">  {children}</div>"
      },
      {
        "name": "ChartCanvas",
        "html": "<div class=\"flex-1 h-full w-full\">  {children}  {/* chart rendering area */}</div>"
      },
      {
        "name": "DateRangeSelector",
        "html": "<div class=\"flex items-center mb-2\">  <label for=\"start-date\">Start Date:</label>  <input type=\"date\" id=\"start-date\" value={startDate}/>  <label for=\"end-date\">End Date:</label>  <input type=\"date\" id=\"end-date\" value={endDate}/></div>"
      },
      {
        "name": "ZoomControls",
        "html": "<div class=\"flex items-center mb-2\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Zoom In  </button>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Zoom Out  </button></div>"
      },
      {
        "name": "Tooltip",
        "html": "<div class=\"absolute bg-gray-200 rounded p-2 text-sm\">  <p>Price: {price}</p>  <p>Date: {date}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should consist of a container that has a circular clipping mask, and inside the container, there is a portal that shows a blurred version of the underlying content.",
    "component_list": [
      {
        "name": "PortalContainer",
        "is_standalone": true,
        "description": "standalone component that wraps the portal content. "
      },
      {
        "name": "MaskedCircle",
        "is_standalone": true,
        "description": "standalone component that provides the circular clipping mask. "
      },
      {
        "name": "BlurredBackground",
        "is_standalone": true,
        "description": "standalone component that displays a blurred version of the underlying content. "
      }
    ],
    "main_html": "<div class=\"relative\">\n  <MaskedCircle/>\n  <PortalContainer>\n    <BlurredBackground/>\n    <!-- portal content here -->\n  </PortalContainer>\n</div>\n",
    "component_html": [
      {
        "name": "PortalContainer",
        "html": "<div class=\"absolute inset-0\">{children}</div>"
      },
      {
        "name": "MaskedCircle",
        "html": "<div class=\"absolute inset-0 rounded-full bg-white overflow-hidden\">  <div class=\"w-full h-full bg-gradient-to-r from-gray-100 to-gray-300\"></div></div>"
      },
      {
        "name": "BlurredBackground",
        "html": "<div class=\"absolute inset-0 bg-gray-200 blur-sm\">{blurred_content}</div>"
      }
    ]
  },
  {
    "description": "The UI should have a sticky header at the top of the page, a main content area in the middle, and a sticky footer at the bottom of the page. The header and footer should remain fixed at the top and bottom of the page, respectively, even when the user scrolls.",
    "component_list": [
      {
        "name": "StickyHeader",
        "is_standalone": true,
        "description": "A standalone component that represents the sticky header. "
      },
      {
        "name": "StickyFooter",
        "is_standalone": true,
        "description": "A standalone component that represents the sticky footer. "
      },
      {
        "name": "ContentArea",
        "is_standalone": false,
        "description": "A component that takes children, representing the main content area of the page. "
      }
    ],
    "main_html": "<div class=\"h-screen flex flex-col\">\n  <StickyHeader/>\n  <ContentArea>\n    <!-- main content goes here -->\n  </ContentArea>\n  <StickyFooter/>\n</div>\n",
    "component_html": [
      {
        "name": "StickyHeader",
        "html": "<header class=\"sticky top-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center\">  <!-- header content goes here -->  <h1>{header_title}</h1></header>"
      },
      {
        "name": "StickyFooter",
        "html": "<footer class=\"sticky bottom-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center\">  <!-- footer content goes here -->  <p>{copyright_text}</p></footer>"
      },
      {
        "name": "ContentArea",
        "html": "<div class=\"flex-1 overflow-y-auto p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A toggle button, a switch, and a button, each with a different style, layout, and purpose.",
    "component_list": [
      {
        "name": "ToggleSwitch",
        "is_standalone": true,
        "description": "A toggle switch component that can be either on or off. Standalone. "
      },
      {
        "name": "SwitchButton",
        "is_standalone": true,
        "description": "A switch button component that can be either enabled or disabled. Standalone. "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "A button component that can be clicked to perform an action. Standalone. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-4 p-4\">\n  <ToggleSwitch />\n  <SwitchButton />\n  <ActionButton/>\n</div>\n",
    "component_html": [
      {
        "name": "ToggleSwitch",
        "html": "<label class=\"inline-flex items-center\">  <input type=\"checkbox\" class=\"hidden\" />  <span class=\"toggle-slider round\"></span></label>"
      },
      {
        "name": "SwitchButton",
        "html": "<button class=\"bg-{color}-500 hover:bg-{color}-700 text-white hover:text-white py-2 px-4 rounded\">  {label}</button>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white hover:text-white py-2 px-4 rounded\">  {label}</button>"
      }
    ]
  },
  {
    "description": "The UI should resemble a tabbed interface with multiple panels, where each panel corresponds to a tab. The tabs should be clickable, and the corresponding panel should be displayed when a tab is clicked.",
    "component_list": [
      {
        "name": "TabControl",
        "is_standalone": true,
        "description": "(standalone): This component represents the entire tabbed interface. "
      },
      {
        "name": "Tab",
        "is_standalone": false,
        "description": "(takes children): This component represents a single tab. It takes the tab's label as a child element. "
      },
      {
        "name": "TabPanel",
        "is_standalone": false,
        "description": "(takes children): This component represents a single panel. It takes the panel's content as a child element. "
      }
    ],
    "main_html": "<TabControl>\n  <Tab>Tab 1</Tab>\n  <Tab>Tab 2</Tab>\n  <Tab>Tab 3</Tab>\n  <TabPanel><TabContent /></TabPanel>\n  <TabPanel><TabContent /></TabPanel>\n  <TabPanel><TabContent /></TabPanel>\n</TabControl>\n",
    "component_html": [
      {
        "name": "TabControl",
        "html": "<div class=\"flex flex-col\">  <div class=\"flex justify-center mb-4\">    {children}  </div>  <div class=\"p-4\">    {children}  </div></div>"
      },
      {
        "name": "Tab",
        "html": "<button class=\"px-4 py-2 rounded-md {isActive ? 'bg-gray-100' : 'bg-white'}\">  {children}</button>"
      },
      {
        "name": "TabPanel",
        "html": "<div class=\"p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A tag cloud or folksonomy is a visual representation of keywords or tags, where the size and prominence of each tag corresponds to its importance or frequency. The UI should display a collection of tags with varying font sizes and colors to convey the relative importance or frequency of each tag.",
    "component_list": [
      {
        "name": "TagCloud",
        "is_standalone": true,
        "description": "standalone component that wraps the entire tag cloud. "
      },
      {
        "name": "Tag",
        "is_standalone": true,
        "description": "standalone component representing a single tag. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <TagCloud>\n    <Tag/>\n    <Tag/>\n    <!-- Add more Tag components here -->\n  </TagCloud>\n</div>\n",
    "component_html": [
      {
        "name": "TagCloud",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "Tag",
        "html": "<a href=\"#\" class=\"text-sm mr-2 mb-2 p-1 rounded-md\">{tagName} ({tagCount})</a>"
      }
    ]
  },
  {
    "description": "A simple telephone/phone number input field with a label, input box, and optional error message.",
    "component_list": [
      {
        "name": "PhoneNumberInput",
        "is_standalone": true,
        "description": "(standalone): the entire phone number input component "
      },
      {
        "name": "InputLabel",
        "is_standalone": true,
        "description": "(standalone): the label for the input field "
      },
      {
        "name": "ErrorIndicator",
        "is_standalone": true,
        "description": "(standalone): the error message indicator "
      }
    ],
    "main_html": "<div className=\"flex flex-col\">\n  <InputLabel>{label_text}</InputLabel>\n  <PhoneNumberInput/>\n  { error ? <ErrorIndicator>{error_message}</ErrorIndicator> : null }\n</div>\n",
    "component_html": [
      {
        "name": "PhoneNumberInput",
        "html": "<input type=\"tel\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" />"
      },
      {
        "name": "InputLabel",
        "html": "<label className=\"text-sm text-gray-600\">{children}</label>"
      },
      {
        "name": "ErrorIndicator",
        "html": "<p className=\"text-xs text-red-500\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a simple text input field with an autocomplete dropdown list that appears below the input field as the user types.",
    "component_list": [
      {
        "name": "AutoCompleteInput",
        "is_standalone": false,
        "description": "- Takes children, a text input field with autocomplete functionality. "
      },
      {
        "name": "AutoCompleteListItem",
        "is_standalone": true,
        "description": "- Standalone, a single item in the autocomplete dropdown list. "
      }
    ],
    "main_html": "<div class=\"flex flex-col w-full\">\n  <AutoCompleteInput />\n  <ul class=\"absolute bg-white shadow-md w-full z-10\">\n    <!-- Autocomplete list items will be rendered here -->\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "AutoCompleteInput",
        "html": "<input   type=\"text\"   class=\"w-full pl-4 pr-4 h-10 text-sm text-gray-700\"   placeholder=\"Search...\"   value={inputValue}   onChange={handleInputChange} />"
      },
      {
        "name": "AutoCompleteListItem",
        "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <span>{itemName}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a clock icon with a dropdown list of time options. When a time option is selected, the clock icon should display the selected time.",
    "component_list": [
      {
        "name": "TimePicker",
        "is_standalone": true,
        "description": "A standalone component that displays a clock icon and a dropdown list of time options. "
      },
      {
        "name": "ClockIcon",
        "is_standalone": true,
        "description": "A standalone component that displays a clock icon. "
      },
      {
        "name": "TimeOption",
        "is_standalone": false,
        "description": "A component that takes children (the time option text) and is used to render each time option in the dropdown list. "
      }
    ],
    "main_html": "<div className=\"flex items-center\">\n  <ClockIcon />\n  <select className=\"ml-2\">\n    <TimeOption>12:00 AM</TimeOption>\n    <TimeOption>12:30 AM</TimeOption>\n    <!-- more time options here -->\n  </select>\n</div>\n",
    "component_html": [
      {
        "name": "TimePicker",
        "html": "<!-- not applicable, as it's a container component -->"
      },
      {
        "name": "ClockIcon",
        "html": "<i className=\"fas fa-clock text-gray-500 text-lg\" aria-hidden=\"true\"></i>"
      },
      {
        "name": "TimeOption",
        "html": "<option>{children}</option>"
      }
    ]
  },
  {
    "description": "A toast/notification message is a small, non-obtrusive message that appears at the top or bottom of the screen, informing the user of a particular event or action. It usually disappears after a few seconds.",
    "component_list": [
      {
        "name": "NotificationToast",
        "is_standalone": true,
        "description": "a standalone component that displays a single notification message. "
      }
    ],
    "main_html": "<div class=\"fixed bottom-0 left-0 p-4\">\n  <NotificationToast />\n</div>\n",
    "component_html": [
      {
        "name": "NotificationToast",
        "html": "<div class=\"bg-orange-100 border-l-4 border-orange-500 p-4\">  <p class=\"uppercase text-orange-500\">{notificationType}</p>  <p>{notificationMessage}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should consist of a top navigation bar and a bottom navigation bar. The top navigation bar should have a logo on the left and some navigation links on the right. The bottom navigation bar should have some navigation links.",
    "component_list": [
      {
        "name": "TopNavigationBar",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "BottomNavigationBar",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "Logo",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "Link",
        "is_standalone": false,
        "description": "(takes children) "
      }
    ],
    "main_html": "<div class=\"h-screen flex flex-col\">\n  <TopNavigationBar/>\n  <!-- main content here -->\n  <BottomNavigationBar/>\n</div>\n",
    "component_html": [
      {
        "name": "TopNavigationBar",
        "html": "<nav class=\"bg-gray-900 py-4\">  <Logo/>  <ul class=\"flex justify-end\">    <li><Link>Link 1</Link></li>    <li><Link>Link 2</Link></li>    <li><Link>Link 3</Link></li>  </ul></nav>"
      },
      {
        "name": "BottomNavigationBar",
        "html": "<nav class=\"bg-gray-900 py-4\">  <ul class=\"flex justify-between\">    <li><Link>Link 4</Link></li>    <li><Link>Link 5</Link></li>    <li><Link>Link 6</Link></li>  </ul></nav>"
      },
      {
        "name": "Logo",
        "html": "<img src={logo_url} alt=\"Logo\" class=\"h-8 w-8\"/>"
      },
      {
        "name": "Link",
        "html": "<a href={href} class=\"text-white hover:text-gray-200\">{children}</a>"
      }
    ]
  },
  {
    "description": "A tooltip or hovercard preview that appears when you hover over a trigger element, such as an icon or button. The tooltip contains a brief preview of information, with a subtle animation when appearing and disappearing.",
    "component_list": [
      {
        "name": "TooltipContainer",
        "is_standalone": true,
        "description": "Standalone component that wraps the tooltip content. "
      },
      {
        "name": "TooltipTrigger",
        "is_standalone": true,
        "description": "Standalone component that triggers the tooltip when hovered. "
      },
      {
        "name": "TooltipContent",
        "is_standalone": false,
        "description": "Component that takes children, which is the content displayed in the tooltip. "
      }
    ],
    "main_html": "<div class=\"relative\">\n  <TooltipTrigger>\n    <i class=\"fas fa-question-circle\"></i>\n  </TooltipTrigger>\n  <TooltipContainer>\n    <TooltipContent>\n      <TooltipContent/>\n    </TooltipContainer>\n  </TooltipContainer>\n</div>\n",
    "component_html": [
      {
        "name": "TooltipContainer",
        "html": "<div class=\"absolute z-10 bg-white rounded shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "TooltipTrigger",
        "html": "<span class=\"cursor-pointer\">  {children}</span>"
      },
      {
        "name": "TooltipContent",
        "html": "<p>{preview_text}</p>"
      }
    ]
  },
  {
    "description": "A simple page with a header, a section for a QR code, and a section for a 2FA code.",
    "component_list": [
      {
        "name": "AuthHeader",
        "is_standalone": true,
        "description": "- standalone (header for the 2FA page) "
      },
      {
        "name": "QrCodeSection",
        "is_standalone": true,
        "description": "- standalone (section for displaying the QR code) "
      },
      {
        "name": "TwoFactorCode",
        "is_standalone": true,
        "description": "- standalone (section for displaying the 2FA code) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <AuthHeader/>\n  <div class=\"flex justify-center mb-4\">\n    <QrCodeSection/>\n  </div>\n  <div class=\"mb-4\">\n    <TwoFactorCode/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "AuthHeader",
        "html": "<header class=\"mb-4\">  <h1 class=\"text-2xl font-bold\">Two-Factor Authentication</h1></header>"
      },
      {
        "name": "QrCodeSection",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <img src=\"{qr_code_image_url}\" alt=\"QR Code\" class=\"w-64 h-64 mx-auto\"/>  <p class=\"text-sm text-gray-600\">{qr_code_instructions}</p></section>"
      },
      {
        "name": "TwoFactorCode",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg font-bold\">Your 2FA Code</h2>  <p class=\"text-2xl\">{two_factor_code}</p>  <p class=\"text-sm text-gray-600\">{two_factor_code_instructions}</p></section>"
      }
    ]
  },
  {
    "description": "The UI should display different typography and font styles, showcasing various font sizes, weights, and styles.",
    "component_list": [
      {
        "name": "TypographyExample",
        "is_standalone": true,
        "description": "a standalone component displaying different typography and font styles. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <TypographyExample />\n</div>\n",
    "component_html": [
      {
        "name": "The",
        "html": "<div class=\"flex flex-wrap gap-4 mb-4\">  <!-- Font sizes -->  <div class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">    <h1 class=\"text-3xl\">{headline}</h1>    <p class=\"text-lg\">{paragraph}</p>    <p class=\"text-sm\">{small_text}</p>  </div>  <!-- Font weights -->  <div class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">    <h2 class=\"font-bold\">{bold_headline}</h2>    <p class=\"font-semibold\">{semibold_paragraph}</p>    <p class=\"font-light\">{light_paragraph}</p>  </div>  <!-- Font styles -->  <div class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">    <p class=\"italic\">{italic_paragraph}</p>    <p class=\"uppercase\">{uppercase_paragraph}</p>    <p class=\"lowercase\">{lowercase_paragraph}</p>  </div></div>"
      }
    ]
  },
  {
    "description": "A simple webpage with a heading, a paragraph of text, and a button that changes the text when clicked.",
    "component_list": [
      {
        "name": "PageHeader",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "PageContent",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<div class=\"h-screen flex flex-col justify-center items-center\">\n  <PageHeader/>\n  <PageContent>\n    <p id=\"text\">{initial_text}</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Click me!</button>\n  </PageContent>\n</div>\n",
    "component_html": [
      {
        "name": "PageHeader",
        "html": "<header class=\"mb-4\">  <h1 class=\"text-3xl font-bold\">Unobtrusive JavaScript</h1></header>"
      },
      {
        "name": "PageContent",
        "html": "<div class=\"p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A horizontal progress bar that fills up as the upload progresses, with a percentage indicator.",
    "component_list": [
      {
        "name": "ProgressBar",
        "is_standalone": true,
        "description": "a standalone component that displays the progress of the upload "
      },
      {
        "name": "ProgressIndicator",
        "is_standalone": true,
        "description": "a standalone component that displays the percentage of the upload "
      }
    ],
    "main_html": "<div className=\"flex items-center gap-2\">\n  <ProgressBar />\n  <ProgressIndicator />\n</div>\n",
    "component_html": [
      {
        "name": "ProgressBar",
        "html": "<div className=\"bg-gray-200 h-2 rounded-lg overflow-hidden\">  <div className=\"bg-blue-500 h-2 rounded-lg\" style={{ width: `${progressPercentage}%` }} /></div>"
      },
      {
        "name": "ProgressIndicator",
        "html": "<p className=\"text-sm\">{progressPercentage} %</p>"
      }
    ]
  },
  {
    "description": "The UI should consist of a vertical navigation menu with tabs, where each tab has a label and an optional icon. When a tab is selected, the corresponding content should be displayed.",
    "component_list": [
      {
        "name": "VerticalTabs",
        "is_standalone": true,
        "description": "a standalone component that wraps the entire vertical tabs navigation. "
      },
      {
        "name": "Tab",
        "is_standalone": false,
        "description": "a component that represents an individual tab, takes children (the content to be displayed when the tab is selected). "
      },
      {
        "name": "TabLabel",
        "is_standalone": true,
        "description": "a component that displays the label of a tab, standalone. "
      }
    ],
    "main_html": "<div class=\"h-screen flex\">\n  <VerticalTabs>\n    <Tab>\n      <TabLabel>Tab 1</TabLabel>\n      {children}\n    </Tab>\n    <Tab>\n      <TabLabel>Tab 2</TabLabel>\n      {children}\n    </Tab>\n    <!-- Add more tabs here -->\n  </VerticalTabs>\n</div>\n",
    "component_html": [
      {
        "name": "VerticalTabs",
        "html": "<div class=\"w-1/5 bg-gray-100 h-full p-4\">  <ul class=\"list-none mb-4\">    {children}  </ul>  <div class=\"h-full overflow-y-auto p-4\">    <!-- this is where the content of the selected tab will be rendered -->  </div></div>"
      },
      {
        "name": "Tab",
        "html": "<li class=\"mb-2\">  <a class=\"block p-2 hover:bg-gray-200\">    {children}  </a></li>"
      },
      {
        "name": "TabLabel",
        "html": "<span class=\"mr-2\">{label}</span><!-- optional icon -->{icon && <span class=\"inline-block w-4 h-4\">{icon}</span>}"
      }
    ]
  },
  {
    "description": "The UI should display a list of items that can be scrolled through, with only a subset of items rendered at a time to improve performance.",
    "component_list": [
      {
        "name": "VirtualScroller",
        "is_standalone": true,
        "description": "(standalone): The outermost component that manages the scrolling and rendering of items. "
      },
      {
        "name": "VirtualItem",
        "is_standalone": false,
        "description": "(takes children): An individual item in the list, which can contain any content. "
      }
    ],
    "main_html": "<VirtualScroller>\n  <VirtualItem>Item 1</VirtualItem>\n  <VirtualItem>Item 2</VirtualItem>\n  <!-- ... -->\n  <VirtualItem>Item {item_count}</VirtualItem>\n</VirtualScroller>\n",
    "component_html": [
      {
        "name": "VirtualScroller",
        "html": "<div class=\"h-screen overflow-y-auto\">  {children}</div>"
      },
      {
        "name": "VirtualItem",
        "html": "<div class=\"py-2 px-4 border-b\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a microphone icon and a circle that represents the audio feedback. The microphone icon should be surrounded by a circle that changes color based on the audio feedback level. The UI should also display a text that indicates the audio feedback level.",
    "component_list": [
      {
        "name": "MicrophoneIcon",
        "is_standalone": true,
        "description": "A standalone component that displays a microphone icon. "
      },
      {
        "name": "AudioFeedbackCircle",
        "is_standalone": true,
        "description": "A standalone component that displays a circle that changes color based on the audio feedback level. "
      },
      {
        "name": "AudioFeedbackText",
        "is_standalone": true,
        "description": "A standalone component that displays the audio feedback level. "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <div class=\"relative\">\n    <MicrophoneIcon />\n    <AudioFeedbackCircle />\n  </div>\n  <AudioFeedbackText />\n</div>\n",
    "component_html": [
      {
        "name": "MicrophoneIcon",
        "html": "<i class=\"fas fa-microphone text-lg text-gray-500\" />"
      },
      {
        "name": "AudioFeedbackCircle",
        "html": "<div class={`w-12 h-12 bg-${audio_feedback_level_color} rounded-full`} />"
      },
      {
        "name": "AudioFeedbackText",
        "html": "<p class=\"text-sm text-gray-500\">{audio_feedback_level_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a webcam/video camera interface with a live feed, a capture button, and a toggle switch to switch between the front and rear cameras.",
    "component_list": [
      {
        "name": "WebcamFeed",
        "is_standalone": true,
        "description": "(standalone) - displays the live webcam feed "
      },
      {
        "name": "CaptureButton",
        "is_standalone": true,
        "description": "(standalone) - a button to capture a photo/video "
      },
      {
        "name": "CameraToggle",
        "is_standalone": true,
        "description": "(standalone) - a toggle switch to switch between the front and rear cameras "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center h-screen\">\n  <WebcamFeed />\n  <div class=\"flex justify-center mb-4\">\n    <CaptureButton />\n    <CameraToggle />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "WebcamFeed",
        "html": "<div class=\"w-full h-full\">  <video class=\"w-full h-full object-cover\" id=\"video\"></video></div>"
      },
      {
        "name": "CaptureButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Capture</button>"
      },
      {
        "name": "CameraToggle",
        "html": "<label class=\"switch\">  <input type=\"checkbox\" />  <span class=\"slider round\"></span>  Front/Rear</label>"
      }
    ]
  },
  {
    "description": "A real-time updates panel that displays a list of updates, with each update showing a timestamp, a username, and a message.",
    "component_list": [
      {
        "name": "RealTimeUpdatesPanel",
        "is_standalone": true,
        "description": "standalone component that contains the entire UI "
      },
      {
        "name": "UpdateList",
        "is_standalone": true,
        "description": "standalone component that contains a list of updates "
      },
      {
        "name": "UpdateItem",
        "is_standalone": false,
        "description": "takes children (timestamp, username, message) "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 mt-4\">\n  <RealTimeUpdatesPanel>\n    <UpdateList>\n      <UpdateItem />\n      <!-- Repeat UpdateItem for each update -->\n    </UpdateList>\n  </RealTimeUpdatesPanel>\n</div>\n",
    "component_html": [
      {
        "name": "RealTimeUpdatesPanel",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  <h2 className=\"text-lg font-bold mb-2\">Real-time Updates</h2>  {children}</div>"
      },
      {
        "name": "UpdateList",
        "html": "<ul className=\"divide-y divide-gray-200\">  {children}</ul>"
      },
      {
        "name": "UpdateItem",
        "html": "<li className=\"py-4\">  <p className=\"text-gray-600\">{timestamp}</p>  <p><span className=\"font-bold\">{username}</span> {message}</p></li>"
      }
    ]
  },
  {
    "description": "A simple WYSIWYG/Rich Text Editor with a toolbar and a text area to edit and format text. The toolbar should have basic formatting options such as bold, italic, underline, font size, font family, and text alignment.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "(standalone) - The top bar with formatting options. "
      },
      {
        "name": "Editor",
        "is_standalone": false,
        "description": "(takes children) - The text area where the user can edit and format text. "
      },
      {
        "name": "ButtonGroup",
        "is_standalone": false,
        "description": "(takes children) - A group of buttons in the toolbar. "
      },
      {
        "name": "ToggleButton",
        "is_standalone": true,
        "description": "(standalone) - A single button in the toolbar that toggles a formatting option. "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <Editor>\n    {/* text content will be rendered here */}\n  </Editor>\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<div class=\"flex justify-center bg-gray-200 p-2\">  <ButtonGroup>    <ToggleButton title=\"Bold\" icon=\"bold\" />    <ToggleButton title=\"Italic\" icon=\"italic\" />    <ToggleButton title=\"Underline\" icon=\"underline\" />  </ButtonGroup>  <ButtonGroup>    <select class=\"px-2 py-1\">      <option value=\"12\">Font Size</option>      <option value=\"14\">14</option>      <option value=\"16\">16</option>    </select>    <select class=\"px-2 py-1\">      <option value=\"Arial\">Arial</option>      <option value=\"Helvetica\">Helvetica</option>      <option value=\"Times New Roman\">Times New Roman</option>    </select>  </ButtonGroup>  <ButtonGroup>    <ToggleButton title=\"Left Align\" icon=\"align-left\" />    <ToggleButton title=\"Center Align\" icon=\"align-center\" />    <ToggleButton title=\"Right Align\" icon=\"align-right\" />  </ButtonGroup></div>"
      },
      {
        "name": "Editor",
        "html": "<textarea class=\"w-full h-full p-4 overflow-y-auto\">{children}</textarea>"
      },
      {
        "name": "ButtonGroup",
        "html": "<div class=\"flex items-center\">  {children}</div>"
      },
      {
        "name": "ToggleButton",
        "html": "<button class=\"px-2 py-1 rounded\" title={title}>  <i class={`fas fa-{icon}`} /></button>"
      }
    ]
  },
  {
    "description": "A calendar picker that allows users to select a year and month. The UI consists of a header with navigation buttons (<, >) and a dropdown to select the year. Below the header is a grid of months (Jan - Dec) with the current month highlighted.",
    "component_list": [
      {
        "name": "YearMonthPicker",
        "is_standalone": true,
        "description": "(standalone): The top-level component that contains the entire UI. "
      },
      {
        "name": "PickerHeader",
        "is_standalone": true,
        "description": "(standalone): The header component with navigation buttons and a year dropdown. "
      },
      {
        "name": "YearDropdown",
        "is_standalone": true,
        "description": "(standalone): A dropdown component to select the year. "
      },
      {
        "name": "MonthGrid",
        "is_standalone": true,
        "description": "(standalone): A grid component that displays the 12 months of the year. "
      },
      {
        "name": "MonthButton",
        "is_standalone": false,
        "description": "(takes children): A button component that represents a single month. "
      }
    ],
    "main_html": "<div class=\"flex flex-col\">\n  <PickerHeader>\n    <YearDropdown />\n  </PickerHeader>\n  <MonthGrid>\n    <MonthButton>Jan</MonthButton>\n    <MonthButton>Feb</MonthButton>\n    <!-- ... -->\n    <MonthButton>Dec</MonthButton>\n  </MonthGrid>\n</div>\n",
    "component_html": [
      {
        "name": "YearMonthPicker",
        "html": "<div class=\"bg-white shadow-md p-4 rounded\">  {children}</div>"
      },
      {
        "name": "PickerHeader",
        "html": "<div class=\"flex justify-between mb-2\">  <button class=\"text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\" disabled={isMinYear}><</button>  <YearDropdown />  <button class=\"text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\" disabled={isMaxYear}>></button></div>"
      },
      {
        "name": "YearDropdown",
        "html": "<select class=\"bg-white border border-gray-300 rounded py-2 px-4\">  <option value=\"{year}\">{year}</option>  <!-- other options --></select>"
      },
      {
        "name": "MonthGrid",
        "html": "<div class=\"grid grid-cols-3 gap-2\">  {children}</div>"
      },
      {
        "name": "MonthButton",
        "html": "<button class=\"bg-white hover:bg-gray-100 transition duration-300 ease-in-out rounded py-2 px-4\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A responsive YouTube or Vimeo video embed with a dark background and a play button overlay.",
    "component_list": [
      {
        "name": "VideoEmbedContainer",
        "is_standalone": true,
        "description": "standalone, wraps the entire embed "
      },
      {
        "name": "VideoEmbedOverlay",
        "is_standalone": true,
        "description": "standalone, contains the play button "
      },
      {
        "name": "VideoEmbed",
        "is_standalone": false,
        "description": "takes children, contains the iframe and allows for responsive sizing "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <VideoEmbedContainer>\n    <VideoEmbed>\n      <iframe src={video_url} frameborder=\"0\" allowfullscreen></iframe>\n      <VideoEmbedOverlay />\n    </VideoEmbed>\n  </VideoEmbedContainer>\n</div>\n",
    "component_html": [
      {
        "name": "VideoEmbedContainer",
        "html": "<div class=\"bg-gray-800 overflow-hidden relative\">  {children}</div>"
      },
      {
        "name": "VideoEmbedOverlay",
        "html": "<div class=\"absolute inset-0 flex justify-center items-center\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Play  </button></div>"
      },
      {
        "name": "VideoEmbed",
        "html": "<div class=\"aspect-w-16 aspect-h-9\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should demonstrate an example of z-index and stacking contexts in CSS. It should consist of multiple overlapping rectangles with different z-indices.",
    "component_list": [
      {
        "name": "Container",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire UI. "
      },
      {
        "name": "Rectangle",
        "is_standalone": true,
        "description": "Standalone component that represents a single rectangle with a specific z-index. "
      }
    ],
    "main_html": "<Container>\n  <!-- Red rectangle with z-index 1 -->\n  <Rectangle z={1} />\n  <!-- Green rectangle with z-index 2 -->\n  <Rectangle z={2} />\n  <!-- Blue rectangle with z-index 3 -->\n  <Rectangle z={3} />\n</Container>\n",
    "component_html": [
      {
        "name": "Containerjs",
        "html": "<div className=\"h-screen w-screen flex justify-center items-center\">  {children}</div>"
      },
      {
        "name": "Rectanglejs",
        "html": "<div  className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${zIndex === 1 ? 'bg-red-500' : zIndex === 2 ? 'bg-green-500' : 'bg-blue-500'}`}  style={{ zIndex: zIndex }}>  <!-- Rectangle content -->  <p>Rectangle with z-index {zIndex}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive video player with playback controls that can be used to play, pause, and control the video. The video player should take up the full width of its container and have a 16:9 aspect ratio. The playback controls should be displayed at the bottom of the video player and include buttons for play/pause, previous, next, and a seek bar.",
    "component_list": [
      {
        "name": "VideoPlayer",
        "is_standalone": true,
        "description": "A standalone component that renders a video player with playback controls. "
      },
      {
        "name": "PlaybackControls",
        "is_standalone": true,
        "description": "A standalone component that renders the playback controls for the video player. "
      },
      {
        "name": "PlayPauseButton",
        "is_standalone": true,
        "description": "A standalone component that renders a button to play or pause the video. "
      },
      {
        "name": "PreviousButton",
        "is_standalone": true,
        "description": "A standalone component that renders a button to go to the previous video. "
      },
      {
        "name": "NextButton",
        "is_standalone": true,
        "description": "A standalone component that renders a button to go to the next video. "
      },
      {
        "name": "SeekBar",
        "is_standalone": true,
        "description": "A standalone component that renders a seek bar to control the video playback. "
      }
    ],
    "main_html": "<div className=\"container mx-auto max-w-md pt-4 pb-8\">\n  <VideoPlayer>\n    <PlaybackControls>\n      <PlayPauseButton/>\n      <PreviousButton/>\n      <NextButton/>\n      <SeekBar/>\n    </PlaybackControls>\n  </VideoPlayer>\n</div>\n",
    "component_html": [
      {
        "name": "VideoPlayer",
        "html": "<div className=\"video-player w-full h-0 pb-56.25% relative\">  <video src={video_url} className=\"w-full h-full absolute top-0 left-0\"></video>  {children}</div>"
      },
      {
        "name": "PlaybackControls",
        "html": "<div className=\"playback-controls flex justify-between py-4\">  {children}</div>"
      },
      {
        "name": "PlayPauseButton",
        "html": "<button className=\"play-pause-button bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">  {is_playing ? 'Pause' : 'Play'}</button>"
      },
      {
        "name": "PreviousButton",
        "html": "<button className=\"previous-button bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">  Previous</button>"
      },
      {
        "name": "NextButton",
        "html": "<button className=\"next-button bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">  Next</button>"
      },
      {
        "name": "SeekBar",
        "html": "<div className=\"seek-bar w-full h-2 bg-gray-200 rounded\">  <div className=\"seek-bar-filled\" style={`width: ${seek_bar_width}%`}></div></div>"
      }
    ]
  },
  {
    "description": "A simple search bar with a search input and a search button. The search bar should be centered on the page and should be responsive.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "A standalone component that contains a search input and a search button. "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "A standalone component that renders an input field. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "A standalone component that renders a button. "
      }
    ],
    "main_html": "<div class=\"flex justify-center pt-4\">\n  <SearchBar />\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center bg-white rounded-md shadow-md p-2\">  <SearchInput />  <SearchButton /></div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"search\" class=\"w-full pl-2 py-2 rounded-md\" placeholder=\"Search for videos\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md\">Search</button>"
      }
    ]
  },
  {
    "description": "The UI should be a video upload tool with encoding options. It should have a file input field, a dropdown menu for selecting the encoding preset, a checkbox for enabling watermarks, and a submit button. The UI should be responsive, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "UploadInput",
        "is_standalone": true,
        "description": "A standalone component for the file input field. "
      },
      {
        "name": "EncodingPresetSelect",
        "is_standalone": true,
        "description": "A standalone component for the dropdown menu for selecting the encoding preset. "
      },
      {
        "name": "WatermarkCheckbox",
        "is_standalone": true,
        "description": "A standalone component for the checkbox for enabling watermarks. "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "A standalone component for the submit button. "
      },
      {
        "name": "VideoUploadForm",
        "is_standalone": false,
        "description": "A component that takes children, which is the parent component that wraps all the other components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <VideoUploadForm>\n    <UploadInput />\n    <EncodingPresetSelect />\n    <WatermarkCheckbox />\n    <SubmitButton />\n  </VideoUploadForm>\n</div>\n",
    "component_html": [
      {
        "name": "UploadInput",
        "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-upload\" class=\"block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\">  <label for=\"video-upload\" class=\"sr-only\">Select a video file</label></div>"
      },
      {
        "name": "EncodingPresetSelect",
        "html": "<div class=\"mb-4\">  <select id=\"encoding-preset\" class=\"block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\">    <option value=\"\">{select_preset}</option>    <!-- more options will be generated dynamically -->  </select>  <label for=\"encoding-preset\" class=\"sr-only\">Select an encoding preset</label></div>"
      },
      {
        "name": "WatermarkCheckbox",
        "html": "<div class=\"mb-4\">  <input type=\"checkbox\" id=\"watermark\" class=\"w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:ring-blue-500\">  <label for=\"watermark\" class=\"ml-2 text-sm text-gray-600\">Enable watermark</label></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Upload Video</button>"
      },
      {
        "name": "VideoUploadForm",
        "html": "<!-- this component will wrap all the other components --><div class=\"p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first design that displays a user's profile information and their video history. The profile information should include a profile picture, username, bio, and a list of video titles with timestamps.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile information (profile picture, username, bio) "
      },
      {
        "name": "VideoHistoryList",
        "is_standalone": false,
        "description": "component that takes children, displaying a list of video titles with timestamps "
      },
      {
        "name": "VideoHistoryItem",
        "is_standalone": true,
        "description": "standalone component that displays a single video title with timestamp "
      }
    ],
    "main_html": "<!-- Profile container -->\n<div className=\"max-w-md mx-auto p-4\">\n  <!-- Profile card -->\n  <UserProfileCard />\n  \n  <!-- Video history section -->\n  <h2 className=\"text-lg font-bold mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be rendered here -->\n  </VideoHistoryList>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<!-- Profile card container --><div className=\"bg-white p-4 rounded shadow-md\">  <!-- Profile picture -->  <img src={profile_picture_url} alt=\"Profile picture\" className=\"w-24 h-24 rounded-full mb-2\" />  <!-- Username and bio -->  <h3 className=\"text-lg font-bold\">{username}</h3>  <p>{bio}</p></div>"
      },
      {
        "name": "VideoHistoryList",
        "html": "<!-- Video history list container --><ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "VideoHistoryItem",
        "html": "<!-- Video history item container --><li className=\"flex items-center mb-2\">  <!-- Video title and timestamp -->  <p>{video_title} ({video_timestamp})</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive comment section that displays a list of comments with the video title, avatar, username, and comment text. It should be accessible and have a clean design.",
    "component_list": [
      {
        "name": "CommentList",
        "is_standalone": true,
        "description": "standalone, displays a list of comments "
      },
      {
        "name": "CommentItem",
        "is_standalone": false,
        "description": "takes children, displays a single comment "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "standalone, displays the user's avatar "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "standalone, displays the comment text "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Comments</h2>\n  <CommentList>\n    <CommentItem>\n      <Avatar />\n      <div className=\"flex flex-col\">\n        <div className=\"flex justify-between mb-2\">\n          <span className=\"font-bold\">{username}</span>\n          <span className=\"text-sm\">{posted_on}</span>\n        </div>\n        <CommentText />\n      </div>\n    </CommentItem>\n  </CommentList>\n</div>\n",
    "component_html": [
      {
        "name": "CommentList",
        "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "CommentItem",
        "html": "<li className=\"py-4 border-b border-gray-200\">  {children}</li>"
      },
      {
        "name": "Avatar",
        "html": "<img src={avatar_url} className=\"w-8 h-8 rounded-full mr-2\" alt=\"User Avatar\" />"
      },
      {
        "name": "CommentText",
        "html": "<p className=\"text-sm\">{comment_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive video category browser with filtering capabilities. It should display a list of video categories with thumbnails, titles, and a brief description. The filtering functionality should allow users to search for specific categories.",
    "component_list": [
      {
        "name": "VideoCategoryBrowser",
        "is_standalone": true,
        "description": "The main component that contains the filtering input and the video category list. (Standalone) "
      },
      {
        "name": "VideoCategory",
        "is_standalone": false,
        "description": "A single video category item that displays the thumbnail, title, and description. (Takes children) "
      },
      {
        "name": "VideoCategoryList",
        "is_standalone": false,
        "description": "A list of video categories. (Takes children) "
      },
      {
        "name": "FilterInput",
        "is_standalone": true,
        "description": "A search input to filter video categories. (Standalone) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <FilterInput />\n  <VideoCategoryList>\n    <VideoCategory />\n    <!-- Repeat VideoCategory component for each category -->\n  </VideoCategoryList>\n</div>\n",
    "component_html": [
      {
        "name": "VideoCategoryBrowser",
        "html": "<div class=\"video-category-browser flex flex-col h-screen\">  {children}</div>"
      },
      {
        "name": "VideoCategory",
        "html": "<div class=\"video-category mb-4\">  <img src=\"{thumbnail_url}\" alt=\"{category_name}\" class=\"w-24 h-24 rounded-lg\" />  <h3 class=\"text-lg\">{category_name}</h3>  <p class=\"text-gray-600\">{category_description}</p></div>"
      },
      {
        "name": "VideoCategoryList",
        "html": "<ul class=\"video-category-list list-none\">  {children}</ul>"
      },
      {
        "name": "FilterInput",
        "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search video categories\" />"
      }
    ]
  },
  {
    "description": "A responsive carousel showcasing recommended videos, with a horizontal scrollable list of video thumbnails, titles, and brief descriptions.",
    "component_list": [
      {
        "name": "RecommendedVideosCarousel",
        "is_standalone": true,
        "description": "standalone "
      },
      {
        "name": "VideoCard",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto py-4\">\n  <h2 class=\"text-2xl font-bold\">Recommended Videos</h2>\n  <RecommendedVideosCarousel />\n</section>\n",
    "component_html": [
      {
        "name": "RecommendedVideosCarousel",
        "html": "<div class=\"flex overflow-x-auto pb-4\">  <VideoCard />  <VideoCard />  <VideoCard />  <!-- more VideoCard components --></div>"
      },
      {
        "name": "VideoCard",
        "html": "<div class=\"w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96 xl:w-112 xl:h-112 inline-block mr-4 mb-4\">  <img src=\"{video_thumbnail_url}\" alt=\"{video_title}\" class=\"w-full h-full object-cover rounded-lg\" />  <div class=\"px-4 py-2 bg-white rounded-b-lg\">    <h3 class=\"text-lg font-bold\">{video_title}</h3>    <p class=\"text-sm\">{video_description}</p>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should have a horizontal row of social media sharing buttons for a video, with each button representing a different platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive and adaptable to different screen sizes.",
    "component_list": [
      {
        "name": "SocialMediaButton",
        "is_standalone": true,
        "description": "a standalone component representing a single social media platform's sharing button. "
      },
      {
        "name": "SocialMediaShareBar",
        "is_standalone": false,
        "description": "a component that takes children, which is the container for all social media buttons. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <SocialMediaShareBar>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <!-- add more social media buttons here -->\n  </SocialMediaShareBar>\n</div>\n",
    "component_html": [
      {
        "name": "SocialMediaButton",
        "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\">  <img src=\"{icon_url}\" alt=\"{platform_name}\" class=\"w-8 h-8 mr-2\">  <span class=\"text-sm\">{platform_name}</span></a>"
      },
      {
        "name": "SocialMediaShareBar",
        "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display video analytics data for creators, including metrics such as views, engagement, and earnings. The dashboard should be responsive, mobile-friendly, and easy to navigate.",
    "component_list": [
      {
        "name": "VideoAnalyticsDashboard",
        "is_standalone": true,
        "description": "The main container component that wraps all the other components (standalone) "
      },
      {
        "name": "MetricCard",
        "is_standalone": true,
        "description": "A card component that displays a single metric (e.g. views, engagement) with a label and value (standalone) "
      },
      {
        "name": "EarningsChart",
        "is_standalone": true,
        "description": "A chart component that displays earnings data over time (standalone) "
      },
      {
        "name": "VideoList",
        "is_standalone": false,
        "description": "A list component that displays a list of videos with their respective metrics (takes children) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Analytics Dashboard</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <MetricCard/>\n    <MetricCard/>\n    <MetricCard/>\n  </div>\n  <div class=\"mt-6\">\n    <EarningsChart/>\n  </div>\n  <div class=\"mt-6\">\n    <h2 class=\"text-2xl font-bold mb-2\">Video List</h2>\n    <VideoList>\n      <!-- Video list items will be rendered here -->\n    </VideoList>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "MetricCard",
        "html": "<div class=\"bg-white shadow-md p-4 rounded\">  <h3 class=\"text-lg font-bold\">{metric_label}</h3>  <p class=\"text-2xl\">{metric_value}</p></div>"
      },
      {
        "name": "EarningsChart",
        "html": "<div class=\"bg-white shadow-md p-4 rounded\">  <h3 class=\"text-lg font-bold\">Earnings Over Time</h3>  <canvas id=\"earnings-chart\" width=\"400\" height=\"200\"></canvas></div>"
      },
      {
        "name": "VideoList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "VideoListItem",
        "html": "<li class=\"py-4 border-b border-gray-200\">  <h4 class=\"text-lg font-bold\">{video_title}</h4>  <p class=\"text-gray-600\">{video_views} views</p>  <p class=\"text-gray-600\">{video_engagement} engagement</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a subscription management section for channel updates, allowing users to manage their subscription status. It should have a clear and responsive design, with a toggle button to switch between subscription states.",
    "component_list": [
      {
        "name": "SubscriptionManagement",
        "is_standalone": true,
        "description": "Standalone component that renders a subscription management section. "
      },
      {
        "name": "SubscriptionToggle",
        "is_standalone": true,
        "description": "Standalone component that renders a toggle button to switch between subscription states. "
      },
      {
        "name": "ChannelInfo",
        "is_standalone": true,
        "description": "Standalone component that renders channel information, such as the channel name and description. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded-md shadow-md\">\n  <SubscriptionManagement>\n    <ChannelInfo/>\n    <SubscriptionToggle/>\n    <p class=\"text-sm text-gray-600\">{subscription_status}</p>\n  </SubscriptionManagement>\n</div>\n",
    "component_html": [
      {
        "name": "SubscriptionManagement",
        "html": "<div class=\"flex flex-col mb-4\">  {children}</div>"
      },
      {
        "name": "SubscriptionToggle",
        "html": "<label class=\"switch\">  <input type=\"checkbox\" aria-label=\"Toggle subscription\" />  <span class=\"slider round\"></span></label>"
      },
      {
        "name": "ChannelInfo",
        "html": "<div>  <h2 class=\"text-lg font-bold\">{channel_name}</h2>  <p class=\"text-sm text-gray-600\">{channel_description}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should have a video player on the left side, taking most of the screen, and a real-time chat on the right side. The chat should have a input field at the bottom for users to type and send messages.",
    "component_list": [
      {
        "name": "LiveStreamPlayer",
        "is_standalone": true,
        "description": "A standalone component that displays the live streaming video. "
      },
      {
        "name": "ChatWindow",
        "is_standalone": false,
        "description": "A component that takes children, rendering a list of chat messages. "
      },
      {
        "name": "ChatMessage",
        "is_standalone": true,
        "description": "A standalone component that displays a single chat message. "
      },
      {
        "name": "ChatInput",
        "is_standalone": true,
        "description": "A standalone component that includes a text input field and a send button for users to type and send messages. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <div class=\"flex-1\">\n    <LiveStreamPlayer />\n  </div>\n  <div class=\"w-64 md:w-96 lg:w-128 xl:w-160 p-4\">\n    <ChatWindow>\n      <!-- chat messages will be rendered here -->\n    </ChatWindow>\n    <ChatInput />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "LiveStreamPlayer",
        "html": "<div class=\"aspect-video w-full\">  <video src=\"{stream_url}\" width=\"100%\" height=\"100%\"></video></div>"
      },
      {
        "name": "ChatWindow",
        "html": "<div class=\"overflow-y-auto h-full p-4\">  {children}</div>"
      },
      {
        "name": "ChatMessage",
        "html": "<div class=\"py-2 px-4\">  <span class=\"text-gray-500\">{username}</span>  <span class=\"ml-2\">{message}</span></div>"
      },
      {
        "name": "ChatInput",
        "html": "<div class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Send  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should be a simple form with two input fields: one for the video title and one for video tags. The form should be responsive, with the input fields stacked on top of each other on mobile devices and side by side on larger screens. The input fields should have clear and descriptive labels, and the form should be easily accessible and readable.",
    "component_list": [
      {
        "name": "VideoMetadataEditor",
        "is_standalone": true,
        "description": "a standalone component that contains the entire form. "
      },
      {
        "name": "FormField",
        "is_standalone": false,
        "description": "a component that wraps a single input field, with a label and an input element. Takes children (the input element). "
      },
      {
        "name": "InputLabel",
        "is_standalone": true,
        "description": "a component that displays the label for an input field. Standalone. "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "a component that displays a single input element. Standalone. "
      }
    ],
    "main_html": "<VideoMetadataEditor>\n  <FormField>\n    <InputLabel>Video Title</InputLabel>\n    <InputField type=\"text\" id=\"video-title\" />\n  </FormField>\n  <FormField>\n    <InputLabel>Tags (comma separated)</InputLabel>\n    <InputField type=\"text\" id=\"video-tags\" />\n  </FormField>\n</VideoMetadataEditor>\n",
    "component_html": [
      {
        "name": "VideoMetadataEditor",
        "html": "<div class=\"flex flex-wrap max-w-md mx-auto p-4\">  {children}</div>"
      },
      {
        "name": "FormField",
        "html": "<div class=\"flex flex-col mb-4\">  {children}</div>"
      },
      {
        "name": "InputLabel",
        "html": "<label class=\"block mb-2\">{label}</label>"
      },
      {
        "name": "InputField",
        "html": "<input class=\"block w-full p-2 pl-10 text-sm text-gray-700\" type=\"{type}\" id=\"{id}\" />"
      }
    ]
  },
  {
    "description": "The UI should be a responsive dashboard that displays various content moderation tools for admin teams. It should have a navigation sidebar, a header, and a main content area.",
    "component_list": [
      {
        "name": "SidebarNav",
        "is_standalone": true,
        "description": "Standalone component that displays a navigation menu. "
      },
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "Standalone component that displays the dashboard header. "
      },
      {
        "name": "ContentModerationTools",
        "is_standalone": false,
        "description": "Component that takes children, displaying various content moderation tools. "
      },
      {
        "name": "ModerationToolCard",
        "is_standalone": true,
        "description": "Standalone component that displays a single content moderation tool. "
      },
      {
        "name": "ModerationToolButton",
        "is_standalone": true,
        "description": "Standalone component that displays a button to perform an action on a moderation tool. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <SidebarNav />\n  <div class=\"flex-1 overflow-hidden\">\n    <DashboardHeader />\n    <main class=\"p-4\">\n      <ContentModerationTools>\n        <!-- Moderation tools will be inserted here -->\n      </ContentModerationTools>\n    </main>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "SidebarNav",
        "html": "<div class=\"w-64 bg-gray-100 p-4 h-screen\">  <h5 class=\"uppercase text-lg mb-2\">Moderation Tools</h5>  <ul>    <li><a href=\"#\" class=\"block py-2 px-4 text-gray-600\">Tool 1</a></li>    <li><a href=\"#\" class=\"block py-2 px-4 text-gray-600\">Tool 2</a></li>    <!-- More links -->  </ul></div>"
      },
      {
        "name": "DashboardHeader",
        "html": "<header class=\"bg-white py-4\">  <h1 class=\"text-3xl\">{ dashboard_title }</h1>  <p class=\"text-gray-600\">{ dashboard_subtitle }</p></header>"
      },
      {
        "name": "ContentModerationTools",
        "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
      },
      {
        "name": "ModerationToolCard",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4 w-full md:w-1/2 xl:w-1/3\">  <h2 class=\"text-lg\">{ tool_name }</h2>  <p class=\"text-gray-600\">{ tool_description }</p>  <ModerationToolButton /></div>"
      },
      {
        "name": "ModerationToolButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  { button_text }</button>"
      }
    ]
  },
  {
    "description": "The UI should be a list of user posts, with each post displaying the user's name, post content, and the number of likes and comments. The UI should be responsive, with a maximum width of 768px and padding of 20px on each side. The list should be divided into individual post items, with a margin of 20px between each item.",
    "component_list": [
      {
        "name": "PostFeed",
        "is_standalone": true,
        "description": "(standalone): The main component that wraps the list of posts. "
      },
      {
        "name": "PostItem",
        "is_standalone": false,
        "description": "(takes children): An individual post item that displays the user's name, post content, and the number of likes and comments. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostFeed>\n    <!-- List of post items will be rendered here -->\n  </PostFeed>\n</div>\n",
    "component_html": [
      {
        "name": "PostFeed",
        "html": "<div class=\"flex flex-col gap-4\">  {children}</div>"
      },
      {
        "name": "PostItem",
        "html": "<div class=\"p-4 bg-white border border-gray-200 rounded\">  <h2 class=\"text-lg font-bold\">{userName}</h2>  <p class=\"text-gray-600\">{postContent}</p>  <div class=\"flex justify-between\">    <p class=\"text-gray-600\">{likeCount} likes</p>    <p class=\"text-gray-600\">{commentCount} comments</p>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should be a simple text input field with a placeholder for writing a new post. It should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "PostEditor",
        "is_standalone": true,
        "description": "A standalone component that contains the text input field. "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "A standalone component that represents the text input field. "
      }
    ],
    "main_html": "<div class=\"flex flex-col w-full p-4 md:p-6 lg:p-8\">\n  <PostEditor />\n</div>\n",
    "component_html": [
      {
        "name": "PostEditor",
        "html": "<div class=\"flex flex-col w-full\">  <InputField /></div>"
      },
      {
        "name": "InputField",
        "html": "<textarea  class=\"w-full p-2 pl-4 pr-4 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"  placeholder=\"Write a new post...\"  rows=\"5\"></textarea>"
      }
    ]
  },
  {
    "description": "The UI should display a comment thread with multiple comments and replies. Each comment should have a username, timestamp, and comment text. Replies should be indented under their corresponding comments. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "standalone component that contains the entire comment thread "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "standalone component that represents a single comment "
      },
      {
        "name": "Reply",
        "is_standalone": true,
        "description": "standalone component that represents a single reply "
      }
    ],
    "main_html": "<CommentThread>\n  <Comment />\n  <Comment>\n    <Reply />\n    <Reply />\n  </Comment>\n  <Comment />\n</CommentThread>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">  <!-- comment thread content -->  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"mb-4\">  <h5 class=\"text-lg\">{username}</h5>  <p class=\"text-sm text-gray-600\">{timestamp}</p>  <p>{comment_text}</p>  {children} <!-- replies --></div>"
      },
      {
        "name": "Reply",
        "html": "<div class=\"ml-4 mb-4\">  <h5 class=\"text-lg\">{username}</h5>  <p class=\"text-sm text-gray-600\">{timestamp}</p>  <p>{reply_text}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should be a simple input field with a placeholder text and a send button.",
    "component_list": [
      {
        "name": "CommentInput",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<CommentInput />\n",
    "component_html": [
      {
        "name": "CommentInput",
        "html": "<div class=\"flex flex-wrap items-center mb-4\">  <InputField />  <SendButton>Send</SendButton></div>"
      },
      {
        "name": "InputField",
        "html": "<input  type=\"text\"  placeholder=\"Write a comment...\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"/>"
      },
      {
        "name": "SendButton",
        "html": "<button  class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "A compact user profile card with a profile picture, username, and a link to the user's profile page.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "UserProfileInfo",
        "is_standalone": false,
        "description": "takes children "
      },
      {
        "name": "UserProfileLink",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"max-w-sm mx-auto p-4 rounded-md shadow-md\">\n  <UserProfilePicture />\n  <UserProfileInfo>\n    <h2 class=\"text-lg font-bold\">{username}</h2>\n    <p class=\"text-gray-600\">{bio}</p>\n  </UserProfileInfo>\n  <UserProfileLink />\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src={profile_picture_url} alt=\"User Profile Picture\" class=\"w-16 h-16 rounded-full object-cover\" />"
      },
      {
        "name": "UserProfileInfo",
        "html": "<div class=\"flex flex-col\">  {children}</div>"
      },
      {
        "name": "UserProfileLink",
        "html": "<a href=\"/users/{username}\" class=\"text-blue-600 hover:underline\">View Profile</a>"
      }
    ]
  },
  {
    "description": "The NavBar should be a responsive, mobile-first navigation menu that displays the main sections of the site. It should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "(standalone): The main navigation menu component. "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "(takes children): An individual navigation item component. It takes a link and a label as children. "
      }
    ],
    "main_html": "<header className=\"fixed top-0 left-0 w-full h-16 bg-white shadow-md z-10\">\n  <nav className=\"container mx-auto p-4 flex justify-between\">\n    <a href=\"#\" className=\"text-2xl font-bold\">Logo</a>\n    <ul className=\"flex justify-end\">\n      <NavItem>Home</NavItem>\n      <NavItem>Features</NavItem>\n      <NavItem>Pricing</NavItem>\n      <NavItem>About</NavItem>\n    </ul>\n  </nav>\n</header>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<header className=\"fixed top-0 left-0 w-full h-16 bg-white shadow-md z-10\">  <nav className=\"container mx-auto p-4 flex justify-between\">    {children}  </nav></header>"
      },
      {
        "name": "NavItem",
        "html": "<li className=\"mr-4\">  <a href={link} className=\"text-gray-800 hover:text-gray-900\">{label}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should be a simple search bar component that consists of a text input field and a search button. The search bar should be responsive, with the search button aligned to the right of the input field on larger screens, and stacked on top of each other on smaller screens.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that contains the entire search bar UI "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component that represents the text input field "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component that represents the search button "
      }
    ],
    "main_html": "<nav class=\"max-w-md mx-auto p-4 flex justify-center\">\n  <SearchBar />\n</nav>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex flex-wrap items-center\">  <SearchInput />  <SearchButton /></div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
      }
    ]
  },
  {
    "description": "The UI should display a list of trending topics and hashtags in a clean and simple layout. The list should be responsive and adapt to different screen sizes. Each item in the list should display the hashtag/topic name, a brief description, and the number of uses.",
    "component_list": [
      {
        "name": "TrendingTopicsList",
        "is_standalone": true,
        "description": "A standalone component that renders a list of trending topics and hashtags. "
      },
      {
        "name": "TrendingTopicItem",
        "is_standalone": false,
        "description": "A component that takes children and renders a single trending topic or hashtag. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <TrendingTopicsList/>\n</div>\n",
    "component_html": [
      {
        "name": "TrendingTopicsList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "TrendingTopicItem",
        "html": "<li class=\"flex justify-between mb-2\">  <span class=\"text-lg\">{topic_name}</span>  <p class=\"text-sm\">{topic_description}</p>  <span class=\"text-sm\">{use_count} uses</span></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive list of friends with profile links. The list should be displayed in a grid on larger screens and a vertical list on smaller screens. Each friend's name should be a link to their profile.",
    "component_list": [
      {
        "name": "FriendCard",
        "is_standalone": true,
        "description": "(standalone): a single friend's information with a profile link "
      },
      {
        "name": "FriendsList",
        "is_standalone": false,
        "description": "(takes children): a container for the list of friends "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Friends</h2>\n  <FriendsList>\n    <!-- friend cards will be inserted here -->\n    <FriendCard/>\n    <FriendCard/>\n    <!-- ... -->\n  </FriendsList>\n</div>\n",
    "component_html": [
      {
        "name": "FriendCard",
        "html": "<div className=\"flex items-center mb-4\">  <img src={profile_image_url} alt=\"Profile image\" className=\"w-12 h-12 rounded-full mr-4\" />  <a href={profile_url} className=\"text-blue-600 hover:text-blue-900\">{friend_name}</a></div>"
      },
      {
        "name": "FriendsList",
        "html": "<ul className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a simple login form with a username and password input field, a submit button, and a forgot password link.",
    "component_list": [
      {
        "name": "LoginForm",
        "is_standalone": true,
        "description": "standalone component that wraps the entire form "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "standalone component that takes a label and an input type (e.g. text, password) "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "standalone component that takes a button text "
      },
      {
        "name": "ForgotPasswordLink",
        "is_standalone": true,
        "description": "standalone component that takes a link text "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md\">\n  <LoginForm>\n    <h2 class=\"text-lg font-bold mb-4\">Login</h2>\n    <InputField label=\"Username\" type=\"text\" />\n    <InputField label=\"Password\" type=\"password\" />\n    <SubmitButton> Login </SubmitButton>\n    <ForgotPasswordLink> Forgot password? </ForgotPasswordLink>\n  </LoginForm>\n</div>\n",
    "component_html": [
      {
        "name": "LoginForm",
        "html": "<form class=\"flex flex-col space-y-4\">  {children}</form>"
      },
      {
        "name": "InputField",
        "html": "<div class=\"flex flex-col mb-4\">  <label class=\"text-sm\" for=\"{input_id}\">{label}</label>  <input class=\"block w-full p-2 pl-10 text-sm text-gray-700\" type=\"{type}\" id=\"{input_id}\" /></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\">{button_text}</button>"
      },
      {
        "name": "ForgotPasswordLink",
        "html": "<a class=\"text-sm text-gray-600 hover:text-gray-900\" href=\"#\">{link_text}</a>"
      }
    ]
  },
  {
    "description": "The UI should be a simple input field with a label that allows users to upload a profile picture. The input field should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "AvatarUploader",
        "is_standalone": true,
        "description": "(standalone) - The main component for uploading a profile picture. "
      },
      {
        "name": "InputLabel",
        "is_standalone": true,
        "description": "(standalone) - The label for the input field. "
      },
      {
        "name": "InputField",
        "is_standalone": true,
        "description": "(standalone) - The input field for uploading the profile picture. "
      }
    ],
    "main_html": "<div class=\"flex flex-col md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4\">\n  <InputLabel />\n  <InputField />\n  <!-- Optional: display uploaded image -->\n  <img src=\"{uploaded_image_url}\" alt=\"Profile Picture\" class=\"w-full h-full object-cover rounded-full\" />\n</div>\n",
    "component_html": [
      {
        "name": "AvatarUploader",
        "html": "<!-- No HTML needed, as it's the parent component -->"
      },
      {
        "name": "InputLabel",
        "html": "<label for=\"avatar-upload\" class=\"block mb-2 text-sm font-bold text-gray-700\">Upload Profile Picture</label>"
      },
      {
        "name": "InputField",
        "html": "<input type=\"file\" id=\"avatar-upload\" class=\"block w-full px-4 py-2 text-gray-700\" />"
      }
    ]
  },
  {
    "description": "The UI should feature a prominent input field for uploading a cover photo, with a clear label and optional text to guide the user. The component should be responsive, accessible, and well-documented.",
    "component_list": [
      {
        "name": "CoverPhotoUploader",
        "is_standalone": true,
        "description": "(standalone): The main component that wraps the input field and label. "
      },
      {
        "name": "FileInputLabel",
        "is_standalone": true,
        "description": "(standalone): A label element that describes the input field. "
      },
      {
        "name": "FileInputField",
        "is_standalone": true,
        "description": "(standalone): The input field where the user selects the cover photo file. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <CoverPhotoUploader>\n    <FileInputLabel>Upload Cover Photo</FileInputLabel>\n    <FileInputField />\n  </CoverPhotoUploader>\n</div>\n",
    "component_html": [
      {
        "name": "CoverPhotoUploader",
        "html": "<div className=\"flex flex-col space-y-2\">  {children}</div>"
      },
      {
        "name": "FileInputLabel",
        "html": "<label className=\"block text-sm font-medium text-gray-700\">  {children}</label>"
      },
      {
        "name": "FileInputField",
        "html": "<input type=\"file\" id=\"cover-photo\" className=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border file:border-gray-300 file:rounded-full file:text-sm file:font-semibold\" />"
      }
    ]
  },
  {
    "description": "The UI should be a responsive header bar with a logo on the left and navigation links on the right. The logo should be a clickable link, and the navigation links should be a horizontal list on desktop and a vertical list on mobile.",
    "component_list": [
      {
        "name": "HeaderBar",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the header bar. "
      },
      {
        "name": "Logo",
        "is_standalone": true,
        "description": "(standalone): The logo component, which is a clickable link. "
      },
      {
        "name": "Nav",
        "is_standalone": false,
        "description": "(takes children): The navigation component, which contains a list of navigation links. "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "(takes children): An individual navigation item, which contains a link and optional text. "
      }
    ],
    "main_html": "<header class=\"max-w-full mx-auto p-4 flex justify-between items-center\">\n  <Logo />\n  <Nav>\n    <!-- navigation items will be inserted here -->\n  </Nav>\n</header>\n",
    "component_html": [
      {
        "name": "HeaderBar",
        "html": "<header class=\"max-w-full mx-auto p-4 flex justify-between items-center\">  {children}</header>"
      },
      {
        "name": "Logo",
        "html": "<a href=\"/\" class=\"text-lg font-bold text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\">  <img src={logo_url} alt={logo_alt_text} class=\"h-8 w-8\" /></a>"
      },
      {
        "name": "Nav",
        "html": "<ul class=\"flex justify-end mt-0 lg:mt-0\">  {children}</ul>"
      },
      {
        "name": "NavItem",
        "html": "<li class=\"mr-6 lg:mr-12 last:mr-0\">  <a href={nav_item_url} class=\"text-sm font-medium text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">    {nav_item_text}  </a></li>"
      }
    ]
  },
  {
    "description": "The UI should be a simple search bar with a input field and a search button. The search bar should be responsive, taking up the full width of the screen on mobile devices and adding some margins on larger screens. The input field should have a placeholder text and the search button should have an icon of a magnifying glass.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that contains the input field and search button. "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component that is the input field. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component that is the search button. "
      }
    ],
    "main_html": "<nav class=\"flex justify-center md:w-3/4 md:mx-auto\">\n  <SearchBar />\n</nav>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center bg-white border border-gray-200 rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"search\" class=\"w-full px-4 py-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" placeholder=\"Search...\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md\">  <i class=\"fas fa-search\"></i></button>"
      }
    ]
  },
  {
    "description": "A list of posts with each item displaying the title, score, and number of comments. The list should be responsive, with a maximum of 3 items per row on larger screens and 1 item per row on smaller screens.",
    "component_list": [
      {
        "name": "PostItem",
        "is_standalone": true,
        "description": "A standalone component representing a single post item. "
      },
      {
        "name": "PostList",
        "is_standalone": false,
        "description": "A component that takes children, wrapping the list of post items. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Post List</h1>\n  <PostList>\n    <!-- list of post items -->\n  </PostList>\n</div>\n",
    "component_html": [
      {
        "name": "PostItem",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <p class=\"text-gray-600\">Score: {post_score}</p>  <p class=\"text-gray-600\">{comment_count} comments</p></div>"
      },
      {
        "name": "PostList",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a single blog post page with a text area, an image, and comments section. The text area should display the post's content, the image should be displayed below the text, and the comments section should be at the bottom of the page.",
    "component_list": [
      {
        "name": "PostContent",
        "is_standalone": true,
        "description": "standalone component displaying the post's text content. "
      },
      {
        "name": "PostImage",
        "is_standalone": true,
        "description": "standalone component displaying the post's image. "
      },
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "standalone component displaying the comments for the post. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "takes children, displaying a single comment. "
      },
      {
        "name": "CommentList",
        "is_standalone": false,
        "description": "takes children, displaying a list of comments. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8 xl:p-12\">\n  <PostContent />\n  <PostImage />\n  <CommentSection>\n    <h2>Comments</h2>\n    <CommentList>\n      <!-- comments will be inserted here -->\n    </CommentList>\n  </CommentSection>\n</div>\n",
    "component_html": [
      {
        "name": "PostContent",
        "html": "<div class=\"prose lg:prose-lg xl:prose-xl\">{post_content}</div>"
      },
      {
        "name": "PostImage",
        "html": "<img src={image_src} alt={image_alt} class=\"w-full mb-4\" />"
      },
      {
        "name": "CommentSection",
        "html": "<div class=\"bg-gray-100 p-4 rounded\">{children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"mb-4\">  <h3>{comment_author}</h3>  <p>{comment_text}</p></div>"
      },
      {
        "name": "CommentList",
        "html": "<ul class=\"list-none\">{children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a comment thread with replies and nested comments. Each comment should have a username, comment text, and a \"Reply\" button. Replies should be indented under their parent comment. The thread should be easy to read and navigate.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "standalone, displays a list of comments "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "takes children, displays a single comment with a username, comment text, and a \"Reply\" button "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "standalone, displays a \"Reply\" button "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <Comment>\n      <!-- comment content -->\n    </Comment>\n  </CommentThread>\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
      },
      {
        "name": "Comment",
        "html": "<li class=\"py-4\">  <div class=\"flex items-center\">    <span class=\"text-sm\">{username}</span>    <p class=\"text-base\">{comment_text}</p>  </div>  <ReplyButton />  <ul class=\"list-none p-0 m-0 pl-4\">    {children}  </ul></li>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Reply</button>"
      }
    ]
  },
  {
    "description": "The user profile UI should display the user's karma, post history, and personal information in a clean and organized manner. The layout should be responsive, with the content adjusting to fit different screen sizes.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "A standalone component that contains the user's profile information. "
      },
      {
        "name": "KarmaDisplay",
        "is_standalone": true,
        "description": "A standalone component that displays the user's karma. "
      },
      {
        "name": "PostHistoryList",
        "is_standalone": false,
        "description": "A component that takes children and displays a list of the user's post history. "
      },
      {
        "name": "UserInfo",
        "is_standalone": true,
        "description": "A standalone component that displays the user's personal information. "
      },
      {
        "name": "PostPreview",
        "is_standalone": false,
        "description": "A component that takes children and displays a preview of a single post. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard />\n  <div className=\"flex flex-wrap -mx-4 mb-4\">\n    <div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <KarmaDisplay />\n    </div>\n    <div className=\"w-full md:w-1/2 xl:w-2/3 p-4\">\n      <UserInfo />\n    </div>\n  </div>\n  <h2 className=\"text-lg mb-4\">Post History</h2>\n  <PostHistoryList>\n    <!-- Post previews will be inserted here -->\n  </PostHistoryList>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  <h1 className=\"text-lg\">{username}</h1>  <p className=\"text-gray-600\">{tagline}</p></div>"
      },
      {
        "name": "KarmaDisplay",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  <h2 className=\"text-lg\">Karma: {karma}</h2></div>"
      },
      {
        "name": "PostHistoryList",
        "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "UserInfo",
        "html": "<div className=\"bg-white shadow-md p-4 rounded\">  <h2 className=\"text-lg\">About {username}</h2>  <p className=\"text-gray-600\">{bio}</p></div>"
      },
      {
        "name": "PostPreview",
        "html": "<li className=\"mb-4\">  <h3 className=\"text-lg\">{post_title}</h3>  <p className=\"text-gray-600\">{post_excerpt}</p>  <p className=\"text-gray-600\">{post_date}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive sidebar that displays a list of popular posts and trending topics. The popular posts section should display a list of post titles with the number of comments and views. The trending topics section should display a list of topic titles with the number of posts and views.",
    "component_list": [
      {
        "name": "Sidebar",
        "is_standalone": true,
        "description": "The main sidebar component that contains the two sections. (standalone) "
      },
      {
        "name": "SectionHeader",
        "is_standalone": true,
        "description": "A header component that displays the section title. (standalone) "
      },
      {
        "name": "PopularPosts",
        "is_standalone": false,
        "description": "A component that displays a list of popular posts. (takes children) "
      },
      {
        "name": "PopularPostItem",
        "is_standalone": true,
        "description": "A component that displays a single popular post item. (standalone) "
      },
      {
        "name": "TrendingTopics",
        "is_standalone": false,
        "description": "A component that displays a list of trending topics. (takes children) "
      },
      {
        "name": "TrendingTopicItem",
        "is_standalone": true,
        "description": "A component that displays a single trending topic item. (standalone) "
      }
    ],
    "main_html": "<div className=\"fixed w-64 sm:w-80 lg:w-96 bg-gray-100 p-4 h-screen overflow-y-auto\">\n  <Sidebar>\n    <SectionHeader>Popular Posts</SectionHeader>\n    <PopularPosts>\n      <PopularPostItem/> <!-- repeated for each popular post -->\n    </PopularPosts>\n    <SectionHeader>Trending Topics</SectionHeader>\n    <TrendingTopics>\n      <TrendingTopicItem/> <!-- repeated for each trending topic -->\n    </TrendingTopics>\n  </Sidebar>\n</div>\n",
    "component_html": [
      {
        "name": "Here",
        "html": "// Sidebar<div className=\"flex flex-col h-full\">{children}</div>// SectionHeader<h2 className=\"text-lg font-bold mb-2\">{title}</h2>// PopularPosts<ul className=\"mb-4\">{children}</ul>// PopularPostItem<li className=\"py-2 border-b border-gray-200\">  <a href=\"{post_url}\" className=\"text-gray-600\">{post_title}</a>  <p className=\"text-sm text-gray-500\">{comment_count} comments, {view_count} views</p></li>// TrendingTopics<ul className=\"mb-4\">{children}</ul>// TrendingTopicItem<li className=\"py-2 border-b border-gray-200\">  <a href=\"{topic_url}\" className=\"text-gray-600\">{topic_name}</a>  <p className=\"text-sm text-gray-500\">{post_count} posts, {view_count} views</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a simple footer with three columns of links to policies, terms, and help resources. The links should be easily clickable on mobile devices and the footer should be compact and accessible.",
    "component_list": [
      {
        "name": "FooterContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container of the footer. "
      },
      {
        "name": "FooterColumn",
        "is_standalone": false,
        "description": "(takes children): A single column of links in the footer. "
      },
      {
        "name": "FooterLink",
        "is_standalone": true,
        "description": "(standalone): A single link in the footer. "
      }
    ],
    "main_html": "<footer className=\"bg-gray-200 h-screen pt-12 pb-6\">\n  <FooterContainer>\n    <FooterColumn>\n      <FooterLink>Privacy Policy</FooterLink>\n      <FooterLink>Terms of Use</FooterLink>\n    </FooterColumn>\n    <FooterColumn>\n      <FooterLink>Help Center</FooterLink>\n      <FooterLink>FAQ</FooterLink>\n    </FooterColumn>\n    <FooterColumn>\n      <FooterLink>Contact Us</FooterLink>\n      <FooterLink>About Us</FooterLink>\n    </FooterColumn>\n  </FooterContainer>\n</footer>\n",
    "component_html": [
      {
        "name": "FooterContainer",
        "html": "<div className=\"max-w-md mx-auto p-4 lg:flex lg:justify-between\">  {children}</div>"
      },
      {
        "name": "FooterColumn",
        "html": "<div className=\"lg:w-1/3 mb-4 lg:mb-0\">  {children}</div>"
      },
      {
        "name": "FooterLink",
        "html": "<a className=\"block mb-2 text-gray-800 hover:text-blue-600\" href=\"{link_url}\">  {link_text}</a>"
      }
    ]
  },
  {
    "description": "The UI should display a breadcrumb navigation for categories and subreddits. Each item in the breadcrumb should display the category name and have a separator (e.g., `/`) between each item.",
    "component_list": [
      {
        "name": "BreadCrumb",
        "is_standalone": true,
        "description": "standalone component that renders a single breadcrumb item. "
      },
      {
        "name": "BreadCrumbNavigation",
        "is_standalone": false,
        "description": "container component that takes children (multiple `BreadCrumb` components). "
      }
    ],
    "main_html": "<nav class=\"flex items-center mb-4\">\n  <BreadCrumbNavigation>\n    <BreadCrumb />\n    <BreadCrumb />\n    <!-- Add more Breadcrumbs as needed -->\n  </BreadCrumbNavigation>\n</nav>\n",
    "component_html": [
      {
        "name": "BreadCrumb",
        "html": "<li class=\"mr-2\">  <a href=\"{category_url}\" class=\"text-gray-600 hover:text-gray-900\">{category_name}</a>  <span class=\"text-gray-400\">/</span></li>"
      },
      {
        "name": "BreadCrumbNavigation",
        "html": "<ul class=\"flex\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a simple pagination control that allows users to navigate through a list of posts. It should be responsive, mobile-friendly, and accessible.",
    "component_list": [
      {
        "name": "PaginationControls",
        "is_standalone": true,
        "description": "(standalone): The top-level component that wraps the pagination controls. "
      },
      {
        "name": "PaginationButton",
        "is_standalone": false,
        "description": "(takes children): A button component for navigating to a specific page. "
      },
      {
        "name": "PageNumberIndicator",
        "is_standalone": true,
        "description": "(standalone): Displays the current page number and total pages. "
      }
    ],
    "main_html": "<nav className=\"flex justify-center mb-4\">\n  <PaginationControls>\n    <PaginationButton>&laquo;</PaginationButton>\n    <PageNumberIndicator />\n    <PaginationButton>&raquo;</PaginationButton>\n  </PaginationControls>\n</nav>\n",
    "component_html": [
      {
        "name": "PaginationControls",
        "html": "<div className=\"flex justify-center\">  {children}</div>"
      },
      {
        "name": "PaginationButton",
        "html": "<button className=\"border-2 border-gray-300 hover:bg-gray-200 transition duration-300 ease-in-out\">  {children}</button>"
      },
      {
        "name": "PageNumberIndicator",
        "html": "<p className=\"text-sm text-gray-600\">{currentPage} of {totalPages}</p>"
      }
    ]
  },
  {
    "description": "A dropdown menu with a label \"Select a category\" and a dropdown list of categories/subreddits. The dropdown list should be accessible and responsive.",
    "component_list": [
      {
        "name": "CategoryDropdown",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "CategoryDropdownLabel",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "CategoryDropdownList",
        "is_standalone": false,
        "description": "(takes children: `CategoryDropdownItem`) "
      }
    ],
    "main_html": "<div class=\"w-full max-w-md mx-auto mt-4\">\n  <CategoryDropdown/>\n</div>\n",
    "component_html": [
      {
        "name": "CategoryDropdown",
        "html": "<div class=\"relative\">  <CategoryDropdownLabel/>  <CategoryDropdownList/></div>"
      },
      {
        "name": "CategoryDropdownLabel",
        "html": "<label class=\"block text-sm font-medium mb-1\">{label_text}</label>"
      },
      {
        "name": "CategoryDropdownList",
        "html": "<ul class=\"absolute z-10 w-full bg-white border border-gray-200\">  {children}</ul>"
      },
      {
        "name": "CategoryDropdownItem",
        "html": "<li class=\"px-4 py-2 hover:bg-gray-100\">  <a class=\"block w-full\" href=\"#\">{category_name}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should display a text input field where the user can type their tweet. Below the input field, a counter should display the number of characters remaining, indicating how many more characters the user can type before reaching the tweet limit (280 characters).",
    "component_list": [
      {
        "name": "TweetInput",
        "is_standalone": true,
        "description": "a standalone component that takes a text input. "
      },
      {
        "name": "CharacterCounter",
        "is_standalone": true,
        "description": "a standalone component that displays the remaining character count. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <TweetInput />\n  <CharacterCounter />\n</div>\n",
    "component_html": [
      {
        "name": "TweetInput",
        "html": "<input   type=\"text\"   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder=\"Type your tweet...\"/>"
      },
      {
        "name": "CharacterCounter",
        "html": "<p class=\"text-sm text-gray-500\">  {remaining_characters} characters remaining</p>"
      }
    ]
  },
  {
    "description": "The UI should display an individual tweet in a compact, readable format. It should include the user's profile picture, username, tweet text, and timestamp. The tweet text should be the primary focus, with the user's profile picture and username secondary. The timestamp should be displayed lightly.",
    "component_list": [
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "standalone component to display the user's profile picture. "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "standalone component to display the user's username. "
      },
      {
        "name": "TweetText",
        "is_standalone": true,
        "description": "standalone component to display the tweet text. "
      },
      {
        "name": "Timestamp",
        "is_standalone": true,
        "description": "standalone component to display the timestamp. "
      },
      {
        "name": "Tweet",
        "is_standalone": false,
        "description": "takes children, a container component to display the entire tweet. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-white rounded shadow-md\">\n  <Tweet>\n    <UserProfilePicture />\n    <div class=\"flex items-center\">\n      <Username />\n      <Timestamp />\n    </div>\n    <TweetText />\n  </Tweet>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePicture",
        "html": "<img src=\"{profile_picture_url}\" alt=\"User profile picture\" class=\"w-12 h-12 rounded-full mr-2\" />"
      },
      {
        "name": "Username",
        "html": "<span class=\"text-lg font-bold\">{username}</span>"
      },
      {
        "name": "TweetText",
        "html": "<p class=\"text-lg\">{tweet_text}</p>"
      },
      {
        "name": "Timestamp",
        "html": "<small class=\"text-gray-500\">{timestamp}</small>"
      },
      {
        "name": "Tweet",
        "html": "<div class=\"flex flex-wrap\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of tagged users, with each user's name and username displayed. The list should be responsive and accessible, with clear typography and sufficient whitespace.",
    "component_list": [
      {
        "name": "TaggedUserList",
        "is_standalone": true,
        "description": "(standalone) - a container component that holds the list of tagged users "
      },
      {
        "name": "TaggedUser",
        "is_standalone": false,
        "description": "(takes children) - a component that represents a single tagged user "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 class=\"text-lg font-bold mb-4\">Tagged Users</h2>\n  <ul class=\"list-none mb-0\">\n    <TaggedUserList />\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "TaggedUserList",
        "html": "<ul class=\"list-none mb-0\">  { /* iterate over the list of tagged users and render each one */ }  <TaggedUser />  { /* ... */ }</ul>"
      },
      {
        "name": "TaggedUser",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <span class=\"text-sm\">{userName}</span> (@{userName})</li>"
      }
    ]
  },
  {
    "description": "A simple search bar with a text input field and a search button. The search bar should be responsive, so it adapts to different screen sizes. On mobile devices, the search bar should be full-width, and on larger screens, it should be contained within a maximum width.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone): The container element for the search bar. "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "(standalone): The text input field for entering search queries. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "(standalone): The button to submit the search query. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <SearchBar>\n    <SearchInput />\n    <SearchButton />\n  </SearchBar>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div className=\"flex items-center bg-white border border-gray-300 rounded-md overflow-hidden\">  {children}</div>"
      },
      {
        "name": "SearchInput",
        "html": "<input className=\"w-full px-4 py-2 text-lg\" type=\"search\" placeholder=\"Search...\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md\">  Search</button>"
      }
    ]
  },
  {
    "description": "The UI should display a user profile summary and bio, including the user's name, profile picture, bio text, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "UserProfile",
        "is_standalone": true,
        "description": "A standalone component that displays the user's profile information. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "A standalone component that displays the user's profile picture. "
      },
      {
        "name": "BioText",
        "is_standalone": true,
        "description": "A standalone component that displays the user's bio text. "
      },
      {
        "name": "CTAButton",
        "is_standalone": true,
        "description": "A standalone component that displays a call-to-action button. "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center justify-center p-4\">\n  <UserProfile>\n    <ProfilePicture />\n    <h2 class=\"text-lg font-bold\">{userName}</h2>\n    <BioText />\n    <CTAButton />\n  </UserProfile>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfile",
        "html": "<div class=\"flex flex-col items-center justify-center p-4\">  {children}</div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src={profilePictureUrl} alt=\"Profile Picture\" class=\"w-24 h-24 rounded-full\" />"
      },
      {
        "name": "BioText",
        "html": "<p class=\"text-sm text-gray-600\">{bioText}</p>"
      },
      {
        "name": "CTAButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {ctaButtonText}</button>"
      }
    ]
  },
  {
    "description": "The trending topics display should be a horizontal list of topic cards, with each card displaying a topic title, a brief description, and a count of discussions related to that topic. The list should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "TrendingTopicsList",
        "is_standalone": true,
        "description": "standalone component that wraps the list of trending topics "
      },
      {
        "name": "TopicCard",
        "is_standalone": false,
        "description": "component that displays a single topic, takes children (topic title, description, and discussion count) "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <TrendingTopicsList>\n    <!-- List of topic cards will be rendered here -->\n  </TrendingTopicsList>\n</div>\n",
    "component_html": [
      {
        "name": "TrendingTopicsList",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      },
      {
        "name": "TopicCard",
        "html": "<li class=\"w-full md:w-1/2 xl:w-1/3 p-6\">  <h2 class=\"text-lg font-bold\">{topicTitle}</h2>  <p class=\"text-gray-600\">{topicDescription}</p>  <p class=\"text-gray-600\">{discussionCount} discussions</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a tweet's engagement metrics, including likes, retweets, replies, and quotes. It should be a compact and visually appealing component that provides an at-a-glance view of a tweet's engagement.",
    "component_list": [
      {
        "name": "TweetMetricsContainer",
        "is_standalone": true,
        "description": "(standalone) - The outer container for the tweet metrics. "
      },
      {
        "name": "MetricItem",
        "is_standalone": false,
        "description": "(takes children) - A single metric item, such as likes or retweets. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <TweetMetricsContainer>\n    <MetricItem><MetricItem/>\n    <MetricItem><MetricItem/>\n    <MetricItem><MetricItem/>\n    <MetricItem><MetricItem/>\n  </TweetMetricsContainer>\n</div>\n",
    "component_html": [
      {
        "name": "TweetMetricsContainer",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  {children}</div>"
      },
      {
        "name": "MetricItem",
        "html": "<div class=\"flex items-center mr-4\">  <span class=\"text-lg\">{metric_icon}</span>  <span class=\"ml-2\">{metric_value}</span>  <span class=\"text-gray-500\">{metric_label}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive navigation menu that displays a list of mailbox folders and labels. The menu should be accessible on mobile devices and desktops.",
    "component_list": [
      {
        "name": "NavigationBar",
        "is_standalone": true,
        "description": "(standalone): The top-level navigation menu component. "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "(takes children): An individual navigation item component that contains a label and optional children (submenu items). "
      },
      {
        "name": "NavItemLabel",
        "is_standalone": true,
        "description": "(standalone): A label component that displays the text of a navigation item. "
      }
    ],
    "main_html": "<NavigationBar>\n  <NavItem>\n    <NavItemLabel>Inbox</NavItemLabel>\n  </NavItem>\n  <NavItem>\n    <NavItemLabel>Sent</NavItemLabel>\n  </NavItem>\n  <NavItem>\n    <NavItemLabel>Drafts</NavItemLabel>\n  </NavItem>\n  <NavItem>\n    <NavItemLabel>Spam</NavItemLabel>\n  </NavItem>\n  <NavItem>\n    <NavItemLabel>Labels</NavItemLabel>\n    <NavItem>\n      <NavItemLabel>Personal</NavItemLabel>\n    </NavItem>\n    <NavItem>\n      <NavItemLabel>Work</NavItemLabel>\n    </NavItem>\n  </NavItem>\n</NavigationBar>\n",
    "component_html": [
      {
        "name": "NavigationBar",
        "html": "<nav class=\"flex flex-wrap justify-center lg:justify-start mb-4\">  <ul class=\"flex flex-wrap justify-center lg:flex-col\">    {children}  </ul></nav>"
      },
      {
        "name": "NavItem",
        "html": "<li class=\"mr-4 mb-2 lg:mb-0\">  {children}</li>"
      },
      {
        "name": "NavItemLabel",
        "html": "<span class=\"text-sm\">{label_text}</span>"
      }
    ]
  },
  {
    "description": "The UI should have a search bar with a text input and a dropdown list of autocomplete suggestions. The search bar should be responsive and adapt to different screen sizes. The autocomplete suggestions should be displayed in a dropdown list below the search bar, with each suggestion on a new line.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "AutocompleteSuggestion",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "AutocompleteList",
        "is_standalone": false,
        "description": "takes children "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <SearchBar>\n    <SearchInput />\n    <AutocompleteList>\n      <!-- Autocomplete suggestions will be rendered here -->\n    </AutocompleteList>\n  </SearchBar>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex flex-wrap items-center justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "AutocompleteSuggestion",
        "html": "<li class=\"px-4 py-2\">{suggestion_text}</li>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"text\" class=\"w-full pl-4 pr-10 text-lg text-gray-700\" placeholder={search_placeholder} />"
      },
      {
        "name": "AutocompleteList",
        "html": "<ul class=\"absolute bg-white shadow-md w-full z-10\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a button that says \"Compose Email\" with a dropdown arrow on the right side. When clicked, a dropdown menu should appear below the button, containing a list of email composition options.",
    "component_list": [
      {
        "name": "ComposeEmailButton",
        "is_standalone": true,
        "description": "Standalone component that displays the \"Compose Email\" button with a dropdown arrow. "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "Component that takes children, representing the dropdown menu items. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <ComposeEmailButton />\n</div>\n<div class=\"absolute\">\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "ComposeEmailButton",
        "html": "<button class=\"bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded\">  Compose Email  <span class=\"ml-2 text-lg\">{caret_down_icon}</span></button>"
      },
      {
        "name": "DropdownMenu",
        "html": "<ul class=\"bg-white shadow-md py-1\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a list of emails, with each email showing the sender's name and the subject of the email. The list should be responsive, with each email item taking up the full width of the screen on mobile devices and becoming a compact list item on larger screens.",
    "component_list": [
      {
        "name": "EmailListItem",
        "is_standalone": true,
        "description": "(standalone): A single email item in the list, displaying the sender and subject. "
      },
      {
        "name": "EmailList",
        "is_standalone": false,
        "description": "(takes children): A container for the list of email items. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 className=\"text-2xl font-bold mb-4\">Emails</h1>\n  <EmailList>\n    <EmailListItem />\n    <EmailListItem />\n    <!-- add more EmailListItem components here -->\n  </EmailList>\n</div>\n",
    "component_html": [
      {
        "name": "EmailListItem",
        "html": "<div className=\"flex justify-between mb-4 p-4 bg-white shadow-md rounded\">  <div>    <p className=\"text-lg font-bold\">{senderName}</p>    <p className=\"text-gray-600\">{subject}</p>  </div>  <div className=\"text-right\">    <p className=\"text-gray-600\">{receivedAt}</p>  </div></div>"
      },
      {
        "name": "EmailList",
        "html": "<ul className=\"list-none p-0 m-0\">{children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive email composition window with formatting options. It should have a text area for writing the email, a formatting toolbar with options for bold, italic, and underline, and a send button. The UI should be mobile-first, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "EmailCompositionWindow",
        "is_standalone": true,
        "description": "(standalone): The outer container for the email composition window. "
      },
      {
        "name": "FormattingToolbar",
        "is_standalone": true,
        "description": "(standalone): The toolbar with formatting options. "
      },
      {
        "name": "FormatButton",
        "is_standalone": false,
        "description": "(takes children): An individual formatting button (e.g. bold, italic, underline). "
      },
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "(standalone): The send button. "
      },
      {
        "name": "TextArea",
        "is_standalone": true,
        "description": "(standalone): The text area for writing the email. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <!-- Email Composition Window -->\n  <EmailCompositionWindow>\n    <FormattingToolbar>\n      <FormatButton> Bold </FormatButton>\n      <FormatButton> Italic </FormatButton>\n      <FormatButton> Underline </FormatButton>\n    </FormattingToolbar>\n    <TextArea />\n    <SendButton> Send </SendButton>\n  </EmailCompositionWindow>\n</div>\n",
    "component_html": [
      {
        "name": "EmailCompositionWindow",
        "html": "<div class=\"flex flex-col h-screen\">  {children}</div>"
      },
      {
        "name": "FormattingToolbar",
        "html": "<div class=\"flex justify-around mb-4\">  {children}</div>"
      },
      {
        "name": "FormatButton",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "SendButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "TextArea",
        "html": "<textarea class=\"w-full h-64 p-2 border border-gray-200 rounded\" rows=\"10\"></textarea>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive button that allows users to upload a file. The button should be styled with a background color, border, and hover effect. When clicked, it should open a file browser for the user to select a file.",
    "component_list": [
      {
        "name": "UploadButton",
        "is_standalone": true,
        "description": "Standalone component that renders a button with a label and a file input. "
      },
      {
        "name": "FileInputLabel",
        "is_standalone": true,
        "description": "Standalone component that renders a label for the file input. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <UploadButton/>\n</div>\n",
    "component_html": [
      {
        "name": "UploadButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <FileInputLabel/>  <input type=\"file\" class=\"hidden\" /></button>"
      },
      {
        "name": "FileInputLabel",
        "html": "<span>Choose a file...</span>"
      }
    ]
  },
  {
    "description": "A settings icon with a dropdown menu that appears when clicked, containing several menu options.",
    "component_list": [
      {
        "name": "SettingsIcon",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "(takes children) "
      },
      {
        "name": "DropdownMenuItem",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"relative inline-block\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "SettingsIcon",
        "html": "<button class=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-full inline-block\">  <i class=\"fas fa-cog text-lg\"></i></button>"
      },
      {
        "name": "DropdownMenu",
        "html": "<div class=\"hidden bg-white border rounded shadow-md absolute right-0 mt-2 py-2 w-48\">  {children}</div>"
      },
      {
        "name": "DropdownMenuItem",
        "html": "<a href=\"#\" class=\"block py-2 px-4 text-gray-600 hover:bg-gray-100\">  {menuItem_text}</a>"
      }
    ]
  },
  {
    "description": "A notification bell icon with a small badge displaying the number of unread notifications. The bell should be clickable, and the badge should be highlighted if there are unread notifications.",
    "component_list": [
      {
        "name": "NotificationBell",
        "is_standalone": true,
        "description": "A standalone component that wraps a clickable bell icon and an unread count badge. "
      },
      {
        "name": "Badge",
        "is_standalone": false,
        "description": "A component that takes children (the unread count) and displays it in a highlighted circle. "
      }
    ],
    "main_html": "<NotificationBell />\n",
    "component_html": [
      {
        "name": "NotificationBell",
        "html": "<a href=\"{notification_href}\" class=\"flex items-center hover:bg-gray-100 rounded-md p-2\">  <i class=\"fas fa-bell\"></i>  <Badge>{unread_count}</Badge></a>"
      },
      {
        "name": "Badge",
        "html": "<span class=\"bg-orange-500 rounded-full text-white py-1 px-2 text-xs\">{children}</span>"
      }
    ]
  },
  {
    "description": "The UI should be a circular profile picture with a dropdown menu that appears when the picture is clicked. The dropdown menu should contain several options, such as \"View Profile\", \"Settings\", and \"Logout\".",
    "component_list": [
      {
        "name": "ProfilerPicture",
        "is_standalone": true,
        "description": "a standalone component that displays a circular profile picture. "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "a component that takes children, which are the menu options. "
      },
      {
        "name": "DropdownItem",
        "is_standalone": true,
        "description": "a standalone component that displays a single menu option. "
      }
    ],
    "main_html": "<div class=\"flex justify-end mb-4\">\n  <ProfilerPicture/>\n  <DropdownMenu>\n    <DropdownItem>View Profile</DropdownItem>\n    <DropdownItem>Settings</DropdownItem>\n    <DropdownItem>Logout</DropdownItem>\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "ProfilerPicture",
        "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"h-12 w-12 rounded-full object-cover\" />"
      },
      {
        "name": "DropdownMenu",
        "html": "<div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  <ul class=\"divide-y divide-gray-100\">    {children}  </ul></div>"
      },
      {
        "name": "DropdownItem",
        "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"#\" class=\"block text-gray-600\">{menu_option_text}</a></li>"
      }
    ]
  },
  {
    "description": "A logout button that when clicked, prompts the user to confirm they want to log out. If confirmed, the logout action is performed.",
    "component_list": [
      {
        "name": "LogoutButton",
        "is_standalone": true,
        "description": "standalone, displays a button with a logout icon and text. "
      },
      {
        "name": "ConfirmLogout",
        "is_standalone": false,
        "description": "takes children, displays a confirmation prompt to the user with an OK and Cancel button. "
      }
    ],
    "main_html": "<div className=\"flex justify-center mt-4\">\n  <LogoutButton />\n</div>\n\n<!-- Confirmation prompt will be inserted here -->\n<div id=\"confirm-logout\" className=\"hidden\">\n  <ConfirmLogout>\n    <p>Are you sure you want to log out?</p>\n    <div className=\"flex justify-end\">\n      <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">OK</button>\n      <button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ml-2\">Cancel</button>\n    </div>\n  </ConfirmLogout>\n</div>\n",
    "component_html": [
      {
        "name": "LogoutButton",
        "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-sign-out-alt mr-2\" /> Log Out</button>"
      },
      {
        "name": "ConfirmLogout",
        "html": "<div className=\"bg-white p-4 rounded shadow-md\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive and accessible folder and label management interface. It should display a list of folders with labels, allowing users to create, edit, and delete folders and labels. The interface should be clean, simple, and easy to use, with clear typography and sufficient whitespace.",
    "component_list": [
      {
        "name": "FolderList",
        "is_standalone": true,
        "description": "(standalone) - A component that displays a list of folders. "
      },
      {
        "name": "FolderItem",
        "is_standalone": false,
        "description": "(takes children) - A component that represents a single folder in the list, containing the folder name, labels, and actions. "
      },
      {
        "name": "FolderName",
        "is_standalone": true,
        "description": "(standalone) - A component that displays the name of a folder. "
      },
      {
        "name": "LabelList",
        "is_standalone": true,
        "description": "(standalone) - A component that displays a list of labels for a folder. "
      },
      {
        "name": "LabelItem",
        "is_standalone": true,
        "description": "(standalone) - A component that represents a single label in the list. "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "(standalone) - A component that represents a button for creating, editing, or deleting a folder or label. "
      },
      {
        "name": "CreateFolderForm",
        "is_standalone": false,
        "description": "(takes children) - A component that contains a form for creating a new folder. "
      }
    ],
    "main_html": "<main class=\"container max-w-md mx-auto p-4\">\n  <header class=\"mb-4\">\n    <h1 class=\"text-2xl font-bold\">Folder Management</h1>\n  </header>\n  <FolderList />\n  <CreateFolderForm />\n</main>\n",
    "component_html": [
      {
        "name": "FolderList",
        "html": "<ul class=\"list-none mb-4\">  {folders.map((folder) => (    <FolderItem key={folder.id}>      {folder.name}    </FolderItem>  ))}</ul>"
      },
      {
        "name": "FolderItem",
        "html": "<li class=\"flex items-center justify-between py-4\">  <FolderName>{folderName}</FolderName>  <LabelList />  <ActionButton>Edit</ActionButton>  <ActionButton>Delete</ActionButton></li>"
      },
      {
        "name": "FolderName",
        "html": "<span class=\"text-lg font-bold\">{folderName}</span>"
      },
      {
        "name": "LabelList",
        "html": "<ul class=\"list-none flex flex-wrap mb-2\">  {labels.map((label) => (    <LabelItem key={label.id}>{label.name}</LabelItem>  ))}</ul>"
      },
      {
        "name": "LabelItem",
        "html": "<li class=\"inline-block bg-yellow-100 rounded px-2 py-1 text-sm mr-2\">{labelName}</li>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{actionText}</button>"
      },
      {
        "name": "CreateFolderForm",
        "html": "<form class=\"mb-4\">  <label class=\"block mb-2\" for=\"folder-name\">Folder Name</label>  <input class=\"w-full p-2\" id=\"folder-name\" type=\"text\" />  <ActionButton>Create Folder</ActionButton></form>"
      }
    ]
  },
  {
    "description": "The UI should display a compact dropdown menu with filtering and sorting options for emails. The menu should be accessible on mobile devices and desktops.",
    "component_list": [
      {
        "name": "FilterSortMenu",
        "is_standalone": true,
        "description": "- a standalone component that wraps the filtering and sorting options. "
      },
      {
        "name": "FilterOption",
        "is_standalone": true,
        "description": "- a standalone component that represents a single filtering option (e.g., \"Unread\", \"Starred\", etc.). "
      },
      {
        "name": "SortOption",
        "is_standalone": true,
        "description": "- a standalone component that represents a single sorting option (e.g., \" Newest\", \"Oldest\", etc.). "
      }
    ],
    "main_html": "<div className=\"flex justify-end mb-4\">\n  <FilterSortMenu>\n    <FilterOption />\n    <FilterOption />\n    <FilterOption />\n    <SortOption />\n    <SortOption />\n    <SortOption />\n  </FilterSortMenu>\n</div>\n",
    "component_html": [
      {
        "name": "FilterSortMenu",
        "html": "<div className=\"dropdown relative\">  <button className=\"btn btn-secondary dropdown-toggle\">Filter and Sort</button>  <ul className=\"dropdown-menu\">    {children}  </ul></div>"
      },
      {
        "name": "FilterOption",
        "html": "<li>  <a className=\"dropdown-item\" href=\"#\">{filter_label}</a></li>"
      },
      {
        "name": "SortOption",
        "html": "<li>  <a className=\"dropdown-item\" href=\"#\">{sort_label}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should resemble a text editor with a toolbar above the editing area, containing formatting tools such as bold, italic, underline, font size, and font family. The user should be able to input text into the editor and apply formatting to the selected text.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "Standalone component, contains formatting tools "
      },
      {
        "name": "Editor",
        "is_standalone": true,
        "description": "Standalone component, contains the text editing area "
      },
      {
        "name": "FormattingTool",
        "is_standalone": true,
        "description": "Standalone component, individual formatting tool (e.g. bold, italic, etc.) "
      },
      {
        "name": "FontFamilyDropdown",
        "is_standalone": true,
        "description": "Standalone component, dropdown list of font families "
      },
      {
        "name": "FontSizeSlider",
        "is_standalone": true,
        "description": "Standalone component, slider to adjust font size "
      }
    ],
    "main_html": "<div className=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <Editor/>\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<div className=\"bg-gray-200 p-2 flex justify-between\">  <FormattingTool icon=\"bold\" />  <FormattingTool icon=\"italic\" />  <FormattingTool icon=\"underline\" />  <FontFamilyDropdown />  <FontSizeSlider /></div>"
      },
      {
        "name": "Editor",
        "html": "<div   contentEditable=\"true\"   className=\"p-4 h-full overflow-y-auto\"   tabIndex=\"0\">  {editorContent}</div>"
      },
      {
        "name": "FormattingTool",
        "html": "<button   className=\"rounded p-2 hover:bg-gray-300\"  onClick={handleFormattingToolClick}>  <i className={`fa fa-${icon}`} /></button>"
      },
      {
        "name": "FontFamilyDropdown",
        "html": "<select   className=\"py-2 px-4 border border-gray-300\"  onChange={handleFontFamilyChange}>  <option value=\"Arial\">Arial</option>  <option value=\"Calibri\">Calibri</option>  <!-- other font family options --></select>"
      },
      {
        "name": "FontSizeSlider",
        "html": "<input   type=\"range\"   min=\"8\"   max=\"24\"   value={fontSize}   onChange={handleFontSizeChange}   className=\"w-full\"/>"
      }
    ]
  },
  {
    "description": "The UI should be a text input field with a dropdown list that appears below the input field, displaying a list of suggested recipients. The dropdown list should be scrollable and should display the name and email address of each suggested recipient.",
    "component_list": [
      {
        "name": "AutoCompleteInput",
        "is_standalone": true,
        "description": "(standalone): The input field where the user types the recipient's name or email address. "
      },
      {
        "name": "DropdownList",
        "is_standalone": false,
        "description": "(takes children): The dropdown list that appears below the input field, displaying a list of suggested recipients. "
      },
      {
        "name": "RecipientSuggestion",
        "is_standalone": true,
        "description": "(standalone): An individual suggested recipient in the dropdown list, displaying the name and email address of the recipient. "
      }
    ],
    "main_html": "<div class=\"flex flex-col relative\">\n  <AutoCompleteInput />\n  <DropdownList>\n    <!-- dropdown list items will be inserted here -->\n  </DropdownList>\n</div>\n",
    "component_html": [
      {
        "name": "AutoCompleteInput",
        "html": "<input type=\"text\" class=\"w-full px-4 py-2 border border-gray-300 rounded\" />"
      },
      {
        "name": "DropdownList",
        "html": "<ul class=\"absolute bg-white shadow-md p-2 w-full\">  {children}</ul>"
      },
      {
        "name": "RecipientSuggestion",
        "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <span class=\"text-gray-600\">{recipient_name}</span> &lt;{recipient_email}&gt;</li>"
      }
    ]
  },
  {
    "description": "A code editor with syntax highlighting, featuring a dark theme, line numbers, and a responsive design that adapts to different screen sizes.",
    "component_list": [
      {
        "name": "CodeEditorContainer",
        "is_standalone": true,
        "description": "standalone, contains the entire code editor interface "
      },
      {
        "name": "CodeEditorBody",
        "is_standalone": true,
        "description": "standalone, contains the code lines and syntax highlighting "
      },
      {
        "name": "LineNumber",
        "is_standalone": true,
        "description": "standalone, displays a single line number "
      },
      {
        "name": "CodeLine",
        "is_standalone": false,
        "description": "takes children, represents a single line of code with syntax highlighting "
      },
      {
        "name": "CodeSyntaxHighlight",
        "is_standalone": true,
        "description": "standalone, applies syntax highlighting to a code snippet "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 mt-4 bg-gray-800 rounded\">\n  <CodeEditorContainer>\n    <CodeEditorBody>\n      <LineNumber />\n      <CodeLine>\n        <!-- code line content -->\n      </CodeLine>\n      <!-- more code lines ... -->\n    </CodeEditorBody>\n  </CodeEditorContainer>\n</div>\n",
    "component_html": [
      {
        "name": "CodeEditorContainer",
        "html": "<div class=\"flex flex-col h-screen overflow-hidden\">  {children}</div>"
      },
      {
        "name": "CodeEditorBody",
        "html": "<div class=\"flex-1 overflow-auto p-2\">  {children}</div>"
      },
      {
        "name": "LineNumber",
        "html": "<span class=\"text-gray-500\">{line_number}</span>"
      },
      {
        "name": "CodeLine",
        "html": "<div class=\"flex items-center\">  <LineNumber />  <CodeSyntaxHighlight>    {children}  </CodeSyntaxHighlight></div>"
      },
      {
        "name": "CodeSyntaxHighlight",
        "html": "<span class=\"text-green-300\">{code_snippet}</span>"
      }
    ]
  },
  {
    "description": "The UI should display a file navigation system for a repository, with a tree-like structure showing folders and files. It should be responsive, mobile-first, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "RepositoryNav",
        "is_standalone": true,
        "description": "The top-level component that contains the navigation system. **Standalone** "
      },
      {
        "name": "FolderNav",
        "is_standalone": false,
        "description": "A component representing a folder in the repository. **Takes children** "
      },
      {
        "name": "FileNav",
        "is_standalone": true,
        "description": "A component representing a file in the repository. **Standalone** "
      },
      {
        "name": "NavTreeView",
        "is_standalone": false,
        "description": "A component that displays a tree view of the repository structure. **Takes children** "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <RepositoryNav>\n    <NavTreeView>\n      <FolderNav name=\"Root Folder\">\n        <!-- folder contents here -->\n      </FolderNav>\n    </NavTreeView>\n  </RepositoryNav>\n</div>\n",
    "component_html": [
      {
        "name": "RepositoryNav",
        "html": "<nav class=\"bg-white shadow-md rounded\">  <div class=\"px-4 py-3 border-b border-gray-200\">    <h2>{repositoryName}</h2>  </div>  <div class=\"p-4\">    {children}  </div></nav>"
      },
      {
        "name": "FolderNav",
        "html": "<div class=\"flex items-center py-2 pl-4\">  <i class=\"fas fa-folder text-gray-500 mr-2\"></i>  <span class=\"text-sm\">{name}</span>  <i class=\"fas fa-chevron-down text-gray-500 ml-auto\"></i>  <div class=\"flex-grow\"></div>  <button class=\"text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\">    <i class=\"fas fa-ellipsis-h\"></i>  </button>  <div class=\"hidden\">{children}</div></div>"
      },
      {
        "name": "FileNav",
        "html": "<div class=\"flex items-center py-2 pl-4\">  <i class=\"fas fa-file text-gray-500 mr-2\"></i>  <span class=\"text-sm\">{name}</span>  <div class=\"flex-grow\"></div>  <button class=\"text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\">    <i class=\"fas fa-ellipsis-h\"></i>  </button></div>"
      },
      {
        "name": "NavTreeView",
        "html": "<ul class=\"list-none pl-0 mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first interface that displays a list of collaborators with their corresponding permissions. The list should be organized in a table format with columns for the collaborator's name, role, and actions (e.g., edit, delete). The table should be interactive, allowing users to sort and filter the data. There should also be a search bar to find specific collaborators.",
    "component_list": [
      {
        "name": "CollaboratorTable",
        "is_standalone": true,
        "description": "A standalone component that renders a table with columns for collaborator information and actions. "
      },
      {
        "name": "CollaboratorRow",
        "is_standalone": false,
        "description": "A component that takes children, representing a single row in the table with information about a collaborator. "
      },
      {
        "name": "CollaboratorCell",
        "is_standalone": true,
        "description": "A standalone component that renders a single cell in the table. "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "A standalone component that renders a search input field. "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "A standalone component that renders a button for editing or deleting a collaborator. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <SearchBar/>\n  <CollaboratorTable>\n    <CollaboratorRow>\n      <CollaboratorCell>{collaborator_name}</CollaboratorCell>\n      <CollaboratorCell>{collaborator_role}</CollaboratorCell>\n      <CollaboratorCell>\n        <ActionButton>Edit</ActionButton>\n        <ActionButton>Delete</ActionButton>\n      </CollaboratorCell>\n    </CollaboratorRow>\n  </CollaboratorTable>\n</div>\n",
    "component_html": [
      {
        "name": "CollaboratorTable",
        "html": "<table class=\"w-full border-collapse\">  <thead>    <tr>      <th class=\"px-4 py-2\">Name</th>      <th class=\"px-4 py-2\">Role</th>      <th class=\"px-4 py-2\">Actions</th>    </tr>  </thead>  <tbody>    {children}  </tbody></table>"
      },
      {
        "name": "CollaboratorRow",
        "html": "<tr class=\"hover:bg-gray-100\">  {children}</tr>"
      },
      {
        "name": "CollaboratorCell",
        "html": "<td class=\"px-4 py-2\">{children}</td>"
      },
      {
        "name": "SearchBar",
        "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search collaborators\"/>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{children}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first comment and discussion forum with a simple and clean design. It should display a list of comments with the most recent comments at the top, along with a text input field for users to add new comments. Each comment should display the username, comment text, and a timestamp.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "A standalone component that displays a list of comments. "
      },
      {
        "name": "Comment",
        "is_standalone": false,
        "description": "A component that displays a single comment, takes children (the comment text). "
      },
      {
        "name": "CommentForm",
        "is_standalone": true,
        "description": "A standalone component that displays a text input field for users to add new comments. "
      },
      {
        "name": "CommentHeader",
        "is_standalone": false,
        "description": "A component that displays the username and timestamp of a comment, takes children (the username and timestamp). "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread>\n    <!-- List of comments will be rendered here -->\n  </CommentThread>\n  <CommentForm />\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<div class=\"space-y-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex items-start mb-4\">  <CommentHeader>{username} - {timestamp}</CommentHeader>  <p class=\"ml-4\">{children}</p></div>"
      },
      {
        "name": "CommentForm",
        "html": "<form class=\"flex mb-4\">  <input type=\"text\" class=\"w-full px-4 py-2\" placeholder=\"Add a comment...\" />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Post</button></form>"
      },
      {
        "name": "CommentHeader",
        "html": "<p class=\"text-gray-600 text-sm\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a vertical timeline of code review and approval workflow, with each step represented by a circular icon and a brief description. The timeline should be responsive and adaptable to different screen sizes.",
    "component_list": [
      {
        "name": "CodeReviewStep",
        "is_standalone": true,
        "description": "A standalone component representing a single step in the code review process. "
      },
      {
        "name": "Timeline",
        "is_standalone": false,
        "description": "A component that takes children, which are `CodeReviewStep` components. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <Timeline>\n    <CodeReviewStep />\n    <CodeReviewStep />\n    <CodeReviewStep />\n    <!-- Add more CodeReviewStep components as needed -->\n  </Timeline>\n</div>\n",
    "component_html": [
      {
        "name": "CodeReviewStep",
        "html": "<div className=\"flex items-center mb-4\">  <div className=\"w-8 h-8 bg-orange-500 rounded-full text-white text-lg\">{step_icon}</div>  <div className=\"ml-4\">    <p className=\"text-lg\">{step_description}</p>    <small className=\"text-gray-600\">{step_status}</small>  </div></div>"
      },
      {
        "name": "Timeline",
        "html": "<div className=\"flex flex-col items-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first, and accessible personalized dashboard that displays project insights. The dashboard should have a clean and minimalistic design, with clear typography and sufficient whitespace. It should display key project metrics, such as project completion percentage, task lists, and upcoming deadlines. The dashboard should also have a section for quick links to frequently accessed project resources.",
    "component_list": [
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "(standalone): Displays the dashboard title and navigation links. "
      },
      {
        "name": "ProjectMetrics",
        "is_standalone": true,
        "description": "(standalone): Displays key project metrics, such as project completion percentage and upcoming deadlines. "
      },
      {
        "name": "TaskList",
        "is_standalone": false,
        "description": "(takes children): Displays a list of tasks with checkboxes and task names. "
      },
      {
        "name": "QuickLinks",
        "is_standalone": true,
        "description": "(standalone): Displays a list of quick links to frequently accessed project resources. "
      },
      {
        "name": "MetricCard",
        "is_standalone": true,
        "description": "(standalone): Displays a single project metric, such as project completion percentage. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <DashboardHeader />\n  <div className=\"flex flex-wrap -mx-4\">\n    <div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <ProjectMetrics />\n    </div>\n    <div className=\"w-full md:w-1/2 xl:w-2/3 p-4\">\n      <TaskList>\n        <!-- task list items will be inserted here -->\n      </TaskList>\n    </div>\n  </div>\n  <QuickLinks />\n</div>\n",
    "component_html": [
      {
        "name": "DashboardHeader",
        "html": "<header className=\"bg-gray-200 p-4\">  <h1 className=\"text-2xl\">{dashboard_title}</h1>  <nav>    <ul className=\"flex justify-end\">      <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>      <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>    </ul>  </nav></header>"
      },
      {
        "name": "ProjectMetrics",
        "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Project Metrics</h2>  <ul className=\"list-none mb-0\">    <li><MetricCard label=\"Project Completion\" value={completion_percentage}% /></li>    <li><MetricCard label=\"Upcoming Deadline\" value={deadline_date} /></li>  </ul></section>"
      },
      {
        "name": "TaskList",
        "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "QuickLinks",
        "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Quick Links</h2>  <ul className=\"list-none mb-0\">    <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>    <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>  </ul></section>"
      },
      {
        "name": "MetricCard",
        "html": "<div className=\"bg-white p-4\">  <h3 className=\"text-lg\">{label}</h3>  <p className=\"text-3xl\">{value}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first layout that displays a documentation editor with an integrated wiki. The editor should take up most of the screen, with a sidebar containing a list of wiki pages. The layout should be clean, simple, and easy to use.",
    "component_list": [
      {
        "name": "DocumentationEditor",
        "is_standalone": true,
        "description": "(standalone) - The main text editor component. "
      },
      {
        "name": "WikiSidebar",
        "is_standalone": true,
        "description": "(standalone) - The sidebar component that lists wiki pages. "
      },
      {
        "name": "WikiPageItem",
        "is_standalone": false,
        "description": "(takes children) - A single item in the wiki sidebar, representing a wiki page. "
      }
    ],
    "main_html": "<div class=\"flex h-screen overflow-hidden\">\n  <WikiSidebar />\n  <DocumentationEditor />\n</div>\n",
    "component_html": [
      {
        "name": "DocumentationEditor",
        "html": "<div class=\"flex-1 overflow-y-auto p-4\">  <textarea class=\"w-full h-full p-2 bg-white border border-gray-200 rounded\" /></div>"
      },
      {
        "name": "WikiSidebar",
        "html": "<div class=\"w-64 bg-gray-100 p-2\">  <ul class=\"list-none mb-0\">    {wiki_pages.map((page) => (      <WikiPageItem key={page.id}>{page.title}</WikiPageItem>    ))}  </ul></div>"
      },
      {
        "name": "WikiPageItem",
        "html": "<li class=\"py-2 px-4 hover:bg-gray-200\">  <a href={`/wiki/${{page_slug}}`}>{children}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information, including their username, profile picture, reputation points, and badges earned. The profile picture should be circular and have a hover effect. The reputation points should be displayed in a separate section with a progress bar. The badges earned should be displayed in a horizontal list.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile information. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile picture. "
      },
      {
        "name": "ReputationSection",
        "is_standalone": true,
        "description": "Standalone component that displays the user's reputation points and progress bar. "
      },
      {
        "name": "BadgeList",
        "is_standalone": false,
        "description": "Component that takes children (Badge components). "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "Standalone component that displays a single badge. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <UserProfileCard />\n  <ReputationSection />\n  <BadgeList>\n    <!-- badge components will be inserted here -->\n  </BadgeList>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"flex flex-col items-center mb-4\">  <ProfilePicture />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src=\"{profile_picture_url}\" alt=\"Profile Picture\" class=\"w-24 h-24 rounded-full hover:shadow-md\" />"
      },
      {
        "name": "ReputationSection",
        "html": "<section class=\"mb-4\">  <h3 class=\"text-lg font-bold\">Reputation</h3>  <div class=\"flex items-center\">    <p class=\"mr-2\">{reputation_points}</p>    <div class=\"w-full bg-gray-200 h-4\">      <div class=\"bg-orange-500 h-4\" style={{ width: `${reputation_progress}%` }}></div>    </div>  </div></section>"
      },
      {
        "name": "BadgeList",
        "html": "<ul class=\"flex flex-wrap justify-center mb-4\">  {children}</ul>"
      },
      {
        "name": "Badge",
        "html": "<li class=\"mr-2\">  <img src=\"{badge_icon_url}\" alt=\"Badge Icon\" class=\"w-8 h-8\" />  <p class=\"text-gray-600\">{badge_name}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first search and filtering tool that allows users to search for repositories by keyword, select filters, and view search results. The UI should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that includes a search input field and search button. "
      },
      {
        "name": "FilterPanel",
        "is_standalone": true,
        "description": "standalone component that includes filter options (e.g. repository type, language). "
      },
      {
        "name": "RepositoryCard",
        "is_standalone": false,
        "description": "component that takes children (repository details) and displays them in a card layout. "
      },
      {
        "name": "RepositoryList",
        "is_standalone": false,
        "description": "component that takes children (repository cards) and displays them in a list layout. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <FilterPanel />\n  <RepositoryList>\n    <!-- repository cards will be inserted here -->\n  </RepositoryList>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center mb-4\">  <input type=\"search\" class=\"w-full px-4 py-2\" placeholder=\"Search repositories\" />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Search</button></div>"
      },
      {
        "name": "FilterPanel",
        "html": "<div class=\"mb-4\">  <h2 class=\"text-lg font-bold\">Filters</h2>  <ul class=\"list-none mb-4\">    <li>      <label>Repository type:</label>      <select class=\"block w-full\">        <option value=\"\">All</option>        <option value=\"public\">Public</option>        <option value=\"private\">Private</option>      </select>    </li>    <li>      <label>Language:</label>      <select class=\"block w-full\">        <option value=\"\">All</option>        <option value=\"javascript\">JavaScript</option>        <option value=\"python\">Python</option>      </select>    </li>  </ul></div>"
      },
      {
        "name": "RepositoryCard",
        "html": "<div class=\"bg-white p-4 rounded mb-4 shadow-md\">  <h3 class=\"text-lg font-bold\">{repository_name}</h3>  <p>{repository_description}</p>  <p>Stars: {stars_count}</p>  <p>Forks: {forks_count}</p></div>"
      },
      {
        "name": "RepositoryList",
        "html": "<ul class=\"list-none\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a graph visualization component that displays a dependency graph, where nodes represent dependencies and edges represent the relationships between them. The graph should be interactive, allowing users to hover over nodes to highlight connected nodes and edges.",
    "component_list": [
      {
        "name": "DependencyGraph",
        "is_standalone": true,
        "description": "The top-level component that wraps the graph visualization. (Standalone) "
      },
      {
        "name": "GraphNode",
        "is_standalone": false,
        "description": "A single node in the graph, representing a dependency. (Takes children) "
      },
      {
        "name": "GraphEdge",
        "is_standalone": true,
        "description": "A connection between two nodes in the graph, representing a relationship between dependencies. (Standalone) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <DependencyGraph>\n    <!-- graph nodes and edges will be inserted here -->\n  </DependencyGraph>\n</div>\n",
    "component_html": [
      {
        "name": "DependencyGraph",
        "html": "<div class=\"w-full h-full overflow-hidden\">  {children}</div>"
      },
      {
        "name": "GraphNode",
        "html": "<div class=\"bg-white shadow-md rounded p-2 w-32 h-32 flex justify-center items-center\">  <p class=\"text-lg\">{nodeName}</p>  <p class=\"text-sm\">{nodeDescription}</p></div>"
      },
      {
        "name": "GraphEdge",
        "html": "<div class=\"absolute\">  <div class=\"w-1 h-full bg-gray-300\"></div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of commits with commit hashes, dates, and commit messages. Each commit should have a button to view the blame for that commit. The blame viewer should display the file changes for each commit. The UI should be responsive, mobile-friendly, and accessible.",
    "component_list": [
      {
        "name": "CommitList",
        "is_standalone": true,
        "description": "standalone component that displays a list of commits "
      },
      {
        "name": "CommitItem",
        "is_standalone": false,
        "description": "component that displays a single commit, takes children (e.g. `BlameButton`) "
      },
      {
        "name": "BlameButton",
        "is_standalone": true,
        "description": "standalone component that displays a button to view the blame for a commit "
      },
      {
        "name": "BlameViewer",
        "is_standalone": true,
        "description": "standalone component that displays the file changes for a commit "
      },
      {
        "name": "FileChange",
        "is_standalone": false,
        "description": "component that displays a file change, takes children (e.g. `LineChange` elements) "
      },
      {
        "name": "LineChange",
        "is_standalone": true,
        "description": "standalone component that displays a line change in a file "
      }
    ],
    "main_html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Commit History</h1>\n  <CommitList/>\n</main>\n",
    "component_html": [
      {
        "name": "CommitList",
        "html": "<ul class=\"list-none mb-4\">  {commit_items}</ul>"
      },
      {
        "name": "CommitItem",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <span class=\"text-xs text-gray-600\">{commit_hash}</span>  <span class=\"text-sm text-gray-800\">{commit_message}</span>  <BlameButton/></li>"
      },
      {
        "name": "BlameButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  View Blame</button>"
      },
      {
        "name": "BlameViewer",
        "html": "<div class=\"max-w-md mx-auto p-4\">  <h2 class=\"text-lg font-bold mb-2\">Blame for {commit_hash}</h2>  <ul class=\"list-none mb-4\">    {file_changes}  </ul></div>"
      },
      {
        "name": "FileChange",
        "html": "<li class=\"py-2 border-b border-gray-200\">  <span class=\"text-xs text-gray-600\">{file_name}</span>  <ul class=\"list-none mb-4\">    {line_changes}  </ul></li>"
      },
      {
        "name": "LineChange",
        "html": "<li class=\"py-1\">  <span class=\"text-xs text-gray-600\">+{added_lines} -{removed_lines}</span>  <code class=\"text-sm text-gray-800\">{line_content}</code></li>"
      }
    ]
  },
  {
    "description": "The UI should be a dashboard that displays a list of pull requests with their corresponding information. It should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "PullRequestList",
        "is_standalone": true,
        "description": "A standalone component that displays a list of pull requests. "
      },
      {
        "name": "PullRequestCard",
        "is_standalone": false,
        "description": "A component that displays a single pull request's information. Takes children. "
      },
      {
        "name": "PullRequestInfo",
        "is_standalone": false,
        "description": "A component that displays the details of a pull request. Takes children. "
      },
      {
        "name": "AuthorAvatar",
        "is_standalone": true,
        "description": "A standalone component that displays the author's avatar. "
      },
      {
        "name": "StatusLabel",
        "is_standalone": true,
        "description": "A standalone component that displays the status of the pull request. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h1 className=\"text-2xl font-bold mb-4\">Pull Requests</h1>\n  <PullRequestList />\n</div>\n",
    "component_html": [
      {
        "name": "PullRequestList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "PullRequestCard",
        "html": "<li className=\"bg-white shadow-md rounded p-4 mb-4\">  <AuthorAvatar />  <PullRequestInfo>{children}</PullRequestInfo>  <StatusLabel /></li>"
      },
      {
        "name": "PullRequestInfo",
        "html": "<div className=\"flex flex-wrap justify-between mb-2\">  <p className=\"text-lg font-bold\">{pull_request_title}</p>  <p className=\"text-gray-600\">{pull_request_description}</p>  <p className=\"text-gray-600\">Updated {updated_at}</p>  {children}</div>"
      },
      {
        "name": "AuthorAvatar",
        "html": "<img src=\"{author_avatar_url}\" alt=\"{author_name}\" className=\"w-8 h-8 rounded-full mr-2\" />"
      },
      {
        "name": "StatusLabel",
        "html": "<span className=\"bg-{status_color} text-white py-1 px-2 rounded\">{status}</span>"
      }
    ]
  },
  {
    "description": "The UI should be a hero header section with a background image that takes up the full width and height of the viewport. The background image should be responsive and resize accordingly on different screen sizes. There should be a title and a subtitle overlayed on top of the background image. The title should be large and prominent, while the subtitle should be smaller and provide additional context.",
    "component_list": [
      {
        "name": "HeroHeader",
        "is_standalone": true,
        "description": "Standalone component that contains the background image and overlayed text. "
      },
      {
        "name": "HeroTitle",
        "is_standalone": true,
        "description": "Standalone component that displays the main title. "
      },
      {
        "name": "HeroSubtitle",
        "is_standalone": true,
        "description": "Standalone component that displays the subtitle. "
      }
    ],
    "main_html": "<section class=\"h-screen w-full relative\">\n  <HeroHeader>\n    <HeroTitle>{hero_title}</HeroTitle>\n    <HeroSubtitle>{hero_subtitle}</HeroSubtitle>\n  </HeroHeader>\n</section>\n",
    "component_html": [
      {
        "name": "HeroHeader",
        "html": "<div class=\"h-screen w-full bg-cover bg-center\" style={`background-image: url(${background_image});`}>  <div class=\"container mx-auto p-4 flex items-center h-screen\">    {children}  </div></div>"
      },
      {
        "name": "HeroTitle",
        "html": "<h1 class=\"text-4xl md:text-5xl lg:text-6xl font-bold\">{children}</h1>"
      },
      {
        "name": "HeroSubtitle",
        "html": "<p class=\"text-lg md:text-xl lg:text-2xl\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a product showcase with a grid of animated cards. Each card should have a hover effect and display a product image, title, and description. The grid should be responsive and adjust to different screen sizes.",
    "component_list": [
      {
        "name": "ProductCard",
        "is_standalone": true,
        "description": "(standalone): A single product card with a hover effect. "
      },
      {
        "name": "ProductGrid",
        "is_standalone": false,
        "description": "(takes children): A grid container that wraps multiple `ProductCard` components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProductGrid>\n    <ProductCard/>\n    <ProductCard/>\n    <ProductCard/>\n    <!-- Add more ProductCard components here -->\n  </ProductGrid>\n</div>\n",
    "component_html": [
      {
        "name": "ProductCard",
        "html": "<div class=\"bg-white shadow-md rounded overflow-hidden transition duration-500 hover:scale-105\">  <img src={product_image} alt={product_name} class=\"w-full h-48 object-cover rounded-t\" />  <div class=\"p-4\">    <h2 class=\"text-lg font-bold\">{product_name}</h2>    <p class=\"text-gray-600\">{product_description}</p>  </div></div>"
      },
      {
        "name": "ProductGrid",
        "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a prominent call-to-action (CTA) button section that encourages users to take a specific action. The section should be full-width, with a bold background color, and a contrasting CTA button that stands out. The section should be responsive, with the button size and spacing adjusting based on screen size.",
    "component_list": [
      {
        "name": "CTASection",
        "is_standalone": true,
        "description": "- standalone component that contains the entire CTA section "
      },
      {
        "name": "CTAButton",
        "is_standalone": true,
        "description": "- standalone component that represents the call-to-action button "
      }
    ],
    "main_html": "<section class=\"relative pt-12 pb-20 lg:pt-20 lg:pb-32\">\n  <div class=\"container max-w-md mx-auto p-4 lg:p-8\">\n    <CTASection />\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "CTASection",
        "html": "<div class=\"bg-orange-500 text-white p-4 lg:p-8\">  <h2 class=\"text-2xl lg:text-3xl\">{headline}</h2>  <p class=\"text-lg lg:text-xl\">{description}</p>  <CTAButton /></div>"
      },
      {
        "name": "CTAButton",
        "html": "<button class=\"bg-white hover:bg-gray-200 text-orange-500 font-bold py-2 px-4 rounded\">  {button_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a customer testimonial with a profile picture, name, and rating. It should be responsive, mobile-friendly, and accessible.",
    "component_list": [
      {
        "name": "TestimonialCard",
        "is_standalone": true,
        "description": "(standalone): The outer container for the testimonial. "
      },
      {
        "name": "UserProfile",
        "is_standalone": true,
        "description": "(standalone): Displays the profile picture, name, and rating. "
      },
      {
        "name": "TestimonialText",
        "is_standalone": false,
        "description": "(takes children): Displays the testimonial text. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto lg:max-w-lg p-4 lg:p-6 bg-white rounded shadow-md\">\n  <TestimonialCard>\n    <UserProfile />\n    <TestimonialText />\n  </TestimonialCard>\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialCard",
        "html": "<div class=\"flex flex-col lg:flex-row items-center\">  {children}</div>"
      },
      {
        "name": "UserProfile",
        "html": "<div class=\"flex items-center\">  <img src=\"{profile_picture_url}\" alt=\"{username}\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <p class=\"text-lg font-bold\">{username}</p>    <p class=\"text-gray-600\">{rating} <span class=\"text-xs\">{rating_unit}</span></p>  </div></div>"
      },
      {
        "name": "TestimonialText",
        "html": "<p class=\"text-lg\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first split-screen comparison section that displays two columns side-by-side on larger screens and stacked on smaller screens. Each column should have a heading, a paragraph of text, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "SplitScreenContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the split-screen section. "
      },
      {
        "name": "ComparisonColumn",
        "is_standalone": false,
        "description": "(takes children): A single column in the split-screen section. "
      },
      {
        "name": "ComparisonHeading",
        "is_standalone": true,
        "description": "(standalone): A heading element for a comparison column. "
      },
      {
        "name": "ComparisonText",
        "is_standalone": true,
        "description": "(standalone): A paragraph of text for a comparison column. "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "(standalone): A CTA button for a comparison column. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 lg:p-6\">\n  <SplitScreenContainer>\n    <ComparisonColumn>\n      <ComparisonHeading>{option_a_heading}</ComparisonHeading>\n      <ComparisonText>{option_a_text}</ComparisonText>\n      <CallToActionButton>{option_a_cta_text}</CallToActionButton>\n    </ComparisonColumn>\n    <ComparisonColumn>\n      <ComparisonHeading>{option_b_heading}</ComparisonHeading>\n      <ComparisonText>{option_b_text}</ComparisonText>\n      <CallToActionButton>{option_b_cta_text}</CallToActionButton>\n    </ComparisonColumn>\n  </SplitScreenContainer>\n</div>\n",
    "component_html": [
      {
        "name": "SplitScreenContainer",
        "html": "<div class=\"flex flex-col lg:flex-row justify-center\">  {children}</div>"
      },
      {
        "name": "ComparisonColumn",
        "html": "<div class=\"lg:w-1/2 p-4 lg:p-6\">  {children}</div>"
      },
      {
        "name": "ComparisonHeading",
        "html": "<h2 class=\"text-2xl font-bold\">{children}</h2>"
      },
      {
        "name": "ComparisonText",
        "html": "<p class=\"text-lg\">{children}</p>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive section that displays animated counter statistics on a dark-colored background. It should be mobile-first, accessible, SEO-friendly, and well-documented.",
    "component_list": [
      {
        "name": "AnimatedCounterStatisticsSection",
        "is_standalone": true,
        "description": "(standalone): The main section component. "
      },
      {
        "name": "CounterStatistic",
        "is_standalone": false,
        "description": "(takes children): A single counter statistic component. "
      },
      {
        "name": "AnimatedNumber",
        "is_standalone": true,
        "description": "(standalone): An animated number component. "
      }
    ],
    "main_html": "<section class=\"bg-dark py-20\">\n  <div class=\"container mx-auto p-4 lg:p-8\">\n    <h2 class=\"text-3xl font-bold mb-4\">{section_title}</h2>\n    <div class=\"flex flex-wrap justify-center\">\n      <CounterStatistic/>\n      <CounterStatistic/>\n      <CounterStatistic/>\n    </div>\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "AnimatedCounterStatisticsSection",
        "html": "<section class=\"bg-dark py-20\">  <div class=\"container mx-auto p-4 lg:p-8\">    {children}  </div></section>"
      },
      {
        "name": "CounterStatistic",
        "html": "<div class=\"w-1/2 md:w-1/3 xl:w-1/4 p-4\">  <AnimatedNumber/>  <p class=\"text-lg\">{statistic_label}</p></div>"
      },
      {
        "name": "AnimatedNumber",
        "html": "<span class=\"text-4xl font-bold\">{animated_number}</span>"
      }
    ]
  },
  {
    "description": "The UI should be a full-screen video background with overlay text. The video background should be responsive and adapt to different screen sizes. The overlay text should be centered and easily readable.",
    "component_list": [
      {
        "name": "VideoBackground",
        "is_standalone": true,
        "description": "standalone component that renders a full-screen video background "
      },
      {
        "name": "OverlayText",
        "is_standalone": true,
        "description": "standalone component that renders the overlay text "
      }
    ],
    "main_html": "<div class=\"h-screen w-full\">\n  <VideoBackground/>\n  <div class=\"absolute inset-0 flex justify-center items-center\">\n    <OverlayText/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "VideoBackground",
        "html": "<video autoplay muted loop class=\"h-full w-full object-cover\">  <source src=\"{video_source}\" type=\"video/mp4\"></video>"
      },
      {
        "name": "OverlayText",
        "html": "<h1 class=\"text-3xl text-white\">{overlay_text}</h1>"
      }
    ]
  },
  {
    "description": "The UI should be a interactive product demo simulation that showcases a product's features in a responsive, mobile-first, accessible, and SEO-friendly way. The simulation should have a header with a product title, a hero section with a product image, a features section with interactive demo buttons, and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "HeaderComponent",
        "is_standalone": true,
        "description": "(standalone): displays the product title "
      },
      {
        "name": "HeroComponent",
        "is_standalone": true,
        "description": "(standalone): displays the product image "
      },
      {
        "name": "FeaturesComponent",
        "is_standalone": false,
        "description": "(takes children): contains interactive demo buttons "
      },
      {
        "name": "DemoButtonComponent",
        "is_standalone": true,
        "description": "(standalone): a single interactive demo button "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "(standalone): the CTA button "
      }
    ],
    "main_html": "<div class=\"container mx-auto px-4 pt-4 lg:px-12 lg:pt-8\">\n  <HeaderComponent />\n  <HeroComponent />\n  <FeaturesComponent>\n    <!-- Demo buttons will be inserted here -->\n  </FeaturesComponent>\n  <CallToActionButton />\n</div>\n",
    "component_html": [
      {
        "name": "HeaderComponent",
        "html": "<header class=\"mb-4\">  <h1 class=\"text-3xl font-bold\">{product_title}</h1></header>"
      },
      {
        "name": "HeroComponent",
        "html": "<section class=\"hero mb-8\">  <img src={product_image_url} alt=\"{product_title}\" class=\"w-full h-64 object-cover object-center\" /></section>"
      },
      {
        "name": "FeaturesComponent",
        "html": "<section class=\"features mb-8\">  <ul class=\"flex flex-wrap justify-center\">    <!-- Demo buttons will be inserted here -->  </ul></section>"
      },
      {
        "name": "DemoButtonComponent",
        "html": "<li class=\"mr-4 mb-4\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {demo_button_label}  </button></li>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {cta_button_label}</button>"
      }
    ]
  },
  {
    "description": "A featured story section with a large header text, responsive and mobile-friendly, with a clean and simple design.",
    "component_list": [
      {
        "name": "FeaturedStory",
        "is_standalone": true,
        "description": "Standalone component that contains the large header text and story information. "
      },
      {
        "name": "HeaderTitle",
        "is_standalone": true,
        "description": "Standalone component for the large header text. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4\">\n  <FeaturedStory/>\n</section>\n",
    "component_html": [
      {
        "name": "FeaturedStory",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  <HeaderTitle>{story_title}</HeaderTitle>  <p className=\"text-lg\">{story_text}</p></div>"
      },
      {
        "name": "HeaderTitle",
        "html": "<h1 className=\"text-3xl font-bold\">{title_text}</h1>"
      }
    ]
  },
  {
    "description": "A responsive grid-based product gallery section that displays a list of products with their images, names, and prices. The grid should be 2 columns on small screens, 3 columns on medium screens, and 4 columns on large screens.",
    "component_list": [
      {
        "name": "ProductGallery",
        "is_standalone": true,
        "description": "(standalone) - The container component for the grid-based product gallery. "
      },
      {
        "name": "ProductCard",
        "is_standalone": false,
        "description": "(takes children) - A single product card component that displays the product image, name, and price. "
      }
    ],
    "main_html": "<section className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Our Products</h2>\n  <ProductGallery>\n    <!-- Grid of product cards will be rendered here -->\n  </ProductGallery>\n</section>\n",
    "component_html": [
      {
        "name": "ProductGallery",
        "html": "<div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">  {children}</div>"
      },
      {
        "name": "ProductCard",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  <img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />  <h3 className=\"text-lg font-bold\">{product_name}</h3>  <p className=\"text-gray-600\">{product_price}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should display a hero section with a heading, paragraph, and a call-to-action button. As the user scrolls, the heading and paragraph should animate in, and the call-to-action button should slide up from the bottom of the screen.",
    "component_list": [
      {
        "name": "HeroSection",
        "is_standalone": true,
        "description": "(standalone): The container for the hero section. "
      },
      {
        "name": "AnimatedHeading",
        "is_standalone": false,
        "description": "(takes children): The animated heading component. "
      },
      {
        "name": "AnimatedParagraph",
        "is_standalone": false,
        "description": "(takes children): The animated paragraph component. "
      },
      {
        "name": "CallToActionButton",
        "is_standalone": true,
        "description": "(standalone): The call-to-action button. "
      }
    ],
    "main_html": "<div className=\"h-screen overflow-y-scroll\">\n  <HeroSection>\n    <AnimatedHeading>Scroll-Activated Animation Effect</AnimatedHeading>\n    <AnimatedParagraph>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</AnimatedParagraph>\n    <CallToActionButton>Learn More</CallToActionButton>\n  </HeroSection>\n</div>\n",
    "component_html": [
      {
        "name": "HeroSection",
        "html": "<div className=\"h-screen flex items-center justify-center\">  {children}</div>"
      },
      {
        "name": "AnimatedHeading",
        "html": "<h1 className=\"text-4xl font-bold mb-4 opacity-0 translate-y-10\">  {children}</h1>"
      },
      {
        "name": "AnimatedParagraph",
        "html": "<p className=\"text-lg mb-8 opacity-0 translate-y-10\">  {children}</p>"
      },
      {
        "name": "CallToActionButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded translate-y-full\">  {children}</button>"
      }
    ]
  },
  {
    "description": "The Hero Section should be a full-width, full-height section that showcases a bold statement about the product. It should have a prominent background image or color, a large heading, and a call-to-action (CTA) button. The section should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "HeroContainer",
        "is_standalone": true,
        "description": "A standalone component that contains the Hero Section. "
      },
      {
        "name": "HeroBackground",
        "is_standalone": true,
        "description": "A standalone component that displays the background image or color. "
      },
      {
        "name": "HeroContent",
        "is_standalone": false,
        "description": "A component that contains the heading, text, and CTA button. It takes children. "
      },
      {
        "name": "HeroHeading",
        "is_standalone": true,
        "description": "A standalone component that displays the bold statement. "
      },
      {
        "name": "HeroCTA",
        "is_standalone": true,
        "description": "A standalone component that displays the call-to-action button. "
      }
    ],
    "main_html": "<section class=\"h-screen flex items-center justify-center\">\n  <HeroContainer>\n    <HeroBackground />\n    <HeroContent>\n      <HeroHeading />\n      <p>{hero_text}</p>\n      <HeroCTA />\n    </HeroContent>\n  </HeroContainer>\n</section>\n",
    "component_html": [
      {
        "name": "HeroContainer",
        "html": "<div class=\"container mx-auto p-4 md:p-8\">  {children}</div>"
      },
      {
        "name": "HeroBackground",
        "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-cover\" style={{ backgroundImage: `{background_image}` }}></div>"
      },
      {
        "name": "HeroContent",
        "html": "<div class=\"max-w-md text-center\">  {children}</div>"
      },
      {
        "name": "HeroHeading",
        "html": "<h1 class=\"text-3xl font-bold\">{hero_heading}</h1>"
      },
      {
        "name": "HeroCTA",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{cta_text}</button>"
      }
    ]
  },
  {
    "description": "A responsive grid layout with 3-4 columns, showcasing key benefits of a product or service. Each grid item should have an icon, a heading, and a brief description.",
    "component_list": [
      {
        "name": "FeatureItem",
        "is_standalone": true,
        "description": "(standalone): A single feature item in the grid, containing an icon, heading, and description. "
      },
      {
        "name": "FeaturesGrid",
        "is_standalone": false,
        "description": "(takes children): The container element for the feature items, managing the grid layout. "
      }
    ],
    "main_html": "<section class=\"container mx-auto p-4 lg:p-8\">\n  <FeaturesGrid>\n    <FeatureItem/>\n    <FeatureItem/>\n    <FeatureItem/>\n    <!-- Add more FeatureItem components as needed -->\n  </FeaturesGrid>\n</section>\n",
    "component_html": [
      {
        "name": "FeatureItem",
        "html": "<div class=\"flex flex-col items-center p-4 lg:p-6\">  <i class=\"text-3xl {icon_class} mb-4\" /> <!-- icon -->  <h3 class=\"text-lg font-bold\">{heading}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
      },
      {
        "name": "FeaturesGrid",
        "html": "<div class=\"grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The Testimonial Slider should display quotes from happy customers with their names and photos, enclosed in a container that can be navigated using previous and next buttons. The slider should be responsive, adapting to different screen sizes and devices.",
    "component_list": [
      {
        "name": "TestimonialSlider",
        "is_standalone": false,
        "description": "A container component that wraps the entire slider, including navigation buttons and testimonial items. (Takes children: TestimonialItem) "
      },
      {
        "name": "TestimonialItem",
        "is_standalone": true,
        "description": "A single testimonial item that displays a customer's quote, name, and photo. (Standalone) "
      },
      {
        "name": "SliderNavigation",
        "is_standalone": true,
        "description": "A component that contains previous and next buttons for navigating the slider. (Standalone) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 lg:p-8\">\n  <TestimonialSlider>\n    <TestimonialItem />\n    <TestimonialItem />\n    <!-- Add more TestimonialItem components as needed -->\n  </TestimonialSlider>\n  <SliderNavigation />\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialSlider",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  <div class=\"flex-1\">{children}</div>  <SliderNavigation /></div>"
      },
      {
        "name": "TestimonialItem",
        "html": "<div class=\"flex flex-col mb-4\">  <img src=\"{photo_url}\" alt=\"{customer_name}\" class=\"rounded-full w-16 h-16 mb-2\" />  <p class=\"text-lg\">{quote}</p>  <p class=\"text-sm\">{customer_name}</p></div>"
      },
      {
        "name": "SliderNavigation",
        "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Previous</button>  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Next</button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a product image gallery with multiple images showcasing the product from different angles. The gallery should be responsive, accessible, and SEO-friendly. On mobile devices, the gallery should be swipeable, and on desktop devices, it should have navigation arrows.",
    "component_list": [
      {
        "name": "ProductImageGallery",
        "is_standalone": false,
        "description": "The main component that contains the image gallery. This component takes children. "
      },
      {
        "name": "ProductImage",
        "is_standalone": true,
        "description": "A single image in the gallery. This component is standalone. "
      },
      {
        "name": "NavigationArrow",
        "is_standalone": true,
        "description": "An arrow button for navigating through the images. This component is standalone. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProductImageGallery>\n    <ProductImage src={image1} />\n    <ProductImage src={image2} />\n    <ProductImage src={image3} />\n    <NavigationArrow direction=\"prev\" />\n    <NavigationArrow direction=\"next\" />\n  </ProductImageGallery>\n</div>\n",
    "component_html": [
      {
        "name": "ProductImageGallery",
        "html": "<div class=\"flex justify-center\">  <div class=\"flex overflow-x-scroll snap-x\">    {children}  </div>  <div class=\"flex justify-between mt-2\">    <NavigationArrow direction=\"prev\" />    <NavigationArrow direction=\"next\" />  </div></div>"
      },
      {
        "name": "ProductImage",
        "html": "<img src={src} alt={alt} class=\"w-full h-64 object-cover rounded-md\" />"
      },
      {
        "name": "NavigationArrow",
        "html": "<button class={`text-gray-500 hover:text-gray-800 ${direction === 'prev' ? 'mr-2' : 'ml-2'}`}>  <i class=\"fas fa-arrow-${direction}\"></i></button>"
      }
    ]
  },
  {
    "description": "The Benefits Section should be a container with a heading and a list of benefits, resembling a modern and clean design. The section should be responsive, with the benefits listed in a single column on mobile devices and in multiple columns on larger screens.",
    "component_list": [
      {
        "name": "BenefitsSection",
        "is_standalone": true,
        "description": "standalone component that wraps the entire benefits section. "
      },
      {
        "name": "BenefitsHeading",
        "is_standalone": true,
        "description": "standalone component that displays the heading of the benefits section. "
      },
      {
        "name": "BenefitItem",
        "is_standalone": false,
        "description": "component that takes children to display a single benefit. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 lg:max-w-2xl lg:p-6\">\n  <BenefitsHeading />\n  <ul class=\"flex flex-wrap justify-center lg:flex-row\">\n    <BenefitItem /><BenefitItem /><BenefitItem />\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "BenefitsHeading",
        "html": "<h2 class=\"text-3xl font-bold mb-4\">{benefits_heading}</h2>"
      },
      {
        "name": "BenefitItem",
        "html": "<li class=\"p-4 md:p-6 lg:w-1/2 xl:w-1/3\">  <i class=\"mr-2\">{icon}</i>  <h3 class=\"text-lg\">{benefit_title}</h3>  <p>{benefit_description}</p></li>"
      }
    ]
  },
  {
    "description": "The Statistics Section should display impressive metrics and data in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
    "component_list": [
      {
        "name": "StatisticCard",
        "is_standalone": true,
        "description": "(standalone): A single statistic with a label, value, and optional unit. "
      },
      {
        "name": "StatisticSection",
        "is_standalone": false,
        "description": "(takes children): A container for multiple `StatisticCard` components. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md\">\n  <h2 class=\"text-2xl lg:text-3xl font-bold mb-4\">Impressive Metrics</h2>\n  <StatisticSection>\n    <StatisticCard/>\n    <StatisticCard/>\n    <StatisticCard/>\n  </StatisticSection>\n</section>\n",
    "component_html": [
      {
        "name": "StatisticSection",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "StatisticCard",
        "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-6\">  <p class=\"text-lg lg:text-xl font-bold\">{statistic_value}</p>  <p class=\"text-gray-600\">{statistic_label}</p>  <p class=\"text-gray-600\">{statistic_unit}</p></div>"
      }
    ]
  },
  {
    "description": "A responsive, mobile-first pricing table with three columns, each representing a different pricing plan. Each plan displays a title, price, and a list of features. The UI should be accessible, SEO-friendly, and well-documented.",
    "component_list": [
      {
        "name": "PricingTable",
        "is_standalone": true,
        "description": "a standalone component that contains all the pricing plans. "
      },
      {
        "name": "PricingPlan",
        "is_standalone": false,
        "description": "a component that represents a single pricing plan, takes children. "
      },
      {
        "name": "PlanFeature",
        "is_standalone": true,
        "description": "a standalone component that represents a single feature of a pricing plan. "
      }
    ],
    "main_html": "<div class=\"container max-w-md mx-auto p-4\">\n  <PricingTable>\n    <PricingPlan>\n      <!-- plan 1 content -->\n    </PricingPlan>\n    <PricingPlan>\n      <!-- plan 2 content -->\n    </PricingPlan>\n    <PricingPlan>\n      <!-- plan 3 content -->\n    </PricingPlan>\n  </PricingTable>\n</div>\n",
    "component_html": [
      {
        "name": "PricingTable",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "PricingPlan",
        "html": "<div class=\"w-full md:w-1/3 xl:w-1/3 p-6\">  <h3 class=\"text-lg font-bold\">{plan_title}</h3>  <p class=\"text-3xl font-bold\">{price}</p>  <ul>    {children}  </ul>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Sign up</button></div>"
      },
      {
        "name": "PlanFeature",
        "html": "<li class=\"text-gray-600\">{feature}</li>"
      }
    ]
  },
  {
    "description": "The UI should display a horizontal list of logos from trusted partners and clients. The logos should be scrollable on smaller screens and stack vertically on larger screens.",
    "component_list": [
      {
        "name": "LogoCarousel",
        "is_standalone": true,
        "description": "A standalone component that displays a horizontal list of logos. "
      },
      {
        "name": "LogoItem",
        "is_standalone": false,
        "description": "A component that takes children (the logo image and alt text). "
      }
    ],
    "main_html": "<div class=\"container mx-auto px-4 py-12\">\n  <h2 class=\"text-lg font-bold mb-4\">Trusted Partners and Clients</h2>\n  <LogoCarousel>\n    <!-- logos will be inserted here -->\n  </LogoCarousel>\n</div>\n",
    "component_html": [
      {
        "name": "LogoCarousel",
        "html": "<div class=\"flex overflow-x-auto py-4\">  {children}</div>"
      },
      {
        "name": "LogoItem",
        "html": "<div class=\"flex-shrink-0 mx-4\">  <img src=\"{logo_url}\" alt=\"{logo_alt_text}\" class=\"w-24 h-24 object-cover rounded-full\" /></div>"
      }
    ]
  },
  {
    "description": "The footer section should have a clean and simple design, with a dark background and white text. It should be divided into three columns: one for company information, one for quick links, and one for social media links. The layout should be responsive, with the columns stacking on top of each other on mobile devices.",
    "component_list": [
      {
        "name": "FooterSection",
        "is_standalone": true,
        "description": "(standalone): The main footer section component "
      },
      {
        "name": "FooterColumn",
        "is_standalone": false,
        "description": "(takes children): A single column within the footer section "
      },
      {
        "name": "FooterLink",
        "is_standalone": true,
        "description": "(standalone): A single link within a footer column "
      }
    ],
    "main_html": "<footer class=\"bg-gray-800 text-white py-12\">\n  <div class=\"max-w-md mx-auto px-4\">\n    <FooterSection>\n      <FooterColumn>\n        <h5 class=\"uppercase text-sm mb-4\">Company</h5>\n        <FooterLink url=\"{company_url}\">{company_name}</FooterLink>\n        <FooterLink url=\"{about_url}\">About Us</FooterLink>\n        <FooterLink url=\"{contact_url}\">Contact Us</FooterLink>\n      </FooterColumn>\n      <FooterColumn>\n        <h5 class=\"uppercase text-sm mb-4\">Quick Links</h5>\n        <FooterLink url=\"{terms_url}\">Terms of Service</FooterLink>\n        <FooterLink url=\"{privacy_url}\">Privacy Policy</FooterLink>\n        <FooterLink url=\"{faq_url}\">FAQ</FooterLink>\n      </FooterColumn>\n      <FooterColumn>\n        <h5 class=\"uppercase text-sm mb-4\">Social Media</h5>\n        <FooterLink url=\"{twitter_url}\">Twitter</FooterLink>\n        <FooterLink url=\"{facebook_url}\">Facebook</FooterLink>\n        <FooterLink url=\"{linkedin_url}\">LinkedIn</FooterLink>\n      </FooterColumn>\n    </FooterSection>\n  </div>\n</footer>\n",
    "component_html": [
      {
        "name": "FooterSection",
        "html": "<div class=\"flex justify-between flex-wrap\">{children}</div>"
      },
      {
        "name": "FooterColumn",
        "html": "<div class=\"w-full lg:w-1/3 xl:w-1/3 px-4\">{children}</div>"
      },
      {
        "name": "FooterLink",
        "html": "<a href=\"{url}\" class=\"block text-sm py-2\">{text}</a>"
      }
    ]
  },
  {
    "description": "The Hero Video UI should be a full-bleed, responsive section that takes up the entire width of the viewport, with a video playing in the background. It should have a overlay with text and a call-to-action (CTA) button.",
    "component_list": [
      {
        "name": "HeroVideoContainer",
        "is_standalone": true,
        "description": "standalone, wraps the entire hero video section "
      },
      {
        "name": "VideoOverlay",
        "is_standalone": true,
        "description": "standalone, contains text and CTA button "
      },
      {
        "name": "CTAButton",
        "is_standalone": true,
        "description": "standalone, a call-to-action button "
      }
    ],
    "main_html": "<div class=\"h-screen w-full flex justify-center\">\n  <HeroVideoContainer>\n    <VideoOverlay>\n      <h1>{hero_title}</h1>\n      <p>{hero_description}</p>\n      <CTAButton>Learn More</CTAButton>\n    </VideoOverlay>\n  </HeroVideoContainer>\n</div>\n",
    "component_html": [
      {
        "name": "HeroVideoContainer",
        "html": "<div class=\"absolute top-0 left-0 w-full h-full\">  <video poster={video_poster} loop autoplay muted playsinline>    <source src={video_src} type=\"video/mp4\" />  </video>  {children}</div>"
      },
      {
        "name": "VideoOverlay",
        "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-black bg-opacity-25 flex justify-center items-center\">  {children}</div>"
      },
      {
        "name": "CTAButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first, and accessible screenshot carousel that showcases a product in action. It should have a navigation system to allow users to navigate through the screenshots. The carousel should be SEO-friendly and well-documented.",
    "component_list": [
      {
        "name": "ScreenshotCarouselContainer",
        "is_standalone": true,
        "description": "(standalone): The main container for the carousel. "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "(standalone): The navigation buttons for the carousel. "
      },
      {
        "name": "ScreenshotCard",
        "is_standalone": false,
        "description": "(takes children): A card that displays a single screenshot. "
      },
      {
        "name": "ScreenshotImage",
        "is_standalone": true,
        "description": "(standalone): Displays a single screenshot image. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto mt-10\">\n  <ScreenshotCarouselContainer>\n    <CarouselNavigation />\n    <div class=\"flex overflow-x-auto\">\n      <ScreenshotCard>\n        <ScreenshotImage src=\"{screenshot1_url}\" alt=\"{screenshot1_alt_text}\" />\n        <p class=\"text-sm\">{screenshot1_description}</p>\n      </ScreenshotCard>\n      <ScreenshotCard>\n        <ScreenshotImage src=\"{screenshot2_url}\" alt=\"{screenshot2_alt_text}\" />\n        <p class=\"text-sm\">{screenshot2_description}</p>\n      </ScreenshotCard>\n      <!-- Add more ScreenshotCard components here -->\n    </div>\n  </ScreenshotCarouselContainer>\n</div>\n",
    "component_html": [
      {
        "name": "ScreenshotCarouselContainer",
        "html": "<div class=\"relative bg-white border rounded-md p-4\">  {children}</div>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 rounded-md px-2 py-1\">Previous</button>  <button class=\"bg-gray-200 hover:bg-gray-300 rounded-md px-2 py-1\">Next</button></div>"
      },
      {
        "name": "ScreenshotCard",
        "html": "<div class=\"w-64 h-64 bg-white border rounded-md p-2 mr-4\">  {children}</div>"
      },
      {
        "name": "ScreenshotImage",
        "html": "<img src=\"{image_url}\" alt=\"{image_alt_text}\" class=\"w-full h-full object-cover rounded-md\" />"
      }
    ]
  },
  {
    "description": "The UI should consist of a container with multiple trust badges, each representing a security feature or certification. The badges should be displayed in a row on larger screens and stacked on smaller screens. Each badge should have an icon, text, and a hover effect to show more information about the security feature.",
    "component_list": [
      {
        "name": "TrustBadgeContainer",
        "is_standalone": true,
        "description": "Standalone component that wraps all trust badges. "
      },
      {
        "name": "TrustBadge",
        "is_standalone": false,
        "description": "Component that represents a single trust badge, takes children. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <TrustBadgeContainer>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more trust badges here -->\n  </TrustBadgeContainer>\n</div>\n",
    "component_html": [
      {
        "name": "TrustBadgeContainer",
        "html": "<div class=\"flex flex-wrap justify-center md:flex-nowrap\">  {children}</div>"
      },
      {
        "name": "TrustBadge",
        "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-2 md:p-4\">  <div class=\"bg-white shadow-md p-4 rounded hover:shadow-lg\">    <i class=\"text-2xl\">{icon_name}</i>    <p class=\"text-lg\">{badge_text}</p>    <span class=\"text-sm\">{badge_tooltip}</span>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should be a header section at the top of the webpage, featuring a site title on the left side and navigation links on the right side. The site title should be prominent and centered on mobile devices, while the navigation links should be stacked on top of each other on mobile devices and aligned horizontally on larger screens.",
    "component_list": [
      {
        "name": "SiteTitle",
        "is_standalone": true,
        "description": "(standalone): displays the title of the site "
      },
      {
        "name": "NavLink",
        "is_standalone": true,
        "description": "(standalone): displays a single navigation link "
      },
      {
        "name": "NavLinks",
        "is_standalone": false,
        "description": "(takes children): a container for multiple `NavLink` components "
      },
      {
        "name": "Header",
        "is_standalone": false,
        "description": "(takes children): the top-level component that contains the site title and navigation links "
      }
    ],
    "main_html": "<header>\n  <Header>\n    <SiteTitle />\n    <NavLinks>\n      <NavLink />\n      <NavLink />\n      <!-- Add more NavLink components as needed -->\n    </NavLinks>\n  </Header>\n</header>\n",
    "component_html": [
      {
        "name": "SiteTitle",
        "html": "<h1 class=\"text-3xl font-bold\">{site_title}</h1>"
      },
      {
        "name": "NavLink",
        "html": "<a href=\"{nav_link_url}\" class=\"text-lg\">{nav_link_text}</a>"
      },
      {
        "name": "NavLinks",
        "html": "<nav class=\"flex flex-wrap justify-end md:flex-row\">  {children}</nav>"
      },
      {
        "name": "Header",
        "html": "<div class=\"container mx-auto p-4 md:flex md:justify-between\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A responsive sidebar with important links and widgets, optimized for mobile and desktop devices. The sidebar should be easily accessible and have a clear visual hierarchy.",
    "component_list": [
      {
        "name": "SidebarContainer",
        "is_standalone": true,
        "description": "(standalone): The main container for the sidebar. "
      },
      {
        "name": "ImportantLink",
        "is_standalone": false,
        "description": "(takes children): A single important link with an icon and text. "
      },
      {
        "name": "Widget",
        "is_standalone": false,
        "description": "(takes children): A reusable widget for displaying information, such as a tag cloud or a social media link. "
      }
    ],
    "main_html": "<div class=\"md:w-64 xl:w-80 bg-gray-100 p-4\">\n  <SidebarContainer>\n    <ImportantLink>\n      <!-- Link 1 -->\n    </ImportantLink>\n    <ImportantLink>\n      <!-- Link 2 -->\n    </ImportantLink>\n    <Widget>\n      <!-- Widget content -->\n    </Widget>\n    <!-- ... more links and widgets ... -->\n  </SidebarContainer>\n</div>\n",
    "component_html": [
      {
        "name": "SidebarContainer",
        "html": "<div class=\"flex flex-col h-screen overflow-y-auto\">  {children}</div>"
      },
      {
        "name": "ImportantLink",
        "html": "<a href=\"{link_url}\" class=\"flex items-center py-2 px-4 hover:bg-gray-200\">  <i class=\"mr-2\">{link_icon}</i>  <span>{link_text}</span></a>"
      },
      {
        "name": "Widget",
        "html": "<div class=\"p-4 bg-white border border-gray-200 rounded\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The footer should have a dark background, with white text and a responsive layout that adjusts to different screen sizes. It should display copyright information, contact information (email and phone number), and social media links.",
    "component_list": [
      {
        "name": "Footer",
        "is_standalone": true,
        "description": "(standalone): The outermost container for the footer. "
      },
      {
        "name": "FooterCopyright",
        "is_standalone": true,
        "description": "(standalone): Displays the copyright information. "
      },
      {
        "name": "FooterContact",
        "is_standalone": true,
        "description": "(standalone): Displays the contact information (email and phone number). "
      },
      {
        "name": "FooterSocialMedia",
        "is_standalone": true,
        "description": "(standalone): Displays the social media links. "
      }
    ],
    "main_html": "<footer className=\"bg-gray-800 text-white p-4\">\n  <FooterCopyright />\n  <FooterContact />\n  <FooterSocialMedia />\n</footer>\n",
    "component_html": [
      {
        "name": "FooterCopyright",
        "html": "<p>{copyright_year} &copy; {company_name}. All rights reserved.</p>"
      },
      {
        "name": "FooterContact",
        "html": "<p>Get in touch:</p><p>Email: {contact_email}</p><p>Phone: {contact_phone}</p>"
      },
      {
        "name": "FooterSocialMedia",
        "html": "<ul className=\"flex justify-center\">  <li><a href={facebook_url} target=\"_blank\" rel=\"noopener\">Facebook</a></li>  <li><a href={twitter_url} target=\"_blank\" rel=\"noopener\">Twitter</a></li>  <li><a href={linkedin_url} target=\"_blank\" rel=\"noopener\">LinkedIn</a></li></ul>"
      }
    ]
  },
  {
    "description": "The UI should be a list of article teasers, displaying the title, a brief summary, and a link to read more. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.",
    "component_list": [
      {
        "name": "ArticleTeaser",
        "is_standalone": true,
        "description": "(standalone): A single article teaser, containing a title, summary, and read more link. "
      },
      {
        "name": "PostList",
        "is_standalone": false,
        "description": "(takes children): A list of article teasers. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <PostList>\n    <ArticleTeaser/>\n    <ArticleTeaser/>\n    <ArticleTeaser/>\n    <!-- Add more ArticleTeaser components here -->\n  </PostList>\n</div>\n",
    "component_html": [
      {
        "name": "ArticleTeaser",
        "html": "<div class=\"md:flex mb-4\">  <h2 class=\"text-lg font-bold\">{article_title}</h2>  <p class=\"text-gray-600\">{article_summary}</p>  <a href=\"{article_link}\" class=\"text-blue-600 hover:text-blue-900\">Read more</a></div>"
      },
      {
        "name": "PostList",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display the main content of an article, including text and media (e.g., images, videos). The content should be easily readable on various devices, with a clean and minimalistic design.",
    "component_list": [
      {
        "name": "ArticleContent",
        "is_standalone": true,
        "description": "Standalone component, displaying the main text and media of the article. "
      },
      {
        "name": "MediaBlock",
        "is_standalone": true,
        "description": "Standalone component, rendering a single media element (e.g., image, video). "
      },
      {
        "name": "Paragraph",
        "is_standalone": true,
        "description": "Standalone component, rendering a single paragraph of text. "
      }
    ],
    "main_html": "<article class=\"max-w-3xl mx-auto p-4 md:p-6 lg:p-8\">\n  <ArticleContent/>\n</article>\n",
    "component_html": [
      {
        "name": "ArticleContent",
        "html": "<div class=\"space-y-4\">  {children}</div>"
      },
      {
        "name": "MediaBlock",
        "html": "<div class=\"mb-4\">  <img src=\"{media_url}\" alt=\"{media_alt}\" class=\"w-full h-auto\"/></div>"
      },
      {
        "name": "Paragraph",
        "html": "<p class=\"mb-4\">{paragraph_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of comments from users, with each comment showing the user's name, profile picture, comment text, and timestamp. The comments should be ordered chronologically, with the most recent comment at the top. The section should be responsive, with a clean and simple design that is easy to read and navigate.",
    "component_list": [
      {
        "name": "CommentList",
        "is_standalone": true,
        "description": "standalone component that displays a list of comments "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "standalone component that displays a single comment "
      },
      {
        "name": "UserProfile",
        "is_standalone": true,
        "description": "standalone component that displays a user's profile picture and name "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "standalone component that displays the text of a single comment "
      },
      {
        "name": "CommentTimestamp",
        "is_standalone": true,
        "description": "standalone component that displays the timestamp of a single comment "
      }
    ],
    "main_html": "<section className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Comments</h2>\n  <CommentList/>\n</section>\n",
    "component_html": [
      {
        "name": "CommentList",
        "html": "<ul className=\"list-none mb-4\">  {comments.map((comment, index) => (    <li key={index} className=\"mb-4\">      <Comment comment={comment} />    </li>  ))}</ul>"
      },
      {
        "name": "Comment",
        "html": "<div className=\"flex items-start mb-4\">  <UserProfile user={user} />  <div className=\"ml-4\">    <CommentText text={text} />    <CommentTimestamp timestamp={timestamp} />  </div></div>"
      },
      {
        "name": "UserProfile",
        "html": "<div className=\"flex-shrink-0 mr-4\">  <img src={profile PictureUrl} alt={userName} className=\"w-8 h-8 rounded-full\" />  <span className=\"text-sm\">{userName}</span></div>"
      },
      {
        "name": "CommentText",
        "html": "<p className=\"text-sm\">{text}</p>"
      },
      {
        "name": "CommentTimestamp",
        "html": "<p className=\"text-xs text-gray-600\">{timestamp}</p>"
      }
    ]
  },
  {
    "description": "A compact author bio section with a profile picture, name, and brief description.",
    "component_list": [
      {
        "name": "AuthorBio",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "AuthorProfilePicture",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "AuthorName",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "AuthorBioDescription",
        "is_standalone": true,
        "description": "(standalone) "
      }
    ],
    "main_html": "<div class=\"flex flex-col md:flex-row items-center mb-4\">\n  <AuthorProfilePicture />\n  <div class=\"ml-4\">\n    <AuthorName />\n    <AuthorBioDescription />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "AuthorBio",
        "html": "<!-- Not applicable, as AuthorBio is the top-level component -->"
      },
      {
        "name": "AuthorProfilePicture",
        "html": "<img class=\"w-12 h-12 rounded-full\" src={author_profile_picture_url} alt={author_name} />"
      },
      {
        "name": "AuthorName",
        "html": "<h5 class=\"text-lg font-bold\">{author_name}</h5>"
      },
      {
        "name": "AuthorBioDescription",
        "html": "<p class=\"text-sm\">{author_bio_description}</p>"
      }
    ]
  },
  {
    "description": "The Social Sharing UI should be a row of buttons, each representing a social media platform (e.g., Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessibility-compliant. When hovered or focused, the buttons should have a subtle animation effect.",
    "component_list": [
      {
        "name": "SocialSharingContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire social sharing UI. "
      },
      {
        "name": "SocialButton",
        "is_standalone": false,
        "description": "A component that represents a single social media platform's sharing button. It takes children (the platform's logo and text). "
      }
    ],
    "main_html": "<div className=\"flex justify-center mb-4\">\n  <SocialSharingContainer>\n    <SocialButton><FaFacebook /> Share on Facebook</SocialButton>\n    <SocialButton><FaTwitter /> Share on Twitter</SocialButton>\n    <SocialButton><FaLinkedin /> Share on LinkedIn</SocialButton>\n    <!-- Add more social media platforms as needed -->\n  </SocialSharingContainer>\n</div>\n",
    "component_html": [
      {
        "name": "SocialSharingContainer",
        "html": "<div className=\"flex flex-wrap justify-center\">{children}</div>"
      },
      {
        "name": "SocialButton",
        "html": "<button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow-md mr-2\">  {children}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a list of related posts with their titles, excerpts, and links. The list should be responsive, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "RelatedPosts",
        "is_standalone": true,
        "description": "Standalone component that renders a list of related posts. "
      },
      {
        "name": "RelatedPost",
        "is_standalone": false,
        "description": "Component that takes children and renders a single related post. "
      },
      {
        "name": "PostTitle",
        "is_standalone": true,
        "description": "Standalone component that renders the title of a related post. "
      },
      {
        "name": "PostExcerpt",
        "is_standalone": true,
        "description": "Standalone component that renders the excerpt of a related post. "
      },
      {
        "name": "ReadMore",
        "is_standalone": true,
        "description": "Standalone component that renders a \"Read more\" link. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 class=\"text-lg font-bold mb-4\">Related Posts</h2>\n  <RelatedPosts>\n    <!-- list of related posts will be rendered here -->\n  </RelatedPosts>\n</section>\n",
    "component_html": [
      {
        "name": "RelatedPosts",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "RelatedPost",
        "html": "<li class=\"mb-4\">  <PostTitle>{post_title}</PostTitle>  <PostExcerpt>{post_excerpt}</PostExcerpt>  <ReadMore href=\"{post_url}\">Read more</ReadMore></li>"
      },
      {
        "name": "PostTitle",
        "html": "<h3 class=\"text-lg font-bold\">{post_title}</h3>"
      },
      {
        "name": "PostExcerpt",
        "html": "<p class=\"text-sm\">{post_excerpt}</p>"
      },
      {
        "name": "ReadMore",
        "html": "<a class=\"text-sm underline\" href=\"{href}\">{children}</a>"
      }
    ]
  },
  {
    "description": "The UI should display a navigation component that allows users to navigate through multiple pages. It should be responsive, mobile-first, and accessible. The component should include buttons or links to navigate to the next, previous, first, and last pages. The current page number should be highlighted.",
    "component_list": [
      {
        "name": "PaginationNav",
        "is_standalone": true,
        "description": "(standalone): The main pagination navigation component. "
      },
      {
        "name": "PaginationButton",
        "is_standalone": false,
        "description": "(takes children): A single pagination button. "
      }
    ],
    "main_html": "<nav class=\"flex justify-center mb-4\">\n    <ul class=\"flex\">\n        <li><PaginationButton>First</PaginationButton></li>\n        <li><PaginationButton>Previous</PaginationButton></li>\n        <li><span class=\"px-4\">{current_page}</span></li>\n        <li>/ <span>{total_pages}</span></li>\n        <li><PaginationButton>Next</PaginationButton></li>\n        <li><PaginationButton>Last</PaginationButton></li>\n    </ul>\n</nav>\n",
    "component_html": [
      {
        "name": "PaginationNav",
        "html": "<nav class=\"flex justify-center mb-4\">    <ul class=\"flex\">{children}</ul></nav>"
      },
      {
        "name": "PaginationButton",
        "html": "<li><button class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">{children}</button></li>"
      }
    ]
  },
  {
    "description": "A cloud of popular tags, where each tag has a different size and color based on its frequency of use. The tags should be arranged in a way that creates a visually appealing and organic shape.",
    "component_list": [
      {
        "name": "PopularTagCloud",
        "is_standalone": true,
        "description": "standalone component that contains all the popular tags "
      },
      {
        "name": "Tag",
        "is_standalone": true,
        "description": "standalone component that represents a single popular tag "
      }
    ],
    "main_html": "<div class=\"md:max-w-md mx-auto p-4\">\n  <PopularTagCloud />\n</div>\n",
    "component_html": [
      {
        "name": "PopularTagCloud",
        "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {tags}</div>"
      },
      {
        "name": "Tag",
        "html": "<a   href=\"{tag_url}\"   class=\"inline-block px-2 py-1 rounded {tag_color} text-lg mb-2 mr-2 hover:underline\">  {tag_name}  <span class=\"text-sm\">({tag_frequency})</span></a>"
      }
    ]
  },
  {
    "description": "The UI should display a list of categories, each with a title and a link to the corresponding categorized content. The list should be responsive, with categories stacked on top of each other on mobile devices and displayed side by side on larger screens.",
    "component_list": [
      {
        "name": "CategoryList",
        "is_standalone": true,
        "description": "standalone component that wraps the list of categories "
      },
      {
        "name": "CategoryItem",
        "is_standalone": false,
        "description": "component that represents a single category, takes children (the category title and link) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 lg:max-w-2xl lg:p-6\">\n  <CategoryList>\n    <!-- category items will be rendered here -->\n  </CategoryList>\n</div>\n",
    "component_html": [
      {
        "name": "CategoryList",
        "html": "<ul class=\"flex flex-wrap justify-center lg:flex-row\">  {children}</ul>"
      },
      {
        "name": "CategoryItem",
        "html": "<li class=\"w-full lg:w-1/2 xl:w-1/3 p-4\">  <a href={category_url} class=\"block p-4 hover:bg-gray-100 rounded\">    <h3 class=\"text-lg\">{category_title}</h3>    <p class=\"text-gray-600\">{category_description}</p>  </a></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive and accessible list of past articles organized by date. The list should be scrollable and displayed in a single column. Each list item should display the article title, publication date, and a short summary.",
    "component_list": [
      {
        "name": "ArchiveList",
        "is_standalone": true,
        "description": "standalone component that renders a list of archives "
      },
      {
        "name": "ArchiveItem",
        "is_standalone": false,
        "description": "component that takes children, rendering a single archive item "
      },
      {
        "name": "ArchiveDate",
        "is_standalone": true,
        "description": "standalone component that displays the publication date "
      },
      {
        "name": "ArchiveSummary",
        "is_standalone": true,
        "description": "standalone component that displays a short summary of the article "
      }
    ],
    "main_html": "<main class=\"max-w-md mx-auto p-4\">\n  <ArchiveList/>\n</main>\n",
    "component_html": [
      {
        "name": "ArchiveList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "ArchiveItem",
        "html": "<li class=\"mb-4\">  <h2 class=\"text-lg font-bold mb-2\">{article_title}</h2>  <ArchiveDate date={publication_date}/>  <ArchiveSummary summary={summary}/></li>"
      },
      {
        "name": "ArchiveDate",
        "html": "<p class=\"text-sm text-gray-600\">Published on {date}</p>"
      },
      {
        "name": "ArchiveSummary",
        "html": "<p class=\"text-sm\">{summary}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a hero section with a background image and a tagline. The background image should cover the full width and height of the section, and the tagline should be centered vertically and horizontally on top of the image.",
    "component_list": [
      {
        "name": "HeroBackground",
        "is_standalone": true,
        "description": "A standalone component that represents the background image of the hero section. "
      },
      {
        "name": "HeroTagline",
        "is_standalone": false,
        "description": "A component that represents the tagline of the hero section. It takes children (the tagline text). "
      }
    ],
    "main_html": "<section class=\"h-screen w-full relative\">\n  <HeroBackground />\n  <div class=\"absolute inset-0 flex items-center justify-center\">\n    <HeroTagline><p>{tagline_text}</p></HeroTagline>\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "HeroBackground",
        "html": "<div class=\"absolute inset-0 bg-cover bg-center\" style={{ backgroundImage: `url(${background_image_url})` }}></div>"
      },
      {
        "name": "HeroTagline",
        "html": "<div class=\"text-2xl font-bold text-white\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive project showcase that displays a grid of project thumbnails with descriptions. The grid should be mobile-first, with a maximum of 2 columns on larger screens. Each project item should have a thumbnail, a title, and a short description. The UI should be accessible, with clear typography and sufficient color contrast.",
    "component_list": [
      {
        "name": "ProjectShowcase",
        "is_standalone": true,
        "description": "standalone component that contains a grid of `ProjectItem` components. "
      },
      {
        "name": "ProjectItem",
        "is_standalone": true,
        "description": "standalone component that contains a thumbnail, title, and description. "
      }
    ],
    "main_html": "<div class=\"mx-auto max-w-md p-4 lg:p-6\">\n  <ProjectShowcase />\n</div>\n",
    "component_html": [
      {
        "name": "ProjectShowcase",
        "html": "<div class=\"grid gap-4 lg:grid-cols-2 xl:grid-cols-3\">  <!-- Project items will be inserted here -->  {children}</div>"
      },
      {
        "name": "ProjectItem",
        "html": "<div class=\"flex flex-col justify-center p-4 lg:p-6\">  <img src={thumbnail_url} alt={project_title} class=\"w-full h-48 object-cover mb-4\" />  <h3 class=\"text-lg font-bold\">{project_title}</h3>  <p class=\"text-gray-600\">{project_description}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should have a responsive layout with a section for latest blog posts and a section for archives. On mobile devices, the layout should be single-column, and on larger devices, the layout should be two-column.",
    "component_list": [
      {
        "name": "BlogSection",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire blog section. "
      },
      {
        "name": "LatestPosts",
        "is_standalone": true,
        "description": "Standalone component that displays a list of latest blog posts. "
      },
      {
        "name": "ArchiveSection",
        "is_standalone": true,
        "description": "Standalone component that displays a list of archives. "
      },
      {
        "name": "PostTeaser",
        "is_standalone": false,
        "description": "Component that takes a single blog post as a child element. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <BlogSection>\n    <div className=\"flex flex-wrap -mx-4\">\n      <div className=\"w-full md:w-2/3 xl:w-2/3 px-4\">\n        <LatestPosts/>\n      </div>\n      <div className=\"w-full md:w-1/3 xl:w-1/3 px-4\">\n        <ArchiveSection/>\n      </div>\n    </div>\n  </BlogSection>\n</div>\n",
    "component_html": [
      {
        "name": "BlogSection",
        "html": "<section className=\"bg-white shadow-md rounded p-4 md:p-6 lg:p-12\">  {children}</section>"
      },
      {
        "name": "LatestPosts",
        "html": "<section className=\"mb-4\">  <h2 className=\"text-lg font-bold mb-2\">Latest Posts</h2>  <ul className=\"list-none mb-0\">    {posts.map((post, index) => (      <li key={index} className=\"mb-4\">        <PostTeaser>{post}</PostTeaser>      </li>    ))}  </ul></section>"
      },
      {
        "name": "ArchiveSection",
        "html": "<section className=\"mb-4\">  <h2 className=\"text-lg font-bold mb-2\">Archives</h2>  <ul className=\"list-none mb-0\">    {archives.map((archive, index) => (      <li key={index} className=\"mb-4\">        <a href={archive.url} className=\"text-gray-600 hover:text-gray-900\">{archive.name}</a>      </li>    ))}  </ul></section>"
      },
      {
        "name": "PostTeaser",
        "html": "<article className=\"flex flex-wrap mb-4\">  <div className=\"w-1/2 md:w-1/3 xl:w-1/3 px-4\">    <img src={post.image} alt={post.title} className=\"w-full h-40 object-cover rounded\"/>  </div>  <div className=\"w-1/2 md:w-2/3 xl:w-2/3 px-4\">    <h3 className=\"text-lg font-bold mb-1\">{post.title}</h3>    <p className=\"text-gray-600\">{post.excerpt}</p>    <a href={post.url} className=\"text-gray-600 hover:text-gray-900\">Read more</a>  </div></article>"
      }
    ]
  },
  {
    "description": "The UI should be a simple contact form with three input fields for name, email, and message. The form should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. The form fields should have clear labels and be easily accessible.",
    "component_list": [
      {
        "name": "ContactForm",
        "is_standalone": true,
        "description": "standalone component that wraps the entire form "
      },
      {
        "name": "FormField",
        "is_standalone": false,
        "description": "component that represents a single input field (e.g. name, email, message); takes children (label and input element) "
      },
      {
        "name": "FormLabel",
        "is_standalone": true,
        "description": "component that represents a label for an input field; standalone "
      },
      {
        "name": "FormInput",
        "is_standalone": true,
        "description": "component that represents an input field (e.g. text input, textarea); standalone "
      },
      {
        "name": "FormSubmitButton",
        "is_standalone": true,
        "description": "component that represents the submit button; standalone "
      }
    ],
    "main_html": "<ContactForm>\n  <FormField>\n    <FormLabel for=\"name\">Name:</FormLabel>\n    <FormInput type=\"text\" id=\"name\" />\n  </FormField>\n  <FormField>\n    <FormLabel for=\"email\">Email:</FormLabel>\n    <FormInput type=\"email\" id=\"email\" />\n  </FormField>\n  <FormField>\n    <FormLabel for=\"message\">Message:</FormLabel>\n    <FormInput as=\"textarea\" id=\"message\" />\n  </FormField>\n  <FormSubmitButton>Send</FormSubmitButton>\n</ContactForm>\n",
    "component_html": [
      {
        "name": "ContactForm",
        "html": "<form class=\"flex flex-col items-center w-full\">{children}</form>"
      },
      {
        "name": "FormField",
        "html": "<div class=\"mb-4\">{children}</div>"
      },
      {
        "name": "FormLabel",
        "html": "<label for=\"{inputId}\" class=\"block mb-2\">{labelText}</label>"
      },
      {
        "name": "FormInput",
        "html": "<input   type=\"{type}\"   id=\"{inputId}\"   class=\"w-full p-2 border border-gray-300 rounded\"  placeholder=\"{placeholderText}\"/>"
      },
      {
        "name": "FormSubmitButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
      }
    ]
  },
  {
    "description": "A horizontal list of social media links with icons and tooltips that appear on hover.",
    "component_list": [
      {
        "name": "SocialMediaLink",
        "is_standalone": true,
        "description": "(standalone) - a single social media link with an icon and tooltip "
      },
      {
        "name": "SocialMediaLinks",
        "is_standalone": false,
        "description": "(takes children) - a container for multiple social media links "
      }
    ],
    "main_html": "<nav class=\"flex justify-center mb-4\">\n  <SocialMediaLinks>\n    <SocialMediaLink/>\n    <SocialMediaLink/>\n    <SocialMediaLink/>\n  </SocialMediaLinks>\n</nav>\n",
    "component_html": [
      {
        "name": "SocialMediaLinks",
        "html": "<ul class=\"flex justify-center space-x-4\">  {children}</ul>"
      },
      {
        "name": "SocialMediaLink",
        "html": "<li class=\"inline-block mr-4\">  <a href=\"{link_url}\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"{tooltip_text}\">    <i class={`text-xl ${icon_class}`} />  </a>  <span class=\"tooltip hidden group-hover:block\">{tooltip_text}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should be a footer section that displays copyright information and a disclaimer. It should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "FooterComponent",
        "is_standalone": true,
        "description": "(standalone): The main footer component that wraps the copyright information and disclaimer. "
      },
      {
        "name": "CopyrightComponent",
        "is_standalone": true,
        "description": "(standalone): Displays the copyright information. "
      },
      {
        "name": "DisclaimerComponent",
        "is_standalone": true,
        "description": "(standalone): Displays the disclaimer. "
      }
    ],
    "main_html": "<footer className=\"bg-gray-200 h-screen pt-4 pb-4\">\n  <FooterComponent />\n</footer>\n",
    "component_html": [
      {
        "name": "FooterComponent",
        "html": "<div className=\"max-w-md mx-auto px-4 lg:px-8\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
      },
      {
        "name": "CopyrightComponent",
        "html": "<p className=\"text-sm text-gray-600\">&copy; {copyright_year} {company_name}. All rights reserved.</p>"
      },
      {
        "name": "DisclaimerComponent",
        "html": "<p className=\"text-sm text-gray-600\">{disclaimer_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a testimonials section with quotes and author names. The section should have a heading, and below it, a list of testimonials with quote marks around the quote text and the author's name below it. The UI should be responsive and accessible.",
    "component_list": [
      {
        "name": "TestimonialsSection",
        "is_standalone": true,
        "description": "(standalone) "
      },
      {
        "name": "Testimonial",
        "is_standalone": false,
        "description": "(takes children) "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-3xl font-bold\">What our customers say</h2>\n  <ul className=\"flex flex-col gap-4 mt-4\">\n    <Testimonial/>\n    <Testimonial/>\n    <Testimonial/>\n  </ul>\n</section>\n",
    "component_html": [
      {
        "name": "TestimonialsSection",
        "html": "<section className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">  {children}</section>"
      },
      {
        "name": "Testimonial",
        "html": "<li className=\"flex flex-col gap-2\">  <blockquote className=\"text-lg italic\">{quote}</blockquote>  <cite className=\"font-bold\">{author_name}</cite></li>"
      }
    ]
  },
  {
    "description": "The Skills section should be a responsive, mobile-first section that displays a list of skills with their respective icons and proficiency levels. The section should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "SkillList",
        "is_standalone": true,
        "description": "A standalone component that renders a list of skills. "
      },
      {
        "name": "SkillItem",
        "is_standalone": false,
        "description": "A component that takes children and renders a single skill item with an icon and proficiency level. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Skills</h2>\n  <SkillList/>\n</section>\n",
    "component_html": [
      {
        "name": "SkillList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "SkillItem",
        "html": "<li class=\"flex items-center mb-4\">  <i class={icon_class} aria-hidden=\"true\"></i>  <span class=\"ml-2\">{skill_name}</span>  <span class=\"text-gray-600\">{proficiency_level}</span></li>"
      }
    ]
  },
  {
    "description": "A vertical timeline that displays a list of work experiences, with each experience showing the job title, company, and duration. The timeline should be responsive and easily readable on mobile devices.",
    "component_list": [
      {
        "name": "ExperienceTimeline",
        "is_standalone": true,
        "description": "a standalone component that wraps the entire experience timeline "
      },
      {
        "name": "Experience",
        "is_standalone": false,
        "description": "a component that takes children, representing a single work experience "
      },
      {
        "name": "JobTitle",
        "is_standalone": true,
        "description": "a standalone component displaying the job title "
      },
      {
        "name": "Company",
        "is_standalone": true,
        "description": "a standalone component displaying the company name "
      },
      {
        "name": "Duration",
        "is_standalone": true,
        "description": "a standalone component displaying the duration of the experience "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <ExperienceTimeline>\n    <Experience>\n      <JobTitle/>\n      <Company/>\n      <Duration/>\n    </Experience>\n    <Experience>\n      <JobTitle/>\n      <Company/>\n      <Duration/>\n    </Experience>\n    <!-- Add more experiences here -->\n  </ExperienceTimeline>\n</div>\n",
    "component_html": [
      {
        "name": "ExperienceTimeline",
        "html": "<ul class=\"list-none pl-0 mb-4\">  {children}</ul>"
      },
      {
        "name": "Experience",
        "html": "<li class=\"mb-4\">  <div class=\"flex items-center mb-2\">    <JobTitle/>    <span class=\"text-gray-600 ml-2\">{company}</span>  </div>  <Duration/></li>"
      },
      {
        "name": "JobTitle",
        "html": "<h3 class=\"text-lg\">{job_title}</h3>"
      },
      {
        "name": "Company",
        "html": "<span class=\"text-gray-600\">{company}</span>"
      },
      {
        "name": "Duration",
        "html": "<p class=\"text-sm\">{start_date} - {end_date}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of personal interests and hobbies, each accompanied by an icon that represents the interest or hobby. The list should be responsive, with a maximum of 3 items per row on larger screens, and a single column on mobile devices.",
    "component_list": [
      {
        "name": "InterestItem",
        "is_standalone": true,
        "description": "(standalone): Represents a single interest or hobby, consisting of an icon and a label. "
      },
      {
        "name": "InterestsList",
        "is_standalone": false,
        "description": "(takes children): A container for a list of `InterestItem`s. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Personal Interests and Hobbies</h2>\n  <InterestsList>\n    <InterestItem />\n    <InterestItem />\n    <InterestItem />\n    <!-- Add more InterestItem components as needed -->\n  </InterestsList>\n</section>\n",
    "component_html": [
      {
        "name": "InterestItem",
        "html": "<div className=\"flex items-center mb-4\">  <i className={`w-6 h-6 text-lg {icon_class}`}></i>  <span className=\"ml-2\">{interest_label}</span></div>"
      },
      {
        "name": "InterestsList",
        "html": "<ul className=\"flex flex-wrap justify-center md:flex-nowrap md:flex-row\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a hero section with animated typography that grabs the user's attention. The background should be a gradient of contrasting colors. The text should be large, bold, and centered, with an animated effect that makes the text appear as if it's being written by hand.",
    "component_list": [
      {
        "name": "HeroSection",
        "is_standalone": true,
        "description": "standalone component that wraps the hero section "
      },
      {
        "name": "AnimatedText",
        "is_standalone": true,
        "description": "standalone component that displays the animated typography "
      }
    ],
    "main_html": "<div class=\"h-screen w-full flex justify-center\">\n  <HeroSection>\n    <AnimatedText />\n  </HeroSection>\n</div>\n",
    "component_html": [
      {
        "name": "HeroSection",
        "html": "<div class=\"h-full w-full flex justify-center\">  <div class=\"absolute top-0 left-0 bg-gradient-to-r from-purple-500 to-pink-500 h-screen w-screen\" />  <div class=\"container mx-auto p-4\">    {children}  </div></div>"
      },
      {
        "name": "AnimatedText",
        "html": "<h1 class=\"text-6xl font-bold text-white animate-typing\">  <span class=\"block\">{animated_text}</span></h1>"
      }
    ]
  },
  {
    "description": "A horizontal bar with a percentage counter on the right side, indicating a skill level. The bar should be divided into sections to represent different skill levels (e.g., beginner, intermediate, advanced).",
    "component_list": [
      {
        "name": "SkillMeterContainer",
        "is_standalone": true,
        "description": "Standalone component to wrap the entire skill meter. "
      },
      {
        "name": "SkillBar",
        "is_standalone": true,
        "description": "Standalone component to display the horizontal bar. "
      },
      {
        "name": "SkillLevelIndicator",
        "is_standalone": true,
        "description": "Standalone component to display the percentage counter. "
      }
    ],
    "main_html": "<SkillMeterContainer>\n  <SkillBar />\n  <SkillLevelIndicator percentage={skill_percentage} />\n</SkillMeterContainer>\n",
    "component_html": [
      {
        "name": "SkillMeterContainer",
        "html": "<div class=\"flex justify-center mb-4\">  <!-- Skill meter container -->  {children}</div>"
      },
      {
        "name": "SkillBar",
        "html": "<div class=\"h-2 bg-gray-200 rounded-full\">  <div class=\"h-2 bg-green-500 rounded-full\" style={{ width: `${skill_percentage}%` }}>    <!-- Filled part of the skill bar -->  </div></div>"
      },
      {
        "name": "SkillLevelIndicator",
        "html": "<p class=\"text-sm text-gray-600\">{percentage}%</p>"
      }
    ]
  },
  {
    "description": "The UI should display a service section with three columns, each containing an icon, a brief description, and a title. The section should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.",
    "component_list": [
      {
        "name": "ServiceCard",
        "is_standalone": true,
        "description": "standalone component that renders an icon, title, and description. "
      },
      {
        "name": "ServiceSection",
        "is_standalone": false,
        "description": "component that takes children, which are multiple `ServiceCard` components. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto pt-12 pb-6\">\n  <h2 class=\"text-3xl font-bold mb-4\">Our Services</h2>\n  <div class=\"flex flex-wrap justify-center\">\n    <ServiceCard />\n    <ServiceCard />\n    <ServiceCard />\n  </div>\n</section>\n",
    "component_html": [
      {
        "name": "ServiceCard",
        "html": "<div class=\"w-full md:w-1/3 xl:w-1/3 p-6\">  <i class=\"fas fa-{icon_name} text-3xl text-gray-600 mb-4\"></i>  <h3 class=\"text-lg font-bold mb-2\">{service_title}</h3>  <p class=\"text-gray-600\">{service_description}</p></div>"
      }
    ]
  },
  {
    "description": "A responsive portfolio filter with categories and tags that allows users to filter projects by categories and tags. The filter will have a dropdown for categories and a list of tags that can be selected/deselected.",
    "component_list": [
      {
        "name": "PortfolioFilterContainer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire filter UI. "
      },
      {
        "name": "CategoryDropdown",
        "is_standalone": true,
        "description": "A standalone component that displays the categories dropdown. "
      },
      {
        "name": "TagList",
        "is_standalone": true,
        "description": "A standalone component that displays the list of tags. "
      },
      {
        "name": "TagItem",
        "is_standalone": false,
        "description": "A component that takes children and displays a single tag item. "
      }
    ],
    "main_html": "<div className=\"flex flex-col md:flex-row justify-center mb-4\">\n  <PortfolioFilterContainer>\n    <CategoryDropdown />\n    <TagList />\n  </PortfolioFilterContainer>\n</div>\n",
    "component_html": [
      {
        "name": "PortfolioFilterContainer",
        "html": "<div className=\"bg-white shadow-md p-4 rounded-sm w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">  {children}</div>"
      },
      {
        "name": "CategoryDropdown",
        "html": "<div className=\"mb-4\">  <label className=\"block text-gray-700 text-sm mb-2\" htmlFor=\"categories\">Categories:</label>  <select className=\"block w-full pl-10 text-sm text-gray-700\" id=\"categories\">    {categories.map((category, index) => (      <option key={index} value={category}>{category}</option>    ))}  </select></div>"
      },
      {
        "name": "TagList",
        "html": "<ul className=\"flex flex-wrap mb-4\">  {tags.map((tag, index) => (    <TagItem key={index}>{tag}</TagItem>  ))}</ul>"
      },
      {
        "name": "TagItem",
        "html": "<li className=\"mr-4 mb-2\">  <input type=\"checkbox\" id={tag} className=\"mr-2\" />  <label className=\"text-gray-700 text-sm\" htmlFor={tag}>{tag}</label></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive modal window that displays project details and images. It should have a header with a project title, a section for project details, and a section for project images. The modal window should be accessible, responsive, and mobile-first.",
    "component_list": [
      {
        "name": "ProjectModal",
        "is_standalone": true,
        "description": "a standalone component that contains the entire modal window. "
      },
      {
        "name": "ModalHeader",
        "is_standalone": true,
        "description": "a standalone component that contains the header of the modal window. "
      },
      {
        "name": "ProjectTitle",
        "is_standalone": true,
        "description": "a standalone component that displays the project title. "
      },
      {
        "name": "ProjectDetails",
        "is_standalone": false,
        "description": "a component that takes children, which displays the project details. "
      },
      {
        "name": "ProjectImage",
        "is_standalone": true,
        "description": "a standalone component that displays a project image. "
      },
      {
        "name": "ImageGallery",
        "is_standalone": false,
        "description": "a component that takes children, which displays a gallery of project images. "
      }
    ],
    "main_html": "<div class=\"fixed inset-0 z-50 overflow-hidden\">\n  <div class=\"absolute inset-0 overflow-y-auto h-screen p-4\">\n    <ProjectModal>\n      <ModalHeader>\n        <ProjectTitle>{project_title}</ProjectTitle>\n      </ModalHeader>\n      <ProjectDetails>\n        <p>{project_description}</p>\n        <p>{project_tags}</p>\n      </ProjectDetails>\n      <ImageGallery>\n        <ProjectImage src=\"{image1_url}\" alt=\"{image1_alt}\"/>\n        <ProjectImage src=\"{image2_url}\" alt=\"{image2_alt}\"/>\n        <!-- more images here -->\n      </ImageGallery>\n    </ProjectModal>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ProjectModal",
        "html": "<div class=\"relative bg-white rounded-md shadow-md p-4\">  {children}</div>"
      },
      {
        "name": "ModalHeader",
        "html": "<div class=\"flex justify-between mb-4\">  {children}</div>"
      },
      {
        "name": "ProjectTitle",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "ProjectDetails",
        "html": "<div class=\"mb-4\">  {children}</div>"
      },
      {
        "name": "ProjectImage",
        "html": "<img src={src} alt={alt} class=\"w-full h-64 object-cover rounded-md mb-4\"/>"
      },
      {
        "name": "ImageGallery",
        "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A button group with two buttons: one to download the resume and another to print the resume. The buttons should be responsive and mobile-friendly.",
    "component_list": [
      {
        "name": "ResumeActionButtons",
        "is_standalone": true,
        "description": "(standalone) - contains the download and print buttons "
      },
      {
        "name": "ActionButton",
        "is_standalone": false,
        "description": "(takes children) - a single button with a label and optional icon "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <ResumeActionButtons/>\n</div>\n",
    "component_html": [
      {
        "name": "ResumeActionButtons",
        "html": "<div class=\"btn-group\">  <ActionButton>    <i class=\"fas fa-download mr-2\"></i>    Download Resume  </ActionButton>  <ActionButton>    <i class=\"fas fa-print mr-2\"></i>    Print Resume  </ActionButton></div>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a list of awards or achievements with icons and dates in a responsive, mobile-first, and accessible manner.",
    "component_list": [
      {
        "name": "AwardCard",
        "is_standalone": true,
        "description": "A standalone component that represents a single award or achievement. "
      },
      {
        "name": "AwardList",
        "is_standalone": false,
        "description": "A component that takes children, which is a list of `AwardCard` components. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Awards and Achievements</h2>\n  <AwardList>\n    <AwardCard />\n    <AwardCard />\n    <!-- Add more AwardCard components here -->\n  </AwardList>\n</section>\n",
    "component_html": [
      {
        "name": "AwardCard",
        "html": "<div className=\"flex items-center mb-4\">  <div className=\"mr-4\">    <i className=\"fas fa-{award_icon} text-2xl text-gray-600\"></i>  </div>  <div>    <h3 className=\"text-lg font-bold\">{award_name}</h3>    <p className=\"text-gray-600\">{award_date}</p>  </div></div>"
      },
      {
        "name": "AwardList",
        "html": "<ul className=\"list-none mb-0 p-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The certifications or licenses section should display a list of issuers with their respective certifications or licenses. The section should have a clear heading and each item in the list should include the issuer's name and the certification or license name. The UI should be clean, simple, and easy to read.",
    "component_list": [
      {
        "name": "CertificationsSection",
        "is_standalone": true,
        "description": "(standalone): The top-level component that wraps the entire certifications or licenses section. "
      },
      {
        "name": "CertificationItem",
        "is_standalone": false,
        "description": "(takes children): A component that represents a single certification or license item in the list. "
      }
    ],
    "main_html": "<CertificationsSection>\n  <h2>Certifications and Licenses</h2>\n  <ul>\n    <CertificationItem/>\n    <CertificationItem/>\n    <!-- add more CertificationItem components here -->\n  </ul>\n</CertificationsSection>\n",
    "component_html": [
      {
        "name": "CertificationsSection",
        "html": "<section className=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">  {children}</section>"
      },
      {
        "name": "CertificationItem",
        "html": "<li className=\"py-2 border-b border-gray-200\">  <p><strong>{issuer_name}</strong> - {certification_license_name}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a section showcasing team members or colleagues with their photos and bios in a grid layout. The section should be responsive, with the grid adapting to different screen sizes. On mobile, the grid should display one column, and on larger screens, it should display multiple columns.",
    "component_list": [
      {
        "name": "TeamMemberCard",
        "is_standalone": true,
        "description": "(standalone) - displays a single team member's photo and bio. "
      },
      {
        "name": "TeamSection",
        "is_standalone": false,
        "description": "(takes children) - wraps the team members in a container with a header. "
      }
    ],
    "main_html": "<section className=\"max-w-md mx-auto py-12\">\n  <h2 className=\"text-3xl font-bold mb-4\">Our Team</h2>\n  <TeamSection>\n    <TeamMemberCard />\n    <TeamMemberCard />\n    <TeamMemberCard />\n    <!-- add more TeamMemberCard components as needed -->\n  </TeamSection>\n</section>\n",
    "component_html": [
      {
        "name": "TeamMemberCard",
        "html": "<div className=\"flex flex-col items-center mb-8 md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">  <img src={profile_photo_url} alt=\"{name}\" className=\"w-24 h-24 rounded-full mb-4\" />  <h3 className=\"text-lg font-bold\">{name}</h3>  <p className=\"text-gray-600\">{bio}</p></div>"
      },
      {
        "name": "TeamSection",
        "html": "<div className=\"flex flex-wrap justify-center\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a carousel of client or testimonial logos, allowing users to navigate through the logos using navigation controls or by swiping on touch devices. The carousel should be responsive, adjusting its width and layout to fit different screen sizes and devices.",
    "component_list": [
      {
        "name": "TestimonialLogosCarousel",
        "is_standalone": true,
        "description": "Standalone component that contains the entire carousel. "
      },
      {
        "name": "TestimonialLogo",
        "is_standalone": true,
        "description": "Standalone component that represents a single logo. "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "Standalone component that contains navigation controls (prev, next). "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <TestimonialLogosCarousel>\n    <!-- Carousel content -->\n  </TestimonialLogosCarousel>\n  <CarouselNavigation />\n</div>\n",
    "component_html": [
      {
        "name": "TestimonialLogosCarousel",
        "html": "<div className=\"flex overflow-x-hidden\">  <div className=\"flex items-center justify-center w-full\">    {children}  </div>  <button className=\"carousel-prev absolute left-0 text-gray-400 hover:text-gray-600\" aria-label=\"Previous\">    <span aria-hidden=\"true\">&lsaquo;</span>  </button>  <button className=\"carousel-next absolute right-0 text-gray-400 hover:text-gray-600\" aria-label=\"Next\">    <span aria-hidden=\"true\">&rsaquo;</span>  </button></div>"
      },
      {
        "name": "TestimonialLogo",
        "html": "<img src=\"{logo_url}\" alt=\"{company_name}\" className=\"h-12 w-12 md:h-16 md:w-16 lg:h-20 lg:w-20 object-contain mx-auto\" />"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div className=\"flex justify-center mt-4\">  <button className=\"carousel-prev inline-flex items-center text-gray-400 hover:text-gray-600\" aria-label=\"Previous\">    <span aria-hidden=\"true\">&lsaquo;</span>  </button>  <button className=\"carousel-next inline-flex items-center text-gray-400 hover:text-gray-600\" aria-label=\"Next\">    <span aria-hidden=\"true\">&rsaquo;</span>  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a feed of social media posts, with each post including an image, post content, and any relevant metadata (e.g. username, timestamp). The feed should be responsive, with posts stacking vertically on smaller screens and potentially displaying in a grid or masonry layout on larger screens.",
    "component_list": [
      {
        "name": "SocialMediaFeed",
        "is_standalone": true,
        "description": "Standalone component that renders a list of posts. "
      },
      {
        "name": "SocialMediaPost",
        "is_standalone": false,
        "description": "Component that takes children, rendering a single social media post. "
      },
      {
        "name": "PostImage",
        "is_standalone": true,
        "description": "Standalone component that renders an image for a post. "
      },
      {
        "name": "PostContent",
        "is_standalone": true,
        "description": "Standalone component that renders the text content of a post. "
      },
      {
        "name": "PostMetadata",
        "is_standalone": true,
        "description": "Standalone component that renders metadata for a post (e.g. username, timestamp). "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
    "component_html": [
      {
        "name": "SocialMediaFeed",
        "html": "<div class=\"flex flex-col md:flex-wrap md:-mx-4\">  {children}</div>"
      },
      {
        "name": "SocialMediaPost",
        "html": "<div class=\"mb-4 md:w-1/2 xl:w-1/3 p-4\">  <PostImage/>  <PostContent/>  <PostMetadata/></div>"
      },
      {
        "name": "PostImage",
        "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full h-48 object-cover rounded-t\"/>"
      },
      {
        "name": "PostContent",
        "html": "<p class=\"text-lg\">{post_content}</p>"
      },
      {
        "name": "PostMetadata",
        "html": "<div class=\"text-sm text-gray-600\">  <span>{username}</span> · <span>{timestamp}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should be a profile popup that displays a user's avatar and username. The popup should be responsive, mobile-first, accessible, and SEO-friendly. The avatar should be a circular image, and the username should be displayed below the avatar.",
    "component_list": [
      {
        "name": "UserProfilePopup",
        "is_standalone": true,
        "description": "A standalone component that contains the user's avatar and username. "
      },
      {
        "name": "Avatar",
        "is_standalone": true,
        "description": "A standalone component that displays the user's avatar image. "
      },
      {
        "name": "Username",
        "is_standalone": true,
        "description": "A standalone component that displays the user's username. "
      }
    ],
    "main_html": "<div class=\"bg-white shadow-md rounded p-4\">\n  <UserProfilePopup>\n    <Avatar />\n    <Username />\n  </UserProfilePopup>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfilePopup",
        "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
      },
      {
        "name": "Avatar",
        "html": "<img src={avatar_url} alt=\"User Avatar\" class=\"w-12 h-12 rounded-full\" />"
      },
      {
        "name": "Username",
        "html": "<p class=\"text-lg font-medium\">{username}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a message input field with a send button and an emoji picker. The input field should be responsive and mobile-friendly. The send button should be enabled only when the input field has some text. The emoji picker should be a dropdown list that appears when the user clicks on the emoji icon. The UI should be accessible, with clear labels and high contrast colors.",
    "component_list": [
      {
        "name": "MessageInputField",
        "is_standalone": true,
        "description": "standalone component that renders an input field. "
      },
      {
        "name": "SendButton",
        "is_standalone": true,
        "description": "standalone component that renders a button. "
      },
      {
        "name": "EmojiPicker",
        "is_standalone": true,
        "description": "standalone component that renders a dropdown list of emojis. "
      },
      {
        "name": "EmojiPickerTrigger",
        "is_standalone": false,
        "description": "takes children, renders a button that toggles the emoji picker dropdown. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiPickerTrigger>\n    <EmojiPicker/>\n  </EmojiPickerTrigger>\n</div>\n",
    "component_html": [
      {
        "name": "MessageInputField",
        "html": "<input type=\"text\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Type a message...\" />"
      },
      {
        "name": "SendButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\" disabled={isDisabled}>Send</button>"
      },
      {
        "name": "EmojiPicker",
        "html": "<ul class=\"absolute bg-white rounded shadow-md p-2\">  {emojis.map((emoji) => (    <li class=\"py-2 px-4 hover:bg-gray-100\">{emoji}</li>  ))}</ul>"
      },
      {
        "name": "EmojiPickerTrigger",
        "html": "<button class=\"p-2 hover:bg-gray-100 rounded text-lg\">{children}</button>"
      }
    ]
  },
  {
    "description": "The UI should display a threaded conversation with multiple comments and replies. Each comment should have a reply button and reaction buttons (e.g., like, love, haha). The conversation should be responsive and accessible on various devices.",
    "component_list": [
      {
        "name": "ConversationThread",
        "is_standalone": true,
        "description": "Standalone component that renders a conversation thread. "
      },
      {
        "name": "CommentItem",
        "is_standalone": true,
        "description": "Standalone component that renders a single comment with reply and reaction buttons. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "Standalone component that renders a reply button. "
      },
      {
        "name": "ReactionButtons",
        "is_standalone": true,
        "description": "Standalone component that renders a set of reaction buttons. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-4\">\n  <ConversationThread>\n    <CommentItem />\n    <CommentItem />\n    <!-- More comments... -->\n  </ConversationThread>\n</div>\n",
    "component_html": [
      {
        "name": "ConversationThread",
        "html": "<div class=\"flex flex-col gap-4\">  {children}</div>"
      },
      {
        "name": "CommentItem",
        "html": "<div class=\"flex flex-col mb-4\">  <p class=\"text-lg\">{comment_text}</p>  <div class=\"flex justify-between\">    <ReplyButton />    <ReactionButtons />  </div></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Reply</button>"
      },
      {
        "name": "ReactionButtons",
        "html": "<div class=\"flex gap-2\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Like</button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Love</button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Haha</button>  <!-- More reaction buttons... --></div>"
      }
    ]
  },
  {
    "description": "The UI should display a server icon with a dropdown menu containing server information. On larger screens, the icon and server name should be displayed horizontally, while on smaller screens, they should be stacked vertically.",
    "component_list": [
      {
        "name": "ServerIcon",
        "is_standalone": true,
        "description": "A standalone component that displays the server icon. "
      },
      {
        "name": "ServerName",
        "is_standalone": true,
        "description": "A standalone component that displays the server name. "
      },
      {
        "name": "DropdownMenu",
        "is_standalone": false,
        "description": "A component that takes children, displaying a dropdown menu with server information. "
      },
      {
        "name": "ServerInfo",
        "is_standalone": false,
        "description": "A component that takes children, displaying server information within the dropdown menu. "
      }
    ],
    "main_html": "<div class=\"flex items-center lg:flex-row flex-col\">\n  <ServerIcon />\n  <ServerName />\n  <DropdownMenu>\n    <ServerInfo>Server Information</ServerInfo>\n    <!-- other server information items -->\n  </DropdownMenu>\n</div>\n",
    "component_html": [
      {
        "name": "ServerIcon",
        "html": "<img src={iconUrl} alt=\"Server Icon\" class=\"w-8 h-8 lg:mr-2\" />"
      },
      {
        "name": "ServerName",
        "html": "<h2 class=\"text-lg lg:ml-2\">{serverName}</h2>"
      },
      {
        "name": "DropdownMenu",
        "html": "<div class=\"relative\">  <button class=\"btn dropdown-btn\">Toggle Dropdown</button>  <div class=\"dropdown-menu absolute bg-white shadow-md\">    {children}  </div></div>"
      },
      {
        "name": "ServerInfo",
        "html": "<p class=\"px-4 py-2\">{infoText}</p>"
      }
    ]
  },
  {
    "description": "The UI should be a rich media embed with a video player that has playback controls, including play/pause, volume control, and a progress bar. The video player should be responsive and adaptable to different screen sizes.",
    "component_list": [
      {
        "name": "RichMediaEmbed",
        "is_standalone": true,
        "description": "standalone component that contains the video player and playback controls. "
      },
      {
        "name": "VideoPlayer",
        "is_standalone": true,
        "description": "standalone component that contains the video element and playback controls. "
      },
      {
        "name": "PlaybackControls",
        "is_standalone": true,
        "description": "standalone component that contains the play/pause button, volume control, and progress bar. "
      },
      {
        "name": "ProgressBar",
        "is_standalone": true,
        "description": "standalone component that displays the video progress. "
      },
      {
        "name": "VolumeControl",
        "is_standalone": true,
        "description": "standalone component that allows the user to adjust the volume. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <RichMediaEmbed/>\n</div>\n",
    "component_html": [
      {
        "name": "RichMediaEmbed",
        "html": "<div class=\"flex flex-col h-full\">  <VideoPlayer/></div>"
      },
      {
        "name": "VideoPlayer",
        "html": "<div class=\"flex-grow\">  <video src=\"{videoSrc}\" class=\"w-full h-full object-cover\"></video>  <PlaybackControls/></div>"
      },
      {
        "name": "PlaybackControls",
        "html": "<div class=\"flex justify-between py-2\">  <button class=\"text-gray-500 hover:text-gray-700\" aria-label=\"Play/Pause\">    {playPauseButtonIcon}  </button>  <ProgressBar/>  <VolumeControl/></div>"
      },
      {
        "name": "ProgressBar",
        "html": "<div class=\"flex-grow w-full h-2 bg-gray-200 rounded\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${progressPercentage}%` }}></div></div>"
      },
      {
        "name": "VolumeControl",
        "html": "<div class=\"flex items-center\">  <button class=\"text-gray-500 hover:text-gray-700\" aria-label=\"Mute/Unmute\">    {muteButtonIcon}  </button>  <div class=\"h-2 w-16 bg-gray-200 rounded\">    <div class=\"bg-orange-500 h-2\" style={{ width: `${volumePercentage}%` }}></div>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should be a reaction picker with two tabs: \"Popular\" and \"Custom\". The \"Popular\" tab displays a grid of popular emojis, and the \"Custom\" tab allows users to search and select from a list of custom emojis. The reaction picker should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "ReactionPicker",
        "is_standalone": true,
        "description": "Standalone component, contains the entire reaction picker UI. "
      },
      {
        "name": "TabNav",
        "is_standalone": true,
        "description": "Standalone component, contains the tab navigation for \"Popular\" and \"Custom\" tabs. "
      },
      {
        "name": "EmojiGrid",
        "is_standalone": false,
        "description": "Takes children, displays a grid of emojis. "
      },
      {
        "name": "EmojiItem",
        "is_standalone": true,
        "description": "Standalone component, represents a single emoji. "
      },
      {
        "name": "CustomEmojiSearch",
        "is_standalone": true,
        "description": "Standalone component, contains a search input for custom emojis. "
      },
      {
        "name": "CustomEmojiList",
        "is_standalone": false,
        "description": "Takes children, displays a list of custom emojis. "
      },
      {
        "name": "CustomEmojiItem",
        "is_standalone": true,
        "description": "Standalone component, represents a single custom emoji. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 bg-white rounded shadow-md\">\n  <ReactionPicker>\n    <TabNav>\n      <a href=\"#\" className=\"text-gray-600\">Popular</a>\n      <a href=\"#\" className=\"text-gray-600\">Custom</a>\n    </TabNav>\n    <div className=\"py-4\">\n      <EmojiGrid>\n        <!-- popular emojis will be rendered here -->\n        <EmojiItem />\n      </EmojiGrid>\n      <CustomEmojiSearch>\n        <input type=\"search\" placeholder=\"Search custom emojis\" />\n      </CustomEmojiSearch>\n      <CustomEmojiList>\n        <!-- custom emojis will be rendered here -->\n        <CustomEmojiItem />\n      </CustomEmojiList>\n    </div>\n  </ReactionPicker>\n</div>\n",
    "component_html": [
      {
        "name": "ReactionPicker",
        "html": "<div className=\"flex flex-col h-screen\">  {children}</div>"
      },
      {
        "name": "TabNav",
        "html": "<div className=\"flex justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "EmojiGrid",
        "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
      },
      {
        "name": "EmojiItem",
        "html": "<div className=\"p-2\">  <span>{emoji}</span></div>"
      },
      {
        "name": "CustomEmojiSearch",
        "html": "<div className=\"mb-4\">  <input type=\"search\" placeholder={placeholder} /></div>"
      },
      {
        "name": "CustomEmojiList",
        "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "CustomEmojiItem",
        "html": "<li className=\"py-2\">  <span>{emoji}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a verified checkmark and a badge to indicate that a channel is official.",
    "component_list": [
      {
        "name": "VerifiedBadge",
        "is_standalone": true,
        "description": "A standalone component that displays a verified checkmark and a badge. "
      },
      {
        "name": "CheckmarkIcon",
        "is_standalone": true,
        "description": "A standalone component that displays a checkmark icon. "
      }
    ],
    "main_html": "<div class=\"flex items-center\">\n  <VerifiedBadge/>\n  <span class=\"text-sm\">{channelName}</span>\n</div>\n",
    "component_html": [
      {
        "name": "VerifiedBadge",
        "html": "<div class=\"flex items-center bg-yellow-100 rounded-full py-1 px-2 text-yellow-700\">  <CheckmarkIcon/>  <span class=\"text-xs\">Official</span></div>"
      },
      {
        "name": "CheckmarkIcon",
        "html": "<i class=\"fas fa-check text-green-500\" aria-hidden=\"true\"></i>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first loading spinner with an animation and a progress circle. The progress circle should show the percentage of completion.",
    "component_list": [
      {
        "name": "LoadingSpinner",
        "is_standalone": true,
        "description": "a standalone component that displays the loading animation and progress circle. "
      }
    ],
    "main_html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
    "component_html": [
      {
        "name": "LoadingSpinner",
        "html": "<div class=\"relative w-12 h-12 mx-auto\">  <!-- animation -->  <div class=\"animate-spin h-12 w-12 border-4 border-gray-200 rounded-full border-t-transparent\"></div>  <!-- progress circle -->  <div class=\"absolute top-0 left-0 w-12 h-12 text-lg text-gray-600\">    <span>{progress}%</span>  </div></div>"
      }
    ]
  },
  {
    "description": "A popup with a red background, a header with an error message, and two buttons - \"Retry\" and \"Cancel\". The popup should be centered on the screen and be responsive.",
    "component_list": [
      {
        "name": "ErrorPopup",
        "is_standalone": true,
        "description": "standalone component that wraps the entire popup "
      },
      {
        "name": "ErrorHeader",
        "is_standalone": true,
        "description": "standalone component that displays the error message "
      },
      {
        "name": "Button",
        "is_standalone": true,
        "description": "standalone component that renders a button with text "
      },
      {
        "name": "ButtonGroup",
        "is_standalone": false,
        "description": "component that takes children (two `Button` components in this case) "
      }
    ],
    "main_html": "<div class=\"fixed top-0 left-0 w-full h-screen bg-red-500 bg-opacity-50 flex justify-center\">\n  <ErrorPopup>\n    <ErrorHeader>{error_message}</ErrorHeader>\n    <ButtonGroup>\n      <Button>Retry</Button>\n      <Button>Cancel</Button>\n    </ButtonGroup>\n  </ErrorPopup>\n</div>\n",
    "component_html": [
      {
        "name": "ErrorPopup",
        "html": "<div class=\"bg-white rounded shadow-md p-4 w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5\">  {children}</div>"
      },
      {
        "name": "ErrorHeader",
        "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
      },
      {
        "name": "Button",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
      },
      {
        "name": "ButtonGroup",
        "html": "<div class=\"flex justify-center mt-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first user settings panel with two main sections: notification options and account options. The notification options section should have a heading, a list of toggle switches for different notification types, and a \"Save Changes\" button. The account options section should have a heading, a list of profile information (e.g. name, email), and an \"Edit Profile\" button.",
    "component_list": [
      {
        "name": "NotificationOptions",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "NotificationToggle",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "AccountOptions",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ProfileInfo",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "EditProfileButton",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "SaveChangesButton",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div className=\"flex flex-col p-4 md:p-8\">\n  <h1 className=\"text-2xl mb-4\">User Settings</h1>\n  <NotificationOptions/>\n  <AccountOptions/>\n</div>\n",
    "component_html": [
      {
        "name": "NotificationOptions",
        "html": "<section className=\"mb-8\">  <h2 className=\"text-lg mb-2\">Notification Options</h2>  <ul>    <li>      <NotificationToggle label=\"Email Notifications\" defaultChecked={true}/>    </li>    <li>      <NotificationToggle label=\"Push Notifications\" defaultChecked={false}/>    </li>    <li>      <NotificationToggle label=\"In-App Notifications\" defaultChecked={true}/>    </li>  </ul>  <SaveChangesButton/></section>"
      },
      {
        "name": "NotificationToggle",
        "html": "<div className=\"flex items-center mb-2\">  <input type=\"checkbox\" defaultChecked={defaultChecked} className=\"mr-2\"/>  <span>{label}</span></div>"
      },
      {
        "name": "AccountOptions",
        "html": "<section className=\"mb-8\">  <h2 className=\"text-lg mb-2\">Account Options</h2>  <ul>    <li>      <ProfileInfo label=\"Name\" value={userName}/>    </li>    <li>      <ProfileInfo label=\"Email\" value={userEmail}/>    </li>  </ul>  <EditProfileButton/></section>"
      },
      {
        "name": "ProfileInfo",
        "html": "<div className=\"flex items-center mb-2\">  <span>{label}:</span>  <span className=\"ml-2\">{value}</span></div>"
      },
      {
        "name": "EditProfileButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit Profile</button>"
      },
      {
        "name": "SaveChangesButton",
        "html": "<button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">Save Changes</button>"
      }
    ]
  },
  {
    "description": "The UI should display a channel topic and description with an edit button. The topic and description should be clearly readable, and the edit button should be prominent and accessible.",
    "component_list": [
      {
        "name": "ChannelTopic",
        "is_standalone": true,
        "description": "A standalone component that displays the channel topic. "
      },
      {
        "name": "ChannelDescription",
        "is_standalone": true,
        "description": "A standalone component that displays the channel description. "
      },
      {
        "name": "EditButton",
        "is_standalone": true,
        "description": "A standalone component that displays an edit button. "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-4 md:flex-row md:items-center\">\n  <div class=\"flex-1\">\n    <ChannelTopic />\n    <ChannelDescription />\n  </div>\n  <EditButton />\n</div>\n",
    "component_html": [
      {
        "name": "ChannelTopic",
        "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
      },
      {
        "name": "ChannelDescription",
        "html": "<p class=\"text-sm\">{channel_description}</p>"
      },
      {
        "name": "EditButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit</button>"
      }
    ]
  },
  {
    "description": "The UI should display a list of pinned messages, each with a timestamp and author information. The messages should be displayed in a clean and readable format, with the timestamp and author information clearly visible.",
    "component_list": [
      {
        "name": "PinnedMessage",
        "is_standalone": true,
        "description": "A standalone component that displays a single pinned message, including the message text, timestamp, and author information. "
      },
      {
        "name": "PinnedMessageList",
        "is_standalone": false,
        "description": "A component that takes children, which is a list of `PinnedMessage` components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Pinned Messages</h2>\n  <PinnedMessageList>\n    <PinnedMessage />\n    <PinnedMessage />\n    <!-- additional pinned messages here -->\n  </PinnedMessageList>\n</div>\n",
    "component_html": [
      {
        "name": "PinnedMessage",
        "html": "<div class=\"flex items-center mb-2\">  <span class=\"text-gray-600\">{author_name}</span>  <span class=\"text-gray-400 text-sm ml-2\">{timestamp}</span>  <p class=\"ml-4\">{message_text}</p></div>"
      },
      {
        "name": "PinnedMessageList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should have a file input field that allows users to upload a file. The input field should have a label indicating the accepted file types and a maximum file size.",
    "component_list": [
      {
        "name": "FileInput",
        "is_standalone": true,
        "description": "(standalone) - The file input field "
      },
      {
        "name": "Label",
        "is_standalone": false,
        "description": "(takes children) - The label for the file input field "
      },
      {
        "name": "Description",
        "is_standalone": false,
        "description": "(takes children) - The description of the file input field "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2\">\n  <Label>Upload File ({acceptedFileTypes})</Label>\n  <FileInput />\n  <Description>Max file size: {maxFileSize}MB</Description>\n</div>\n",
    "component_html": [
      {
        "name": "FileInput",
        "html": "<input   type=\"file\"   class=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"   accept={acceptedFileTypes}   maxLength={maxFileSize * 1024 * 1024} />"
      },
      {
        "name": "Label",
        "html": "<label class=\"block mb-2 text-sm font-medium text-gray-700\">{children}</label>"
      },
      {
        "name": "Description",
        "html": "<p class=\"text-sm text-gray-500\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of server roles with their corresponding permissions. Each role should have an edit button that, when clicked, reveals a permission editor. The permission editor should display a list of available permissions with checkboxes to select or deselect them. The UI should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "ServerRoleList",
        "is_standalone": true,
        "description": "A standalone component that displays a list of server roles. "
      },
      {
        "name": "ServerRoleItem",
        "is_standalone": false,
        "description": "A component that displays a single server role with an edit button. Takes children. "
      },
      {
        "name": "PermissionEditor",
        "is_standalone": true,
        "description": "A standalone component that displays a list of available permissions with checkboxes. "
      },
      {
        "name": "PermissionItem",
        "is_standalone": false,
        "description": "A component that displays a single permission with a checkbox. Takes children. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Server Roles</h1>\n  <ServerRoleList/>\n</div>\n",
    "component_html": [
      {
        "name": "ServerRoleList",
        "html": "<ul class=\"list-none mb-4\">  {roles.map(role => (    <ServerRoleItem key={role.id}>{role.name}</ServerRoleItem>  ))}</ul>"
      },
      {
        "name": "ServerRoleItem",
        "html": "<li class=\"mb-2\">  <span class=\"font-bold\">{children}</span>  <button class=\"ml-2 text-sm text-blue-500\" onClick={handleEditClick}>Edit</button>  {isEditing && <PermissionEditor/>}</li>"
      },
      {
        "name": "PermissionEditor",
        "html": "<div class=\"p-4 mb-4 bg-white border rounded\">  <h2 class=\"text-lg font-bold mb-2\">Edit Permissions</h2>  <ul class=\"list-none mb-4\">    {permissions.map(permission => (      <PermissionItem key={permission.id}>{permission.name}</PermissionItem>    ))}  </ul>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Save Changes</button></div>"
      },
      {
        "name": "PermissionItem",
        "html": "<li class=\"mb-2\">  <input type=\"checkbox\" id={permission.id} checked={permission.isSelected} disabled={permission.isReadOnly}/>  <label for={permission.id}>{children}</label></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive dashboard that displays key metrics and KPIs in a clear and concise manner. It should have a navigation menu on the top, a hero section with a prominent metric, and a grid of cards displaying various metrics and KPIs.",
    "component_list": [
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "Standalone component for the navigation menu. "
      },
      {
        "name": "HeroMetric",
        "is_standalone": true,
        "description": "Standalone component for the hero section with a prominent metric. "
      },
      {
        "name": "MetricCard",
        "is_standalone": false,
        "description": "Component that takes children, displays a metric or KPI. "
      },
      {
        "name": "GridContainer",
        "is_standalone": false,
        "description": "Component that takes children, displays a grid of cards. "
      },
      {
        "name": "PageHeader",
        "is_standalone": true,
        "description": "Standalone component for the page header. "
      }
    ],
    "main_html": "<header>\n  <NavBar />\n</header>\n<main>\n  <PageHeader title=\"Dashboard\" />\n  <section>\n    <HeroMetric />\n    <GridContainer>\n      <MetricCard />\n      <MetricCard />\n      <MetricCard />\n      <!-- Add more MetricCards here -->\n    </GridContainer>\n  </section>\n</main>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<nav class=\"flex justify-between items-center h-16 bg-gray-200\">  <ul class=\"flex\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>    <!-- Add more links here -->  </ul></nav>"
      },
      {
        "name": "HeroMetric",
        "html": "<section class=\"bg-gray-100 py-4\">  <h1 class=\"text-3xl\">{key_metric_value}</h1>  <p class=\"text-gray-600\">{key_metric_description}</p></section>"
      },
      {
        "name": "MetricCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg\">{metric_name}</h2>  <p class=\"text-gray-600\">{metric_value}</p></div>"
      },
      {
        "name": "GridContainer",
        "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">  {children}</div>"
      },
      {
        "name": "PageHeader",
        "html": "<header class=\"bg-gray-200 py-2\">  <h1 class=\"text-2xl\">{title}</h1></header>"
      }
    ]
  },
  {
    "description": "The UI should be a simple, responsive lead form with a header, input fields for name, email, phone number, and a submit button. The form should be accessible, with clear labels and placeholders for each input field.",
    "component_list": [
      {
        "name": "LeadFormContainer",
        "is_standalone": true,
        "description": "(standalone): The main container for the lead form. "
      },
      {
        "name": "FormHeader",
        "is_standalone": true,
        "description": "(standalone): The header section of the form. "
      },
      {
        "name": "FormField",
        "is_standalone": false,
        "description": "(takes children): A single input field with a label and placeholder. "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "(standalone): The submit button for the form. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md\">\n  <LeadFormContainer>\n    <FormHeader />\n    <FormField>\n      <label>First Name:</label>\n      <input type=\"text\" placeholder=\"Enter your first name\" />\n    </FormField>\n    <FormField>\n      <label>Email:</label>\n      <input type=\"email\" placeholder=\"Enter your email\" />\n    </FormField>\n    <FormField>\n      <label>Phone Number:</label>\n      <input type=\"tel\" placeholder=\"Enter your phone number\" />\n    </FormField>\n    <SubmitButton />\n  </LeadFormContainer>\n</div>\n",
    "component_html": [
      {
        "name": "LeadFormContainer",
        "html": "<div className=\"flex flex-col p-4\">{children}</div>"
      },
      {
        "name": "FormHeader",
        "html": "<h2 className=\"text-lg font-bold mb-2\">Get in Touch</h2><p className=\"text-sm text-gray-600 mb-4\">We'll get back to you soon.</p>"
      },
      {
        "name": "FormField",
        "html": "<div className=\"flex flex-col mb-4\">  <label className=\"text-sm text-gray-600\">{label}</label>  <input type={type} placeholder={placeholder} className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
      },
      {
        "name": "SubmitButton",
        "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Submit</button>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive contact list with a search bar at the top, followed by a list of contacts. Each contact should display the customer's name, email, phone number, and a button to edit the contact's information.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone): a search input field with a submit button "
      },
      {
        "name": "ContactCard",
        "is_standalone": false,
        "description": "(takes children): displays a single contact's information "
      },
      {
        "name": "ContactList",
        "is_standalone": false,
        "description": "(takes children): a list of contacts, containing multiple `ContactCard`s "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <SearchBar />\n  <ul className=\"divide-y divide-gray-200\">\n    <ContactList>\n      <ContactCard />\n      <!-- more ContactCards here -->\n    </ContactList>\n  </ul>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<form className=\"flex mb-4\">  <input type=\"search\" className=\"w-full pl-4 pr-10 text-sm text-gray-700\" placeholder=\"Search contacts\" />  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Search</button></form>"
      },
      {
        "name": "ContactCard",
        "html": "<li className=\"py-4\">  <h5 className=\"text-lg leading-6 font-medium text-gray-900\">{customer_name}</h5>  <p className=\"text-sm text-gray-500\">{email}</p>  <p className=\"text-sm text-gray-500\">{phone_number}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit</button></li>"
      },
      {
        "name": "ContactList",
        "html": "<!-- contact cards will be rendered inside this ul --><ul className=\"divide-y divide-gray-200\"></ul>"
      }
    ]
  },
  {
    "description": "The UI should be a calendar-like interface that displays a grid of days and allows users to schedule and assign tasks. The UI should be responsive, with a mobile-friendly design that adapts to smaller screens. The main components are a calendar header, a calendar grid, and a task list.",
    "component_list": [
      {
        "name": "CalendarHeader",
        "is_standalone": true,
        "description": "A standalone component that displays the current month and year. "
      },
      {
        "name": "CalendarGrid",
        "is_standalone": false,
        "description": "A component that takes children (`CalendarDay` components) and displays a grid of days in the current month. "
      },
      {
        "name": "CalendarDay",
        "is_standalone": true,
        "description": "A standalone component that displays a single day in the calendar grid, with optional tasks assigned to that day. "
      },
      {
        "name": "TaskList",
        "is_standalone": false,
        "description": "A component that takes children (`TaskItem` components) and displays a list of tasks assigned to a particular day. "
      },
      {
        "name": "TaskItem",
        "is_standalone": true,
        "description": "A standalone component that displays a single task, including its name, assignee, and due date. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <CalendarHeader />\n  <CalendarGrid>\n    {calendar_days.map((day) => (\n      <CalendarDay key={day.date}>{day.tasks && <TaskList>{day.tasks.map((task) => <TaskItem key={task.id} />)}</TaskList>}</CalendarDay>\n    ))}\n  </CalendarGrid>\n</div>\n",
    "component_html": [
      {
        "name": "CalendarHeader",
        "html": "<h1 className=\"text-lg md:text-xl lg:text-2xl\">{current_month} {current_year}</h1>"
      },
      {
        "name": "CalendarGrid",
        "html": "<div className=\"grid grid-cols-7 gap-2 md:gap-4 lg:gap-6\">{children}</div>"
      },
      {
        "name": "CalendarDay",
        "html": "<div className=\"w-full p-2 md:p-4 lg:p-6\">  <span className=\"text-sm\">{day_of_week} {day_of_month}</span>  {children}</div>"
      },
      {
        "name": "TaskList",
        "html": "<ul className=\"list-none\">{children}</ul>"
      },
      {
        "name": "TaskItem",
        "html": "<li className=\"py-2\">  <span className=\"text-sm\">{task_name}</span>  <span className=\"text-xs text-gray-600\">Assigned to {assignee}</span>  <span className=\"text-xs text-gray-600\">Due {due_date}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should resemble a typical CRM dashboard, with a header section showing a nav bar and a title, a main section showing a table with columns for Opportunity Name, Stage, Probability, and Close Date, and a footer section with pagination controls.",
    "component_list": [
      {
        "name": "OpportunityTracker",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire UI. "
      },
      {
        "name": "NavBar",
        "is_standalone": true,
        "description": "A standalone component for the navigation bar. "
      },
      {
        "name": "PipelineTable",
        "is_standalone": false,
        "description": "A component that takes children to render the pipeline data. "
      },
      {
        "name": "PipelineRow",
        "is_standalone": false,
        "description": "A component that takes children to render a single row of pipeline data. "
      },
      {
        "name": "Pagination",
        "is_standalone": true,
        "description": "A standalone component for the pagination controls. "
      }
    ],
    "main_html": "<div class=\"min-h-screen flex flex-col\">\n  <NavBar />\n  <main class=\"flex-1 p-4\">\n    <h1 class=\"text-2xl font-bold mb-4\">Opportunity Tracker</h1>\n    <PipelineTable>\n      <PipelineRow />\n      <!-- more rows here -->\n    </PipelineTable>\n  </main>\n  <Pagination />\n</div>\n",
    "component_html": [
      {
        "name": "NavBar",
        "html": "<nav class=\"bg-gray-800 py-4\">  <ul class=\"flex justify-between max-w-md mx-auto\">    <li><a href=\"#\" class=\"text-white hover:text-gray-300\">Dashboard</a></li>    <li><a href=\"#\" class=\"text-white hover:text-gray-300\">Reports</a></li>    <li><a href=\"#\" class=\"text-white hover:text-gray-300\">Settings</a></li>  </ul></nav>"
      },
      {
        "name": "PipelineTable",
        "html": "<table class=\"w-full mb-4\">  <thead>    <tr>      <th class=\"text-left\">Opportunity Name</th>      <th class=\"text-left\">Stage</th>      <th class=\"text-left\">Probability</th>      <th class=\"text-left\">Close Date</th>    </tr>  </thead>  <tbody>    {children}  </tbody></table>"
      },
      {
        "name": "PipelineRow",
        "html": "<tr>  <td>{opportunity_name}</td>  <td>{stage}</td>  <td>{probability}%</td>  <td>{close_date}</td></tr>"
      },
      {
        "name": "Pagination",
        "html": "<nav class=\"flex justify-between max-w-md mx-auto\">  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\" disabled={is_first_page}>Previous</button>  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\" disabled={is_last_page}>Next</button>  <span class=\"text-sm\">Showing {current_page} of {total_pages}</span></nav>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first, and accessible interface for building custom data fields. It should consist of a header, a field-type selection section, and a field configuration section. The header should display the title \"Custom Field Builder\" and have an optional \"Save\" button. The field-type selection section should display a list of available field types (e.g., text, number, date, etc.). The field configuration section should display fields depending on the selected field type.",
    "component_list": [
      {
        "name": "HeaderComponent",
        "is_standalone": true,
        "description": "(standalone): Displays the title and optional save button. "
      },
      {
        "name": "FieldTypeSelectorComponent",
        "is_standalone": true,
        "description": "(standalone): Displays a list of available field types. "
      },
      {
        "name": "FieldConfiguratorComponent",
        "is_standalone": false,
        "description": "(takes children): Displays fields depending on the selected field type. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <HeaderComponent/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <FieldTypeSelectorComponent/>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-2/3 p-4\">\n      <FieldConfiguratorComponent>\n        <!-- field configuration fields will be rendered here -->\n      </FieldConfiguratorComponent>\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "HeaderComponent",
        "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-lg font-bold\">Custom Field Builder</h1>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Save</button></header>"
      },
      {
        "name": "FieldTypeSelectorComponent",
        "html": "<ul class=\"list-none mb-4\">  <li><input type=\"radio\" id=\"text-field\" name=\"field-type\" value=\"text\"/><label for=\"text-field\">Text</label></li>  <li><input type=\"radio\" id=\"number-field\" name=\"field-type\" value=\"number\"/><label for=\"number-field\">Number</label></li>  <li><input type=\"radio\" id=\"date-field\" name=\"field-type\" value=\"date\"/><label for=\"date-field\">Date</label></li>  <!-- more field types will be rendered here --></ul>"
      },
      {
        "name": "FieldConfiguratorComponent",
        "html": "<!-- field configuration fields will be rendered here based on the selected field type -->{children}"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first, and accessible permission control panel that displays a list of roles and their corresponding permissions. The panel should allow administrators to view, add, edit, and delete roles and permissions.",
    "component_list": [
      {
        "name": "PermissionControlPanel",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire UI. "
      },
      {
        "name": "RolesList",
        "is_standalone": true,
        "description": "Standalone component that displays a list of roles. "
      },
      {
        "name": "RoleCard",
        "is_standalone": false,
        "description": "Takes children, represents a single role with its permissions. "
      },
      {
        "name": "PermissionItem",
        "is_standalone": true,
        "description": "Standalone component, represents a single permission. "
      },
      {
        "name": "AddRoleButton",
        "is_standalone": true,
        "description": "Standalone component, triggers the creation of a new role. "
      },
      {
        "name": "EditRoleButton",
        "is_standalone": true,
        "description": "Standalone component, triggers the editing of an existing role. "
      },
      {
        "name": "DeleteRoleButton",
        "is_standalone": true,
        "description": "Standalone component, triggers the deletion of a role. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PermissionControlPanel>\n    <RolesList>\n      {rolesList}\n    </RolesList>\n    <AddRoleButton />\n  </PermissionControlPanel>\n</div>\n",
    "component_html": [
      {
        "name": "PermissionControlPanel",
        "html": "<div class=\"bg-white shadow-md rounded p-4 md:p-6 lg:p-8\">  {children}</div>"
      },
      {
        "name": "RolesList",
        "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
      },
      {
        "name": "RoleCard",
        "html": "<li class=\"py-4\">  <h2 class=\"text-lg\">{roleName}</h2>  <ul class=\"list-none mb-4\">    {permissions}  </ul>  <EditRoleButton />  <DeleteRoleButton /></li>"
      },
      {
        "name": "PermissionItem",
        "html": "<li class=\"py-2\">{permissionName}</li>"
      },
      {
        "name": "AddRoleButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Add Role</button>"
      },
      {
        "name": "EditRoleButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit</button>"
      },
      {
        "name": "DeleteRoleButton",
        "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Delete</button>"
      }
    ]
  },
  {
    "description": "The UI should be a simple, easy-to-read table that displays a revenue forecast, with columns for the date, sales amount, and a percentage change indicator. The table should be responsive and accessible on mobile devices.",
    "component_list": [
      {
        "name": "RevenueForecastTable",
        "is_standalone": true,
        "description": "A standalone component that renders a table with revenue forecast data. "
      },
      {
        "name": "ForecastTableRow",
        "is_standalone": false,
        "description": "A component that takes children, representing a single row in the table. "
      },
      {
        "name": "DateColumn",
        "is_standalone": true,
        "description": "A standalone component that displays a date. "
      },
      {
        "name": "SalesAmountColumn",
        "is_standalone": true,
        "description": "A standalone component that displays a sales amount. "
      },
      {
        "name": "PercentageChangeColumn",
        "is_standalone": true,
        "description": "A standalone component that displays a percentage change indicator. "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <RevenueForecastTable>\n    <ForecastTableRow>\n      <DateColumn><{date}/></DateColumn>\n      <SalesAmountColumn><{sales_amount}/></SalesAmountColumn>\n      <PercentageChangeColumn><{percentage_change}/></PercentageChangeColumn>\n    </ForecastTableRow>\n    <!-- Add more ForecastTableRow components here -->\n  </RevenueForecastTable>\n</div>\n",
    "component_html": [
      {
        "name": "RevenueForecastTable",
        "html": "<table className=\"w-full border-collapse\">  <thead>    <tr>      <th className=\"px-4 py-2\">Date</th>      <th className=\"px-4 py-2\">Sales Amount</th>      <th className=\"px-4 py-2\">Percentage Change</th>    </tr>  </thead>  <tbody>    {children}  </tbody></table>"
      },
      {
        "name": "ForecastTableRow",
        "html": "<tr className=\"border-b\">  {children}</tr>"
      },
      {
        "name": "DateColumn",
        "html": "<td className=\"px-4 py-2\">{date}</td>"
      },
      {
        "name": "SalesAmountColumn",
        "html": "<td className=\"px-4 py-2\">{sales_amount}</td>"
      },
      {
        "name": "PercentageChangeColumn",
        "html": "<td className=\"px-4 py-2\">{percentage_change}%</td>"
      }
    ]
  },
  {
    "description": "The UI should display a customer's profile information in a clean and organized manner. It should include the customer's name, email address, phone number, and other relevant details. The layout should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "CustomerProfileContainer",
        "is_standalone": true,
        "description": "(standalone): The main container for the customer profile information. "
      },
      {
        "name": "CustomerDetails",
        "is_standalone": false,
        "description": "(takes children): A component that displays the customer's details, such as name, email, and phone number. "
      },
      {
        "name": "DetailItem",
        "is_standalone": false,
        "description": "(takes children): A component that displays a single detail, such as a label and value. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded-lg shadow-md\">\n  <CustomerProfileContainer>\n    <CustomerDetails>\n      <DetailItem>\n        <span>Name:</span> <span>{customer_name}</span>\n      </DetailItem>\n      <DetailItem>\n        <span>Email:</span> <span>{customer_email}</span>\n      </DetailItem>\n      <DetailItem>\n        <span>Phone:</span> <span>{customer_phone}</span>\n      </DetailItem>\n      <!-- Add more detail items as needed -->\n    </CustomerDetails>\n  </CustomerProfileContainer>\n</div>\n",
    "component_html": [
      {
        "name": "CustomerProfileContainer",
        "html": "<div class=\"flex flex-col h-full p-4 md:p-6\">  {children}</div>"
      },
      {
        "name": "CustomerDetails",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "DetailItem",
        "html": "<li class=\"flex items-center mb-2\">  <span class=\"text-gray-600\">{label}</span>  <span>{value}</span></li>"
      }
    ]
  },
  {
    "description": "The Reporting Dashboard should display data insights in a clear and organized manner. It should have a responsive design, with a sidebar navigation and a main content area. The main content area should display various data visualizations, such as charts, graphs, and tables, to help users gain insights from the data.",
    "component_list": [
      {
        "name": "SidebarNavigation",
        "is_standalone": true,
        "description": "(standalone): A navigation menu that appears on the left side of the screen. "
      },
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "(standalone): A header that displays the title of the dashboard and any relevant links or actions. "
      },
      {
        "name": "DataVisualization",
        "is_standalone": false,
        "description": "(takes children): A component that displays a chart, graph, or table to visualize the data. "
      },
      {
        "name": "InsightCard",
        "is_standalone": false,
        "description": "(takes children): A card component that displays a brief summary of an insight, with an optional link to more information. "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <SidebarNavigation />\n  <div class=\"flex-1 overflow-y-auto\">\n    <DashboardHeader />\n    <div class=\"p-4\">\n      <DataVisualization>\n        <!-- chart or graph goes here -->\n      </DataVisualization>\n      <InsightCard>\n        <!-- insight summary goes here -->\n      </InsightCard>\n      <InsightCard>\n        <!-- insight summary goes here -->\n      </InsightCard>\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "SidebarNavigation",
        "html": "<nav class=\"w-64 bg-gray-100 p-4\">  <ul>    <li><a href=\"#\" class=\"block py-2 px-4\">Link 1</a></li>    <li><a href=\"#\" class=\"block py-2 px-4\">Link 2</a></li>    <!-- more links... -->  </ul></nav>"
      },
      {
        "name": "DashboardHeader",
        "html": "<header class=\"bg-white py-4 px-4\">  <h1 class=\"text-2xl\">{dashboard_title}</h1>  <p class=\"text-gray-600\">{dashboard_subtitle}</p>  <a href=\"#\" class=\"text-blue-600 hover:text-blue-900\">More info</a></header>"
      },
      {
        "name": "DataVisualization",
        "html": "<div class=\"bg-white p-4\">  {children}</div>"
      },
      {
        "name": "InsightCard",
        "html": "<div class=\"bg-white p-4 mb-4\">  <h2 class=\"text-lg\">{insight_title}</h2>  <p class=\"text-gray-600\">{insight_summary}</p>  <a href=\"#\" class=\"text-blue-600 hover:text-blue-900\">Learn more</a></div>"
      }
    ]
  },
  {
    "description": "The UI should be a dashboard that displays a grid of integration cards, with a search bar at the top and a button to add new integrations. Each integration card should display the logo of the third-party app, the name of the app, and a brief description. The cards should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "IntegrationsHub",
        "is_standalone": true,
        "description": "The main dashboard component that contains the search bar, add button, and grid of integration cards. (Standalone) "
      },
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "A search input field with a search icon. (Standalone) "
      },
      {
        "name": "AddButton",
        "is_standalone": true,
        "description": "A button to add new integrations. (Standalone) "
      },
      {
        "name": "IntegrationCard",
        "is_standalone": false,
        "description": "A card that displays the logo, name, and description of a third-party app. (Takes children) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex justify-between mb-4\">\n    <SearchBar />\n    <AddButton />\n  </div>\n  <div class=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n    <IntegrationCard />\n    <IntegrationCard />\n    <!-- repeat IntegrationCard components for each integration -->\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex bg-white border border-gray-200 rounded-md p-2\">  <input type=\"search\" class=\"w-full pl-2 pr-8 text-sm\" placeholder=\"Search integrations\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    <i class=\"fas fa-search\"></i>  </button></div>"
      },
      {
        "name": "AddButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add Integration</button>"
      },
      {
        "name": "IntegrationCard",
        "html": "<div class=\"bg-white border border-gray-200 rounded-md p-4\">  <img src=\"{logo_url}\" alt=\"{app_name} logo\" class=\"h-8 w-8 mr-2\">  <div class=\"flex-1\">    <h2 class=\"text-lg\">{app_name}</h2>    <p class=\"text-gray-600\">{app_description}</p>  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a table with user account information, including username, email, role, and actions to edit or delete each user. The table should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "UserTable",
        "is_standalone": true,
        "description": "standalone component that renders a table with user account information "
      },
      {
        "name": "UserTableRow",
        "is_standalone": false,
        "description": "takes children, renders a single table row with user account information "
      },
      {
        "name": "ActionButton",
        "is_standalone": true,
        "description": "standalone component that renders an action button (e.g. edit or delete) "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">User Management</h1>\n  <UserTable />\n</div>\n",
    "component_html": [
      {
        "name": "UserTable",
        "html": "<table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">  <thead class=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">    <tr>      <th scope=\"col\" class=\"py-3 px-6\">Username</th>      <th scope=\"col\" class=\"py-3 px-6\">Email</th>      <th scope=\"col\" class=\"py-3 px-6\">Role</th>      <th scope=\"col\" class=\"py-3 px-6\">Actions</th>    </tr>  </thead>  <tbody>    <!-- {users} will be rendered here -->  </tbody></table>"
      },
      {
        "name": "UserTableRow",
        "html": "<tr>  <td class=\"py-4 px-6\">{username}</td>  <td class=\"py-4 px-6\">{email}</td>  <td class=\"py-4 px-6\">{role}</td>  <td class=\"py-4 px-6\">    <ActionButton>Edit</ActionButton>    <ActionButton>Delete</ActionButton>  </td></tr>"
      },
      {
        "name": "ActionButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {label}</button>"
      }
    ]
  },
  {
    "description": "The Data Importer UI should be a responsive, mobile-first, and accessible interface that allows users to upload bulk data. The UI should display a prominent call-to-action (CTA) to upload a file, with options to select the file type and a brief description of the file format requirements. The UI should also include a progress bar to display the upload progress and a success message upon successful upload.",
    "component_list": [
      {
        "name": "DataImporterContainer",
        "is_standalone": true,
        "description": "(standalone) - The main container for the Data Importer UI. "
      },
      {
        "name": "UploadFileButton",
        "is_standalone": true,
        "description": "(standalone) - A button to upload a file. "
      },
      {
        "name": "FileTypeSelect",
        "is_standalone": true,
        "description": "(standalone) - A dropdown to select the file type. "
      },
      {
        "name": "FileFormatDescription",
        "is_standalone": true,
        "description": "(standalone) - A brief description of the file format requirements. "
      },
      {
        "name": "UploadProgressBar",
        "is_standalone": true,
        "description": "(standalone) - A progress bar to display the upload progress. "
      },
      {
        "name": "UploadSuccessMessage",
        "is_standalone": true,
        "description": "(standalone) - A success message upon successful upload. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8 mt-4 mb-4 bg-white rounded shadow-md\">\n  <DataImporterContainer>\n    <UploadFileButton/>\n    <FileTypeSelect/>\n    <FileFormatDescription/>\n    <UploadProgressBar/>\n    <UploadSuccessMessage/>\n  </DataImporterContainer>\n</div>\n",
    "component_html": [
      {
        "name": "DataImporterContainer",
        "html": "<div class=\"flex flex-col p-4\">  {children}</div>"
      },
      {
        "name": "UploadFileButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Upload File</button>"
      },
      {
        "name": "FileTypeSelect",
        "html": "<select class=\"w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"\">Select File Type</option>  <option value=\"csv\">CSV</option>  <option value=\"json\">JSON</option>  <option value=\"xml\">XML</option></select>"
      },
      {
        "name": "FileFormatDescription",
        "html": "<p class=\"text-sm text-gray-600\">  Please upload a file in {file_format} format.</p>"
      },
      {
        "name": "UploadProgressBar",
        "html": "<div class=\"w-full bg-gray-200 h-2 mb-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${upload_progress}%` }}></div></div>"
      },
      {
        "name": "UploadSuccessMessage",
        "html": "<p class=\"text-sm text-green-600\">{upload_success_message}</p>"
      }
    ]
  },
  {
    "description": "The UI should display a customizable theme selector with a dropdown menu, allowing users to select from a variety of themes to brand their interface. The theme selector should be responsive, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "ThemeSelector",
        "is_standalone": true,
        "description": "A standalone component that displays a dropdown menu with theme options. "
      },
      {
        "name": "ThemeOption",
        "is_standalone": false,
        "description": "A component that represents a single theme option in the dropdown menu, takes children. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <ThemeSelector />\n</div>\n",
    "component_html": [
      {
        "name": "ThemeSelector",
        "html": "<div class=\"relative inline-block w-full md:w-1/2 lg:w-1/3\">  <button class=\"btn btn-secondary w-full text-left py-2 pl-4 pr-10\" id=\"theme-selector\">    Select a theme    <span class=\"caret ml-2\"></span>  </button>  <ul class=\"absolute z-10 w-full bg-white border rounded shadow-md py-2\" aria-labelledby=\"theme-selector\">    {children}  </ul></div>"
      },
      {
        "name": "ThemeOption",
        "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"#\" class=\"block w-full\">{theme_name}</a></li>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first chart builder that allows users to visualize data trends. It should have a simple and clean design, with a prominent chart area and accessible interactive elements.",
    "component_list": [
      {
        "name": "ChartHeader",
        "is_standalone": true,
        "description": "A standalone component that displays the chart title and a dropdown menu for selecting the chart type. "
      },
      {
        "name": "ChartCanvas",
        "is_standalone": true,
        "description": "A standalone component that renders the chart using a third-party library (not included in this response). "
      },
      {
        "name": "DataSelector",
        "is_standalone": false,
        "description": "A component that takes children and allows users to select the data to display in the chart. "
      },
      {
        "name": "AxisLabels",
        "is_standalone": true,
        "description": "A standalone component that displays the axis labels for the chart. "
      },
      {
        "name": "Legend",
        "is_standalone": true,
        "description": "A standalone component that displays the legend for the chart. "
      }
    ],
    "main_html": "<div class=\"flex flex-col h-screen overflow-hidden\">\n  <ChartHeader />\n  <div class=\"flex flex-grow overflow-hidden\">\n    <DataSelector>\n      <!-- data selector options will be rendered here -->\n    </DataSelector>\n    <div class=\"flex-grow\">\n      <ChartCanvas />\n      <AxisLabels />\n      <Legend />\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ChartHeader",
        "html": "<header class=\"bg-white py-4 shadow-md\">  <h2 class=\"text-lg\">{chart_title}</h2>  <div class=\"relative\">    <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Chart Type</button>    <ul class=\"absolute bg-white shadow-md py-2\">      <li><a href=\"#\" class=\"block py-2 px-4\">Line Chart</a></li>      <li><a href=\"#\" class=\"block py-2 px-4\">Bar Chart</a></li>      <!-- more chart types -->    </ul>  </div></header>"
      },
      {
        "name": "ChartCanvas",
        "html": "<div class=\"flex-grow h-full\">  <!-- chart will be rendered here --></div>"
      },
      {
        "name": "DataSelector",
        "html": "<div class=\"bg-white py-4 pl-4 pr-2\">  <h3 class=\"text-lg\">Select Data</h3>  <ul class=\"list-none mb-4\">    {children}  </ul></div>"
      },
      {
        "name": "AxisLabels",
        "html": "<div class=\"flex justify-between mb-4\">  <p class=\"text-sm\">{x_axis_label}</p>  <p class=\"text-sm\">{y_axis_label}</p></div>"
      },
      {
        "name": "Legend",
        "html": "<div class=\"bg-white py-4 pl-4 pr-2\">  <h3 class=\"text-lg\">Legend</h3>  <ul class=\"list-none mb-4\">    <!-- legend items will be rendered here -->  </ul></div>"
      }
    ]
  },
  {
    "description": "The Security Center UI should be a responsive, mobile-first dashboard that displays system security information in a clear and concise manner. It should have a clean and modern design with ample whitespace to improve readability. The UI should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "SecurityHeader",
        "is_standalone": true,
        "description": "(standalone): A header component that displays the title and navigation links. "
      },
      {
        "name": "SecurityOverview",
        "is_standalone": true,
        "description": "(standalone): A component that displays an overview of the system security, including a summary of threats, vulnerabilities, and security score. "
      },
      {
        "name": "SecurityMetricCard",
        "is_standalone": false,
        "description": "(takes children): A card component that displays a specific security metric, such as the number of threats detected or vulnerabilities found. "
      },
      {
        "name": "SecurityAlertList",
        "is_standalone": false,
        "description": "(takes children): A list component that displays a list of security alerts, including alerts for threats, vulnerabilities, and system updates. "
      }
    ],
    "main_html": "<main class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <SecurityHeader />\n  <SecurityOverview />\n  <section class=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n    <SecurityMetricCard />\n    <SecurityMetricCard />\n    <SecurityMetricCard />\n  </section>\n  <SecurityAlertList />\n</main>\n",
    "component_html": [
      {
        "name": "SecurityHeader",
        "html": "<header class=\"bg-gray-200 p-4\">  <nav class=\"flex justify-between\">    <h1 class=\"text-lg font-bold\">Security Center</h1>    <ul class=\"flex\">      <li><a href=\"#\" class=\"text-blue-600 hover:text-blue-900\">Dashboard</a></li>      <li><a href=\"#\" class=\"text-blue-600 hover:text-blue-900\">Settings</a></li>    </ul>  </nav></header>"
      },
      {
        "name": "SecurityOverview",
        "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg font-bold\">Security Overview</h2>  <p class=\"text-gray-600\">{security_score} out of 100</p>  <ul class=\"list-none mb-4\">    <li>{threat_count} threats detected</li>    <li>{vulnerability_count} vulnerabilities found</li>  </ul>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Details</button></section>"
      },
      {
        "name": "SecurityMetricCard",
        "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h3 class=\"text-lg font-bold\">{metric_name}</h3>  <p class=\"text-gray-600\">{metric_value}</p>  <p class=\"text-sm text-gray-600\">{metric_description}</p></div>"
      },
      {
        "name": "SecurityAlertList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first API explorer that displays a list of APIs and their corresponding endpoints. The UI should be accessible, SEO-friendly, and well-documented.",
    "component_list": [
      {
        "name": "ApiExplorerHeader",
        "is_standalone": true,
        "description": "Standalone component that displays the title and navigation for the API explorer. "
      },
      {
        "name": "ApiList",
        "is_standalone": true,
        "description": "Standalone component that displays a list of APIs. "
      },
      {
        "name": "ApiListItem",
        "is_standalone": false,
        "description": "Component that takes children and represents a single API in the list. "
      },
      {
        "name": "ApiEndpointList",
        "is_standalone": false,
        "description": "Component that takes children and displays a list of endpoints for an API. "
      },
      {
        "name": "ApiEndpointItem",
        "is_standalone": false,
        "description": "Component that takes children and represents a single endpoint in the list. "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <_ApiExplorerHeader_ />\n  <_ApiList>\n    <!-- API list items will be inserted here -->\n  </_ApiList>\n</div>\n",
    "component_html": [
      {
        "name": "ApiExplorerHeader",
        "html": "<header className=\"mb-4\">  <h1 className=\"text-3xl font-bold\">API Explorer</h1>  <nav className=\"flex justify-end\">    <a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Documentation</a>    <a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Contact Us</a>  </nav></header>"
      },
      {
        "name": "ApiList",
        "html": "<ul className=\"divide-y divide-gray-200\">  <!-- API list items will be inserted here --></ul>"
      },
      {
        "name": "ApiListItem",
        "html": "<li className=\"py-4\">  <h2 className=\"text-lg font-bold\">{api_name}</h2>  <p>{api_description}</p>  <_ApiEndpointList>    <!-- Endpoint list items will be inserted here -->  </_ApiEndpointList></li>"
      },
      {
        "name": "ApiEndpointList",
        "html": "<ul className=\"pl-4 list-disc\">  <!-- Endpoint list items will be inserted here --></ul>"
      },
      {
        "name": "ApiEndpointItem",
        "html": "<li className=\"py-2\">  <span className=\"text-gray-600\">{endpoint_method}</span>  <a href=\"#\" className=\"text-gray-900 hover:text-gray-600\">{endpoint_path}</a>  <p>{endpoint_description}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "standalone component that contains the search input field and submit button. "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component that is a simple input field. "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component that is a submit button. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex items-center\">  <SearchInput />  <SearchButton /></div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"search\" id=\"search-input\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search products\" />"
      },
      {
        "name": "SearchButton",
        "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Search</button>"
      }
    ]
  },
  {
    "description": "The UI should showcase a responsive product image carousel with a zoom feature. The carousel should have navigation arrows and indicators. When a user hovers over an image, a zoomed-in version of the image should appear.",
    "component_list": [
      {
        "name": "ProductImageCarousel",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "CarouselNavigation",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "CarouselIndicator",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ZoomedImage",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 lg:p-6\">\n  <ProductImageCarousel />\n</div>\n",
    "component_html": [
      {
        "name": "ProductImageCarousel",
        "html": "<div class=\"flex flex-wrap justify-center\">  <CarouselNavigation />  <div class=\"carousel-images flex-grow\">    <!-- images will be rendered here -->    {children}  </div>  <CarouselIndicator />  <ZoomedImage /></div>"
      },
      {
        "name": "CarouselNavigation",
        "html": "<div class=\"flex justify-between mb-4\">  <button class=\"btn-prev\" aria-label=\"Previous image\">    <i class=\"fas fa-chevron-left\"></i>  </button>  <button class=\"btn-next\" aria-label=\"Next image\">    <i class=\"fas fa-chevron-right\"></i>  </button></div>"
      },
      {
        "name": "CarouselIndicator",
        "html": "<ul class=\"flex justify-center mt-2\">  {images.map((image, index) => (    <li key={index} aria-label={`Image ${index + 1}`} />  ))}</ul>"
      },
      {
        "name": "ZoomedImage",
        "html": "<div class=\"absolute top-0 left-0 w-full h-full\">  <img src=\"{zoomed_image_url}\" alt=\"Zoomed image\" /></div>"
      }
    ]
  },
  {
    "description": "The UI should display a product title and its corresponding rating. The rating should be displayed as a series of stars, with the number of filled stars indicating the rating. The product title should be prominent and easy to read.",
    "component_list": [
      {
        "name": "ProductTitle",
        "is_standalone": true,
        "description": "a standalone component that displays the product title. "
      },
      {
        "name": "RatingDisplay",
        "is_standalone": true,
        "description": "a standalone component that displays the rating as a series of stars. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ProductTitle />\n  <RatingDisplay />\n</div>\n",
    "component_html": [
      {
        "name": "ProductTitle",
        "html": "<h2 class=\"text-2xl font-bold\">{productName}</h2>"
      },
      {
        "name": "RatingDisplay",
        "html": "<div class=\"flex\">  {rating}/5  <div class=\"flex\">    {[...Array(5).keys()].map((_, i) => (      <i key={i} class={`text-yellow-400 ${i < rating ? 'fas fa-star' : 'far fa-star'}`}></i>    ))}  </div></div>"
      }
    ]
  },
  {
    "description": "The UI should display a product description and details section that is clean, responsive, and easy to read. It should include a product title, description, price, and other relevant details.",
    "component_list": [
      {
        "name": "ProductHeader",
        "is_standalone": true,
        "description": "Standalone component to display the product title and rating. "
      },
      {
        "name": "ProductDescription",
        "is_standalone": true,
        "description": "Standalone component to display the product description. "
      },
      {
        "name": "ProductDetails",
        "is_standalone": true,
        "description": "Standalone component to display the product details such as price, reviews, and other information. "
      },
      {
        "name": "ProductDetailItem",
        "is_standalone": false,
        "description": "Component that takes children to display individual details such as price, reviews, etc. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProductHeader />\n  <ProductDescription />\n  <ProductDetails>\n    <ProductDetailItem>Price: {price}</ProductDetailItem>\n    <ProductDetailItem>Rating: {rating} / 5</ProductDetailItem>\n    <ProductDetailItem>Reviews: {review_count}</ProductDetailItem>\n  </ProductDetails>\n</div>\n",
    "component_html": [
      {
        "name": "ProductHeader",
        "html": "<div class=\"flex items-center mb-4\">  <h2 class=\"text-2xl font-bold\">{product_title}</h2>  <span class=\"text-sm text-gray-500\">{rating} / 5</span></div>"
      },
      {
        "name": "ProductDescription",
        "html": "<p class=\"text-gray-600\">{description}</p>"
      },
      {
        "name": "ProductDetails",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "ProductDetailItem",
        "html": "<li class=\"flex items-center mb-2\">  <span class=\"text-gray-500\">{label}</span>  <span class=\"ml-2\">{value}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a summary of customer reviews, including the average rating and total number of reviews. It should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "CustomerReviewSummary",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "RatingSummary",
        "is_standalone": true,
        "description": "standalone component "
      },
      {
        "name": "ReviewCount",
        "is_standalone": true,
        "description": "standalone component "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto py-4\">\n  <CustomerReviewSummary/>\n  <div class=\"flex justify-between mb-4\">\n    <RatingSummary/>\n    <ReviewCount/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "CustomerReviewSummary",
        "html": "<div class=\"text-lg font-bold\">{average_rating} out of 5 stars</div>"
      },
      {
        "name": "RatingSummary",
        "html": "<div class=\"flex items-center\">  <span class=\"text-yellow-500\">{rating_icon}</span>  <span class=\"ml-2\">{average_rating}</span></div>"
      },
      {
        "name": "ReviewCount",
        "html": "<p>{review_count} reviews</p>"
      }
    ]
  },
  {
    "description": "The UI should display a sequence of breadcrumbs, each representing a navigation step, separated by a separator (e.g., `/`). The breadcrumbs should be responsive, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "Breadcrumb",
        "is_standalone": true,
        "description": "(standalone): Represents a single breadcrumb item. "
      },
      {
        "name": "BreadcrumbList",
        "is_standalone": false,
        "description": "(takes children): A container for a list of breadcrumbs. "
      }
    ],
    "main_html": "<nav aria-label=\"Breadcrumb navigation\">\n  <ol class=\"flex flex-wrap mb-4 list-none\">\n    <BreadcrumbList>\n      <Breadcrumb/>\n      <!-- more breadcrumbs here -->\n    </BreadcrumbList>\n  </ol>\n</nav>\n",
    "component_html": [
      {
        "name": "Breadcrumb",
        "html": "<li class=\"inline-flex items-center\">  <a href=\"{breadcrumb_url}\" class=\"text-gray-600 hover:text-gray-900\">{breadcrumb_label}</a>  <span class=\"text-gray-600\">{separator}</span></li>"
      },
      {
        "name": "BreadcrumbList",
        "html": "<ol class=\"flex flex-wrap mb-4 list-none\">{children}</ol>"
      }
    ]
  },
  {
    "description": "The UI should display a set of filtering and sorting controls for products, allowing users to narrow down their search results by category, price range, and rating. The controls should be responsive, accessible, and easy to use on various devices.",
    "component_list": [
      {
        "name": "FilterCategorySelect",
        "is_standalone": true,
        "description": "A standalone dropdown component for selecting a product category. "
      },
      {
        "name": "PriceRangeSlider",
        "is_standalone": true,
        "description": "A standalone component for selecting a price range. "
      },
      {
        "name": "RatingFilterButtons",
        "is_standalone": true,
        "description": "A standalone component for selecting a rating filter. "
      },
      {
        "name": "SortBySelect",
        "is_standalone": true,
        "description": "A standalone dropdown component for selecting a sorting option. "
      },
      {
        "name": "FilterControls",
        "is_standalone": false,
        "description": "A container component that takes children ( FilterCategorySelect, PriceRangeSlider, RatingFilterButtons, and SortBySelect ). "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4\">\n  <FilterControls>\n    <FilterCategorySelect/>\n    <PriceRangeSlider/>\n    <RatingFilterButtons/>\n    <SortBySelect/>\n  </FilterControls>\n</div>\n",
    "component_html": [
      {
        "name": "FilterCategorySelect",
        "html": "<select className=\"bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full\">  <option value=\"\">{category_placeholder}</option>  <!-- Option list will be populated dynamically --></select>"
      },
      {
        "name": "PriceRangeSlider",
        "html": "<div className=\"flex items-center mb-4\">  <span className=\"mr-2\">Min: {min_price}</span>  <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" className=\"w-full\" />  <span className=\"ml-2\">Max: {max_price}</span></div>"
      },
      {
        "name": "RatingFilterButtons",
        "html": "<div className=\"flex mb-4\">  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">4+</button>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">3+</button>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">2+</button></div>"
      },
      {
        "name": "SortBySelect",
        "html": "<select className=\"bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full\">  <option value=\"\">Sort by</option>  <option value=\"price_asc\">Price: Low to High</option>  <option value=\"price_desc\">Price: High to Low</option>  <option value=\"rating_desc\">Rating: High to Low</option></select>"
      },
      {
        "name": "FilterControls",
        "html": "<div className=\"flex flex-wrap justify-between mb-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results by selecting specific options. The search results should be listed in a grid or list format, with each result displaying relevant information such as title, description, and metadata.",
    "component_list": [
      {
        "name": "FacetFilter",
        "is_standalone": true,
        "description": "a standalone component that displays a single facet (e.g. categories, dates, etc.) "
      },
      {
        "name": "Facetlist",
        "is_standalone": true,
        "description": "a component that contains multiple `FacetFilter` components, standalone "
      },
      {
        "name": "SearchResult",
        "is_standalone": true,
        "description": "a standalone component that displays a single search result "
      },
      {
        "name": "SearchResultList",
        "is_standalone": false,
        "description": "a component that contains multiple `SearchResult` components, takes children "
      },
      {
        "name": "FacetedSearchResults",
        "is_standalone": false,
        "description": "the top-level component that contains the faceted search results, takes children "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/4 xl:w-1/5 p-4\">\n      <Facetlist/>\n    </div>\n    <div class=\"w-full md:w-3/4 xl:w-4/5 p-4\">\n      <SearchResultList>\n        <SearchResult/>\n        <SearchResult/>\n        <!-- repeat for each search result -->\n      </SearchResultList>\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "FacetFilter",
        "html": "<div class=\"mb-4\">  <h3 class=\"text-lg font-bold\">{facet_name}</h3>  <ul class=\"list-none mb-0\">    <li class=\"mb-2\">      <input type=\"checkbox\" id=\"{facet_option_id}\" />      <label for=\"{facet_option_id}\">{facet_option_label}</label>    </li>    <!-- repeat for each facet option -->  </ul></div>"
      },
      {
        "name": "Facetlist",
        "html": "<div class=\"space-y-4\">  <FacetFilter/>  <FacetFilter/>  <!-- repeat for each facet --></div>"
      },
      {
        "name": "SearchResult",
        "html": "<div class=\"p-4 border border-gray-200 rounded\">  <h2 class=\"text-lg font-bold\">{result_title}</h2>  <p class=\"text-gray-600\">{result_description}</p>  <p class=\"text-sm text-gray-500\">{result_metadata}</p></div>"
      },
      {
        "name": "SearchResultList",
        "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
      },
      {
        "name": "FacetedSearchResults",
        "html": "<div class=\"container mx-auto p-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A simple product listing with thumbnails, where each product is listed with a thumbnail image, product name, and brief description.",
    "component_list": [
      {
        "name": "ProductListItem",
        "is_standalone": true,
        "description": "(standalone) - a single product listing item "
      },
      {
        "name": "ProductThumbnail",
        "is_standalone": true,
        "description": "(standalone) - a product thumbnail image "
      },
      {
        "name": "ProductName",
        "is_standalone": true,
        "description": "(standalone) - a product name text "
      },
      {
        "name": "ProductDescription",
        "is_standalone": true,
        "description": "(standalone) - a brief product description text "
      },
      {
        "name": "ProductListing",
        "is_standalone": false,
        "description": "(takes children) - a container for multiple product listing items "
      }
    ],
    "main_html": "<div className=\"container mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold mb-4\">Products</h1>\n  <ProductListing>\n    <ProductListItem>\n      <ProductThumbnail />\n      <ProductName />\n      <ProductDescription />\n    </ProductListItem>\n    <ProductListItem>\n      <ProductThumbnail />\n      <ProductName />\n      <ProductDescription />\n    </ProductListItem>\n    <!-- Add more product listing items here -->\n  </ProductListing>\n</div>\n",
    "component_html": [
      {
        "name": "ProductThumbnail",
        "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-20 h-20 object-cover rounded\" />"
      },
      {
        "name": "ProductName",
        "html": "<p className=\"text-lg font-bold\">{product_name}</p>"
      },
      {
        "name": "ProductDescription",
        "html": "<p className=\"text-gray-600\">{product_description}</p>"
      },
      {
        "name": "ProductListItem",
        "html": "<div className=\"flex mb-4\">  <div className=\"w-20 h-20 mr-4\">    {children}  </div>  <div>    {children}  </div></div>"
      },
      {
        "name": "ProductListing",
        "html": "<div className=\"flex flex-wrap\">  {children}</div>"
      }
    ]
  },
  {
    "description": "A table that displays detailed product information in a clean and organized manner. The table should be responsive, easy to read, and accessible on various devices.",
    "component_list": [
      {
        "name": "ProductInformationTable",
        "is_standalone": true,
        "description": "standalone component that displays product information in a table format. "
      },
      {
        "name": "TableHeader",
        "is_standalone": true,
        "description": "standalone component that displays the table header. "
      },
      {
        "name": "TableRow",
        "is_standalone": false,
        "description": "takes children, component that displays a single row of product information. "
      },
      {
        "name": "TableData",
        "is_standalone": true,
        "description": "standalone component that displays a single piece of product information. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <ProductInformationTable/>\n</div>\n",
    "component_html": [
      {
        "name": "ProductInformationTable",
        "html": "<table class=\"w-full text-lg\">  <TableHeader/>  <tbody>    <!-- table rows will be rendered here -->  </tbody></table>"
      },
      {
        "name": "TableHeader",
        "html": "<thead>  <tr>    <th class=\"px-4 py-2\">Product Name</th>    <th class=\"px-4 py-2\">Description</th>    <th class=\"px-4 py-2\">Price</th>    <th class=\"px-4 py-2\">Rating</th>  </tr></thead>"
      },
      {
        "name": "TableRow",
        "html": "<tr class=\"border-b border-gray-200\">  <TableData>{productName}</TableData>  <TableData>{description}</TableData>  <TableData>${price}</TableData>  <TableData>{rating} stars</TableData></tr>"
      },
      {
        "name": "TableData",
        "html": "<td class=\"px-4 py-2\">{children}</td>"
      }
    ]
  },
  {
    "description": "The UI should be a secure payment information input form, responsive and accessible, with clear labels and placeholders, and enough space for the user to input their payment details.",
    "component_list": [
      {
        "name": "CardNumberInput",
        "is_standalone": true,
        "description": "(standalone): a text input for the card number "
      },
      {
        "name": "ExpirationDateInput",
        "is_standalone": true,
        "description": "(standalone): a text input for the expiration date "
      },
      {
        "name": "CvcInput",
        "is_standalone": true,
        "description": "(standalone): a text input for the CVC code "
      },
      {
        "name": "PaymentForm",
        "is_standalone": false,
        "description": "(takes children): a container for the payment input fields "
      }
    ],
    "main_html": "<form class=\"max-w-md mx-auto p-4 mt-4 mb-4 bg-white rounded shadow-md\">\n  <h2 class=\"text-xl font-bold mb-4\">Secure Payment Information</h2>\n  <PaymentForm>\n    <CardNumberInput />\n    <ExpirationDateInput />\n    <CvcInput />\n  </PaymentForm>\n  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Submit</button>\n</form>\n",
    "component_html": [
      {
        "name": "CardNumberInput",
        "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"cardNumber\"   placeholder=\"Card Number\"   required/>"
      },
      {
        "name": "ExpirationDateInput",
        "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"expirationDate\"   placeholder=\"MM/YY\"   required/>"
      },
      {
        "name": "CvcInput",
        "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"cvc\"   placeholder=\"CVC\"   required/>"
      },
      {
        "name": "PaymentForm",
        "html": "<div class=\"flex flex-wrap -mx-3 mb-6\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display an order summary with a subtotal, taxes, and a total. The design should be responsive, with a mobile-first approach, and follow accessibility guidelines.",
    "component_list": [
      {
        "name": "OrderSummaryComponent",
        "is_standalone": true,
        "description": "(standalone) - displays the order summary "
      },
      {
        "name": "SubtotalComponent",
        "is_standalone": true,
        "description": "(standalone) - displays the subtotal "
      },
      {
        "name": "TaxComponent",
        "is_standalone": true,
        "description": "(standalone) - displays the tax "
      },
      {
        "name": "TotalComponent",
        "is_standalone": true,
        "description": "(standalone) - displays the total "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4 pt-6\">\n  <h2 class=\"text-lg font-bold mb-2\">Order Summary</h2>\n  <OrderSummaryComponent />\n  <div class=\"flex justify-between mb-2\">\n    <SubtotalComponent />\n    <TaxComponent />\n  </div>\n  <TotalComponent />\n</section>\n",
    "component_html": [
      {
        "name": "OrderSummaryComponent",
        "html": "<ul class=\"list-none mb-4\">  <li class=\"flex justify-between mb-2\">{item_name} x {item_quantity}</li>  <!-- repeat for each item in the order --></ul>"
      },
      {
        "name": "SubtotalComponent",
        "html": "<p>Subtotal: <span class=\"font-bold\">{subtotal_amount}</span></p>"
      },
      {
        "name": "TaxComponent",
        "html": "<p>Tax ({tax_percentage}%): <span class=\"font-bold\">{tax_amount}</span></p>"
      },
      {
        "name": "TotalComponent",
        "html": "<p class=\"text-lg font-bold\">Total: <span class=\"text-lg font-bold\">{total_amount}</span></p>"
      }
    ]
  },
  {
    "description": "The UI should display a list of shipping and delivery options with their respective details, such as names, prices, and estimated delivery times. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
    "component_list": [
      {
        "name": "ShippingOptionCard",
        "is_standalone": true,
        "description": "a standalone component that displays a single shipping option. "
      },
      {
        "name": "ShippingOptionList",
        "is_standalone": false,
        "description": "a component that takes children, which is a list of `ShippingOptionCard` components. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 class=\"text-2xl font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionList>\n    <!-- shipping options will be rendered here -->\n  </ShippingOptionList>\n</div>\n",
    "component_html": [
      {
        "name": "ShippingOptionCard",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p class=\"text-gray-600\">{description}</p>  <p class=\"font-bold\">{price}</p>  <p>Estimated delivery time: {estimated_delivery_time}</p></div>"
      },
      {
        "name": "ShippingOptionList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a simple search bar with a input field and a submit button. The search bar should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "SearchBarContainer",
        "is_standalone": true,
        "description": "standalone component that wraps the entire search bar "
      },
      {
        "name": "SearchInput",
        "is_standalone": true,
        "description": "standalone component that renders a text input field "
      },
      {
        "name": "SearchButton",
        "is_standalone": true,
        "description": "standalone component that renders a submit button "
      }
    ],
    "main_html": "<div class=\"flex justify-center mx-auto pt-4\">\n  <SearchBarContainer>\n    <SearchInput />\n    <SearchButton />\n  </SearchBarContainer>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBarContainer",
        "html": "<div class=\"flex w-full md:w-1/2 lg:w-1/3 xl:w-1/4 py-2 pl-2 pr-4 rounded-md shadow-md\">  {children}</div>"
      },
      {
        "name": "SearchInput",
        "html": "<input type=\"search\" class=\"w-full py-2 pl-2 pr-4 text-gray-700\" placeholder=\"Search...\">"
      },
      {
        "name": "SearchButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Search</button>"
      }
    ]
  },
  {
    "description": "The category navigation UI should display a list of categories in a horizontal layout on desktop and a vertical layout on mobile devices. Each category should be a clickable item with a label and an optional icon. The active category should be visually highlighted.",
    "component_list": [
      {
        "name": "CategoryNavItem",
        "is_standalone": true,
        "description": "(standalone): A single category item in the navigation list. "
      },
      {
        "name": "CategoryNav",
        "is_standalone": false,
        "description": "(takes children): The container component that wraps the list of category items. "
      }
    ],
    "main_html": "<nav class=\"flex flex-wrap justify-center md:flex-nowrap md:justify-start\">\n  <CategoryNav>\n    <CategoryNavItem>Category 1</CategoryNavItem>\n    <CategoryNavItem>Category 2</CategoryNavItem>\n    <CategoryNavItem>Category 3</CategoryNavItem>\n    <!-- Add more categories here -->\n  </CategoryNav>\n</nav>\n",
    "component_html": [
      {
        "name": "CategoryNavItem",
        "html": "<li class=\"mr-4 last:mr-0 md:mr-6\">  <a href=\"#\" class=\"inline-flex items-center\">    {icon} <!-- Optional icon -->    <span>{label}</span>  </a></li>"
      },
      {
        "name": "CategoryNav",
        "html": "<ul class=\"flex flex-wrap justify-center md:flex-nowrap md:justify-start\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a large product image with a zoomed-in version of the image when hovered or focused. The zoomed-in image should be displayed in a separate container, and its size should be adjustable.",
    "component_list": [
      {
        "name": "ProductImage",
        "is_standalone": true,
        "description": "A standalone component displaying the large product image. "
      },
      {
        "name": "ZoomedImage",
        "is_standalone": true,
        "description": "A standalone component displaying the zoomed-in image. "
      },
      {
        "name": "ImageContainer",
        "is_standalone": false,
        "description": "A component containing both the product image and the zoomed-in image, taking children. "
      }
    ],
    "main_html": "<ImageContainer>\n  <ProductImage src={product_image_src} />\n  <ZoomedImage src={zoomed_image_src} />\n</ImageContainer>\n",
    "component_html": [
      {
        "name": "ProductImage",
        "html": "<img src={src} alt=\"Product Image\" class=\"w-full h-full object-cover rounded-lg\" />"
      },
      {
        "name": "ZoomedImage",
        "html": "<div class=\"absolute top-0 left-0 z-50 hidden group-hover:block\">  <img src={src} alt=\"Zoomed Product Image\" class=\"w-full h-full object-cover rounded-lg\" /></div>"
      },
      {
        "name": "ImageContainer",
        "html": "<div class=\"relative flex justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a section for ratings and reviews, showing the average rating, total reviews, and a list of individual reviews with ratings and comments.",
    "component_list": [
      {
        "name": "RatingSummary",
        "is_standalone": true,
        "description": "A standalone component displaying the average rating and total reviews. "
      },
      {
        "name": "ReviewList",
        "is_standalone": false,
        "description": "A component that takes children, displaying a list of individual reviews. "
      },
      {
        "name": "Review",
        "is_standalone": false,
        "description": "A component that takes children, displaying a single review with rating and comment. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4\">\n  <RatingSummary />\n  <ReviewList>\n    <Review />\n    <Review />\n    <!-- Add more Review components here -->\n  </ReviewList>\n</section>\n",
    "component_html": [
      {
        "name": "RatingSummary",
        "html": "<div class=\"flex justify-between mb-4\">  <p class=\"text-lg font-bold\">{average_rating} / 5</p>  <p class=\"text-gray-600\">{total_reviews} reviews</p></div>"
      },
      {
        "name": "ReviewList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "Review",
        "html": "<li class=\"mb-4\">  <div class=\"flex justify-between\">    <p class=\"text-lg font-bold\">{rating} / 5</p>    <p class=\"text-gray-600\">{review_date}</p>  </div>  <p class=\"text-gray-600\">{review_comment}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display two types of badges: a price badge and a discount badge. The price badge shows the original price, and the discount badge shows the discount percentage. The badges should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "PriceBadge",
        "is_standalone": true,
        "description": "a standalone component that displays the original price. "
      },
      {
        "name": "DiscountBadge",
        "is_standalone": true,
        "description": "a standalone component that displays the discount percentage. "
      }
    ],
    "main_html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <PriceBadge/>\n  <DiscountBadge/>\n</div>\n",
    "component_html": [
      {
        "name": "PriceBadge",
        "html": "<span class=\"bg-gray-200 px-2 py-1 rounded-full text-sm\">  <p>{original_price}</p></span>"
      },
      {
        "name": "DiscountBadge",
        "html": "<span class=\"bg-orange-200 px-2 py-1 rounded-full text-sm\">  <p>{discount_percentage}% Off</p></span>"
      }
    ]
  },
  {
    "description": "The UI should display a list of items with filtering and sorting capabilities. The user should be able to input a search query, select a category, and sort the list by different criteria. The UI should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "FilterComponent",
        "is_standalone": true,
        "description": "(standalone): A input field and a dropdown menu for selecting a category. "
      },
      {
        "name": "SortComponent",
        "is_standalone": true,
        "description": "(standalone): A dropdown menu for selecting a sorting criteria. "
      },
      {
        "name": "ItemList",
        "is_standalone": false,
        "description": "(takes children): A container for the list of items. "
      },
      {
        "name": "Item",
        "is_standalone": false,
        "description": "(takes children): A single item in the list. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <FilterComponent />\n    <SortComponent />\n  </div>\n  <ItemList>\n    <!-- Items will be rendered here -->\n  </ItemList>\n</div>\n",
    "component_html": [
      {
        "name": "FilterComponent",
        "html": "<div class=\"flex items-center mb-2\">  <input type=\"search\" placeholder=\"Search...\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <select class=\"bg-white border border-gray-300 p-2 pl-4 pr-8 rounded\">    <option value=\"\">Select a category</option>    <option value=\"category1\">{category1}</option>    <option value=\"category2\">{category2}</option>    <!-- More options -->  </select></div>"
      },
      {
        "name": "SortComponent",
        "html": "<div class=\"flex items-center mb-2\">  <select class=\"bg-white border border-gray-300 p-2 pl-4 pr-8 rounded\">    <option value=\"\">Sort by</option>    <option value=\"name\">Name</option>    <option value=\"date\">Date</option>    <!-- More options -->  </select></div>"
      },
      {
        "name": "ItemList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "Item",
        "html": "<li class=\"py-4 border-b border-gray-200\">  <h2 class=\"text-lg font-bold\">{itemName}</h2>  <p>{itemDescription}</p></li>"
      }
    ]
  },
  {
    "description": "The UI should display a headline and a summary text in a responsive, mobile-first layout. The headline should be prominent and attention-grabbing, while the summary text should provide a brief overview of the content.",
    "component_list": [
      {
        "name": "HeadlineComponent",
        "is_standalone": true,
        "description": "(standalone): displays a prominent headline text "
      },
      {
        "name": "SummaryTextComponent",
        "is_standalone": true,
        "description": "(standalone): displays a brief summary text "
      }
    ],
    "main_html": "<div class=\"flex flex-col items-center md:flex-row md:justify-center\">\n  <HeadlineComponent />\n  <SummaryTextComponent />\n</div>\n",
    "component_html": [
      {
        "name": "HeadlineComponent",
        "html": "<h1 class=\"text-3xl font-bold mb-4\">{headline_text}</h1>"
      },
      {
        "name": "SummaryTextComponent",
        "html": "<p class=\"text-lg text-gray-600\">{summary_text}</p>"
      }
    ]
  },
  {
    "description": "The UI should display author and date metadata in a compact and readable format, typically used in blog posts, articles, or news websites. The author's name and publication date should be displayed side by side, with the author's name in a slightly larger font size.",
    "component_list": [
      {
        "name": "AuthorMetadata",
        "is_standalone": true,
        "description": "A standalone component displaying the author's name. "
      },
      {
        "name": "DateMetadata",
        "is_standalone": true,
        "description": "A standalone component displaying the publication date. "
      },
      {
        "name": "MetadataContainer",
        "is_standalone": false,
        "description": "A container component that takes children, wrapping the author and date metadata components. "
      }
    ],
    "main_html": "<footer class=\"flex justify-between mb-4\">\n  <MetadataContainer>\n    <AuthorMetadata />\n    <DateMetadata />\n  </MetadataContainer>\n</footer>\n",
    "component_html": [
      {
        "name": "AuthorMetadata",
        "html": "<span class=\"text-lg\">{author_name}</span>"
      },
      {
        "name": "DateMetadata",
        "html": "<span class=\"text-gray-600\">{publication_date}</span>"
      },
      {
        "name": "MetadataContainer",
        "html": "<div class=\"flex items-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a horizontal row of social media sharing buttons, each with an icon and a text label. The buttons should be medium-sized, round, and have a slight hover effect. The row should be centered and have some padding.",
    "component_list": [
      {
        "name": "SocialSharingButton",
        "is_standalone": true,
        "description": "(standalone): a single social media sharing button with an icon and text label "
      },
      {
        "name": "SocialSharingButtonsRow",
        "is_standalone": false,
        "description": "(takes children): a horizontal row of social sharing buttons "
      }
    ],
    "main_html": "<div className=\"flex justify-center py-4\">\n  <SocialSharingButtonsRow>\n    <SocialSharingButton />\n    <SocialSharingButton />\n    <SocialSharingButton />\n    <!-- add more buttons here -->\n  </SocialSharingButtonsRow>\n</div>\n",
    "component_html": [
      {
        "name": "SocialSharingButton",
        "html": "<a href=\"{sharing_url}\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"inline-flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-200\">  <i className={`fab fa-${social_media_icon} text-lg`}></i>  <span className=\"sr-only\">{social_media_name}</span></a>"
      },
      {
        "name": "SocialSharingButtonsRow",
        "html": "<div className=\"flex flex-wrap justify-center\">{children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of tags and categories in a responsive, mobile-first design. The list should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "TagItem",
        "is_standalone": true,
        "description": "A standalone component representing a single tag. "
      },
      {
        "name": "CategoryItem",
        "is_standalone": true,
        "description": "A standalone component representing a single category. "
      },
      {
        "name": "TagList",
        "is_standalone": false,
        "description": "A component that takes children, representing a list of tags. "
      },
      {
        "name": "CategoryList",
        "is_standalone": false,
        "description": "A component that takes children, representing a list of categories. "
      }
    ],
    "main_html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Tags and Categories</h1>\n  <section class=\"mb-6\">\n    <h2 class=\"text-lg font-bold mb-2\">Tags</h2>\n    <TagList>\n      <!-- Tags will be rendered here -->\n    </TagList>\n  </section>\n  <section class=\"mb-6\">\n    <h2 class=\"text-lg font-bold mb-2\">Categories</h2>\n    <CategoryList>\n      <!-- Categories will be rendered here -->\n    </CategoryList>\n  </section>\n</main>\n",
    "component_html": [
      {
        "name": "TagItem",
        "html": "<a href={tag_url} class=\"text-blue-600 hover:text-blue-800 transition duration-300\">  <span class=\"text-sm\">{tag_name}</span></a>"
      },
      {
        "name": "CategoryItem",
        "html": "<a href={category_url} class=\"text-blue-600 hover:text-blue-800 transition duration-300\">  <span class=\"text-sm\">{category_name}</span></a>"
      },
      {
        "name": "TagList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      },
      {
        "name": "CategoryList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The Comment Section UI should display a list of comments, each with a username, comment text, and a timestamp. The UI should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "CommentSection",
        "is_standalone": true,
        "description": "standalone component that wraps the entire comment section "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "standalone component that represents a single comment "
      },
      {
        "name": "CommentHeader",
        "is_standalone": true,
        "description": "standalone component that displays the username and timestamp "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "standalone component that displays the comment text "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentSection>\n    {comments}.map((comment) => (\n      <Comment key={comment.id}>\n        <CommentHeader>\n          <span class=\"font-bold\">{username}</span>\n          <span class=\"text-gray-500\">{timestamp}</span>\n        </CommentHeader>\n        <CommentText>{commentText}</CommentText>\n      </Comment>\n    ))}\n  </CommentSection>\n</div>\n",
    "component_html": [
      {
        "name": "CommentSection",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  {children}</div>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"mb-4\">  {children}</div>"
      },
      {
        "name": "CommentHeader",
        "html": "<div class=\"flex items-center mb-2\">  {children}</div>"
      },
      {
        "name": "CommentText",
        "html": "<p class=\"text-gray-700\">{children}</p>"
      }
    ]
  },
  {
    "description": "The UI should display an article with a title, metadata, and content in a responsive layout that adapts to different screen sizes. The layout should be mobile-first, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "ArticleWrapper",
        "is_standalone": true,
        "description": "standalone component that wraps the entire article. "
      },
      {
        "name": "ArticleHeader",
        "is_standalone": true,
        "description": "standalone component that displays the article title and metadata. "
      },
      {
        "name": "ArticleTitle",
        "is_standalone": true,
        "description": "standalone component that displays the article title. "
      },
      {
        "name": "ArticleMetadata",
        "is_standalone": true,
        "description": "standalone component that displays the article metadata (e.g., author, date, tags). "
      },
      {
        "name": "ArticleContent",
        "is_standalone": true,
        "description": "standalone component that displays the article content. "
      },
      {
        "name": "ArticleImage",
        "is_standalone": true,
        "description": "standalone component that displays an image related to the article. "
      }
    ],
    "main_html": "<div class=\"max-w-2xl mx-auto p-4\">\n  <ArticleWrapper>\n    <ArticleHeader>\n      <ArticleTitle />\n      <ArticleMetadata />\n    </ArticleHeader>\n    <ArticleImage />\n    <ArticleContent />\n  </ArticleWrapper>\n</div>\n",
    "component_html": [
      {
        "name": "ArticleWrapper",
        "html": "<div class=\"flex flex-col mb-4\">  {children}</div>"
      },
      {
        "name": "ArticleHeader",
        "html": "<header class=\"flex justify-between mb-2\">  {children}</header>"
      },
      {
        "name": "ArticleTitle",
        "html": "<h1 class=\"text-3xl font-bold\">{article_title}</h1>"
      },
      {
        "name": "ArticleMetadata",
        "html": "<p class=\"text-sm text-gray-600\">{author}, {date} • {tags}</p>"
      },
      {
        "name": "ArticleContent",
        "html": "<div class=\"prose max-w-none\">  {article_content}</div>"
      },
      {
        "name": "ArticleImage",
        "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full h-64 object-cover mb-4\" />"
      }
    ]
  },
  {
    "description": "The UI should display a profile picture and header image, with the profile picture overlaid on top of the header image. The profile picture should be circular and centered horizontally. The header image should take up the full width of the container.",
    "component_list": [
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "Standalone component "
      },
      {
        "name": "HeaderImage",
        "is_standalone": true,
        "description": "Standalone component "
      },
      {
        "name": "Header",
        "is_standalone": false,
        "description": "Component that takes children (ProfilePicture and HeaderImage) "
      }
    ],
    "main_html": "<header class=\"flex justify-center\">\n  <Header>\n    <HeaderImage/>\n    <ProfilePicture/>\n  </Header>\n</header>\n",
    "component_html": [
      {
        "name": "Header",
        "html": "<div class=\"relative w-full h-screen\">  {children}</div>"
      },
      {
        "name": "HeaderImage",
        "html": "<img src={header_image_url} class=\"w-full h-full object-cover\" alt={header_image_alt_text} />"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src={profile_picture_url} class=\"rounded-full w-32 h-32 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\" alt={profile_picture_alt_text} />"
      }
    ]
  },
  {
    "description": "The UI should resemble a typical social media post or tweet box, with a text area for the user to input their post, a character count display, and a submit button.",
    "component_list": [
      {
        "name": "PostBoxContainer",
        "is_standalone": true,
        "description": "(standalone): The outer container for the post box. "
      },
      {
        "name": "PostTextArea",
        "is_standalone": false,
        "description": "(takes children): The text area where the user inputs their post. "
      },
      {
        "name": "CharacterCount",
        "is_standalone": true,
        "description": "(standalone): Displays the number of characters remaining. "
      },
      {
        "name": "SubmitButton",
        "is_standalone": true,
        "description": "(standalone): The button to submit the post. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto bg-white p-4 rounded\">\n  <PostBoxContainer>\n    <PostTextArea><textarea>{initial_text}</textarea></PostTextArea>\n    <CharacterCount><p>{character_count} characters remaining</p></CharacterCount>\n    <SubmitButton><button>Post</button></SubmitButton>\n  </PostBoxContainer>\n</div>\n",
    "component_html": [
      {
        "name": "PostBoxContainer",
        "html": "<div class=\"flex flex-col p-4\">  {children}</div>"
      },
      {
        "name": "PostTextArea",
        "html": "<textarea class=\"w-full p-2 border border-gray-200 rounded\" rows=\"4\">{children}</textarea>"
      },
      {
        "name": "CharacterCount",
        "html": "<p class=\"text-sm text-gray-500\">{children}</p>"
      },
      {
        "name": "SubmitButton",
        "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Post</button>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive list view of posts, displaying the title, content, and metadata of each post. On smaller screens, the list items should be stacked vertically, and on larger screens, they should be displayed in a grid with multiple columns.",
    "component_list": [
      {
        "name": "PostListItem",
        "is_standalone": true,
        "description": "(standalone): a single list item representing a post "
      },
      {
        "name": "PostList",
        "is_standalone": false,
        "description": "(takes children): a container for the list of posts, which wraps the PostListItem components "
      }
    ],
    "main_html": "<main class=\"container mx-auto p-4\">\n  <PostList>\n    <PostListItem/>\n    <PostListItem/>\n    <!-- add more PostListItem components here -->\n  </PostList>\n</main>\n",
    "component_html": [
      {
        "name": "PostListItem",
        "html": "<article class=\"mb-4 bg-white rounded-lg shadow-md p-4\">  <h2 class=\"text-lg\">{post_title}</h2>  <p class=\"text-gray-600\">{post_excerpt}</p>  <p class=\"text-sm text-gray-500\">{post_author} | {post_date}</p></article>"
      },
      {
        "name": "PostList",
        "html": "<ul class=\"flex flex-wrap justify-center lg:justify-start\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a horizontal row of three buttons: Like, Comment, and Share. The buttons should be evenly spaced and have a small margin between them. The buttons should also be accessible and have a hover effect.",
    "component_list": [
      {
        "name": "SocialButton",
        "is_standalone": true,
        "description": "Standalone component that represents a single button (Like, Comment, or Share). "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <SocialButton />\n  <SocialButton />\n  <SocialButton />\n</div>\n",
    "component_html": [
      {
        "name": "Here",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {button_text}</button>"
      }
    ]
  },
  {
    "description": "The UI should be a user profile card that displays the user's name, profile picture, bio, and social media links. The card should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "Standalone component that wraps the entire profile card. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "Standalone component that displays the user's profile picture. "
      },
      {
        "name": "Bio",
        "is_standalone": true,
        "description": "Standalone component that displays the user's bio. "
      },
      {
        "name": "SocialMediaLinks",
        "is_standalone": false,
        "description": "Component that takes children (social media links) and displays them. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n  <UserProfileCard>\n    <ProfilePicture />\n    <h2 class=\"text-lg font-bold\">{username}</h2>\n    <Bio />\n    <SocialMediaLinks>\n      <a href=\"{twitter_url}\" class=\"text-blue-500 hover:text-blue-800\">Twitter</a>\n      <a href=\"{linkedin_url}\" class=\"text-blue-500 hover:text-blue-800\">LinkedIn</a>\n    </SocialMediaLinks>\n  </UserProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src=\"{profile_picture_url}\" alt=\"Profile Picture\" class=\"w-24 h-24 rounded-full mb-4\" />"
      },
      {
        "name": "Bio",
        "html": "<p class=\"text-gray-600\">{bio}</p>"
      },
      {
        "name": "SocialMediaLinks",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a single post or tweet embed with a username, avatar, timestamp, and content. The embed should be responsive, displaying well on both desktop and mobile devices.",
    "component_list": [
      {
        "name": "PostHeader",
        "is_standalone": true,
        "description": "Standalone component displaying the username and avatar. "
      },
      {
        "name": "PostMeta",
        "is_standalone": true,
        "description": "Standalone component displaying the timestamp. "
      },
      {
        "name": "PostContent",
        "is_standalone": false,
        "description": "Takes children, displaying the content of the post. "
      },
      {
        "name": "PostEmbed",
        "is_standalone": false,
        "description": "Takes children, wrapping the entire post embed. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostEmbed>\n    <PostHeader/>\n    <PostMeta/>\n    <PostContent>\n      <!-- Post content goes here -->\n    </PostContent>\n  </PostEmbed>\n</div>\n",
    "component_html": [
      {
        "name": "PostHeader",
        "html": "<div class=\"flex items-center mb-2\">  <img src={avatarUrl} alt={username} class=\"w-10 h-10 rounded-full mr-2\" />  <p class=\"font-bold\">{username}</p></div>"
      },
      {
        "name": "PostMeta",
        "html": "<p class=\"text-gray-500 text-sm\">{timestamp}</p>"
      },
      {
        "name": "PostContent",
        "html": "<div class=\"prose\">{children}</div>"
      },
      {
        "name": "PostEmbed",
        "html": "<div class=\" bg-white p-4 rounded shadow-md\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of hashtag and @mention links, each link is clickable and can be styled differently.",
    "component_list": [
      {
        "name": "HashtagLink",
        "is_standalone": true,
        "description": "standalone, represents a single hashtag link. "
      },
      {
        "name": "MentionLink",
        "is_standalone": true,
        "description": "standalone, represents a single @mention link. "
      }
    ],
    "main_html": "<ul class=\"flex flex-wrap gap-2\">\n  <li><HashtagLink/></li>\n  <li><MentionLink/></li>\n  <!-- more links here -->\n</ul>\n",
    "component_html": [
      {
        "name": "HashtagLink",
        "html": "<a href={hashtag_link} class=\"text-blue-600 hover:text-blue-900 transition duration-300\">{hashtag_text}</a>"
      },
      {
        "name": "MentionLink",
        "html": "<a href={mention_link} class=\"text-blue-600 hover:text-blue-900 transition duration-300\">@{mention_text}</a>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive navigation component that can be used as a tabbed interface or a sidebar, allowing users to navigate through different profile sections. The navigation component should be accessible, mobile-first, and SEO-friendly.",
    "component_list": [
      {
        "name": "ProfileNavigation",
        "is_standalone": true,
        "description": "The main navigation component (standalone) "
      },
      {
        "name": "NavItem",
        "is_standalone": false,
        "description": "An individual navigation item (takes children) "
      },
      {
        "name": "NavIcon",
        "is_standalone": true,
        "description": "An icon used in a navigation item (standalone) "
      }
    ],
    "main_html": "<div class=\"md:flex md:flex-col lg:flex-row flex-wrap justify-center lg:justify-start mb-4\">\n  <ProfileNavigation>\n    <NavItem><NavIcon/> Profile</NavItem>\n    <NavItem><NavIcon/> Settings</NavItem>\n    <NavItem><NavIcon/> Help</NavItem>\n  </ProfileNavigation>\n</div>\n",
    "component_html": [
      {
        "name": "ProfileNavigation",
        "html": "<nav class=\"flex flex-wrap justify-center lg:justify-start mb-4\">  {children}</nav>"
      },
      {
        "name": "NavItem",
        "html": "<a href=\"#\" class=\"block py-2 px-4 rounded-lg hover:bg-gray-200\">  {children}</a>"
      },
      {
        "name": "NavIcon",
        "html": "<i class=\"fas fa-{icon_type} mr-2\"></i><!-- icon_type will be replaced with a specific icon type, e.g. \"user\" -->"
      }
    ]
  },
  {
    "description": "The UI should display a responsive post formatting with a header, image, content, and footer sections. The post format should be mobile-first and adaptable to different screen sizes.",
    "component_list": [
      {
        "name": "PostHeader",
        "is_standalone": true,
        "description": "A standalone component that displays the post header. "
      },
      {
        "name": "PostImage",
        "is_standalone": true,
        "description": "A standalone component that displays the post image. "
      },
      {
        "name": "PostContent",
        "is_standalone": false,
        "description": "A component that displays the post content and takes children. "
      },
      {
        "name": "PostFooter",
        "is_standalone": true,
        "description": "A standalone component that displays the post footer. "
      }
    ],
    "main_html": "<article class=\"mb-4 bg-white rounded shadow-md overflow-hidden\">\n  <PostHeader />\n  <PostImage />\n  <PostContent>\n    <!-- post content will be rendered here -->\n  </PostContent>\n  <PostFooter />\n</article>\n",
    "component_html": [
      {
        "name": "PostHeader",
        "html": "<header class=\"p-4 border-b border-gray-200\">  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_by} on {posted_date}</p></header>"
      },
      {
        "name": "PostImage",
        "html": "<img src=\"{image_url}\" class=\"w-full h-48 object-cover\" alt=\"{image_alt_text}\">"
      },
      {
        "name": "PostContent",
        "html": "<div class=\"p-4\">  {children}</div>"
      },
      {
        "name": "PostFooter",
        "html": "<footer class=\"p-4 border-t border-gray-200\">  <p class=\"text-sm text-gray-600\">{footer_text}</p></footer>"
      }
    ]
  },
  {
    "description": "The UI should consist of a grid of cards, each representing a service or gig. Each card should display the service/gig name, a short description, and a call-to-action (CTA) button. The cards should be responsive, with a maximum of 3-4 cards per row on large screens and a single column on mobile devices.",
    "component_list": [
      {
        "name": "ServiceCard",
        "is_standalone": true,
        "description": "(standalone): A single service/gig card. "
      },
      {
        "name": "ServicesGrid",
        "is_standalone": false,
        "description": "(takes children): A grid container for multiple `ServiceCard` components. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Services</h2>\n  <ServicesGrid>\n    <ServiceCard/>\n    <ServiceCard/>\n    <ServiceCard/>\n    <!-- add more ServiceCard components here -->\n  </ServicesGrid>\n</div>\n",
    "component_html": [
      {
        "name": "ServicesGrid",
        "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
      },
      {
        "name": "ServiceCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h3 class=\"text-lg font-bold\">{serviceName}</h3>  <p class=\"text-gray-600\">{serviceDescription}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Learn More  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of provider profiles, showcasing their names, profiles pictures, specialties, and short descriptions. The layout should be responsive, with a card-based layout on desktop and a list view on mobile devices.",
    "component_list": [
      {
        "name": "ProviderProfileCard",
        "is_standalone": true,
        "description": "A standalone component that displays a single provider's profile information. "
      },
      {
        "name": "ProfilePicture",
        "is_standalone": true,
        "description": "A standalone component that displays a provider's profile picture. "
      },
      {
        "name": "ProviderList",
        "is_standalone": false,
        "description": "A component that takes children (ProviderProfileCard components) to display a list of provider profiles. "
      }
    ],
    "main_html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Our Providers</h2>\n  <ProviderList>\n    <ProviderProfileCard />\n    <ProviderProfileCard />\n    <!-- Add more ProviderProfileCard components here -->\n  </ProviderList>\n</section>\n",
    "component_html": [
      {
        "name": "ProviderProfileCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <ProfilePicture src=\"{profile_picture_url}\" alt=\"{provider_name}\" />  <h3 class=\"text-lg font-bold\">{provider_name}</h3>  <p class=\"text-gray-600\">{specialty}</p>  <p class=\"text-gray-600\">{short_description}</p></div>"
      },
      {
        "name": "ProfilePicture",
        "html": "<img src=\"{src}\" alt=\"{alt}\" class=\"w-20 h-20 rounded-full mb-4\" />"
      },
      {
        "name": "ProviderList",
        "html": "<ul class=\"flex flex-wrap justify-center sm:flex-nowrap\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a rating and review system that displays the average rating and allows users to leave their own ratings and reviews. It should be responsive and accessible.",
    "component_list": [
      {
        "name": "RatingStars",
        "is_standalone": true,
        "description": "Standalone component to display the average rating as stars. "
      },
      {
        "name": "RatingInput",
        "is_standalone": true,
        "description": "Standalone component to input a rating (e.g., 1-5 stars). "
      },
      {
        "name": "ReviewList",
        "is_standalone": false,
        "description": "Component that takes children to display a list of reviews. "
      },
      {
        "name": "ReviewCard",
        "is_standalone": true,
        "description": "Standalone component to display a single review. "
      },
      {
        "name": "ReviewForm",
        "is_standalone": true,
        "description": "Standalone component to input a new review. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <!-- Rating and Review Summary -->\n  <RatingStars />\n  <p>{average_rating} / 5 stars, {review_count} reviews</p>\n\n  <!-- Review List -->\n  <ReviewList>\n    <!-- Review Cards will be inserted here -->\n  </ReviewList>\n\n  <!-- Review Form -->\n  <ReviewForm />\n</div>\n",
    "component_html": [
      {
        "name": "RatingStars",
        "html": "<div class=\"flex mb-2\">  {stars} <!-- 1-5 stars will be displayed here --></div>"
      },
      {
        "name": "RatingInput",
        "html": "<div class=\"flex mb-2\">  <label class=\"sr-only\" for=\"rating\">Rating (1-5)</label>  <input type=\"number\" id=\"rating\" min=\"1\" max=\"5\" value=\"{rating}\" />  <span class=\"ml-2\">{rating} / 5 stars</span></div>"
      },
      {
        "name": "ReviewList",
        "html": "<ul class=\"list-none mb-4\">  {children} <!-- ReviewCards will be inserted here --></ul>"
      },
      {
        "name": "ReviewCard",
        "html": "<li class=\"mb-4\">  <p>{username} - {date}</p>  <RatingInput rating={rating} />  <p>{review}</p></li>"
      },
      {
        "name": "ReviewForm",
        "html": "<form class=\"mb-4\">  <label class=\"block mb-2\" for=\"review\">Leave a review</label>  <textarea id=\"review\" class=\"w-full p-2\" placeholder=\"Write a review...\"></textarea>  <RatingInput />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Submit</button></form>"
      }
    ]
  },
  {
    "description": "The UI should display a list of auctions, with each auction showing its title, current price, bidding information, and a \"Place Bid\" button. The bidding information should include the current highest bidder and the number of bids. The UI should be responsive, with a layout that adapts to different screen sizes.",
    "component_list": [
      {
        "name": "AuctionCard",
        "is_standalone": true,
        "description": "A standalone component representing a single auction. "
      },
      {
        "name": "BidInfo",
        "is_standalone": true,
        "description": "A standalone component displaying the current highest bidder and number of bids. "
      },
      {
        "name": "PlaceBidButton",
        "is_standalone": true,
        "description": "A standalone component for the \"Place Bid\" button. "
      },
      {
        "name": "AuctionList",
        "is_standalone": false,
        "description": "A component that takes children, displaying a list of auctions. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionList>\n    <AuctionCard />\n    <AuctionCard />\n    <!-- Add more auction cards here -->\n  </AuctionList>\n</div>\n",
    "component_html": [
      {
        "name": "AuctionCard",
        "html": "<div class=\"bg-white shadow-md p-4 rounded\">  <h2 class=\"text-lg font-bold\">{auction_title}</h2>  <p class=\"text-gray-600\">{auction_description}</p>  <BidInfo />  <PlaceBidButton /></div>"
      },
      {
        "name": "BidInfo",
        "html": "<p class=\"text-sm text-gray-600 mb-2\">  Current bid: {current_bid} by {highest_bidder_name} ({num_bids} bids)</p>"
      },
      {
        "name": "PlaceBidButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
      },
      {
        "name": "AuctionList",
        "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should display a payment and invoicing tool dashboard with sections for sending invoices, tracking payments, and viewing payment history. The design should be clean, modern, and easy to navigate.",
    "component_list": [
      {
        "name": "DashboardHeader",
        "is_standalone": true,
        "description": "(standalone): A header component that displays the title and navigation for the dashboard. "
      },
      {
        "name": "InvoiceSection",
        "is_standalone": false,
        "description": "(takes children): A section component that displays a list of invoices and allows users to send new invoices. "
      },
      {
        "name": "PaymentTracker",
        "is_standalone": true,
        "description": "(standalone): A component that displays a chart tracking payments over time. "
      },
      {
        "name": "PaymentHistory",
        "is_standalone": true,
        "description": "(standalone): A component that displays a list of past payments. "
      }
    ],
    "main_html": "<div class=\"mx-auto max-w-md p-4 pt-6 md:p-6 lg:p-12\">\n  <DashboardHeader />\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <InvoiceSection>\n        <!-- invoice list and send invoice button -->\n      </InvoiceSection>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <PaymentTracker />\n    </div>\n    <div class=\"w-full md:w-full xl:w-1/3 p-4\">\n      <PaymentHistory />\n    </div>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "DashboardHeader",
        "html": "<header class=\"mb-4\">  <h1 class=\"text-2xl font-bold\">{dashboard_title}</h1>  <nav>    <ul class=\"flex justify-between\">      <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>      <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    </ul>  </nav></header>"
      },
      {
        "name": "InvoiceSection",
        "html": "<section class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">{invoice_section_title}</h2>  <ul>    {children} <!-- list of invoices -->  </ul>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{send_invoice_button_text}</button></section>"
      },
      {
        "name": "PaymentTracker",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">{payment_tracker_title}</h2>  <canvas id=\"payment-chart\" width=\"400\" height=\"200\"></canvas></div>"
      },
      {
        "name": "PaymentHistory",
        "html": "<section class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">{payment_history_title}</h2>  <ul>    {children} <!-- list of past payments -->  </ul></section>"
      }
    ]
  },
  {
    "description": "The UI should consist of a dashboard with a calendar view, a list of tasks, and a time tracking timer. The calendar view should display daily tasks, while the list of tasks should display all tasks with their due dates. The time tracking timer should start and stop tracking time spent on a task.",
    "component_list": [
      {
        "name": "Dashboard",
        "is_standalone": true,
        "description": "Standalone component that contains the entire UI. "
      },
      {
        "name": "CalendarView",
        "is_standalone": true,
        "description": "Standalone component that displays a calendar view of daily tasks. "
      },
      {
        "name": "TaskList",
        "is_standalone": true,
        "description": "Standalone component that displays a list of tasks with their due dates. "
      },
      {
        "name": "TaskItem",
        "is_standalone": false,
        "description": "Component that takes children (task details) and displays a single task with its due date. "
      },
      {
        "name": "TimeTracker",
        "is_standalone": true,
        "description": "Standalone component that displays a time tracking timer. "
      }
    ],
    "main_html": "<!-- Dashboard container -->\n<div class=\"flex h-screen\">\n  <!-- Calendar view -->\n  <div class=\"w-1/2 xl:w-1/3 p-4\">\n    <CalendarView />\n  </div>\n  <!-- Task list and time tracker -->\n  <div class=\"w-1/2 xl:w-2/3 p-4\">\n    <TaskList />\n    <TimeTracker />\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "Dashboard",
        "html": "<!-- Not applicable, since it's a container component -->"
      },
      {
        "name": "CalendarView",
        "html": "<!-- Calendar table --><table class=\"w-full\">  <thead>    <tr>      <th class=\"px-4 py-2\">Day</th>      <th class=\"px-4 py-2\">Tasks</th>    </tr>  </thead>  <tbody>    {days.map((day, index) => (      <tr key={index}>        <td class=\"px-4 py-2\">{day.date}</td>        <td class=\"px-4 py-2\">{day.tasks.join(', ')}</td>      </tr>    ))}  </tbody></table>"
      },
      {
        "name": "TaskList",
        "html": "<!-- Task list --><ul class=\"list-none mb-4\">  {tasks.map((task, index) => (    <li key={index}>      <TaskItem>{task.name}</TaskItem>    </li>  ))}</ul>"
      },
      {
        "name": "TaskItem",
        "html": "<!-- Task item --><div class=\"flex items-center mb-2\">  <input type=\"checkbox\" class=\"mr-2\" />  <span class=\"text-lg\">{children}</span>  <span class=\"text-sm text-gray-600\">{due_date}</span></div>"
      },
      {
        "name": "TimeTracker",
        "html": "<!-- Time tracker --><div class=\"flex items-center mb-4\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {timerRunning ? 'Stop' : 'Start'}  </button>  <span class=\"text-lg ml-2\">{elapsed_time}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should have a chat window with a list of conversations on the left and a messaging area on the right. The conversation list should display the user's name and a preview of the last message. The messaging area should display the conversation history and an input field to send new messages. The UI should be responsive and adapt to different screen sizes.",
    "component_list": [
      {
        "name": "ConversationList",
        "is_standalone": true,
        "description": "standalone component that displays a list of conversations "
      },
      {
        "name": "ConversationListItem",
        "is_standalone": true,
        "description": "standalone component that displays a single conversation item "
      },
      {
        "name": "MessagingArea",
        "is_standalone": true,
        "description": "standalone component that displays the conversation history and an input field "
      },
      {
        "name": "MessageBubble",
        "is_standalone": true,
        "description": "standalone component that displays a single message "
      },
      {
        "name": "TextInput",
        "is_standalone": true,
        "description": "standalone component that allows the user to input a new message "
      }
    ],
    "main_html": "<div class=\"flex h-screen\">\n  <div class=\"w-64 bg-gray-100 p-4\">\n    <ConversationList/>\n  </div>\n  <div class=\"flex-1 p-4\">\n    <MessagingArea/>\n  </div>\n</div>\n",
    "component_html": [
      {
        "name": "ConversationList",
        "html": "<ul class=\"list-none p-0 m-0\">  {conversations.map(conversation => (    <ConversationListItem key={conversation.id} />  ))}</ul>"
      },
      {
        "name": "ConversationListItem",
        "html": "<li class=\"py-2 px-4 border-b border-gray-200\">  <p class=\"text-sm\">{userName}</p>  <p class=\"text-xs text-gray-600\">{lastMessagePreview}</p></li>"
      },
      {
        "name": "MessagingArea",
        "html": "<div class=\"h-full flex flex-col\">  <div class=\"flex-1 overflow-y-auto\">    {messages.map(message => (      <MessageBubble key={message.id} />    ))}  </div>  <TextInput /></div>"
      },
      {
        "name": "MessageBubble",
        "html": "<div class=\"flex items-start mb-2\">  <p class=\"text-sm\">{messageText}</p>  <span class=\"text-xs text-gray-600\">{timestamp}</span></div>"
      },
      {
        "name": "TextInput",
        "html": "<input   type=\"text\"   class=\"w-full p-2 pl-10 text-sm\"   placeholder=\"Type a message...\"/>"
      }
    ]
  },
  {
    "description": "The UI should be a task management dashboard that displays a list of tasks, with filters and sorting options. The dashboard should be responsive, with a mobile-first approach, and should be accessible and SEO-friendly.",
    "component_list": [
      {
        "name": "TaskCard",
        "is_standalone": true,
        "description": "A standalone component that displays a single task. "
      },
      {
        "name": "TaskList",
        "is_standalone": false,
        "description": "A component that takes children, which is a list of `TaskCard` components. "
      },
      {
        "name": "FilterBar",
        "is_standalone": true,
        "description": "A standalone component that displays filter and sorting options. "
      },
      {
        "name": "Dashboard",
        "is_standalone": false,
        "description": "A component that takes children, which is the main dashboard container. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <FilterBar />\n  <Dashboard>\n    <TaskList>\n      <TaskCard />\n      <TaskCard />\n      <!-- Add more TaskCard components here -->\n    </TaskList>\n  </Dashboard>\n</div>\n",
    "component_html": [
      {
        "name": "FilterBar",
        "html": "<div class=\"flex justify-between mb-4\">  <select class=\"w-full lg:w-1/2 xl:w-1/3\">    <option value=\"\">Filter by</option>    <option value=\"all\">All tasks</option>    <option value=\"completed\">Completed tasks</option>    <option value=\"pending\">Pending tasks</option>  </select>  <button class=\"btn ml-2\">Sort by</button></div>"
      },
      {
        "name": "TaskCard",
        "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{task_name}</h3>  <p class=\"text-gray-600\">{task_description}</p>  <div class=\"flex justify-between mt-2\">    <button class=\"btn btn-primary\">Edit</button>    <button class=\"btn btn-danger\">Delete</button>  </div></div>"
      },
      {
        "name": "TaskList",
        "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
      },
      {
        "name": "Dashboard",
        "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive grid that displays a list of items in a grid format, with each item taking up a certain amount of space based on the screen size. On small screens, each item should take up the full width, and on larger screens, multiple items should be displayed side by side.",
    "component_list": [
      {
        "name": "ListingGrid",
        "is_standalone": true,
        "description": "A container component that wraps the entire grid. (standalone) "
      },
      {
        "name": "GridItem",
        "is_standalone": false,
        "description": "An individual item in the grid. (takes children) "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <ListingGrid>\n    <GridItem>...</GridItem>\n    <GridItem>...</GridItem>\n    <!-- Add more GridItems here -->\n  </ListingGrid>\n</div>\n",
    "component_html": [
      {
        "name": "ListingGrid",
        "html": "<div class=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">  {children}</div>"
      },
      {
        "name": "GridItem",
        "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{image_url}\" alt=\"{item_title}\" class=\"w-full h-48 object-cover\">  <h2 class=\"text-lg\">{item_title}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive grid of cards, each representing a course. The cards should display the course title, a brief description, and a call-to-action (CTA) button. On mobile devices, the grid should be a single column, and on larger screens, it should be a multi-column grid.",
    "component_list": [
      {
        "name": "CourseGrid",
        "is_standalone": true,
        "description": "A container component that wraps the grid of courses. (standalone) "
      },
      {
        "name": "CourseCard",
        "is_standalone": false,
        "description": "A component that represents a single course. (takes children) "
      }
    ],
    "main_html": "<div className=\"max-w-md mx-auto p-4 lg:p-6\">\n  <CourseGrid>\n    <CourseCard/>\n    <CourseCard/>\n    <CourseCard/>\n    <!-- Add more CourseCard components here -->\n  </CourseGrid>\n</div>\n",
    "component_html": [
      {
        "name": "CourseGrid",
        "html": "<div className=\"grid gap-4 lg:grid-cols-2 xl:grid-cols-3\">  {children}</div>"
      },
      {
        "name": "CourseCard",
        "html": "<div className=\"bg-white shadow-md rounded p-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {cta_text}  </button></div>"
      }
    ]
  },
  {
    "description": "The UI should display a profile section for an instructor or author, showcasing their name, title, bio, and optional social media links. The profile section should be responsive, accessible, and SEO-friendly.",
    "component_list": [
      {
        "name": "ProfileCard",
        "is_standalone": true,
        "description": "A standalone component that renders a profile section for an instructor or author. "
      },
      {
        "name": "ProfileHeader",
        "is_standalone": false,
        "description": "A component that renders the header section of the profile, containing the name and title. Takes children. "
      },
      {
        "name": "ProfileBio",
        "is_standalone": true,
        "description": "A standalone component that renders the bio section of the profile. "
      },
      {
        "name": "SocialMediaLinks",
        "is_standalone": false,
        "description": "A component that renders a list of social media links. Takes children. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 lg:p-6 bg-white rounded-md shadow-md\">\n  <ProfileCard>\n    <ProfileHeader>\n      <h2 class=\"text-lg font-bold\">{instructor_name}</h2>\n      <p class=\"text-sm\">{instructor_title}</p>\n    </ProfileHeader>\n    <ProfileBio>\n      <p class=\"text-sm\">{bio}</p>\n    </ProfileBio>\n    <SocialMediaLinks>\n      <!-- social media links will be rendered here -->\n    </SocialMediaLinks>\n  </ProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "ProfileCard",
        "html": "<div class=\"flex flex-col p-4 lg:p-6\">  {children}</div>"
      },
      {
        "name": "ProfileHeader",
        "html": "<div class=\"flex flex-col mb-4\">  <h2 class=\"text-lg font-bold\">{children}</h2>  <p class=\"text-sm\">{children}</p></div>"
      },
      {
        "name": "ProfileBio",
        "html": "<div class=\"mb-4\">  <p class=\"text-sm\">{children}</p></div>"
      },
      {
        "name": "SocialMediaLinks",
        "html": "<ul class=\"flex flex-wrap mb-4\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a horizontal progress bar that shows the user's progress in a course. The bar should be divided into sections, each representing a topic or module in the course. The completed sections should be filled with a colored background, while the incomplete sections should be empty.",
    "component_list": [
      {
        "name": "ProgressBar",
        "is_standalone": true,
        "description": "(standalone) - Displays the overall progress bar "
      },
      {
        "name": "ProgressSection",
        "is_standalone": false,
        "description": "(takes children) - Represents a section of the progress bar, which can be completed or incomplete "
      },
      {
        "name": "SectionLabel",
        "is_standalone": true,
        "description": "(standalone) - Displays the label for a section "
      }
    ],
    "main_html": "<div class=\"flex justify-center mb-4\">\n  <ProgressBar>\n    <ProgressSection>\n      <SectionLabel>Module 1</SectionLabel>\n    </ProgressSection>\n    <ProgressSection>\n      <SectionLabel>Module 2</SectionLabel>\n    </ProgressSection>\n    <ProgressSection>\n      <SectionLabel>Module 3</SectionLabel>\n    </ProgressSection>\n  </ProgressBar>\n</div>\n",
    "component_html": [
      {
        "name": "ProgressBar",
        "html": "<div class=\"w-full bg-gray-200 h-4 rounded-full overflow-hidden\">  {children}</div>"
      },
      {
        "name": "ProgressSection",
        "html": "<div class=\"bg-orange-500 h-4 rounded-full\" style=\"width: {section_width}%;\">  {children}</div>"
      },
      {
        "name": "SectionLabel",
        "html": "<p class=\"text-sm text-gray-600\">{section_label}</p>"
      }
    ]
  },
  {
    "description": "The UI should consist of a video/audio player with controls for play/pause, volume, and a seek bar. The player should be responsive, adapting to different screen sizes and devices.",
    "component_list": [
      {
        "name": "MediaPlayer",
        "is_standalone": true,
        "description": "A standalone component that wraps the entire video/audio player. "
      },
      {
        "name": "MediaControls",
        "is_standalone": true,
        "description": "A standalone component that contains the play/pause, volume, and seek bar controls. "
      },
      {
        "name": "PlayPauseButton",
        "is_standalone": true,
        "description": "A standalone component that toggles play/pause. "
      },
      {
        "name": "VolumeControl",
        "is_standalone": true,
        "description": "A standalone component that allows adjusting the volume. "
      },
      {
        "name": "SeekBar",
        "is_standalone": true,
        "description": "A standalone component that displays the video/audio progress and allows seeking. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <MediaPlayer>\n    <MediaControls>\n      <PlayPauseButton />\n      <VolumeControl />\n      <SeekBar />\n    </MediaControls>\n  </MediaPlayer>\n</div>\n",
    "component_html": [
      {
        "name": "MediaPlayer",
        "html": "<div class=\"relative w-full h-full\">  <!-- video or audio element will go here -->  {children}</div>"
      },
      {
        "name": "MediaControls",
        "html": "<div class=\"flex justify-between items-center pt-2\">  {children}</div>"
      },
      {
        "name": "PlayPauseButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {playButtonText}</button>"
      },
      {
        "name": "VolumeControl",
        "html": "<div class=\"flex items-center\">  <button class=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">    <i class=\"fas fa-volume-up\"></i>  </button>  <input type=\"range\" min=\"0\" max=\"100\" value={volumeValue} class=\"w-24 h-1 bg-gray-300 rounded-full appearance-none\" /></div>"
      },
      {
        "name": "SeekBar",
        "html": "<div class=\"flex items-center\">  <span class=\"text-gray-600\">{currentTime}</span>  <input type=\"range\" min=\"0\" max={duration} value={currentTime} class=\"w-full h-1 bg-gray-300 rounded-full appearance-none\" />  <span class=\"text-gray-600\">{duration}</span></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of assessment tools with filters and a search bar at the top. Each assessment tool should display its name, description, and tags. The UI should be responsive and accessible.",
    "component_list": [
      {
        "name": "FiltersComponent",
        "is_standalone": true,
        "description": "standalone component that displays filters for the assessment tools "
      },
      {
        "name": "SearchBarComponent",
        "is_standalone": true,
        "description": "standalone component that displays a search bar "
      },
      {
        "name": "AssessmentToolComponent",
        "is_standalone": false,
        "description": "component that displays an assessment tool, takes children to display the tool's details "
      },
      {
        "name": "AssessmentToolList",
        "is_standalone": false,
        "description": "component that displays a list of assessment tools, takes children to display each tool "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <FiltersComponent />\n  <SearchBarComponent />\n  <AssessmentToolList>\n    <!-- assessment tools will be rendered here -->\n  </AssessmentToolList>\n</div>\n",
    "component_html": [
      {
        "name": "FiltersComponent",
        "html": "<div class=\"flex flex-wrap mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Filter by category</button>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Filter by level</button>  <!-- more filters here --></div>"
      },
      {
        "name": "SearchBarComponent",
        "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search by keyword\" />"
      },
      {
        "name": "AssessmentToolComponent",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{assessment_tool_name}</h3>  <p class=\"text-gray-600\">{assessment_tool_description}</p>  <ul class=\"flex flex-wrap mb-2\">    {tags}  </ul></div>"
      },
      {
        "name": "AssessmentToolList",
        "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a responsive, mobile-first, and accessible discussion forum with comments. It should display a list of topics with their corresponding comments. Each topic should have a title, description, and a list of comments. Comments should have a username, comment text, and a reply button.",
    "component_list": [
      {
        "name": "DiscussionForum",
        "is_standalone": true,
        "description": "standalone - The main container for the discussion forum. "
      },
      {
        "name": "Topic",
        "is_standalone": true,
        "description": "standalone - A single topic in the discussion forum. "
      },
      {
        "name": "TopicTitle",
        "is_standalone": true,
        "description": "standalone - The title of a topic. "
      },
      {
        "name": "TopicDescription",
        "is_standalone": true,
        "description": "standalone - The description of a topic. "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "standalone - A single comment in a topic. "
      },
      {
        "name": "CommentMeta",
        "is_standalone": true,
        "description": "standalone - The metadata for a comment (username, reply button). "
      },
      {
        "name": "CommentText",
        "is_standalone": true,
        "description": "standalone - The text of a comment. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "standalone - A button to reply to a comment. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <DiscussionForum>\n    <Topic>\n      <TopicTitle>{topic_title}</TopicTitle>\n      <TopicDescription>{topic_description}</TopicDescription>\n      <ul>\n        {comments}\n      </ul>\n    </Topic>\n  </DiscussionForum>\n</div>\n",
    "component_html": [
      {
        "name": "DiscussionForum",
        "html": "<div class=\"flex flex-col p-4 md:p-6 lg:p-12\">  {children}</div>"
      },
      {
        "name": "Topic",
        "html": "<div class=\"mb-4 md:mb-6 lg:mb-12\">  <TopicTitle />  <TopicDescription />  <ul>    {comments}  </ul></div>"
      },
      {
        "name": "TopicTitle",
        "html": "<h2 class=\"text-lg md:text-xl lg:text-2xl\">{topic_title}</h2>"
      },
      {
        "name": "TopicDescription",
        "html": "<p class=\"text-sm md:text-base lg:text-lg\">{topic_description}</p>"
      },
      {
        "name": "Comment",
        "html": "<li class=\"py-2 md:py-4 lg:py-6\">  <CommentMeta />  <CommentText /></li>"
      },
      {
        "name": "CommentMeta",
        "html": "<div class=\"flex justify-between mb-2 md:mb-4 lg:mb-6\">  <span class=\"text-sm md:text-base lg:text-lg\">{username}</span>  <ReplyButton /></div>"
      },
      {
        "name": "CommentText",
        "html": "<p class=\"text-sm md:text-base lg:text-lg\">{comment_text}</p>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
      }
    ]
  },
  {
    "description": "The UI should display a section with certificates and badges, showcasing the user's achievements. The section should be responsive, mobile-first, and accessible.",
    "component_list": [
      {
        "name": "CertificateSection",
        "is_standalone": true,
        "description": "(standalone) - The container for the certificates and badges section. "
      },
      {
        "name": "CertificateCard",
        "is_standalone": false,
        "description": "(takes children) - A card that displays a single certificate or badge. "
      },
      {
        "name": "BadgeImage",
        "is_standalone": true,
        "description": "(standalone) - A component that displays a badge image. "
      }
    ],
    "main_html": "<section className=\"container max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-3xl font-bold mb-4\">Certificates and Badges</h2>\n  <CertificateSection>\n    <CertificateCard>\n      <BadgeImage />\n      <h3 className=\"text-lg font-bold\">{certificate_name}</h3>\n      <p>{certificate_description}</p>\n      <p>Issued by {issuer_name}</p>\n      <p>Issued on {issue_date}</p>\n    </CertificateCard>\n    <!-- Add more CertificateCard components here -->\n  </CertificateSection>\n</section>\n",
    "component_html": [
      {
        "name": "CertificateSection",
        "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {children}</div>"
      },
      {
        "name": "CertificateCard",
        "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4 w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">  {children}</div>"
      },
      {
        "name": "BadgeImage",
        "html": "<img src={badge_image_url} alt={badge_image_alt} className=\"w-12 h-12 rounded-full mb-2\" />"
      }
    ]
  },
  {
    "description": "The UI should display a list of course recommendations with their titles, short descriptions, and ratings. The list should be responsive and accessible.",
    "component_list": [
      {
        "name": "CourseRecommendationCard",
        "is_standalone": true,
        "description": "Standalone component that displays a single course recommendation. "
      },
      {
        "name": "CourseRecommendationsList",
        "is_standalone": false,
        "description": "Component that takes children (a list of `CourseRecommendationCard` components). "
      }
    ],
    "main_html": "<!-- The main container for the course recommendations list -->\n<div className=\"max-w-3xl mx-auto p-4\">\n  <h2>Course Recommendations</h2>\n  <!-- The list of course recommendations -->\n  <CourseRecommendationsList>\n    {/*\n      This will be replaced with multiple CourseRecommendationCard components\n    */}\n  </CourseRecommendationsList>\n</div>\n",
    "component_html": [
      {
        "name": "CourseRecommendationCard",
        "html": "<!-- A single course recommendation card --><div className=\"bg-white shadow-md p-4 mb-4\">  <h3>{course_title}</h3>  <p>{course_description}</p>  <p>Rating: {rating} / 5</p></div>"
      },
      {
        "name": "CourseRecommendationsList",
        "html": "<!-- The list of course recommendations --><ul className=\"list-none mb-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a responsive video embed that takes up the full width of its parent container and maintains a 16:9 aspect ratio.",
    "component_list": [
      {
        "name": "ResponsiveVideoEmbed",
        "is_standalone": true,
        "description": "(standalone) - a container for the video embed "
      },
      {
        "name": "VideoIframe",
        "is_standalone": true,
        "description": "(standalone) - the iframe element for the video "
      }
    ],
    "main_html": "<div class=\"aspect-w-16 aspect-h-9\">\n  <ResponsiveVideoEmbed/>\n</div>\n",
    "component_html": [
      {
        "name": "ResponsiveVideoEmbed",
        "html": "<div class=\"relative w-full h-0 overflow-hidden\">  <VideoIframe src={video_url} frameborder=\"0\" allowfullscreen/></div>"
      },
      {
        "name": "VideoIframe",
        "html": "<iframe src={video_url} frameborder=\"0\" allowfullscreen/>"
      }
    ]
  },
  {
    "description": "The UI should display a reply input field with a \"Post Reply\" button and editing tools (e.g., bold, italic, link) above the input field. The editing tools should be grouped together and aligned horizontally. The input field should take up the full width of the container and have a responsive design.",
    "component_list": [
      {
        "name": "ReplyInput",
        "is_standalone": true,
        "description": "standalone (renders a text input field) "
      },
      {
        "name": "EditingTools",
        "is_standalone": true,
        "description": "standalone (renders a group of editing tool buttons) "
      },
      {
        "name": "ToolButton",
        "is_standalone": true,
        "description": "standalone (renders a single editing tool button) "
      },
      {
        "name": "PostReplyButton",
        "is_standalone": true,
        "description": "standalone (renders a \"Post Reply\" button) "
      }
    ],
    "main_html": "<div class=\"flex flex-col gap-2 mx-auto max-w-md p-4\">\n  <div class=\"flex justify-center\">\n    <EditingTools/>\n  </div>\n  <ReplyInput/>\n  <PostReplyButton/>\n</div>\n",
    "component_html": [
      {
        "name": "ReplyInput",
        "html": "<textarea class=\"w-full p-2 border border-gray-300 rounded-md\" rows=\"5\" placeholder=\"Type your reply...\"></textarea>"
      },
      {
        "name": "EditingTools",
        "html": "<div class=\"flex gap-2\">  <ToolButton>{bold_label}</ToolButton>  <ToolButton>{italic_label}</ToolButton>  <ToolButton>{link_label}</ToolButton>  <!-- Add more tool buttons here --></div>"
      },
      {
        "name": "ToolButton",
        "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\">  {tool_label}</button>"
      },
      {
        "name": "PostReplyButton",
        "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
      }
    ]
  },
  {
    "description": "The UI should display a user's profile information, including their name, profile picture, reputation score, and a list of badges they've earned.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "A standalone component that displays a user's profile information. "
      },
      {
        "name": "UserProfilePicture",
        "is_standalone": true,
        "description": "A standalone component that displays a user's profile picture. "
      },
      {
        "name": "ReputationScore",
        "is_standalone": true,
        "description": "A standalone component that displays a user's reputation score. "
      },
      {
        "name": "BadgeList",
        "is_standalone": false,
        "description": "A component that takes children (badges) and displays them in a list. "
      },
      {
        "name": "Badge",
        "is_standalone": true,
        "description": "A standalone component that displays a single badge. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard>\n    <UserProfilePicture />\n    <div class=\"flex flex-wrap justify-center mb-4\">\n      <h2 class=\"text-3xl font-bold\">{userName}</h2>\n      <ReputationScore />\n    </div>\n    <BadgeList>\n      <!-- Badges will be rendered here -->\n    </BadgeList>\n  </UserProfileCard>\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div class=\"max-w-md mx-auto bg-white shadow-md rounded p-4 md:p-6\">  {children}</div>"
      },
      {
        "name": "UserProfilePicture",
        "html": "<img src={profilePictureUrl} alt={userName} class=\"w-24 h-24 rounded-full mb-4\" />"
      },
      {
        "name": "ReputationScore",
        "html": "<p class=\"text-lg font-bold\">{reputationScore} reputation</p>"
      },
      {
        "name": "BadgeList",
        "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
      },
      {
        "name": "Badge",
        "html": "<li class=\"mr-2 mb-2\">  <img src={badgeImageUrl} alt={badgeName} class=\"w-8 h-8 rounded-full\" />  <span class=\"text-sm\">{badgeName}</span></li>"
      }
    ]
  },
  {
    "description": "The UI should display a list of comments with threading and nesting. Each comment should have a username, a comment text, and a reply button. When the reply button is clicked, a new comment input field should appear below the comment, allowing the user to respond to the comment. The nested comments should be indented to show the hierarchy of the conversation.",
    "component_list": [
      {
        "name": "CommentThread",
        "is_standalone": true,
        "description": "A standalone component that displays a list of comments with threading and nesting. "
      },
      {
        "name": "Comment",
        "is_standalone": true,
        "description": "A standalone component that displays a single comment with a reply button. "
      },
      {
        "name": "CommentInput",
        "is_standalone": true,
        "description": "A standalone component that displays a text input field for entering a new comment. "
      },
      {
        "name": "ReplyButton",
        "is_standalone": true,
        "description": "A standalone component that displays a button to reply to a comment. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <CommentThread />\n</div>\n",
    "component_html": [
      {
        "name": "CommentThread",
        "html": "<ul class=\"list-none p-0 m-0\">  {comments.map((comment) => (    <li class=\"mb-4\">      <Comment comment={comment} />    </li>  ))}</ul>"
      },
      {
        "name": "Comment",
        "html": "<div class=\"flex items-start mb-4\">  <div class=\"mr-4\">    <img src=\"{userAvatar}\" alt=\"{userName}\" class=\"w-8 h-8 rounded-full\" />  </div>  <div class=\"flex-1\">    <p class=\"text-lg font-bold\">{userName}</p>    <p class=\"text-gray-600\">{commentText}</p>    <ReplyButton />  </div></div>"
      },
      {
        "name": "CommentInput",
        "html": "<div class=\"mb-4\">  <input    type=\"text\"    class=\"w-full p-2 pl-10 text-sm text-gray-700\"    placeholder=\"Enter your reply...\"  />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Post  </button></div>"
      },
      {
        "name": "ReplyButton",
        "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded\">  Reply</button>"
      }
    ]
  },
  {
    "description": "The UI should have a search bar with a text input field and a search button. Below the search bar, there should be a filter section with checkboxes and labels. The filter section should be collapsible. The UI should be responsive and mobile-friendly.",
    "component_list": [
      {
        "name": "SearchBar",
        "is_standalone": true,
        "description": "(standalone) - a text input field and a search button. "
      },
      {
        "name": "FilterSection",
        "is_standalone": false,
        "description": "(takes children) - a collapsible section containing filter checkboxes and labels. "
      },
      {
        "name": "FilterItem",
        "is_standalone": true,
        "description": "(standalone) - a single filter checkbox and label. "
      }
    ],
    "main_html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <FilterSection>\n    <FilterItem />\n    <FilterItem />\n    <FilterItem />\n  </FilterSection>\n</div>\n",
    "component_html": [
      {
        "name": "SearchBar",
        "html": "<div class=\"flex mb-4\">  <input type=\"text\" class=\"w-full px-2 py-1 border border-gray-200 rounded\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded\">Search</button></div>"
      },
      {
        "name": "FilterSection",
        "html": "<div class=\"bg-white shadow-md p-2 mb-4\">  <h5 class=\"mb-2\">{filterInSectionTitle}</h5>  <div class=\"flex flex-wrap\">    {children}  </div></div>"
      },
      {
        "name": "FilterItem",
        "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" id=\"{filterItemId}\" class=\"mr-2\" />  <label for=\"{filterItemId}\" class=\"text-sm\">{filterItemLabel}</label></div>"
      }
    ]
  },
  {
    "description": "The UI should display a list of user ranks and badges, showing the user's current rank and badges, with a responsive design that adapts to different screen sizes.",
    "component_list": [
      {
        "name": "UserProfileCard",
        "is_standalone": true,
        "description": "standalone component that displays the user's profile information, including rank and badges. "
      },
      {
        "name": "RankBadge",
        "is_standalone": true,
        "description": "standalone component that displays a single badge. "
      },
      {
        "name": "RankList",
        "is_standalone": true,
        "description": "standalone component that displays a list of ranks. "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <UserProfileCard />\n</div>\n",
    "component_html": [
      {
        "name": "UserProfileCard",
        "html": "<div className=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">  <h2 className=\"text-lg font-bold\">{userName}</h2>  <p className=\"text-gray-600\">{userBio}</p>  <div className=\"flex flex-wrap justify-center mb-4\">    {badges.map((badge) => (      <RankBadge key={badge.id} {...badge} />    ))}  </div>  <RankList /></div>"
      },
      {
        "name": "RankBadge",
        "html": "<div className=\"p-2\">  <img src={badgeImage} className=\"w-8 h-8\" alt={badgeName} />  <p className=\"text-sm text-gray-600\">{badgeName}</p></div>"
      },
      {
        "name": "RankList",
        "html": "<ul className=\"list-none mb-4\">  {ranks.map((rank) => (    <li key={rank.id} className=\"py-2 border-b border-gray-200\">      <p className=\"text-sm\">{rank.name}</p>      <p className=\"text-xs text-gray-600\">{rank.description}</p>    </li>  ))}</ul>"
      }
    ]
  },
  {
    "description": "The UI should display a list of threads that the user has favorited or is watching, with each thread showing its title, a brief description, and buttons to unfavorite or unwatch.",
    "component_list": [
      {
        "name": "ThreadCard",
        "is_standalone": true,
        "description": "(standalone) - A single thread card with title, description, and buttons. "
      },
      {
        "name": "ThreadList",
        "is_standalone": false,
        "description": "(takes children) - A container for the list of thread cards. "
      }
    ],
    "main_html": "<div class=\"container mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Favorites and Watched Threads</h1>\n  <ThreadList>\n    <!-- thread cards will be inserted here -->\n  </ThreadList>\n</div>\n",
    "component_html": [
      {
        "name": "ThreadCard",
        "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{thread_title}</h2>  <p class=\"text-gray-600\">{thread_description}</p>  <div class=\"flex justify-end\">    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Unfavorite</button>    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\">Unwatch</button>  </div></div>"
      },
      {
        "name": "ThreadList",
        "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
      }
    ]
  },
  {
    "description": "The UI should be a simple toolbar with formatting tools for editing text. It should have a responsive design, accessible colors, and be mobile-friendly.",
    "component_list": [
      {
        "name": "Toolbar",
        "is_standalone": true,
        "description": "(standalone): The main container for the formatting tools. "
      },
      {
        "name": "ButtonGroup",
        "is_standalone": false,
        "description": "(takes children): A container for a group of buttons. "
      },
      {
        "name": "FormattingTool",
        "is_standalone": true,
        "description": "(standalone): A single formatting tool (e.g., bold, italic, underline). "
      }
    ],
    "main_html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <Toolbar>\n    <ButtonGroup>\n      <FormattingTool/>\n      <FormattingTool/>\n      <FormattingTool/>\n    </ButtonGroup>\n  </Toolbar>\n</div>\n",
    "component_html": [
      {
        "name": "Toolbar",
        "html": "<div className=\"bg-gray-200 p-2 rounded-md shadow-md\">  {children}</div>"
      },
      {
        "name": "ButtonGroup",
        "html": "<div className=\"flex space-x-2\">  {children}</div>"
      },
      {
        "name": "FormattingTool",
        "html": "<button className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow-md\">  {formatting_tool_name}</button>"
      }
    ]
  }
]