{
  "JSON Data Visualization": [
    {
      "description": "A JSON data visualization UI that displays key-value pairs in a tree-like structure, with nested objects and arrays expandable and collapsible. The UI should have a clean and minimalistic design.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <DataTree>\n    <DataTreeNode />\n  </DataTree>\n</div>\n",
      "components": [
        {
          "name": "DataTreeNode",
          "is_standalone": true,
          "description": "(standalone) - a single node in the data tree",
          "html": "<div class=\"flex items-center mb-2\">  <span class=\"mr-2\">{key}</span>  <span class=\"text-gray-600\">{value}</span>  <!-- if nested object or array, add an expand/collapse button -->  {nestedContent ? <button class=\"ml-2 text-xs\">+</button> : null}  <!-- if nested object or array, show the nested content -->  {nestedContent ? <DataTree><DataTreeNode /></DataTree> : null}</div>"
        },
        {
          "name": "DataTree",
          "is_standalone": false,
          "description": "(takes children) - the main container for the data tree",
          "html": "<ul class=\"list-none mb-0 pl-0\">  {children}</ul>"
        },
        {
          "name": "KeyValuePair",
          "is_standalone": true,
          "description": "(standalone) - a single key-value pair",
          "html": "<!-- this component is not needed, as DataTreeNode already handles key-value pairs -->"
        }
      ]
    }
  ],
  "Course Recommendations": [
    {
      "description": "The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.",
      "html": "<div className=\"max-w-md mx-auto px-4 py-8\">\n  <h2 className=\"text-3xl font-bold mb-4\">Recommended Courses</h2>\n  <CourseRecommendationList>\n    <CourseRecommendationCard />\n    <CourseRecommendationCard />\n    <!-- Add more CourseRecommendationCard components here -->\n  </CourseRecommendationList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "(standalone): A single course recommendation card.",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-4 mb-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "CourseRecommendationList",
          "is_standalone": false,
          "description": "(takes children): A list of course recommendation cards.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display course recommendations in a card layout, with each card showing the course title, description, and rating. The cards should be arranged in a grid, with multiple cards per row.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold\">Course Recommendations</h1>\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <CourseRecommendationsGrid>\n      <CourseCard/>\n      <CourseCard/>\n      <CourseCard/>\n      <!-- Add more CourseCard components as needed -->\n    </CourseRecommendationsGrid>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CourseCard",
          "is_standalone": true,
          "description": "A standalone component that displays a course's information, including title, description, and rating.",
          "html": "<div className=\"bg-white shadow-md rounded p-4\">  <h2 className=\"text-lg font-bold\">{course_title}</h2>  <p>{course_description}</p>  <p>Rating: {rating}/5</p></div>"
        },
        {
          "name": "CourseRecommendationsGrid",
          "is_standalone": false,
          "description": "A component that takes children (multiple `CourseCard` components) and arranges them in a grid layout.",
          "html": "<!-- Children will be placed here -->{children}"
        }
      ]
    },
    {
      "description": "The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.",
      "html": "<div className=\"max-w-md mx-auto px-4 py-8\">\n  <h2 className=\"text-3xl font-bold mb-4\">Recommended Courses</h2>\n  <CourseRecommendationList>\n    <CourseRecommendationCard />\n    <CourseRecommendationCard />\n    <!-- Add more CourseRecommendationCard components here -->\n  </CourseRecommendationList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "(standalone): A single course recommendation card.",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-4 mb-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "CourseRecommendationList",
          "is_standalone": false,
          "description": "(takes children): A list of course recommendation cards.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.",
      "html": "<div className=\"max-w-md mx-auto px-4 py-8\">\n  <h2 className=\"text-3xl font-bold mb-4\">Recommended Courses</h2>\n  <CourseRecommendationList>\n    <CourseRecommendationCard />\n    <CourseRecommendationCard />\n    <!-- Add more CourseRecommendationCard components here -->\n  </CourseRecommendationList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "(standalone): A single course recommendation card.",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-4 mb-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "CourseRecommendationList",
          "is_standalone": false,
          "description": "(takes children): A list of course recommendation cards.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.",
      "html": "<div className=\"max-w-md mx-auto px-4 py-8\">\n  <h2 className=\"text-3xl font-bold mb-4\">Recommended Courses</h2>\n  <CourseRecommendationList>\n    <CourseRecommendationCard />\n    <CourseRecommendationCard />\n    <!-- Add more CourseRecommendationCard components here -->\n  </CourseRecommendationList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "(standalone): A single course recommendation card.",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-4 mb-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "CourseRecommendationList",
          "is_standalone": false,
          "description": "(takes children): A list of course recommendation cards.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card component that displays a list of course recommendations. Each recommendation should show the course title, a short description, and a call-to-action (CTA) button to learn more.",
      "html": "<div className=\"max-w-md mx-auto px-4 py-8\">\n  <h2 className=\"text-3xl font-bold mb-4\">Recommended Courses</h2>\n  <CourseRecommendationList>\n    <CourseRecommendationCard />\n    <CourseRecommendationCard />\n    <!-- Add more CourseRecommendationCard components here -->\n  </CourseRecommendationList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "(standalone): A single course recommendation card.",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-4 mb-4\">  <h3 className=\"text-lg font-bold\">{course_title}</h3>  <p className=\"text-gray-600\">{course_description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "CourseRecommendationList",
          "is_standalone": false,
          "description": "(takes children): A list of course recommendation cards.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of course recommendations with their titles, short descriptions, and ratings. The list should be responsive and accessible.",
      "html": "<!-- The main container for the course recommendations list -->\n<div className=\"max-w-3xl mx-auto p-4\">\n  <h2>Course Recommendations</h2>\n  <!-- The list of course recommendations -->\n  <CourseRecommendationsList>\n    {/*\n      This will be replaced with multiple CourseRecommendationCard components\n    */}\n  </CourseRecommendationsList>\n</div>\n",
      "components": [
        {
          "name": "CourseRecommendationCard",
          "is_standalone": true,
          "description": "Standalone component that displays a single course recommendation.",
          "html": "<!-- A single course recommendation card --><div className=\"bg-white shadow-md p-4 mb-4\">  <h3>{course_title}</h3>  <p>{course_description}</p>  <p>Rating: {rating} / 5</p></div>"
        },
        {
          "name": "CourseRecommendationsList",
          "is_standalone": false,
          "description": "Component that takes children (a list of `CourseRecommendationCard` components).",
          "html": "<!-- The list of course recommendations --><ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Personal interests and hobbies section with icons": [
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first section that displays a person's interests and hobbies with accompanying icons. The section should have a clear and concise layout, with each interest or hobby listed in a grid or flexbox layout.",
      "html": "<section class=\"lg:grid lg:grid-cols-2 xl:grid-cols-3 max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests and Hobbies</h2>\n  <InterestsSection>\n    <InterestItem/>\n    <InterestItem/>\n    <InterestItem/>\n    <!-- Add more InterestItem components as needed -->\n  </InterestsSection>\n</section>\n",
      "components": [
        {
          "name": "InterestItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single interest or hobby with an icon.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <i class={`w-6 h-6 text-gray-500 {icon_name}`}></i>  <p class=\"text-sm\">{interest_name}</p></div>"
        },
        {
          "name": "InterestsSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `InterestItem` components) and displays them in a grid or flexbox layout.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a section showcasing personal interests and hobbies, with icons to visually represent each interest. The section should be responsive, with a flexible layout that adapts to different screen sizes. On mobile devices, the interests should be displayed in a single column, while on larger screens, they should be displayed in a grid.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Personal Interests</h2>\n  <HobbiesSection>\n    <HobbyItem />\n    <HobbyItem />\n    <!-- more HobbyItem components here -->\n  </HobbiesSection>\n</section>\n",
      "components": [
        {
          "name": "HobbyItem",
          "is_standalone": true,
          "description": "A standalone component representing a single hobby or interest, with an icon and a label.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon_name}</span>  <p>{hobby_label}</p></div>"
        },
        {
          "name": "HobbiesSection",
          "is_standalone": false,
          "description": "A component that takes children (multiple `HobbyItem` components) and displays them in a responsive grid or list.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of personal interests and hobbies, each accompanied by an icon that represents the interest or hobby. The list should be responsive, with a maximum of 3 items per row on larger screens, and a single column on mobile devices.",
      "html": "<section className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Personal Interests and Hobbies</h2>\n  <InterestsList>\n    <InterestItem />\n    <InterestItem />\n    <InterestItem />\n    <!-- Add more InterestItem components as needed -->\n  </InterestsList>\n</section>\n",
      "components": [
        {
          "name": "InterestItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single interest or hobby, consisting of an icon and a label.",
          "html": "<div className=\"flex items-center mb-4\">  <i className={`w-6 h-6 text-lg {icon_class}`}></i>  <span className=\"ml-2\">{interest_label}</span></div>"
        },
        {
          "name": "InterestsList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of `InterestItem`s.",
          "html": "<ul className=\"flex flex-wrap justify-center md:flex-nowrap md:flex-row\">  {children}</ul>"
        }
      ]
    }
  ],
  "Popular Tags: Cloud of frequently used keywords": [
    {
      "description": "A cloud of popular tags, with each tag represented as a pill with the tag name and a count of its frequency, varying in size and color based on the frequency.",
      "html": "<div className=\"flex flex-wrap justify-center\">\n  <TagCloud/>\n</div>\n",
      "components": [
        {
          "name": "TagCloud",
          "is_standalone": true,
          "description": "standalone component representing the entire tag cloud",
          "html": "<div className=\"flex flex-wrap justify-center\">  {tags.map((tag, index) => (    <TagPill key={index} tag={tag} />  ))}</div>"
        },
        {
          "name": "TagPill",
          "is_standalone": true,
          "description": "standalone component representing a single tag pill",
          "html": "<div className=\"inline-flex items-center mr-2 mb-2\">  <TagName tagName={tagName} />  <TagCount count={tagCount} /></div>"
        },
        {
          "name": "TagName",
          "is_standalone": true,
          "description": "standalone component representing the name of a tag",
          "html": "<span className=\"text-sm font-bold\">{tagName}</span>"
        },
        {
          "name": "TagCount",
          "is_standalone": true,
          "description": "standalone component representing the count of a tag",
          "html": "<span className=\"text-xs text-gray-600\">{tagCount}</span>"
        }
      ]
    },
    {
      "description": "A cloud of popular tags, where each tag has a different size and color based on its frequency of use. The tags should be arranged in a way that creates a visually appealing and organic shape.",
      "html": "<div class=\"md:max-w-md mx-auto p-4\">\n  <PopularTagCloud />\n</div>\n",
      "components": [
        {
          "name": "PopularTagCloud",
          "is_standalone": true,
          "description": "standalone component that contains all the popular tags",
          "html": "<div class=\"flex flex-wrap justify-center mb-4\">  {tags}</div>"
        },
        {
          "name": "Tag",
          "is_standalone": true,
          "description": "standalone component that represents a single popular tag",
          "html": "<a   href=\"{tag_url}\"   class=\"inline-block px-2 py-1 rounded {tag_color} text-lg mb-2 mr-2 hover:underline\">  {tag_name}  <span class=\"text-sm\">({tag_frequency})</span></a>"
        }
      ]
    }
  ],
  "Project Timeline Visualization Tool": [
    {
      "description": "The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.",
      "html": "<!-- The main project timeline component -->\n<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ProjectTimeline>\n    <!-- Milestones and tasks will be rendered here -->\n  </ProjectTimeline>\n</div>\n",
      "components": [
        {
          "name": "ProjectTimeline",
          "is_standalone": false,
          "description": "The main component that renders the project timeline. Takes children.",
          "html": "<!-- Container for the project timeline --><div class=\"flex flex-col\">  {children}</div>"
        },
        {
          "name": "MilestoneCard",
          "is_standalone": true,
          "description": "A card component that represents a milestone in the project timeline. Standalone.",
          "html": "<!-- Milestone card component --><div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{milestone_name}</h3>  <p class=\"text-gray-600\">{milestone_description}</p>  <p class=\"text-sm text-gray-500\">{milestone_date}</p></div>"
        },
        {
          "name": "TaskCard",
          "is_standalone": true,
          "description": "A card component that represents a task in the project timeline. Standalone.",
          "html": "<!-- Task card component --><div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{task_name}</h3>  <p class=\"text-gray-600\">{task_description}</p>  <p class=\"text-sm text-gray-500\">{task_date}</p></div>"
        },
        {
          "name": "DependencyLine",
          "is_standalone": true,
          "description": "A line component that represents a dependency between tasks or milestones. Standalone.",
          "html": "<!-- Dependency line component --><div class=\"h-4 w-1 bg-gray-300\"></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.",
      "html": "<!-- The main project timeline component -->\n<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ProjectTimeline>\n    <!-- Milestones and tasks will be rendered here -->\n  </ProjectTimeline>\n</div>\n",
      "components": [
        {
          "name": "ProjectTimeline",
          "is_standalone": false,
          "description": "The main component that renders the project timeline. Takes children.",
          "html": "<!-- Container for the project timeline --><div class=\"flex flex-col\">  {children}</div>"
        },
        {
          "name": "MilestoneCard",
          "is_standalone": true,
          "description": "A card component that represents a milestone in the project timeline. Standalone.",
          "html": "<!-- Milestone card component --><div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{milestone_name}</h3>  <p class=\"text-gray-600\">{milestone_description}</p>  <p class=\"text-sm text-gray-500\">{milestone_date}</p></div>"
        },
        {
          "name": "TaskCard",
          "is_standalone": true,
          "description": "A card component that represents a task in the project timeline. Standalone.",
          "html": "<!-- Task card component --><div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{task_name}</h3>  <p class=\"text-gray-600\">{task_description}</p>  <p class=\"text-sm text-gray-500\">{task_date}</p></div>"
        },
        {
          "name": "DependencyLine",
          "is_standalone": true,
          "description": "A line component that represents a dependency between tasks or milestones. Standalone.",
          "html": "<!-- Dependency line component --><div class=\"h-4 w-1 bg-gray-300\"></div>"
        }
      ]
    }
  ],
  "Notification Badge: Displays new notification count": [
    {
      "description": "A small badge that displays a count of new notifications, often placed in the top right corner of a navigation item or icon.",
      "html": "<nav>\n  <ul>\n    <li>\n      <a href=\"#\" className=\"flex items-center\">\n        <span>Notifications</span>\n        <NotificationBadge />\n      </a>\n    </li>\n  </ul>\n</nav>\n",
      "components": [
        {
          "name": "NotificationBadge",
          "is_standalone": true,
          "description": "Standalone component that displays the notification count.",
          "html": "<div className=\"bg-red-500 text-white rounded-full px-2 py-1 text-xs\">  {notificationCount}</div>"
        }
      ]
    }
  ],
  "User settings panel with notification and account options": [
    {
      "description": "The UI should be a responsive, mobile-first user settings panel with two main sections: notification options and account options. The notification options section should have a heading, a list of toggle switches for different notification types, and a \"Save Changes\" button. The account options section should have a heading, a list of profile information (e.g. name, email), and an \"Edit Profile\" button.",
      "html": "<div className=\"flex flex-col p-4 md:p-8\">\n  <h1 className=\"text-2xl mb-4\">User Settings</h1>\n  <NotificationOptions/>\n  <AccountOptions/>\n</div>\n",
      "components": [
        {
          "name": "NotificationOptions",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<section className=\"mb-8\">  <h2 className=\"text-lg mb-2\">Notification Options</h2>  <ul>    <li>      <NotificationToggle label=\"Email Notifications\" defaultChecked={true}/>    </li>    <li>      <NotificationToggle label=\"Push Notifications\" defaultChecked={false}/>    </li>    <li>      <NotificationToggle label=\"In-App Notifications\" defaultChecked={true}/>    </li>  </ul>  <SaveChangesButton/></section>"
        },
        {
          "name": "NotificationToggle",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div className=\"flex items-center mb-2\">  <input type=\"checkbox\" defaultChecked={defaultChecked} className=\"mr-2\"/>  <span>{label}</span></div>"
        },
        {
          "name": "AccountOptions",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<section className=\"mb-8\">  <h2 className=\"text-lg mb-2\">Account Options</h2>  <ul>    <li>      <ProfileInfo label=\"Name\" value={userName}/>    </li>    <li>      <ProfileInfo label=\"Email\" value={userEmail}/>    </li>  </ul>  <EditProfileButton/></section>"
        },
        {
          "name": "ProfileInfo",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div className=\"flex items-center mb-2\">  <span>{label}:</span>  <span className=\"ml-2\">{value}</span></div>"
        },
        {
          "name": "EditProfileButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit Profile</button>"
        },
        {
          "name": "SaveChangesButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">Save Changes</button>"
        }
      ]
    }
  ],
  "Discussion Forums and Comments": [
    {
      "description": "A discussion forum with a list of comments and a form to add new comments. Each comment should display the user's name, the comment text, and a timestamp. The UI should have a clean and modern design, with adequate spacing and clear typography.",
      "html": "<!-- The main discussion forum container -->\n<div className=\"max-w-md mx-auto p-4\">\n  <DiscussionForum>\n    <CommentList>\n      <!-- List of comments will be rendered here -->\n      <CommentCard />\n      <CommentCard />\n      <!-- ... -->\n    </CommentList>\n    <CommentForm />\n  </DiscussionForum>\n</div>\n",
      "components": [
        {
          "name": "CommentCard",
          "is_standalone": true,
          "description": "(standalone): Displays a single comment with user name, comment text, and timestamp.",
          "html": "<div className=\"flex gap-2 mb-4\">  <img src=\"{user_avatar_url}\" alt=\"User Avatar\" className=\"w-10 h-10 rounded-full\" />  <div className=\"flex-1\">    <h5 className=\"text-lg font-bold\">{username}</h5>    <p>{comment_text}</p>    <p className=\"text-sm text-gray-500\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "CommentForm",
          "is_standalone": true,
          "description": "(standalone): A form to add a new comment.",
          "html": "<form className=\"flex gap-2 mb-4\">  <input type=\"text\" placeholder=\"Add a comment...\" className=\"flex-1 p-2\" />  <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4\">Comment</button></form>"
        },
        {
          "name": "CommentList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of comments.",
          "html": "<!-- This component will render a list of CommentCards --><div className=\"space-y-4\">  {children}</div>"
        },
        {
          "name": "DiscussionForum",
          "is_standalone": false,
          "description": "(takes children): The main container for the discussion forum.",
          "html": "<!-- This component will render the entire discussion forum UI --><div className=\"rounded-lg overflow-hidden shadow-md\">  {children}</div>"
        }
      ]
    }
  ],
  "Messaging and Chat Systems": [
    {
      "description": "The UI should have a chat window with a list of conversations on the left and a messaging area on the right. The conversation list should display the user's name and a preview of the last message. The messaging area should display the conversation history and an input field to send new messages. The UI should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex h-screen\">\n  <div class=\"w-64 bg-gray-100 p-4\">\n    <ConversationList/>\n  </div>\n  <div class=\"flex-1 p-4\">\n    <MessagingArea/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ConversationList",
          "is_standalone": true,
          "description": "standalone component that displays a list of conversations",
          "html": "<ul class=\"list-none p-0 m-0\">  {conversations.map(conversation => (    <ConversationListItem key={conversation.id} />  ))}</ul>"
        },
        {
          "name": "ConversationListItem",
          "is_standalone": true,
          "description": "standalone component that displays a single conversation item",
          "html": "<li class=\"py-2 px-4 border-b border-gray-200\">  <p class=\"text-sm\">{userName}</p>  <p class=\"text-xs text-gray-600\">{lastMessagePreview}</p></li>"
        },
        {
          "name": "MessagingArea",
          "is_standalone": true,
          "description": "standalone component that displays the conversation history and an input field",
          "html": "<div class=\"h-full flex flex-col\">  <div class=\"flex-1 overflow-y-auto\">    {messages.map(message => (      <MessageBubble key={message.id} />    ))}  </div>  <TextInput /></div>"
        },
        {
          "name": "MessageBubble",
          "is_standalone": true,
          "description": "standalone component that displays a single message",
          "html": "<div class=\"flex items-start mb-2\">  <p class=\"text-sm\">{messageText}</p>  <span class=\"text-xs text-gray-600\">{timestamp}</span></div>"
        },
        {
          "name": "TextInput",
          "is_standalone": true,
          "description": "standalone component that allows the user to input a new message",
          "html": "<input   type=\"text\"   class=\"w-full p-2 pl-10 text-sm\"   placeholder=\"Type a message...\"/>"
        }
      ]
    }
  ],
  "Faceted search results display": [
    {
      "description": "The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results. The search results should be displayed in a list with each item showing the title, description, and any other relevant information.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/4 xl:w-1/5 p-4\">\n      <FacetContainer />\n    </div>\n    <div class=\"w-full md:w-3/4 xl:w-4/5 p-4\">\n      <SearchResults>\n        <!-- search results will be rendered here -->\n      </SearchResults>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FacetContainer",
          "is_standalone": true,
          "description": "A standalone component that wraps the facets.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">  <h2 class=\"text-lg font-bold mb-4\">Filters</h2>  <!-- facets will be rendered here --></div>"
        },
        {
          "name": "Facet",
          "is_standalone": true,
          "description": "A standalone component that displays a single facet (e.g. \"Price\", \"Brand\", etc.).",
          "html": "<div class=\"mb-4\">  <h3 class=\"text-sm font-bold\">{facet_name}</h3>  <ul class=\"list-none mb-0\">    <!-- facet items will be rendered here -->  </ul></div>"
        },
        {
          "name": "FacetItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single item within a facet (e.g. \"$0-$50\", \"Nike\", etc.).",
          "html": "<li class=\"px-4 py-2 hover:bg-gray-100\">  <input type=\"checkbox\" id=\"{facet_item_id}\" />  <label for=\"{facet_item_id}\" class=\"ml-2\">{facet_item_name}</label></li>"
        },
        {
          "name": "SearchResult",
          "is_standalone": true,
          "description": "A standalone component that displays a single search result.",
          "html": "<div class=\"bg-white rounded shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{result_title}</h3>  <p class=\"text-sm\">{result_description}</p>  <!-- other result details can be added here --></div>"
        },
        {
          "name": "SearchResults",
          "is_standalone": false,
          "description": "A component that takes children and displays the list of search results.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display search results with facets ( filters ) on the side, and a list of search results below.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex flex-wrap -mx-4\">\n    <aside class=\"w-1/4 xl:w-1/5 px-4\">\n      <FacetFilters />\n    </aside>\n    <main class=\"w-3/4 xl:w-4/5 px-4\">\n      <SearchResults>\n        <SearchResult />\n        <!-- more SearchResult components here -->\n      </SearchResults>\n    </main>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FacetFilter",
          "is_standalone": true,
          "description": "standalone component that displays a single facet filter (e.g. \"Price\", \"Brand\", etc.)",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h5 class=\"text-lg\">{facet_name}</h5>  <ul>    <li><a href=\"#\" class=\"text-blue-600\">{facet_option}</a></li>    <!-- more facet options here -->  </ul></div>"
        },
        {
          "name": "FacetFilters",
          "is_standalone": true,
          "description": "standalone component that displays a list of facet filters",
          "html": "<div class=\"space-y-4\">  <FacetFilter />  <!-- more FacetFilter components here --></div>"
        },
        {
          "name": "SearchResult",
          "is_standalone": true,
          "description": "standalone component that displays a single search result",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg\">{result_title}</h2>  <p>{result_description}</p>  <p>{download_count} downloads</p></div>"
        },
        {
          "name": "SearchResults",
          "is_standalone": false,
          "description": "component that takes children (a list of `SearchResult` components) to display the search results",
          "html": "<div class=\"space-y-4\">  {children}</div>"
        },
        {
          "name": "FacetedSearch",
          "is_standalone": false,
          "description": "component that takes children (FacetFilters and SearchResults components) to display the faceted search results",
          "html": "<div class=\"container mx-auto p-4\">  <div class=\"flex flex-wrap -mx-4\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results by selecting specific options. The search results should be listed in a grid or list format, with each result displaying relevant information such as title, description, and metadata.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/4 xl:w-1/5 p-4\">\n      <Facetlist/>\n    </div>\n    <div class=\"w-full md:w-3/4 xl:w-4/5 p-4\">\n      <SearchResultList>\n        <SearchResult/>\n        <SearchResult/>\n        <!-- repeat for each search result -->\n      </SearchResultList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FacetFilter",
          "is_standalone": true,
          "description": "a standalone component that displays a single facet (e.g. categories, dates, etc.)",
          "html": "<div class=\"mb-4\">  <h3 class=\"text-lg font-bold\">{facet_name}</h3>  <ul class=\"list-none mb-0\">    <li class=\"mb-2\">      <input type=\"checkbox\" id=\"{facet_option_id}\" />      <label for=\"{facet_option_id}\">{facet_option_label}</label>    </li>    <!-- repeat for each facet option -->  </ul></div>"
        },
        {
          "name": "Facetlist",
          "is_standalone": true,
          "description": "a component that contains multiple `FacetFilter` components, standalone",
          "html": "<div class=\"space-y-4\">  <FacetFilter/>  <FacetFilter/>  <!-- repeat for each facet --></div>"
        },
        {
          "name": "SearchResult",
          "is_standalone": true,
          "description": "a standalone component that displays a single search result",
          "html": "<div class=\"p-4 border border-gray-200 rounded\">  <h2 class=\"text-lg font-bold\">{result_title}</h2>  <p class=\"text-gray-600\">{result_description}</p>  <p class=\"text-sm text-gray-500\">{result_metadata}</p></div>"
        },
        {
          "name": "SearchResultList",
          "is_standalone": false,
          "description": "a component that contains multiple `SearchResult` components, takes children",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
        },
        {
          "name": "FacetedSearchResults",
          "is_standalone": false,
          "description": "the top-level component that contains the faceted search results, takes children",
          "html": "<div class=\"container mx-auto p-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Trip Itinerary and Booking Summary": [
    {
      "description": "The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TripSummary />\n  <div class=\"mt-4\">\n    <h2 class=\"text-lg font-bold\">Itinerary</h2>\n    <ItinerarySection>\n      <ItineraryItem />\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n    <ItinerarySection>\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n  </div>\n  <BookingDetails />\n</div>\n",
      "components": [
        {
          "name": "TripSummary",
          "is_standalone": true,
          "description": "a standalone component that displays a brief summary of the trip.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">{trip_destination}</h2>  <p>Travel dates: {travel_dates}</p></div>"
        },
        {
          "name": "ItinerarySection",
          "is_standalone": false,
          "description": "a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).",
          "html": "<div class=\"mt-4\">  <h3 class=\"text-lg font-bold\">{section_title}</h3>  {children}</div>"
        },
        {
          "name": "ItineraryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h4 class=\"text-lg font-bold\">{item_title}</h4>  <p>{item_description}</p>  <p>Duration: {item_duration}</p></div>"
        },
        {
          "name": "BookingDetails",
          "is_standalone": true,
          "description": "a standalone component that displays the booking details, such as booking number and status.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Booking Details</h2>  <p>Booking number: {booking_number}</p>  <p>Status: {booking_status}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a trip itinerary and booking summary, showing the trip details, booking information, and a summary of the booking.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SectionCard>\n    <TripItinerarySummary/>\n  </SectionCard>\n  <SectionCard>\n    <BookingInfo/>\n  </SectionCard>\n  <SectionCard>\n    <BookingSummary/>\n  </SectionCard>\n</div>\n",
      "components": [
        {
          "name": "TripItinerarySummary",
          "is_standalone": true,
          "description": "standalone, displays trip details",
          "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Trip Itinerary</h2>  <p>Departure: {departure_date}</p>  <p>Destination: {destination}</p>  <p>Duration: {duration} days</p></div>"
        },
        {
          "name": "BookingInfo",
          "is_standalone": true,
          "description": "standalone, displays booking information",
          "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Booking Information</h2>  <p>Booking ID: {booking_id}</p>  <p>Booking Date: {booking_date}</p>  <p>Payment Method: {payment_method}</p></div>"
        },
        {
          "name": "BookingSummary",
          "is_standalone": true,
          "description": "standalone, displays a summary of the booking",
          "html": "<div className=\"px-4 py-2\">  <h2 className=\"text-lg font-bold mb-2\">Booking Summary</h2>  <p>Total Cost: ${total_cost}</p>  <p>Number of Travelers: {num_travelers}</p></div>"
        },
        {
          "name": "SectionCard",
          "is_standalone": false,
          "description": "takes children, a card layout for displaying information",
          "html": "<div className=\"bg-white shadow-md rounded px-4 py-2 mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TripSummary />\n  <div class=\"mt-4\">\n    <h2 class=\"text-lg font-bold\">Itinerary</h2>\n    <ItinerarySection>\n      <ItineraryItem />\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n    <ItinerarySection>\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n  </div>\n  <BookingDetails />\n</div>\n",
      "components": [
        {
          "name": "TripSummary",
          "is_standalone": true,
          "description": "a standalone component that displays a brief summary of the trip.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">{trip_destination}</h2>  <p>Travel dates: {travel_dates}</p></div>"
        },
        {
          "name": "ItinerarySection",
          "is_standalone": false,
          "description": "a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).",
          "html": "<div class=\"mt-4\">  <h3 class=\"text-lg font-bold\">{section_title}</h3>  {children}</div>"
        },
        {
          "name": "ItineraryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h4 class=\"text-lg font-bold\">{item_title}</h4>  <p>{item_description}</p>  <p>Duration: {item_duration}</p></div>"
        },
        {
          "name": "BookingDetails",
          "is_standalone": true,
          "description": "a standalone component that displays the booking details, such as booking number and status.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Booking Details</h2>  <p>Booking number: {booking_number}</p>  <p>Status: {booking_status}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TripSummary />\n  <div class=\"mt-4\">\n    <h2 class=\"text-lg font-bold\">Itinerary</h2>\n    <ItinerarySection>\n      <ItineraryItem />\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n    <ItinerarySection>\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n  </div>\n  <BookingDetails />\n</div>\n",
      "components": [
        {
          "name": "TripSummary",
          "is_standalone": true,
          "description": "a standalone component that displays a brief summary of the trip.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">{trip_destination}</h2>  <p>Travel dates: {travel_dates}</p></div>"
        },
        {
          "name": "ItinerarySection",
          "is_standalone": false,
          "description": "a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).",
          "html": "<div class=\"mt-4\">  <h3 class=\"text-lg font-bold\">{section_title}</h3>  {children}</div>"
        },
        {
          "name": "ItineraryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h4 class=\"text-lg font-bold\">{item_title}</h4>  <p>{item_description}</p>  <p>Duration: {item_duration}</p></div>"
        },
        {
          "name": "BookingDetails",
          "is_standalone": true,
          "description": "a standalone component that displays the booking details, such as booking number and status.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Booking Details</h2>  <p>Booking number: {booking_number}</p>  <p>Status: {booking_status}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a summary of a trip itinerary and booking details in a clear and organized manner. It should include essential trip information, such as destination, travel dates, accommodation, and transportation details. The UI should be easy to read and understand, with sufficient whitespace to avoid clutter.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TripSummary />\n  <div class=\"mt-4\">\n    <h2 class=\"text-lg font-bold\">Itinerary</h2>\n    <ItinerarySection>\n      <ItineraryItem />\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n    <ItinerarySection>\n      <ItineraryItem />\n      <!-- Add more ItineraryItem components as needed -->\n    </ItinerarySection>\n  </div>\n  <BookingDetails />\n</div>\n",
      "components": [
        {
          "name": "TripSummary",
          "is_standalone": true,
          "description": "a standalone component that displays a brief summary of the trip.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">{trip_destination}</h2>  <p>Travel dates: {travel_dates}</p></div>"
        },
        {
          "name": "ItinerarySection",
          "is_standalone": false,
          "description": "a component that takes children, which displays a section of the itinerary (e.g., accommodations, transportation, etc.).",
          "html": "<div class=\"mt-4\">  <h3 class=\"text-lg font-bold\">{section_title}</h3>  {children}</div>"
        },
        {
          "name": "ItineraryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single item in the itinerary (e.g., a flight, hotel stay, etc.).",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h4 class=\"text-lg font-bold\">{item_title}</h4>  <p>{item_description}</p>  <p>Duration: {item_duration}</p></div>"
        },
        {
          "name": "BookingDetails",
          "is_standalone": true,
          "description": "a standalone component that displays the booking details, such as booking number and status.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Booking Details</h2>  <p>Booking number: {booking_number}</p>  <p>Status: {booking_status}</p></div>"
        }
      ]
    }
  ],
  "Secure payment information input": [
    {
      "description": "The UI should be a secure payment information input section with input fields for card number, expiration date, security code, and a button to submit the payment information.",
      "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">\n  <PaymentInfoForm>\n    <CardNumberInput />\n    <ExpirationDateInput />\n    <SecurityCodeInput />\n    <SubmitButton />\n  </PaymentInfoForm>\n</div>\n",
      "components": [
        {
          "name": "CardNumberInput",
          "is_standalone": true,
          "description": "A standalone component for inputting the card number.",
          "html": "<div className=\"mb-4\">  <label htmlFor=\"card-number\" className=\"block mb-2\">Card Number</label>  <input type=\"text\" id=\"card-number\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
        },
        {
          "name": "ExpirationDateInput",
          "is_standalone": true,
          "description": "A standalone component for inputting the expiration date.",
          "html": "<div className=\"mb-4\">  <label htmlFor=\"expiration-date\" className=\"block mb-2\">Expiration Date</label>  <input type=\"text\" id=\"expiration-date\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
        },
        {
          "name": "SecurityCodeInput",
          "is_standalone": true,
          "description": "A standalone component for inputting the security code.",
          "html": "<div className=\"mb-4\">  <label htmlFor=\"security-code\" className=\"block mb-2\">Security Code</label>  <input type=\"text\" id=\"security-code\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" /></div>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "A standalone component for submitting the payment information.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Submit</button>"
        },
        {
          "name": "PaymentInfoForm",
          "is_standalone": false,
          "description": "A component that takes children to wrap all the input fields and the submit button.",
          "html": "<form>  {children}</form>"
        }
      ]
    },
    {
      "description": "The UI should be a secure payment information input form, responsive and accessible, with clear labels and placeholders, and enough space for the user to input their payment details.",
      "html": "<form class=\"max-w-md mx-auto p-4 mt-4 mb-4 bg-white rounded shadow-md\">\n  <h2 class=\"text-xl font-bold mb-4\">Secure Payment Information</h2>\n  <PaymentForm>\n    <CardNumberInput />\n    <ExpirationDateInput />\n    <CvcInput />\n  </PaymentForm>\n  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Submit</button>\n</form>\n",
      "components": [
        {
          "name": "CardNumberInput",
          "is_standalone": true,
          "description": "(standalone): a text input for the card number",
          "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"cardNumber\"   placeholder=\"Card Number\"   required/>"
        },
        {
          "name": "ExpirationDateInput",
          "is_standalone": true,
          "description": "(standalone): a text input for the expiration date",
          "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"expirationDate\"   placeholder=\"MM/YY\"   required/>"
        },
        {
          "name": "CvcInput",
          "is_standalone": true,
          "description": "(standalone): a text input for the CVC code",
          "html": "<input   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   type=\"text\"   id=\"cvc\"   placeholder=\"CVC\"   required/>"
        },
        {
          "name": "PaymentForm",
          "is_standalone": false,
          "description": "(takes children): a container for the payment input fields",
          "html": "<div class=\"flex flex-wrap -mx-3 mb-6\">  {children}</div>"
        }
      ]
    }
  ],
  "Bidding/Auction Functions": [
    {
      "description": "The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionItemCard/>\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <AuctionDetails/>\n    <CurrentBid/>\n  </div>\n  <BiddingForm>\n    <BidInput/>\n    <PlaceBidButton/>\n  </BiddingForm>\n</div>\n",
      "components": [
        {
          "name": "AuctionItemCard",
          "is_standalone": true,
          "description": "(standalone): displays the auction item with its details",
          "html": "<div class=\"bg-white border border-gray-200 rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{item_name}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
        },
        {
          "name": "AuctionDetails",
          "is_standalone": true,
          "description": "(standalone): displays the auction item details",
          "html": "<div class=\"text-gray-600\">  <p>Ends: {auction_end_date}</p>  <p>Category: {category}</p></div>"
        },
        {
          "name": "CurrentBid",
          "is_standalone": true,
          "description": "(standalone): displays the current bid",
          "html": "<div class=\"text-lg font-bold\">{current_bid_amount} {currency}</div>"
        },
        {
          "name": "BiddingForm",
          "is_standalone": false,
          "description": "(takes children): allows users to place a bid",
          "html": "<form class=\"flex flex-wrap\">  {children}</form>"
        },
        {
          "name": "BidInput",
          "is_standalone": true,
          "description": "(standalone): a input field for the bid amount",
          "html": "<input type=\"number\" class=\"w-full p-2 border border-gray-200\" value={bid_amount} />"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "(standalone): a button to submit the bid",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        }
      ]
    },
    {
      "description": "The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionItemCard/>\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <AuctionDetails/>\n    <CurrentBid/>\n  </div>\n  <BiddingForm>\n    <BidInput/>\n    <PlaceBidButton/>\n  </BiddingForm>\n</div>\n",
      "components": [
        {
          "name": "AuctionItemCard",
          "is_standalone": true,
          "description": "(standalone): displays the auction item with its details",
          "html": "<div class=\"bg-white border border-gray-200 rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{item_name}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
        },
        {
          "name": "AuctionDetails",
          "is_standalone": true,
          "description": "(standalone): displays the auction item details",
          "html": "<div class=\"text-gray-600\">  <p>Ends: {auction_end_date}</p>  <p>Category: {category}</p></div>"
        },
        {
          "name": "CurrentBid",
          "is_standalone": true,
          "description": "(standalone): displays the current bid",
          "html": "<div class=\"text-lg font-bold\">{current_bid_amount} {currency}</div>"
        },
        {
          "name": "BiddingForm",
          "is_standalone": false,
          "description": "(takes children): allows users to place a bid",
          "html": "<form class=\"flex flex-wrap\">  {children}</form>"
        },
        {
          "name": "BidInput",
          "is_standalone": true,
          "description": "(standalone): a input field for the bid amount",
          "html": "<input type=\"number\" class=\"w-full p-2 border border-gray-200\" value={bid_amount} />"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "(standalone): a button to submit the bid",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        }
      ]
    },
    {
      "description": "The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionItemCard/>\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <AuctionDetails/>\n    <CurrentBid/>\n  </div>\n  <BiddingForm>\n    <BidInput/>\n    <PlaceBidButton/>\n  </BiddingForm>\n</div>\n",
      "components": [
        {
          "name": "AuctionItemCard",
          "is_standalone": true,
          "description": "(standalone): displays the auction item with its details",
          "html": "<div class=\"bg-white border border-gray-200 rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{item_name}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
        },
        {
          "name": "AuctionDetails",
          "is_standalone": true,
          "description": "(standalone): displays the auction item details",
          "html": "<div class=\"text-gray-600\">  <p>Ends: {auction_end_date}</p>  <p>Category: {category}</p></div>"
        },
        {
          "name": "CurrentBid",
          "is_standalone": true,
          "description": "(standalone): displays the current bid",
          "html": "<div class=\"text-lg font-bold\">{current_bid_amount} {currency}</div>"
        },
        {
          "name": "BiddingForm",
          "is_standalone": false,
          "description": "(takes children): allows users to place a bid",
          "html": "<form class=\"flex flex-wrap\">  {children}</form>"
        },
        {
          "name": "BidInput",
          "is_standalone": true,
          "description": "(standalone): a input field for the bid amount",
          "html": "<input type=\"number\" class=\"w-full p-2 border border-gray-200\" value={bid_amount} />"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "(standalone): a button to submit the bid",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        }
      ]
    },
    {
      "description": "The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionItemCard/>\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <AuctionDetails/>\n    <CurrentBid/>\n  </div>\n  <BiddingForm>\n    <BidInput/>\n    <PlaceBidButton/>\n  </BiddingForm>\n</div>\n",
      "components": [
        {
          "name": "AuctionItemCard",
          "is_standalone": true,
          "description": "(standalone): displays the auction item with its details",
          "html": "<div class=\"bg-white border border-gray-200 rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{item_name}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
        },
        {
          "name": "AuctionDetails",
          "is_standalone": true,
          "description": "(standalone): displays the auction item details",
          "html": "<div class=\"text-gray-600\">  <p>Ends: {auction_end_date}</p>  <p>Category: {category}</p></div>"
        },
        {
          "name": "CurrentBid",
          "is_standalone": true,
          "description": "(standalone): displays the current bid",
          "html": "<div class=\"text-lg font-bold\">{current_bid_amount} {currency}</div>"
        },
        {
          "name": "BiddingForm",
          "is_standalone": false,
          "description": "(takes children): allows users to place a bid",
          "html": "<form class=\"flex flex-wrap\">  {children}</form>"
        },
        {
          "name": "BidInput",
          "is_standalone": true,
          "description": "(standalone): a input field for the bid amount",
          "html": "<input type=\"number\" class=\"w-full p-2 border border-gray-200\" value={bid_amount} />"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "(standalone): a button to submit the bid",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        }
      ]
    },
    {
      "description": "The UI should display an auction item with its details, current bid, and a bidding form. The design should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionItemCard/>\n  <div class=\"flex flex-wrap justify-between mb-4\">\n    <AuctionDetails/>\n    <CurrentBid/>\n  </div>\n  <BiddingForm>\n    <BidInput/>\n    <PlaceBidButton/>\n  </BiddingForm>\n</div>\n",
      "components": [
        {
          "name": "AuctionItemCard",
          "is_standalone": true,
          "description": "(standalone): displays the auction item with its details",
          "html": "<div class=\"bg-white border border-gray-200 rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{item_name}</h2>  <p class=\"text-gray-600\">{item_description}</p></div>"
        },
        {
          "name": "AuctionDetails",
          "is_standalone": true,
          "description": "(standalone): displays the auction item details",
          "html": "<div class=\"text-gray-600\">  <p>Ends: {auction_end_date}</p>  <p>Category: {category}</p></div>"
        },
        {
          "name": "CurrentBid",
          "is_standalone": true,
          "description": "(standalone): displays the current bid",
          "html": "<div class=\"text-lg font-bold\">{current_bid_amount} {currency}</div>"
        },
        {
          "name": "BiddingForm",
          "is_standalone": false,
          "description": "(takes children): allows users to place a bid",
          "html": "<form class=\"flex flex-wrap\">  {children}</form>"
        },
        {
          "name": "BidInput",
          "is_standalone": true,
          "description": "(standalone): a input field for the bid amount",
          "html": "<input type=\"number\" class=\"w-full p-2 border border-gray-200\" value={bid_amount} />"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "(standalone): a button to submit the bid",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        }
      ]
    },
    {
      "description": "The UI should display a list of auctions, with each auction showing its title, current price, bidding information, and a \"Place Bid\" button. The bidding information should include the current highest bidder and the number of bids. The UI should be responsive, with a layout that adapts to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AuctionList>\n    <AuctionCard />\n    <AuctionCard />\n    <!-- Add more auction cards here -->\n  </AuctionList>\n</div>\n",
      "components": [
        {
          "name": "AuctionCard",
          "is_standalone": true,
          "description": "A standalone component representing a single auction.",
          "html": "<div class=\"bg-white shadow-md p-4 rounded\">  <h2 class=\"text-lg font-bold\">{auction_title}</h2>  <p class=\"text-gray-600\">{auction_description}</p>  <BidInfo />  <PlaceBidButton /></div>"
        },
        {
          "name": "BidInfo",
          "is_standalone": true,
          "description": "A standalone component displaying the current highest bidder and number of bids.",
          "html": "<p class=\"text-sm text-gray-600 mb-2\">  Current bid: {current_bid} by {highest_bidder_name} ({num_bids} bids)</p>"
        },
        {
          "name": "PlaceBidButton",
          "is_standalone": true,
          "description": "A standalone component for the \"Place Bid\" button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Place Bid</button>"
        },
        {
          "name": "AuctionList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of auctions.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Unobtrusive JavaScript": [
    {
      "description": "A simple webpage with a heading, a paragraph of text, and a button that changes the text when clicked.",
      "html": "<div class=\"h-screen flex flex-col justify-center items-center\">\n  <PageHeader/>\n  <PageContent>\n    <p id=\"text\">{initial_text}</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Click me!</button>\n  </PageContent>\n</div>\n",
      "components": [
        {
          "name": "PageHeader",
          "is_standalone": true,
          "description": "standalone",
          "html": "<header class=\"mb-4\">  <h1 class=\"text-3xl font-bold\">Unobtrusive JavaScript</h1></header>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"p-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Order summary and subtotal display": [
    {
      "description": "The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <OrderSummary />\n  <OrderSubtotal />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone, displays the order summary",
          "html": "<div class=\"text-lg\">{order_summary_text}</div>"
        },
        {
          "name": "OrderSubtotal",
          "is_standalone": true,
          "description": "standalone, displays the subtotal",
          "html": "<div class=\"text-lg font-bold\">Subtotal: {subtotal_amount}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a summary of the order, including the subtotal, in a clean and simple format.",
      "html": "<div class=\"p-4 bg-white rounded shadow-md\">\n  <OrderSummary />\n  <SubtotalDisplay />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone component that displays the order summary.",
          "html": "<p class=\"text-lg font-bold\">Order Summary:</p><ul>  <li class=\"py-2\">Items: {item_count}</li>  <li class=\"py-2\">Total weight: {total_weight} kg</li>  <li class=\"py-2\">Shipping: {shipping_method}</li></ul>"
        },
        {
          "name": "SubtotalDisplay",
          "is_standalone": true,
          "description": "standalone component that displays the subtotal.",
          "html": "<p class=\"text-lg font-bold\">Subtotal: <span class=\"text-orange-600\">{subtotal_amount}</span></p>"
        }
      ]
    },
    {
      "description": "The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <OrderSummary />\n  <OrderSubtotal />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone, displays the order summary",
          "html": "<div class=\"text-lg\">{order_summary_text}</div>"
        },
        {
          "name": "OrderSubtotal",
          "is_standalone": true,
          "description": "standalone, displays the subtotal",
          "html": "<div class=\"text-lg font-bold\">Subtotal: {subtotal_amount}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <OrderSummary />\n  <OrderSubtotal />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone, displays the order summary",
          "html": "<div class=\"text-lg\">{order_summary_text}</div>"
        },
        {
          "name": "OrderSubtotal",
          "is_standalone": true,
          "description": "standalone, displays the subtotal",
          "html": "<div class=\"text-lg font-bold\">Subtotal: {subtotal_amount}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <OrderSummary />\n  <OrderSubtotal />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone, displays the order summary",
          "html": "<div class=\"text-lg\">{order_summary_text}</div>"
        },
        {
          "name": "OrderSubtotal",
          "is_standalone": true,
          "description": "standalone, displays the subtotal",
          "html": "<div class=\"text-lg font-bold\">Subtotal: {subtotal_amount}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a compact display of the order summary and subtotal, with clear labels and values. It should be responsive and adaptable to small screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <OrderSummary />\n  <OrderSubtotal />\n</div>\n",
      "components": [
        {
          "name": "OrderSummary",
          "is_standalone": true,
          "description": "standalone, displays the order summary",
          "html": "<div class=\"text-lg\">{order_summary_text}</div>"
        },
        {
          "name": "OrderSubtotal",
          "is_standalone": true,
          "description": "standalone, displays the subtotal",
          "html": "<div class=\"text-lg font-bold\">Subtotal: {subtotal_amount}</div>"
        }
      ]
    },
    {
      "description": "The UI should display an order summary with a subtotal, taxes, and a total. The design should be responsive, with a mobile-first approach, and follow accessibility guidelines.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6\">\n  <h2 class=\"text-lg font-bold mb-2\">Order Summary</h2>\n  <OrderSummaryComponent />\n  <div class=\"flex justify-between mb-2\">\n    <SubtotalComponent />\n    <TaxComponent />\n  </div>\n  <TotalComponent />\n</section>\n",
      "components": [
        {
          "name": "OrderSummaryComponent",
          "is_standalone": true,
          "description": "(standalone) - displays the order summary",
          "html": "<ul class=\"list-none mb-4\">  <li class=\"flex justify-between mb-2\">{item_name} x {item_quantity}</li>  <!-- repeat for each item in the order --></ul>"
        },
        {
          "name": "SubtotalComponent",
          "is_standalone": true,
          "description": "(standalone) - displays the subtotal",
          "html": "<p>Subtotal: <span class=\"font-bold\">{subtotal_amount}</span></p>"
        },
        {
          "name": "TaxComponent",
          "is_standalone": true,
          "description": "(standalone) - displays the tax",
          "html": "<p>Tax ({tax_percentage}%): <span class=\"font-bold\">{tax_amount}</span></p>"
        },
        {
          "name": "TotalComponent",
          "is_standalone": true,
          "description": "(standalone) - displays the total",
          "html": "<p class=\"text-lg font-bold\">Total: <span class=\"text-lg font-bold\">{total_amount}</span></p>"
        }
      ]
    }
  ],
  "Search bar for finding products": [
    {
      "description": "The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text \"Search for products...\". The submit button should have a search icon and the text \"Search\".",
      "html": "<nav class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "a standalone component that contains the input field and submit button.",
          "html": "<div class=\"flex items-center\">  <input     type=\"text\"     placeholder=\"Search for products...\"     class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <SearchButton/></div>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that contains the search icon and text.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i>  Search</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with a text input field, a search button, and an optional dropdown list of suggestions. The search bar should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex justify-center pt-4\">\n  <SearchBar />\n  <div class=\"absolute z-10\">\n    <SearchSuggestions />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the search input field and button.",
          "html": "<div class=\"relative w-full lg:max-w-md\">  <input    type=\"search\"    class=\"w-full bg-white border border-gray-300 rounded-md pl-10 pr-3 py-2\"    placeholder=\"Search products...\"  />  <button class=\"absolute top-0 right-0 p-2\">    <i class=\"fas fa-search text-gray-600\" />  </button></div>"
        },
        {
          "name": "SearchSuggestions",
          "is_standalone": false,
          "description": "A component that takes children (i.e., a list of suggested products) and renders them in a dropdown list.",
          "html": "<ul class=\"bg-white border border-gray-300 rounded-b-md\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text \"Search for products...\". The submit button should have a search icon and the text \"Search\".",
      "html": "<nav class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "a standalone component that contains the input field and submit button.",
          "html": "<div class=\"flex items-center\">  <input     type=\"text\"     placeholder=\"Search for products...\"     class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <SearchButton/></div>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that contains the search icon and text.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i>  Search</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text \"Search for products...\". The submit button should have a search icon and the text \"Search\".",
      "html": "<nav class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "a standalone component that contains the input field and submit button.",
          "html": "<div class=\"flex items-center\">  <input     type=\"text\"     placeholder=\"Search for products...\"     class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <SearchButton/></div>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that contains the search icon and text.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i>  Search</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text \"Search for products...\". The submit button should have a search icon and the text \"Search\".",
      "html": "<nav class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "a standalone component that contains the input field and submit button.",
          "html": "<div class=\"flex items-center\">  <input     type=\"text\"     placeholder=\"Search for products...\"     class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <SearchButton/></div>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that contains the search icon and text.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i>  Search</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive, taking up the full width on mobile devices and a maximum width of 400px on desktop devices. The input field should have a placeholder text \"Search for products...\". The submit button should have a search icon and the text \"Search\".",
      "html": "<nav class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "a standalone component that contains the input field and submit button.",
          "html": "<div class=\"flex items-center\">  <input     type=\"text\"     placeholder=\"Search for products...\"     class=\"w-full p-2 pl-10 text-sm text-gray-700\" />  <SearchButton/></div>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that contains the search icon and text.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i>  Search</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the search input field and submit button.",
          "html": "<div class=\"flex items-center\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that is a simple input field.",
          "html": "<input type=\"search\" id=\"search-input\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search products\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that is a submit button.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Search</button>"
        }
      ]
    }
  ],
  "Case Study and Description Text": [
    {
      "description": "The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <CaseStudySection/>\n  <DescriptionText/>\n</section>\n",
      "components": [
        {
          "name": "CaseStudySection",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<h2 class=\"text-3xl font-bold\">{case_study_title}</h2>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<p class=\"text-lg leading-relaxed\">{children}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <CaseStudySection/>\n  <DescriptionText/>\n</section>\n",
      "components": [
        {
          "name": "CaseStudySection",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<h2 class=\"text-3xl font-bold\">{case_study_title}</h2>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<p class=\"text-lg leading-relaxed\">{children}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <CaseStudySection/>\n  <DescriptionText/>\n</section>\n",
      "components": [
        {
          "name": "CaseStudySection",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<h2 class=\"text-3xl font-bold\">{case_study_title}</h2>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<p class=\"text-lg leading-relaxed\">{children}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <CaseStudySection/>\n  <DescriptionText/>\n</section>\n",
      "components": [
        {
          "name": "CaseStudySection",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<h2 class=\"text-3xl font-bold\">{case_study_title}</h2>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<p class=\"text-lg leading-relaxed\">{children}</p>"
        }
      ]
    }
  ],
  "Skills section with icons and proficiency levels": [
    {
      "description": "A Skills section that displays a list of skills with their corresponding icons and proficiency levels.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <h2 class=\"text-2xl font-bold mb-4\">Skills</h2>\n  <ul class=\"list-none mb-0\">\n    <SkillCard />\n    <SkillCard />\n    <SkillCard />\n    <!-- Add more SkillCard components as needed -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "SkillCard",
          "is_standalone": true,
          "description": "Standalone component that displays a single skill with its icon and proficiency level.",
          "html": "<li class=\"flex items-center mb-4\">  <i class=\"mr-2 {icon_class}\" aria-hidden=\"true\"></i>  <span class=\"text-lg\">{skill_name}</span>  <span class=\"text-sm text-gray-600\">{proficiency_level}</span></li>"
        }
      ]
    }
  ],
  "Project/Task Management Tools": [
    {
      "description": "A responsive dashboard that displays a list of projects with their respective tasks. Each project should have a title, description, and a list of tasks. Tasks should have a title, description, and a completion status indicator.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Project Dashboard</h1>\n  <ul class=\"divide-y\">\n    <ProjectCard/>\n    <ProjectCard/>\n    <!-- Add more ProjectCard components as needed -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ProjectCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single project.",
          "html": "<div class=\"p-4 mb-4 bg-white rounded shadow\">  <h2 class=\"text-lg font-bold\">{project_title}</h2>  <p class=\"text-gray-600\">{project_description}</p>  <TaskList>    <TaskItem/>    <TaskItem/>    <!-- Add more TaskItem components as needed -->  </TaskList></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": false,
          "description": "A component that takes children (individual tasks) to display.",
          "html": "<ul class=\"pl-4\">  {children}</ul>"
        },
        {
          "name": "TaskItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single task.",
          "html": "<li class=\"py-2 border-b border-gray-200\">  <input type=\"checkbox\" class=\"mr-2\" {checked} />  <span class=\"text-gray-600\">{task_title}</span>  <p class=\"text-gray-400\">{task_description}</p></li>"
        }
      ]
    }
  ],
  "Resume download button with print option": [
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "A download button with an adjacent print option, styled with a modern and minimalistic design.",
      "html": "<div class=\"flex gap-2\">\n  <ResumeDownloadButton />\n  <PrintOption />\n</div>\n",
      "components": [
        {
          "name": "ResumeDownloadButton",
          "is_standalone": true,
          "description": "standalone component for the download button",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Download Resume ({file_size})</button>"
        },
        {
          "name": "PrintOption",
          "is_standalone": true,
          "description": "standalone component for the print option",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-gray-100 font-bold py-2 px-4 rounded\">  Print</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-friendly button that allows users to download a resume in various formats (e.g., PDF, Word, Text) and also provides an option to print the resume. The button should be accessible and SEO-friendly.",
      "html": "<div class=\"flex justify-center\">\n  <DownloadResumeButton />\n</div>\n",
      "components": [
        {
          "name": "DownloadResumeButton",
          "is_standalone": true,
          "description": "a standalone component that renders a button with a dropdown menu.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Download Resume  <span class=\"caret ml-2\"></span>  <DropdownMenu /></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, representing the dropdown menu with options to download the resume in different formats and print the resume.",
          "html": "<ul class=\"dropdown-menu absolute bg-white shadow-md py-2\">  {children}</ul>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that represents a single item in the dropdown menu.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{format_url}\" download=\"{filename}\">    {format_name}  </a>  <!-- or -->  <a href=\"#\" onclick=\"window.print()\">    Print Resume  </a></li>"
        }
      ]
    },
    {
      "description": "A button group with two buttons: one to download the resume and another to print the resume. The buttons should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ResumeActionButtons/>\n</div>\n",
      "components": [
        {
          "name": "ResumeActionButtons",
          "is_standalone": true,
          "description": "(standalone) - contains the download and print buttons",
          "html": "<div class=\"btn-group\">  <ActionButton>    <i class=\"fas fa-download mr-2\"></i>    Download Resume  </ActionButton>  <ActionButton>    <i class=\"fas fa-print mr-2\"></i>    Print Resume  </ActionButton></div>"
        },
        {
          "name": "ActionButton",
          "is_standalone": false,
          "description": "(takes children) - a single button with a label and optional icon",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {children}</button>"
        }
      ]
    }
  ],
  "User profile with karma, post history, and info": [
    {
      "description": "The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard/>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Post History</h2>\n    <PostHistoryList/>\n  </div>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Info</h2>\n    <InfoSection/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile information, including their karma score and additional info.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h1 class=\"text-lg font-bold\">{username}</h1>  <p>Karma: {karma_score}</p>  <p>{bio}</p></div>"
        },
        {
          "name": "PostHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of the user's post history.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "PostHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single post's information, including the post title, date, and content.",
          "html": "<li class=\"py-4 border-b border-gray-200 last:border-0\">  <h3 class=\"text-lg\">{post_title}</h3>  <p class=\"text-sm\">{post_date}</p>  <p>{post_content}</p></li>"
        },
        {
          "name": "InfoSection",
          "is_standalone": false,
          "description": "A component that takes children, displaying additional information about the user.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">Info</h2>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard/>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Post History</h2>\n    <PostHistoryList/>\n  </div>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Info</h2>\n    <InfoSection/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile information, including their karma score and additional info.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h1 class=\"text-lg font-bold\">{username}</h1>  <p>Karma: {karma_score}</p>  <p>{bio}</p></div>"
        },
        {
          "name": "PostHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of the user's post history.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "PostHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single post's information, including the post title, date, and content.",
          "html": "<li class=\"py-4 border-b border-gray-200 last:border-0\">  <h3 class=\"text-lg\">{post_title}</h3>  <p class=\"text-sm\">{post_date}</p>  <p>{post_content}</p></li>"
        },
        {
          "name": "InfoSection",
          "is_standalone": false,
          "description": "A component that takes children, displaying additional information about the user.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">Info</h2>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard/>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Post History</h2>\n    <PostHistoryList/>\n  </div>\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Info</h2>\n    <InfoSection/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile information, including their karma score and additional info.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h1 class=\"text-lg font-bold\">{username}</h1>  <p>Karma: {karma_score}</p>  <p>{bio}</p></div>"
        },
        {
          "name": "PostHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of the user's post history.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "PostHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single post's information, including the post title, date, and content.",
          "html": "<li class=\"py-4 border-b border-gray-200 last:border-0\">  <h3 class=\"text-lg\">{post_title}</h3>  <p class=\"text-sm\">{post_date}</p>  <p>{post_content}</p></li>"
        },
        {
          "name": "InfoSection",
          "is_standalone": false,
          "description": "A component that takes children, displaying additional information about the user.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <h2 class=\"text-lg font-bold\">Info</h2>  {children}</div>"
        }
      ]
    }
  ],
  "Shader/Gradient backgrounds": [
    {
      "description": "The UI should have a gradient background that gradients from a dark blue to a light blue, giving it a sense of depth and visual interest.",
      "html": "<div class=\"h-screen w-full\">\n  <GradientBackgroundContainer>\n    <ContentContainer>\n      <!-- Your content here -->\n    </ContentContainer>\n  </GradientBackgroundContainer>\n</div>\n",
      "components": [
        {
          "name": "GradientBackgroundContainer",
          "is_standalone": true,
          "description": "(standalone) - The main container that holds the gradient background.",
          "html": "<div class=\"h-screen w-full bg-gradient-to-r from-blue-800 to-blue-300\"></div>"
        },
        {
          "name": "ContentContainer",
          "is_standalone": false,
          "description": "(takes children) - A container that holds the main content of the page.",
          "html": "<div class=\"max-w-md px-4 mx-auto pt-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a gradient background that gradients from a dark blue to a light blue, giving it a sense of depth and visual interest.",
      "html": "<div class=\"h-screen w-full\">\n  <GradientBackgroundContainer>\n    <ContentContainer>\n      <!-- Your content here -->\n    </ContentContainer>\n  </GradientBackgroundContainer>\n</div>\n",
      "components": [
        {
          "name": "GradientBackgroundContainer",
          "is_standalone": true,
          "description": "(standalone) - The main container that holds the gradient background.",
          "html": "<div class=\"h-screen w-full bg-gradient-to-r from-blue-800 to-blue-300\"></div>"
        },
        {
          "name": "ContentContainer",
          "is_standalone": false,
          "description": "(takes children) - A container that holds the main content of the page.",
          "html": "<div class=\"max-w-md px-4 mx-auto pt-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a gradient background that gradients from a dark blue to a light blue, giving it a sense of depth and visual interest.",
      "html": "<div class=\"h-screen w-full\">\n  <GradientBackgroundContainer>\n    <ContentContainer>\n      <!-- Your content here -->\n    </ContentContainer>\n  </GradientBackgroundContainer>\n</div>\n",
      "components": [
        {
          "name": "GradientBackgroundContainer",
          "is_standalone": true,
          "description": "(standalone) - The main container that holds the gradient background.",
          "html": "<div class=\"h-screen w-full bg-gradient-to-r from-blue-800 to-blue-300\"></div>"
        },
        {
          "name": "ContentContainer",
          "is_standalone": false,
          "description": "(takes children) - A container that holds the main content of the page.",
          "html": "<div class=\"max-w-md px-4 mx-auto pt-4\">{children}</div>"
        }
      ]
    }
  ],
  "Floating Action Buttons": [
    {
      "description": "A set of floating action buttons (FABs) that can be used to perform various actions. There should be a main FAB and several smaller FABs that can be toggled on and off.",
      "html": "<div class=\"fixed bottom-0 right-0 mb-4 mr-4\">\n  <FabContainer>\n    <MainFab/>\n    <MiniFab/>\n    <MiniFab/>\n    <MiniFab/>\n  </FabContainer>\n</div>\n",
      "components": [
        {
          "name": "MainFab",
          "is_standalone": true,
          "description": "Standalone component that represents the main FAB.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">  {main_fab_icon}</button>"
        },
        {
          "name": "MiniFab",
          "is_standalone": true,
          "description": "Standalone component that represents a smaller FAB.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full\">  {mini_fab_icon}</button>"
        },
        {
          "name": "FabContainer",
          "is_standalone": false,
          "description": "Component that takes children, used to wrap the FABs.",
          "html": "<div class=\"relative\">  {children}</div>"
        }
      ]
    }
  ],
  "Sales Pipeline: Visualize deal stages": [
    {
      "description": "The UI should be a responsive, horizontal pipeline visualization showing the different stages of a sales process. Each stage should be represented by a rectangular block with a label and a number indicating the number of deals in that stage. The blocks should be connected by lines to represent the flow of deals through the pipeline.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PipelineStage label=\"Prospecting\" dealCount={prospectingCount} />\n  <PipelineConnector />\n  <PipelineStage label=\"Qualification\" dealCount={qualificationCount} />\n  <PipelineConnector />\n  <PipelineStage label=\"Demo\" dealCount={demoCount} />\n  <PipelineConnector />\n  <PipelineStage label=\"Proposal\" dealCount={proposalCount} />\n  <PipelineConnector />\n  <PipelineStage label=\"Closed Won\" dealCount={closedWonCount} />\n</div>\n",
      "components": [
        {
          "name": "PipelineStage",
          "is_standalone": true,
          "description": "(standalone): A single stage in the sales pipeline, with a label and a count of deals.",
          "html": "<div className=\"bg-white shadow-md p-4 w-48 rounded\">  <p className=\"text-lg font-bold\">{label}</p>  <p className=\"text-sm\">{dealCount} deals</p></div>"
        },
        {
          "name": "PipelineConnector",
          "is_standalone": true,
          "description": "(standalone): A connector line between two stages in the pipeline.",
          "html": "<div className=\"h-px w-12 bg-gray-200\"></div>"
        }
      ]
    }
  ],
  "Loading spinner with animation and progress circle": [
    {
      "description": "The UI should be a responsive, mobile-first loading spinner with an animation and a progress circle. The progress circle should show the percentage of completion.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "a standalone component that displays the loading animation and progress circle.",
          "html": "<div class=\"relative w-12 h-12 mx-auto\">  <!-- animation -->  <div class=\"animate-spin h-12 w-12 border-4 border-gray-200 rounded-full border-t-transparent\"></div>  <!-- progress circle -->  <div class=\"absolute top-0 left-0 w-12 h-12 text-lg text-gray-600\">    <span>{progress}%</span>  </div></div>"
        }
      ]
    }
  ],
  "Social media links with icons and tooltips": [
    {
      "description": "The UI should display a row of social media links with their respective icons and tooltips when hovered.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SocialMediaLink />\n  <SocialMediaLink />\n  <SocialMediaLink />\n</div>\n",
      "components": [
        {
          "name": "SocialMediaLink",
          "is_standalone": true,
          "description": "A standalone component that represents a single social media link with an icon and tooltip.",
          "html": "<a href=\"{social_media_url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-gray-600 hover:text-gray-900 transition duration-300\">  <i class=\"{social_media_icon} w-6 h-6 text-2xl transition duration-300\" />  <span class=\"sr-only\">{social_media_name}</span>  <span class=\"tooltip tooltip-simple\">{social_media_name}</span></a>"
        }
      ]
    }
  ],
  "Video sharing buttons for social media": [
    {
      "description": "The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SocialMediaButtonGroup>\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <!-- Add more buttons as needed -->\n  </SocialMediaButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaButton",
          "is_standalone": true,
          "description": "(standalone): A single button for a specific social media platform.",
          "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded\">  <img src=\"{icon_url}\" alt=\"{platform_name} icon\" class=\"w-4 h-4 mr-2\">  {platform_name}</a>"
        },
        {
          "name": "SocialMediaButtonGroup",
          "is_standalone": false,
          "description": "(takes children): A container that holds multiple `SocialMediaButton` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A horizontal row of social media buttons to share a video, with each button displaying the logo of the respective platform (e.g. Facebook, Twitter, LinkedIn, etc.).",
      "html": "<div class=\"flex justify-center mb-4\">\n  <VideoShareButtons>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n  </VideoShareButtons>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaButton",
          "is_standalone": true,
          "description": "(standalone) - a single button for a specific social media platform",
          "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\">  <img src=\"{platform_logo_url}\" alt=\"{platform_name} logo\" class=\"w-8 h-8 rounded-full hover:opacity-75\" /></a>"
        },
        {
          "name": "VideoShareButtons",
          "is_standalone": false,
          "description": "(takes children) - a container for the social media buttons",
          "html": "<div class=\"flex space-x-2\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SocialMediaButtonGroup>\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <!-- Add more buttons as needed -->\n  </SocialMediaButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaButton",
          "is_standalone": true,
          "description": "(standalone): A single button for a specific social media platform.",
          "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded\">  <img src=\"{icon_url}\" alt=\"{platform_name} icon\" class=\"w-4 h-4 mr-2\">  {platform_name}</a>"
        },
        {
          "name": "SocialMediaButtonGroup",
          "is_standalone": false,
          "description": "(takes children): A container that holds multiple `SocialMediaButton` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SocialMediaButtonGroup>\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <SocialMediaButton />\n    <!-- Add more buttons as needed -->\n  </SocialMediaButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaButton",
          "is_standalone": true,
          "description": "(standalone): A single button for a specific social media platform.",
          "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded\">  <img src=\"{icon_url}\" alt=\"{platform_name} icon\" class=\"w-4 h-4 mr-2\">  {platform_name}</a>"
        },
        {
          "name": "SocialMediaButtonGroup",
          "is_standalone": false,
          "description": "(takes children): A container that holds multiple `SocialMediaButton` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a horizontal row of social media sharing buttons for a video, with each button representing a different platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive and adaptable to different screen sizes.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <SocialMediaShareBar>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <SocialMediaButton/>\n    <!-- add more social media buttons here -->\n  </SocialMediaShareBar>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaButton",
          "is_standalone": true,
          "description": "a standalone component representing a single social media platform's sharing button.",
          "html": "<a href=\"{share_url}\" target=\"_blank\" rel=\"noopener noreferrer\">  <img src=\"{icon_url}\" alt=\"{platform_name}\" class=\"w-8 h-8 mr-2\">  <span class=\"text-sm\">{platform_name}</span></a>"
        },
        {
          "name": "SocialMediaShareBar",
          "is_standalone": false,
          "description": "a component that takes children, which is the container for all social media buttons.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Responsive Filtering and Sorting": [
    {
      "description": "A responsive filtering and sorting UI that adapts to different screen sizes, with a search bar, a filtering section, a sorting section, and a list of items.",
      "html": "<div className=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <SearchBar />\n  <div className=\"flex flex-wrap -mx-4\">\n    <FilterSection>\n      <FilterOption/>\n      <FilterOption/>\n    </FilterSection>\n    <SortingSection>\n      <SortingOption/>\n      <SortingOption/>\n    </SortingSection>\n  </div>\n  <ItemList>\n    <Item/>\n    <Item/>\n  </ItemList>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a search bar component",
          "html": "<input type=\"search\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterSection",
          "is_standalone": false,
          "description": "(takes children) - a filtering section component that takes filter options as children",
          "html": "<div className=\"w-full lg:w-1/2 xl:w-1/3 p-4 lg:pr-6\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - a single filter option component",
          "html": "<label className=\"block text-gray-600\">  <input type=\"checkbox\" className=\"mr-2\" />  {filter_name}</label>"
        },
        {
          "name": "SortingSection",
          "is_standalone": false,
          "description": "(takes children) - a sorting section component that takes sorting options as children",
          "html": "<div className=\"w-full lg:w-1/2 xl:w-1/3 p-4 lg:pl-6\">  {children}</div>"
        },
        {
          "name": "SortingOption",
          "is_standalone": true,
          "description": "(standalone) - a single sorting option component",
          "html": "<button className=\"bg-white hover:bg-gray-100 text-gray-600 py-2 px-4 border border-gray-300 rounded\">  {sorting_option_name}</button>"
        },
        {
          "name": "ItemList",
          "is_standalone": false,
          "description": "(takes children) - a list of items component that takes individual items as children",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "Item",
          "is_standalone": true,
          "description": "(standalone) - a single item component",
          "html": "<li className=\"py-4 px-4 border-b border-gray-200\">  <h2 className=\"text-lg\">{item_name}</h2>  <p>{item_description}</p></li>"
        }
      ]
    }
  ],
  "Video upload tool with encoding options": [
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    },
    {
      "description": "The UI should be a video upload tool with encoding options. It should have a file input field, a dropdown menu for selecting the encoding preset, a checkbox for enabling watermarks, and a submit button. The UI should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <VideoUploadForm>\n    <UploadInput />\n    <EncodingPresetSelect />\n    <WatermarkCheckbox />\n    <SubmitButton />\n  </VideoUploadForm>\n</div>\n",
      "components": [
        {
          "name": "UploadInput",
          "is_standalone": true,
          "description": "A standalone component for the file input field.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-upload\" class=\"block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\">  <label for=\"video-upload\" class=\"sr-only\">Select a video file</label></div>"
        },
        {
          "name": "EncodingPresetSelect",
          "is_standalone": true,
          "description": "A standalone component for the dropdown menu for selecting the encoding preset.",
          "html": "<div class=\"mb-4\">  <select id=\"encoding-preset\" class=\"block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\">    <option value=\"\">{select_preset}</option>    <!-- more options will be generated dynamically -->  </select>  <label for=\"encoding-preset\" class=\"sr-only\">Select an encoding preset</label></div>"
        },
        {
          "name": "WatermarkCheckbox",
          "is_standalone": true,
          "description": "A standalone component for the checkbox for enabling watermarks.",
          "html": "<div class=\"mb-4\">  <input type=\"checkbox\" id=\"watermark\" class=\"w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:ring-blue-500\">  <label for=\"watermark\" class=\"ml-2 text-sm text-gray-600\">Enable watermark</label></div>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "A standalone component for the submit button.",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Upload Video</button>"
        },
        {
          "name": "VideoUploadForm",
          "is_standalone": false,
          "description": "A component that takes children, which is the parent component that wraps all the other components.",
          "html": "<!-- this component will wrap all the other components --><div class=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first interface that allows users to upload a video file and select encoding options. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 pb-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Video Upload Tool</h1>\n  <VideoUploader />\n  <EncodingOptions>\n    <!-- Encoding options will be inserted here -->\n  </EncodingOptions>\n  <SubmitButton />\n</div>\n",
      "components": [
        {
          "name": "VideoUploader",
          "is_standalone": true,
          "description": "Standalone component that provides a file input field for uploading a video file.",
          "html": "<div class=\"mb-4\">  <input type=\"file\" id=\"video-file\" class=\"block w-full text-xl text-gray-800 file:mr-4 file:py-2 file:px-4 file:text-sm file:rounded file:border-0 file:bg-orange-200 file:text-orange-600 hover:file:bg-orange-300\" />  <label for=\"video-file\" class=\"cursor-pointer\">Select a video file</label></div>"
        },
        {
          "name": "EncodingOptions",
          "is_standalone": false,
          "description": "Component that takes children, representing a list of encoding options that can be selected.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "EncodingOption",
          "is_standalone": true,
          "description": "Standalone component that represents a single encoding option.",
          "html": "<li class=\"mb-2\">  <input type=\"radio\" id={encoding_option_id} name=\"encoding-options\" class=\"mr-2\" />  <label for={encoding_option_id}>{encoding_option_name}</label></li>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that triggers the video upload process.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Upload Video</button>"
        }
      ]
    }
  ],
  "Rich media embed with video playback and playback controls": [
    {
      "description": "The UI should be a rich media embed with a video player that has playback controls, including play/pause, volume control, and a progress bar. The video player should be responsive and adaptable to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <RichMediaEmbed/>\n</div>\n",
      "components": [
        {
          "name": "RichMediaEmbed",
          "is_standalone": true,
          "description": "standalone component that contains the video player and playback controls.",
          "html": "<div class=\"flex flex-col h-full\">  <VideoPlayer/></div>"
        },
        {
          "name": "VideoPlayer",
          "is_standalone": true,
          "description": "standalone component that contains the video element and playback controls.",
          "html": "<div class=\"flex-grow\">  <video src=\"{videoSrc}\" class=\"w-full h-full object-cover\"></video>  <PlaybackControls/></div>"
        },
        {
          "name": "PlaybackControls",
          "is_standalone": true,
          "description": "standalone component that contains the play/pause button, volume control, and progress bar.",
          "html": "<div class=\"flex justify-between py-2\">  <button class=\"text-gray-500 hover:text-gray-700\" aria-label=\"Play/Pause\">    {playPauseButtonIcon}  </button>  <ProgressBar/>  <VolumeControl/></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "standalone component that displays the video progress.",
          "html": "<div class=\"flex-grow w-full h-2 bg-gray-200 rounded\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${progressPercentage}%` }}></div></div>"
        },
        {
          "name": "VolumeControl",
          "is_standalone": true,
          "description": "standalone component that allows the user to adjust the volume.",
          "html": "<div class=\"flex items-center\">  <button class=\"text-gray-500 hover:text-gray-700\" aria-label=\"Mute/Unmute\">    {muteButtonIcon}  </button>  <div class=\"h-2 w-16 bg-gray-200 rounded\">    <div class=\"bg-orange-500 h-2\" style={{ width: `${volumePercentage}%` }}></div>  </div></div>"
        }
      ]
    }
  ],
  "Custom Field Builder: Create tailored data fields": [
    {
      "description": "The UI should be a responsive, mobile-first, and accessible interface for building custom data fields. It should consist of a header, a field-type selection section, and a field configuration section. The header should display the title \"Custom Field Builder\" and have an optional \"Save\" button. The field-type selection section should display a list of available field types (e.g., text, number, date, etc.). The field configuration section should display fields depending on the selected field type.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <HeaderComponent/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <FieldTypeSelectorComponent/>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-2/3 p-4\">\n      <FieldConfiguratorComponent>\n        <!-- field configuration fields will be rendered here -->\n      </FieldConfiguratorComponent>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "HeaderComponent",
          "is_standalone": true,
          "description": "(standalone): Displays the title and optional save button.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-lg font-bold\">Custom Field Builder</h1>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Save</button></header>"
        },
        {
          "name": "FieldTypeSelectorComponent",
          "is_standalone": true,
          "description": "(standalone): Displays a list of available field types.",
          "html": "<ul class=\"list-none mb-4\">  <li><input type=\"radio\" id=\"text-field\" name=\"field-type\" value=\"text\"/><label for=\"text-field\">Text</label></li>  <li><input type=\"radio\" id=\"number-field\" name=\"field-type\" value=\"number\"/><label for=\"number-field\">Number</label></li>  <li><input type=\"radio\" id=\"date-field\" name=\"field-type\" value=\"date\"/><label for=\"date-field\">Date</label></li>  <!-- more field types will be rendered here --></ul>"
        },
        {
          "name": "FieldConfiguratorComponent",
          "is_standalone": false,
          "description": "(takes children): Displays fields depending on the selected field type.",
          "html": "<!-- field configuration fields will be rendered here based on the selected field type -->{children}"
        }
      ]
    }
  ],
  "Search bar for finding specific content": [
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a search button. The search bar should be responsive, taking up the full width of the screen on mobile devices and adding some margins on larger screens. The input field should have a placeholder text and the search button should have an icon of a magnifying glass.",
      "html": "<nav class=\"flex justify-center md:w-3/4 md:mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field and search button.",
          "html": "<div class=\"flex items-center bg-white border border-gray-200 rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that is the input field.",
          "html": "<input type=\"search\" class=\"w-full px-4 py-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" placeholder=\"Search...\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that is the search button.",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field, a placeholder text, and a search button. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<nav class=\"flex justify-center md:w-1/2 lg:w-1/3 mx-auto\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and the search button.",
          "html": "<div class=\"flex items-center border border-gray-200 rounded-lg\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that represents the input field.",
          "html": "<input type=\"search\" placeholder=\"Search...\" class=\"w-full px-4 py-2 text-lg text-gray-700\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that represents the search button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    }
  ],
  "Post/Tweet Embeds": [
    {
      "description": "The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md p-4 mx-auto\">\n  <PostEmbed>\n    <PostHeader />\n    <PostContent />\n    <PostMetadata />\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "standalone component to display the author's name and profile picture.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={profile_picture_url} className=\"h-10 w-10 rounded-full mr-2\" alt={author_name} />  <span className=\"text-sm\">{author_name}</span></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "standalone component to display the post content.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": true,
          "description": "standalone component to display additional metadata such as the post date and EngagementButton.",
          "html": "<div className=\"flex justify-between mt-2\">  <span className=\"text-sm\">{post_date}</span>  <EngagementButton /></div>"
        },
        {
          "name": "EngagementButton",
          "is_standalone": true,
          "description": "standalone component to display the engagement options (e.g., like, retweet, reply).",
          "html": "<button className=\"text-sm text-blue-500 hover:text-blue-800\">  {engagement_text} <!-- e.g., \"Like\", \"Retweet\", \"Reply\" --></button>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "takes children to wrap the entire post embed.",
          "html": "<div className=\"bg-white shadow-md p-4 rounded-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A post/tweet embed component that displays a user's profile picture, username, tweet/post text, and any media (e.g. image, video) associated with the post.",
      "html": "<div class=\"flex bg-white p-4 border-b border-gray-200\">\n  <UserProfilePicture />\n  <div class=\"ml-4\">\n    <Username />\n    <PostText />\n    <PostMedia />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "standalone component that displays a user's profile picture.",
          "html": "<img src={profile_picture_url} class=\"rounded-full h-10 w-10\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "standalone component that displays a user's username.",
          "html": "<p class=\"font-bold\">{username}</p>"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "standalone component that displays the text of the post/tweet.",
          "html": "<p>{post_text}</p>"
        },
        {
          "name": "PostMedia",
          "is_standalone": true,
          "description": "standalone component that displays the media associated with the post (e.g. image, video).",
          "html": "<img src={media_url} class=\"max-w-full h-56\" />"
        }
      ]
    },
    {
      "description": "The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md p-4 mx-auto\">\n  <PostEmbed>\n    <PostHeader />\n    <PostContent />\n    <PostMetadata />\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "standalone component to display the author's name and profile picture.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={profile_picture_url} className=\"h-10 w-10 rounded-full mr-2\" alt={author_name} />  <span className=\"text-sm\">{author_name}</span></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "standalone component to display the post content.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": true,
          "description": "standalone component to display additional metadata such as the post date and EngagementButton.",
          "html": "<div className=\"flex justify-between mt-2\">  <span className=\"text-sm\">{post_date}</span>  <EngagementButton /></div>"
        },
        {
          "name": "EngagementButton",
          "is_standalone": true,
          "description": "standalone component to display the engagement options (e.g., like, retweet, reply).",
          "html": "<button className=\"text-sm text-blue-500 hover:text-blue-800\">  {engagement_text} <!-- e.g., \"Like\", \"Retweet\", \"Reply\" --></button>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "takes children to wrap the entire post embed.",
          "html": "<div className=\"bg-white shadow-md p-4 rounded-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md p-4 mx-auto\">\n  <PostEmbed>\n    <PostHeader />\n    <PostContent />\n    <PostMetadata />\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "standalone component to display the author's name and profile picture.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={profile_picture_url} className=\"h-10 w-10 rounded-full mr-2\" alt={author_name} />  <span className=\"text-sm\">{author_name}</span></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "standalone component to display the post content.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": true,
          "description": "standalone component to display additional metadata such as the post date and EngagementButton.",
          "html": "<div className=\"flex justify-between mt-2\">  <span className=\"text-sm\">{post_date}</span>  <EngagementButton /></div>"
        },
        {
          "name": "EngagementButton",
          "is_standalone": true,
          "description": "standalone component to display the engagement options (e.g., like, retweet, reply).",
          "html": "<button className=\"text-sm text-blue-500 hover:text-blue-800\">  {engagement_text} <!-- e.g., \"Like\", \"Retweet\", \"Reply\" --></button>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "takes children to wrap the entire post embed.",
          "html": "<div className=\"bg-white shadow-md p-4 rounded-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md p-4 mx-auto\">\n  <PostEmbed>\n    <PostHeader />\n    <PostContent />\n    <PostMetadata />\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "standalone component to display the author's name and profile picture.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={profile_picture_url} className=\"h-10 w-10 rounded-full mr-2\" alt={author_name} />  <span className=\"text-sm\">{author_name}</span></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "standalone component to display the post content.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": true,
          "description": "standalone component to display additional metadata such as the post date and EngagementButton.",
          "html": "<div className=\"flex justify-between mt-2\">  <span className=\"text-sm\">{post_date}</span>  <EngagementButton /></div>"
        },
        {
          "name": "EngagementButton",
          "is_standalone": true,
          "description": "standalone component to display the engagement options (e.g., like, retweet, reply).",
          "html": "<button className=\"text-sm text-blue-500 hover:text-blue-800\">  {engagement_text} <!-- e.g., \"Like\", \"Retweet\", \"Reply\" --></button>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "takes children to wrap the entire post embed.",
          "html": "<div className=\"bg-white shadow-md p-4 rounded-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a post or tweet embed with the author's name, profile picture, post content, and other relevant details. It should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md p-4 mx-auto\">\n  <PostEmbed>\n    <PostHeader />\n    <PostContent />\n    <PostMetadata />\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "standalone component to display the author's name and profile picture.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={profile_picture_url} className=\"h-10 w-10 rounded-full mr-2\" alt={author_name} />  <span className=\"text-sm\">{author_name}</span></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "standalone component to display the post content.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": true,
          "description": "standalone component to display additional metadata such as the post date and EngagementButton.",
          "html": "<div className=\"flex justify-between mt-2\">  <span className=\"text-sm\">{post_date}</span>  <EngagementButton /></div>"
        },
        {
          "name": "EngagementButton",
          "is_standalone": true,
          "description": "standalone component to display the engagement options (e.g., like, retweet, reply).",
          "html": "<button className=\"text-sm text-blue-500 hover:text-blue-800\">  {engagement_text} <!-- e.g., \"Like\", \"Retweet\", \"Reply\" --></button>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "takes children to wrap the entire post embed.",
          "html": "<div className=\"bg-white shadow-md p-4 rounded-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a single post or tweet embed with a username, avatar, timestamp, and content. The embed should be responsive, displaying well on both desktop and mobile devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostEmbed>\n    <PostHeader/>\n    <PostMeta/>\n    <PostContent>\n      <!-- Post content goes here -->\n    </PostContent>\n  </PostEmbed>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the username and avatar.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={avatarUrl} alt={username} class=\"w-10 h-10 rounded-full mr-2\" />  <p class=\"font-bold\">{username}</p></div>"
        },
        {
          "name": "PostMeta",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp.",
          "html": "<p class=\"text-gray-500 text-sm\">{timestamp}</p>"
        },
        {
          "name": "PostContent",
          "is_standalone": false,
          "description": "Takes children, displaying the content of the post.",
          "html": "<div class=\"prose\">{children}</div>"
        },
        {
          "name": "PostEmbed",
          "is_standalone": false,
          "description": "Takes children, wrapping the entire post embed.",
          "html": "<div class=\" bg-white p-4 rounded shadow-md\">  {children}</div>"
        }
      ]
    }
  ],
  "Task Calendar: Schedule and assign tasks": [
    {
      "description": "The UI should display a calendar view with a list of tasks, allowing users to schedule and assign tasks to specific dates and team members. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <TaskList>\n      <!-- Task list items will be rendered here -->\n    </TaskList>\n    <TaskForm />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the current month and navigation buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2>{currentMonth}</h2>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Prev  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Next  </button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks.",
          "html": "<ul class=\"list-none mb-4\">  <!-- TaskCard components will be rendered here --></ul>"
        },
        {
          "name": "TaskCard",
          "is_standalone": false,
          "description": "Component that renders a single task, taking `{taskTitle}`, `{taskDescription}`, `{dueDate}`, `{assignedTo}`, and `{status}` as props. Can take children.",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h3>{taskTitle}</h3>  <p>{taskDescription}</p>  <p>Due: {dueDate}</p>  <p>Assigned to: {assignedTo}</p>  <p>Status: {status}</p>  {children}</li>"
        },
        {
          "name": "TaskForm",
          "is_standalone": true,
          "description": "Standalone component that allows users to create a new task.",
          "html": "<form class=\"p-4 mb-4\">  <label class=\"block\" for=\"taskTitle\">Task Title:</label>  <input class=\"w-full p-2\" type=\"text\" id=\"taskTitle\" />  <label class=\"block\" for=\"taskDescription\">Task Description:</label>  <textarea class=\"w-full p-2\" id=\"taskDescription\"></textarea>  <DatePicker />  <AssigneeSelect />  <TaskStatusSelect />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Create Task  </button></form>"
        },
        {
          "name": "DatePicker",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a date.",
          "html": "<input class=\"w-full p-2\" type=\"date\" />"
        },
        {
          "name": "AssigneeSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a team member to assign a task to.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a team member</option>  <!-- Options will be populated dynamically --></select>"
        },
        {
          "name": "TaskStatusSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a task status.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a status</option>  <!-- Options will be populated dynamically --></select>"
        }
      ]
    },
    {
      "description": "The UI should be a calendar-based task manager that allows users to schedule and assign tasks. It should display a calendar view with days of the week and dates, with task lists and assignment information displayed for each day.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CalendarHeader />\n  <div class=\"grid grid-cols-7 gap-4\">\n    {days.map((day, index) => (\n      <CalendarDay key={index}>\n        <TaskList>\n          {day.tasks.map((task) => (\n            <TaskItem key={task.id}>{task.name}</TaskItem>\n          ))}\n        </TaskList>\n      </CalendarDay>\n    ))}\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the days of the week and navigation buttons for the calendar.",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"btn btn-primary\">Previous Month</button>  <h2 class=\"text-lg font-bold\">{currentMonth}</h2>  <button class=\"btn btn-primary\">Next Month</button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": false,
          "description": "(takes children) - Displays a list of tasks for a specific day.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "TaskItem",
          "is_standalone": false,
          "description": "(takes children) - Displays a single task with its assignment information.",
          "html": "<li class=\"flex justify-between mb-2\">  <span class=\"text-sm\">{children}</span>  <span class=\"text-sm text-gray-600\">{assignee}</span></li>"
        },
        {
          "name": "CalendarDay",
          "is_standalone": false,
          "description": "(takes children) - Displays a single day of the calendar with its corresponding tasks.",
          "html": "<div class=\"bg-white p-4 shadow-md\">  <h3 class=\"text-lg font-bold\">{date}</h3>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a calendar view with a list of tasks, allowing users to schedule and assign tasks to specific dates and team members. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <TaskList>\n      <!-- Task list items will be rendered here -->\n    </TaskList>\n    <TaskForm />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the current month and navigation buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2>{currentMonth}</h2>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Prev  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Next  </button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks.",
          "html": "<ul class=\"list-none mb-4\">  <!-- TaskCard components will be rendered here --></ul>"
        },
        {
          "name": "TaskCard",
          "is_standalone": false,
          "description": "Component that renders a single task, taking `{taskTitle}`, `{taskDescription}`, `{dueDate}`, `{assignedTo}`, and `{status}` as props. Can take children.",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h3>{taskTitle}</h3>  <p>{taskDescription}</p>  <p>Due: {dueDate}</p>  <p>Assigned to: {assignedTo}</p>  <p>Status: {status}</p>  {children}</li>"
        },
        {
          "name": "TaskForm",
          "is_standalone": true,
          "description": "Standalone component that allows users to create a new task.",
          "html": "<form class=\"p-4 mb-4\">  <label class=\"block\" for=\"taskTitle\">Task Title:</label>  <input class=\"w-full p-2\" type=\"text\" id=\"taskTitle\" />  <label class=\"block\" for=\"taskDescription\">Task Description:</label>  <textarea class=\"w-full p-2\" id=\"taskDescription\"></textarea>  <DatePicker />  <AssigneeSelect />  <TaskStatusSelect />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Create Task  </button></form>"
        },
        {
          "name": "DatePicker",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a date.",
          "html": "<input class=\"w-full p-2\" type=\"date\" />"
        },
        {
          "name": "AssigneeSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a team member to assign a task to.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a team member</option>  <!-- Options will be populated dynamically --></select>"
        },
        {
          "name": "TaskStatusSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a task status.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a status</option>  <!-- Options will be populated dynamically --></select>"
        }
      ]
    },
    {
      "description": "The UI should display a calendar view with a list of tasks, allowing users to schedule and assign tasks to specific dates and team members. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <TaskList>\n      <!-- Task list items will be rendered here -->\n    </TaskList>\n    <TaskForm />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the current month and navigation buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2>{currentMonth}</h2>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Prev  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Next  </button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks.",
          "html": "<ul class=\"list-none mb-4\">  <!-- TaskCard components will be rendered here --></ul>"
        },
        {
          "name": "TaskCard",
          "is_standalone": false,
          "description": "Component that renders a single task, taking `{taskTitle}`, `{taskDescription}`, `{dueDate}`, `{assignedTo}`, and `{status}` as props. Can take children.",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h3>{taskTitle}</h3>  <p>{taskDescription}</p>  <p>Due: {dueDate}</p>  <p>Assigned to: {assignedTo}</p>  <p>Status: {status}</p>  {children}</li>"
        },
        {
          "name": "TaskForm",
          "is_standalone": true,
          "description": "Standalone component that allows users to create a new task.",
          "html": "<form class=\"p-4 mb-4\">  <label class=\"block\" for=\"taskTitle\">Task Title:</label>  <input class=\"w-full p-2\" type=\"text\" id=\"taskTitle\" />  <label class=\"block\" for=\"taskDescription\">Task Description:</label>  <textarea class=\"w-full p-2\" id=\"taskDescription\"></textarea>  <DatePicker />  <AssigneeSelect />  <TaskStatusSelect />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Create Task  </button></form>"
        },
        {
          "name": "DatePicker",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a date.",
          "html": "<input class=\"w-full p-2\" type=\"date\" />"
        },
        {
          "name": "AssigneeSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a team member to assign a task to.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a team member</option>  <!-- Options will be populated dynamically --></select>"
        },
        {
          "name": "TaskStatusSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a task status.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a status</option>  <!-- Options will be populated dynamically --></select>"
        }
      ]
    },
    {
      "description": "The UI should display a calendar view with a list of tasks, allowing users to schedule and assign tasks to specific dates and team members. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <TaskList>\n      <!-- Task list items will be rendered here -->\n    </TaskList>\n    <TaskForm />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the current month and navigation buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2>{currentMonth}</h2>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Prev  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Next  </button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks.",
          "html": "<ul class=\"list-none mb-4\">  <!-- TaskCard components will be rendered here --></ul>"
        },
        {
          "name": "TaskCard",
          "is_standalone": false,
          "description": "Component that renders a single task, taking `{taskTitle}`, `{taskDescription}`, `{dueDate}`, `{assignedTo}`, and `{status}` as props. Can take children.",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h3>{taskTitle}</h3>  <p>{taskDescription}</p>  <p>Due: {dueDate}</p>  <p>Assigned to: {assignedTo}</p>  <p>Status: {status}</p>  {children}</li>"
        },
        {
          "name": "TaskForm",
          "is_standalone": true,
          "description": "Standalone component that allows users to create a new task.",
          "html": "<form class=\"p-4 mb-4\">  <label class=\"block\" for=\"taskTitle\">Task Title:</label>  <input class=\"w-full p-2\" type=\"text\" id=\"taskTitle\" />  <label class=\"block\" for=\"taskDescription\">Task Description:</label>  <textarea class=\"w-full p-2\" id=\"taskDescription\"></textarea>  <DatePicker />  <AssigneeSelect />  <TaskStatusSelect />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Create Task  </button></form>"
        },
        {
          "name": "DatePicker",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a date.",
          "html": "<input class=\"w-full p-2\" type=\"date\" />"
        },
        {
          "name": "AssigneeSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a team member to assign a task to.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a team member</option>  <!-- Options will be populated dynamically --></select>"
        },
        {
          "name": "TaskStatusSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a task status.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a status</option>  <!-- Options will be populated dynamically --></select>"
        }
      ]
    },
    {
      "description": "The UI should display a calendar view with a list of tasks, allowing users to schedule and assign tasks to specific dates and team members. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div class=\"flex-grow overflow-y-auto p-4\">\n    <TaskList>\n      <!-- Task list items will be rendered here -->\n    </TaskList>\n    <TaskForm />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the current month and navigation buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2>{currentMonth}</h2>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Prev  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Next  </button></div>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks.",
          "html": "<ul class=\"list-none mb-4\">  <!-- TaskCard components will be rendered here --></ul>"
        },
        {
          "name": "TaskCard",
          "is_standalone": false,
          "description": "Component that renders a single task, taking `{taskTitle}`, `{taskDescription}`, `{dueDate}`, `{assignedTo}`, and `{status}` as props. Can take children.",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h3>{taskTitle}</h3>  <p>{taskDescription}</p>  <p>Due: {dueDate}</p>  <p>Assigned to: {assignedTo}</p>  <p>Status: {status}</p>  {children}</li>"
        },
        {
          "name": "TaskForm",
          "is_standalone": true,
          "description": "Standalone component that allows users to create a new task.",
          "html": "<form class=\"p-4 mb-4\">  <label class=\"block\" for=\"taskTitle\">Task Title:</label>  <input class=\"w-full p-2\" type=\"text\" id=\"taskTitle\" />  <label class=\"block\" for=\"taskDescription\">Task Description:</label>  <textarea class=\"w-full p-2\" id=\"taskDescription\"></textarea>  <DatePicker />  <AssigneeSelect />  <TaskStatusSelect />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Create Task  </button></form>"
        },
        {
          "name": "DatePicker",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a date.",
          "html": "<input class=\"w-full p-2\" type=\"date\" />"
        },
        {
          "name": "AssigneeSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a team member to assign a task to.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a team member</option>  <!-- Options will be populated dynamically --></select>"
        },
        {
          "name": "TaskStatusSelect",
          "is_standalone": true,
          "description": "Standalone component that allows users to select a task status.",
          "html": "<select class=\"w-full p-2\">  <option value=\"\">Select a status</option>  <!-- Options will be populated dynamically --></select>"
        }
      ]
    }
  ],
  "Tweet delete button for post removal": [
    {
      "description": "A small delete button with a trash can icon to remove a tweet from a post.",
      "html": "<button className=\"text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\">\n  <TweetDeleteButton/>\n</button>\n",
      "components": [
        {
          "name": "TweetDeleteButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span className=\"text-lg inline-block\">  <i className=\"fas fa-trash-alt\"></i></span>"
        }
      ]
    }
  ],
  "Thread Favorites and Watching": [
    {
      "description": "The UI should display a section for thread favorites and watching. It should have a header, a list of favorite threads, and a list of watched threads. The lists should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ThreadHeader/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Favorites</h2>\n      <ThreadList>\n        <!-- favorite threads will be rendered here -->\n      </ThreadList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Watching</h2>\n      <ThreadList>\n        <!-- watched threads will be rendered here -->\n      </ThreadList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ThreadHeader",
          "is_standalone": true,
          "description": "standalone component that displays the header of the thread favorites and watching section.",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">Thread Favorites and Watching</h1>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of threads (either favorites or watched).",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "ThreadItem",
          "is_standalone": true,
          "description": "standalone component that displays a single thread item.",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <a href=\"{thread_url}\" class=\"text-blue-600 hover:text-blue-900\">{thread_title}</a>  <p class=\"text-gray-600\">{thread_description}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Thread Favorites and Watching</h2>\n  <ThreadsList>\n    <ThreadCard />\n    <ThreadCard />\n    <!-- more ThreadCard components here -->\n  </ThreadsList>\n</div>\n",
      "components": [
        {
          "name": "ThreadCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single thread's information.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{thread_title}</h3>  <p className=\"text-gray-600\">{thread_description}</p>  <div className=\"flex justify-end\">    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_favorite ? 'Unfavorite' : 'Favorite'}    </button>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_watching ? 'Stop Watching' : 'Watch'}    </button>  </div></div>"
        },
        {
          "name": "ThreadsList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `ThreadCard` components.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a section for thread favorites and watching. It should have a header, a list of favorite threads, and a list of watched threads. The lists should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ThreadHeader/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Favorites</h2>\n      <ThreadList>\n        <!-- favorite threads will be rendered here -->\n      </ThreadList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Watching</h2>\n      <ThreadList>\n        <!-- watched threads will be rendered here -->\n      </ThreadList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ThreadHeader",
          "is_standalone": true,
          "description": "standalone component that displays the header of the thread favorites and watching section.",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">Thread Favorites and Watching</h1>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of threads (either favorites or watched).",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "ThreadItem",
          "is_standalone": true,
          "description": "standalone component that displays a single thread item.",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <a href=\"{thread_url}\" class=\"text-blue-600 hover:text-blue-900\">{thread_title}</a>  <p class=\"text-gray-600\">{thread_description}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Thread Favorites and Watching</h2>\n  <ThreadsList>\n    <ThreadCard />\n    <ThreadCard />\n    <!-- more ThreadCard components here -->\n  </ThreadsList>\n</div>\n",
      "components": [
        {
          "name": "ThreadCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single thread's information.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{thread_title}</h3>  <p className=\"text-gray-600\">{thread_description}</p>  <div className=\"flex justify-end\">    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_favorite ? 'Unfavorite' : 'Favorite'}    </button>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_watching ? 'Stop Watching' : 'Watch'}    </button>  </div></div>"
        },
        {
          "name": "ThreadsList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `ThreadCard` components.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a section for thread favorites and watching. It should have a header, a list of favorite threads, and a list of watched threads. The lists should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ThreadHeader/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Favorites</h2>\n      <ThreadList>\n        <!-- favorite threads will be rendered here -->\n      </ThreadList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Watching</h2>\n      <ThreadList>\n        <!-- watched threads will be rendered here -->\n      </ThreadList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ThreadHeader",
          "is_standalone": true,
          "description": "standalone component that displays the header of the thread favorites and watching section.",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">Thread Favorites and Watching</h1>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of threads (either favorites or watched).",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "ThreadItem",
          "is_standalone": true,
          "description": "standalone component that displays a single thread item.",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <a href=\"{thread_url}\" class=\"text-blue-600 hover:text-blue-900\">{thread_title}</a>  <p class=\"text-gray-600\">{thread_description}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Thread Favorites and Watching</h2>\n  <ThreadsList>\n    <ThreadCard />\n    <ThreadCard />\n    <!-- more ThreadCard components here -->\n  </ThreadsList>\n</div>\n",
      "components": [
        {
          "name": "ThreadCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single thread's information.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{thread_title}</h3>  <p className=\"text-gray-600\">{thread_description}</p>  <div className=\"flex justify-end\">    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_favorite ? 'Unfavorite' : 'Favorite'}    </button>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_watching ? 'Stop Watching' : 'Watch'}    </button>  </div></div>"
        },
        {
          "name": "ThreadsList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `ThreadCard` components.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a section for thread favorites and watching. It should have a header, a list of favorite threads, and a list of watched threads. The lists should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ThreadHeader/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Favorites</h2>\n      <ThreadList>\n        <!-- favorite threads will be rendered here -->\n      </ThreadList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Watching</h2>\n      <ThreadList>\n        <!-- watched threads will be rendered here -->\n      </ThreadList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ThreadHeader",
          "is_standalone": true,
          "description": "standalone component that displays the header of the thread favorites and watching section.",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">Thread Favorites and Watching</h1>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of threads (either favorites or watched).",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "ThreadItem",
          "is_standalone": true,
          "description": "standalone component that displays a single thread item.",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <a href=\"{thread_url}\" class=\"text-blue-600 hover:text-blue-900\">{thread_title}</a>  <p class=\"text-gray-600\">{thread_description}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a section for thread favorites and watching. It should have a header, a list of favorite threads, and a list of watched threads. The lists should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <ThreadHeader/>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Favorites</h2>\n      <ThreadList>\n        <!-- favorite threads will be rendered here -->\n      </ThreadList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <h2>Watching</h2>\n      <ThreadList>\n        <!-- watched threads will be rendered here -->\n      </ThreadList>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ThreadHeader",
          "is_standalone": true,
          "description": "standalone component that displays the header of the thread favorites and watching section.",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">Thread Favorites and Watching</h1>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of threads (either favorites or watched).",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "ThreadItem",
          "is_standalone": true,
          "description": "standalone component that displays a single thread item.",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <a href=\"{thread_url}\" class=\"text-blue-600 hover:text-blue-900\">{thread_title}</a>  <p class=\"text-gray-600\">{thread_description}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Thread Favorites and Watching</h2>\n  <ThreadsList>\n    <ThreadCard />\n    <ThreadCard />\n    <!-- more ThreadCard components here -->\n  </ThreadsList>\n</div>\n",
      "components": [
        {
          "name": "ThreadCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single thread's information.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{thread_title}</h3>  <p className=\"text-gray-600\">{thread_description}</p>  <div className=\"flex justify-end\">    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_favorite ? 'Unfavorite' : 'Favorite'}    </button>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">      {is_watching ? 'Stop Watching' : 'Watch'}    </button>  </div></div>"
        },
        {
          "name": "ThreadsList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `ThreadCard` components.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of threads that the user has favorited or is watching, with each thread showing its title, a brief description, and buttons to unfavorite or unwatch.",
      "html": "<div class=\"container mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Favorites and Watched Threads</h1>\n  <ThreadList>\n    <!-- thread cards will be inserted here -->\n  </ThreadList>\n</div>\n",
      "components": [
        {
          "name": "ThreadCard",
          "is_standalone": true,
          "description": "(standalone) - A single thread card with title, description, and buttons.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{thread_title}</h2>  <p class=\"text-gray-600\">{thread_description}</p>  <div class=\"flex justify-end\">    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Unfavorite</button>    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\">Unwatch</button>  </div></div>"
        },
        {
          "name": "ThreadList",
          "is_standalone": false,
          "description": "(takes children) - A container for the list of thread cards.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Tag Clouds/Folksonomy": [
    {
      "description": "The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Tag Cloud</h2>\n  <TagCloud>\n    <Tag/>\n    <Tag/>\n    ...\n  </TagCloud>\n</div>\n",
      "components": [
        {
          "name": "Tag",
          "is_standalone": true,
          "description": "(standalone): A single tag element that displays the tag text, with a size and color that represents its importance.",
          "html": "<a href=\"{tag_url}\" class=\"inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}\">{tag_text}</a>"
        },
        {
          "name": "TagCloud",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Tag Cloud</h2>\n  <TagCloud>\n    <Tag/>\n    <Tag/>\n    ...\n  </TagCloud>\n</div>\n",
      "components": [
        {
          "name": "Tag",
          "is_standalone": true,
          "description": "(standalone): A single tag element that displays the tag text, with a size and color that represents its importance.",
          "html": "<a href=\"{tag_url}\" class=\"inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}\">{tag_text}</a>"
        },
        {
          "name": "TagCloud",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Tag Cloud</h2>\n  <TagCloud>\n    <Tag/>\n    <Tag/>\n    ...\n  </TagCloud>\n</div>\n",
      "components": [
        {
          "name": "Tag",
          "is_standalone": true,
          "description": "(standalone): A single tag element that displays the tag text, with a size and color that represents its importance.",
          "html": "<a href=\"{tag_url}\" class=\"inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}\">{tag_text}</a>"
        },
        {
          "name": "TagCloud",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Video Players/Embeds": [
    {
      "description": "The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.",
      "html": "<div class=\"max-w-md mx-auto\">\n  <VideoPlayer/>\n  <VideoTitle/>\n  <VideoDescription/>\n</div>\n",
      "components": [
        {
          "name": "VideoPlayer",
          "is_standalone": true,
          "description": "A standalone component that wraps the video player/embed.",
          "html": "<div class=\"video-player aspect-w-16 aspect-h-9\">  <iframe src=\"{video_url}\" frameborder=\"0\" allowfullscreen></iframe></div>"
        },
        {
          "name": "VideoTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the video title.",
          "html": "<h2 class=\"text-lg font-bold\">{video_title}</h2>"
        },
        {
          "name": "VideoDescription",
          "is_standalone": true,
          "description": "A standalone component that displays the video description.",
          "html": "<p class=\"text-sm\">{video_description}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.",
      "html": "<div class=\"max-w-md mx-auto\">\n  <VideoPlayer/>\n  <VideoTitle/>\n  <VideoDescription/>\n</div>\n",
      "components": [
        {
          "name": "VideoPlayer",
          "is_standalone": true,
          "description": "A standalone component that wraps the video player/embed.",
          "html": "<div class=\"video-player aspect-w-16 aspect-h-9\">  <iframe src=\"{video_url}\" frameborder=\"0\" allowfullscreen></iframe></div>"
        },
        {
          "name": "VideoTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the video title.",
          "html": "<h2 class=\"text-lg font-bold\">{video_title}</h2>"
        },
        {
          "name": "VideoDescription",
          "is_standalone": true,
          "description": "A standalone component that displays the video description.",
          "html": "<p class=\"text-sm\">{video_description}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.",
      "html": "<div class=\"max-w-md mx-auto\">\n  <VideoPlayer/>\n  <VideoTitle/>\n  <VideoDescription/>\n</div>\n",
      "components": [
        {
          "name": "VideoPlayer",
          "is_standalone": true,
          "description": "A standalone component that wraps the video player/embed.",
          "html": "<div class=\"video-player aspect-w-16 aspect-h-9\">  <iframe src=\"{video_url}\" frameborder=\"0\" allowfullscreen></iframe></div>"
        },
        {
          "name": "VideoTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the video title.",
          "html": "<h2 class=\"text-lg font-bold\">{video_title}</h2>"
        },
        {
          "name": "VideoDescription",
          "is_standalone": true,
          "description": "A standalone component that displays the video description.",
          "html": "<p class=\"text-sm\">{video_description}</p>"
        }
      ]
    }
  ],
  "Single post with text, image, and comments": [
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.",
      "html": "<article className=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <PostHeader/>\n  <PostText/>\n  <PostImage/>\n  <CommentSection>\n    <!-- comment list will be rendered here -->\n  </CommentSection>\n</article>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the post title",
          "html": "<header className=\"mb-4\">  <h1 className=\"text-3xl font-bold\">{postTitle}</h1></header>"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "(standalone) - Displays the post text",
          "html": "<p className=\"text-lg\">{postText}</p>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "(standalone) - Displays the post image",
          "html": "<img src={imageUrl} alt={imageAlt} className=\"w-full mb-4\" />"
        },
        {
          "name": "CommentSection",
          "is_standalone": false,
          "description": "(takes children) - Displays a list of comments",
          "html": "<section className=\"mb-4\">  <h2 className=\"text-2xl font-bold\">Comments</h2>  <ul className=\"list-none mb-4\">    {children} <!-- comment list will be rendered here -->  </ul></section>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A single post displayed on a webpage. The post consists of a text description, an image, and a list of comments. The text description is displayed above the image, and the comments are listed below the image.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostHeader />\n  <PostImage />\n  <CommentList>\n    <Comment />\n    <!-- additional Comment components... -->\n  </CommentList>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "a standalone component that displays the post's text description.",
          "html": "<h2 class=\"text-lg font-bold\">{post_text}</h2>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that displays the post's image.",
          "html": "<img src={image_url} alt=\"Post image\" class=\"w-full mb-4\" />"
        },
        {
          "name": "CommentList",
          "is_standalone": false,
          "description": "a component that takes children (Comment components).",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "a standalone component that displays a single comment.",
          "html": "<li class=\"py-2 border-b border-gray-200\">  <p class=\"text-sm\">{comment_text}</p>  <p class=\"text-xs text-gray-500\">{comment_username}</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.",
      "html": "<article className=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <PostHeader/>\n  <PostText/>\n  <PostImage/>\n  <CommentSection>\n    <!-- comment list will be rendered here -->\n  </CommentSection>\n</article>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the post title",
          "html": "<header className=\"mb-4\">  <h1 className=\"text-3xl font-bold\">{postTitle}</h1></header>"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "(standalone) - Displays the post text",
          "html": "<p className=\"text-lg\">{postText}</p>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "(standalone) - Displays the post image",
          "html": "<img src={imageUrl} alt={imageAlt} className=\"w-full mb-4\" />"
        },
        {
          "name": "CommentSection",
          "is_standalone": false,
          "description": "(takes children) - Displays a list of comments",
          "html": "<section className=\"mb-4\">  <h2 className=\"text-2xl font-bold\">Comments</h2>  <ul className=\"list-none mb-4\">    {children} <!-- comment list will be rendered here -->  </ul></section>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A single post UI should display a header with a post title, a container for the post text, an image, and a section for comments. The UI should be responsive, with the image and comments section stacked on mobile and side-by-side on larger screens.",
      "html": "<article className=\"max-w-md mx-auto p-4 pt-6 mb-4\">\n  <PostHeader/>\n  <PostText/>\n  <PostImage/>\n  <CommentSection>\n    <!-- comment list will be rendered here -->\n  </CommentSection>\n</article>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the post title",
          "html": "<header className=\"mb-4\">  <h1 className=\"text-3xl font-bold\">{postTitle}</h1></header>"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "(standalone) - Displays the post text",
          "html": "<p className=\"text-lg\">{postText}</p>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "(standalone) - Displays the post image",
          "html": "<img src={imageUrl} alt={imageAlt} className=\"w-full mb-4\" />"
        },
        {
          "name": "CommentSection",
          "is_standalone": false,
          "description": "(takes children) - Displays a list of comments",
          "html": "<section className=\"mb-4\">  <h2 className=\"text-2xl font-bold\">Comments</h2>  <ul className=\"list-none mb-4\">    {children} <!-- comment list will be rendered here -->  </ul></section>"
        }
      ]
    },
    {
      "description": "The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.",
      "html": " <!-- Post Container -->\n<div className=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContent/>\n  <CommentsSection>\n    <!-- Comment blocks will be inserted here -->\n  </CommentsSection>\n</div>\n",
      "components": [
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "A standalone component that renders the post text and image.",
          "html": "<!-- Post Content Container --><div className=\"mb-4\">  <p className=\"text-lg\">{post_text}</p>  <img src=\"{image_url}\" alt=\"{image_alt}\" className=\"w-full h-auto mb-4\" /></div>"
        },
        {
          "name": "CommentBlock",
          "is_standalone": true,
          "description": "A standalone component that renders a single comment with commentator's name and comment text.",
          "html": "<!-- Comment Block Container --><div className=\"p-4 border-b border-gray-200\">  <p className=\"text-sm\">{commentator_name}</p>  <p className=\"text-sm\">{comment_text}</p></div>"
        },
        {
          "name": "CommentsSection",
          "is_standalone": false,
          "description": "A component that takes children (`CommentBlock` components) and renders them.",
          "html": "<!-- Comments Section Container --><div className=\"mt-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Trust Badges: Establish credibility with security badges": [
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.",
      "html": "<div class=\"flex justify-center flex-wrap\">\n  <TrustBadgeList>\n    <TrustBadge />\n    <TrustBadge />\n    <TrustBadge />\n    <!-- Add more TrustBadge components here -->\n  </TrustBadgeList>\n</div>\n",
      "components": [
        {
          "name": "TrustBadge",
          "is_standalone": true,
          "description": "(standalone): A single trust badge component that displays a security feature or certification.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src=\"{badge_image}\" alt=\"{badge_alt_text}\" class=\"w-12 h-12 mr-4\">  <div class=\"text-lg\">{badge_text}</div></div>"
        },
        {
          "name": "TrustBadgeList",
          "is_standalone": false,
          "description": "(takes children): A container component that wraps a collection of `TrustBadge` components.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Game Reviews and Ratings": [
    {
      "description": "The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Game Reviews and Ratings</h1>\n  <GameRatingsList>\n    <!-- List of GameReviewCard components will be rendered here -->\n  </GameRatingsList>\n</main>\n",
      "components": [
        {
          "name": "GameReviewCard",
          "is_standalone": true,
          "description": "(Standalone): A single game review card that displays the game's title, rating, and review text.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-2xl font-bold\">{game_title}</h2>  <p class=\"text-lg font-semibold mb-2\">Rating: {rating}/10</p>  <p class=\"text-gray-600\">{review_text}</p></div>"
        },
        {
          "name": "GameRatingsList",
          "is_standalone": false,
          "description": "(Takes children): A container component that holds a list of `GameReviewCard` components.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of game reviews with their corresponding ratings, along with the game title, reviewer's name, and the review text.",
      "html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl mb-4\">Game Reviews</h2>\n  <GameReviewList/>\n</div>\n",
      "components": [
        {
          "name": "GameReviewCard",
          "is_standalone": true,
          "description": "standalone component that displays a single game review.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg\">{gameTitle}</h3>  <p>By {reviewerName}</p>  <p class=\"text-gray-600\">{reviewText}</p>  <p>Rating: {rating}/5</p></div>"
        },
        {
          "name": "GameReviewList",
          "is_standalone": false,
          "description": "takes children (a list of `GameReviewCard` components).",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Game Reviews and Ratings</h1>\n  <GameRatingsList>\n    <!-- List of GameReviewCard components will be rendered here -->\n  </GameRatingsList>\n</main>\n",
      "components": [
        {
          "name": "GameReviewCard",
          "is_standalone": true,
          "description": "(Standalone): A single game review card that displays the game's title, rating, and review text.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-2xl font-bold\">{game_title}</h2>  <p class=\"text-lg font-semibold mb-2\">Rating: {rating}/10</p>  <p class=\"text-gray-600\">{review_text}</p></div>"
        },
        {
          "name": "GameRatingsList",
          "is_standalone": false,
          "description": "(Takes children): A container component that holds a list of `GameReviewCard` components.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Game Reviews and Ratings</h1>\n  <GameRatingsList>\n    <!-- List of GameReviewCard components will be rendered here -->\n  </GameRatingsList>\n</main>\n",
      "components": [
        {
          "name": "GameReviewCard",
          "is_standalone": true,
          "description": "(Standalone): A single game review card that displays the game's title, rating, and review text.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-2xl font-bold\">{game_title}</h2>  <p class=\"text-lg font-semibold mb-2\">Rating: {rating}/10</p>  <p class=\"text-gray-600\">{review_text}</p></div>"
        },
        {
          "name": "GameRatingsList",
          "is_standalone": false,
          "description": "(Takes children): A container component that holds a list of `GameReviewCard` components.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of game reviews with their corresponding ratings, allowing users to easily scan and compare games. The design should be clean, modern, and responsive, with clear typography and adequate white space. The ratings should be visually prominent, and the overall layout should prioritize readability.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Game Reviews and Ratings</h1>\n  <GameRatingsList>\n    <!-- List of GameReviewCard components will be rendered here -->\n  </GameRatingsList>\n</main>\n",
      "components": [
        {
          "name": "GameReviewCard",
          "is_standalone": true,
          "description": "(Standalone): A single game review card that displays the game's title, rating, and review text.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-2xl font-bold\">{game_title}</h2>  <p class=\"text-lg font-semibold mb-2\">Rating: {rating}/10</p>  <p class=\"text-gray-600\">{review_text}</p></div>"
        },
        {
          "name": "GameRatingsList",
          "is_standalone": false,
          "description": "(Takes children): A container component that holds a list of `GameReviewCard` components.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    }
  ],
  "Friends List: List of friends with profile links": [
    {
      "description": "The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Friends List</h2>\n  <ul class=\"flex flex-wrap justify-center mb-4\">\n    <FriendItem/><FriendItem/><FriendItem/>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "FriendItem",
          "is_standalone": true,
          "description": "A standalone component representing a single friend's profile link.",
          "html": "<li class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">  <a href=\"{profileLink}\" class=\"block\">    <img src=\"{profilePicture}\" alt=\"{friendName}\" class=\"w-12 h-12 rounded-full mb-2\">    <span class=\"text-lg\">{friendName}</span>  </a></li>"
        },
        {
          "name": "FriendsList",
          "is_standalone": false,
          "description": "A component that takes children ( FriendItems ) and renders them in an unordered list.",
          "html": "<ul class=\"flex flex-wrap justify-center mb-4\">{children}</ul>"
        }
      ]
    },
    {
      "description": "The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Friends List</h2>\n  <ul class=\"flex flex-wrap justify-center mb-4\">\n    <FriendItem/><FriendItem/><FriendItem/>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "FriendItem",
          "is_standalone": true,
          "description": "A standalone component representing a single friend's profile link.",
          "html": "<li class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">  <a href=\"{profileLink}\" class=\"block\">    <img src=\"{profilePicture}\" alt=\"{friendName}\" class=\"w-12 h-12 rounded-full mb-2\">    <span class=\"text-lg\">{friendName}</span>  </a></li>"
        },
        {
          "name": "FriendsList",
          "is_standalone": false,
          "description": "A component that takes children ( FriendItems ) and renders them in an unordered list.",
          "html": "<ul class=\"flex flex-wrap justify-center mb-4\">{children}</ul>"
        }
      ]
    },
    {
      "description": "The Friends List UI should display a list of friends with their profile links. The list should be responsive, mobile-first, and accessible. Each friend's profile link should be displayed with their name and a profile picture.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Friends List</h2>\n  <ul class=\"flex flex-wrap justify-center mb-4\">\n    <FriendItem/><FriendItem/><FriendItem/>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "FriendItem",
          "is_standalone": true,
          "description": "A standalone component representing a single friend's profile link.",
          "html": "<li class=\"w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">  <a href=\"{profileLink}\" class=\"block\">    <img src=\"{profilePicture}\" alt=\"{friendName}\" class=\"w-12 h-12 rounded-full mb-2\">    <span class=\"text-lg\">{friendName}</span>  </a></li>"
        },
        {
          "name": "FriendsList",
          "is_standalone": false,
          "description": "A component that takes children ( FriendItems ) and renders them in an unordered list.",
          "html": "<ul class=\"flex flex-wrap justify-center mb-4\">{children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive list of friends with profile links. The list should be displayed in a grid on larger screens and a vertical list on smaller screens. Each friend's name should be a link to their profile.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Friends</h2>\n  <FriendsList>\n    <!-- friend cards will be inserted here -->\n    <FriendCard/>\n    <FriendCard/>\n    <!-- ... -->\n  </FriendsList>\n</div>\n",
      "components": [
        {
          "name": "FriendCard",
          "is_standalone": true,
          "description": "(standalone): a single friend's information with a profile link",
          "html": "<div className=\"flex items-center mb-4\">  <img src={profile_image_url} alt=\"Profile image\" className=\"w-12 h-12 rounded-full mr-4\" />  <a href={profile_url} className=\"text-blue-600 hover:text-blue-900\">{friend_name}</a></div>"
        },
        {
          "name": "FriendsList",
          "is_standalone": false,
          "description": "(takes children): a container for the list of friends",
          "html": "<ul className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</ul>"
        }
      ]
    }
  ],
  "Hashtag display for topic tracking": [
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <HashtagList/>\n</div>\n",
      "components": [
        {
          "name": "HashtagItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single hashtag with its topic name and post count.",
          "html": "<a href=\"#\" class=\"inline-block mr-4 mb-2\">  <span class=\"text-gray-600 text-sm\">{topic_name}</span>  <span class=\"bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded\">{post_count} posts</span></a>"
        },
        {
          "name": "HashtagList",
          "is_standalone": false,
          "description": "(takes children): A container that renders a list of **HashtagItem** components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Error Message: Displays error message with details": [
    {
      "description": "The UI should display an error message with details, such as an error title, error message, and possibly other details.",
      "html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">\n  <ErrorMessage/>\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "A standalone component that displays an error message with details.",
          "html": "<h5 class=\"text-lg\">{error_title}</h5><p>{error_message}</p><p>{error_details}</p>"
        }
      ]
    }
  ],
  "Designer/Studio Profiles": [
    {
      "description": "The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Designer Profiles</h1>\n  <DesignerProfileList>\n    <DesignerProfileCard />\n    <DesignerProfileCard />\n    <!-- Add more DesignerProfileCard components here -->\n  </DesignerProfileList>\n</main>\n",
      "components": [
        {
          "name": "DesignerProfileCard",
          "is_standalone": true,
          "description": "(standalone): A single designer/studio profile card.",
          "html": "<article class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={profile_picture_url} alt={name} class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{name}</h2>  <p class=\"text-gray-600\">{specialty}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Portfolio</button></article>"
        },
        {
          "name": "DesignerProfileList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of designer/studio profiles.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A profile page for a designer or studio, showcasing their information, skills, and portfolio.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <DesignerProfileHeader/>\n  <section class=\"mb-4\">\n    <h2 class=\"text-lg font-bold\">Skills</h2>\n    <SkillList>\n      <!-- skill items will be inserted here -->\n    </SkillList>\n  </section>\n  <section class=\"mb-4\">\n    <h2 class=\"text-lg font-bold\">Portfolio</h2>\n    <PortfolioGrid>\n      <!-- portfolio items will be inserted here -->\n    </PortfolioGrid>\n  </section>\n</div>\n",
      "components": [
        {
          "name": "DesignerProfileHeader",
          "is_standalone": true,
          "description": "standalone, displays the designer's/studio's name, profile picture, and bio.",
          "html": "<div class=\"flex mb-4\">  <img src=\"{profile_picture_url}\" class=\"w-24 h-24 rounded-full mr-4\" />  <div>    <h1 class=\"text-2xl font-bold\">{designer_name}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "SkillList",
          "is_standalone": false,
          "description": "takes children, displays a list of skills with icons.",
          "html": "<ul class=\"flex flex-wrap mb-4\">  {children}</ul>"
        },
        {
          "name": "PortfolioItem",
          "is_standalone": true,
          "description": "standalone, displays a single portfolio item with image, title, and description.",
          "html": "<div class=\"shadow-md p-4 mb-4\">  <img src=\"{image_url}\" class=\"w-full mb-2\" />  <h3 class=\"text-lg font-bold\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        },
        {
          "name": "PortfolioGrid",
          "is_standalone": false,
          "description": "takes children, displays a grid of portfolio items.",
          "html": "<div class=\"grid grid-cols-1 gap-4 mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Designer Profiles</h1>\n  <DesignerProfileList>\n    <DesignerProfileCard />\n    <DesignerProfileCard />\n    <!-- Add more DesignerProfileCard components here -->\n  </DesignerProfileList>\n</main>\n",
      "components": [
        {
          "name": "DesignerProfileCard",
          "is_standalone": true,
          "description": "(standalone): A single designer/studio profile card.",
          "html": "<article class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={profile_picture_url} alt={name} class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{name}</h2>  <p class=\"text-gray-600\">{specialty}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Portfolio</button></article>"
        },
        {
          "name": "DesignerProfileList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of designer/studio profiles.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Designer Profiles</h1>\n  <DesignerProfileList>\n    <DesignerProfileCard />\n    <DesignerProfileCard />\n    <!-- Add more DesignerProfileCard components here -->\n  </DesignerProfileList>\n</main>\n",
      "components": [
        {
          "name": "DesignerProfileCard",
          "is_standalone": true,
          "description": "(standalone): A single designer/studio profile card.",
          "html": "<article class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={profile_picture_url} alt={name} class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{name}</h2>  <p class=\"text-gray-600\">{specialty}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Portfolio</button></article>"
        },
        {
          "name": "DesignerProfileList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of designer/studio profiles.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of designer/studio profiles, each containing a profile picture, name, specialty, and a call-to-action (CTA) button. The design should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Designer Profiles</h1>\n  <DesignerProfileList>\n    <DesignerProfileCard />\n    <DesignerProfileCard />\n    <!-- Add more DesignerProfileCard components here -->\n  </DesignerProfileList>\n</main>\n",
      "components": [
        {
          "name": "DesignerProfileCard",
          "is_standalone": true,
          "description": "(standalone): A single designer/studio profile card.",
          "html": "<article class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={profile_picture_url} alt={name} class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{name}</h2>  <p class=\"text-gray-600\">{specialty}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Portfolio</button></article>"
        },
        {
          "name": "DesignerProfileList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of designer/studio profiles.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    }
  ],
  "Service section with icons and brief descriptions": [
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4\">\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <Service />\n    <Service />\n    <Service />\n    <!-- Add more Service components as needed -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Service",
          "is_standalone": true,
          "description": "A standalone component representing a single service, consisting of an icon, title, and description.",
          "html": "<div class=\"flex flex-col items-center\">  <ServiceIcon />  <ServiceInfo /></div>"
        },
        {
          "name": "ServiceIcon",
          "is_standalone": true,
          "description": "A standalone component representing the icon of a service.",
          "html": "<i class=\"text-5xl {icon_class}\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "ServiceInfo",
          "is_standalone": true,
          "description": "A standalone component representing the title and description of a service.",
          "html": "<div class=\"text-center\">  <h3 class=\"text-lg\">{title}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a service section with three columns, each containing an icon, a brief description, and a title. The section should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.",
      "html": "<section class=\"max-w-md mx-auto pt-12 pb-6\">\n  <h2 class=\"text-3xl font-bold mb-4\">Our Services</h2>\n  <div class=\"flex flex-wrap justify-center\">\n    <ServiceCard />\n    <ServiceCard />\n    <ServiceCard />\n  </div>\n</section>\n",
      "components": [
        {
          "name": "ServiceCard",
          "is_standalone": true,
          "description": "standalone component that renders an icon, title, and description.",
          "html": "<div class=\"w-full md:w-1/3 xl:w-1/3 p-6\">  <i class=\"fas fa-{icon_name} text-3xl text-gray-600 mb-4\"></i>  <h3 class=\"text-lg font-bold mb-2\">{service_title}</h3>  <p class=\"text-gray-600\">{service_description}</p></div>"
        }
      ]
    }
  ],
  "Live streaming tools with real-time chat": [
    {
      "description": "The UI should be a responsive, mobile-first layout with a live streaming video player on one side and a real-time chat window on the other side. The chat window should display a list of chat messages, with the most recent messages at the bottom. The UI should be accessible, with clear typography, sufficient color contrast, and keyboard-navigable interactive elements.",
      "html": "<div class=\"flex flex-wrap justify-center lg:flex-row flex-col\">\n  <LiveStreamPlayer />\n  <RealTimeChat />\n</div>\n",
      "components": [
        {
          "name": "LiveStreamPlayer",
          "is_standalone": true,
          "description": "Standalone component that displays the live streaming video.",
          "html": "<div class=\"lg:w-1/2 xl:w-2/3 p-4\">  <video class=\"w-full h-64 lg:h-full\" src=\"{stream_url}\"></video></div>"
        },
        {
          "name": "RealTimeChat",
          "is_standalone": true,
          "description": "Standalone component that displays the real-time chat window.",
          "html": "<div class=\"lg:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold mb-2\">Live Chat</h2>  <div class=\"chat-messages overflow-y-auto p-2\">    <!-- chat messages will be displayed here -->  </div>  <ChatInput /></div>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": false,
          "description": "Component that displays a single chat message, takes children (message text and timestamp).",
          "html": "<div class=\"flex items-baseline mb-2 p-2\">  <span class=\"text-sm\">{username}</span>  <span class=\"text-sm\">{timestamp}</span>  <p class=\"text-sm\">{children}</p></div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "Standalone component that allows users to input and send chat messages.",
          "html": "<form class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\")  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout with a live streaming video player on one side and a real-time chat window on the other side. The chat window should display a list of chat messages, with the most recent messages at the bottom. The UI should be accessible, with clear typography, sufficient color contrast, and keyboard-navigable interactive elements.",
      "html": "<div class=\"flex flex-wrap justify-center lg:flex-row flex-col\">\n  <LiveStreamPlayer />\n  <RealTimeChat />\n</div>\n",
      "components": [
        {
          "name": "LiveStreamPlayer",
          "is_standalone": true,
          "description": "Standalone component that displays the live streaming video.",
          "html": "<div class=\"lg:w-1/2 xl:w-2/3 p-4\">  <video class=\"w-full h-64 lg:h-full\" src=\"{stream_url}\"></video></div>"
        },
        {
          "name": "RealTimeChat",
          "is_standalone": true,
          "description": "Standalone component that displays the real-time chat window.",
          "html": "<div class=\"lg:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold mb-2\">Live Chat</h2>  <div class=\"chat-messages overflow-y-auto p-2\">    <!-- chat messages will be displayed here -->  </div>  <ChatInput /></div>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": false,
          "description": "Component that displays a single chat message, takes children (message text and timestamp).",
          "html": "<div class=\"flex items-baseline mb-2 p-2\">  <span class=\"text-sm\">{username}</span>  <span class=\"text-sm\">{timestamp}</span>  <p class=\"text-sm\">{children}</p></div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "Standalone component that allows users to input and send chat messages.",
          "html": "<form class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\")  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout with a live streaming video player on one side and a real-time chat window on the other side. The chat window should display a list of chat messages, with the most recent messages at the bottom. The UI should be accessible, with clear typography, sufficient color contrast, and keyboard-navigable interactive elements.",
      "html": "<div class=\"flex flex-wrap justify-center lg:flex-row flex-col\">\n  <LiveStreamPlayer />\n  <RealTimeChat />\n</div>\n",
      "components": [
        {
          "name": "LiveStreamPlayer",
          "is_standalone": true,
          "description": "Standalone component that displays the live streaming video.",
          "html": "<div class=\"lg:w-1/2 xl:w-2/3 p-4\">  <video class=\"w-full h-64 lg:h-full\" src=\"{stream_url}\"></video></div>"
        },
        {
          "name": "RealTimeChat",
          "is_standalone": true,
          "description": "Standalone component that displays the real-time chat window.",
          "html": "<div class=\"lg:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold mb-2\">Live Chat</h2>  <div class=\"chat-messages overflow-y-auto p-2\">    <!-- chat messages will be displayed here -->  </div>  <ChatInput /></div>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": false,
          "description": "Component that displays a single chat message, takes children (message text and timestamp).",
          "html": "<div class=\"flex items-baseline mb-2 p-2\">  <span class=\"text-sm\">{username}</span>  <span class=\"text-sm\">{timestamp}</span>  <p class=\"text-sm\">{children}</p></div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "Standalone component that allows users to input and send chat messages.",
          "html": "<form class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\")  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        }
      ]
    },
    {
      "description": "The UI should have a video player on the left side, taking most of the screen, and a real-time chat on the right side. The chat should have a input field at the bottom for users to type and send messages.",
      "html": "<div class=\"flex h-screen\">\n  <div class=\"flex-1\">\n    <LiveStreamPlayer />\n  </div>\n  <div class=\"w-64 md:w-96 lg:w-128 xl:w-160 p-4\">\n    <ChatWindow>\n      <!-- chat messages will be rendered here -->\n    </ChatWindow>\n    <ChatInput />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "LiveStreamPlayer",
          "is_standalone": true,
          "description": "A standalone component that displays the live streaming video.",
          "html": "<div class=\"aspect-video w-full\">  <video src=\"{stream_url}\" width=\"100%\" height=\"100%\"></video></div>"
        },
        {
          "name": "ChatWindow",
          "is_standalone": false,
          "description": "A component that takes children, rendering a list of chat messages.",
          "html": "<div class=\"overflow-y-auto h-full p-4\">  {children}</div>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single chat message.",
          "html": "<div class=\"py-2 px-4\">  <span class=\"text-gray-500\">{username}</span>  <span class=\"ml-2\">{message}</span></div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "A standalone component that includes a text input field and a send button for users to type and send messages.",
          "html": "<div class=\"flex p-2\">  <input type=\"text\" class=\"w-full p-2\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Send  </button></div>"
        }
      ]
    }
  ],
  "Tweet input field for user input": [
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.",
      "html": "<div class=\"flex w-full max-w-md p-4 mx-auto mt-4\">\n  <TweetInputField />\n  <CharacterCountIndicator />\n</div>\n",
      "components": [
        {
          "name": "TweetInputField",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<input  type=\"text\"  class=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"What's on your mind?\"  aria-label=\"Tweet input field\"/>"
        },
        {
          "name": "CharacterCountIndicator",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-500\">{characterCount} / 280</span>"
        }
      ]
    }
  ],
  "Product variant selector (e.g. size, color)": [
    {
      "description": "The UI should display a product variant selector, which allows users to select a specific variant of a product (e.g., size, color). The selector should display a list of available variants, with each variant showing its name and a radio button to select it.",
      "html": "<div class=\"flex flex-col\">\n  <h2 class=\"text-lg font-bold\">Select a variant</h2>\n  <ul class=\"list-none mb-0\">\n    <ProductVariantSelector/>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ProductVariantSelector",
          "is_standalone": true,
          "description": "(standalone): The top-level component for the product variant selector.",
          "html": "<ul class=\"list-none mb-0\">  {variants.map((variant) => (    <li key={variant.id}>      <VariantOption value={variant.id}>{variant.name}</VariantOption>    </li>  ))}</ul>"
        },
        {
          "name": "VariantOption",
          "is_standalone": false,
          "description": "(takes children): A single variant option, displaying the variant name and a radio button.",
          "html": "<li class=\"flex items-center mb-2\">  <input type=\"radio\" id={value} name=\"variant\" value={value} />  <label for={value} class=\"ml-2\">{children}</label></li>"
        }
      ]
    }
  ],
  "Hero section with background image and tagline": [
    {
      "description": "The UI should be a hero section with a background image and a tagline. The background image should cover the full width and height of the section, and the tagline should be centered vertically and horizontally on top of the image.",
      "html": "<section class=\"h-screen w-full relative\">\n  <HeroBackground />\n  <div class=\"absolute inset-0 flex items-center justify-center\">\n    <HeroTagline><p>{tagline_text}</p></HeroTagline>\n  </div>\n</section>\n",
      "components": [
        {
          "name": "HeroBackground",
          "is_standalone": true,
          "description": "A standalone component that represents the background image of the hero section.",
          "html": "<div class=\"absolute inset-0 bg-cover bg-center\" style={{ backgroundImage: `url(${background_image_url})` }}></div>"
        },
        {
          "name": "HeroTagline",
          "is_standalone": false,
          "description": "A component that represents the tagline of the hero section. It takes children (the tagline text).",
          "html": "<div class=\"text-2xl font-bold text-white\">{children}</div>"
        }
      ]
    }
  ],
  "Comment Section: User discussions and feedback": [
    {
      "description": "The UI should display a list of comments from users, with each comment showing the user's name, profile picture, comment text, and timestamp. The comments should be ordered chronologically, with the most recent comment at the top. The section should be responsive, with a clean and simple design that is easy to read and navigate.",
      "html": "<section className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-4\">Comments</h2>\n  <CommentList/>\n</section>\n",
      "components": [
        {
          "name": "CommentList",
          "is_standalone": true,
          "description": "standalone component that displays a list of comments",
          "html": "<ul className=\"list-none mb-4\">  {comments.map((comment, index) => (    <li key={index} className=\"mb-4\">      <Comment comment={comment} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone component that displays a single comment",
          "html": "<div className=\"flex items-start mb-4\">  <UserProfile user={user} />  <div className=\"ml-4\">    <CommentText text={text} />    <CommentTimestamp timestamp={timestamp} />  </div></div>"
        },
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "standalone component that displays a user's profile picture and name",
          "html": "<div className=\"flex-shrink-0 mr-4\">  <img src={profile PictureUrl} alt={userName} className=\"w-8 h-8 rounded-full\" />  <span className=\"text-sm\">{userName}</span></div>"
        },
        {
          "name": "CommentText",
          "is_standalone": true,
          "description": "standalone component that displays the text of a single comment",
          "html": "<p className=\"text-sm\">{text}</p>"
        },
        {
          "name": "CommentTimestamp",
          "is_standalone": true,
          "description": "standalone component that displays the timestamp of a single comment",
          "html": "<p className=\"text-xs text-gray-600\">{timestamp}</p>"
        }
      ]
    }
  ],
  "Sticky Header/Footer": [
    {
      "description": "The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.",
      "html": "<div className=\"min-h-screen flex flex-col\">\n  <StickyHeader />\n  <MainContent>\n    <!-- page content goes here -->\n  </MainContent>\n  <StickyFooter />\n</div>\n",
      "components": [
        {
          "name": "StickyHeader",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<header className=\"sticky top-0 z-50 bg-white shadow-md py-2 px-4\">  <!-- header content goes here -->  <nav>    <ul>      <li><a href=\"#\">Link 1</a></li>      <li><a href=\"#\">Link 2</a></li>      <li><a href=\"#\">Link 3</a></li>    </ul>  </nav></header>"
        },
        {
          "name": "StickyFooter",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<footer className=\"sticky bottom-0 bg-gray-200 py-2 px-4\">  <!-- footer content goes here -->  <p>&copy; {year} My Website</p></footer>"
        },
        {
          "name": "MainContent",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div className=\"flex-grow p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a sticky header at the top of the page, a main content area in the middle, and a sticky footer at the bottom of the page. The header and footer should remain fixed at the top and bottom of the page, respectively, even when the user scrolls.",
      "html": "<div class=\"h-screen flex flex-col\">\n  <StickyHeader/>\n  <ContentArea>\n    <!-- main content goes here -->\n  </ContentArea>\n  <StickyFooter/>\n</div>\n",
      "components": [
        {
          "name": "StickyHeader",
          "is_standalone": true,
          "description": "A standalone component that represents the sticky header.",
          "html": "<header class=\"sticky top-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center\">  <!-- header content goes here -->  <h1>{header_title}</h1></header>"
        },
        {
          "name": "StickyFooter",
          "is_standalone": true,
          "description": "A standalone component that represents the sticky footer.",
          "html": "<footer class=\"sticky bottom-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center\">  <!-- footer content goes here -->  <p>{copyright_text}</p></footer>"
        },
        {
          "name": "ContentArea",
          "is_standalone": false,
          "description": "A component that takes children, representing the main content area of the page.",
          "html": "<div class=\"flex-1 overflow-y-auto p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.",
      "html": "<div className=\"min-h-screen flex flex-col\">\n  <StickyHeader />\n  <MainContent>\n    <!-- page content goes here -->\n  </MainContent>\n  <StickyFooter />\n</div>\n",
      "components": [
        {
          "name": "StickyHeader",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<header className=\"sticky top-0 z-50 bg-white shadow-md py-2 px-4\">  <!-- header content goes here -->  <nav>    <ul>      <li><a href=\"#\">Link 1</a></li>      <li><a href=\"#\">Link 2</a></li>      <li><a href=\"#\">Link 3</a></li>    </ul>  </nav></header>"
        },
        {
          "name": "StickyFooter",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<footer className=\"sticky bottom-0 bg-gray-200 py-2 px-4\">  <!-- footer content goes here -->  <p>&copy; {year} My Website</p></footer>"
        },
        {
          "name": "MainContent",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div className=\"flex-grow p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a sticky header and footer that remain at the top and bottom of the viewport, respectively, even when the user scrolls.",
      "html": "<div className=\"min-h-screen flex flex-col\">\n  <StickyHeader />\n  <MainContent>\n    <!-- page content goes here -->\n  </MainContent>\n  <StickyFooter />\n</div>\n",
      "components": [
        {
          "name": "StickyHeader",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<header className=\"sticky top-0 z-50 bg-white shadow-md py-2 px-4\">  <!-- header content goes here -->  <nav>    <ul>      <li><a href=\"#\">Link 1</a></li>      <li><a href=\"#\">Link 2</a></li>      <li><a href=\"#\">Link 3</a></li>    </ul>  </nav></header>"
        },
        {
          "name": "StickyFooter",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<footer className=\"sticky bottom-0 bg-gray-200 py-2 px-4\">  <!-- footer content goes here -->  <p>&copy; {year} My Website</p></footer>"
        },
        {
          "name": "MainContent",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div className=\"flex-grow p-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Category or subreddit selection dropdown": [
    {
      "description": "A dropdown menu with a label \"Select a category\" and a dropdown list of categories/subreddits. The dropdown list should be accessible and responsive.",
      "html": "<div class=\"w-full max-w-md mx-auto mt-4\">\n  <CategoryDropdown/>\n</div>\n",
      "components": [
        {
          "name": "CategoryDropdown",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"relative\">  <CategoryDropdownLabel/>  <CategoryDropdownList/></div>"
        },
        {
          "name": "CategoryDropdownLabel",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<label class=\"block text-sm font-medium mb-1\">{label_text}</label>"
        },
        {
          "name": "CategoryDropdownList",
          "is_standalone": false,
          "description": "(takes children: `CategoryDropdownItem`)",
          "html": "<ul class=\"absolute z-10 w-full bg-white border border-gray-200\">  {children}</ul>"
        }
      ]
    }
  ],
  "Tweet display for individual posts": [
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.",
      "html": "<div class=\"flex w-full p-4 rounded-lg shadow-md bg-white\">\n  <TweetHeader />\n  <TweetText />\n  <TweetMedia />\n  <TweetFooter />\n</div>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "standalone, displays the profile picture, username, handle, and timestamp",
          "html": "<div class=\"flex items-center mb-2\">  <img src=\"{profilePictureUrl}\" alt=\"{username}\" class=\"w-12 h-12 rounded-full mr-2\" />  <div>    <span class=\"text-lg font-bold\">{username}</span>    <span class=\"text-gray-600\">@{handle}</span>    <span class=\"text-gray-600\">{timestamp}</span>  </div></div>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "standalone, displays the text of the tweet",
          "html": "<p class=\"text-lg\">{tweetText}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": true,
          "description": "standalone, displays any media associated with the tweet (e.g. images or videos)",
          "html": "<!-- If there is media, display it -->{mediaUrl && (  <img src={mediaUrl} alt=\"Tweet media\" class=\"w-full mb-2\" />)}"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "standalone, displays any additional information or actions (e.g. likes, retweets, replies)",
          "html": "<div class=\"flex justify-between text-gray-600 mb-2\">  <span>Likes: {likeCount}</span>  <span>Retweets: {retweetCount}</span>  <span>Replies: {replyCount}</span>  <!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet post with the user's profile picture, username, timestamp, tweet content, and a reply button.",
      "html": "<TweetPost>\n  <UserProfilePicture />\n  <TweetContent>\n    <h2>{username}</h2>\n    <p>{tweet_content}</p>\n    <p>{timestamp}</p>\n  </TweetContent>\n  <ReplyButton />\n</TweetPost>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "Standalone component that displays the user's profile picture.",
          "html": "<img src={profile_picture_url} alt={username} className=\"w-10 h-10 rounded-full\" />"
        },
        {
          "name": "TweetContent",
          "is_standalone": false,
          "description": "Takes children component that displays the tweet content.",
          "html": "<div className=\"ml-4\">  {children}</div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "Standalone component that displays a reply button.",
          "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "TweetPost",
          "is_standalone": false,
          "description": "Takes children component that displays the entire tweet post.",
          "html": "<div className=\"flex mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a single tweet, with a profile picture, username, handle, timestamp, text, and any media (e.g. images or videos). The design should be clean, minimal, and responsive.",
      "html": "<div class=\"flex w-full p-4 rounded-lg shadow-md bg-white\">\n  <TweetHeader />\n  <TweetText />\n  <TweetMedia />\n  <TweetFooter />\n</div>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "standalone, displays the profile picture, username, handle, and timestamp",
          "html": "<div class=\"flex items-center mb-2\">  <img src=\"{profilePictureUrl}\" alt=\"{username}\" class=\"w-12 h-12 rounded-full mr-2\" />  <div>    <span class=\"text-lg font-bold\">{username}</span>    <span class=\"text-gray-600\">@{handle}</span>    <span class=\"text-gray-600\">{timestamp}</span>  </div></div>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "standalone, displays the text of the tweet",
          "html": "<p class=\"text-lg\">{tweetText}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": true,
          "description": "standalone, displays any media associated with the tweet (e.g. images or videos)",
          "html": "<!-- If there is media, display it -->{mediaUrl && (  <img src={mediaUrl} alt=\"Tweet media\" class=\"w-full mb-2\" />)}"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "standalone, displays any additional information or actions (e.g. likes, retweets, replies)",
          "html": "<div class=\"flex justify-between text-gray-600 mb-2\">  <span>Likes: {likeCount}</span>  <span>Retweets: {retweetCount}</span>  <span>Replies: {replyCount}</span>  <!-- Add more actions here, e.g. Reply, Retweet, Like buttons --></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet in a compact, readable format. It should include the user's profile picture, username, tweet text, and timestamp. The tweet text should be the primary focus, with the user's profile picture and username secondary. The timestamp should be displayed lightly.",
      "html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-white rounded shadow-md\">\n  <Tweet>\n    <UserProfilePicture />\n    <div class=\"flex items-center\">\n      <Username />\n      <Timestamp />\n    </div>\n    <TweetText />\n  </Tweet>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "standalone component to display the user's profile picture.",
          "html": "<img src=\"{profile_picture_url}\" alt=\"User profile picture\" class=\"w-12 h-12 rounded-full mr-2\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "standalone component to display the user's username.",
          "html": "<span class=\"text-lg font-bold\">{username}</span>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "standalone component to display the tweet text.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "Timestamp",
          "is_standalone": true,
          "description": "standalone component to display the timestamp.",
          "html": "<small class=\"text-gray-500\">{timestamp}</small>"
        },
        {
          "name": "Tweet",
          "is_standalone": false,
          "description": "takes children, a container component to display the entire tweet.",
          "html": "<div class=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual tweet with the user's profile picture, name, username, timestamp, tweet text, and optional media (e.g., images or videos). The design should be responsive, accessible, and visually appealing, with clear typography and sufficient whitespace.",
      "html": "<article class=\"max-w-md mx-auto pb-4 mb-4 bg-white rounded-md shadow-md\">\n  <TweetHeader />\n  <TweetTimestamp />\n  <TweetText />\n  <TweetMedia>\n    <!-- Optional media content -->\n  </TweetMedia>\n  <TweetFooter />\n</article>\n",
      "components": [
        {
          "name": "TweetHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the user's profile picture, name, and username.",
          "html": "<div class=\"flex items-center pb-2\">  <img src=\"{profile_picture_url}\" alt=\"Profile picture\" class=\"w-10 h-10 rounded-full mr-2\" />  <div class=\"flex-1\">    <h2 class=\"text-lg font-bold\">{username}</h2>    <p class=\"text-gray-600\">{name}</p>  </div></div>"
        },
        {
          "name": "TweetTimestamp",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp of the tweet.",
          "html": "<p class=\"text-gray-600 text-sm\">{timestamp}</p>"
        },
        {
          "name": "TweetText",
          "is_standalone": true,
          "description": "Standalone component displaying the text of the tweet.",
          "html": "<p class=\"text-lg\">{tweet_text}</p>"
        },
        {
          "name": "TweetMedia",
          "is_standalone": false,
          "description": "Component that takes children to display optional media (e.g., images or videos).",
          "html": "<!-- Optional media content --><div class=\"flex justify-center\">  {children}</div>"
        },
        {
          "name": "TweetFooter",
          "is_standalone": true,
          "description": "Standalone component displaying the timestamp and engagement metrics (e.g., likes, retweets).",
          "html": "<div class=\"flex justify-between pt-2\">  <p class=\"text-gray-600 text-sm\">{timestamp}</p>  <p class=\"text-gray-600 text-sm\">{engagement_metrics}</p></div>"
        }
      ]
    }
  ],
  "Call-to-Action Buttons (CTAs)": [
    {
      "description": "The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PrimaryButton />\n</div>\n",
      "components": [
        {
          "name": "PrimaryButton",
          "is_standalone": true,
          "description": "A standalone component that renders a primary call-to-action button.",
          "html": "<button   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  type=\"button\">  {button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PrimaryButton />\n</div>\n",
      "components": [
        {
          "name": "PrimaryButton",
          "is_standalone": true,
          "description": "A standalone component that renders a primary call-to-action button.",
          "html": "<button   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  type=\"button\">  {button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PrimaryButton />\n</div>\n",
      "components": [
        {
          "name": "PrimaryButton",
          "is_standalone": true,
          "description": "A standalone component that renders a primary call-to-action button.",
          "html": "<button   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  type=\"button\">  {button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PrimaryButton />\n</div>\n",
      "components": [
        {
          "name": "PrimaryButton",
          "is_standalone": true,
          "description": "A standalone component that renders a primary call-to-action button.",
          "html": "<button   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  type=\"button\">  {button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PrimaryButton />\n</div>\n",
      "components": [
        {
          "name": "PrimaryButton",
          "is_standalone": true,
          "description": "A standalone component that renders a primary call-to-action button.",
          "html": "<button   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\"  type=\"button\">  {button_text}</button>"
        }
      ]
    }
  ],
  "Dividers/Section Separators": [
    {
      "description": "The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.",
      "html": "<div class=\"container mx-auto p-4\">\n  <!-- content above the divider -->\n  <SectionSeparator/>\n  <!-- content below the divider -->\n</div>\n",
      "components": [
        {
          "name": "SectionSeparator",
          "is_standalone": true,
          "description": "a standalone component that renders a horizontal divider",
          "html": "<hr class=\"border border-solid border-gray-300 w-full my-4 md:my-6\" />"
        }
      ]
    },
    {
      "description": "The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.",
      "html": "<div class=\"container mx-auto p-4\">\n  <!-- content above the divider -->\n  <SectionSeparator/>\n  <!-- content below the divider -->\n</div>\n",
      "components": [
        {
          "name": "SectionSeparator",
          "is_standalone": true,
          "description": "a standalone component that renders a horizontal divider",
          "html": "<hr class=\"border border-solid border-gray-300 w-full my-4 md:my-6\" />"
        }
      ]
    },
    {
      "description": "The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.",
      "html": "<div class=\"container mx-auto p-4\">\n  <!-- content above the divider -->\n  <SectionSeparator/>\n  <!-- content below the divider -->\n</div>\n",
      "components": [
        {
          "name": "SectionSeparator",
          "is_standalone": true,
          "description": "a standalone component that renders a horizontal divider",
          "html": "<hr class=\"border border-solid border-gray-300 w-full my-4 md:my-6\" />"
        }
      ]
    },
    {
      "description": "The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.",
      "html": "<div class=\"container mx-auto p-4\">\n  <!-- content above the divider -->\n  <SectionSeparator/>\n  <!-- content below the divider -->\n</div>\n",
      "components": [
        {
          "name": "SectionSeparator",
          "is_standalone": true,
          "description": "a standalone component that renders a horizontal divider",
          "html": "<hr class=\"border border-solid border-gray-300 w-full my-4 md:my-6\" />"
        }
      ]
    }
  ],
  "Responsive Table Layout": [
    {
      "description": "The UI should display a responsive table layout with a header row, multiple data rows, and columns that adjust their width based on the screen size.",
      "html": "<ResponsiveTable>\n  <TableHeader>\n    <TableCell><span>Column 1</span></TableCell>\n    <TableCell><span>Column 2</span></TableCell>\n    <TableCell><span>Column 3</span></TableCell>\n  </TableHeader>\n  <TableRow>\n    <TableCell>{cellData1}</TableCell>\n    <TableCell>{cellData2}</TableCell>\n    <TableCell>{cellData3}</TableCell>\n  </TableRow>\n  <!-- More TableRow components here -->\n</ResponsiveTable>\n",
      "components": [
        {
          "name": "ResponsiveTable",
          "is_standalone": false,
          "description": "The main container for the responsive table layout. Takes children.",
          "html": "<div class=\"overflow-x-auto\">  <table class=\"w-full border-collapse\">    {children}  </table></div>"
        },
        {
          "name": "TableHeader",
          "is_standalone": false,
          "description": "The header row of the table. Takes children.",
          "html": "<thead>  <tr class=\"bg-gray-100\">    {children}  </tr></thead>"
        },
        {
          "name": "TableRow",
          "is_standalone": false,
          "description": "A single row in the table. Takes children.",
          "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
        },
        {
          "name": "TableCell",
          "is_standalone": false,
          "description": "A single cell in the table. Takes children.",
          "html": "<td class=\"px-4 py-2\">{children}</td>"
        }
      ]
    }
  ],
  "Category List: Links to categorized content": [
    {
      "description": "The Category List should display a list of categorized content links, with each link displaying the category name and a brief description. The list should be responsive, mobile-first, and accessible.",
      "html": "<div className=\"max-w-md mx-auto p-4 lg:p-6\">\n  <h2 className=\"text-lg font-bold mb-4\">Categories</h2>\n  <ul className=\"list-none mb-0\">\n    <CategoryList>\n      <!-- category links will be inserted here -->\n    </CategoryList>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "(standalone): A single link to a categorized content.",
          "html": "<li className=\"mb-2\">  <a href=\"#\" className=\"text-blue-600 hover:text-blue-900\">{category_name}</a>  <p className=\"text-sm\">{category_description}</p></li>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of `CategoryLink` components.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of categories, with each category having a title and a link to the corresponding content.",
      "html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-xl font-bold mb-4\">Categories</h2>\n  <ul class=\"list-none mb-0\">\n    <CategoryList>\n      <CategoryLink />\n      <CategoryLink />\n      <!-- Add more CategoryLink components here -->\n    </CategoryList>\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component representing a single category with a link.",
          "html": "<li class=\"mb-2\">  <a href=\"{categoryLink}\" class=\"text-blue-600 hover:text-blue-900 transition duration-300\">{categoryName}</a></li>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children (multiple `CategoryLink` components) to display a list of categories.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Geo-location Map Markers": [
    {
      "description": "The UI should display a map with multiple markers indicating different geo-locations. Each marker should have a popup that displays information about the location.",
      "html": "<div className=\"h-full w-full\">\n  <MapComponent>\n    <MarkerComponent lat={lat1} lng={lng1}>\n      <PopupComponent>\n        <h2>{locationName1}</h2>\n        <p>{locationDescription1}</p>\n      </PopupComponent>\n    </MarkerComponent>\n    <MarkerComponent lat={lat2} lng={lng2}>\n      <PopupComponent>\n        <h2>{locationName2}</h2>\n        <p>{locationDescription2}</p>\n      </PopupComponent>\n    </MarkerComponent>\n    <!-- Add more markers here -->\n  </MapComponent>\n</div>\n",
      "components": [
        {
          "name": "MapComponent",
          "is_standalone": true,
          "description": "standalone, displays a map",
          "html": "<div className=\"map h-full w-full\"></div>"
        },
        {
          "name": "MarkerComponent",
          "is_standalone": false,
          "description": "takes children, represents a marker on the map",
          "html": "<div className=\"marker\">  {children}</div>"
        },
        {
          "name": "PopupComponent",
          "is_standalone": false,
          "description": "takes children, displays information about a location",
          "html": "<div className=\"popup\">  {children}</div>"
        }
      ]
    }
  ],
  "Loading Spinner: Animated loading indicator": [
    {
      "description": "The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.",
      "html": "<div class=\"flex justify-center items-center h-screen\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full\" role=\"progressbar\" aria-valuetext=\"Loading...\">  <span class=\"sr-only\">Loading...</span></div>"
        }
      ]
    },
    {
      "description": "The UI should be a circular animated loading indicator that spins to indicate that the application is loading or processing something.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"inline-block w-8 h-8 border-4 border-solid rounded-full border-white border-t-transparent animate-spin\" />"
        }
      ]
    },
    {
      "description": "The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.",
      "html": "<div class=\"flex justify-center items-center h-screen\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full\" role=\"progressbar\" aria-valuetext=\"Loading...\">  <span class=\"sr-only\">Loading...</span></div>"
        }
      ]
    },
    {
      "description": "The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.",
      "html": "<div class=\"flex justify-center items-center h-screen\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full\" role=\"progressbar\" aria-valuetext=\"Loading...\">  <span class=\"sr-only\">Loading...</span></div>"
        }
      ]
    }
  ],
  "Quiz and Assessment Tools": [
    {
      "description": "The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>\n  <QuizList>\n    <QuizCard />\n    <QuizCard />\n    <!-- Add more QuizCard components here -->\n  </QuizList>\n</main>\n",
      "components": [
        {
          "name": "QuizCard",
          "is_standalone": true,
          "description": "(standalone): A single quiz or assessment tool card with name, description, and rating.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{quiz_name}</h2>  <p class=\"text-gray-600\">{quiz_description}</p>  <p class=\"text-sm\">Rating: {rating}/5</p></div>"
        },
        {
          "name": "QuizList",
          "is_standalone": false,
          "description": "(takes children): A list of `QuizCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>\n  <QuizList>\n    <QuizCard />\n    <QuizCard />\n    <!-- Add more QuizCard components here -->\n  </QuizList>\n</main>\n",
      "components": [
        {
          "name": "QuizCard",
          "is_standalone": true,
          "description": "(standalone): A single quiz or assessment tool card with name, description, and rating.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{quiz_name}</h2>  <p class=\"text-gray-600\">{quiz_description}</p>  <p class=\"text-sm\">Rating: {rating}/5</p></div>"
        },
        {
          "name": "QuizList",
          "is_standalone": false,
          "description": "(takes children): A list of `QuizCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>\n  <QuizList>\n    <QuizCard />\n    <QuizCard />\n    <!-- Add more QuizCard components here -->\n  </QuizList>\n</main>\n",
      "components": [
        {
          "name": "QuizCard",
          "is_standalone": true,
          "description": "(standalone): A single quiz or assessment tool card with name, description, and rating.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{quiz_name}</h2>  <p class=\"text-gray-600\">{quiz_description}</p>  <p class=\"text-sm\">Rating: {rating}/5</p></div>"
        },
        {
          "name": "QuizList",
          "is_standalone": false,
          "description": "(takes children): A list of `QuizCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>\n  <QuizList>\n    <QuizCard />\n    <QuizCard />\n    <!-- Add more QuizCard components here -->\n  </QuizList>\n</main>\n",
      "components": [
        {
          "name": "QuizCard",
          "is_standalone": true,
          "description": "(standalone): A single quiz or assessment tool card with name, description, and rating.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{quiz_name}</h2>  <p class=\"text-gray-600\">{quiz_description}</p>  <p class=\"text-sm\">Rating: {rating}/5</p></div>"
        },
        {
          "name": "QuizList",
          "is_standalone": false,
          "description": "(takes children): A list of `QuizCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-3xl font-bold mb-4\">Quiz and Assessment Tools</h1>\n  <QuizList>\n    <QuizCard />\n    <QuizCard />\n    <!-- Add more QuizCard components here -->\n  </QuizList>\n</main>\n",
      "components": [
        {
          "name": "QuizCard",
          "is_standalone": true,
          "description": "(standalone): A single quiz or assessment tool card with name, description, and rating.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{quiz_name}</h2>  <p class=\"text-gray-600\">{quiz_description}</p>  <p class=\"text-sm\">Rating: {rating}/5</p></div>"
        },
        {
          "name": "QuizList",
          "is_standalone": false,
          "description": "(takes children): A list of `QuizCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Game Tiles and Grids": [
    {
      "description": "The UI should display a grid of game tiles. Each tile should have a unique background color, a number indicating the tile's value, and an optional \"locked\" indicator.",
      "html": "<div className=\"grid grid-cols-4 gap-4\">\n  <GameGrid />\n</div>\n",
      "components": [
        {
          "name": "GameGrid",
          "is_standalone": true,
          "description": "A standalone component that displays a grid of game tiles.",
          "html": "<div className=\"flex flex-wrap justify-center\">  { /* an 4x4 grid of GameTile components */ }  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile />  <GameTile /><GameTile /><GameTile /><GameTile /></div>"
        },
        {
          "name": "GameTile",
          "is_standalone": false,
          "description": "A component that takes children (the tile's value and optional \"locked\" indicator) and displays a single game tile.",
          "html": "<div   className={`h-16 w-16 bg-${tile_color} rounded-md flex justify-center items-center`}>  <p className=\"text-lg\">{tile_value}</p>  {locked && <span className=\"text-xs\">(Locked)</span>}  {children}</div>"
        }
      ]
    }
  ],
  "Who to follow suggestions for users": [
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Who to Follow</h2>\n  <UserList>\n    <UserProfileSuggestion />\n    <UserProfileSuggestion />\n    <!-- more user suggestions here -->\n  </UserList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSuggestion",
          "is_standalone": true,
          "description": "a standalone component representing a single user suggestion, with a profile picture, username, and follow button.",
          "html": "<div className=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" className=\"w-12 h-12 rounded-full mr-4\" />  <div>    <p className=\"text-lg\">{username}</p>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Follow</button>  </div></div>"
        },
        {
          "name": "UserList",
          "is_standalone": false,
          "description": "a component that takes children, rendering a list of `UserProfileSuggestion` components.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of user suggestions with their profile pictures, names, and a \"Follow\" button. The list should be scrollable and have a header with a title.",
      "html": "<div className=\"max-h-screen overflow-y-scroll px-4 pt-4\">\n  <h2 className=\"text-lg font-bold\">Who to follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard />\n    <UserSuggestionCard />\n    <UserSuggestionCard />\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div className=\"flex items-center mb-4\">  <img src={profile_picture_url} className=\"w-12 h-12 rounded-full\" />  <div className=\"ml-4\">    <p className=\"text-lg\">{username}</p>    <p className=\"text-gray-600\">{name}</p>  </div>  <button className=\"ml-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Follow  </button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `UserSuggestionCard` components.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first, and accessible list of user suggestions with profile pictures, usernames, and follow buttons. The list should be easy to navigate and understand, with clear typography and sufficient whitespace.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Who to Follow</h2>\n  <UserList>\n    <UserProfileSuggestion />\n    <UserProfileSuggestion />\n    <!-- more user suggestions here -->\n  </UserList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSuggestion",
          "is_standalone": true,
          "description": "a standalone component representing a single user suggestion, with a profile picture, username, and follow button.",
          "html": "<div className=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" className=\"w-12 h-12 rounded-full mr-4\" />  <div>    <p className=\"text-lg\">{username}</p>    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Follow</button>  </div></div>"
        },
        {
          "name": "UserList",
          "is_standalone": false,
          "description": "a component that takes children, rendering a list of `UserProfileSuggestion` components.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The \"Who to Follow\" component should display a list of user suggestions with their profile pictures, usernames, and a \"Follow\" button. It should be responsive, accessible, and easy to use.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Who to Follow</h2>\n  <WhoToFollowList>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <UserSuggestionCard/>\n    <!-- Add more UserSuggestionCard components here -->\n  </WhoToFollowList>\n</div>\n",
      "components": [
        {
          "name": "UserSuggestionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single user suggestion.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\">  <div class=\"flex-1\">    <p class=\"text-lg\">{username}</p>    <p class=\"text-gray-600 text-sm\">{bio}</p>  </div>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Follow</button></div>"
        },
        {
          "name": "WhoToFollowList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `UserSuggestionCard` components.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    }
  ],
  "Video Background with Overlay Text": [
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.",
      "html": "<div class=\"flex h-screen w-full\">\n  <VideoBackground/>\n  <OverlayText/>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "Standalone component that renders a full-bleed video background.",
          "html": "<video class=\"h-full w-full object-cover\" loop autoplay muted>  <source src=\"{video_url}\" type=\"video/mp4\" />  Your browser does not support the video tag.</video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": true,
          "description": "Standalone component that renders the overlay text.",
          "html": "<div class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded\">  <h1 class=\"text-3xl\">{heading}</h1>  <p class=\"text-lg\">{subheading}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a video background with overlay text, where the video takes up the full height and width of the screen, and the overlay text is centered on top of the video with a subtle background to make it readable.",
      "html": "<div class=\"h-screen w-screen relative\">\n  <VideoBackground/>\n  <OverlayText/>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "standalone component that renders a full-screen video background",
          "html": "<div class=\"absolute top-0 left-0 w-screen h-screen\">  <video autoplay loop muted>    <source src=\"{video_source}\" type=\"video/mp4\" />  </video></div>"
        },
        {
          "name": "OverlayText",
          "is_standalone": true,
          "description": "standalone component that renders text with a subtle background on top of the video",
          "html": "<div class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl bg-gray-800 bg-opacity-50 py-4 px-8 rounded\">  {overlay_text}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.",
      "html": "<div class=\"h-screen w-screen overflow-hidden\">\n  <VideoBackground/>\n  <div class=\"absolute top-0 left-0 h-screen w-screen flex justify-center items-center\">\n    <OverlayText> <!-- overlay text content will go here --></OverlayText>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "A standalone component that displays a full-screen video.",
          "html": "<video autoplay loop muted playsinline>  <source src={videoUrl} type=\"video/mp4\" /></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": false,
          "description": "A component that takes children and displays text over the video background.",
          "html": "<div class=\"text-3xl font-bold text-white\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-bleed video background with an overlay of text. The video should be responsive and take up the full screen. The overlay text should be centered and have a contrasting background to ensure readability.",
      "html": "<div class=\"flex h-screen w-full\">\n  <VideoBackground/>\n  <OverlayText/>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "Standalone component that renders a full-bleed video background.",
          "html": "<video class=\"h-full w-full object-cover\" loop autoplay muted>  <source src=\"{video_url}\" type=\"video/mp4\" />  Your browser does not support the video tag.</video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": true,
          "description": "Standalone component that renders the overlay text.",
          "html": "<div class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center py-4 px-8 bg-white bg-opacity-75 rounded\">  <h1 class=\"text-3xl\">{heading}</h1>  <p class=\"text-lg\">{subheading}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a full-screen video background with overlay text. The video background should be responsive and adapt to different screen sizes. The overlay text should be centered and easily readable.",
      "html": "<div class=\"h-screen w-full\">\n  <VideoBackground/>\n  <div class=\"absolute inset-0 flex justify-center items-center\">\n    <OverlayText/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "VideoBackground",
          "is_standalone": true,
          "description": "standalone component that renders a full-screen video background",
          "html": "<video autoplay muted loop class=\"h-full w-full object-cover\">  <source src=\"{video_source}\" type=\"video/mp4\"></video>"
        },
        {
          "name": "OverlayText",
          "is_standalone": true,
          "description": "standalone component that renders the overlay text",
          "html": "<h1 class=\"text-3xl text-white\">{overlay_text}</h1>"
        }
      ]
    }
  ],
  "Switches/Toggles/Buttons": [
    {
      "description": "A toggle button, a switch, and a button, each with a different style, layout, and purpose.",
      "html": "<div class=\"flex flex-col gap-4 p-4\">\n  <ToggleSwitch />\n  <SwitchButton />\n  <ActionButton/>\n</div>\n",
      "components": [
        {
          "name": "ToggleSwitch",
          "is_standalone": true,
          "description": "A toggle switch component that can be either on or off. Standalone.",
          "html": "<label class=\"inline-flex items-center\">  <input type=\"checkbox\" class=\"hidden\" />  <span class=\"toggle-slider round\"></span></label>"
        },
        {
          "name": "SwitchButton",
          "is_standalone": true,
          "description": "A switch button component that can be either enabled or disabled. Standalone.",
          "html": "<button class=\"bg-{color}-500 hover:bg-{color}-700 text-white hover:text-white py-2 px-4 rounded\">  {label}</button>"
        },
        {
          "name": "ActionButton",
          "is_standalone": true,
          "description": "A button component that can be clicked to perform an action. Standalone.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white hover:text-white py-2 px-4 rounded\">  {label}</button>"
        }
      ]
    }
  ],
  "Comment Thread: Display comments and replies": [
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive comment thread that displays comments and their replies in a hierarchical structure. The design should be mobile-first, accessible, and SEO-friendly. Each comment should have an avatar, username, comment text, and a reply button. Replies should be indented and have a different background color to differentiate them from top-level comments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <CommentThread/>\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "standalone, displays the entire comment thread",
          "html": "<ul class=\"list-none mb-4\">  {comments.map((comment) => (    <li key={comment.id}>      <Comment comment={comment} />      <Replies replies={comment.replies} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone, displays a single comment with avatar, username, and comment text",
          "html": "<div class=\"flex items-start mb-4\">  <img src={avatar_url} alt={username} class=\"w-10 h-10 rounded-full mr-4\" />  <div class=\"flex-1\">    <h5 class=\"text-lg\">{username}</h5>    <p class=\"text-gray-600\">{comment_text}</p>    <ReplyButton commentId={id} />  </div></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a button to reply to a comment",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "Replies",
          "is_standalone": true,
          "description": "standalone, displays a list of replies to a comment",
          "html": "<ul class=\"list-none pl-4\">  {replies.map((reply) => (    <li key={reply.id}>      <Comment comment={reply} />    </li>  ))}</ul>"
        }
      ]
    }
  ],
  "Custom Scrollbars": [
    {
      "description": "The UI should display a scrollbar with a custom design, including a track and a thumb. The scrollbar should be responsive and mobile-friendly.",
      "html": "<div class=\"h-screen overflow-y-auto\">\n  <ScrollbarWrapper>\n    <ScrollbarTrack>\n      <ScrollbarThumb />\n    </ScrollbarTrack>\n  </ScrollbarWrapper>\n  <!-- content to be scrolled -->\n  <p>{content}</p>\n</div>\n",
      "components": [
        {
          "name": "ScrollbarWrapper",
          "is_standalone": true,
          "description": "(standalone): The outer container for the scrollbar.",
          "html": "<div class=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-200 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarTrack",
          "is_standalone": true,
          "description": "(standalone): The track of the scrollbar.",
          "html": "<div class=\"w-full h-full bg-gray-100 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarThumb",
          "is_standalone": true,
          "description": "(standalone): The thumb of the scrollbar.",
          "html": "<div class=\"w-full h-1/2 bg-blue-500 rounded-md\"></div>"
        }
      ]
    },
    {
      "description": "The UI should display a scrollbar with a custom design, including a track and a thumb. The scrollbar should be responsive and mobile-friendly.",
      "html": "<div class=\"h-screen overflow-y-auto\">\n  <ScrollbarWrapper>\n    <ScrollbarTrack>\n      <ScrollbarThumb />\n    </ScrollbarTrack>\n  </ScrollbarWrapper>\n  <!-- content to be scrolled -->\n  <p>{content}</p>\n</div>\n",
      "components": [
        {
          "name": "ScrollbarWrapper",
          "is_standalone": true,
          "description": "(standalone): The outer container for the scrollbar.",
          "html": "<div class=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-200 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarTrack",
          "is_standalone": true,
          "description": "(standalone): The track of the scrollbar.",
          "html": "<div class=\"w-full h-full bg-gray-100 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarThumb",
          "is_standalone": true,
          "description": "(standalone): The thumb of the scrollbar.",
          "html": "<div class=\"w-full h-1/2 bg-blue-500 rounded-md\"></div>"
        }
      ]
    },
    {
      "description": "The UI should display a scrollbar with a custom design, including a track and a thumb. The scrollbar should be responsive and mobile-friendly.",
      "html": "<div class=\"h-screen overflow-y-auto\">\n  <ScrollbarWrapper>\n    <ScrollbarTrack>\n      <ScrollbarThumb />\n    </ScrollbarTrack>\n  </ScrollbarWrapper>\n  <!-- content to be scrolled -->\n  <p>{content}</p>\n</div>\n",
      "components": [
        {
          "name": "ScrollbarWrapper",
          "is_standalone": true,
          "description": "(standalone): The outer container for the scrollbar.",
          "html": "<div class=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-200 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarTrack",
          "is_standalone": true,
          "description": "(standalone): The track of the scrollbar.",
          "html": "<div class=\"w-full h-full bg-gray-100 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarThumb",
          "is_standalone": true,
          "description": "(standalone): The thumb of the scrollbar.",
          "html": "<div class=\"w-full h-1/2 bg-blue-500 rounded-md\"></div>"
        }
      ]
    },
    {
      "description": "The UI should display a scrollbar with a custom design, including a track and a thumb. The scrollbar should be responsive and mobile-friendly.",
      "html": "<div class=\"h-screen overflow-y-auto\">\n  <ScrollbarWrapper>\n    <ScrollbarTrack>\n      <ScrollbarThumb />\n    </ScrollbarTrack>\n  </ScrollbarWrapper>\n  <!-- content to be scrolled -->\n  <p>{content}</p>\n</div>\n",
      "components": [
        {
          "name": "ScrollbarWrapper",
          "is_standalone": true,
          "description": "(standalone): The outer container for the scrollbar.",
          "html": "<div class=\"absolute top-0 right-0 bottom-0 w-4 bg-gray-200 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarTrack",
          "is_standalone": true,
          "description": "(standalone): The track of the scrollbar.",
          "html": "<div class=\"w-full h-full bg-gray-100 rounded-md\"></div>"
        },
        {
          "name": "ScrollbarThumb",
          "is_standalone": true,
          "description": "(standalone): The thumb of the scrollbar.",
          "html": "<div class=\"w-full h-1/2 bg-blue-500 rounded-md\"></div>"
        }
      ]
    }
  ],
  "Message body text editor with formatting tools": [
    {
      "description": "The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.",
      "html": "<div class=\"flex flex-col h-screen max-h-screen overflow-y-auto p-4\">\n  <TextEditor/>\n</div>\n",
      "components": [
        {
          "name": "TextEditor",
          "is_standalone": true,
          "description": "(standalone): The main text editor component containing the text area and toolbar.",
          "html": "<div class=\"flex flex-col h-full w-full\">  <Toolbar/>  <textarea class=\"w-full p-2 h-full overflow-y-auto resize-y\" /></div>"
        },
        {
          "name": "Toolbar",
          "is_standalone": true,
          "description": "(standalone): The toolbar component containing the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <ToolButton>    <i class=\"fas fa-bold\" />  </ToolButton>  <ToolButton>    <i class=\"fas fa-italic\" />  </ToolButton>  <ToolButton>    <i class=\"fas fa-underline\" />  </ToolButton>  <ToolButton>    <span>Font size: {font_size}</span>    <select class=\"pl-2\">      <option value=\"10\">10px</option>      <option value=\"12\">12px</option>      <option value=\"14\">14px</option>    </select>  </ToolButton></div>"
        },
        {
          "name": "ToolButton",
          "is_standalone": false,
          "description": "(takes children): A single tool button in the toolbar, containing an icon and optional text.",
          "html": "<button class=\"py-2 px-4 rounded-md hover:bg-gray-100\">  {children}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.",
      "html": "<div class=\"flex flex-col h-screen max-h-screen overflow-y-auto p-4\">\n  <TextEditor/>\n</div>\n",
      "components": [
        {
          "name": "TextEditor",
          "is_standalone": true,
          "description": "(standalone): The main text editor component containing the text area and toolbar.",
          "html": "<div class=\"flex flex-col h-full w-full\">  <Toolbar/>  <textarea class=\"w-full p-2 h-full overflow-y-auto resize-y\" /></div>"
        },
        {
          "name": "Toolbar",
          "is_standalone": true,
          "description": "(standalone): The toolbar component containing the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <ToolButton>    <i class=\"fas fa-bold\" />  </ToolButton>  <ToolButton>    <i class=\"fas fa-italic\" />  </ToolButton>  <ToolButton>    <i class=\"fas fa-underline\" />  </ToolButton>  <ToolButton>    <span>Font size: {font_size}</span>    <select class=\"pl-2\">      <option value=\"10\">10px</option>      <option value=\"12\">12px</option>      <option value=\"14\">14px</option>    </select>  </ToolButton></div>"
        },
        {
          "name": "ToolButton",
          "is_standalone": false,
          "description": "(takes children): A single tool button in the toolbar, containing an icon and optional text.",
          "html": "<button class=\"py-2 px-4 rounded-md hover:bg-gray-100\">  {children}</button>"
        }
      ]
    },
    {
      "description": "The UI should resemble a text editor with a toolbar above the editing area, containing formatting tools such as bold, italic, underline, font size, and font family. The user should be able to input text into the editor and apply formatting to the selected text.",
      "html": "<div className=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <Editor/>\n</div>\n",
      "components": [
        {
          "name": "Toolbar",
          "is_standalone": true,
          "description": "Standalone component, contains formatting tools",
          "html": "<div className=\"bg-gray-200 p-2 flex justify-between\">  <FormattingTool icon=\"bold\" />  <FormattingTool icon=\"italic\" />  <FormattingTool icon=\"underline\" />  <FontFamilyDropdown />  <FontSizeSlider /></div>"
        },
        {
          "name": "Editor",
          "is_standalone": true,
          "description": "Standalone component, contains the text editing area",
          "html": "<div   contentEditable=\"true\"   className=\"p-4 h-full overflow-y-auto\"   tabIndex=\"0\">  {editorContent}</div>"
        },
        {
          "name": "FormattingTool",
          "is_standalone": true,
          "description": "Standalone component, individual formatting tool (e.g. bold, italic, etc.)",
          "html": "<button   className=\"rounded p-2 hover:bg-gray-300\"  onClick={handleFormattingToolClick}>  <i className={`fa fa-${icon}`} /></button>"
        },
        {
          "name": "FontFamilyDropdown",
          "is_standalone": true,
          "description": "Standalone component, dropdown list of font families",
          "html": "<select   className=\"py-2 px-4 border border-gray-300\"  onChange={handleFontFamilyChange}>  <option value=\"Arial\">Arial</option>  <option value=\"Calibri\">Calibri</option>  <!-- other font family options --></select>"
        },
        {
          "name": "FontSizeSlider",
          "is_standalone": true,
          "description": "Standalone component, slider to adjust font size",
          "html": "<input   type=\"range\"   min=\"8\"   max=\"24\"   value={fontSize}   onChange={handleFontSizeChange}   className=\"w-full\"/>"
        }
      ]
    }
  ],
  "News or updates section with date and title": [
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates with each item displaying a date and title. The list should be responsive and accessible on various devices.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-2xl font-bold mb-4\">News & Updates</h2>\n  <NewsList>\n    <NewsItem/>\n    <NewsItem/>\n    <!-- insert more NewsItem components here -->\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsItem",
          "is_standalone": true,
          "description": "component: standalone",
          "html": "<div className=\"flex mb-4\">  <p className=\"text-gray-500 text-sm\">{date}</p>  <h3 className=\"text-lg font-bold\">{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "component: takes children",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A section displaying news or updates with a date and title.",
      "html": "<section className=\"max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md\">\n  <UpdateCard />\n  <UpdateCard />\n  <!-- Add more UpdateCard components as needed -->\n</section>\n",
      "components": [
        {
          "name": "UpdateCard",
          "is_standalone": true,
          "description": "Standalone component displaying a single update.",
          "html": "<div className=\"flex flex-wrap mb-4\">  <UpdateDate />  <UpdateTitle /></div>"
        },
        {
          "name": "UpdateDate",
          "is_standalone": true,
          "description": "Standalone component displaying the date of the update.",
          "html": "<p className=\"text-sm text-gray-600\">{date}</p>"
        },
        {
          "name": "UpdateTitle",
          "is_standalone": true,
          "description": "Standalone component displaying the title of the update.",
          "html": "<h3 className=\"text-lg font-bold\">{title}</h3>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.",
      "html": "<div className=\"container max-w-md mx-auto p-4 md:p-8\">\n  <h2>News and Updates</h2>\n  <NewsList>\n    <NewsCard />\n    <NewsCard />\n    <NewsCard />\n  </NewsList>\n</div>\n",
      "components": [
        {
          "name": "NewsCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single news or update item.",
          "html": "<div className=\"mb-4 p-4 border-b border-gray-200\">  <time dateTime=\"{date_iso}\">{date_display}</time>  <h3>{title}</h3></div>"
        },
        {
          "name": "NewsList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of news or update items.",
          "html": "<ul className=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Security Center: Monitor system security": [
    {
      "description": "The Security Center UI should be a simple and easy-to-understand dashboard that displays system security information. It should have a sidebar with a heading and a list of links, a main content area with a heading and a summary of system security, and a call-to-action button to take action if the system is not secure.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 p-4\">\n    <SecuritySummary>\n      <h2>System Security</h2>\n      <p>{system_security_status}.</p>\n    </SecuritySummary>\n    <CallToAction如果不安全 takeaway action</CallToAction>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "Standalone component that contains a heading and a list of links.",
          "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h3 className=\"text-lg font-bold\">Security Center</h3>  <ul>    <li><a href=\"#\">Link 1</a></li>    <li><a href=\"#\">Link 2</a></li>    <!-- more links -->  </ul></div>"
        },
        {
          "name": "SecuritySummary",
          "is_standalone": false,
          "description": "Component that takes children, displays a heading and a summary of system security.",
          "html": "<div className=\"p-4\">  <h2>{heading}</h2>  <p>{summary_text}</p>  {children}</div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "Standalone component that displays a button to take action if the system is not secure.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {call_to_action_text}</button>"
        }
      ]
    },
    {
      "description": "The Security Center UI should be a simple and easy-to-understand dashboard that displays system security information. It should have a sidebar with a heading and a list of links, a main content area with a heading and a summary of system security, and a call-to-action button to take action if the system is not secure.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 p-4\">\n    <SecuritySummary>\n      <h2>System Security</h2>\n      <p>{system_security_status}.</p>\n    </SecuritySummary>\n    <CallToAction如果不安全 takeaway action</CallToAction>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "Standalone component that contains a heading and a list of links.",
          "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h3 className=\"text-lg font-bold\">Security Center</h3>  <ul>    <li><a href=\"#\">Link 1</a></li>    <li><a href=\"#\">Link 2</a></li>    <!-- more links -->  </ul></div>"
        },
        {
          "name": "SecuritySummary",
          "is_standalone": false,
          "description": "Component that takes children, displays a heading and a summary of system security.",
          "html": "<div className=\"p-4\">  <h2>{heading}</h2>  <p>{summary_text}</p>  {children}</div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "Standalone component that displays a button to take action if the system is not secure.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {call_to_action_text}</button>"
        }
      ]
    },
    {
      "description": "The Security Center UI should be a simple and easy-to-understand dashboard that displays system security information. It should have a sidebar with a heading and a list of links, a main content area with a heading and a summary of system security, and a call-to-action button to take action if the system is not secure.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 p-4\">\n    <SecuritySummary>\n      <h2>System Security</h2>\n      <p>{system_security_status}.</p>\n    </SecuritySummary>\n    <CallToAction如果不安全 takeaway action</CallToAction>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "Standalone component that contains a heading and a list of links.",
          "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h3 className=\"text-lg font-bold\">Security Center</h3>  <ul>    <li><a href=\"#\">Link 1</a></li>    <li><a href=\"#\">Link 2</a></li>    <!-- more links -->  </ul></div>"
        },
        {
          "name": "SecuritySummary",
          "is_standalone": false,
          "description": "Component that takes children, displays a heading and a summary of system security.",
          "html": "<div className=\"p-4\">  <h2>{heading}</h2>  <p>{summary_text}</p>  {children}</div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "Standalone component that displays a button to take action if the system is not secure.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {call_to_action_text}</button>"
        }
      ]
    },
    {
      "description": "The Security Center UI should be a simple and easy-to-understand dashboard that displays system security information. It should have a sidebar with a heading and a list of links, a main content area with a heading and a summary of system security, and a call-to-action button to take action if the system is not secure.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 p-4\">\n    <SecuritySummary>\n      <h2>System Security</h2>\n      <p>{system_security_status}.</p>\n    </SecuritySummary>\n    <CallToAction如果不安全 takeaway action</CallToAction>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "Standalone component that contains a heading and a list of links.",
          "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h3 className=\"text-lg font-bold\">Security Center</h3>  <ul>    <li><a href=\"#\">Link 1</a></li>    <li><a href=\"#\">Link 2</a></li>    <!-- more links -->  </ul></div>"
        },
        {
          "name": "SecuritySummary",
          "is_standalone": false,
          "description": "Component that takes children, displays a heading and a summary of system security.",
          "html": "<div className=\"p-4\">  <h2>{heading}</h2>  <p>{summary_text}</p>  {children}</div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "Standalone component that displays a button to take action if the system is not secure.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {call_to_action_text}</button>"
        }
      ]
    },
    {
      "description": "The Security Center UI should be a simple and easy-to-understand dashboard that displays system security information. It should have a sidebar with a heading and a list of links, a main content area with a heading and a summary of system security, and a call-to-action button to take action if the system is not secure.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 p-4\">\n    <SecuritySummary>\n      <h2>System Security</h2>\n      <p>{system_security_status}.</p>\n    </SecuritySummary>\n    <CallToAction如果不安全 takeaway action</CallToAction>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "Standalone component that contains a heading and a list of links.",
          "html": "<div className=\"w-64 bg-gray-100 p-4\">  <h3 className=\"text-lg font-bold\">Security Center</h3>  <ul>    <li><a href=\"#\">Link 1</a></li>    <li><a href=\"#\">Link 2</a></li>    <!-- more links -->  </ul></div>"
        },
        {
          "name": "SecuritySummary",
          "is_standalone": false,
          "description": "Component that takes children, displays a heading and a summary of system security.",
          "html": "<div className=\"p-4\">  <h2>{heading}</h2>  <p>{summary_text}</p>  {children}</div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "Standalone component that displays a button to take action if the system is not secure.",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {call_to_action_text}</button>"
        }
      ]
    }
  ],
  "Skill meter with percentage counters": [
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    },
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    },
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    },
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    },
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    },
    {
      "description": "The UI should display a skill meter with a percentage counter, which is a combination of a progress bar and a percentage value. The progress bar should be responsive and mobile-friendly, with a clear visual indication of the progress.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SkillMeter skillName=\"JavaScript\" percentage={percentageValue} />\n</div>\n",
      "components": [
        {
          "name": "SkillMeter",
          "is_standalone": true,
          "description": "(standalone): The main component that renders the progress bar and percentage counter.",
          "html": "<div class=\"flex items-center\">  <ProgressBar percentage={percentageValue} />  <PercentageCounter percentage={percentageValue} />  <span class=\"ml-2\">{skillName}</span></div>"
        },
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "(standalone): A component that renders a progress bar with a specific width.",
          "html": "<div class=\"w-full bg-gray-200 h-2\">  <div class=\"bg-orange-500 h-2\" style={{ width: `${percentageValue}%` }}></div></div>"
        },
        {
          "name": "PercentageCounter",
          "is_standalone": true,
          "description": "(standalone): A component that displays the percentage value.",
          "html": "<p class=\"text-sm\">{percentageValue}%</p>"
        }
      ]
    }
  ],
  "Settings icon with dropdown menu options": [
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon with a dropdown menu that appears when the icon is clicked. The dropdown menu should have multiple options.",
      "html": "<div class=\"relative\">\n  <SettingsIcon/>\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "(standalone): A settings icon that toggles the dropdown menu.",
          "html": "<button class=\"text-gray-700 hover:text-gray-900 transition duration-300 ease-in-out\">  <i class=\"fas fa-cog\"></i></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children): A dropdown menu that contains multiple options.",
          "html": "<div class=\"absolute top-full right-0 w-48 bg-white border rounded-md shadow-md\">  {children}</div>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "(standalone): A single option within the dropdown menu.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 text-gray-700 hover:text-gray-900 transition duration-300 ease-in-out\">  {option_label}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon with a dropdown menu that appears when the icon is clicked. The dropdown menu should have multiple options.",
      "html": "<div className=\"relative inline-block\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "standalone component that renders the settings icon",
          "html": "<i className=\"fas fa-cog text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\" />"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "component that takes children, which are the dropdown menu options",
          "html": "<div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  {children}</div>"
        },
        {
          "name": "DropdownMenuItem",
          "is_standalone": true,
          "description": "standalone component that renders a single dropdown menu option",
          "html": "<a href=\"#\" className=\"block px-4 py-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out\">  {menuItemLabel}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon with a dropdown menu that appears when the icon is clicked. The dropdown menu should have multiple options.",
      "html": "<div class=\"relative\">\n  <SettingsIcon/>\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "(standalone): A settings icon that toggles the dropdown menu.",
          "html": "<button class=\"text-gray-700 hover:text-gray-900 transition duration-300 ease-in-out\">  <i class=\"fas fa-cog\"></i></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children): A dropdown menu that contains multiple options.",
          "html": "<div class=\"absolute top-full right-0 w-48 bg-white border rounded-md shadow-md\">  {children}</div>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "(standalone): A single option within the dropdown menu.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 text-gray-700 hover:text-gray-900 transition duration-300 ease-in-out\">  {option_label}</a>"
        }
      ]
    },
    {
      "description": "A settings icon with a dropdown menu that appears when clicked, containing several menu options.",
      "html": "<div class=\"relative inline-block\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-full inline-block\">  <i class=\"fas fa-cog text-lg\"></i></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden bg-white border rounded shadow-md absolute right-0 mt-2 py-2 w-48\">  {children}</div>"
        },
        {
          "name": "DropdownMenuItem",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<a href=\"#\" class=\"block py-2 px-4 text-gray-600 hover:bg-gray-100\">  {menuItem_text}</a>"
        }
      ]
    },
    {
      "description": "The UI should be a settings icon that, when clicked, reveals a dropdown menu with multiple options. The settings icon should be a gear icon. The dropdown menu should be positioned below the settings icon and have a white background with a subtle box shadow. Each menu option should be a clickable item with a hover effect.",
      "html": "<div class=\"relative\">\n  <SettingsIcon />\n  <DropdownMenu>\n    <!-- Menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "SettingsIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a gear icon.",
          "html": "<i class=\"fas fa-cog fa-lg text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out\"></i>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children, which are the individual menu options.",
          "html": "<div class=\"absolute z-10 w-48 bg-white rounded shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuOption",
          "is_standalone": true,
          "description": "A standalone component that displays a clickable menu option.",
          "html": "<a href=\"#\" class=\"block py-2 px-4 hover:bg-gray-100 transition duration-300 ease-in-out\">{menu_option_text}</a>"
        }
      ]
    }
  ],
  "Featured Story with Large Header Text": [
    {
      "description": "A featured story section with a large header text, responsive and mobile-friendly, with a clean and simple design.",
      "html": "<section className=\"max-w-md mx-auto p-4\">\n  <FeaturedStory/>\n</section>\n",
      "components": [
        {
          "name": "FeaturedStory",
          "is_standalone": true,
          "description": "Standalone component that contains the large header text and story information.",
          "html": "<div className=\"bg-white shadow-md rounded p-4\">  <HeaderTitle>{story_title}</HeaderTitle>  <p className=\"text-lg\">{story_text}</p></div>"
        },
        {
          "name": "HeaderTitle",
          "is_standalone": true,
          "description": "Standalone component for the large header text.",
          "html": "<h1 className=\"text-3xl font-bold\">{title_text}</h1>"
        }
      ]
    }
  ],
  "Poll/Voting Systems": [
    {
      "description": "The UI should display a poll question, multiple choice options, and a submit button. The UI should be responsive, accessible, and easy to use on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PollQuestion />\n  <OptionList>\n    <OptionButton>Option 1</OptionButton>\n    <OptionButton>Option 2</OptionButton>\n    <OptionButton>Option 3</OptionButton>\n  </OptionList>\n  <SubmitButton />\n  <PollFooter />\n</div>\n",
      "components": [
        {
          "name": "PollQuestion",
          "is_standalone": true,
          "description": "standalone, displays the poll question",
          "html": "<h2 class=\"text-lg font-bold\">{poll_question}</h2>"
        },
        {
          "name": "OptionButton",
          "is_standalone": true,
          "description": "standalone, displays a single option with a radio button",
          "html": "<label class=\"block mb-2\">  <input type=\"radio\" name=\"option\" value=\"{option_value}\" />  <span class=\"text-lg\">{option_text}</span></label>"
        },
        {
          "name": "OptionList",
          "is_standalone": false,
          "description": "takes children, displays a list of `OptionButton` components",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "standalone, displays a submit button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Submit Vote</button>"
        },
        {
          "name": "PollFooter",
          "is_standalone": true,
          "description": "standalone, displays any additional information or instructions",
          "html": "<p class=\"text-sm text-gray-600\">{footer_text}</p>"
        }
      ]
    },
    {
      "description": "A poll/voting system UI should display a question, several options to choose from, and the current voting results. It should also allow users to cast their votes.",
      "html": "<div class=\"flex flex-col gap-4\">\n  <PollQuestion />\n  <div class=\"flex flex-col gap-2\">\n    <PollOption>Option 1</PollOption>\n    <PollOption>Option 2</PollOption>\n    <PollOption>Option 3</PollOption>\n  </div>\n  <VoteButton />\n  <VoteResults>\n    <p>Results:</p>\n    <ul>\n      <li>Option 1: {option1_votes} votes</li>\n      <li>Option 2: {option2_votes} votes</li>\n      <li>Option 3: {option3_votes} votes</li>\n    </ul>\n  </VoteResults>\n</div>\n",
      "components": [
        {
          "name": "PollQuestion",
          "is_standalone": true,
          "description": "standalone, displays the question being asked",
          "html": "<h2 class=\"text-2xl\">{question_text}</h2>"
        },
        {
          "name": "PollOption",
          "is_standalone": false,
          "description": "takes children, represents a single option with a vote count",
          "html": "<div class=\"flex items-center gap-2\">  <input type=\"radio\" name=\"poll_option\" id={`option_${option_id}`} />  <label for={`option_${option_id}`}>{children}</label>  <span class=\"text-gray-500\">{vote_count} votes</span></div>"
        },
        {
          "name": "VoteButton",
          "is_standalone": true,
          "description": "standalone, allows users to cast their vote",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Cast Your Vote</button>"
        },
        {
          "name": "VoteResults",
          "is_standalone": false,
          "description": "takes children, displays the current voting results",
          "html": "<div class=\"bg-gray-100 p-4 rounded\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a poll question, multiple choice options, and a submit button. The UI should be responsive, accessible, and easy to use on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PollQuestion />\n  <OptionList>\n    <OptionButton>Option 1</OptionButton>\n    <OptionButton>Option 2</OptionButton>\n    <OptionButton>Option 3</OptionButton>\n  </OptionList>\n  <SubmitButton />\n  <PollFooter />\n</div>\n",
      "components": [
        {
          "name": "PollQuestion",
          "is_standalone": true,
          "description": "standalone, displays the poll question",
          "html": "<h2 class=\"text-lg font-bold\">{poll_question}</h2>"
        },
        {
          "name": "OptionButton",
          "is_standalone": true,
          "description": "standalone, displays a single option with a radio button",
          "html": "<label class=\"block mb-2\">  <input type=\"radio\" name=\"option\" value=\"{option_value}\" />  <span class=\"text-lg\">{option_text}</span></label>"
        },
        {
          "name": "OptionList",
          "is_standalone": false,
          "description": "takes children, displays a list of `OptionButton` components",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "standalone, displays a submit button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Submit Vote</button>"
        },
        {
          "name": "PollFooter",
          "is_standalone": true,
          "description": "standalone, displays any additional information or instructions",
          "html": "<p class=\"text-sm text-gray-600\">{footer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a poll question, multiple choice options, and a submit button. The UI should be responsive, accessible, and easy to use on various devices.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PollQuestion />\n  <OptionList>\n    <OptionButton>Option 1</OptionButton>\n    <OptionButton>Option 2</OptionButton>\n    <OptionButton>Option 3</OptionButton>\n  </OptionList>\n  <SubmitButton />\n  <PollFooter />\n</div>\n",
      "components": [
        {
          "name": "PollQuestion",
          "is_standalone": true,
          "description": "standalone, displays the poll question",
          "html": "<h2 class=\"text-lg font-bold\">{poll_question}</h2>"
        },
        {
          "name": "OptionButton",
          "is_standalone": true,
          "description": "standalone, displays a single option with a radio button",
          "html": "<label class=\"block mb-2\">  <input type=\"radio\" name=\"option\" value=\"{option_value}\" />  <span class=\"text-lg\">{option_text}</span></label>"
        },
        {
          "name": "OptionList",
          "is_standalone": false,
          "description": "takes children, displays a list of `OptionButton` components",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "standalone, displays a submit button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Submit Vote</button>"
        },
        {
          "name": "PollFooter",
          "is_standalone": true,
          "description": "standalone, displays any additional information or instructions",
          "html": "<p class=\"text-sm text-gray-600\">{footer_text}</p>"
        }
      ]
    }
  ],
  "Responsive Maps and Directions": [
    {
      "description": "The UI should display a responsive map with a search bar, and a directions panel that shows the route and directions between two points.",
      "html": "<div class=\"flex h-screen\">\n  <ResponsiveMapContainer />\n  <div class=\"w-1/3 p-4\">\n    <SearchBar />\n    <DirectionsPanel>\n      <RouteDetails>\n        <p>{distance} km, {time} minutes</p>\n      </RouteDetails>\n      {directions.map((direction, index) => (\n        <DirectionStep key={index}>{direction}</DirectionStep>\n      ))}\n    </DirectionsPanel>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ResponsiveMapContainer",
          "is_standalone": true,
          "description": "(standalone) - a container for the map",
          "html": "<div class=\"w-full h-full relative\">  <div class=\"absolute top-0 left-0 w-full h-full\" id=\"map\"></div></div>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a search bar for entering locations",
          "html": "<input class=\"w-full p-2 pl-10 text-sm\" type=\"text\" placeholder=\"Enter location\" /><button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Search</button>"
        },
        {
          "name": "DirectionsPanel",
          "is_standalone": false,
          "description": "(takes children) - a panel for displaying directions",
          "html": "<div class=\"p-4 bg-white shadow-md rounded\">{children}</div>"
        },
        {
          "name": "RouteDetails",
          "is_standalone": false,
          "description": "(takes children) - a component for displaying route details (e.g. distance, time)",
          "html": "<div class=\"p-2 border-b border-gray-200\">  {children}</div>"
        },
        {
          "name": "DirectionStep",
          "is_standalone": false,
          "description": "(takes children) - a component for displaying a single direction step",
          "html": "<div class=\"p-2 border-b border-gray-200\">  <p>{children}</p></div>"
        }
      ]
    }
  ],
  "Post Reply and Editing Tools": [
    {
      "description": "The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostReply />\n  <EditingTools />\n  <ReplySubmitButton />\n</div>\n",
      "components": [
        {
          "name": "PostReply",
          "is_standalone": true,
          "description": "standalone, includes a text area and a submit button",
          "html": "<textarea   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   id=\"reply\"   name=\"reply\"   placeholder=\"Type your reply...\"></textarea>"
        },
        {
          "name": "EditingTools",
          "is_standalone": true,
          "description": "standalone, includes buttons for bold, italic, and link",
          "html": "<div class=\"flex justify-between p-2\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Bold  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Italic  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Link  </button></div>"
        },
        {
          "name": "ReplySubmitButton",
          "is_standalone": true,
          "description": "standalone, a submit button to post the reply",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
        }
      ]
    },
    {
      "description": "The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostReply />\n  <EditingTools />\n  <ReplySubmitButton />\n</div>\n",
      "components": [
        {
          "name": "PostReply",
          "is_standalone": true,
          "description": "standalone, includes a text area and a submit button",
          "html": "<textarea   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   id=\"reply\"   name=\"reply\"   placeholder=\"Type your reply...\"></textarea>"
        },
        {
          "name": "EditingTools",
          "is_standalone": true,
          "description": "standalone, includes buttons for bold, italic, and link",
          "html": "<div class=\"flex justify-between p-2\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Bold  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Italic  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Link  </button></div>"
        },
        {
          "name": "ReplySubmitButton",
          "is_standalone": true,
          "description": "standalone, a submit button to post the reply",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
        }
      ]
    },
    {
      "description": "The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostReply />\n  <EditingTools />\n  <ReplySubmitButton />\n</div>\n",
      "components": [
        {
          "name": "PostReply",
          "is_standalone": true,
          "description": "standalone, includes a text area and a submit button",
          "html": "<textarea   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   id=\"reply\"   name=\"reply\"   placeholder=\"Type your reply...\"></textarea>"
        },
        {
          "name": "EditingTools",
          "is_standalone": true,
          "description": "standalone, includes buttons for bold, italic, and link",
          "html": "<div class=\"flex justify-between p-2\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Bold  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Italic  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Link  </button></div>"
        },
        {
          "name": "ReplySubmitButton",
          "is_standalone": true,
          "description": "standalone, a submit button to post the reply",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
        }
      ]
    },
    {
      "description": "The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <PostReply />\n  <EditingTools />\n  <ReplySubmitButton />\n</div>\n",
      "components": [
        {
          "name": "PostReply",
          "is_standalone": true,
          "description": "standalone, includes a text area and a submit button",
          "html": "<textarea   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   id=\"reply\"   name=\"reply\"   placeholder=\"Type your reply...\"></textarea>"
        },
        {
          "name": "EditingTools",
          "is_standalone": true,
          "description": "standalone, includes buttons for bold, italic, and link",
          "html": "<div class=\"flex justify-between p-2\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Bold  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Italic  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Link  </button></div>"
        },
        {
          "name": "ReplySubmitButton",
          "is_standalone": true,
          "description": "standalone, a submit button to post the reply",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
        }
      ]
    },
    {
      "description": "The UI should display a reply input field with a \"Post Reply\" button and editing tools (e.g., bold, italic, link) above the input field. The editing tools should be grouped together and aligned horizontally. The input field should take up the full width of the container and have a responsive design.",
      "html": "<div class=\"flex flex-col gap-2 mx-auto max-w-md p-4\">\n  <div class=\"flex justify-center\">\n    <EditingTools/>\n  </div>\n  <ReplyInput/>\n  <PostReplyButton/>\n</div>\n",
      "components": [
        {
          "name": "ReplyInput",
          "is_standalone": true,
          "description": "standalone (renders a text input field)",
          "html": "<textarea class=\"w-full p-2 border border-gray-300 rounded-md\" rows=\"5\" placeholder=\"Type your reply...\"></textarea>"
        },
        {
          "name": "EditingTools",
          "is_standalone": true,
          "description": "standalone (renders a group of editing tool buttons)",
          "html": "<div class=\"flex gap-2\">  <ToolButton>{bold_label}</ToolButton>  <ToolButton>{italic_label}</ToolButton>  <ToolButton>{link_label}</ToolButton>  <!-- Add more tool buttons here --></div>"
        },
        {
          "name": "ToolButton",
          "is_standalone": true,
          "description": "standalone (renders a single editing tool button)",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\">  {tool_label}</button>"
        },
        {
          "name": "PostReplyButton",
          "is_standalone": true,
          "description": "standalone (renders a \"Post Reply\" button)",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post Reply</button>"
        }
      ]
    }
  ],
  "Breadcrumbs for navigation": [
    {
      "description": "A horizontal list of links, with each item separated by a separator (e.g. \"/\"), indicating the navigation path. The links should be clickable and the current page should be highlighted.",
      "html": "<nav aria-label=\"Breadcrumb\" class=\"flex flex-wrap\">\n  <Breadcrumbs>\n    <Breadcrumb><a href=\"#\">Home</a></Breadcrumb>\n    <Breadcrumb><a href=\"#\">Category</a></Breadcrumb>\n    <Breadcrumb><span aria-current=\"page\">Current Page</span></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - a single breadcrumb item",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label}</a>  <span class=\"mx-2 text-gray-400\">/</span></li>"
        },
        {
          "name": "Breadcrumbs",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of breadcrumb items",
          "html": "<ol class=\"list-none p-0 m-0\">{children}</ol>"
        }
      ]
    },
    {
      "description": "A horizontal list of links, with each item separated by a separator (e.g. \"/\"), indicating the navigation path. The links should be clickable and the current page should be highlighted.",
      "html": "<nav aria-label=\"Breadcrumb\" class=\"flex flex-wrap\">\n  <Breadcrumbs>\n    <Breadcrumb><a href=\"#\">Home</a></Breadcrumb>\n    <Breadcrumb><a href=\"#\">Category</a></Breadcrumb>\n    <Breadcrumb><span aria-current=\"page\">Current Page</span></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - a single breadcrumb item",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label}</a>  <span class=\"mx-2 text-gray-400\">/</span></li>"
        },
        {
          "name": "Breadcrumbs",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of breadcrumb items",
          "html": "<ol class=\"list-none p-0 m-0\">{children}</ol>"
        }
      ]
    },
    {
      "description": "A horizontal list of links, with each item separated by a separator (e.g. \"/\"), indicating the navigation path. The links should be clickable and the current page should be highlighted.",
      "html": "<nav aria-label=\"Breadcrumb\" class=\"flex flex-wrap\">\n  <Breadcrumbs>\n    <Breadcrumb><a href=\"#\">Home</a></Breadcrumb>\n    <Breadcrumb><a href=\"#\">Category</a></Breadcrumb>\n    <Breadcrumb><span aria-current=\"page\">Current Page</span></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - a single breadcrumb item",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label}</a>  <span class=\"mx-2 text-gray-400\">/</span></li>"
        },
        {
          "name": "Breadcrumbs",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of breadcrumb items",
          "html": "<ol class=\"list-none p-0 m-0\">{children}</ol>"
        }
      ]
    },
    {
      "description": "A horizontal list of links, with each item separated by a separator (e.g. \"/\"), indicating the navigation path. The links should be clickable and the current page should be highlighted.",
      "html": "<nav aria-label=\"Breadcrumb\" class=\"flex flex-wrap\">\n  <Breadcrumbs>\n    <Breadcrumb><a href=\"#\">Home</a></Breadcrumb>\n    <Breadcrumb><a href=\"#\">Category</a></Breadcrumb>\n    <Breadcrumb><span aria-current=\"page\">Current Page</span></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - a single breadcrumb item",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label}</a>  <span class=\"mx-2 text-gray-400\">/</span></li>"
        },
        {
          "name": "Breadcrumbs",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of breadcrumb items",
          "html": "<ol class=\"list-none p-0 m-0\">{children}</ol>"
        }
      ]
    },
    {
      "description": "A horizontal list of links, with each item separated by a separator (e.g. \"/\"), indicating the navigation path. The links should be clickable and the current page should be highlighted.",
      "html": "<nav aria-label=\"Breadcrumb\" class=\"flex flex-wrap\">\n  <Breadcrumbs>\n    <Breadcrumb><a href=\"#\">Home</a></Breadcrumb>\n    <Breadcrumb><a href=\"#\">Category</a></Breadcrumb>\n    <Breadcrumb><span aria-current=\"page\">Current Page</span></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - a single breadcrumb item",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label}</a>  <span class=\"mx-2 text-gray-400\">/</span></li>"
        },
        {
          "name": "Breadcrumbs",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of breadcrumb items",
          "html": "<ol class=\"list-none p-0 m-0\">{children}</ol>"
        }
      ]
    },
    {
      "description": "The UI should display a sequence of breadcrumbs, each representing a navigation step, separated by a separator (e.g., `/`). The breadcrumbs should be responsive, accessible, and SEO-friendly.",
      "html": "<nav aria-label=\"Breadcrumb navigation\">\n  <ol class=\"flex flex-wrap mb-4 list-none\">\n    <BreadcrumbList>\n      <Breadcrumb/>\n      <!-- more breadcrumbs here -->\n    </BreadcrumbList>\n  </ol>\n</nav>\n",
      "components": [
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone): Represents a single breadcrumb item.",
          "html": "<li class=\"inline-flex items-center\">  <a href=\"{breadcrumb_url}\" class=\"text-gray-600 hover:text-gray-900\">{breadcrumb_label}</a>  <span class=\"text-gray-600\">{separator}</span></li>"
        },
        {
          "name": "BreadcrumbList",
          "is_standalone": false,
          "description": "(takes children): A container for a list of breadcrumbs.",
          "html": "<ol class=\"flex flex-wrap mb-4 list-none\">{children}</ol>"
        }
      ]
    }
  ],
  "User Profile and Reputation System": [
    {
      "description": "The UI should display a user's profile information, including their username, profile picture, reputation score, and badges. The reputation score should be prominently displayed, and the badges should be displayed in a grid or list.",
      "html": "<div class=\"flex justify-center\">\n  <UserProfileHeader />\n  <div class=\"ml-4\">\n    <ReputationScore />\n    <BadgeGrid>\n      <Badge />\n      <Badge />\n      <!-- More badges here -->\n    </BadgeGrid>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the user's profile picture and username.",
          "html": "<div class=\"flex items-center\">  <img src=\"{profile_picture_url}\" alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full\" />  <h2 class=\"ml-2 text-lg\">{username}</h2></div>"
        },
        {
          "name": "ReputationScore",
          "is_standalone": true,
          "description": "Standalone component that displays the user's reputation score.",
          "html": "<h3 class=\"text-lg font-bold\">{reputation_score} Reputation</h3>"
        },
        {
          "name": "BadgeGrid",
          "is_standalone": false,
          "description": "Component that takes children, which are `Badge` components.",
          "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "Standalone component that displays a single badge.",
          "html": "<li class=\"mr-2 mb-2\">  <img src=\"{badge_image_url}\" alt=\"Badge\" class=\"w-8 h-8\" />  <span class=\"text-sm\">{badge_name}</span></li>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile information, including their username, profile picture, reputation points, and badges earned. The profile picture should be circular and have a hover effect. The reputation points should be displayed in a separate section with a progress bar. The badges earned should be displayed in a horizontal list.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <UserProfileCard />\n  <ReputationSection />\n  <BadgeList>\n    <!-- badge components will be inserted here -->\n  </BadgeList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "Standalone component that displays the user's profile information.",
          "html": "<div class=\"flex flex-col items-center mb-4\">  <ProfilePicture />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "Standalone component that displays the user's profile picture.",
          "html": "<img src=\"{profile_picture_url}\" alt=\"Profile Picture\" class=\"w-24 h-24 rounded-full hover:shadow-md\" />"
        },
        {
          "name": "ReputationSection",
          "is_standalone": true,
          "description": "Standalone component that displays the user's reputation points and progress bar.",
          "html": "<section class=\"mb-4\">  <h3 class=\"text-lg font-bold\">Reputation</h3>  <div class=\"flex items-center\">    <p class=\"mr-2\">{reputation_points}</p>    <div class=\"w-full bg-gray-200 h-4\">      <div class=\"bg-orange-500 h-4\" style={{ width: `${reputation_progress}%` }}></div>    </div>  </div></section>"
        },
        {
          "name": "BadgeList",
          "is_standalone": false,
          "description": "Component that takes children (Badge components).",
          "html": "<ul class=\"flex flex-wrap justify-center mb-4\">  {children}</ul>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "Standalone component that displays a single badge.",
          "html": "<li class=\"mr-2\">  <img src=\"{badge_icon_url}\" alt=\"Badge Icon\" class=\"w-8 h-8\" />  <p class=\"text-gray-600\">{badge_name}</p></li>"
        }
      ]
    }
  ],
  "Top/Bottom Navigation": [
    {
      "description": "The UI should consist of a top navigation bar and a bottom navigation bar. The top navigation bar should have a logo on the left and some navigation links on the right. The bottom navigation bar should have some navigation links.",
      "html": "<div class=\"h-screen flex flex-col\">\n  <TopNavigationBar/>\n  <!-- main content here -->\n  <BottomNavigationBar/>\n</div>\n",
      "components": [
        {
          "name": "TopNavigationBar",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<nav class=\"bg-gray-900 py-4\">  <Logo/>  <ul class=\"flex justify-end\">    <li><Link>Link 1</Link></li>    <li><Link>Link 2</Link></li>    <li><Link>Link 3</Link></li>  </ul></nav>"
        },
        {
          "name": "BottomNavigationBar",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<nav class=\"bg-gray-900 py-4\">  <ul class=\"flex justify-between\">    <li><Link>Link 4</Link></li>    <li><Link>Link 5</Link></li>    <li><Link>Link 6</Link></li>  </ul></nav>"
        },
        {
          "name": "Logo",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<img src={logo_url} alt=\"Logo\" class=\"h-8 w-8\"/>"
        },
        {
          "name": "Link",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<a href={href} class=\"text-white hover:text-gray-200\">{children}</a>"
        }
      ]
    }
  ],
  "Responsive Video Embeds": [
    {
      "description": "The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <ResponsiveVideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "A standalone component that wraps the video iframe.",
          "html": "<div className=\"aspect-w-16 aspect-h-9\">  <VideoIFrame /></div>"
        },
        {
          "name": "VideoIFrame",
          "is_standalone": true,
          "description": "A standalone component that renders the video iframe.",
          "html": "<iframe  className=\"w-full h-full\"  src={`https://www.youtube.com/embed/${video_id}`}  frameBorder=\"0\"  allowFullScreen/>"
        }
      ]
    },
    {
      "description": "A responsive video embed that adjusts to different screen sizes, with a maximum width of 800px and a height that scales accordingly.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <VideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "VideoEmbed",
          "is_standalone": true,
          "description": "standalone component, contains the video iframe and styling.",
          "html": "<!-- wrapper div for video iframe --><div class=\"aspect-w-16 aspect-h-9\">  <!-- iframe with video content -->  <iframe src=\"{video_url}\" frameborder=\"0\" allowfullscreen></iframe></div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <ResponsiveVideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "A standalone component that wraps the video iframe.",
          "html": "<div className=\"aspect-w-16 aspect-h-9\">  <VideoIFrame /></div>"
        },
        {
          "name": "VideoIFrame",
          "is_standalone": true,
          "description": "A standalone component that renders the video iframe.",
          "html": "<iframe  className=\"w-full h-full\"  src={`https://www.youtube.com/embed/${video_id}`}  frameBorder=\"0\"  allowFullScreen/>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <ResponsiveVideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "A standalone component that wraps the video iframe.",
          "html": "<div className=\"aspect-w-16 aspect-h-9\">  <VideoIFrame /></div>"
        },
        {
          "name": "VideoIFrame",
          "is_standalone": true,
          "description": "A standalone component that renders the video iframe.",
          "html": "<iframe  className=\"w-full h-full\"  src={`https://www.youtube.com/embed/${video_id}`}  frameBorder=\"0\"  allowFullScreen/>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <ResponsiveVideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "A standalone component that wraps the video iframe.",
          "html": "<div className=\"aspect-w-16 aspect-h-9\">  <VideoIFrame /></div>"
        },
        {
          "name": "VideoIFrame",
          "is_standalone": true,
          "description": "A standalone component that renders the video iframe.",
          "html": "<iframe  className=\"w-full h-full\"  src={`https://www.youtube.com/embed/${video_id}`}  frameBorder=\"0\"  allowFullScreen/>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video embed that adapts to different screen sizes and devices. The video should be centered and have a max width of 100% to ensure it doesn't exceed the parent container's width.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <ResponsiveVideoEmbed />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "A standalone component that wraps the video iframe.",
          "html": "<div className=\"aspect-w-16 aspect-h-9\">  <VideoIFrame /></div>"
        },
        {
          "name": "VideoIFrame",
          "is_standalone": true,
          "description": "A standalone component that renders the video iframe.",
          "html": "<iframe  className=\"w-full h-full\"  src={`https://www.youtube.com/embed/${video_id}`}  frameBorder=\"0\"  allowFullScreen/>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive video embed that takes up the full width of its parent container and maintains a 16:9 aspect ratio.",
      "html": "<div class=\"aspect-w-16 aspect-h-9\">\n  <ResponsiveVideoEmbed/>\n</div>\n",
      "components": [
        {
          "name": "ResponsiveVideoEmbed",
          "is_standalone": true,
          "description": "(standalone) - a container for the video embed",
          "html": "<div class=\"relative w-full h-0 overflow-hidden\">  <VideoIframe src={video_url} frameborder=\"0\" allowfullscreen/></div>"
        },
        {
          "name": "VideoIframe",
          "is_standalone": true,
          "description": "(standalone) - the iframe element for the video",
          "html": "<iframe src={video_url} frameborder=\"0\" allowfullscreen/>"
        }
      ]
    }
  ],
  "Button Groups": [
    {
      "description": "The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <ButtonGroup>\n    <Button/>\n    <Button/>\n    <Button/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "A container component that groups multiple buttons together. This component takes children.",
          "html": "<div class=\"flex flex-wrap justify-center'>{children}</div>"
        },
        {
          "name": "Button",
          "is_standalone": true,
          "description": "An individual button component that can be used to perform an action. This component is standalone.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <ButtonGroup>\n    <Button/>\n    <Button/>\n    <Button/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "A container component that groups multiple buttons together. This component takes children.",
          "html": "<div class=\"flex flex-wrap justify-center'>{children}</div>"
        },
        {
          "name": "Button",
          "is_standalone": true,
          "description": "An individual button component that can be used to perform an action. This component is standalone.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <ButtonGroup>\n    <Button/>\n    <Button/>\n    <Button/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "A container component that groups multiple buttons together. This component takes children.",
          "html": "<div class=\"flex flex-wrap justify-center'>{children}</div>"
        },
        {
          "name": "Button",
          "is_standalone": true,
          "description": "An individual button component that can be used to perform an action. This component is standalone.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <ButtonGroup>\n    <Button/>\n    <Button/>\n    <Button/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "A container component that groups multiple buttons together. This component takes children.",
          "html": "<div class=\"flex flex-wrap justify-center'>{children}</div>"
        },
        {
          "name": "Button",
          "is_standalone": true,
          "description": "An individual button component that can be used to perform an action. This component is standalone.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{button_text}</button>"
        }
      ]
    }
  ],
  "Audio Players": [
    {
      "description": "The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.",
      "html": "<!-- Audio player container -->\n<div class=\"flex flex-col items-center justify-center p-4 md:p-8\">\n  <!-- Audio player controls -->\n  <AudioPlayer />\n</div>\n",
      "components": [
        {
          "name": "AudioPlayer",
          "is_standalone": true,
          "description": "standalone component that contains the audio player controls",
          "html": "<!-- Audio player controls container --><div class=\"flex flex-row items-center justify-center mb-4\">  <!-- Play/pause button -->  <PlayPauseButton />  <!-- Volume controller -->  <VolumeController />  <!-- Audio seek bar -->  <AudioSeekBar /></div>"
        },
        {
          "name": "PlayPauseButton",
          "is_standalone": true,
          "description": "standalone component that toggles play and pause states",
          "html": "<!-- Play/pause button container --><button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {play_pause_icon} <!-- play or pause icon --></button>"
        },
        {
          "name": "VolumeController",
          "is_standalone": true,
          "description": "standalone component that allows adjusting the volume",
          "html": "<!-- Volume controller container --><div class=\"flex flex-row items-center\">  <!-- Volume icon -->  <span class=\"text-gray-600\">{volume_icon} <!-- volume icon --></span>  <!-- Volume slider -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"100\" step=\"1\" value=\"{volume_level}\" /></div>"
        },
        {
          "name": "AudioSeekBar",
          "is_standalone": true,
          "description": "standalone component that displays the audio progress",
          "html": "<!-- Audio seek bar container --><div class=\"flex flex-row items-center\">  <!-- Audio elapsed time -->  <span class=\"text-gray-600\">{elapsed_time} <!-- elapsed time --></span>  <!-- Audio seek bar -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"{audio_duration}\" step=\"1\" value=\"{current_time}\" />  <!-- Audio remaining time -->  <span class=\"text-gray-600\">{remaining_time} <!-- remaining time --></span></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.",
      "html": "<!-- Audio player container -->\n<div class=\"flex flex-col items-center justify-center p-4 md:p-8\">\n  <!-- Audio player controls -->\n  <AudioPlayer />\n</div>\n",
      "components": [
        {
          "name": "AudioPlayer",
          "is_standalone": true,
          "description": "standalone component that contains the audio player controls",
          "html": "<!-- Audio player controls container --><div class=\"flex flex-row items-center justify-center mb-4\">  <!-- Play/pause button -->  <PlayPauseButton />  <!-- Volume controller -->  <VolumeController />  <!-- Audio seek bar -->  <AudioSeekBar /></div>"
        },
        {
          "name": "PlayPauseButton",
          "is_standalone": true,
          "description": "standalone component that toggles play and pause states",
          "html": "<!-- Play/pause button container --><button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {play_pause_icon} <!-- play or pause icon --></button>"
        },
        {
          "name": "VolumeController",
          "is_standalone": true,
          "description": "standalone component that allows adjusting the volume",
          "html": "<!-- Volume controller container --><div class=\"flex flex-row items-center\">  <!-- Volume icon -->  <span class=\"text-gray-600\">{volume_icon} <!-- volume icon --></span>  <!-- Volume slider -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"100\" step=\"1\" value=\"{volume_level}\" /></div>"
        },
        {
          "name": "AudioSeekBar",
          "is_standalone": true,
          "description": "standalone component that displays the audio progress",
          "html": "<!-- Audio seek bar container --><div class=\"flex flex-row items-center\">  <!-- Audio elapsed time -->  <span class=\"text-gray-600\">{elapsed_time} <!-- elapsed time --></span>  <!-- Audio seek bar -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"{audio_duration}\" step=\"1\" value=\"{current_time}\" />  <!-- Audio remaining time -->  <span class=\"text-gray-600\">{remaining_time} <!-- remaining time --></span></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.",
      "html": "<!-- Audio player container -->\n<div class=\"flex flex-col items-center justify-center p-4 md:p-8\">\n  <!-- Audio player controls -->\n  <AudioPlayer />\n</div>\n",
      "components": [
        {
          "name": "AudioPlayer",
          "is_standalone": true,
          "description": "standalone component that contains the audio player controls",
          "html": "<!-- Audio player controls container --><div class=\"flex flex-row items-center justify-center mb-4\">  <!-- Play/pause button -->  <PlayPauseButton />  <!-- Volume controller -->  <VolumeController />  <!-- Audio seek bar -->  <AudioSeekBar /></div>"
        },
        {
          "name": "PlayPauseButton",
          "is_standalone": true,
          "description": "standalone component that toggles play and pause states",
          "html": "<!-- Play/pause button container --><button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {play_pause_icon} <!-- play or pause icon --></button>"
        },
        {
          "name": "VolumeController",
          "is_standalone": true,
          "description": "standalone component that allows adjusting the volume",
          "html": "<!-- Volume controller container --><div class=\"flex flex-row items-center\">  <!-- Volume icon -->  <span class=\"text-gray-600\">{volume_icon} <!-- volume icon --></span>  <!-- Volume slider -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"100\" step=\"1\" value=\"{volume_level}\" /></div>"
        },
        {
          "name": "AudioSeekBar",
          "is_standalone": true,
          "description": "standalone component that displays the audio progress",
          "html": "<!-- Audio seek bar container --><div class=\"flex flex-row items-center\">  <!-- Audio elapsed time -->  <span class=\"text-gray-600\">{elapsed_time} <!-- elapsed time --></span>  <!-- Audio seek bar -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"{audio_duration}\" step=\"1\" value=\"{current_time}\" />  <!-- Audio remaining time -->  <span class=\"text-gray-600\">{remaining_time} <!-- remaining time --></span></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.",
      "html": "<!-- Audio player container -->\n<div class=\"flex flex-col items-center justify-center p-4 md:p-8\">\n  <!-- Audio player controls -->\n  <AudioPlayer />\n</div>\n",
      "components": [
        {
          "name": "AudioPlayer",
          "is_standalone": true,
          "description": "standalone component that contains the audio player controls",
          "html": "<!-- Audio player controls container --><div class=\"flex flex-row items-center justify-center mb-4\">  <!-- Play/pause button -->  <PlayPauseButton />  <!-- Volume controller -->  <VolumeController />  <!-- Audio seek bar -->  <AudioSeekBar /></div>"
        },
        {
          "name": "PlayPauseButton",
          "is_standalone": true,
          "description": "standalone component that toggles play and pause states",
          "html": "<!-- Play/pause button container --><button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {play_pause_icon} <!-- play or pause icon --></button>"
        },
        {
          "name": "VolumeController",
          "is_standalone": true,
          "description": "standalone component that allows adjusting the volume",
          "html": "<!-- Volume controller container --><div class=\"flex flex-row items-center\">  <!-- Volume icon -->  <span class=\"text-gray-600\">{volume_icon} <!-- volume icon --></span>  <!-- Volume slider -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"100\" step=\"1\" value=\"{volume_level}\" /></div>"
        },
        {
          "name": "AudioSeekBar",
          "is_standalone": true,
          "description": "standalone component that displays the audio progress",
          "html": "<!-- Audio seek bar container --><div class=\"flex flex-row items-center\">  <!-- Audio elapsed time -->  <span class=\"text-gray-600\">{elapsed_time} <!-- elapsed time --></span>  <!-- Audio seek bar -->  <input type=\"range\" class=\"w-full h-2 rounded-lg\" min=\"0\" max=\"{audio_duration}\" step=\"1\" value=\"{current_time}\" />  <!-- Audio remaining time -->  <span class=\"text-gray-600\">{remaining_time} <!-- remaining time --></span></div>"
        }
      ]
    }
  ],
  "Modal/Dialog Windows": [
    {
      "description": "A modal window that overlays the main content, with a dark background and a centered white box containing the modal content.",
      "html": "<ModalDialog>\n  <ModalBackground />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody>\n      <ModalBodyContent />\n    </ModalBody>\n    <ModalFooter>\n      <ModalFooterContent />\n    </ModalFooter>\n  </ModalContent>\n</ModalDialog>\n",
      "components": [
        {
          "name": "ModalDialog",
          "is_standalone": true,
          "description": "standalone, contains the entire modal window",
          "html": "<div className=\"fixed inset-0 z-50 overflow-hidden\">  <!-- modal content here --></div>"
        },
        {
          "name": "ModalBackground",
          "is_standalone": true,
          "description": "standalone, the dark background layer",
          "html": "<div className=\"fixed inset-0 bg-gray-900 opacity-50\"></div>"
        },
        {
          "name": "ModalContent",
          "is_standalone": false,
          "description": "takes children, the white box containing the modal content",
          "html": "<div className=\" relative mx-auto p-5 bg-white shadow-md rounded\">  {children}</div>"
        },
        {
          "name": "ModalHeader",
          "is_standalone": true,
          "description": "standalone, the header section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  <h2>{modal_title}</h2></div>"
        },
        {
          "name": "ModalBody",
          "is_standalone": false,
          "description": "takes children, the body section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "ModalFooter",
          "is_standalone": false,
          "description": "takes children, the footer section of the modal content",
          "html": "<div className=\"px-4 py-4 bg-gray-200\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A modal window that overlays the main content, with a dark background and a centered white box containing the modal content.",
      "html": "<ModalDialog>\n  <ModalBackground />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody>\n      <ModalBodyContent />\n    </ModalBody>\n    <ModalFooter>\n      <ModalFooterContent />\n    </ModalFooter>\n  </ModalContent>\n</ModalDialog>\n",
      "components": [
        {
          "name": "ModalDialog",
          "is_standalone": true,
          "description": "standalone, contains the entire modal window",
          "html": "<div className=\"fixed inset-0 z-50 overflow-hidden\">  <!-- modal content here --></div>"
        },
        {
          "name": "ModalBackground",
          "is_standalone": true,
          "description": "standalone, the dark background layer",
          "html": "<div className=\"fixed inset-0 bg-gray-900 opacity-50\"></div>"
        },
        {
          "name": "ModalContent",
          "is_standalone": false,
          "description": "takes children, the white box containing the modal content",
          "html": "<div className=\" relative mx-auto p-5 bg-white shadow-md rounded\">  {children}</div>"
        },
        {
          "name": "ModalHeader",
          "is_standalone": true,
          "description": "standalone, the header section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  <h2>{modal_title}</h2></div>"
        },
        {
          "name": "ModalBody",
          "is_standalone": false,
          "description": "takes children, the body section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "ModalFooter",
          "is_standalone": false,
          "description": "takes children, the footer section of the modal content",
          "html": "<div className=\"px-4 py-4 bg-gray-200\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A modal window that overlays the main content, with a dark background and a centered white box containing the modal content.",
      "html": "<ModalDialog>\n  <ModalBackground />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody>\n      <ModalBodyContent />\n    </ModalBody>\n    <ModalFooter>\n      <ModalFooterContent />\n    </ModalFooter>\n  </ModalContent>\n</ModalDialog>\n",
      "components": [
        {
          "name": "ModalDialog",
          "is_standalone": true,
          "description": "standalone, contains the entire modal window",
          "html": "<div className=\"fixed inset-0 z-50 overflow-hidden\">  <!-- modal content here --></div>"
        },
        {
          "name": "ModalBackground",
          "is_standalone": true,
          "description": "standalone, the dark background layer",
          "html": "<div className=\"fixed inset-0 bg-gray-900 opacity-50\"></div>"
        },
        {
          "name": "ModalContent",
          "is_standalone": false,
          "description": "takes children, the white box containing the modal content",
          "html": "<div className=\" relative mx-auto p-5 bg-white shadow-md rounded\">  {children}</div>"
        },
        {
          "name": "ModalHeader",
          "is_standalone": true,
          "description": "standalone, the header section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  <h2>{modal_title}</h2></div>"
        },
        {
          "name": "ModalBody",
          "is_standalone": false,
          "description": "takes children, the body section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "ModalFooter",
          "is_standalone": false,
          "description": "takes children, the footer section of the modal content",
          "html": "<div className=\"px-4 py-4 bg-gray-200\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A modal window that overlays the main content, with a dark background and a centered white box containing the modal content.",
      "html": "<ModalDialog>\n  <ModalBackground />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody>\n      <ModalBodyContent />\n    </ModalBody>\n    <ModalFooter>\n      <ModalFooterContent />\n    </ModalFooter>\n  </ModalContent>\n</ModalDialog>\n",
      "components": [
        {
          "name": "ModalDialog",
          "is_standalone": true,
          "description": "standalone, contains the entire modal window",
          "html": "<div className=\"fixed inset-0 z-50 overflow-hidden\">  <!-- modal content here --></div>"
        },
        {
          "name": "ModalBackground",
          "is_standalone": true,
          "description": "standalone, the dark background layer",
          "html": "<div className=\"fixed inset-0 bg-gray-900 opacity-50\"></div>"
        },
        {
          "name": "ModalContent",
          "is_standalone": false,
          "description": "takes children, the white box containing the modal content",
          "html": "<div className=\" relative mx-auto p-5 bg-white shadow-md rounded\">  {children}</div>"
        },
        {
          "name": "ModalHeader",
          "is_standalone": true,
          "description": "standalone, the header section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  <h2>{modal_title}</h2></div>"
        },
        {
          "name": "ModalBody",
          "is_standalone": false,
          "description": "takes children, the body section of the modal content",
          "html": "<div className=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "ModalFooter",
          "is_standalone": false,
          "description": "takes children, the footer section of the modal content",
          "html": "<div className=\"px-4 py-4 bg-gray-200\">  {children}</div>"
        }
      ]
    }
  ],
  "Post List: Teasers for latest articles": [
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "A list of teaser articles, with a title, image, and short summary. Should be responsive and look good on desktop and mobile.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2>Latest Articles</h2>\n  <PostList>\n    <PostTeaser />\n    <PostTeaser />\n    <PostTeaser />\n  </PostList>\n</div>\n",
      "components": [
        {
          "name": "PostTeaser",
          "is_standalone": true,
          "description": "(standalone) - a single post teaser component",
          "html": "<article className=\"mb-4 p-4 border border-gray-200 rounded\">  <img src={image_url} alt={post_title} className=\"w-full h-48 object-cover rounded-t\" />  <h3 className=\"text-lg font-bold\">{post_title}</h3>  <p className=\"text-sm\">{post_summary}</p>  <a href={post_url} className=\"text-indigo-600 hover:text-indigo-900\">Read more</a></article>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - the container for the list of post teasers",
          "html": "<ul className=\"flex flex-wrap justify-center\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of article teasers, with each teaser showing the article title, a short summary, and a \"Read more\" button. The list should be responsive, with a maximum of three columns on larger screens and a single column on smaller screens. Each teaser should have a subtle background color and padding to differentiate it from the others.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Latest Articles</h2>\n  <div className=\"flex flex-wrap -mx-4\">\n    <PostList>\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <ArticleTeaser />\n      <!-- Add more ArticleTeaser components as needed -->\n    </PostList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone) - A single article teaser component.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 className=\"text-lg font-bold mb-2\">{article_title}</h3>  <p className=\"text-gray-600\">{article_summary}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Read more</button></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children) - A container component for the list of article teasers.",
          "html": "<div className=\"flex flex-wrap\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a list of article teasers, displaying the title, a brief summary, and a link to read more. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.",
      "html": "<div class=\"container mx-auto p-4\">\n  <PostList>\n    <ArticleTeaser/>\n    <ArticleTeaser/>\n    <ArticleTeaser/>\n    <!-- Add more ArticleTeaser components here -->\n  </PostList>\n</div>\n",
      "components": [
        {
          "name": "ArticleTeaser",
          "is_standalone": true,
          "description": "(standalone): A single article teaser, containing a title, summary, and read more link.",
          "html": "<div class=\"md:flex mb-4\">  <h2 class=\"text-lg font-bold\">{article_title}</h2>  <p class=\"text-gray-600\">{article_summary}</p>  <a href=\"{article_link}\" class=\"text-blue-600 hover:text-blue-900\">Read more</a></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children): A list of article teasers.",
          "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
        }
      ]
    }
  ],
  "Search Bar": [
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SearchBarContainer />\n</div>\n",
      "components": [
        {
          "name": "SearchBarContainer",
          "is_standalone": true,
          "description": "(standalone): The outer container for the search bar.",
          "html": "<div class=\"flex w-full max-w-md mx-auto rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "(standalone): The input field for the search query.",
          "html": "<input type=\"search\" id=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "(standalone): The submit button for the search.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SearchBarContainer />\n</div>\n",
      "components": [
        {
          "name": "SearchBarContainer",
          "is_standalone": true,
          "description": "(standalone): The outer container for the search bar.",
          "html": "<div class=\"flex w-full max-w-md mx-auto rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "(standalone): The input field for the search query.",
          "html": "<input type=\"search\" id=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "(standalone): The submit button for the search.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SearchBarContainer />\n</div>\n",
      "components": [
        {
          "name": "SearchBarContainer",
          "is_standalone": true,
          "description": "(standalone): The outer container for the search bar.",
          "html": "<div class=\"flex w-full max-w-md mx-auto rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "(standalone): The input field for the search query.",
          "html": "<input type=\"search\" id=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "(standalone): The submit button for the search.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SearchBarContainer />\n</div>\n",
      "components": [
        {
          "name": "SearchBarContainer",
          "is_standalone": true,
          "description": "(standalone): The outer container for the search bar.",
          "html": "<div class=\"flex w-full max-w-md mx-auto rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "(standalone): The input field for the search query.",
          "html": "<input type=\"search\" id=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "(standalone): The submit button for the search.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <SearchBarContainer />\n</div>\n",
      "components": [
        {
          "name": "SearchBarContainer",
          "is_standalone": true,
          "description": "(standalone): The outer container for the search bar.",
          "html": "<div class=\"flex w-full max-w-md mx-auto rounded-md shadow-md\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "(standalone): The input field for the search query.",
          "html": "<input type=\"search\" id=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "(standalone): The submit button for the search.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    }
  ],
  "Year/Month Picker Calendars": [
    {
      "description": "The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <YearMonthPicker/>\n</div>\n",
      "components": [
        {
          "name": "YearMonthPicker",
          "is_standalone": true,
          "description": "a standalone component that contains the year and month pickers.",
          "html": "<div class=\"flex flex-col\">  <CalendarHeader/>  <div class=\"flex justify-center mb-4\">    <YearPicker/>    <MonthPicker/>  </div>  <table class=\"w-full\">    <!-- calendar table goes here -->  </table></div>"
        },
        {
          "name": "YearPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a year.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{year1}\">{year1}</option>  <option value=\"{year2}\">{year2}</option>  <!-- more options --></select>"
        },
        {
          "name": "MonthPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a month.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{month1}\">{month1}</option>  <option value=\"{month2}\">{month2}</option>  <!-- more options --></select>"
        },
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "a standalone component that displays the current year and month.",
          "html": "<div class=\"flex justify-center mb-4\">  <h2 class=\"text-lg\">{current_year} {current_month}</h2></div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <YearMonthPicker/>\n</div>\n",
      "components": [
        {
          "name": "YearMonthPicker",
          "is_standalone": true,
          "description": "a standalone component that contains the year and month pickers.",
          "html": "<div class=\"flex flex-col\">  <CalendarHeader/>  <div class=\"flex justify-center mb-4\">    <YearPicker/>    <MonthPicker/>  </div>  <table class=\"w-full\">    <!-- calendar table goes here -->  </table></div>"
        },
        {
          "name": "YearPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a year.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{year1}\">{year1}</option>  <option value=\"{year2}\">{year2}</option>  <!-- more options --></select>"
        },
        {
          "name": "MonthPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a month.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{month1}\">{month1}</option>  <option value=\"{month2}\">{month2}</option>  <!-- more options --></select>"
        },
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "a standalone component that displays the current year and month.",
          "html": "<div class=\"flex justify-center mb-4\">  <h2 class=\"text-lg\">{current_year} {current_month}</h2></div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <YearMonthPicker/>\n</div>\n",
      "components": [
        {
          "name": "YearMonthPicker",
          "is_standalone": true,
          "description": "a standalone component that contains the year and month pickers.",
          "html": "<div class=\"flex flex-col\">  <CalendarHeader/>  <div class=\"flex justify-center mb-4\">    <YearPicker/>    <MonthPicker/>  </div>  <table class=\"w-full\">    <!-- calendar table goes here -->  </table></div>"
        },
        {
          "name": "YearPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a year.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{year1}\">{year1}</option>  <option value=\"{year2}\">{year2}</option>  <!-- more options --></select>"
        },
        {
          "name": "MonthPicker",
          "is_standalone": true,
          "description": "a standalone component that allows users to select a month.",
          "html": "<select class=\"block w-full p-2 pl-10 text-sm text-gray-700\">  <option value=\"{month1}\">{month1}</option>  <option value=\"{month2}\">{month2}</option>  <!-- more options --></select>"
        },
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "a standalone component that displays the current year and month.",
          "html": "<div class=\"flex justify-center mb-4\">  <h2 class=\"text-lg\">{current_year} {current_month}</h2></div>"
        }
      ]
    }
  ],
  "Character counter for tweet length": [
    {
      "description": "A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).",
      "html": "<div class=\"flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">\n  <TextAreaInput />\n  <CharacterCountDisplay />\n</div>\n",
      "components": [
        {
          "name": "TextAreaInput",
          "is_standalone": true,
          "description": "a standalone component for the text input field",
          "html": "<textarea class=\"w-full p-2 text-lg\" placeholder=\"What's on your mind?\" />"
        },
        {
          "name": "CharacterCountDisplay",
          "is_standalone": true,
          "description": "a standalone component for displaying the character count",
          "html": "<p class=\"text-sm text-gray-600\">{remaining_characters} characters remaining</p>"
        }
      ]
    },
    {
      "description": "The UI should be a text input field with a character counter that displays the remaining characters available for a tweet. The counter should turn red when the character limit is exceeded.",
      "html": "<div class=\"flex flex-col\">\n  <TweetInput />\n  <CharacterCounter />\n</div>\n",
      "components": [
        {
          "name": "TweetInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input type=\"text\" class=\"w-full p-2 border border-gray-200 rounded\" />"
        },
        {
          "name": "CharacterCounter",
          "is_standalone": true,
          "description": "A standalone component that displays the remaining characters available for a tweet.",
          "html": "<p class={ remaining_characters <= 0 ? \"text-red-500\" : \"\" }>Characters remaining: {remaining_characters}</p>"
        }
      ]
    },
    {
      "description": "A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).",
      "html": "<div class=\"flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">\n  <TextAreaInput />\n  <CharacterCountDisplay />\n</div>\n",
      "components": [
        {
          "name": "TextAreaInput",
          "is_standalone": true,
          "description": "a standalone component for the text input field",
          "html": "<textarea class=\"w-full p-2 text-lg\" placeholder=\"What's on your mind?\" />"
        },
        {
          "name": "CharacterCountDisplay",
          "is_standalone": true,
          "description": "a standalone component for displaying the character count",
          "html": "<p class=\"text-sm text-gray-600\">{remaining_characters} characters remaining</p>"
        }
      ]
    },
    {
      "description": "The UI should display a text input field where the user can type their tweet. Below the input field, a counter should display the number of characters remaining, indicating how many more characters the user can type before reaching the tweet limit (280 characters).",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <TweetInput />\n  <CharacterCounter />\n</div>\n",
      "components": [
        {
          "name": "TweetInput",
          "is_standalone": true,
          "description": "a standalone component that takes a text input.",
          "html": "<input   type=\"text\"   class=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder=\"Type your tweet...\"/>"
        },
        {
          "name": "CharacterCounter",
          "is_standalone": true,
          "description": "a standalone component that displays the remaining character count.",
          "html": "<p class=\"text-sm text-gray-500\">  {remaining_characters} characters remaining</p>"
        }
      ]
    }
  ],
  "Breadcrumb navigation for category and subreddits": [
    {
      "description": "The UI should display a breadcrumb navigation for categories and subreddits. Each item in the breadcrumb should display the category name and have a separator (e.g., `/`) between each item.",
      "html": "<nav class=\"flex items-center mb-4\">\n  <BreadCrumbNavigation>\n    <BreadCrumb />\n    <BreadCrumb />\n    <!-- Add more Breadcrumbs as needed -->\n  </BreadCrumbNavigation>\n</nav>\n",
      "components": [
        {
          "name": "BreadCrumb",
          "is_standalone": true,
          "description": "standalone component that renders a single breadcrumb item.",
          "html": "<li class=\"mr-2\">  <a href=\"{category_url}\" class=\"text-gray-600 hover:text-gray-900\">{category_name}</a>  <span class=\"text-gray-400\">/</span></li>"
        },
        {
          "name": "BreadCrumbNavigation",
          "is_standalone": false,
          "description": "container component that takes children (multiple `BreadCrumb` components).",
          "html": "<ul class=\"flex\">  {children}</ul>"
        }
      ]
    }
  ],
  "Social Sharing Buttons": [
    {
      "description": "The UI should display a horizontal row of social media sharing buttons, each with an icon and a text label. The buttons should be medium-sized, round, and have a slight hover effect. The row should be centered and have some padding.",
      "html": "<div className=\"flex justify-center py-4\">\n  <SocialSharingButtonsRow>\n    <SocialSharingButton />\n    <SocialSharingButton />\n    <SocialSharingButton />\n    <!-- add more buttons here -->\n  </SocialSharingButtonsRow>\n</div>\n",
      "components": [
        {
          "name": "SocialSharingButton",
          "is_standalone": true,
          "description": "(standalone): a single social media sharing button with an icon and text label",
          "html": "<a href=\"{sharing_url}\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"inline-flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-200\">  <i className={`fab fa-${social_media_icon} text-lg`}></i>  <span className=\"sr-only\">{social_media_name}</span></a>"
        },
        {
          "name": "SocialSharingButtonsRow",
          "is_standalone": false,
          "description": "(takes children): a horizontal row of social sharing buttons",
          "html": "<div className=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Toast/Notification Messages": [
    {
      "description": "The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.",
      "html": "<div className=\"fixed top-0 left-0 w-full p-4\">\n  <NotificationMessage />\n</div>\n",
      "components": [
        {
          "name": "NotificationMessage",
          "is_standalone": true,
          "description": "standalone component that displays a single notification message.",
          "html": "<div className=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\">  <p>{message}</p>  <NotificationCloseButton /></div>"
        },
        {
          "name": "NotificationCloseButton",
          "is_standalone": true,
          "description": "standalone component that renders a close button for the notification message.",
          "html": "<button aria-label=\"Close notification\" className=\"text-orange-500 hover:text-orange-700 transition duration-300\">  ×</button>"
        }
      ]
    },
    {
      "description": "A toast/notification message is a small, non-obtrusive message that appears at the top or bottom of the screen, informing the user of a particular event or action. It usually disappears after a few seconds.",
      "html": "<div class=\"fixed bottom-0 left-0 p-4\">\n  <NotificationToast />\n</div>\n",
      "components": [
        {
          "name": "NotificationToast",
          "is_standalone": true,
          "description": "a standalone component that displays a single notification message.",
          "html": "<div class=\"bg-orange-100 border-l-4 border-orange-500 p-4\">  <p class=\"uppercase text-orange-500\">{notificationType}</p>  <p>{notificationMessage}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.",
      "html": "<div className=\"fixed top-0 left-0 w-full p-4\">\n  <NotificationMessage />\n</div>\n",
      "components": [
        {
          "name": "NotificationMessage",
          "is_standalone": true,
          "description": "standalone component that displays a single notification message.",
          "html": "<div className=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\">  <p>{message}</p>  <NotificationCloseButton /></div>"
        },
        {
          "name": "NotificationCloseButton",
          "is_standalone": true,
          "description": "standalone component that renders a close button for the notification message.",
          "html": "<button aria-label=\"Close notification\" className=\"text-orange-500 hover:text-orange-700 transition duration-300\">  ×</button>"
        }
      ]
    },
    {
      "description": "The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.",
      "html": "<div className=\"fixed top-0 left-0 w-full p-4\">\n  <NotificationMessage />\n</div>\n",
      "components": [
        {
          "name": "NotificationMessage",
          "is_standalone": true,
          "description": "standalone component that displays a single notification message.",
          "html": "<div className=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\">  <p>{message}</p>  <NotificationCloseButton /></div>"
        },
        {
          "name": "NotificationCloseButton",
          "is_standalone": true,
          "description": "standalone component that renders a close button for the notification message.",
          "html": "<button aria-label=\"Close notification\" className=\"text-orange-500 hover:text-orange-700 transition duration-300\">  ×</button>"
        }
      ]
    }
  ],
  "Error/Success Messages": [
    {
      "description": "The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.",
      "html": "<div class=\"flex justify-center\">\n  <ErrorMessage />\n  <!-- or -->\n  <SuccessMessage />\n  <!-- or -->\n  <MessageType />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "standalone component to display an error message",
          "html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{error_message}</strong>  <span class=\"block\">{error_details}</span></div>"
        },
        {
          "name": "SuccessMessage",
          "is_standalone": true,
          "description": "standalone component to display a success message",
          "html": "<div class=\"bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{success_message}</strong>  <span class=\"block\">{success_details}</span></div>"
        },
        {
          "name": "MessageType",
          "is_standalone": true,
          "description": "standalone component to display a generic message (can be used for error or success messages)",
          "html": "<div class=\"bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{message}</strong>  <span class=\"block\">{message_details}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.",
      "html": "<div class=\"flex justify-center\">\n  <ErrorMessage />\n  <!-- or -->\n  <SuccessMessage />\n  <!-- or -->\n  <MessageType />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "standalone component to display an error message",
          "html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{error_message}</strong>  <span class=\"block\">{error_details}</span></div>"
        },
        {
          "name": "SuccessMessage",
          "is_standalone": true,
          "description": "standalone component to display a success message",
          "html": "<div class=\"bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{success_message}</strong>  <span class=\"block\">{success_details}</span></div>"
        },
        {
          "name": "MessageType",
          "is_standalone": true,
          "description": "standalone component to display a generic message (can be used for error or success messages)",
          "html": "<div class=\"bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{message}</strong>  <span class=\"block\">{message_details}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.",
      "html": "<div class=\"flex justify-center\">\n  <ErrorMessage />\n  <!-- or -->\n  <SuccessMessage />\n  <!-- or -->\n  <MessageType />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "standalone component to display an error message",
          "html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{error_message}</strong>  <span class=\"block\">{error_details}</span></div>"
        },
        {
          "name": "SuccessMessage",
          "is_standalone": true,
          "description": "standalone component to display a success message",
          "html": "<div class=\"bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{success_message}</strong>  <span class=\"block\">{success_details}</span></div>"
        },
        {
          "name": "MessageType",
          "is_standalone": true,
          "description": "standalone component to display a generic message (can be used for error or success messages)",
          "html": "<div class=\"bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{message}</strong>  <span class=\"block\">{message_details}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.",
      "html": "<div class=\"flex justify-center\">\n  <ErrorMessage />\n  <!-- or -->\n  <SuccessMessage />\n  <!-- or -->\n  <MessageType />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "standalone component to display an error message",
          "html": "<div class=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{error_message}</strong>  <span class=\"block\">{error_details}</span></div>"
        },
        {
          "name": "SuccessMessage",
          "is_standalone": true,
          "description": "standalone component to display a success message",
          "html": "<div class=\"bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{success_message}</strong>  <span class=\"block\">{success_details}</span></div>"
        },
        {
          "name": "MessageType",
          "is_standalone": true,
          "description": "standalone component to display a generic message (can be used for error or success messages)",
          "html": "<div class=\"bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative\">  <strong class=\"font-bold\">{message}</strong>  <span class=\"block\">{message_details}</span></div>"
        }
      ]
    }
  ],
  "Tag and Category Navigation": [
    {
      "description": "The UI should display a navigation menu with tags and categories. The menu should be responsive, mobile-first, and accessible. On larger screens, the menu should be displayed horizontally, while on smaller screens, it should be displayed vertically.",
      "html": "<nav className=\"flex flex-wrap justify-center mb-4 lg:flex-no-wrap\">\n  <NavigationView>\n    <!-- category items -->\n    <CategoryItem>Category 1</CategoryItem>\n    <CategoryItem>Category 2</CategoryItem>\n    <!-- tag items -->\n    <TagItem>tag 1</TagItem>\n    <TagItem>tag 2</TagItem>\n  </NavigationView>\n</nav>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single tag.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{tagName}</a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single category.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{categoryName}</a>"
        },
        {
          "name": "NavigationView",
          "is_standalone": false,
          "description": "a component that takes children (tags and categories) to display the navigation menu.",
          "html": "<ul className=\"flex flex-wrap justify-center lg:flex-no-wrap\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a navigation bar with two sections: Tags and Categories. Each section should have a header and a list of items. The tags and categories should be clickable.",
      "html": "<nav class=\"flex justify-between\">\n  <NavItemGroup>\n    <NavHeader>Tags</NavHeader>\n    <!-- list of tags -->\n    <TagNavItem/><TagNavItem/><TagNavItem/>\n  </NavItemGroup>\n  <NavItemGroup>\n    <NavHeader>Categories</NavHeader>\n    <!-- list of categories -->\n    <CategoryNavItem/><CategoryNavItem/><CategoryNavItem/>\n  </NavItemGroup>\n</nav>\n",
      "components": [
        {
          "name": "TagNavItem",
          "is_standalone": true,
          "description": "a standalone component representing a single tag item in the navigation bar.",
          "html": "<a href `{tag_url}` class=\"block py-2 px-4 hover:bg-gray-100\">  {tag_name}</a>"
        },
        {
          "name": "CategoryNavItem",
          "is_standalone": true,
          "description": "a standalone component representing a single category item in the navigation bar.",
          "html": "<a href `{category_url}` class=\"block py-2 px-4 hover:bg-gray-100\">  {category_name}</a>"
        },
        {
          "name": "NavItemGroup",
          "is_standalone": false,
          "description": "a component that takes children, representing a group of navigation items (e.g. Tags or Categories).",
          "html": "<div class=\"mr-4\">  {children}</div>"
        },
        {
          "name": "NavHeader",
          "is_standalone": true,
          "description": "a standalone component representing a header for a navigation group.",
          "html": "<h5 class=\"uppercase text-sm text-gray-600\">{header_text}</h5>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu with tags and categories. The menu should be responsive, mobile-first, and accessible. On larger screens, the menu should be displayed horizontally, while on smaller screens, it should be displayed vertically.",
      "html": "<nav className=\"flex flex-wrap justify-center mb-4 lg:flex-no-wrap\">\n  <NavigationView>\n    <!-- category items -->\n    <CategoryItem>Category 1</CategoryItem>\n    <CategoryItem>Category 2</CategoryItem>\n    <!-- tag items -->\n    <TagItem>tag 1</TagItem>\n    <TagItem>tag 2</TagItem>\n  </NavigationView>\n</nav>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single tag.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{tagName}</a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single category.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{categoryName}</a>"
        },
        {
          "name": "NavigationView",
          "is_standalone": false,
          "description": "a component that takes children (tags and categories) to display the navigation menu.",
          "html": "<ul className=\"flex flex-wrap justify-center lg:flex-no-wrap\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu with tags and categories. The menu should be responsive, mobile-first, and accessible. On larger screens, the menu should be displayed horizontally, while on smaller screens, it should be displayed vertically.",
      "html": "<nav className=\"flex flex-wrap justify-center mb-4 lg:flex-no-wrap\">\n  <NavigationView>\n    <!-- category items -->\n    <CategoryItem>Category 1</CategoryItem>\n    <CategoryItem>Category 2</CategoryItem>\n    <!-- tag items -->\n    <TagItem>tag 1</TagItem>\n    <TagItem>tag 2</TagItem>\n  </NavigationView>\n</nav>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single tag.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{tagName}</a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single category.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{categoryName}</a>"
        },
        {
          "name": "NavigationView",
          "is_standalone": false,
          "description": "a component that takes children (tags and categories) to display the navigation menu.",
          "html": "<ul className=\"flex flex-wrap justify-center lg:flex-no-wrap\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu with tags and categories. The menu should be responsive, mobile-first, and accessible. On larger screens, the menu should be displayed horizontally, while on smaller screens, it should be displayed vertically.",
      "html": "<nav className=\"flex flex-wrap justify-center mb-4 lg:flex-no-wrap\">\n  <NavigationView>\n    <!-- category items -->\n    <CategoryItem>Category 1</CategoryItem>\n    <CategoryItem>Category 2</CategoryItem>\n    <!-- tag items -->\n    <TagItem>tag 1</TagItem>\n    <TagItem>tag 2</TagItem>\n  </NavigationView>\n</nav>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single tag.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{tagName}</a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single category.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{categoryName}</a>"
        },
        {
          "name": "NavigationView",
          "is_standalone": false,
          "description": "a component that takes children (tags and categories) to display the navigation menu.",
          "html": "<ul className=\"flex flex-wrap justify-center lg:flex-no-wrap\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu with tags and categories. The menu should be responsive, mobile-first, and accessible. On larger screens, the menu should be displayed horizontally, while on smaller screens, it should be displayed vertically.",
      "html": "<nav className=\"flex flex-wrap justify-center mb-4 lg:flex-no-wrap\">\n  <NavigationView>\n    <!-- category items -->\n    <CategoryItem>Category 1</CategoryItem>\n    <CategoryItem>Category 2</CategoryItem>\n    <!-- tag items -->\n    <TagItem>tag 1</TagItem>\n    <TagItem>tag 2</TagItem>\n  </NavigationView>\n</nav>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single tag.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{tagName}</a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single category.",
          "html": "<a href=\"#\" className=\"mr-2 text-sm hover:text-gray-800\">{categoryName}</a>"
        },
        {
          "name": "NavigationView",
          "is_standalone": false,
          "description": "a component that takes children (tags and categories) to display the navigation menu.",
          "html": "<ul className=\"flex flex-wrap justify-center lg:flex-no-wrap\">  {children}</ul>"
        }
      ]
    }
  ],
  "Ratings and Reviews": [
    {
      "description": "The UI should display a rating system with an average rating and the number of reviews. It should also display a list of individual reviews from users.",
      "html": "<div className=\"flex flex-col gap-4\">\n  <RatingIndicator/>\n  <p>{review_count} reviews</p>\n  <ReviewList>\n    <ReviewItem/>\n    <!-- more ReviewItem components here -->\n  </ReviewList>\n</div>\n",
      "components": [
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "Standalone component to display the average rating.",
          "html": "<div className=\"flex items-center gap-2\">  <span className=\"text-xl\">{average_rating}/5</span>  <i className=\"fa fa-star text-yellow-500\"></i>  <span className=\"text-gray-500\">{rating_count} ratings</span></div>"
        },
        {
          "name": "ReviewList",
          "is_standalone": false,
          "description": "Component that takes children (individual reviews).",
          "html": "<ul className=\"list-none py-4\">  {children}</ul>"
        },
        {
          "name": "ReviewItem",
          "is_standalone": true,
          "description": "Standalone component to display a single review.",
          "html": "<li className=\"py-2 border-b border-gray-200\">  <div className=\"flex items-center justify-between\">    <div>      <span className=\"text-lg\">{reviewer_name}</span>      <span className=\"text-sm text-gray-500\">{review_date}</span>    </div>    <div>      <i className=\"fa fa-star text-yellow-500\"></i>      <span className=\"text-sm\">{rating}/5</span>    </div>  </div>  <p className=\"text-sm text-gray-600\">{review_text}</p></li>"
        }
      ]
    }
  ],
  "Threaded Commenting and Nesting": [
    {
      "description": "The UI should display a list of comments with threading and nesting. Each comment should have a username, a comment text, and a reply button. When the reply button is clicked, a new comment input field should appear below the comment, allowing the user to respond to the comment. The nested comments should be indented to show the hierarchy of the conversation.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CommentThread />\n</div>\n",
      "components": [
        {
          "name": "CommentThread",
          "is_standalone": true,
          "description": "A standalone component that displays a list of comments with threading and nesting.",
          "html": "<ul class=\"list-none p-0 m-0\">  {comments.map((comment) => (    <li class=\"mb-4\">      <Comment comment={comment} />    </li>  ))}</ul>"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "A standalone component that displays a single comment with a reply button.",
          "html": "<div class=\"flex items-start mb-4\">  <div class=\"mr-4\">    <img src=\"{userAvatar}\" alt=\"{userName}\" class=\"w-8 h-8 rounded-full\" />  </div>  <div class=\"flex-1\">    <p class=\"text-lg font-bold\">{userName}</p>    <p class=\"text-gray-600\">{commentText}</p>    <ReplyButton />  </div></div>"
        },
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "A standalone component that displays a text input field for entering a new comment.",
          "html": "<div class=\"mb-4\">  <input    type=\"text\"    class=\"w-full p-2 pl-10 text-sm text-gray-700\"    placeholder=\"Enter your reply...\"  />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Post  </button></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "A standalone component that displays a button to reply to a comment.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded\">  Reply</button>"
        }
      ]
    }
  ],
  "Leaderboards and Rankings": [
    {
      "description": "The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <LeaderboardHeader />\n  <table class=\"w-full\">\n    <tbody>\n      <RankingRow>\n        <PlayerInfo />\n        <StatColumn />\n        <StatColumn />\n        <StatColumn />\n      </RankingRow>\n      <!-- Repeat RankingRow for each ranking -->\n    </tbody>\n  </table>\n</div>\n",
      "components": [
        {
          "name": "LeaderboardHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the header of the leaderboard with column titles.",
          "html": "<thead class=\"bg-gray-100\">  <tr>    <th class=\"px-4 py-2\">Rank</th>    <th class=\"px-4 py-2\">Player/Team</th>    <th class=\"px-4 py-2\">Points</th>    <th class=\"px-4 py-2\">Wins</th>    <th class=\"px-4 py-2\">Losses</th>  </tr></thead>"
        },
        {
          "name": "RankingRow",
          "is_standalone": false,
          "description": "(takes children) - Displays a single ranking row with player/team information and stats.",
          "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
        },
        {
          "name": "PlayerInfo",
          "is_standalone": true,
          "description": "(standalone) - Displays the player/team name and avatar.",
          "html": "<td class=\"px-4 py-2\">  <img src=\"{avatar_url}\" alt=\"{player_name}\" class=\"w-8 h-8 rounded-full mr-2\" />  <span class=\"text-lg\">{player_name}</span></td>"
        },
        {
          "name": "StatColumn",
          "is_standalone": true,
          "description": "(standalone) - Displays a single stat column (e.g., points, wins, losses).",
          "html": "<td class=\"px-4 py-2 text-center\">{stat_value}</td>"
        }
      ]
    },
    {
      "description": "A simple leaderboard and ranking system that displays a table with usernames, rankings, and scores.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6\">\n  <RankingTable>\n    <LeaderboardHeader />\n    <!-- Leaderboard rows will be rendered here -->\n  </RankingTable>\n</div>\n",
      "components": [
        {
          "name": "LeaderboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the header of the leaderboard table.",
          "html": "<thead>  <tr>    <th class=\"text-left\">Rank</th>    <th class=\"text-left\">Username</th>    <th class=\"text-right\">Score</th>  </tr></thead>"
        },
        {
          "name": "LeaderboardRow",
          "is_standalone": false,
          "description": "A component that takes children and displays a single row in the leaderboard table.",
          "html": "<tr>  <td class=\"text-left\">{rank}</td>  <td class=\"text-left\">{username}</td>  <td class=\"text-right\">{score}</td>  {children}</tr>"
        },
        {
          "name": "RankingTable",
          "is_standalone": false,
          "description": "A component that takes children and displays the entire leaderboard table.",
          "html": "<div class=\"overflow-x-auto\">  <table class=\"w-full\">    {children}  </table></div>"
        }
      ]
    },
    {
      "description": "The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <LeaderboardHeader />\n  <table class=\"w-full\">\n    <tbody>\n      <RankingRow>\n        <PlayerInfo />\n        <StatColumn />\n        <StatColumn />\n        <StatColumn />\n      </RankingRow>\n      <!-- Repeat RankingRow for each ranking -->\n    </tbody>\n  </table>\n</div>\n",
      "components": [
        {
          "name": "LeaderboardHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the header of the leaderboard with column titles.",
          "html": "<thead class=\"bg-gray-100\">  <tr>    <th class=\"px-4 py-2\">Rank</th>    <th class=\"px-4 py-2\">Player/Team</th>    <th class=\"px-4 py-2\">Points</th>    <th class=\"px-4 py-2\">Wins</th>    <th class=\"px-4 py-2\">Losses</th>  </tr></thead>"
        },
        {
          "name": "RankingRow",
          "is_standalone": false,
          "description": "(takes children) - Displays a single ranking row with player/team information and stats.",
          "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
        },
        {
          "name": "PlayerInfo",
          "is_standalone": true,
          "description": "(standalone) - Displays the player/team name and avatar.",
          "html": "<td class=\"px-4 py-2\">  <img src=\"{avatar_url}\" alt=\"{player_name}\" class=\"w-8 h-8 rounded-full mr-2\" />  <span class=\"text-lg\">{player_name}</span></td>"
        },
        {
          "name": "StatColumn",
          "is_standalone": true,
          "description": "(standalone) - Displays a single stat column (e.g., points, wins, losses).",
          "html": "<td class=\"px-4 py-2 text-center\">{stat_value}</td>"
        }
      ]
    },
    {
      "description": "The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <LeaderboardHeader />\n  <table class=\"w-full\">\n    <tbody>\n      <RankingRow>\n        <PlayerInfo />\n        <StatColumn />\n        <StatColumn />\n        <StatColumn />\n      </RankingRow>\n      <!-- Repeat RankingRow for each ranking -->\n    </tbody>\n  </table>\n</div>\n",
      "components": [
        {
          "name": "LeaderboardHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the header of the leaderboard with column titles.",
          "html": "<thead class=\"bg-gray-100\">  <tr>    <th class=\"px-4 py-2\">Rank</th>    <th class=\"px-4 py-2\">Player/Team</th>    <th class=\"px-4 py-2\">Points</th>    <th class=\"px-4 py-2\">Wins</th>    <th class=\"px-4 py-2\">Losses</th>  </tr></thead>"
        },
        {
          "name": "RankingRow",
          "is_standalone": false,
          "description": "(takes children) - Displays a single ranking row with player/team information and stats.",
          "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
        },
        {
          "name": "PlayerInfo",
          "is_standalone": true,
          "description": "(standalone) - Displays the player/team name and avatar.",
          "html": "<td class=\"px-4 py-2\">  <img src=\"{avatar_url}\" alt=\"{player_name}\" class=\"w-8 h-8 rounded-full mr-2\" />  <span class=\"text-lg\">{player_name}</span></td>"
        },
        {
          "name": "StatColumn",
          "is_standalone": true,
          "description": "(standalone) - Displays a single stat column (e.g., points, wins, losses).",
          "html": "<td class=\"px-4 py-2 text-center\">{stat_value}</td>"
        }
      ]
    },
    {
      "description": "The UI should display a leaderboard that shows rankings of players or teams, along with their points, wins, and losses. The leaderboard should be responsive, mobile-first, and accessible, with a clean and modern design.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-6\">\n  <LeaderboardHeader />\n  <table class=\"w-full\">\n    <tbody>\n      <RankingRow>\n        <PlayerInfo />\n        <StatColumn />\n        <StatColumn />\n        <StatColumn />\n      </RankingRow>\n      <!-- Repeat RankingRow for each ranking -->\n    </tbody>\n  </table>\n</div>\n",
      "components": [
        {
          "name": "LeaderboardHeader",
          "is_standalone": true,
          "description": "(standalone) - Displays the header of the leaderboard with column titles.",
          "html": "<thead class=\"bg-gray-100\">  <tr>    <th class=\"px-4 py-2\">Rank</th>    <th class=\"px-4 py-2\">Player/Team</th>    <th class=\"px-4 py-2\">Points</th>    <th class=\"px-4 py-2\">Wins</th>    <th class=\"px-4 py-2\">Losses</th>  </tr></thead>"
        },
        {
          "name": "RankingRow",
          "is_standalone": false,
          "description": "(takes children) - Displays a single ranking row with player/team information and stats.",
          "html": "<tr class=\"border-b border-gray-200 hover:bg-gray-100\">  {children}</tr>"
        },
        {
          "name": "PlayerInfo",
          "is_standalone": true,
          "description": "(standalone) - Displays the player/team name and avatar.",
          "html": "<td class=\"px-4 py-2\">  <img src=\"{avatar_url}\" alt=\"{player_name}\" class=\"w-8 h-8 rounded-full mr-2\" />  <span class=\"text-lg\">{player_name}</span></td>"
        },
        {
          "name": "StatColumn",
          "is_standalone": true,
          "description": "(standalone) - Displays a single stat column (e.g., points, wins, losses).",
          "html": "<td class=\"px-4 py-2 text-center\">{stat_value}</td>"
        }
      ]
    }
  ],
  "Code Review and Approval Workflow": [
    {
      "description": "The UI should display a vertical timeline of code review and approval workflow, with each step represented by a circular icon and a brief description. The timeline should be responsive and adaptable to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <Timeline>\n    <CodeReviewStep />\n    <CodeReviewStep />\n    <CodeReviewStep />\n    <!-- Add more CodeReviewStep components as needed -->\n  </Timeline>\n</div>\n",
      "components": [
        {
          "name": "CodeReviewStep",
          "is_standalone": true,
          "description": "A standalone component representing a single step in the code review process.",
          "html": "<div className=\"flex items-center mb-4\">  <div className=\"w-8 h-8 bg-orange-500 rounded-full text-white text-lg\">{step_icon}</div>  <div className=\"ml-4\">    <p className=\"text-lg\">{step_description}</p>    <small className=\"text-gray-600\">{step_status}</small>  </div></div>"
        },
        {
          "name": "Timeline",
          "is_standalone": false,
          "description": "A component that takes children, which are `CodeReviewStep` components.",
          "html": "<div className=\"flex flex-col items-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Email list view with sender and subject": [
    {
      "description": "A list of emails with sender and subject information.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-lg font-bold mb-2\">Emails</h2>\n  <EmailList>\n    <EmailListItem />\n    <EmailListItem />\n    <!-- more EmailListItem components here -->\n  </EmailList>\n</div>\n",
      "components": [
        {
          "name": "EmailListItem",
          "is_standalone": true,
          "description": "(stands alone)",
          "html": "<div className=\"flex items-center justify-between p-2 border-b border-gray-200\">  <div>    <span className=\"text-sm\">{sender}</span>    <span className=\"text-xs text-gray-500\">{timestamp}</span>  </div>  <div>    <span className=\"text-lg\">{subject}</span>  </div></div>"
        },
        {
          "name": "EmailList",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of emails, with each email showing the sender's name and the subject of the email. The list should be responsive, with each email item taking up the full width of the screen on mobile devices and becoming a compact list item on larger screens.",
      "html": "<div className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 className=\"text-2xl font-bold mb-4\">Emails</h1>\n  <EmailList>\n    <EmailListItem />\n    <EmailListItem />\n    <!-- add more EmailListItem components here -->\n  </EmailList>\n</div>\n",
      "components": [
        {
          "name": "EmailListItem",
          "is_standalone": true,
          "description": "(standalone): A single email item in the list, displaying the sender and subject.",
          "html": "<div className=\"flex justify-between mb-4 p-4 bg-white shadow-md rounded\">  <div>    <p className=\"text-lg font-bold\">{senderName}</p>    <p className=\"text-gray-600\">{subject}</p>  </div>  <div className=\"text-right\">    <p className=\"text-gray-600\">{receivedAt}</p>  </div></div>"
        },
        {
          "name": "EmailList",
          "is_standalone": false,
          "description": "(takes children): A container for the list of email items.",
          "html": "<ul className=\"list-none p-0 m-0\">{children}</ul>"
        }
      ]
    }
  ],
  "Instructor/Author Profiles": [
    {
      "description": "The UI should display the profile information of an instructor or author, including their name, profile picture, bio, and a list of their courses or publications.",
      "html": "<div class=\"flex flex-col items-center p-4\">\n  <ProfileHeader />\n  <BioSection />\n  <h2 class=\"text-lg font-bold mb-2\">Courses</h2>\n  <CourseList>\n    <!-- Course items will be rendered here -->\n  </CourseList>\n</div>\n",
      "components": [
        {
          "name": "ProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the profile picture and name of the instructor/author.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{name}\" class=\"w-24 h-24 rounded-full mr-4\" />  <h1 class=\"text-2xl font-bold\">{name}</h1></div>"
        },
        {
          "name": "BioSection",
          "is_standalone": true,
          "description": "A standalone component that displays the bio of the instructor/author.",
          "html": "<div class=\"mb-4\">  <p class=\"text-lg\">{bio}</p></div>"
        },
        {
          "name": "CourseList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of courses or publications.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    }
  ],
  "Header: Site title and navigation links": [
    {
      "description": "The UI should be a header section at the top of the webpage, featuring a site title on the left side and navigation links on the right side. The site title should be prominent and centered on mobile devices, while the navigation links should be stacked on top of each other on mobile devices and aligned horizontally on larger screens.",
      "html": "<header>\n  <Header>\n    <SiteTitle />\n    <NavLinks>\n      <NavLink />\n      <NavLink />\n      <!-- Add more NavLink components as needed -->\n    </NavLinks>\n  </Header>\n</header>\n",
      "components": [
        {
          "name": "SiteTitle",
          "is_standalone": true,
          "description": "(standalone): displays the title of the site",
          "html": "<h1 class=\"text-3xl font-bold\">{site_title}</h1>"
        },
        {
          "name": "NavLink",
          "is_standalone": true,
          "description": "(standalone): displays a single navigation link",
          "html": "<a href=\"{nav_link_url}\" class=\"text-lg\">{nav_link_text}</a>"
        },
        {
          "name": "NavLinks",
          "is_standalone": false,
          "description": "(takes children): a container for multiple `NavLink` components",
          "html": "<nav class=\"flex flex-wrap justify-end md:flex-row\">  {children}</nav>"
        },
        {
          "name": "Header",
          "is_standalone": false,
          "description": "(takes children): the top-level component that contains the site title and navigation links",
          "html": "<div class=\"container mx-auto p-4 md:flex md:justify-between\">  {children}</div>"
        }
      ]
    }
  ],
  "Post list with title, score, and comments": [
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    },
    {
      "description": "A list of posts with each item displaying the title, score, and number of comments. The list should be responsive, with a maximum of 3 items per row on larger screens and 1 item per row on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Post List</h1>\n  <PostList>\n    <!-- list of post items -->\n  </PostList>\n</div>\n",
      "components": [
        {
          "name": "PostItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post item.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 rounded\">  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <p class=\"text-gray-600\">Score: {post_score}</p>  <p class=\"text-gray-600\">{comment_count} comments</p></div>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "A component that takes children, wrapping the list of post items.",
          "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A post list with a title, score, and comments. The list should be responsive and accessible. On mobile, the score and comments should be stacked vertically, and on larger screens, they should be side by side.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <PostListItem />\n  <PostListItem />\n  <!-- Add more PostListItem components here -->\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single post item in the list.",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <PostTitle />  <div className=\"flex justify-between mb-2\">    <PostScore />    <PostComments />  </div>  <hr className=\"mb-4\" /></div>"
        },
        {
          "name": "PostTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the post.",
          "html": "<h2 className=\"text-lg font-bold\">{post_title}</h2>"
        },
        {
          "name": "PostScore",
          "is_standalone": true,
          "description": "A standalone component that displays the score of the post.",
          "html": "<p className=\"text-sm\">{score} points</p>"
        },
        {
          "name": "PostComments",
          "is_standalone": true,
          "description": "A standalone component that displays the comments of the post.",
          "html": "<p className=\"text-sm\">{comment_count} comments</p>"
        }
      ]
    }
  ],
  "Sharrre and Social Sharing": [
    {
      "description": "The UI should display a set of social media buttons that allow users to share content on various platforms. The UI should be visually appealing and easy to use.",
      "html": "<div className=\"flex justify-center mb-4\">\n  <SocialShareBar />\n</div>\n",
      "components": [
        {
          "name": "SocialShareBar",
          "is_standalone": true,
          "description": "A standalone component that contains all the social media buttons.",
          "html": "<div className=\"flex justify-center\">  <SocialMediaButton><FaFacebookF /></SocialMediaButton>  <SocialMediaButton><FaTwitter /></SocialMediaButton>  <SocialMediaButton><FaLinkedinIn /></SocialMediaButton>  <!-- Add more social media buttons here --></div>"
        },
        {
          "name": "SocialMediaButton",
          "is_standalone": false,
          "description": "A component that represents a single social media button (e.g., Facebook, Twitter, etc.). Takes children.",
          "html": "<a href=\"{share_url}\" className=\"text-2xl mx-2 transition duration-300 hover:text-{primary_color}\">  {children}</a>"
        }
      ]
    }
  ],
  "Dependancy Graph Visualization Component": [
    {
      "description": "The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.",
      "html": "<div class=\"max-w-md mx-auto pt-4\">\n  <DependencyGraphComponent>\n    <!-- graph content here -->\n  </DependencyGraphComponent>\n</div>\n",
      "components": [
        {
          "name": "DependencyNodeComponent",
          "is_standalone": true,
          "description": "(standalone) - represents a single node in the graph",
          "html": "<div class=\"rounded-md p-2 bg-gray-100 hover:bg-gray-200\">  <p class=\"text-lg\">{nodeName}</p>  <TooltipComponent>    <p>{nodeDescription}</p>  </TooltipComponent></div>"
        },
        {
          "name": "DependencyGraphComponent",
          "is_standalone": false,
          "description": "(takes children) - contains the graph and handles node relationships",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "TooltipComponent",
          "is_standalone": false,
          "description": "(takes children) - displays additional information when a node is hovered or clicked",
          "html": "<div class=\"absolute bg-gray-100 p-2 rounded-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.",
      "html": "<div class=\"max-w-md mx-auto pt-4\">\n  <DependencyGraphComponent>\n    <!-- graph content here -->\n  </DependencyGraphComponent>\n</div>\n",
      "components": [
        {
          "name": "DependencyNodeComponent",
          "is_standalone": true,
          "description": "(standalone) - represents a single node in the graph",
          "html": "<div class=\"rounded-md p-2 bg-gray-100 hover:bg-gray-200\">  <p class=\"text-lg\">{nodeName}</p>  <TooltipComponent>    <p>{nodeDescription}</p>  </TooltipComponent></div>"
        },
        {
          "name": "DependencyGraphComponent",
          "is_standalone": false,
          "description": "(takes children) - contains the graph and handles node relationships",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "TooltipComponent",
          "is_standalone": false,
          "description": "(takes children) - displays additional information when a node is hovered or clicked",
          "html": "<div class=\"absolute bg-gray-100 p-2 rounded-md\">  {children}</div>"
        }
      ]
    }
  ],
  "Time Tracking and Scheduling": [
    {
      "description": "A time tracking and scheduling UI that displays a calendar with scheduled events and allows users to add new events.",
      "html": "<div className=\"flex flex-col h-screen\">\n  <CalendarHeader />\n  <div className=\"flex-grow overflow-y-auto\">\n    <div className=\"grid grid-cols-7 gap-2 p-4\">\n      {Array(35).fill(0).map((_, index) => (\n        <CalendarDay key={index} />\n      ))}\n    </div>\n  </div>\n  <NewEventForm>\n    <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Add Event</button>\n  </NewEventForm>\n</div>\n",
      "components": [
        {
          "name": "CalendarHeader",
          "is_standalone": true,
          "description": "standalone, displays the month and year of the calendar.",
          "html": "<div className=\"flex justify-between p-4\">  <h2 className=\"text-2xl\">{month_name} {year}</h2>  <button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">{/* toggle calendar view */}</button></div>"
        },
        {
          "name": "CalendarDay",
          "is_standalone": true,
          "description": "standalone, represents a single day in the calendar, displaying the date and any scheduled events.",
          "html": "<div className=\"bg-white border p-2 rounded\">  <p className=\"text-lg\">{date}</p>  <EventCard>    {events.map((event) => (      <div key={event.id} className=\"py-2\">        <h3 className=\"text-lg\">{event.title}</h3>        <p>{event.time}</p>        <p>{event.description}</p>      </div>    ))}  </EventCard></div>"
        },
        {
          "name": "EventCard",
          "is_standalone": false,
          "description": "takes children, displays a scheduled event with details such as title, time, and description.",
          "html": "<div className=\"bg-white border p-2 rounded\">  {children}</div>"
        },
        {
          "name": "NewEventForm",
          "is_standalone": false,
          "description": "takes children, a form to add new events, with inputs for title, date, and time.",
          "html": "<form className=\"flex flex-col p-4\">  <input type=\"text\" placeholder=\"Event Title\" className=\"mr-2\" />  <input type=\"date\" className=\"mr-2\" />  <input type=\"time\" className=\"mr-2\" />  <textarea placeholder=\"Event Description\" className=\"mr-2\" />  {children}</form>"
        }
      ]
    },
    {
      "description": "The UI should consist of a dashboard with a calendar view, a list of tasks, and a time tracking timer. The calendar view should display daily tasks, while the list of tasks should display all tasks with their due dates. The time tracking timer should start and stop tracking time spent on a task.",
      "html": "<!-- Dashboard container -->\n<div class=\"flex h-screen\">\n  <!-- Calendar view -->\n  <div class=\"w-1/2 xl:w-1/3 p-4\">\n    <CalendarView />\n  </div>\n  <!-- Task list and time tracker -->\n  <div class=\"w-1/2 xl:w-2/3 p-4\">\n    <TaskList />\n    <TimeTracker />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Dashboard",
          "is_standalone": true,
          "description": "Standalone component that contains the entire UI.",
          "html": "<!-- Not applicable, since it's a container component -->"
        },
        {
          "name": "CalendarView",
          "is_standalone": true,
          "description": "Standalone component that displays a calendar view of daily tasks.",
          "html": "<!-- Calendar table --><table class=\"w-full\">  <thead>    <tr>      <th class=\"px-4 py-2\">Day</th>      <th class=\"px-4 py-2\">Tasks</th>    </tr>  </thead>  <tbody>    {days.map((day, index) => (      <tr key={index}>        <td class=\"px-4 py-2\">{day.date}</td>        <td class=\"px-4 py-2\">{day.tasks.join(', ')}</td>      </tr>    ))}  </tbody></table>"
        },
        {
          "name": "TaskList",
          "is_standalone": true,
          "description": "Standalone component that displays a list of tasks with their due dates.",
          "html": "<!-- Task list --><ul class=\"list-none mb-4\">  {tasks.map((task, index) => (    <li key={index}>      <TaskItem>{task.name}</TaskItem>    </li>  ))}</ul>"
        },
        {
          "name": "TaskItem",
          "is_standalone": false,
          "description": "Component that takes children (task details) and displays a single task with its due date.",
          "html": "<!-- Task item --><div class=\"flex items-center mb-2\">  <input type=\"checkbox\" class=\"mr-2\" />  <span class=\"text-lg\">{children}</span>  <span class=\"text-sm text-gray-600\">{due_date}</span></div>"
        },
        {
          "name": "TimeTracker",
          "is_standalone": true,
          "description": "Standalone component that displays a time tracking timer.",
          "html": "<!-- Time tracker --><div class=\"flex items-center mb-4\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {timerRunning ? 'Stop' : 'Start'}  </button>  <span class=\"text-lg ml-2\">{elapsed_time}</span></div>"
        }
      ]
    }
  ],
  "Search Bar: Input field for searching the site": [
    {
      "description": "The UI should be a simple search bar component that consists of a text input field and a search button. The search bar should be responsive, with the search button aligned to the right of the input field on larger screens, and stacked on top of each other on smaller screens.",
      "html": "<nav class=\"max-w-md mx-auto p-4 flex justify-center\">\n  <SearchBar />\n</nav>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the entire search bar UI",
          "html": "<div class=\"flex flex-wrap items-center\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that represents the text input field",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"{search_placeholder}\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that represents the search button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-search\"></i></button>"
        }
      ]
    }
  ],
  "Warning or error message for invalid input": [
    {
      "description": "The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an \"X\" icon to close the message.",
      "html": "<div class=\"bg-red-100 p-4 rounded mb-4\">\n  <ErrorMessage />\n  <CloseButton />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "(standalone): Displays the error message.",
          "html": "<p class=\"text-red-700\">{error_message}</p>"
        },
        {
          "name": "CloseButton",
          "is_standalone": true,
          "description": "(standalone): Displays an \"X\" icon to close the message.",
          "html": "<button class=\"text-gray-600 hover:text-gray-900 transition duration-300\">  &times;</button>"
        }
      ]
    },
    {
      "description": "The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an \"X\" icon to close the message.",
      "html": "<div class=\"bg-red-100 p-4 rounded mb-4\">\n  <ErrorMessage />\n  <CloseButton />\n</div>\n",
      "components": [
        {
          "name": "ErrorMessage",
          "is_standalone": true,
          "description": "(standalone): Displays the error message.",
          "html": "<p class=\"text-red-700\">{error_message}</p>"
        },
        {
          "name": "CloseButton",
          "is_standalone": true,
          "description": "(standalone): Displays an \"X\" icon to close the message.",
          "html": "<button class=\"text-gray-600 hover:text-gray-900 transition duration-300\">  &times;</button>"
        }
      ]
    }
  ],
  "Team or colleagues section with photos and bios": [
    {
      "description": "The UI should display a team or colleagues section with a grid of members, each displaying a photo, name, and bio. The grid should be responsive and adapt to different screen sizes. On mobile devices, the grid should display one member per row, and on larger devices, it should display multiple members per row.",
      "html": "<section class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl font-bold mb-4\">Our Team</h2>\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <TeamMemberCard/>\n    <TeamMemberCard/>\n    <TeamMemberCard/>\n    <!-- Add more TeamMemberCard components as needed -->\n  </div>\n</section>\n",
      "components": [
        {
          "name": "TeamMemberCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single team member's photo, name, and bio.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <img src={photo_url} alt={name} class=\"w-32 h-32 rounded-full mb-4\" />  <h3 class=\"text-lg font-bold\">{name}</h3>  <p class=\"text-gray-600\">{bio}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a section showcasing team members or colleagues with their photos and bios in a grid layout. The section should be responsive, with the grid adapting to different screen sizes. On mobile, the grid should display one column, and on larger screens, it should display multiple columns.",
      "html": "<section className=\"max-w-md mx-auto py-12\">\n  <h2 className=\"text-3xl font-bold mb-4\">Our Team</h2>\n  <TeamSection>\n    <TeamMemberCard />\n    <TeamMemberCard />\n    <TeamMemberCard />\n    <!-- add more TeamMemberCard components as needed -->\n  </TeamSection>\n</section>\n",
      "components": [
        {
          "name": "TeamMemberCard",
          "is_standalone": true,
          "description": "(standalone) - displays a single team member's photo and bio.",
          "html": "<div className=\"flex flex-col items-center mb-8 md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">  <img src={profile_photo_url} alt=\"{name}\" className=\"w-24 h-24 rounded-full mb-4\" />  <h3 className=\"text-lg font-bold\">{name}</h3>  <p className=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "TeamSection",
          "is_standalone": false,
          "description": "(takes children) - wraps the team members in a container with a header.",
          "html": "<div className=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Icon Fonts/SVG Sprites": [
    {
      "description": "The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <IconSet>\n    <IconComponent />\n    <IconComponent />\n    <IconComponent />\n    <!-- more icons -->\n  </IconSet>\n</div>\n",
      "components": [
        {
          "name": "IconComponent",
          "is_standalone": true,
          "description": "(standalone) - A single icon element with a specific class for styling.",
          "html": "<i aria-hidden=\"true\" class=\"text-lg {icon_class}\" />"
        },
        {
          "name": "IconSet",
          "is_standalone": false,
          "description": "(takes children) - A container element that holds multiple `IconComponent`s.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <IconSet>\n    <IconComponent />\n    <IconComponent />\n    <IconComponent />\n    <!-- more icons -->\n  </IconSet>\n</div>\n",
      "components": [
        {
          "name": "IconComponent",
          "is_standalone": true,
          "description": "(standalone) - A single icon element with a specific class for styling.",
          "html": "<i aria-hidden=\"true\" class=\"text-lg {icon_class}\" />"
        },
        {
          "name": "IconSet",
          "is_standalone": false,
          "description": "(takes children) - A container element that holds multiple `IconComponent`s.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <IconSet>\n    <IconComponent />\n    <IconComponent />\n    <IconComponent />\n    <!-- more icons -->\n  </IconSet>\n</div>\n",
      "components": [
        {
          "name": "IconComponent",
          "is_standalone": true,
          "description": "(standalone) - A single icon element with a specific class for styling.",
          "html": "<i aria-hidden=\"true\" class=\"text-lg {icon_class}\" />"
        },
        {
          "name": "IconSet",
          "is_standalone": false,
          "description": "(takes children) - A container element that holds multiple `IconComponent`s.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.",
      "html": "<div class=\"flex flex-wrap justify-center\">\n  <IconSet>\n    <IconComponent />\n    <IconComponent />\n    <IconComponent />\n    <!-- more icons -->\n  </IconSet>\n</div>\n",
      "components": [
        {
          "name": "IconComponent",
          "is_standalone": true,
          "description": "(standalone) - A single icon element with a specific class for styling.",
          "html": "<i aria-hidden=\"true\" class=\"text-lg {icon_class}\" />"
        },
        {
          "name": "IconSet",
          "is_standalone": false,
          "description": "(takes children) - A container element that holds multiple `IconComponent`s.",
          "html": "<div class=\"flex flex-wrap justify-center\">{children}</div>"
        }
      ]
    }
  ],
  "Pull Request Management System": [
    {
      "description": "The UI should display a list of pull requests, each with its title, description, and status (e.g. \"Open\", \"In Review\", \"Merged\"). The list should be sorted by the most recent update time. Each pull request item should have buttons to view details, approve, and reject.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6\">\n  <h1 class=\"text-3xl font-bold mb-4\">Pull Requests</h1>\n  <PullRequestList/>\n</div>\n",
      "components": [
        {
          "name": "PullRequestList",
          "is_standalone": true,
          "description": "standalone, displays a list of pull requests",
          "html": "<ul class=\"list-none mb-4\">  {pullRequests.map(pr => (    <PullRequestItem key={pr.id}>{pr.title}</PullRequestItem>  ))}</ul>"
        },
        {
          "name": "PullRequestItem",
          "is_standalone": false,
          "description": "takes children, displays a single pull request with buttons to view details, approve, and reject",
          "html": "<li class=\"py-4 border-b border-gray-200\">  <h2 class=\"text-lg\">{children}</h2>  <p class=\"text-gray-600\">{description}</p>  <p class=\"text-gray-600\">{status}</p>  <div class=\"flex justify-end\">    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">View Details</button>    <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">Approve</button>    <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Reject</button>  </div></li>"
        },
        {
          "name": "PullRequestDetails",
          "is_standalone": true,
          "description": "standalone, displays detailed information about a pull request",
          "html": "<div class=\"max-w-md mx-auto p-4 pt-6\">  <h2 class=\"text-2xl font-bold\">{pr.title}</h2>  <p class=\"text-gray-600\">{pr.description}</p>  <p class=\"text-gray-600\">Updated {pr.updated_at}</p>  <!-- additional details about the pull request --></div>"
        }
      ]
    }
  ],
  "Verified checkmark and badge for official channels": [
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text \"Verified\" should be displayed next to the badge.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge />\n  <VerifiedText />\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center\">  <span class=\"text-lg material-icons\">check</span></div>"
        },
        {
          "name": "VerifiedText",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-sm text-gray-600\">{verified_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a verified checkmark and a badge to indicate that a channel is official.",
      "html": "<div class=\"flex items-center\">\n  <VerifiedBadge/>\n  <span class=\"text-sm\">{channelName}</span>\n</div>\n",
      "components": [
        {
          "name": "VerifiedBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a verified checkmark and a badge.",
          "html": "<div class=\"flex items-center bg-yellow-100 rounded-full py-1 px-2 text-yellow-700\">  <CheckmarkIcon/>  <span class=\"text-xs\">Official</span></div>"
        },
        {
          "name": "CheckmarkIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a checkmark icon.",
          "html": "<i class=\"fas fa-check text-green-500\" aria-hidden=\"true\"></i>"
        }
      ]
    }
  ],
  "Responsive Image Breakpoints": [
    {
      "description": "The UI should display a responsive image that adapts to different screen sizes and breakpoints.",
      "html": "<div class=\"mx-auto max-w-md p-4\">\n  <ResponsiveImage />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveImage",
          "is_standalone": true,
          "description": "(standalone component)",
          "html": "<img src=\"{image_url}\"      class=\"w-full h-auto rounded-lg mx-auto             md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96\"      alt=\"{image_alt_text}\" />"
        }
      ]
    },
    {
      "description": "The UI should display a responsive image that adapts to different screen sizes and breakpoints.",
      "html": "<div class=\"mx-auto max-w-md p-4\">\n  <ResponsiveImage />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveImage",
          "is_standalone": true,
          "description": "(standalone component)",
          "html": "<img src=\"{image_url}\"      class=\"w-full h-auto rounded-lg mx-auto             md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96\"      alt=\"{image_alt_text}\" />"
        }
      ]
    },
    {
      "description": "The UI should display a responsive image that adapts to different screen sizes and breakpoints.",
      "html": "<div class=\"mx-auto max-w-md p-4\">\n  <ResponsiveImage />\n</div>\n",
      "components": [
        {
          "name": "ResponsiveImage",
          "is_standalone": true,
          "description": "(standalone component)",
          "html": "<img src=\"{image_url}\"      class=\"w-full h-auto rounded-lg mx-auto             md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96\"      alt=\"{image_alt_text}\" />"
        }
      ]
    }
  ],
  "Search bar for finding videos": [
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    },
    {
      "description": "A simple search bar with a search input and a search button. The search bar should be centered on the page and should be responsive.",
      "html": "<div class=\"flex justify-center pt-4\">\n  <SearchBar />\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that contains a search input and a search button.",
          "html": "<div class=\"flex items-center bg-white rounded-md shadow-md p-2\">  <SearchInput />  <SearchButton /></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "A standalone component that renders an input field.",
          "html": "<input type=\"search\" class=\"w-full pl-2 py-2 rounded-md\" placeholder=\"Search for videos\" />"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "A standalone component that renders a button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md\">Search</button>"
        }
      ]
    },
    {
      "description": "The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-8\">\n  <SearchBar/>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and submit button.",
          "html": "<div class=\"flex items-center w-full\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that renders the input field.",
          "html": "<input type=\"search\" class=\"w-full pl-10 pr-4 py-2 text-lg\" placeholder=\"Find a video...\">"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that renders the submit button and search icon.",
          "html": "<button type=\"submit\" class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <span class=\"sr-only\">Search</span>  <i class=\"fas fa-search\" aria-hidden=\"true\"></i></button>"
        }
      ]
    }
  ],
  "Username display for other users": [
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a user's username, profile picture, and a badge indicating their online status.",
      "html": "<div className=\"flex items-center\">\n  <UserProfileDisplay />\n  <OnlineBadge />\n</div>\n",
      "components": [
        {
          "name": "UserProfileDisplay",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile picture and username.",
          "html": "<div className=\"flex items-center\">  <img src={profile_picture_url} className=\"w-8 h-8 rounded-full\" />  <p className=\"ml-2\">{username}</p></div>"
        },
        {
          "name": "OnlineBadge",
          "is_standalone": true,
          "description": "standalone component that displays the online status badge.",
          "html": "<div className={`w-3 h-3 rounded-full ${is_online ? 'bg-green-500' : 'bg-gray-500'}`}></div>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    },
    {
      "description": "The UI should display a username in a compact format, with optional online status indicator. It should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex items-center\">\n  <UsernameDisplay/>\n</div>\n",
      "components": [
        {
          "name": "UsernameDisplay",
          "is_standalone": true,
          "description": "Standalone component that displays a username with optional online status indicator.",
          "html": "<span class=\"text-sm\">{username}</span><!-- Optional online status indicator -->{online ? <OnlineStatusIndicator/> : ''}"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "Standalone component that displays an online status indicator (e.g. a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full bg-green-500\"></span>"
        }
      ]
    }
  ],
  "Simple product listing with thumbnails": [
    {
      "description": "A responsive grid of product cards with thumbnails, displaying product information.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- add more ProductCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "A standalone component displaying a single product's information.",
          "html": "<div className=\"bg-white rounded shadow-md p-4\">  <ProductCardThumbnail />  <ProductCardInfo /></div>"
        },
        {
          "name": "ProductCardThumbnail",
          "is_standalone": true,
          "description": "A standalone component displaying a product's thumbnail.",
          "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />"
        },
        {
          "name": "ProductCardInfo",
          "is_standalone": true,
          "description": "A standalone component displaying a product's details.",
          "html": "<h2 className=\"text-lg font-bold\">{product_name}</h2><p className=\"text-gray-600\">{product_description}</p><p className=\"text-sm\">{product_price}</p>"
        }
      ]
    },
    {
      "description": "A grid of product thumbnails with a title and price overlay.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8\">\n  <h1>Product Listing</h1>\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n    <ProductThumbnail />\n    <ProductThumbnail />\n    <ProductThumbnail />\n    <!-- repeat ProductThumbnail components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductThumbnail",
          "is_standalone": true,
          "description": "standalone",
          "html": "<div className=\"relative overflow-hidden shadow-md rounded-lg\">  <img src=\"{product_image}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover\" />  <div className=\"absolute bottom-0 left-0 p-4 text-white\">    <h5>{product_name}</h5>    <p>${product_price}</p>  </div></div>"
        },
        {
          "name": "ProductListing",
          "is_standalone": false,
          "description": "takes children (`ProductThumbnail` components)",
          "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-8\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive grid of product cards with thumbnails, displaying product information.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- add more ProductCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "A standalone component displaying a single product's information.",
          "html": "<div className=\"bg-white rounded shadow-md p-4\">  <ProductCardThumbnail />  <ProductCardInfo /></div>"
        },
        {
          "name": "ProductCardThumbnail",
          "is_standalone": true,
          "description": "A standalone component displaying a product's thumbnail.",
          "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />"
        },
        {
          "name": "ProductCardInfo",
          "is_standalone": true,
          "description": "A standalone component displaying a product's details.",
          "html": "<h2 className=\"text-lg font-bold\">{product_name}</h2><p className=\"text-gray-600\">{product_description}</p><p className=\"text-sm\">{product_price}</p>"
        }
      ]
    },
    {
      "description": "A responsive grid of product cards with thumbnails, displaying product information.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- add more ProductCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "A standalone component displaying a single product's information.",
          "html": "<div className=\"bg-white rounded shadow-md p-4\">  <ProductCardThumbnail />  <ProductCardInfo /></div>"
        },
        {
          "name": "ProductCardThumbnail",
          "is_standalone": true,
          "description": "A standalone component displaying a product's thumbnail.",
          "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />"
        },
        {
          "name": "ProductCardInfo",
          "is_standalone": true,
          "description": "A standalone component displaying a product's details.",
          "html": "<h2 className=\"text-lg font-bold\">{product_name}</h2><p className=\"text-gray-600\">{product_description}</p><p className=\"text-sm\">{product_price}</p>"
        }
      ]
    },
    {
      "description": "A responsive grid of product cards with thumbnails, displaying product information.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- add more ProductCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "A standalone component displaying a single product's information.",
          "html": "<div className=\"bg-white rounded shadow-md p-4\">  <ProductCardThumbnail />  <ProductCardInfo /></div>"
        },
        {
          "name": "ProductCardThumbnail",
          "is_standalone": true,
          "description": "A standalone component displaying a product's thumbnail.",
          "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />"
        },
        {
          "name": "ProductCardInfo",
          "is_standalone": true,
          "description": "A standalone component displaying a product's details.",
          "html": "<h2 className=\"text-lg font-bold\">{product_name}</h2><p className=\"text-gray-600\">{product_description}</p><p className=\"text-sm\">{product_price}</p>"
        }
      ]
    },
    {
      "description": "A responsive grid of product cards with thumbnails, displaying product information.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- add more ProductCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "A standalone component displaying a single product's information.",
          "html": "<div className=\"bg-white rounded shadow-md p-4\">  <ProductCardThumbnail />  <ProductCardInfo /></div>"
        },
        {
          "name": "ProductCardThumbnail",
          "is_standalone": true,
          "description": "A standalone component displaying a product's thumbnail.",
          "html": "<img src=\"{product_image_url}\" alt=\"{product_name}\" className=\"w-full h-48 object-cover rounded-t\" />"
        },
        {
          "name": "ProductCardInfo",
          "is_standalone": true,
          "description": "A standalone component displaying a product's details.",
          "html": "<h2 className=\"text-lg font-bold\">{product_name}</h2><p className=\"text-gray-600\">{product_description}</p><p className=\"text-sm\">{product_price}</p>"
        }
      ]
    }
  ],
  "Two-Factor Auth/QR Codes": [
    {
      "description": "The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <TwoFactorAuth/>\n</div>\n",
      "components": [
        {
          "name": "TwoFactorAuth",
          "is_standalone": true,
          "description": "The main component that holds the QR code and text-based code. (Standalone)",
          "html": "<div class=\"flex flex-col items-center\">  <QrCode/>  <CodeText/></div>"
        },
        {
          "name": "QrCode",
          "is_standalone": true,
          "description": "Displays the QR code. (Standalone)",
          "html": "<img src={qr_code_src} alt=\"QR Code\" class=\"w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4\" />"
        },
        {
          "name": "CodeText",
          "is_standalone": true,
          "description": "Displays the text-based code. (Standalone)",
          "html": "<p class=\"text-lg md:text-xl lg:text-2xl\">{code_text}</p>"
        }
      ]
    },
    {
      "description": "A simple page with a header, a section for a QR code, and a section for a 2FA code.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <AuthHeader/>\n  <div class=\"flex justify-center mb-4\">\n    <QrCodeSection/>\n  </div>\n  <div class=\"mb-4\">\n    <TwoFactorCode/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "AuthHeader",
          "is_standalone": true,
          "description": "- standalone (header for the 2FA page)",
          "html": "<header class=\"mb-4\">  <h1 class=\"text-2xl font-bold\">Two-Factor Authentication</h1></header>"
        },
        {
          "name": "QrCodeSection",
          "is_standalone": true,
          "description": "- standalone (section for displaying the QR code)",
          "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <img src=\"{qr_code_image_url}\" alt=\"QR Code\" class=\"w-64 h-64 mx-auto\"/>  <p class=\"text-sm text-gray-600\">{qr_code_instructions}</p></section>"
        },
        {
          "name": "TwoFactorCode",
          "is_standalone": true,
          "description": "- standalone (section for displaying the 2FA code)",
          "html": "<section class=\"bg-white p-4 rounded shadow-md\">  <h2 class=\"text-lg font-bold\">Your 2FA Code</h2>  <p class=\"text-2xl\">{two_factor_code}</p>  <p class=\"text-sm text-gray-600\">{two_factor_code_instructions}</p></section>"
        }
      ]
    },
    {
      "description": "The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <TwoFactorAuth/>\n</div>\n",
      "components": [
        {
          "name": "TwoFactorAuth",
          "is_standalone": true,
          "description": "The main component that holds the QR code and text-based code. (Standalone)",
          "html": "<div class=\"flex flex-col items-center\">  <QrCode/>  <CodeText/></div>"
        },
        {
          "name": "QrCode",
          "is_standalone": true,
          "description": "Displays the QR code. (Standalone)",
          "html": "<img src={qr_code_src} alt=\"QR Code\" class=\"w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4\" />"
        },
        {
          "name": "CodeText",
          "is_standalone": true,
          "description": "Displays the text-based code. (Standalone)",
          "html": "<p class=\"text-lg md:text-xl lg:text-2xl\">{code_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <TwoFactorAuth/>\n</div>\n",
      "components": [
        {
          "name": "TwoFactorAuth",
          "is_standalone": true,
          "description": "The main component that holds the QR code and text-based code. (Standalone)",
          "html": "<div class=\"flex flex-col items-center\">  <QrCode/>  <CodeText/></div>"
        },
        {
          "name": "QrCode",
          "is_standalone": true,
          "description": "Displays the QR code. (Standalone)",
          "html": "<img src={qr_code_src} alt=\"QR Code\" class=\"w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4\" />"
        },
        {
          "name": "CodeText",
          "is_standalone": true,
          "description": "Displays the text-based code. (Standalone)",
          "html": "<p class=\"text-lg md:text-xl lg:text-2xl\">{code_text}</p>"
        }
      ]
    }
  ],
  "Folder and label management interface": [
    {
      "description": "The UI should consist of a sidebar with a list of folders and labels, and a main content area that displays the selected folder or label's contents. The sidebar should have a fixed width and be collapsible. The main content area should take up the remaining space.",
      "html": "<div class=\"flex h-screen\">\n  <div class=\"hidden md:block w-64 bg-gray-100 p-4\">\n    <FolderSidebar />\n    <LabelSidebar />\n    <SidebarToggle />\n  </div>\n  <div class=\"flex-1 p-4\">\n    <Breadcrumb />\n    <FolderContent />\n    <LabelContent />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FolderSidebar",
          "is_standalone": true,
          "description": "A standalone component that displays a list of folders.",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {folders.map((folder) => (    <li key={folder.id} class=\"py-2 border-b border-gray-200\">      <a href={folder.url} class=\"text-gray-800 hover:text-gray-900\">        {folder.name}      </a>    </li>  ))}</ul>"
        },
        {
          "name": "LabelSidebar",
          "is_standalone": true,
          "description": "A standalone component that displays a list of labels.",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {labels.map((label) => (    <li key={label.id} class=\"py-2 border-b border-gray-200\">      <a href={label.url} class=\"text-gray-800 hover:text-gray-900\">        {label.name}      </a>    </li>  ))}</ul>"
        },
        {
          "name": "SidebarToggle",
          "is_standalone": true,
          "description": "A standalone component that toggles the sidebar's collapsed state.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded\">  {isSidebarCollapsed ? 'Expand' : 'Collapse'}</button>"
        },
        {
          "name": "FolderContent",
          "is_standalone": false,
          "description": "A component that takes children, displaying the contents of a selected folder.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "LabelContent",
          "is_standalone": false,
          "description": "A component that takes children, displaying the contents of a selected label.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "A standalone component that displays the current folder or label path.",
          "html": "<nav class=\"py-2 pl-4 mb-4\">  {crumbs.map((crumb) => (    <span key={crumb.id} class=\"text-gray-600\">      {crumb.name}      {' / '}    </span>  ))}</nav>"
        }
      ]
    },
    {
      "description": "The UI should resemble a file explorer interface, with a list of folders and labels on the left, and a workspace on the right to manage the selected folder or label.",
      "html": "<div class=\"flex h-screen\">\n  <div class=\"w-1/3 bg-gray-100 p-4\">\n    <FolderTree />\n    <LabelList />\n  </div>\n  <div class=\"w-2/3 p-4\">\n    <Breadcrumb />\n    {selectedFolderOrLabel === 'folder' ? <FolderWorkspace /> : <LabelWorkspace />}\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FolderTree",
          "is_standalone": true,
          "description": "(standalone): a hierarchical list of folders",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {folders.map((folder) => (    <li key={folder.id} class=\"py-2 pl-4\">      <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{folder.name}</a>      {folder.children ? <FolderTree folders={folder.children} /> : null}    </li>  ))}</ul>"
        },
        {
          "name": "LabelList",
          "is_standalone": true,
          "description": "(standalone): a list of labels",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {labels.map((label) => (    <li key={label.id} class=\"py-2 pl-4\">      <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{label.name}</a>    </li>  ))}</ul>"
        },
        {
          "name": "FolderWorkspace",
          "is_standalone": false,
          "description": "(takes children): a workspace to manage the selected folder",
          "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{selectedFolder.name}</h2>  <p class=\"text-gray-600\">{selectedFolder.description}</p>  {children}</div>"
        },
        {
          "name": "LabelWorkspace",
          "is_standalone": false,
          "description": "(takes children): a workspace to manage the selected label",
          "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{selectedLabel.name}</h2>  <p class=\"text-gray-600\">{selectedLabel.description}</p>  {children}</div>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone): a breadcrumb trail to show the current folder or label path",
          "html": "<nav class=\"flex mb-4\">  <ol class=\"list-none flex\">    {breadcrumbTrail.map((crumb, idx) => (      <li key={idx} class=\"mr-2\">        <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{crumb.name}</a>      </li>    ))}  </ol></nav>"
        }
      ]
    },
    {
      "description": "The UI should consist of a sidebar with a list of folders and labels, and a main content area that displays the selected folder or label's contents. The sidebar should have a fixed width and be collapsible. The main content area should take up the remaining space.",
      "html": "<div class=\"flex h-screen\">\n  <div class=\"hidden md:block w-64 bg-gray-100 p-4\">\n    <FolderSidebar />\n    <LabelSidebar />\n    <SidebarToggle />\n  </div>\n  <div class=\"flex-1 p-4\">\n    <Breadcrumb />\n    <FolderContent />\n    <LabelContent />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "FolderSidebar",
          "is_standalone": true,
          "description": "A standalone component that displays a list of folders.",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {folders.map((folder) => (    <li key={folder.id} class=\"py-2 border-b border-gray-200\">      <a href={folder.url} class=\"text-gray-800 hover:text-gray-900\">        {folder.name}      </a>    </li>  ))}</ul>"
        },
        {
          "name": "LabelSidebar",
          "is_standalone": true,
          "description": "A standalone component that displays a list of labels.",
          "html": "<ul class=\"list-none pl-0 mb-4\">  {labels.map((label) => (    <li key={label.id} class=\"py-2 border-b border-gray-200\">      <a href={label.url} class=\"text-gray-800 hover:text-gray-900\">        {label.name}      </a>    </li>  ))}</ul>"
        },
        {
          "name": "SidebarToggle",
          "is_standalone": true,
          "description": "A standalone component that toggles the sidebar's collapsed state.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded\">  {isSidebarCollapsed ? 'Expand' : 'Collapse'}</button>"
        },
        {
          "name": "FolderContent",
          "is_standalone": false,
          "description": "A component that takes children, displaying the contents of a selected folder.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "LabelContent",
          "is_standalone": false,
          "description": "A component that takes children, displaying the contents of a selected label.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "A standalone component that displays the current folder or label path.",
          "html": "<nav class=\"py-2 pl-4 mb-4\">  {crumbs.map((crumb) => (    <span key={crumb.id} class=\"text-gray-600\">      {crumb.name}      {' / '}    </span>  ))}</nav>"
        }
      ]
    }
  ],
  "Real-time Comment and Discussion Forum": [
    {
      "description": "The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ForumHeader />\n  <ForumContainer>\n    <CommentList>\n      <CommentItem />\n      <CommentItem />\n      <!-- Add more CommentItem components here -->\n    </CommentList>\n    <CommentForm />\n  </ForumContainer>\n</div>\n",
      "components": [
        {
          "name": "CommentItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single comment.",
          "html": "<div class=\"flex gap-2 py-2 border-b border-gray-200\">  <img src=\"{avatar_url}\" alt=\"Avatar\" class=\"w-8 h-8 rounded-full\" />  <div class=\"flex-1\">    <p class=\"text-sm\">{username}</p>    <p class=\"text-gray-600\">{comment_text}</p>  </div></div>"
        },
        {
          "name": "CommentForm",
          "is_standalone": true,
          "description": "A standalone component that allows users to post a new comment.",
          "html": "<form class=\"flex flex-col gap-2\">  <input type=\"text\" placeholder=\"Write a comment...\" class=\"w-full p-2\" />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Post Comment  </button></form>"
        },
        {
          "name": "CommentList",
          "is_standalone": false,
          "description": "A component that takes children (multiple `CommentItem` components) and displays them in a list.",
          "html": "<ul class=\"list-none p-0\">  {children}</ul>"
        },
        {
          "name": "ForumHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the forum.",
          "html": "<h1 class=\"text-2xl font-bold\">{forum_title}</h1>"
        },
        {
          "name": "ForumContainer",
          "is_standalone": false,
          "description": "A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.",
          "html": "<div class=\"max-w-md mx-auto p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ForumHeader />\n  <ForumContainer>\n    <CommentList>\n      <CommentItem />\n      <CommentItem />\n      <!-- Add more CommentItem components here -->\n    </CommentList>\n    <CommentForm />\n  </ForumContainer>\n</div>\n",
      "components": [
        {
          "name": "CommentItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single comment.",
          "html": "<div class=\"flex gap-2 py-2 border-b border-gray-200\">  <img src=\"{avatar_url}\" alt=\"Avatar\" class=\"w-8 h-8 rounded-full\" />  <div class=\"flex-1\">    <p class=\"text-sm\">{username}</p>    <p class=\"text-gray-600\">{comment_text}</p>  </div></div>"
        },
        {
          "name": "CommentForm",
          "is_standalone": true,
          "description": "A standalone component that allows users to post a new comment.",
          "html": "<form class=\"flex flex-col gap-2\">  <input type=\"text\" placeholder=\"Write a comment...\" class=\"w-full p-2\" />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Post Comment  </button></form>"
        },
        {
          "name": "CommentList",
          "is_standalone": false,
          "description": "A component that takes children (multiple `CommentItem` components) and displays them in a list.",
          "html": "<ul class=\"list-none p-0\">  {children}</ul>"
        },
        {
          "name": "ForumHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the title of the forum.",
          "html": "<h1 class=\"text-2xl font-bold\">{forum_title}</h1>"
        },
        {
          "name": "ForumContainer",
          "is_standalone": false,
          "description": "A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.",
          "html": "<div class=\"max-w-md mx-auto p-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Award or achievement section with icons and dates": [
    {
      "description": "The UI should have a section that showcases awards or achievements, with icons and dates.",
      "html": "<section class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 class=\"text-2xl mb-4\">Awards and Achievements</h2>\n  <AchievementSection>\n    <AwardItem/>\n    <AwardItem/>\n    <AwardItem/>\n  </AchievementSection>\n</section>\n",
      "components": [
        {
          "name": "AwardItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single award or achievement.",
          "html": "<div class=\"flex items-center mb-4\">  <span class=\"mr-4\">{icon}</span>  <div>    <h3 class=\"text-lg\">{award_name}</h3>    <p class=\"text-sm text-gray-600\">{award_date}</p>  </div></div>"
        },
        {
          "name": "AchievementSection",
          "is_standalone": false,
          "description": "A component that takes children and wraps the award items.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of awards or achievements with icons and dates in a responsive, mobile-first, and accessible manner.",
      "html": "<section className=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Awards and Achievements</h2>\n  <AwardList>\n    <AwardCard />\n    <AwardCard />\n    <!-- Add more AwardCard components here -->\n  </AwardList>\n</section>\n",
      "components": [
        {
          "name": "AwardCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single award or achievement.",
          "html": "<div className=\"flex items-center mb-4\">  <div className=\"mr-4\">    <i className=\"fas fa-{award_icon} text-2xl text-gray-600\"></i>  </div>  <div>    <h3 className=\"text-lg font-bold\">{award_name}</h3>    <p className=\"text-gray-600\">{award_date}</p>  </div></div>"
        },
        {
          "name": "AwardList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `AwardCard` components.",
          "html": "<ul className=\"list-none mb-0 p-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Video/Audio Players": [
    {
      "description": "The UI should have a large video or audio player in the center, with playback controls (play/pause, seek, volume) below it. There should also be a title and optional description above the player.",
      "html": "<div class=\"flex flex-col h-screen p-4\">\n  <div class=\"flex justify-center mb-4\">\n    <MediaTitle/> <!-- displays the title of the media -->\n    <MediaDescription/> <!-- displays a optional description of the media -->\n  </div>\n  <MediaPlayer/> <!-- displays the video or audio content -->\n  <MediaControls/> <!-- displays the playback controls (play/pause, seek, volume) -->\n</div>\n",
      "components": [
        {
          "name": "MediaPlayer",
          "is_standalone": true,
          "description": "standalone, displays the video or audio content",
          "html": "<div class=\"w-full h-96 bg-gray-200 rounded-lg\">  <!-- video or audio content will be rendered here --></div>"
        },
        {
          "name": "MediaControls",
          "is_standalone": true,
          "description": "standalone, displays the playback controls (play/pause, seek, volume)",
          "html": "<div class=\"flex justify-center mb-4\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {play_or_pause_text}  </button>  <div class=\"mx-4\">    <input type=\"range\" class=\"w-full\" />  </div>  <button class=\"bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded\">    Volume: {volume_level}%  </button></div>"
        },
        {
          "name": "MediaTitle",
          "is_standalone": true,
          "description": "standalone, displays the title of the media",
          "html": "<h2 class=\"text-2xl font-bold mb-2\">{media_title}</h2>"
        },
        {
          "name": "MediaDescription",
          "is_standalone": true,
          "description": "standalone, displays a optional description of the media",
          "html": "<p class=\"text-gray-600\">{media_description}</p>"
        }
      ]
    }
  ],
  "Personalized Dashboard with Project Insights": [
    {
      "description": "The UI should be a responsive, mobile-first, and accessible personalized dashboard that displays project insights. The dashboard should have a clean and minimalistic design, with clear typography and sufficient whitespace. It should display key project metrics, such as project completion percentage, task lists, and upcoming deadlines. The dashboard should also have a section for quick links to frequently accessed project resources.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <DashboardHeader />\n  <div className=\"flex flex-wrap -mx-4\">\n    <div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <ProjectMetrics />\n    </div>\n    <div className=\"w-full md:w-1/2 xl:w-2/3 p-4\">\n      <TaskList>\n        <!-- task list items will be inserted here -->\n      </TaskList>\n    </div>\n  </div>\n  <QuickLinks />\n</div>\n",
      "components": [
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the dashboard title and navigation links.",
          "html": "<header className=\"bg-gray-200 p-4\">  <h1 className=\"text-2xl\">{dashboard_title}</h1>  <nav>    <ul className=\"flex justify-end\">      <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>      <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>    </ul>  </nav></header>"
        },
        {
          "name": "ProjectMetrics",
          "is_standalone": true,
          "description": "(standalone): Displays key project metrics, such as project completion percentage and upcoming deadlines.",
          "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Project Metrics</h2>  <ul className=\"list-none mb-0\">    <li><MetricCard label=\"Project Completion\" value={completion_percentage}% /></li>    <li><MetricCard label=\"Upcoming Deadline\" value={deadline_date} /></li>  </ul></section>"
        },
        {
          "name": "TaskList",
          "is_standalone": false,
          "description": "(takes children): Displays a list of tasks with checkboxes and task names.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        },
        {
          "name": "QuickLinks",
          "is_standalone": true,
          "description": "(standalone): Displays a list of quick links to frequently accessed project resources.",
          "html": "<section className=\"bg-white p-4\">  <h2 className=\"text-lg\">Quick Links</h2>  <ul className=\"list-none mb-0\">    <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>    <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>  </ul></section>"
        },
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "(standalone): Displays a single project metric, such as project completion percentage.",
          "html": "<div className=\"bg-white p-4\">  <h3 className=\"text-lg\">{label}</h3>  <p className=\"text-3xl\">{value}</p></div>"
        }
      ]
    }
  ],
  "Thumbnail generator for video previews": [
    {
      "description": "A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.",
      "html": "<div className=\"container mx-auto p-4\">\n  <ThumbnailGrid>\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <!-- Add more VideoThumbnail components as needed -->\n  </ThumbnailGrid>\n</div>\n",
      "components": [
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component representing a single video thumbnail.",
          "html": "<div className=\"bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out\">  <img src={thumbnail_url} alt={video_title} className=\"w-full h-40 object-cover\" />  <div className=\"p-2\">    <h5 className=\"text-lg font-bold\">{video_title}</h5>    <p className=\"text-sm text-gray-600\">{duration}</p>  </div></div>"
        },
        {
          "name": "ThumbnailGrid",
          "is_standalone": false,
          "description": "A container component that takes children, which are `VideoThumbnail` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A grid of thumbnail previews for video clips, with each thumbnail displaying a screenshot of the video and text overlay showing the video title and duration.",
      "html": "<div className=\"container mx-auto p-4\">\n  <ThumbnailGrid>\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <!-- Add more VideoThumbnail components here -->\n  </ThumbnailGrid>\n</div>\n",
      "components": [
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "a standalone component displaying a single video thumbnail",
          "html": "<div className=\"bg-gray-200 h-32 w-48 relative overflow-hidden\">  <img src=\"{thumbnail_url}\" alt=\"{video_title}\" className=\"object-cover h-full w-full\" />  <div className=\"absolute bottom-0 left-0 p-2 text-sm text-white\">    <p>{video_title}</p>    <p>{duration} seconds</p>  </div></div>"
        },
        {
          "name": "ThumbnailGrid",
          "is_standalone": false,
          "description": "a container component that renders a grid of `VideoThumbnail` components and takes children",
          "html": "<div className=\"grid grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.",
      "html": "<div className=\"container mx-auto p-4\">\n  <ThumbnailGrid>\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <!-- Add more VideoThumbnail components as needed -->\n  </ThumbnailGrid>\n</div>\n",
      "components": [
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component representing a single video thumbnail.",
          "html": "<div className=\"bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out\">  <img src={thumbnail_url} alt={video_title} className=\"w-full h-40 object-cover\" />  <div className=\"p-2\">    <h5 className=\"text-lg font-bold\">{video_title}</h5>    <p className=\"text-sm text-gray-600\">{duration}</p>  </div></div>"
        },
        {
          "name": "ThumbnailGrid",
          "is_standalone": false,
          "description": "A container component that takes children, which are `VideoThumbnail` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.",
      "html": "<div className=\"container mx-auto p-4\">\n  <ThumbnailGrid>\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <VideoThumbnail />\n    <!-- Add more VideoThumbnail components as needed -->\n  </ThumbnailGrid>\n</div>\n",
      "components": [
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component representing a single video thumbnail.",
          "html": "<div className=\"bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out\">  <img src={thumbnail_url} alt={video_title} className=\"w-full h-40 object-cover\" />  <div className=\"p-2\">    <h5 className=\"text-lg font-bold\">{video_title}</h5>    <p className=\"text-sm text-gray-600\">{duration}</p>  </div></div>"
        },
        {
          "name": "ThumbnailGrid",
          "is_standalone": false,
          "description": "A container component that takes children, which are `VideoThumbnail` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Portfolio filter with categories and tags": [
    {
      "description": "A portfolio filter component that allows users to filter projects by categories and tags. The component consists of two sections: a category filter and a tag filter. Each section has a title, a reset button, and a list of filter options.",
      "html": "<div class=\"flex flex-wrap -mx-4\">\n  <CategoryFilter />\n  <TagFilter />\n</div>\n",
      "components": [
        {
          "name": "CategoryFilter",
          "is_standalone": true,
          "description": "(standalone) - renders the category filter section",
          "html": "<div class=\"w-full md:w-1/2 px-4 mb-4\">  <h5 class=\"uppercase tracking-wide mb-2\">Categories</h5>  <FilterResetButton />  <ul class=\"list-none mb-0\">    {categories.map((category) => (      <FilterOption key={category.id}>{category.name}</FilterOption>    ))}  </ul></div>"
        },
        {
          "name": "TagFilter",
          "is_standalone": true,
          "description": "(standalone) - renders the tag filter section",
          "html": "<div class=\"w-full md:w-1/2 px-4 mb-4\">  <h5 class=\"uppercase tracking-wide mb-2\">Tags</h5>  <FilterResetButton />  <ul class=\"list-none mb-0\">    {tags.map((tag) => (      <FilterOption key={tag.id}>{tag.name}</FilterOption>    ))}  </ul></div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": false,
          "description": "(takes children) - renders a single filter option with a label and a checkbox",
          "html": "<li class=\"mb-2\">  <input    type=\"checkbox\"    id={`filter-option-${id}`}    name={name}    class=\"mr-2\"  />  <label for={`filter-option-${id}`}>{children}</label></li>"
        },
        {
          "name": "FilterResetButton",
          "is_standalone": true,
          "description": "(standalone) - renders a reset button for the filter",
          "html": "<button class=\"btn btn-sm btn-secondary\">Reset Filter</button>"
        }
      ]
    }
  ],
  "About me section with bio and profile picture": [
    {
      "description": "The UI should be a responsive, mobile-first About Me section with a profile picture and a brief bio. The profile picture should be circular and positioned above the bio. The bio should be a short paragraphs of text.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <AboutMeContainer/>\n</div>\n",
      "components": [
        {
          "name": "AboutMeContainer",
          "is_standalone": true,
          "description": "Standalone component that wraps the entire About Me section.",
          "html": "<div class=\"flex flex-col items-center md:flex-row\">  <ProfilePicture/>  <Bio/></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "Standalone component that displays the profile picture.",
          "html": "<img src=\"{profile_picture_url}\" alt=\"{profile_picture_alt}\" class=\"w-24 h-24 rounded-full mb-4 md:mr-4 md:mb-0\"/>"
        },
        {
          "name": "Bio",
          "is_standalone": true,
          "description": "Standalone component that displays the bio text.",
          "html": "<p class=\"text-lg\">{bio_text}</p>"
        }
      ]
    }
  ],
  "Rating and Review Systems": [
    {
      "description": "The UI should display an average rating (e.g., 4.5/5) with a visual representation of the rating (e.g., stars), followed by a list of reviews. Each review should display the reviewer's name, rating (with a visual representation of the rating), and the review text.",
      "html": "<div className=\"flex flex-col\">\n  <div className=\"mb-4\">\n    <RatingStars rating={average_rating} />\n    <p>Average rating: {average_rating}/5</p>\n  </div>\n  <RatingAndReviews>\n    {reviews.map(review => (\n      <Review key={review.id}>\n        {review.text}\n      </Review>\n    ))}\n  </RatingAndReviews>\n</div>\n",
      "components": [
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "A standalone component that displays a rating as a series of stars (e.g., ⭐️⭐️⭐️⭐️☆).",
          "html": "<span className=\"text-lg\">  {[...Array(5).keys()].map(i => (    <i key={i} className={i < rating ? 'fas fa-star' : 'far fa-star'} />  ))}</span>"
        },
        {
          "name": "Review",
          "is_standalone": false,
          "description": "A component that takes children (the review text) and displays a single review with the reviewer's name, rating, and review text.",
          "html": "<div className=\"mb-4\">  <p className=\"font-bold\">{reviewer_name}</p>  <RatingStars rating={review_rating} />  <p>{children}</p></div>"
        },
        {
          "name": "RatingAndReviews",
          "is_standalone": false,
          "description": "A component that takes children (the list of reviews) and displays the average rating and the list of reviews.",
          "html": "<div className=\"flex flex-col\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a rating and review system that displays the average rating and allows users to leave their own ratings and reviews. It should be responsive and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <!-- Rating and Review Summary -->\n  <RatingStars />\n  <p>{average_rating} / 5 stars, {review_count} reviews</p>\n\n  <!-- Review List -->\n  <ReviewList>\n    <!-- Review Cards will be inserted here -->\n  </ReviewList>\n\n  <!-- Review Form -->\n  <ReviewForm />\n</div>\n",
      "components": [
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "Standalone component to display the average rating as stars.",
          "html": "<div class=\"flex mb-2\">  {stars} <!-- 1-5 stars will be displayed here --></div>"
        },
        {
          "name": "RatingInput",
          "is_standalone": true,
          "description": "Standalone component to input a rating (e.g., 1-5 stars).",
          "html": "<div class=\"flex mb-2\">  <label class=\"sr-only\" for=\"rating\">Rating (1-5)</label>  <input type=\"number\" id=\"rating\" min=\"1\" max=\"5\" value=\"{rating}\" />  <span class=\"ml-2\">{rating} / 5 stars</span></div>"
        },
        {
          "name": "ReviewList",
          "is_standalone": false,
          "description": "Component that takes children to display a list of reviews.",
          "html": "<ul class=\"list-none mb-4\">  {children} <!-- ReviewCards will be inserted here --></ul>"
        },
        {
          "name": "ReviewCard",
          "is_standalone": true,
          "description": "Standalone component to display a single review.",
          "html": "<li class=\"mb-4\">  <p>{username} - {date}</p>  <RatingInput rating={rating} />  <p>{review}</p></li>"
        },
        {
          "name": "ReviewForm",
          "is_standalone": true,
          "description": "Standalone component to input a new review.",
          "html": "<form class=\"mb-4\">  <label class=\"block mb-2\" for=\"review\">Leave a review</label>  <textarea id=\"review\" class=\"w-full p-2\" placeholder=\"Write a review...\"></textarea>  <RatingInput />  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Submit</button></form>"
        }
      ]
    }
  ],
  "Comment Section": [
    {
      "description": "The UI should display a list of comments, with each comment showing the user's name, comment text, and a timestamp. There should be a input field for the user to type in their comment, along with a \"Post\" button to submit the comment.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <CommentInput />\n  <CommentList>\n    <Comment />\n    <Comment />\n    <!-- more comments here -->\n  </CommentList>\n</div>\n",
      "components": [
        {
          "name": "CommentSection",
          "is_standalone": true,
          "description": "standalone",
          "html": "<!-- not applicable, this is the top-level component -->"
        },
        {
          "name": "Comment",
          "is_standalone": true,
          "description": "standalone",
          "html": "<div className=\"mb-4\">  <p class=\"text-gray-900\">{username}</p>  <p class=\"text-gray-600\">{comment_text}</p>  <p class=\"text-gray-500\">{timestamp}</p></div>"
        },
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone",
          "html": "<div>  <input type=\"text\" className=\"w-full p-2 pl-10 text-sm text-gray-700\" value={newCommentText} />  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Post</button></div>"
        },
        {
          "name": "CommentList",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div className=\"divide-y divide-gray-200\">  {children}</div>"
        }
      ]
    }
  ],
  "Product Showcase with Animated Cards": [
    {
      "description": "The UI should be a product showcase with a grid of animated cards. Each card should have a hover effect and display a product image, title, and description. The grid should be responsive and adjust to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProductGrid>\n    <ProductCard/>\n    <ProductCard/>\n    <ProductCard/>\n    <!-- Add more ProductCard components here -->\n  </ProductGrid>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "(standalone): A single product card with a hover effect.",
          "html": "<div class=\"bg-white shadow-md rounded overflow-hidden transition duration-500 hover:scale-105\">  <img src={product_image} alt={product_name} class=\"w-full h-48 object-cover rounded-t\" />  <div class=\"p-4\">    <h2 class=\"text-lg font-bold\">{product_name}</h2>    <p class=\"text-gray-600\">{product_description}</p>  </div></div>"
        },
        {
          "name": "ProductGrid",
          "is_standalone": false,
          "description": "(takes children): A grid container that wraps multiple `ProductCard` components.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Thread/List View of Topics": [
    {
      "description": "The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.",
      "html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <h1 class=\"text-3xl font-bold\">Topics</h1>\n  <TopicList>\n    <!-- List of TopicCard components will be rendered here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "(standalone): represents a single topic in the list, displaying title, description, and metadata.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-gray-600\">Author: {author_name}</p>  <p class=\"text-gray-600\">Created: {created_date}</p></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "(takes children): a container component that renders a list of `TopicCard` components.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Topic List</h1>\n  <TopicList>\n    <TopicCard/>\n    <TopicCard/>\n    <!-- more topic cards here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single topic.",
          "html": "<div class=\"flex flex-col p-4 mb-4 bg-white shadow-md rounded\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <div class=\"text-gray-500 text-sm\">    <span>{replies_count} replies</span>    <span class=\"mx-2\">|</span>    <span>{views_count} views</span>  </div></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "A component that takes children (topic cards) and displays them in a list.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.",
      "html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <h1 class=\"text-3xl font-bold\">Topics</h1>\n  <TopicList>\n    <!-- List of TopicCard components will be rendered here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "(standalone): represents a single topic in the list, displaying title, description, and metadata.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-gray-600\">Author: {author_name}</p>  <p class=\"text-gray-600\">Created: {created_date}</p></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "(takes children): a container component that renders a list of `TopicCard` components.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Topic List</h1>\n  <TopicList>\n    <TopicCard/>\n    <TopicCard/>\n    <!-- more topic cards here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single topic.",
          "html": "<div class=\"flex flex-col p-4 mb-4 bg-white shadow-md rounded\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <div class=\"text-gray-500 text-sm\">    <span>{replies_count} replies</span>    <span class=\"mx-2\">|</span>    <span>{views_count} views</span>  </div></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "A component that takes children (topic cards) and displays them in a list.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.",
      "html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <h1 class=\"text-3xl font-bold\">Topics</h1>\n  <TopicList>\n    <!-- List of TopicCard components will be rendered here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "(standalone): represents a single topic in the list, displaying title, description, and metadata.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-gray-600\">Author: {author_name}</p>  <p class=\"text-gray-600\">Created: {created_date}</p></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "(takes children): a container component that renders a list of `TopicCard` components.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Topic List</h1>\n  <TopicList>\n    <TopicCard/>\n    <TopicCard/>\n    <!-- more topic cards here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single topic.",
          "html": "<div class=\"flex flex-col p-4 mb-4 bg-white shadow-md rounded\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <div class=\"text-gray-500 text-sm\">    <span>{replies_count} replies</span>    <span class=\"mx-2\">|</span>    <span>{views_count} views</span>  </div></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "A component that takes children (topic cards) and displays them in a list.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.",
      "html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <h1 class=\"text-3xl font-bold\">Topics</h1>\n  <TopicList>\n    <!-- List of TopicCard components will be rendered here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "(standalone): represents a single topic in the list, displaying title, description, and metadata.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-gray-600\">Author: {author_name}</p>  <p class=\"text-gray-600\">Created: {created_date}</p></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "(takes children): a container component that renders a list of `TopicCard` components.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a scrollable list of topics, with each topic displaying its title, description, and some metadata (e.g., author, date created). The list should be ordered by most recent topic first. On smaller screens, the list should be single-column, and on larger screens, it should be a multi-column layout.",
      "html": "<div class=\"container mx-auto p-4 md:p-6\">\n  <h1 class=\"text-3xl font-bold\">Topics</h1>\n  <TopicList>\n    <!-- List of TopicCard components will be rendered here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "(standalone): represents a single topic in the list, displaying title, description, and metadata.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <p class=\"text-gray-600\">Author: {author_name}</p>  <p class=\"text-gray-600\">Created: {created_date}</p></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "(takes children): a container component that renders a list of `TopicCard` components.",
          "html": "<ul class=\"flex flex-wrap -mx-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of topics in a thread/list view, with each topic showing its title, description, and metadata such as the number of replies and views. The list should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Topic List</h1>\n  <TopicList>\n    <TopicCard/>\n    <TopicCard/>\n    <!-- more topic cards here -->\n  </TopicList>\n</div>\n",
      "components": [
        {
          "name": "TopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single topic.",
          "html": "<div class=\"flex flex-col p-4 mb-4 bg-white shadow-md rounded\">  <h2 class=\"text-lg font-bold\">{topic_title}</h2>  <p class=\"text-gray-600\">{topic_description}</p>  <div class=\"text-gray-500 text-sm\">    <span>{replies_count} replies</span>    <span class=\"mx-2\">|</span>    <span>{views_count} views</span>  </div></div>"
        },
        {
          "name": "TopicList",
          "is_standalone": false,
          "description": "A component that takes children (topic cards) and displays them in a list.",
          "html": "<ul class=\"list-none\">  {children}</ul>"
        }
      ]
    }
  ],
  "Search bar with autocomplete suggestions": [
    {
      "description": "The UI should have a search bar with a text input field and a dropdown list of autocomplete suggestions that appears below the search bar as the user types. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col items-center justify-center h-screen\">\n  <SearchBar />\n  <AutocompleteList>\n    <!-- Autocomplete suggestions will be inserted here -->\n  </AutocompleteList>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that consists of a text input field and a button to submit the search query.",
          "html": "<div class=\"flex items-center bg-white border rounded-md shadow-md\">  <input type=\"search\" class=\"w-full py-2 px-4 text-lg\" placeholder=\"Search...\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md\">    Search  </button></div>"
        },
        {
          "name": "AutocompleteList",
          "is_standalone": false,
          "description": "A component that takes children, which are the autocomplete suggestions.",
          "html": "<ul class=\"absolute z-10 bg-white border rounded-md shadow-md w-full\">  {children}</ul>"
        },
        {
          "name": "AutocompleteItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single autocomplete suggestion.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{url}\" class=\"text-lg\">{suggestion}</a></li>"
        }
      ]
    },
    {
      "description": "The UI should have a search bar with a text input field and a dropdown list of autocomplete suggestions that appears below the search bar as the user types. The search bar should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col items-center justify-center h-screen\">\n  <SearchBar />\n  <AutocompleteList>\n    <!-- Autocomplete suggestions will be inserted here -->\n  </AutocompleteList>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "A standalone component that consists of a text input field and a button to submit the search query.",
          "html": "<div class=\"flex items-center bg-white border rounded-md shadow-md\">  <input type=\"search\" class=\"w-full py-2 px-4 text-lg\" placeholder=\"Search...\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md\">    Search  </button></div>"
        },
        {
          "name": "AutocompleteList",
          "is_standalone": false,
          "description": "A component that takes children, which are the autocomplete suggestions.",
          "html": "<ul class=\"absolute z-10 bg-white border rounded-md shadow-md w-full\">  {children}</ul>"
        },
        {
          "name": "AutocompleteItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single autocomplete suggestion.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"{url}\" class=\"text-lg\">{suggestion}</a></li>"
        }
      ]
    }
  ],
  "Skeleton Screens/Loading": [
    {
      "description": "A loading UI with a loading animation and a set of skeleton screens for a list of items. The loading animation is a simple rotating wheel and the skeleton screens display a set of rectangles with a slight animation.",
      "html": "<div class=\"flex justify-center mt-20\">\n  <LoadingIndicator />\n  <SkeletonList>\n    <SkeletonScreen />\n    <SkeletonScreen />\n    <SkeletonScreen />\n  </SkeletonList>\n</div>\n",
      "components": [
        {
          "name": "LoadingIndicator",
          "is_standalone": true,
          "description": "a standalone component that displays a rotating wheel",
          "html": "<div class=\"inline-block\">  <div class=\"animate-spin h-8 w-8 border-2 border-gray-50 rounded-full border-t-2 border-t-gray-200\">    <!-- rotating wheel animation -->  </div></div>"
        },
        {
          "name": "SkeletonScreen",
          "is_standalone": true,
          "description": "a standalone component that displays a rectangle that animates to simulate loading",
          "html": "<div class=\"bg-gray-100 animate-pulse h-12 w-64 rounded-lg mt-2\">  <!-- animated rectangle --></div>"
        },
        {
          "name": "SkeletonList",
          "is_standalone": false,
          "description": "a component that takes children, which are a set of `SkeletonScreen` components",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Compose email button with dropdown menu": [
    {
      "description": "The UI should be a button that says \"Compose Email\" with a dropdown arrow on the right side. When clicked, a dropdown menu should appear below the button, containing a list of email composition options.",
      "html": "<div class=\"flex justify-center\">\n  <ComposeEmailButton />\n</div>\n<div class=\"absolute\">\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ComposeEmailButton",
          "is_standalone": true,
          "description": "Standalone component that displays the \"Compose Email\" button with a dropdown arrow.",
          "html": "<button class=\"bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded\">  Compose Email  <span class=\"ml-2 text-lg\">{caret_down_icon}</span></button>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "Component that takes children, representing the dropdown menu items.",
          "html": "<ul class=\"bg-white shadow-md py-1\">  {children}</ul>"
        }
      ]
    }
  ],
  "Availability and Pricing Calendars": [
    {
      "description": "The UI should display a calendar for availability and pricing, showing the dates and corresponding prices. It should have a title, a month selector, and a grid of days with prices.",
      "html": "<div className=\"flex flex-col\">\n  <CalendarTitle/>\n  <MonthSelector/>\n  <AvailabilityGrid>\n    <!-- grid of days with prices -->\n    <DayCell/><DayCell/><DayCell/> <!-- repeat for each day of the month -->\n  </AvailabilityGrid>\n</div>\n",
      "components": [
        {
          "name": "CalendarTitle",
          "is_standalone": true,
          "description": "Standalone component to display the title of the calendar.",
          "html": "<h2 className=\"text-2xl font-bold\">{calendar_title}</h2>"
        },
        {
          "name": "MonthSelector",
          "is_standalone": true,
          "description": "Standalone component to select the month.",
          "html": "<select className=\"py-2 pl-2 pr-4 text-gray-700\">  <option value=\"January\">{month_name}</option>  <!-- repeat for each month --></select>"
        },
        {
          "name": "AvailabilityGrid",
          "is_standalone": false,
          "description": "Component that takes children to render the grid of days with prices.",
          "html": "<table className=\"w-full\">  <tbody>    <tr>      {children}    </tr>  </tbody></table>"
        },
        {
          "name": "DayCell",
          "is_standalone": true,
          "description": "Standalone component to render a single day with its price.",
          "html": "<td className=\"px-2 py-1 border border-gray-200\">  <span className=\"text-sm\">{day_number}</span>  <span className=\"text-xs\">{day_price}</span></td>"
        }
      ]
    }
  ],
  "Tweet edit button for post revisions": [
    {
      "description": "The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"flex justify-end mb-2\">\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "A standalone component that displays an edit icon and allows users to edit a tweet revision.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full\">  <i class=\"fas fa-pencil-alt text-sm\" aria-label=\"Edit tweet revision\"></i></button>"
        }
      ]
    },
    {
      "description": "The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.",
      "html": "<div class=\"flex justify-end mb-2\">\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "A standalone component that displays an edit icon and allows users to edit a tweet revision.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full\">  <i class=\"fas fa-pencil-alt text-sm\" aria-label=\"Edit tweet revision\"></i></button>"
        }
      ]
    }
  ],
  "Opportunity Tracker: Monitor sales pipelines": [
    {
      "description": "The Opportunity Tracker UI should display a list of sales pipeline opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, mobile-first, and accessible. It should also have a clear hierarchy of information and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Opportunity Tracker</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <OpportunityCard />\n    <!-- more OpportunityCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "OpportunityTracker",
          "is_standalone": true,
          "description": "A standalone component that displays a list of opportunities.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {opportunities.map((opportunity) => (    <OpportunityCard key={opportunity.id} opportunity={opportunity} />  ))}</div>"
        },
        {
          "name": "OpportunityCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single opportunity.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold\">{opportunity.name}</h2>  <StageBadge stage={opportunity.stage} />  <ProbabilityBadge probability={opportunity.probability} />  <!-- opportunity details here --></div>"
        },
        {
          "name": "StageBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the stage of an opportunity.",
          "html": "<span class=\"bg-gray-200 text-gray-800 py-1 px-2 rounded-full\">{stage}</span>"
        },
        {
          "name": "ProbabilityBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the probability of an opportunity closing.",
          "html": "<span class=\"bg-orange-200 text-orange-800 py-1 px-2 rounded-full\">{probability}%</span>"
        }
      ]
    },
    {
      "description": "The Opportunity Tracker UI should display a list of sales pipeline opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, mobile-first, and accessible. It should also have a clear hierarchy of information and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Opportunity Tracker</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <OpportunityCard />\n    <!-- more OpportunityCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "OpportunityTracker",
          "is_standalone": true,
          "description": "A standalone component that displays a list of opportunities.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {opportunities.map((opportunity) => (    <OpportunityCard key={opportunity.id} opportunity={opportunity} />  ))}</div>"
        },
        {
          "name": "OpportunityCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single opportunity.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold\">{opportunity.name}</h2>  <StageBadge stage={opportunity.stage} />  <ProbabilityBadge probability={opportunity.probability} />  <!-- opportunity details here --></div>"
        },
        {
          "name": "StageBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the stage of an opportunity.",
          "html": "<span class=\"bg-gray-200 text-gray-800 py-1 px-2 rounded-full\">{stage}</span>"
        },
        {
          "name": "ProbabilityBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the probability of an opportunity closing.",
          "html": "<span class=\"bg-orange-200 text-orange-800 py-1 px-2 rounded-full\">{probability}%</span>"
        }
      ]
    },
    {
      "description": "The Opportunity Tracker UI should display a list of sales pipeline opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, mobile-first, and accessible. It should also have a clear hierarchy of information and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Opportunity Tracker</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <OpportunityCard />\n    <!-- more OpportunityCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "OpportunityTracker",
          "is_standalone": true,
          "description": "A standalone component that displays a list of opportunities.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {opportunities.map((opportunity) => (    <OpportunityCard key={opportunity.id} opportunity={opportunity} />  ))}</div>"
        },
        {
          "name": "OpportunityCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single opportunity.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold\">{opportunity.name}</h2>  <StageBadge stage={opportunity.stage} />  <ProbabilityBadge probability={opportunity.probability} />  <!-- opportunity details here --></div>"
        },
        {
          "name": "StageBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the stage of an opportunity.",
          "html": "<span class=\"bg-gray-200 text-gray-800 py-1 px-2 rounded-full\">{stage}</span>"
        },
        {
          "name": "ProbabilityBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the probability of an opportunity closing.",
          "html": "<span class=\"bg-orange-200 text-orange-800 py-1 px-2 rounded-full\">{probability}%</span>"
        }
      ]
    },
    {
      "description": "The Opportunity Tracker UI should display a list of sales pipeline opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, mobile-first, and accessible. It should also have a clear hierarchy of information and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Opportunity Tracker</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <OpportunityCard />\n    <!-- more OpportunityCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "OpportunityTracker",
          "is_standalone": true,
          "description": "A standalone component that displays a list of opportunities.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {opportunities.map((opportunity) => (    <OpportunityCard key={opportunity.id} opportunity={opportunity} />  ))}</div>"
        },
        {
          "name": "OpportunityCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single opportunity.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold\">{opportunity.name}</h2>  <StageBadge stage={opportunity.stage} />  <ProbabilityBadge probability={opportunity.probability} />  <!-- opportunity details here --></div>"
        },
        {
          "name": "StageBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the stage of an opportunity.",
          "html": "<span class=\"bg-gray-200 text-gray-800 py-1 px-2 rounded-full\">{stage}</span>"
        },
        {
          "name": "ProbabilityBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the probability of an opportunity closing.",
          "html": "<span class=\"bg-orange-200 text-orange-800 py-1 px-2 rounded-full\">{probability}%</span>"
        }
      ]
    },
    {
      "description": "The Opportunity Tracker UI should display a list of sales pipeline opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, mobile-first, and accessible. It should also have a clear hierarchy of information and sufficient whitespace to improve readability.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h1 class=\"text-3xl font-bold mb-4\">Opportunity Tracker</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <OpportunityCard />\n    <!-- more OpportunityCard components here -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "OpportunityTracker",
          "is_standalone": true,
          "description": "A standalone component that displays a list of opportunities.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {opportunities.map((opportunity) => (    <OpportunityCard key={opportunity.id} opportunity={opportunity} />  ))}</div>"
        },
        {
          "name": "OpportunityCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single opportunity.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h2 class=\"text-lg font-bold\">{opportunity.name}</h2>  <StageBadge stage={opportunity.stage} />  <ProbabilityBadge probability={opportunity.probability} />  <!-- opportunity details here --></div>"
        },
        {
          "name": "StageBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the stage of an opportunity.",
          "html": "<span class=\"bg-gray-200 text-gray-800 py-1 px-2 rounded-full\">{stage}</span>"
        },
        {
          "name": "ProbabilityBadge",
          "is_standalone": true,
          "description": "A standalone component that displays the probability of an opportunity closing.",
          "html": "<span class=\"bg-orange-200 text-orange-800 py-1 px-2 rounded-full\">{probability}%</span>"
        }
      ]
    }
  ],
  "Scroll-Activated Animation Effect": [
    {
      "description": "The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.",
      "html": "<div class=\"h-screen overflow-y-scroll\">\n  <!-- scrollable content -->\n  <p>{scrollable_content}</p>\n  <!-- animated box -->\n  <AnimatedBox />\n  <!-- more scrollable content -->\n  <p>{more_scrollable_content}</p>\n</div>\n",
      "components": [
        {
          "name": "AnimatedBox",
          "is_standalone": true,
          "description": "(standalone) : A box that animates when the user scrolls to a certain point on the page.",
          "html": "<div   class=\"hidden opacity-0 transition-all duration-500\"  data-animate-trigger=\"scroll\"  data-animate-class=\"block opacity-100\">  <!-- animated content -->  <p>{animated_content}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a scroll-activated animation effect. Initially, the animation is hidden, and as the user scrolls down, the animation is triggered and becomes visible. The animation can be a fade-in, slide-in, or any other creative effect.",
      "html": "<div class=\"h-screen overflow-y-scroll\">\n  <!-- content before the animation -->\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n  <AnimatedSection/>\n  <!-- content after the animation -->\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet nulla auctor, vestibulum magna sed, convallis ex.</p>\n</div>\n",
      "components": [
        {
          "name": "AnimatedSection",
          "is_standalone": true,
          "description": "standalone component that wraps the animation effect.",
          "html": "<section class=\"w-full h-64 bg-orange-200 animate-fadeIn\">  <!-- animation content -->  <h2>{animated_title}</h2>  <p>{animated_text}</p></section>"
        },
        {
          "name": "AnimationTrigger",
          "is_standalone": true,
          "description": "standalone component that triggers the animation when scrolled into view.",
          "html": "<div class=\"absolute top-0 left-0 w-full h-1 bg-transparent\">  <!-- empty element to trigger the animation --></div>"
        }
      ]
    },
    {
      "description": "The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.",
      "html": "<div class=\"h-screen overflow-y-scroll\">\n  <!-- scrollable content -->\n  <p>{scrollable_content}</p>\n  <!-- animated box -->\n  <AnimatedBox />\n  <!-- more scrollable content -->\n  <p>{more_scrollable_content}</p>\n</div>\n",
      "components": [
        {
          "name": "AnimatedBox",
          "is_standalone": true,
          "description": "(standalone) : A box that animates when the user scrolls to a certain point on the page.",
          "html": "<div   class=\"hidden opacity-0 transition-all duration-500\"  data-animate-trigger=\"scroll\"  data-animate-class=\"block opacity-100\">  <!-- animated content -->  <p>{animated_content}</p></div>"
        }
      ]
    }
  ],
  "Attachment upload button with file browser": [
    {
      "description": "The UI should have a clickable button with a label \"Upload File\" and a file browser input field that appears when the button is clicked.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AttachmentUploadButton/>\n</div>\n",
      "components": [
        {
          "name": "AttachmentUploadButton",
          "is_standalone": true,
          "description": "standalone component that contains a button with a label \"Upload File\" and a hidden file input field.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Upload File  <FileInput/></button>"
        },
        {
          "name": "FileInput",
          "is_standalone": true,
          "description": "standalone component that represents the file input field.",
          "html": "<input type=\"file\" id=\"{fileInputId}\" class=\"sr-only\" />"
        }
      ]
    },
    {
      "description": "A simple attachment upload button with a file browser dialog that opens when clicked.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AttachmentUploadButton/>\n  <FileBrowserDialog>\n    <!-- file browser dialog content will be inserted here -->\n  </FileBrowserDialog>\n</div>\n",
      "components": [
        {
          "name": "AttachmentUploadButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Attach File  <input type=\"file\" class=\"hidden\" id=\"{input_id}\"/>  <label for=\"{input_id}\" class=\"cursor-pointer\">Browse</label></button>"
        },
        {
          "name": "FileBrowserDialog",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center\">  <div class=\"bg-white p-4 rounded\">    <h2 class=\"text-lg font-bold\">Select a file</h2>    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "The UI should have a clickable button with a label \"Upload File\" and a file browser input field that appears when the button is clicked.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AttachmentUploadButton/>\n</div>\n",
      "components": [
        {
          "name": "AttachmentUploadButton",
          "is_standalone": true,
          "description": "standalone component that contains a button with a label \"Upload File\" and a hidden file input field.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Upload File  <FileInput/></button>"
        },
        {
          "name": "FileInput",
          "is_standalone": true,
          "description": "standalone component that represents the file input field.",
          "html": "<input type=\"file\" id=\"{fileInputId}\" class=\"sr-only\" />"
        }
      ]
    },
    {
      "description": "The UI should be a responsive button that allows users to upload a file. The button should be styled with a background color, border, and hover effect. When clicked, it should open a file browser for the user to select a file.",
      "html": "<div class=\"flex justify-center\">\n  <UploadButton/>\n</div>\n",
      "components": [
        {
          "name": "UploadButton",
          "is_standalone": true,
          "description": "Standalone component that renders a button with a label and a file input.",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <FileInputLabel/>  <input type=\"file\" class=\"hidden\" /></button>"
        },
        {
          "name": "FileInputLabel",
          "is_standalone": true,
          "description": "Standalone component that renders a label for the file input.",
          "html": "<span>Choose a file...</span>"
        }
      ]
    }
  ],
  "Message input field with send button and emoji picker": [
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "A message input field with a send button on the right side, and an emoji picker button on the left side of the input field.",
      "html": "<div className=\"flex items-center bg-white py-2 px-4 rounded-lg\">\n  <EmojiPickerButton />\n  <MessageInputField>\n    <input type=\"text\" className=\"px-2 py-1 w-full\" />\n    <SendButton />\n  </MessageInputField>\n</div>\n",
      "components": [
        {
          "name": "EmojiPickerButton",
          "is_standalone": true,
          "description": "standalone component that renders an emoji picker",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  😊</button>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "standalone component that renders a send button",
          "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  {sendButtonText}</button>"
        },
        {
          "name": "MessageInputField",
          "is_standalone": false,
          "description": "component that takes children",
          "html": "<div className=\"flex items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "A responsive, mobile-first input field with a send button and an emoji picker. The input field should be accessible and SEO-friendly. On mobile devices, the input field should take up the full width of the screen, and the send button should be anchored to the right side of the screen. On larger screens, the input field should have a maximum width, and the send button should be aligned to the right of the input field. The emoji picker should be a popup that appears below the input field when the emoji button is clicked.",
      "html": "<div class=\"flex flex-wrap justify-center md:max-w-lg md:mx-auto\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiButton/>\n  <EmojiPicker>\n    <!-- EmojiPicker content will be inserted here -->\n  </EmojiPicker>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "(standalone): the input field where the user types the message",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 mb-2 text-lg md:w-3/4\" placeholder=\"Type a message...\"/>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone): the button that sends the message",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "EmojiButton",
          "is_standalone": true,
          "description": "(standalone): the button that toggles the emoji picker",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-600 font-bold py-2 px-4 rounded\">🙂</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": false,
          "description": "(takes children): the popup that displays a grid of emojis, each a clickable `Emoji` component",
          "html": "<div class=\"absolute bg-white shadow-md p-4\">  <div class=\"grid grid-cols-6 gap-2\">    {children}  </div></div>"
        },
        {
          "name": "Emoji",
          "is_standalone": true,
          "description": "(standalone): a single emoji character, clickable to insert into the input field",
          "html": "<button class=\"text-2xl\">{emoji_character}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a message input field with a send button and an emoji picker. The input field should be responsive and mobile-friendly. The send button should be enabled only when the input field has some text. The emoji picker should be a dropdown list that appears when the user clicks on the emoji icon. The UI should be accessible, with clear labels and high contrast colors.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <MessageInputField/>\n  <SendButton/>\n  <EmojiPickerTrigger>\n    <EmojiPicker/>\n  </EmojiPickerTrigger>\n</div>\n",
      "components": [
        {
          "name": "MessageInputField",
          "is_standalone": true,
          "description": "standalone component that renders an input field.",
          "html": "<input type=\"text\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Type a message...\" />"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "standalone component that renders a button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\" disabled={isDisabled}>Send</button>"
        },
        {
          "name": "EmojiPicker",
          "is_standalone": true,
          "description": "standalone component that renders a dropdown list of emojis.",
          "html": "<ul class=\"absolute bg-white rounded shadow-md p-2\">  {emojis.map((emoji) => (    <li class=\"py-2 px-4 hover:bg-gray-100\">{emoji}</li>  ))}</ul>"
        },
        {
          "name": "EmojiPickerTrigger",
          "is_standalone": false,
          "description": "takes children, renders a button that toggles the emoji picker dropdown.",
          "html": "<button class=\"p-2 hover:bg-gray-100 rounded text-lg\">{children}</button>"
        }
      ]
    }
  ],
  "Cookie Banners": [
    {
      "description": "A cookie banner is a notification that appears at the top or bottom of a webpage, informing users about the use of cookies on the website. It should be a non-obtrusive, dismissible notification that contains a message, an accept button, and an optional link to learn more.",
      "html": "<!-- Cookie banner container -->\n<div class=\"fixed bottom-0 left-0 right-0 p-4 bg-gray-100\">\n  <!-- Cookie banner content -->\n  <CookieBanner />\n</div>\n",
      "components": [
        {
          "name": "CookieBanner",
          "is_standalone": true,
          "description": "Standalone component that contains the cookie banner message, accept button, and optional link.",
          "html": "<!-- Cookie banner content --><div class=\"flex justify-between\">  <p class=\"text-sm\">{cookie_message}</p>  <div class=\"flex\">    <CookieButton />    {optional_link && (      <a href={optional_link.href} target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-sm underline ml-4\">{optional_link.text}</a>    )}  </div></div>"
        },
        {
          "name": "CookieButton",
          "is_standalone": true,
          "description": "Standalone component that represents the accept button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Accept</button>"
        }
      ]
    }
  ],
  "Price and availability information": [
    {
      "description": "The UI should display price and availability information in a clean and easy-to-read format. The price should be prominent, and the availability information should be displayed below it.",
      "html": "<div class=\"flex flex-col gap-2\">\n  <PriceInfo/>\n  <AvailabilityInfo/>\n</div>\n",
      "components": [
        {
          "name": "PriceInfo",
          "is_standalone": true,
          "description": "Standalone component to display the price information.",
          "html": "<p class=\"text-lg font-bold\">{price_amount} {currency}</p>"
        },
        {
          "name": "AvailabilityInfo",
          "is_standalone": true,
          "description": "Standalone component to display the availability information.",
          "html": "<p>Availability: {availability_status}</p><!-- availability_status can be \"In Stock\", \"Out of Stock\", etc. --><p> Ships in {shipping_time} from {warehouse_location}</p>"
        }
      ]
    }
  ],
  "Drag-and-Drop Interfaces": [
    {
      "description": "The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Drag and Drop Interface</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DraggableList>\n        <!-- Draggable items will be rendered here -->\n      </DraggableList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DropZone>\n        <!-- Dropped items will be rendered here -->\n      </DropZone>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "DraggableItem",
          "is_standalone": true,
          "description": "(standalone) - A single draggable item that can be dragged and dropped into a drop zone.",
          "html": "<div  class=\"bg-white shadow-md rounded p-4 mb-4 cursor-move\"  draggable=\"true\">  {itemName}</div>"
        },
        {
          "name": "DropZone",
          "is_standalone": false,
          "description": "(takes children) - A container that accepts dragged items and displays them in a list.",
          "html": "<div  class=\"bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400\">  <h2 class=\"text-lg font-bold mb-2\">Drop Zone</h2>  <ul class=\"list-none p-0 m-0\">    {children}  </ul></div>"
        },
        {
          "name": "DraggableList",
          "is_standalone": false,
          "description": "(takes children) - A list of draggable items that can be dragged and dropped into a drop zone.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A drag-and-drop interface with a drop zone, a list of draggable items, and a button to clear the drop zone.",
      "html": "<div className=\"flex h-screen\">\n  <div className=\"flex-1 overflow-y-auto\">\n    <!-- List of draggable items -->\n    <ul className=\"space-y-2\">\n      <DraggableItem />\n      <DraggableItem />\n      <DraggableItem />\n    </ul>\n  </div>\n  <div className=\"flex-1 border\">\n    <!-- Drop zone -->\n    <DropZone>\n      <!-- dropped items will be rendered here -->\n    </DropZone>\n  </div>\n  <ClearButton />\n</div>\n",
      "components": [
        {
          "name": "DraggableItem",
          "is_standalone": true,
          "description": "- standalone: A single item that can be dragged and dropped.",
          "html": "<div className=\"bg-white shadow-md p-2 rounded\">  <p>{item_name}</p></div>"
        },
        {
          "name": "DropZone",
          "is_standalone": false,
          "description": "- takes children: The area where items can be dropped.",
          "html": "<div className=\"h-full p-4 border-dashed border-2\">  {children}</div>"
        },
        {
          "name": "ClearButton",
          "is_standalone": true,
          "description": "- standalone: A button to clear the drop zone.",
          "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Clear</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Drag and Drop Interface</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DraggableList>\n        <!-- Draggable items will be rendered here -->\n      </DraggableList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DropZone>\n        <!-- Dropped items will be rendered here -->\n      </DropZone>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "DraggableItem",
          "is_standalone": true,
          "description": "(standalone) - A single draggable item that can be dragged and dropped into a drop zone.",
          "html": "<div  class=\"bg-white shadow-md rounded p-4 mb-4 cursor-move\"  draggable=\"true\">  {itemName}</div>"
        },
        {
          "name": "DropZone",
          "is_standalone": false,
          "description": "(takes children) - A container that accepts dragged items and displays them in a list.",
          "html": "<div  class=\"bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400\">  <h2 class=\"text-lg font-bold mb-2\">Drop Zone</h2>  <ul class=\"list-none p-0 m-0\">    {children}  </ul></div>"
        },
        {
          "name": "DraggableList",
          "is_standalone": false,
          "description": "(takes children) - A list of draggable items that can be dragged and dropped into a drop zone.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Drag and Drop Interface</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DraggableList>\n        <!-- Draggable items will be rendered here -->\n      </DraggableList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DropZone>\n        <!-- Dropped items will be rendered here -->\n      </DropZone>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "DraggableItem",
          "is_standalone": true,
          "description": "(standalone) - A single draggable item that can be dragged and dropped into a drop zone.",
          "html": "<div  class=\"bg-white shadow-md rounded p-4 mb-4 cursor-move\"  draggable=\"true\">  {itemName}</div>"
        },
        {
          "name": "DropZone",
          "is_standalone": false,
          "description": "(takes children) - A container that accepts dragged items and displays them in a list.",
          "html": "<div  class=\"bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400\">  <h2 class=\"text-lg font-bold mb-2\">Drop Zone</h2>  <ul class=\"list-none p-0 m-0\">    {children}  </ul></div>"
        },
        {
          "name": "DraggableList",
          "is_standalone": false,
          "description": "(takes children) - A list of draggable items that can be dragged and dropped into a drop zone.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first drag-and-drop interface that allows users to drag items from a list and drop them into a designated drop zone. The interface should be accessible and SEO-friendly.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Drag and Drop Interface</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DraggableList>\n        <!-- Draggable items will be rendered here -->\n      </DraggableList>\n    </div>\n    <div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">\n      <DropZone>\n        <!-- Dropped items will be rendered here -->\n      </DropZone>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "DraggableItem",
          "is_standalone": true,
          "description": "(standalone) - A single draggable item that can be dragged and dropped into a drop zone.",
          "html": "<div  class=\"bg-white shadow-md rounded p-4 mb-4 cursor-move\"  draggable=\"true\">  {itemName}</div>"
        },
        {
          "name": "DropZone",
          "is_standalone": false,
          "description": "(takes children) - A container that accepts dragged items and displays them in a list.",
          "html": "<div  class=\"bg-gray-200 rounded p-4 mb-4 border-2 border-dashed border-gray-400\">  <h2 class=\"text-lg font-bold mb-2\">Drop Zone</h2>  <ul class=\"list-none p-0 m-0\">    {children}  </ul></div>"
        },
        {
          "name": "DraggableList",
          "is_standalone": false,
          "description": "(takes children) - A list of draggable items that can be dragged and dropped into a drop zone.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Time Pickers/Clock Icons": [
    {
      "description": "The UI should display a clock icon with a time picker dropdown. The clock icon should be circular and blue. The time picker dropdown should display a 12-hour format with AM/PM options.",
      "html": "<div className=\"flex justify-center\">\n  <ClockIcon />\n  <TimePicker>\n    <TimeOption value=\"12:00 AM\">12:00 AM</TimeOption>\n    <TimeOption value=\"12:30 AM\">12:30 AM</TimeOption>\n    <!-- ... more time options here ... -->\n  </TimePicker>\n</div>\n",
      "components": [
        {
          "name": "ClockIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a clock icon.",
          "html": "<span className=\"w-6 h-6 bg-blue-500 rounded-full inline-block\" aria-label=\"Clock Icon\"></span>"
        },
        {
          "name": "TimePicker",
          "is_standalone": false,
          "description": "A component that takes children, which is a dropdown list of time options.",
          "html": "<div className=\"relative\">  {children}</div>"
        },
        {
          "name": "TimeOption",
          "is_standalone": true,
          "description": "A standalone component that displays a single time option.",
          "html": "<option value=\"{timeValue}\">{timeValue} {amPm}</option>"
        }
      ]
    },
    {
      "description": "The UI should display a clock icon with a dropdown list of time options. When a time option is selected, the clock icon should display the selected time.",
      "html": "<div className=\"flex items-center\">\n  <ClockIcon />\n  <select className=\"ml-2\">\n    <TimeOption>12:00 AM</TimeOption>\n    <TimeOption>12:30 AM</TimeOption>\n    <!-- more time options here -->\n  </select>\n</div>\n",
      "components": [
        {
          "name": "TimePicker",
          "is_standalone": true,
          "description": "A standalone component that displays a clock icon and a dropdown list of time options.",
          "html": "<!-- not applicable, as it's a container component -->"
        },
        {
          "name": "ClockIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a clock icon.",
          "html": "<i className=\"fas fa-clock text-gray-500 text-lg\" aria-hidden=\"true\"></i>"
        },
        {
          "name": "TimeOption",
          "is_standalone": false,
          "description": "A component that takes children (the time option text) and is used to render each time option in the dropdown list.",
          "html": "<option>{children}</option>"
        }
      ]
    },
    {
      "description": "The UI should display a clock icon with a time picker dropdown. The clock icon should be circular and blue. The time picker dropdown should display a 12-hour format with AM/PM options.",
      "html": "<div className=\"flex justify-center\">\n  <ClockIcon />\n  <TimePicker>\n    <TimeOption value=\"12:00 AM\">12:00 AM</TimeOption>\n    <TimeOption value=\"12:30 AM\">12:30 AM</TimeOption>\n    <!-- ... more time options here ... -->\n  </TimePicker>\n</div>\n",
      "components": [
        {
          "name": "ClockIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a clock icon.",
          "html": "<span className=\"w-6 h-6 bg-blue-500 rounded-full inline-block\" aria-label=\"Clock Icon\"></span>"
        },
        {
          "name": "TimePicker",
          "is_standalone": false,
          "description": "A component that takes children, which is a dropdown list of time options.",
          "html": "<div className=\"relative\">  {children}</div>"
        },
        {
          "name": "TimeOption",
          "is_standalone": true,
          "description": "A standalone component that displays a single time option.",
          "html": "<option value=\"{timeValue}\">{timeValue} {amPm}</option>"
        }
      ]
    },
    {
      "description": "The UI should display a clock icon with a time picker dropdown. The clock icon should be circular and blue. The time picker dropdown should display a 12-hour format with AM/PM options.",
      "html": "<div className=\"flex justify-center\">\n  <ClockIcon />\n  <TimePicker>\n    <TimeOption value=\"12:00 AM\">12:00 AM</TimeOption>\n    <TimeOption value=\"12:30 AM\">12:30 AM</TimeOption>\n    <!-- ... more time options here ... -->\n  </TimePicker>\n</div>\n",
      "components": [
        {
          "name": "ClockIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a clock icon.",
          "html": "<span className=\"w-6 h-6 bg-blue-500 rounded-full inline-block\" aria-label=\"Clock Icon\"></span>"
        },
        {
          "name": "TimePicker",
          "is_standalone": false,
          "description": "A component that takes children, which is a dropdown list of time options.",
          "html": "<div className=\"relative\">  {children}</div>"
        },
        {
          "name": "TimeOption",
          "is_standalone": true,
          "description": "A standalone component that displays a single time option.",
          "html": "<option value=\"{timeValue}\">{timeValue} {amPm}</option>"
        }
      ]
    }
  ],
  "Cover Photo Upload: Input field for uploading a cover photo": [
    {
      "description": "The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <label for=\"cover-photo\" class=\"block mb-2\">Cover Photo</label>\n  <CoverPhotoUploadField/>\n</div>\n",
      "components": [
        {
          "name": "CoverPhotoUploadField",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and upload button.",
          "html": "<div class=\"flex items-center\">  <input type=\"file\" id=\"cover-photo\" class=\"block w-full p-2 pl-10 text-sm text-gray-700\" />  <UploadButton/></div>"
        },
        {
          "name": "UploadButton",
          "is_standalone": true,
          "description": "A standalone component that is the upload button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4\">Upload</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <label for=\"cover-photo\" class=\"block mb-2\">Cover Photo</label>\n  <CoverPhotoUploadField/>\n</div>\n",
      "components": [
        {
          "name": "CoverPhotoUploadField",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and upload button.",
          "html": "<div class=\"flex items-center\">  <input type=\"file\" id=\"cover-photo\" class=\"block w-full p-2 pl-10 text-sm text-gray-700\" />  <UploadButton/></div>"
        },
        {
          "name": "UploadButton",
          "is_standalone": true,
          "description": "A standalone component that is the upload button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4\">Upload</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <label for=\"cover-photo\" class=\"block mb-2\">Cover Photo</label>\n  <CoverPhotoUploadField/>\n</div>\n",
      "components": [
        {
          "name": "CoverPhotoUploadField",
          "is_standalone": true,
          "description": "A standalone component that contains the input field and upload button.",
          "html": "<div class=\"flex items-center\">  <input type=\"file\" id=\"cover-photo\" class=\"block w-full p-2 pl-10 text-sm text-gray-700\" />  <UploadButton/></div>"
        },
        {
          "name": "UploadButton",
          "is_standalone": true,
          "description": "A standalone component that is the upload button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4\">Upload</button>"
        }
      ]
    }
  ],
  "Individual email thread with reply buttons": [
    {
      "description": "The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., \"Reply\" and \"Reply All\") below the email body.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <EmailThread />\n</div>\n",
      "components": [
        {
          "name": "EmailThread",
          "is_standalone": true,
          "description": "Standalone component that displays an individual email thread.",
          "html": "<div class=\"border bg-white rounded p-4\">  <EmailMetadata />  <EmailBody />  <ReplyButtons /></div>"
        },
        {
          "name": "EmailMetadata",
          "is_standalone": true,
          "description": "Standalone component that displays the sender's name and email subject.",
          "html": "<div class=\"flex justify-between mb-2\">  <p class=\"font-bold\">{sender_name}</p>  <p class=\"text-gray-600\">{email_subject}</p></div>"
        },
        {
          "name": "EmailBody",
          "is_standalone": true,
          "description": "Standalone component that displays the email body.",
          "html": "<div class=\"mb-4\">  <p>{email_body}</p></div>"
        },
        {
          "name": "ReplyButtons",
          "is_standalone": true,
          "description": "Standalone component that displays the reply buttons.",
          "html": "<div class=\"flex justify-end\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Reply</button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Reply All</button></div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual email thread with reply buttons, showing the email's sender, subject, and content, along with buttons to reply to or delete the email.",
      "html": "<EmailThread>\n  <EmailThreadHeader/>\n  <EmailContent/>\n  <ReplyButton/>\n  <DeleteButton/>\n</EmailThread>\n",
      "components": [
        {
          "name": "EmailThreadHeader",
          "is_standalone": true,
          "description": "standalone, displays email sender and subject",
          "html": "<div class=\"flex justify-between\">  <p>{sender}</p>  <p>{subject}</p></div>"
        },
        {
          "name": "EmailContent",
          "is_standalone": true,
          "description": "standalone, displays email content",
          "html": "<div>  <p>{content}</p></div>"
        },
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "standalone, displays a reply button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Reply</button>"
        },
        {
          "name": "DeleteButton",
          "is_standalone": true,
          "description": "standalone, displays a delete button",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Delete</button>"
        },
        {
          "name": "EmailThread",
          "is_standalone": false,
          "description": "takes children, wraps the entire email thread",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., \"Reply\" and \"Reply All\") below the email body.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <EmailThread />\n</div>\n",
      "components": [
        {
          "name": "EmailThread",
          "is_standalone": true,
          "description": "Standalone component that displays an individual email thread.",
          "html": "<div class=\"border bg-white rounded p-4\">  <EmailMetadata />  <EmailBody />  <ReplyButtons /></div>"
        },
        {
          "name": "EmailMetadata",
          "is_standalone": true,
          "description": "Standalone component that displays the sender's name and email subject.",
          "html": "<div class=\"flex justify-between mb-2\">  <p class=\"font-bold\">{sender_name}</p>  <p class=\"text-gray-600\">{email_subject}</p></div>"
        },
        {
          "name": "EmailBody",
          "is_standalone": true,
          "description": "Standalone component that displays the email body.",
          "html": "<div class=\"mb-4\">  <p>{email_body}</p></div>"
        },
        {
          "name": "ReplyButtons",
          "is_standalone": true,
          "description": "Standalone component that displays the reply buttons.",
          "html": "<div class=\"flex justify-end\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Reply</button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Reply All</button></div>"
        }
      ]
    }
  ],
  "User profile summary and bio": [
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile summary and bio. It should include the user's name, profile picture, and bio text. The profile picture should be a circular image, and the bio text should be in a smaller font size.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileSummary/>\n  <UserProfileBio/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileSummary",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name and profile picture.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{user_name}\" class=\"w-16 h-16 rounded-full mr-4\">  <h2 class=\"text-lg font-bold\">{user_name}</h2></div>"
        },
        {
          "name": "UserProfileBio",
          "is_standalone": true,
          "description": "A standalone component that displays the user's bio text.",
          "html": "<p class=\"text-gray-600 text-sm\">{bio_text}</p>"
        }
      ]
    }
  ],
  "Avatar Upload: Input field for uploading a profile picture": [
    {
      "description": "The UI should be a simple input field with a label that allows users to upload a profile picture. The input field should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4\">\n  <InputLabel />\n  <InputField />\n  <!-- Optional: display uploaded image -->\n  <img src=\"{uploaded_image_url}\" alt=\"Profile Picture\" class=\"w-full h-full object-cover rounded-full\" />\n</div>\n",
      "components": [
        {
          "name": "AvatarUploader",
          "is_standalone": true,
          "description": "(standalone) - The main component for uploading a profile picture.",
          "html": "<!-- No HTML needed, as it's the parent component -->"
        },
        {
          "name": "InputLabel",
          "is_standalone": true,
          "description": "(standalone) - The label for the input field.",
          "html": "<label for=\"avatar-upload\" class=\"block mb-2 text-sm font-bold text-gray-700\">Upload Profile Picture</label>"
        },
        {
          "name": "InputField",
          "is_standalone": true,
          "description": "(standalone) - The input field for uploading the profile picture.",
          "html": "<input type=\"file\" id=\"avatar-upload\" class=\"block w-full px-4 py-2 text-gray-700\" />"
        }
      ]
    }
  ],
  "Radio/Checkbox Inputs": [
    {
      "description": "A simple form with radio and checkbox inputs, with clear labels and accessible markup.",
      "html": "<form className=\"max-w-md mx-auto p-4\">\n  <FormGroup>\n    <RadioInput label=\"Option 1\" name=\"radio-group\" value=\"option1\" />\n    <RadioInput label=\"Option 2\" name=\"radio-group\" value=\"option2\" />\n    <RadioInput label=\"Option 3\" name=\"radio-group\" value=\"option3\" />\n  </FormGroup>\n  <FormGroup>\n    <CheckboxInput label=\"Checkbox 1\" name=\" checkbox1\" />\n    <CheckboxInput label=\"Checkbox 2\" name=\"checkbox2\" />\n    <CheckboxInput label=\"Checkbox 3\" name=\"checkbox3\" />\n  </FormGroup>\n</form>\n",
      "components": [
        {
          "name": "RadioInput",
          "is_standalone": true,
          "description": "(standalone) - a single radio input field",
          "html": "<label className=\"block mb-2\">  <input type=\"radio\" name=\"{name}\" value=\"{value}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "CheckboxInput",
          "is_standalone": true,
          "description": "(standalone) - a single checkbox input field",
          "html": "<label className=\"block mb-2\">  <input type=\"checkbox\" name=\"{name}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "FormGroup",
          "is_standalone": false,
          "description": "(takes children) - a container for one or more input fields",
          "html": "<div className=\"mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "A simple form with radio and checkbox inputs, with clear labels and accessible markup.",
      "html": "<form className=\"max-w-md mx-auto p-4\">\n  <FormGroup>\n    <RadioInput label=\"Option 1\" name=\"radio-group\" value=\"option1\" />\n    <RadioInput label=\"Option 2\" name=\"radio-group\" value=\"option2\" />\n    <RadioInput label=\"Option 3\" name=\"radio-group\" value=\"option3\" />\n  </FormGroup>\n  <FormGroup>\n    <CheckboxInput label=\"Checkbox 1\" name=\" checkbox1\" />\n    <CheckboxInput label=\"Checkbox 2\" name=\"checkbox2\" />\n    <CheckboxInput label=\"Checkbox 3\" name=\"checkbox3\" />\n  </FormGroup>\n</form>\n",
      "components": [
        {
          "name": "RadioInput",
          "is_standalone": true,
          "description": "(standalone) - a single radio input field",
          "html": "<label className=\"block mb-2\">  <input type=\"radio\" name=\"{name}\" value=\"{value}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "CheckboxInput",
          "is_standalone": true,
          "description": "(standalone) - a single checkbox input field",
          "html": "<label className=\"block mb-2\">  <input type=\"checkbox\" name=\"{name}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "FormGroup",
          "is_standalone": false,
          "description": "(takes children) - a container for one or more input fields",
          "html": "<div className=\"mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "A simple form with radio and checkbox inputs, with clear labels and accessible markup.",
      "html": "<form className=\"max-w-md mx-auto p-4\">\n  <FormGroup>\n    <RadioInput label=\"Option 1\" name=\"radio-group\" value=\"option1\" />\n    <RadioInput label=\"Option 2\" name=\"radio-group\" value=\"option2\" />\n    <RadioInput label=\"Option 3\" name=\"radio-group\" value=\"option3\" />\n  </FormGroup>\n  <FormGroup>\n    <CheckboxInput label=\"Checkbox 1\" name=\" checkbox1\" />\n    <CheckboxInput label=\"Checkbox 2\" name=\"checkbox2\" />\n    <CheckboxInput label=\"Checkbox 3\" name=\"checkbox3\" />\n  </FormGroup>\n</form>\n",
      "components": [
        {
          "name": "RadioInput",
          "is_standalone": true,
          "description": "(standalone) - a single radio input field",
          "html": "<label className=\"block mb-2\">  <input type=\"radio\" name=\"{name}\" value=\"{value}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "CheckboxInput",
          "is_standalone": true,
          "description": "(standalone) - a single checkbox input field",
          "html": "<label className=\"block mb-2\">  <input type=\"checkbox\" name=\"{name}\" className=\"mr-2\" />  <span>{label}</span></label>"
        },
        {
          "name": "FormGroup",
          "is_standalone": false,
          "description": "(takes children) - a container for one or more input fields",
          "html": "<div className=\"mb-4\">{children}</div>"
        }
      ]
    }
  ],
  "Coupon/Discount Codes": [
    {
      "description": "A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <form>\n    <CouponCodeLabel />\n    <CouponCodeInput />\n    <DescriptionText />\n    <SubmitButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "CouponCodeInput",
          "is_standalone": true,
          "description": "Standalone component that renders a single input field for the coupon/discount code.",
          "html": "<input type=\"text\" id=\"coupon-code\" class=\"block w-full pl-10 text-sm text-gray-700\" />"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that renders a submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Apply Code</button>"
        },
        {
          "name": "CouponCodeLabel",
          "is_standalone": true,
          "description": "Standalone component that renders a label for the input field.",
          "html": "<label for=\"coupon-code\" class=\"block text-sm font-bold mb-2\">Enter your coupon code:</label>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": true,
          "description": "Standalone component that renders a small text description.",
          "html": "<p class=\"text-xs text-gray-500\">Enter a valid coupon code to receive your discount.</p>"
        }
      ]
    },
    {
      "description": "A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <form>\n    <CouponCodeLabel />\n    <CouponCodeInput />\n    <DescriptionText />\n    <SubmitButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "CouponCodeInput",
          "is_standalone": true,
          "description": "Standalone component that renders a single input field for the coupon/discount code.",
          "html": "<input type=\"text\" id=\"coupon-code\" class=\"block w-full pl-10 text-sm text-gray-700\" />"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that renders a submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Apply Code</button>"
        },
        {
          "name": "CouponCodeLabel",
          "is_standalone": true,
          "description": "Standalone component that renders a label for the input field.",
          "html": "<label for=\"coupon-code\" class=\"block text-sm font-bold mb-2\">Enter your coupon code:</label>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": true,
          "description": "Standalone component that renders a small text description.",
          "html": "<p class=\"text-xs text-gray-500\">Enter a valid coupon code to receive your discount.</p>"
        }
      ]
    },
    {
      "description": "A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <form>\n    <CouponCodeLabel />\n    <CouponCodeInput />\n    <DescriptionText />\n    <SubmitButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "CouponCodeInput",
          "is_standalone": true,
          "description": "Standalone component that renders a single input field for the coupon/discount code.",
          "html": "<input type=\"text\" id=\"coupon-code\" class=\"block w-full pl-10 text-sm text-gray-700\" />"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that renders a submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Apply Code</button>"
        },
        {
          "name": "CouponCodeLabel",
          "is_standalone": true,
          "description": "Standalone component that renders a label for the input field.",
          "html": "<label for=\"coupon-code\" class=\"block text-sm font-bold mb-2\">Enter your coupon code:</label>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": true,
          "description": "Standalone component that renders a small text description.",
          "html": "<p class=\"text-xs text-gray-500\">Enter a valid coupon code to receive your discount.</p>"
        }
      ]
    },
    {
      "description": "A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <form>\n    <CouponCodeLabel />\n    <CouponCodeInput />\n    <DescriptionText />\n    <SubmitButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "CouponCodeInput",
          "is_standalone": true,
          "description": "Standalone component that renders a single input field for the coupon/discount code.",
          "html": "<input type=\"text\" id=\"coupon-code\" class=\"block w-full pl-10 text-sm text-gray-700\" />"
        },
        {
          "name": "SubmitButton",
          "is_standalone": true,
          "description": "Standalone component that renders a submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Apply Code</button>"
        },
        {
          "name": "CouponCodeLabel",
          "is_standalone": true,
          "description": "Standalone component that renders a label for the input field.",
          "html": "<label for=\"coupon-code\" class=\"block text-sm font-bold mb-2\">Enter your coupon code:</label>"
        },
        {
          "name": "DescriptionText",
          "is_standalone": true,
          "description": "Standalone component that renders a small text description.",
          "html": "<p class=\"text-xs text-gray-500\">Enter a valid coupon code to receive your discount.</p>"
        }
      ]
    }
  ],
  "Semantic HTML5 Markup": [
    {
      "description": "The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.",
      "html": "<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{title}</title>\n  </head>\n  <body class=\"min-h-screen flex flex-col\">\n    <HeaderComponent />\n    <NavigationComponent />\n    <main class=\"flex-1\">\n      <MainComponent>\n        <!-- child components will be rendered here -->\n      </MainComponent>\n    </main>\n    <FooterComponent />\n  </body>\n</html>\n",
      "components": [
        {
          "name": "HeaderComponent",
          "is_standalone": true,
          "description": "(standalone) - The topmost section of the page, containing the site's title and navigation.",
          "html": "<header class=\"bg-blue-500 py-4 text-white\">  <h1>{site_title}</h1></header>"
        },
        {
          "name": "NavigationComponent",
          "is_standalone": true,
          "description": "(standalone) - A list of links to other parts of the site.",
          "html": "<nav class=\"bg-gray-200 py-4\">  <ul class=\"flex flex-wrap justify-center\">    <li class=\"mr-4\"><a href=\"{nav_link_1}\">{nav_text_1}</a></li>    <li class=\"mr-4\"><a href=\"{nav_link_2}\">{nav_text_2}</a></li>    <!-- more links here -->  </ul></nav>"
        },
        {
          "name": "MainComponent",
          "is_standalone": false,
          "description": "(takes children) - The main content area of the page, containing articles, images, or other content.",
          "html": "<div class=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.",
          "html": "<footer class=\"bg-gray-200 py-4\">  <p>&copy; {year} {site_name}</p></footer>"
        }
      ]
    },
    {
      "description": "A basic HTML5 document structure with semantic meaning, containing a header, navigation, main content area, sidebar, and footer.",
      "html": "<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{document_title}</title>\n  </head>\n  <body>\n    <HeaderComponent />\n    <NavComponent />\n    <main>\n      <MainComponent>\n        <!-- Main content area -->\n      </MainComponent>\n    </main>\n    <aside>\n      <SidebarComponent />\n    </aside>\n    <FooterComponent />\n  </body>\n</html>\n",
      "components": [
        {
          "name": "HeaderComponent",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<header class=\"bg-gray-200 p-4\">  <h1>{header_title}</h1></header>"
        },
        {
          "name": "NavComponent",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<nav class=\"flex justify-between p-4 bg-gray-200\">  <ul class=\"flex\">    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600\">{nav_item_3}</a></li>  </ul></nav>"
        },
        {
          "name": "MainComponent",
          "is_standalone": false,
          "description": "- takes children",
          "html": "<div class=\"p-4\">{children}</div>"
        },
        {
          "name": "SidebarComponent",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<aside class=\"bg-gray-200 p-4\">  <h2>{sidebar_title}</h2>  <ul>    <li>{sidebar_item_1}</li>    <li>{sidebar_item_2}</li>    <li>{sidebar_item_3}</li>  </ul></aside>"
        },
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<footer class=\"bg-gray-200 p-4\">  <p>&copy; {current_year} {footer_text}</p></footer>"
        }
      ]
    },
    {
      "description": "The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.",
      "html": "<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{title}</title>\n  </head>\n  <body class=\"min-h-screen flex flex-col\">\n    <HeaderComponent />\n    <NavigationComponent />\n    <main class=\"flex-1\">\n      <MainComponent>\n        <!-- child components will be rendered here -->\n      </MainComponent>\n    </main>\n    <FooterComponent />\n  </body>\n</html>\n",
      "components": [
        {
          "name": "HeaderComponent",
          "is_standalone": true,
          "description": "(standalone) - The topmost section of the page, containing the site's title and navigation.",
          "html": "<header class=\"bg-blue-500 py-4 text-white\">  <h1>{site_title}</h1></header>"
        },
        {
          "name": "NavigationComponent",
          "is_standalone": true,
          "description": "(standalone) - A list of links to other parts of the site.",
          "html": "<nav class=\"bg-gray-200 py-4\">  <ul class=\"flex flex-wrap justify-center\">    <li class=\"mr-4\"><a href=\"{nav_link_1}\">{nav_text_1}</a></li>    <li class=\"mr-4\"><a href=\"{nav_link_2}\">{nav_text_2}</a></li>    <!-- more links here -->  </ul></nav>"
        },
        {
          "name": "MainComponent",
          "is_standalone": false,
          "description": "(takes children) - The main content area of the page, containing articles, images, or other content.",
          "html": "<div class=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.",
          "html": "<footer class=\"bg-gray-200 py-4\">  <p>&copy; {year} {site_name}</p></footer>"
        }
      ]
    },
    {
      "description": "The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.",
      "html": "<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{title}</title>\n  </head>\n  <body class=\"min-h-screen flex flex-col\">\n    <HeaderComponent />\n    <NavigationComponent />\n    <main class=\"flex-1\">\n      <MainComponent>\n        <!-- child components will be rendered here -->\n      </MainComponent>\n    </main>\n    <FooterComponent />\n  </body>\n</html>\n",
      "components": [
        {
          "name": "HeaderComponent",
          "is_standalone": true,
          "description": "(standalone) - The topmost section of the page, containing the site's title and navigation.",
          "html": "<header class=\"bg-blue-500 py-4 text-white\">  <h1>{site_title}</h1></header>"
        },
        {
          "name": "NavigationComponent",
          "is_standalone": true,
          "description": "(standalone) - A list of links to other parts of the site.",
          "html": "<nav class=\"bg-gray-200 py-4\">  <ul class=\"flex flex-wrap justify-center\">    <li class=\"mr-4\"><a href=\"{nav_link_1}\">{nav_text_1}</a></li>    <li class=\"mr-4\"><a href=\"{nav_link_2}\">{nav_text_2}</a></li>    <!-- more links here -->  </ul></nav>"
        },
        {
          "name": "MainComponent",
          "is_standalone": false,
          "description": "(takes children) - The main content area of the page, containing articles, images, or other content.",
          "html": "<div class=\"px-4 pt-4\">  {children}</div>"
        },
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.",
          "html": "<footer class=\"bg-gray-200 py-4\">  <p>&copy; {year} {site_name}</p></footer>"
        }
      ]
    }
  ],
  "Feed/List View of Posts": [
    {
      "description": "The UI should display a list of posts, with each post showing a title, excerpt, and metadata (e.g., author, date, and tags). The list should be responsive, making sure that the content is accessible on various devices.",
      "html": "<!-- Post list container -->\n<div class=\"max-w-md mx-auto p-4\">\n  <!-- Post list items -->\n  {posts.map((post) => (\n    <PostListItem key={post.id} />\n  ))}\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post in the list.",
          "html": "<!-- Single post item --><div class=\"flex flex-col mb-4 p-4 border border-gray-200 rounded\">  <!-- Post title -->  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <!-- Post excerpt -->  <p class=\"text-gray-600\">{post_excerpt}</p>  <!-- Post metadata -->  <PostMetadata>    <!-- Author and date -->    <span class=\"text-gray-600\">{author_name} on {post_date}</span>    <!-- Post tags -->    <PostTags>      {post_tags.map((tag) => (        <span class=\"text-blue-600\">{tag}</span>      ))}    </PostTags>  </PostMetadata></div>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": false,
          "description": "A component displaying metadata about the post, such as author and date. This component takes children.",
          "html": "<!-- Post metadata container --><div class=\"flex items-center text-gray-600 text-sm\">  {children}</div>"
        },
        {
          "name": "PostTags",
          "is_standalone": false,
          "description": "A component displaying tags associated with the post. This component takes children.",
          "html": "<!-- Post tags container --><div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of posts, with each post showing a title, excerpt, and metadata (e.g., author, date, and tags). The list should be responsive, making sure that the content is accessible on various devices.",
      "html": "<!-- Post list container -->\n<div class=\"max-w-md mx-auto p-4\">\n  <!-- Post list items -->\n  {posts.map((post) => (\n    <PostListItem key={post.id} />\n  ))}\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post in the list.",
          "html": "<!-- Single post item --><div class=\"flex flex-col mb-4 p-4 border border-gray-200 rounded\">  <!-- Post title -->  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <!-- Post excerpt -->  <p class=\"text-gray-600\">{post_excerpt}</p>  <!-- Post metadata -->  <PostMetadata>    <!-- Author and date -->    <span class=\"text-gray-600\">{author_name} on {post_date}</span>    <!-- Post tags -->    <PostTags>      {post_tags.map((tag) => (        <span class=\"text-blue-600\">{tag}</span>      ))}    </PostTags>  </PostMetadata></div>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": false,
          "description": "A component displaying metadata about the post, such as author and date. This component takes children.",
          "html": "<!-- Post metadata container --><div class=\"flex items-center text-gray-600 text-sm\">  {children}</div>"
        },
        {
          "name": "PostTags",
          "is_standalone": false,
          "description": "A component displaying tags associated with the post. This component takes children.",
          "html": "<!-- Post tags container --><div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of posts, with each post showing a title, excerpt, and metadata (e.g., author, date, and tags). The list should be responsive, making sure that the content is accessible on various devices.",
      "html": "<!-- Post list container -->\n<div class=\"max-w-md mx-auto p-4\">\n  <!-- Post list items -->\n  {posts.map((post) => (\n    <PostListItem key={post.id} />\n  ))}\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post in the list.",
          "html": "<!-- Single post item --><div class=\"flex flex-col mb-4 p-4 border border-gray-200 rounded\">  <!-- Post title -->  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <!-- Post excerpt -->  <p class=\"text-gray-600\">{post_excerpt}</p>  <!-- Post metadata -->  <PostMetadata>    <!-- Author and date -->    <span class=\"text-gray-600\">{author_name} on {post_date}</span>    <!-- Post tags -->    <PostTags>      {post_tags.map((tag) => (        <span class=\"text-blue-600\">{tag}</span>      ))}    </PostTags>  </PostMetadata></div>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": false,
          "description": "A component displaying metadata about the post, such as author and date. This component takes children.",
          "html": "<!-- Post metadata container --><div class=\"flex items-center text-gray-600 text-sm\">  {children}</div>"
        },
        {
          "name": "PostTags",
          "is_standalone": false,
          "description": "A component displaying tags associated with the post. This component takes children.",
          "html": "<!-- Post tags container --><div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of posts, with each post showing a title, excerpt, and metadata (e.g., author, date, and tags). The list should be responsive, making sure that the content is accessible on various devices.",
      "html": "<!-- Post list container -->\n<div class=\"max-w-md mx-auto p-4\">\n  <!-- Post list items -->\n  {posts.map((post) => (\n    <PostListItem key={post.id} />\n  ))}\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post in the list.",
          "html": "<!-- Single post item --><div class=\"flex flex-col mb-4 p-4 border border-gray-200 rounded\">  <!-- Post title -->  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <!-- Post excerpt -->  <p class=\"text-gray-600\">{post_excerpt}</p>  <!-- Post metadata -->  <PostMetadata>    <!-- Author and date -->    <span class=\"text-gray-600\">{author_name} on {post_date}</span>    <!-- Post tags -->    <PostTags>      {post_tags.map((tag) => (        <span class=\"text-blue-600\">{tag}</span>      ))}    </PostTags>  </PostMetadata></div>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": false,
          "description": "A component displaying metadata about the post, such as author and date. This component takes children.",
          "html": "<!-- Post metadata container --><div class=\"flex items-center text-gray-600 text-sm\">  {children}</div>"
        },
        {
          "name": "PostTags",
          "is_standalone": false,
          "description": "A component displaying tags associated with the post. This component takes children.",
          "html": "<!-- Post tags container --><div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of posts, with each post showing a title, excerpt, and metadata (e.g., author, date, and tags). The list should be responsive, making sure that the content is accessible on various devices.",
      "html": "<!-- Post list container -->\n<div class=\"max-w-md mx-auto p-4\">\n  <!-- Post list items -->\n  {posts.map((post) => (\n    <PostListItem key={post.id} />\n  ))}\n</div>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "A standalone component representing a single post in the list.",
          "html": "<!-- Single post item --><div class=\"flex flex-col mb-4 p-4 border border-gray-200 rounded\">  <!-- Post title -->  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <!-- Post excerpt -->  <p class=\"text-gray-600\">{post_excerpt}</p>  <!-- Post metadata -->  <PostMetadata>    <!-- Author and date -->    <span class=\"text-gray-600\">{author_name} on {post_date}</span>    <!-- Post tags -->    <PostTags>      {post_tags.map((tag) => (        <span class=\"text-blue-600\">{tag}</span>      ))}    </PostTags>  </PostMetadata></div>"
        },
        {
          "name": "PostMetadata",
          "is_standalone": false,
          "description": "A component displaying metadata about the post, such as author and date. This component takes children.",
          "html": "<!-- Post metadata container --><div class=\"flex items-center text-gray-600 text-sm\">  {children}</div>"
        },
        {
          "name": "PostTags",
          "is_standalone": false,
          "description": "A component displaying tags associated with the post. This component takes children.",
          "html": "<!-- Post tags container --><div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive list view of posts, displaying the title, content, and metadata of each post. On smaller screens, the list items should be stacked vertically, and on larger screens, they should be displayed in a grid with multiple columns.",
      "html": "<main class=\"container mx-auto p-4\">\n  <PostList>\n    <PostListItem/>\n    <PostListItem/>\n    <!-- add more PostListItem components here -->\n  </PostList>\n</main>\n",
      "components": [
        {
          "name": "PostListItem",
          "is_standalone": true,
          "description": "(standalone): a single list item representing a post",
          "html": "<article class=\"mb-4 bg-white rounded-lg shadow-md p-4\">  <h2 class=\"text-lg\">{post_title}</h2>  <p class=\"text-gray-600\">{post_excerpt}</p>  <p class=\"text-sm text-gray-500\">{post_author} | {post_date}</p></article>"
        },
        {
          "name": "PostList",
          "is_standalone": false,
          "description": "(takes children): a container for the list of posts, which wraps the PostListItem components",
          "html": "<ul class=\"flex flex-wrap justify-center lg:justify-start\">  {children}</ul>"
        }
      ]
    }
  ],
  "Product Images/Zoom": [
    {
      "description": "A product image section with a zoom-in feature, allowing users to enlarge the image when hovered or clicked.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ProductImage src=\"{imageSrc}\" />\n  <ImageZoom src=\"{imageSrc}\" />\n</div>\n",
      "components": [
        {
          "name": "ProductImage",
          "is_standalone": true,
          "description": "a standalone component that displays the product image.",
          "html": "<img src=\"{src}\" class=\"w-full max-w-md h-auto rounded-md\" />"
        },
        {
          "name": "ImageZoom",
          "is_standalone": true,
          "description": "a standalone component that displays the zoomed-in image.",
          "html": "<div class=\"hidden group-hover:block absolute top-0 left-0 w-full h-full bg-white shadow-md rounded-md p-4\">  <img src=\"{src}\" class=\"w-full h-full object-contain\" /></div>"
        }
      ]
    },
    {
      "description": "The UI should display a large product image with a zoomed-in version of the image when hovered or focused. The zoomed-in image should be displayed in a separate container, and its size should be adjustable.",
      "html": "<ImageContainer>\n  <ProductImage src={product_image_src} />\n  <ZoomedImage src={zoomed_image_src} />\n</ImageContainer>\n",
      "components": [
        {
          "name": "ProductImage",
          "is_standalone": true,
          "description": "A standalone component displaying the large product image.",
          "html": "<img src={src} alt=\"Product Image\" class=\"w-full h-full object-cover rounded-lg\" />"
        },
        {
          "name": "ZoomedImage",
          "is_standalone": true,
          "description": "A standalone component displaying the zoomed-in image.",
          "html": "<div class=\"absolute top-0 left-0 z-50 hidden group-hover:block\">  <img src={src} alt=\"Zoomed Product Image\" class=\"w-full h-full object-cover rounded-lg\" /></div>"
        },
        {
          "name": "ImageContainer",
          "is_standalone": false,
          "description": "A component containing both the product image and the zoomed-in image, taking children.",
          "html": "<div class=\"relative flex justify-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Mention display for tagged users": [
    {
      "description": "The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Mentioned Users</h2>\n  <TaggedUserList>\n    <!-- list of tagged users will be rendered here -->\n  </TaggedUserList>\n</div>\n",
      "components": [
        {
          "name": "TaggedUser",
          "is_standalone": true,
          "description": "A standalone component that displays a single user with a tag.",
          "html": "<div class=\"flex items-center mb-2\">  <span class=\"text-gray-500\">@{username}</span>  <span class=\"ml-1 text-xs text-gray-400\">{tag_icon}</span></div>"
        },
        {
          "name": "TaggedUserList",
          "is_standalone": false,
          "description": "A component that takes children, rendering a list of `TaggedUser` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "A list of tagged users, each with their username and a \"Remove tag\" button.",
      "html": "<ul className=\"list-none mb-4\">\n  <li className=\"flex justify-between mb-2\">\n    <TaggedUser />\n  </li>\n  <!-- more tagged users here -->\n</ul>\n",
      "components": [
        {
          "name": "TaggedUser",
          "is_standalone": true,
          "description": "A standalone component displaying a single tagged user's information.",
          "html": "<span className=\"mr-2\">{username}</span><RemoveButton />"
        },
        {
          "name": "RemoveButton",
          "is_standalone": true,
          "description": "A standalone component representing the \"Remove tag\" button.",
          "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  Remove tag</button>"
        }
      ]
    },
    {
      "description": "The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Mentioned Users</h2>\n  <TaggedUserList>\n    <!-- list of tagged users will be rendered here -->\n  </TaggedUserList>\n</div>\n",
      "components": [
        {
          "name": "TaggedUser",
          "is_standalone": true,
          "description": "A standalone component that displays a single user with a tag.",
          "html": "<div class=\"flex items-center mb-2\">  <span class=\"text-gray-500\">@{username}</span>  <span class=\"ml-1 text-xs text-gray-400\">{tag_icon}</span></div>"
        },
        {
          "name": "TaggedUserList",
          "is_standalone": false,
          "description": "A component that takes children, rendering a list of `TaggedUser` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Category Navigation": [
    {
      "description": "The category navigation UI should display a list of categories in a horizontal layout on desktop and a vertical layout on mobile devices. Each category should be a clickable item with a label and an optional icon. The active category should be visually highlighted.",
      "html": "<nav class=\"flex flex-wrap justify-center md:flex-nowrap md:justify-start\">\n  <CategoryNav>\n    <CategoryNavItem>Category 1</CategoryNavItem>\n    <CategoryNavItem>Category 2</CategoryNavItem>\n    <CategoryNavItem>Category 3</CategoryNavItem>\n    <!-- Add more categories here -->\n  </CategoryNav>\n</nav>\n",
      "components": [
        {
          "name": "CategoryNavItem",
          "is_standalone": true,
          "description": "(standalone): A single category item in the navigation list.",
          "html": "<li class=\"mr-4 last:mr-0 md:mr-6\">  <a href=\"#\" class=\"inline-flex items-center\">    {icon} <!-- Optional icon -->    <span>{label}</span>  </a></li>"
        },
        {
          "name": "CategoryNav",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps the list of category items.",
          "html": "<ul class=\"flex flex-wrap justify-center md:flex-nowrap md:justify-start\">  {children}</ul>"
        }
      ]
    }
  ],
  "Responsive Article Layout": [
    {
      "description": "The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <ArticleImage />\n  <ArticleContent>\n    <!-- Article content goes here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the article title and metadata.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{author_name} - {published_date}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that displays the article image.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full mb-4 md:mb-6 lg:mb-12\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children, which represents the article content.",
          "html": "<div class=\"prose lg:prose-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive article layout with a header, image, and content area that adapts to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <div class=\"flex justify-center mb-4 md:mb-6 lg:mb-12\">\n    <ArticleImage />\n  </div>\n  <ArticleContent>\n    <!-- article content will be rendered here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that renders the article title and meta information.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{article_meta}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that renders the article image.",
          "html": "<img src={image_src} alt={image_alt} class=\"w-full md:w-1/2 lg:w-2/3\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children to render the article content.",
          "html": "<div class=\"prose lg:prose-lg xl:prose-xl\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <ArticleImage />\n  <ArticleContent>\n    <!-- Article content goes here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the article title and metadata.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{author_name} - {published_date}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that displays the article image.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full mb-4 md:mb-6 lg:mb-12\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children, which represents the article content.",
          "html": "<div class=\"prose lg:prose-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <ArticleImage />\n  <ArticleContent>\n    <!-- Article content goes here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the article title and metadata.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{author_name} - {published_date}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that displays the article image.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full mb-4 md:mb-6 lg:mb-12\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children, which represents the article content.",
          "html": "<div class=\"prose lg:prose-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <ArticleImage />\n  <ArticleContent>\n    <!-- Article content goes here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the article title and metadata.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{author_name} - {published_date}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that displays the article image.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full mb-4 md:mb-6 lg:mb-12\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children, which represents the article content.",
          "html": "<div class=\"prose lg:prose-lg\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <ArticleHeader />\n  <ArticleImage />\n  <ArticleContent>\n    <!-- Article content goes here -->\n  </ArticleContent>\n</div>\n",
      "components": [
        {
          "name": "ArticleHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the article title and metadata.",
          "html": "<header class=\"mb-4 md:mb-6 lg:mb-12\">  <h1 class=\"text-2xl md:text-3xl lg:text-4xl\">{article_title}</h1>  <p class=\"text-sm md:text-base lg:text-lg\">{author_name} - {published_date}</p></header>"
        },
        {
          "name": "ArticleImage",
          "is_standalone": true,
          "description": "Standalone component that displays the article image.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt}\" class=\"w-full mb-4 md:mb-6 lg:mb-12\" />"
        },
        {
          "name": "ArticleContent",
          "is_standalone": false,
          "description": "Component that takes children, which represents the article content.",
          "html": "<div class=\"prose lg:prose-lg\">  {children}</div>"
        }
      ]
    }
  ],
  "Pinned messages with timestamp and author display": [
    {
      "description": "A list of pinned messages, each with a timestamp and author display.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Pinned Messages</h2>\n  <PinnedMessageList>\n    <!-- list of pinned messages will be rendered here -->\n  </PinnedMessageList>\n</div>\n",
      "components": [
        {
          "name": "PinnedMessage",
          "is_standalone": true,
          "description": "standalone component that displays a single pinned message",
          "html": "<div class=\"flex items-center mb-2\">  <div class=\"mr-2\">{author_avatar}</div>  <div class=\"flex-1\">    <p class=\"text-sm\">{message_text}</p>    <p class=\"text-xs text-gray-500\">{timestamp} - {author_name}</p>  </div></div>"
        },
        {
          "name": "PinnedMessageList",
          "is_standalone": false,
          "description": "component that takes children (a list of `PinnedMessage` components)",
          "html": "<div class=\"space-y-2\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of pinned messages, each with a timestamp and author information. The messages should be displayed in a clean and readable format, with the timestamp and author information clearly visible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-2\">Pinned Messages</h2>\n  <PinnedMessageList>\n    <PinnedMessage />\n    <PinnedMessage />\n    <!-- additional pinned messages here -->\n  </PinnedMessageList>\n</div>\n",
      "components": [
        {
          "name": "PinnedMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single pinned message, including the message text, timestamp, and author information.",
          "html": "<div class=\"flex items-center mb-2\">  <span class=\"text-gray-600\">{author_name}</span>  <span class=\"text-gray-400 text-sm ml-2\">{timestamp}</span>  <p class=\"ml-4\">{message_text}</p></div>"
        },
        {
          "name": "PinnedMessageList",
          "is_standalone": false,
          "description": "A component that takes children, which is a list of `PinnedMessage` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Upload file input field with file type and size limits": [
    {
      "description": "A file upload input field with a label, allowing users to select a file to upload, with file type and size limits.",
      "html": "<div class=\"flex flex-col\">\n  <FileInputLabel />\n  <FileUploadInput />\n  <FileSizeLimit />\n  <FileTypeLimit />\n</div>\n",
      "components": [
        {
          "name": "FileUploadInput",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input  type=\"file\"  id=\"file-upload\"  class=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold\"  accept=\"{accepted_file_types}\"  max-size=\"{max_file_size}\"/>"
        },
        {
          "name": "FileInputLabel",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<label for=\"file-upload\" class=\"text-sm mb-2 block\">Select a file to upload:</label>"
        },
        {
          "name": "FileSizeLimit",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-xs text-gray-500\">Max file size: {max_file_size} MB</p>"
        },
        {
          "name": "FileTypeLimit",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p class=\"text-xs text-gray-500\">Accepted file types: {accepted_file_types}</p>"
        }
      ]
    },
    {
      "description": "The UI should have a file input field that allows users to upload a file. The input field should have a label indicating the accepted file types and a maximum file size.",
      "html": "<div class=\"flex flex-col gap-2\">\n  <Label>Upload File ({acceptedFileTypes})</Label>\n  <FileInput />\n  <Description>Max file size: {maxFileSize}MB</Description>\n</div>\n",
      "components": [
        {
          "name": "FileInput",
          "is_standalone": true,
          "description": "(standalone) - The file input field",
          "html": "<input   type=\"file\"   class=\"block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"   accept={acceptedFileTypes}   maxLength={maxFileSize * 1024 * 1024} />"
        },
        {
          "name": "Label",
          "is_standalone": false,
          "description": "(takes children) - The label for the file input field",
          "html": "<label class=\"block mb-2 text-sm font-medium text-gray-700\">{children}</label>"
        },
        {
          "name": "Description",
          "is_standalone": false,
          "description": "(takes children) - The description of the file input field",
          "html": "<p class=\"text-sm text-gray-500\">{children}</p>"
        }
      ]
    }
  ],
  "Profile picture with dropdown menu options": [
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A profile picture with a dropdown menu that appears when the profile picture is clicked. The dropdown menu should contain several options.",
      "html": "<div class=\"flex justify-end\">\n  <ProfilePicture/>\n  <DropdownMenu>\n    <MenuItem />\n    <MenuItem />\n    <MenuItem />\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<img src={profile_picture_url} class=\"w-8 h-8 rounded-full cursor-pointer\" />"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  {children}</div>"
        },
        {
          "name": "MenuItem",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<a href={menu_item_url} class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">  {menu_item_text}</a>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a circular profile picture with a dropdown menu that appears when the picture is clicked. The dropdown menu should contain several options, such as \"View Profile\", \"Settings\", and \"Logout\".",
      "html": "<div class=\"flex justify-end mb-4\">\n  <ProfilerPicture/>\n  <DropdownMenu>\n    <DropdownItem>View Profile</DropdownItem>\n    <DropdownItem>Settings</DropdownItem>\n    <DropdownItem>Logout</DropdownItem>\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ProfilerPicture",
          "is_standalone": true,
          "description": "a standalone component that displays a circular profile picture.",
          "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"h-12 w-12 rounded-full object-cover\" />"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "a component that takes children, which are the menu options.",
          "html": "<div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md\">  <ul class=\"divide-y divide-gray-100\">    {children}  </ul></div>"
        },
        {
          "name": "DropdownItem",
          "is_standalone": true,
          "description": "a standalone component that displays a single menu option.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <a href=\"#\" class=\"block text-gray-600\">{menu_option_text}</a></li>"
        }
      ]
    },
    {
      "description": "A circular profile picture with a dropdown menu that appears when clicking on the profile picture. The dropdown menu should display a few options.",
      "html": "<div class=\"lg:flex justify-end mb-4\">\n  <UserProfilePicture />\n  <DropdownMenu>\n    <!-- dropdown menu options will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<div class=\"h-12 w-12 rounded-full overflow-hidden\">  <img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"h-full w-full object-cover\" /></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"hidden lg:block absolute top-full right-0 w-40 bg-white rounded shadow-md\">  {children}</div>"
        }
      ]
    }
  ],
  "Product title and rating display": [
    {
      "description": "The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.",
      "html": "<div class=\"flex flex-wrap justify-between\">\n  <ProductTitle />\n  <RatingIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the product title.",
          "html": "<h2 class=\"text-lg font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "A standalone component that displays the product rating.",
          "html": "<div class=\"flex items-center\">  <span class=\"text-sm\">{ratingValue} / 5</span>  <span class=\"rating-icon\">{/* rating icon */}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating, with the title in a larger font size and the rating displayed as a fraction of 5.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ProductTitle/>\n  <ProductRating/>\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "standalone component that displays the product title",
          "html": "<h2 class=\"text-3xl font-bold\">{productName}</h2>"
        },
        {
          "name": "ProductRating",
          "is_standalone": true,
          "description": "standalone component that displays the product rating",
          "html": "<p class=\"text-lg\">{rating}/5</p>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.",
      "html": "<div class=\"flex flex-wrap justify-between\">\n  <ProductTitle />\n  <RatingIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the product title.",
          "html": "<h2 class=\"text-lg font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "A standalone component that displays the product rating.",
          "html": "<div class=\"flex items-center\">  <span class=\"text-sm\">{ratingValue} / 5</span>  <span class=\"rating-icon\">{/* rating icon */}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.",
      "html": "<div class=\"flex flex-wrap justify-between\">\n  <ProductTitle />\n  <RatingIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the product title.",
          "html": "<h2 class=\"text-lg font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "A standalone component that displays the product rating.",
          "html": "<div class=\"flex items-center\">  <span class=\"text-sm\">{ratingValue} / 5</span>  <span class=\"rating-icon\">{/* rating icon */}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.",
      "html": "<div class=\"flex flex-wrap justify-between\">\n  <ProductTitle />\n  <RatingIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the product title.",
          "html": "<h2 class=\"text-lg font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "A standalone component that displays the product rating.",
          "html": "<div class=\"flex items-center\">  <span class=\"text-sm\">{ratingValue} / 5</span>  <span class=\"rating-icon\">{/* rating icon */}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating. The product title should be prominent and easy to read, while the rating should be displayed succinctly alongside the title.",
      "html": "<div class=\"flex flex-wrap justify-between\">\n  <ProductTitle />\n  <RatingIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "A standalone component that displays the product title.",
          "html": "<h2 class=\"text-lg font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingIndicator",
          "is_standalone": true,
          "description": "A standalone component that displays the product rating.",
          "html": "<div class=\"flex items-center\">  <span class=\"text-sm\">{ratingValue} / 5</span>  <span class=\"rating-icon\">{/* rating icon */}</span></div>"
        }
      ]
    },
    {
      "description": "The UI should display a product title and its corresponding rating. The rating should be displayed as a series of stars, with the number of filled stars indicating the rating. The product title should be prominent and easy to read.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ProductTitle />\n  <RatingDisplay />\n</div>\n",
      "components": [
        {
          "name": "ProductTitle",
          "is_standalone": true,
          "description": "a standalone component that displays the product title.",
          "html": "<h2 class=\"text-2xl font-bold\">{productName}</h2>"
        },
        {
          "name": "RatingDisplay",
          "is_standalone": true,
          "description": "a standalone component that displays the rating as a series of stars.",
          "html": "<div class=\"flex\">  {rating}/5  <div class=\"flex\">    {[...Array(5).keys()].map((_, i) => (      <i key={i} class={`text-yellow-400 ${i < rating ? 'fas fa-star' : 'far fa-star'}`}></i>    ))}  </div></div>"
        }
      ]
    }
  ],
  "Author and Date Metadata": [
    {
      "description": "The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.",
      "html": "<div class=\"flex flex-col md:flex-row md:items-center mb-4\">\n  <AuthorMetadata />\n  <DateMetadata />\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the author's name",
          "html": "<p class=\"text-sm\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the date of publication",
          "html": "<p class=\"text-xs text-gray-500\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display the author's name and the date of publication, with the author's name in a slightly larger font size than the date.",
      "html": "<div class=\"flex justify-between mb-4\">\n  <AuthorMetadata/>\n  <DateMetadata/>\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "standalone component that displays the author's name.",
          "html": "<p class=\"text-lg\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "standalone component that displays the date of publication.",
          "html": "<p class=\"text-sm text-gray-600\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.",
      "html": "<div class=\"flex flex-col md:flex-row md:items-center mb-4\">\n  <AuthorMetadata />\n  <DateMetadata />\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the author's name",
          "html": "<p class=\"text-sm\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the date of publication",
          "html": "<p class=\"text-xs text-gray-500\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.",
      "html": "<div class=\"flex flex-col md:flex-row md:items-center mb-4\">\n  <AuthorMetadata />\n  <DateMetadata />\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the author's name",
          "html": "<p class=\"text-sm\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the date of publication",
          "html": "<p class=\"text-xs text-gray-500\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.",
      "html": "<div class=\"flex flex-col md:flex-row md:items-center mb-4\">\n  <AuthorMetadata />\n  <DateMetadata />\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the author's name",
          "html": "<p class=\"text-sm\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the date of publication",
          "html": "<p class=\"text-xs text-gray-500\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display the author's name and the date of publication in a clean and simple format, with the author's name on top and the date below, aligned to the left.",
      "html": "<div class=\"flex flex-col md:flex-row md:items-center mb-4\">\n  <AuthorMetadata />\n  <DateMetadata />\n</div>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the author's name",
          "html": "<p class=\"text-sm\">{author_name}</p>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "(standalone): displays the date of publication",
          "html": "<p class=\"text-xs text-gray-500\">{publication_date}</p>"
        }
      ]
    },
    {
      "description": "The UI should display author and date metadata in a compact and readable format, typically used in blog posts, articles, or news websites. The author's name and publication date should be displayed side by side, with the author's name in a slightly larger font size.",
      "html": "<footer class=\"flex justify-between mb-4\">\n  <MetadataContainer>\n    <AuthorMetadata />\n    <DateMetadata />\n  </MetadataContainer>\n</footer>\n",
      "components": [
        {
          "name": "AuthorMetadata",
          "is_standalone": true,
          "description": "A standalone component displaying the author's name.",
          "html": "<span class=\"text-lg\">{author_name}</span>"
        },
        {
          "name": "DateMetadata",
          "is_standalone": true,
          "description": "A standalone component displaying the publication date.",
          "html": "<span class=\"text-gray-600\">{publication_date}</span>"
        },
        {
          "name": "MetadataContainer",
          "is_standalone": false,
          "description": "A container component that takes children, wrapping the author and date metadata components.",
          "html": "<div class=\"flex items-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Hashtag and @Mention Links": [
    {
      "description": "The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone): A single hashtag link component.",
          "html": "<a href={hashtag_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone): A single @mention link component.",
          "html": "<a href={mention_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{mention_username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children): A container component that holds a list of hashtag and @mention links.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag links and @mention links. Each link should have a distinct style to differentiate between the two types of links.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <HashtagLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone) - represents a single hashtag link",
          "html": "<a href={`/${hashtag_value}`} class=\"text-blue-500 hover:text-blue-700 transition duration-300\">  #{hashtag_value}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone) - represents a single @mention link",
          "html": "<a href={`/@${username}`} class=\"text-green-500 hover:text-green-700 transition duration-300\">  @{username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children) - a container for a list of links",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone): A single hashtag link component.",
          "html": "<a href={hashtag_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone): A single @mention link component.",
          "html": "<a href={mention_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{mention_username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children): A container component that holds a list of hashtag and @mention links.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone): A single hashtag link component.",
          "html": "<a href={hashtag_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone): A single @mention link component.",
          "html": "<a href={mention_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{mention_username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children): A container component that holds a list of hashtag and @mention links.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone): A single hashtag link component.",
          "html": "<a href={hashtag_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone): A single @mention link component.",
          "html": "<a href={mention_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{mention_username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children): A container component that holds a list of hashtag and @mention links.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag and @mention links. The links should be styled with a subtle background color and underline on hover. The text should be black with a decent font size. The list should be responsive and stack vertically on smaller screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <LinkList>\n    <HashtagLink />\n    <HashtagLink />\n    <MentionLink />\n    <MentionLink />\n  </LinkList>\n</div>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "(standalone): A single hashtag link component.",
          "html": "<a href={hashtag_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "(standalone): A single @mention link component.",
          "html": "<a href={mention_url} class=\"text-black hover:underline hover:bg-gray-100 transition duration-300 ease-in-out\">{mention_username}</a>"
        },
        {
          "name": "LinkList",
          "is_standalone": false,
          "description": "(takes children): A container component that holds a list of hashtag and @mention links.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of hashtag and @mention links, each link is clickable and can be styled differently.",
      "html": "<ul class=\"flex flex-wrap gap-2\">\n  <li><HashtagLink/></li>\n  <li><MentionLink/></li>\n  <!-- more links here -->\n</ul>\n",
      "components": [
        {
          "name": "HashtagLink",
          "is_standalone": true,
          "description": "standalone, represents a single hashtag link.",
          "html": "<a href={hashtag_link} class=\"text-blue-600 hover:text-blue-900 transition duration-300\">{hashtag_text}</a>"
        },
        {
          "name": "MentionLink",
          "is_standalone": true,
          "description": "standalone, represents a single @mention link.",
          "html": "<a href={mention_link} class=\"text-blue-600 hover:text-blue-900 transition duration-300\">@{mention_text}</a>"
        }
      ]
    }
  ],
  "SEO Meta Tags/Optimization": [
    {
      "description": "The UI should display SEO meta tags and optimization information in a concise and readable format.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h1 class=\"text-lg font-bold mb-4\">SEO Meta Tags and Optimization</h1>\n  <SeoMetaTags />\n  <OptimizationTips />\n</div>\n",
      "components": [
        {
          "name": "SeoMetaTags",
          "is_standalone": true,
          "description": "Standalone component displaying SEO meta tags.",
          "html": "<ul class=\"list-disc pl-4\">  <MetaTag type=\"title\" content=\"{title}\" />  <MetaTag type=\"description\" content=\"{meta_description}\" />  <MetaTag type=\"keywords\" content=\"{keywords}\" /></ul>"
        },
        {
          "name": "MetaTag",
          "is_standalone": true,
          "description": "Standalone component displaying a single meta tag.",
          "html": "<li>  <span class=\"text-gray-600\">{type}:</span>  <span class=\"text-gray-900\">{content}</span></li>"
        },
        {
          "name": "OptimizationTips",
          "is_standalone": true,
          "description": "Standalone component displaying optimization tips.",
          "html": "<ul class=\"list-disc pl-4\">  <li>Use header tags (H1-H6) to structure your content.</li>  <li>Optimize images by compressing them.</li>  <li>Use alt text for images.</li>  <!-- Add more optimization tips here --></ul>"
        }
      ]
    },
    {
      "description": "A basic SEO meta tags optimization setup with title, description, and keywords.",
      "html": "<head>\n  <MetaTitle/>\n  <MetaDescription/>\n  <MetaKeywords/>\n</head>\n",
      "components": [
        {
          "name": "MetaTitle",
          "is_standalone": true,
          "description": "- Standalone - Displays the title of the webpage.",
          "html": "<title>{title}</title>"
        },
        {
          "name": "MetaDescription",
          "is_standalone": true,
          "description": "- Standalone - Displays the meta description of the webpage.",
          "html": "<meta name=\"description\" content=\"{description}\"/>"
        },
        {
          "name": "MetaKeywords",
          "is_standalone": true,
          "description": "- Standalone - Displays the meta keywords of the webpage.",
          "html": "<meta name=\"keywords\" content=\"{keywords}\"/>"
        }
      ]
    },
    {
      "description": "The UI should display SEO meta tags and optimization information in a concise and readable format.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h1 class=\"text-lg font-bold mb-4\">SEO Meta Tags and Optimization</h1>\n  <SeoMetaTags />\n  <OptimizationTips />\n</div>\n",
      "components": [
        {
          "name": "SeoMetaTags",
          "is_standalone": true,
          "description": "Standalone component displaying SEO meta tags.",
          "html": "<ul class=\"list-disc pl-4\">  <MetaTag type=\"title\" content=\"{title}\" />  <MetaTag type=\"description\" content=\"{meta_description}\" />  <MetaTag type=\"keywords\" content=\"{keywords}\" /></ul>"
        },
        {
          "name": "MetaTag",
          "is_standalone": true,
          "description": "Standalone component displaying a single meta tag.",
          "html": "<li>  <span class=\"text-gray-600\">{type}:</span>  <span class=\"text-gray-900\">{content}</span></li>"
        },
        {
          "name": "OptimizationTips",
          "is_standalone": true,
          "description": "Standalone component displaying optimization tips.",
          "html": "<ul class=\"list-disc pl-4\">  <li>Use header tags (H1-H6) to structure your content.</li>  <li>Optimize images by compressing them.</li>  <li>Use alt text for images.</li>  <!-- Add more optimization tips here --></ul>"
        }
      ]
    },
    {
      "description": "The UI should display SEO meta tags and optimization information in a concise and readable format.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h1 class=\"text-lg font-bold mb-4\">SEO Meta Tags and Optimization</h1>\n  <SeoMetaTags />\n  <OptimizationTips />\n</div>\n",
      "components": [
        {
          "name": "SeoMetaTags",
          "is_standalone": true,
          "description": "Standalone component displaying SEO meta tags.",
          "html": "<ul class=\"list-disc pl-4\">  <MetaTag type=\"title\" content=\"{title}\" />  <MetaTag type=\"description\" content=\"{meta_description}\" />  <MetaTag type=\"keywords\" content=\"{keywords}\" /></ul>"
        },
        {
          "name": "MetaTag",
          "is_standalone": true,
          "description": "Standalone component displaying a single meta tag.",
          "html": "<li>  <span class=\"text-gray-600\">{type}:</span>  <span class=\"text-gray-900\">{content}</span></li>"
        },
        {
          "name": "OptimizationTips",
          "is_standalone": true,
          "description": "Standalone component displaying optimization tips.",
          "html": "<ul class=\"list-disc pl-4\">  <li>Use header tags (H1-H6) to structure your content.</li>  <li>Optimize images by compressing them.</li>  <li>Use alt text for images.</li>  <!-- Add more optimization tips here --></ul>"
        }
      ]
    }
  ],
  "User Ranks and Badges": [
    {
      "description": "The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileRank />\n  <UserProfileBadges>\n    <UserProfileBadge />\n    <UserProfileBadge />\n    <!-- Add more badges here -->\n  </UserProfileBadges>\n</div>\n",
      "components": [
        {
          "name": "UserProfileRank",
          "is_standalone": true,
          "description": "A standalone component that displays the user's rank.",
          "html": "<h2 class=\"text-2xl font-bold\">{rank_name}</h2><p class=\"text-lg text-gray-600\">{rank_description}</p>"
        },
        {
          "name": "UserProfileBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a single badge.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={badge_image} alt={badge_name} class=\"w-8 h-8 mr-2\" />  <span class=\"text-lg\">{badge_name}</span></div>"
        },
        {
          "name": "UserProfileBadges",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of badges.",
          "html": "<ul class=\"list-none m-0 p-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a user's rank and badges in a compact and visually appealing way. The rank should be prominently displayed, and the badges should be shown as a series of icons or images below the rank.",
      "html": "<div className=\"flex flex-col items-center\">\n  <UserRank/> <!-- Displays the user's rank -->\n  <BadgeList>\n    <!-- List of badges will be rendered here -->\n  </BadgeList>\n</div>\n",
      "components": [
        {
          "name": "UserRank",
          "is_standalone": true,
          "description": "component (standalone): Displays the user's rank.",
          "html": "<div className=\"text-2xl font-bold\">{rank_name}</div>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "component (standalone): Displays a single badge icon.",
          "html": "<img src={badge_icon_url} alt={badge_name} className=\"w-6 h-6\" />"
        },
        {
          "name": "BadgeList",
          "is_standalone": false,
          "description": "component (takes children): Displays a list of badges.",
          "html": "<div className=\"flex flex-wrap justify-center\">  {children} <!-- List of Badge components will be rendered here --></div>"
        }
      ]
    },
    {
      "description": "A user rank and badge display with a circular avatar, username, rank, and badges.",
      "html": "<div class=\"flex items-center mb-4\">\n  <UserAvatar/>\n  <UserProfile>\n    <p class=\"text-lg\">{username}</p>\n    <UserRank/>\n  </UserProfile>\n  <BadgeList>\n    <Badge src={badgeSrc1} alt={badgeAlt1}/>\n    <Badge src={badgeSrc2} alt={badgeAlt2}/>\n    <!-- more badges here -->\n  </BadgeList>\n</div>\n",
      "components": [
        {
          "name": "UserAvatar",
          "is_standalone": true,
          "description": "(standalone): displays a circular avatar image",
          "html": "<img src={avatarSrc} alt={avatarAlt} class=\"w-12 h-12 rounded-full mr-4\"/>"
        },
        {
          "name": "UserProfile",
          "is_standalone": false,
          "description": "(takes children): displays the user's profile information",
          "html": "<div class=\"flex-1\">{children}</div>"
        },
        {
          "name": "UserRank",
          "is_standalone": true,
          "description": "(standalone): displays the user's rank",
          "html": "<p class=\"text-gray-600\">{rank}</p>"
        },
        {
          "name": "BadgeList",
          "is_standalone": false,
          "description": "(takes children): displays a list of badges",
          "html": "<div class=\"flex\">{children}</div>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "(standalone): displays a single badge",
          "html": "<img src={src} alt={alt} class=\"w-6 h-6 mr-2\"/>"
        }
      ]
    },
    {
      "description": "The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileRank />\n  <UserProfileBadges>\n    <UserProfileBadge />\n    <UserProfileBadge />\n    <!-- Add more badges here -->\n  </UserProfileBadges>\n</div>\n",
      "components": [
        {
          "name": "UserProfileRank",
          "is_standalone": true,
          "description": "A standalone component that displays the user's rank.",
          "html": "<h2 class=\"text-2xl font-bold\">{rank_name}</h2><p class=\"text-lg text-gray-600\">{rank_description}</p>"
        },
        {
          "name": "UserProfileBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a single badge.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={badge_image} alt={badge_name} class=\"w-8 h-8 mr-2\" />  <span class=\"text-lg\">{badge_name}</span></div>"
        },
        {
          "name": "UserProfileBadges",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of badges.",
          "html": "<ul class=\"list-none m-0 p-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileRank />\n  <UserProfileBadges>\n    <UserProfileBadge />\n    <UserProfileBadge />\n    <!-- Add more badges here -->\n  </UserProfileBadges>\n</div>\n",
      "components": [
        {
          "name": "UserProfileRank",
          "is_standalone": true,
          "description": "A standalone component that displays the user's rank.",
          "html": "<h2 class=\"text-2xl font-bold\">{rank_name}</h2><p class=\"text-lg text-gray-600\">{rank_description}</p>"
        },
        {
          "name": "UserProfileBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a single badge.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={badge_image} alt={badge_name} class=\"w-8 h-8 mr-2\" />  <span class=\"text-lg\">{badge_name}</span></div>"
        },
        {
          "name": "UserProfileBadges",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of badges.",
          "html": "<ul class=\"list-none m-0 p-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a user's rank and badges in a responsive, mobile-friendly format. The rank should be displayed prominently, with the badges listed below it.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileRank />\n  <UserProfileBadges>\n    <UserProfileBadge />\n    <UserProfileBadge />\n    <!-- Add more badges here -->\n  </UserProfileBadges>\n</div>\n",
      "components": [
        {
          "name": "UserProfileRank",
          "is_standalone": true,
          "description": "A standalone component that displays the user's rank.",
          "html": "<h2 class=\"text-2xl font-bold\">{rank_name}</h2><p class=\"text-lg text-gray-600\">{rank_description}</p>"
        },
        {
          "name": "UserProfileBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a single badge.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={badge_image} alt={badge_name} class=\"w-8 h-8 mr-2\" />  <span class=\"text-lg\">{badge_name}</span></div>"
        },
        {
          "name": "UserProfileBadges",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of badges.",
          "html": "<ul class=\"list-none m-0 p-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of user ranks and badges, showing the user's current rank and badges, with a responsive design that adapts to different screen sizes.",
      "html": "<div className=\"flex flex-wrap justify-center mb-4\">\n  <UserProfileCard />\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile information, including rank and badges.",
          "html": "<div className=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">  <h2 className=\"text-lg font-bold\">{userName}</h2>  <p className=\"text-gray-600\">{userBio}</p>  <div className=\"flex flex-wrap justify-center mb-4\">    {badges.map((badge) => (      <RankBadge key={badge.id} {...badge} />    ))}  </div>  <RankList /></div>"
        },
        {
          "name": "RankBadge",
          "is_standalone": true,
          "description": "standalone component that displays a single badge.",
          "html": "<div className=\"p-2\">  <img src={badgeImage} className=\"w-8 h-8\" alt={badgeName} />  <p className=\"text-sm text-gray-600\">{badgeName}</p></div>"
        },
        {
          "name": "RankList",
          "is_standalone": true,
          "description": "standalone component that displays a list of ranks.",
          "html": "<ul className=\"list-none mb-4\">  {ranks.map((rank) => (    <li key={rank.id} className=\"py-2 border-b border-gray-200\">      <p className=\"text-sm\">{rank.name}</p>      <p className=\"text-xs text-gray-600\">{rank.description}</p>    </li>  ))}</ul>"
        }
      ]
    }
  ],
  "Author Bio: Information about article's author": [
    {
      "description": "A compact author bio section with a profile picture, name, and brief description.",
      "html": "<div class=\"flex flex-col md:flex-row items-center mb-4\">\n  <AuthorProfilePicture />\n  <div class=\"ml-4\">\n    <AuthorName />\n    <AuthorBioDescription />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "AuthorBio",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<!-- Not applicable, as AuthorBio is the top-level component -->"
        },
        {
          "name": "AuthorProfilePicture",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<img class=\"w-12 h-12 rounded-full\" src={author_profile_picture_url} alt={author_name} />"
        },
        {
          "name": "AuthorName",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<h5 class=\"text-lg font-bold\">{author_name}</h5>"
        },
        {
          "name": "AuthorBioDescription",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<p class=\"text-sm\">{author_bio_description}</p>"
        }
      ]
    }
  ],
  "Avatar display for user profile picture": [
    {
      "description": "The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <Avatar />\n</div>\n",
      "components": [
        {
          "name": "Avatar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<img src={avatarUrl} alt=\"User Profile Picture\" class=\"w-24 h-24 rounded-full object-cover\" />"
        }
      ]
    },
    {
      "description": "The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <Avatar />\n</div>\n",
      "components": [
        {
          "name": "Avatar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<img src={avatarUrl} alt=\"User Profile Picture\" class=\"w-24 h-24 rounded-full object-cover\" />"
        }
      ]
    }
  ],
  "Recommendations and 'You Might Like'": [
    {
      "description": "The UI should display a list of recommendations and \"You Might Like\" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.",
      "html": "<div className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Recommendations</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n\n  <h2 className=\"text-xl font-bold mb-4 mt-8\">You Might Like</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n</div>\n",
      "components": [
        {
          "name": "RecommendationCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single recommendation with a title, description, and a call-to-action button.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{title}</h3>  <p className=\"text-gray-600\">{description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "RecommendationsList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of recommendations and \"You Might Like\" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.",
      "html": "<div className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Recommendations</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n\n  <h2 className=\"text-xl font-bold mb-4 mt-8\">You Might Like</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n</div>\n",
      "components": [
        {
          "name": "RecommendationCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single recommendation with a title, description, and a call-to-action button.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{title}</h3>  <p className=\"text-gray-600\">{description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "RecommendationsList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of recommendations and \"You Might Like\" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.",
      "html": "<div className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Recommendations</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n\n  <h2 className=\"text-xl font-bold mb-4 mt-8\">You Might Like</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n</div>\n",
      "components": [
        {
          "name": "RecommendationCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single recommendation with a title, description, and a call-to-action button.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{title}</h3>  <p className=\"text-gray-600\">{description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "RecommendationsList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of recommendations and \"You Might Like\" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.",
      "html": "<div className=\"max-w-lg mx-auto p-4\">\n  <h2 className=\"text-xl font-bold mb-4\">Recommendations</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n\n  <h2 className=\"text-xl font-bold mb-4 mt-8\">You Might Like</h2>\n  <RecommendationsList>\n    <RecommendationCard />\n    <RecommendationCard />\n    <!-- Add more RecommendationCard components here -->\n  </RecommendationsList>\n</div>\n",
      "components": [
        {
          "name": "RecommendationCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single recommendation with a title, description, and a call-to-action button.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{title}</h3>  <p className=\"text-gray-600\">{description}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Learn More</button></div>"
        },
        {
          "name": "RecommendationsList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Projects showcase with thumbnails and descriptions": [
    {
      "description": "The UI should be a responsive grid of project showcases, with each project displaying a thumbnail, a title, and a brief description. The grid should be mobile-first, with a single column on small screens and multiple columns on larger screens.",
      "html": "<section class=\"container max-w-7xl mx-auto p-4 lg:p-6\">\n  <h1 class=\"text-3xl font-bold mb-4\">Projects</h1>\n  <ProjectsGrid>\n    <ProjectShowcase />\n    <ProjectShowcase />\n    <ProjectShowcase />\n    <!-- add more ProjectShowcase components as needed -->\n  </ProjectsGrid>\n</section>\n",
      "components": [
        {
          "name": "ProjectShowcase",
          "is_standalone": true,
          "description": "a standalone component displaying a single project's information",
          "html": "<div class=\"bg-white rounded shadow-md p-4 mb-4\">  <img src=\"{project_thumbnail_url}\" alt=\"{project_name} thumbnail\" class=\"w-full mb-2\" />  <h2 class=\"text-lg font-bold\">{project_name}</h2>  <p class=\"text-gray-600\">{project_description}</p></div>"
        },
        {
          "name": "ProjectsGrid",
          "is_standalone": false,
          "description": "a component taking children, rendering a grid of project showcases",
          "html": "<div class=\"grid gap-4 lg:grid-cols-2 xl:grid-cols-3\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A projects showcase with a grid of thumbnails, each with a description and a link to view more.",
      "html": "<div className=\"container mx-auto p-4 pt-6 lg:p-6\">\n  <h1 className=\"text-3xl font-bold mb-4\">Projects Showcase</h1>\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <ProjectShowcase>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <ProjectCard><ProjectThumbnail/></ProjectCard>\n      <!-- and so on... -->\n    </ProjectShowcase>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProjectThumbnail",
          "is_standalone": true,
          "description": "standalone component that displays a single project thumbnail.",
          "html": "<a href=\"{project_url}\" className=\"block mb-4\">  <img src=\"{thumbnail_url}\" alt=\"{project_name}\" className=\"h-48 w-full object-cover rounded-md\" /></a>"
        },
        {
          "name": "ProjectCard",
          "is_standalone": false,
          "description": "takes children, a container component that displays a project thumbnail and description.",
          "html": "<div className=\"p-4 md:p-6 bg-white rounded-md shadow-md\">  {children}  <h2 className=\"text-lg font-bold\">{project_name}</h2>  <p>{project_description}</p></div>"
        },
        {
          "name": "ProjectShowcase",
          "is_standalone": false,
          "description": "takes children, the main component that displays a grid of project cards.",
          "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    }
  ],
  "User profile page with video history": [
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first, accessible, and SEO-friendly user profile page that displays the user's name, profile picture, and video history. The video history section should display a list of video thumbnails with titles, and the user should be able to click on each video to watch it.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileHeader/>\n  <h2 class=\"text-2xl mt-4\">Video History</h2>\n  <VideoHistoryList>\n    <!-- video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile picture and name",
          "html": "<div class=\"flex justify-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-24 h-24 rounded-full\" />  <h1 class=\"text-3xl font-bold ml-4\">{username}</h1></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "component that takes children, which are individual video history items",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "standalone component that displays a video thumbnail, title, and link to watch the video",
          "html": "<li class=\"mb-4\">  <a href={video_url} class=\"block\">    <img src={thumbnail_url} alt={video_title} class=\"w-full\" />    <h3 class=\"text-lg\">{video_title}</h3>  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should display a user profile page with a header, profile information, and a video history section that lists the user's watched videos.",
      "html": "<div className=\"container max-w-md mx-auto p-4\">\n  <UserProfileHeader />\n  <ProfileInfo />\n  <h2 className=\"text-lg font-bold mb-2\">Video History</h2>\n  <VideoHistory>\n    <VideoHistoryItem />\n    <VideoHistoryItem />\n    <!-- more VideoHistoryItem components here -->\n  </VideoHistory>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "standalone, displays the user's profile picture and name",
          "html": "<div className=\"flex justify-center mb-4\">  <img src={profile_picture} className=\"w-24 h-24 rounded-full\" />  <h1 className=\"text-2xl font-bold\">{username}</h1></div>"
        },
        {
          "name": "ProfileInfo",
          "is_standalone": true,
          "description": "standalone, displays the user's bio and profile information",
          "html": "<div className=\"mb-4\">  <p>{bio}</p>  <!-- other profile information here --></div>"
        },
        {
          "name": "VideoHistory",
          "is_standalone": false,
          "description": "takes children, lists the user's video history",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "standalone, displays a single video in the video history",
          "html": "<li className=\"py-2 border-b border-gray-200\">  <img src={video_thumbnail} className=\"w-12 h-12 rounded\" />  <div className=\"ml-2\">    <h3>{video_title}</h3>    <p>{video_description}</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first, accessible, and SEO-friendly user profile page that displays the user's name, profile picture, and video history. The video history section should display a list of video thumbnails with titles, and the user should be able to click on each video to watch it.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileHeader/>\n  <h2 class=\"text-2xl mt-4\">Video History</h2>\n  <VideoHistoryList>\n    <!-- video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile picture and name",
          "html": "<div class=\"flex justify-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-24 h-24 rounded-full\" />  <h1 class=\"text-3xl font-bold ml-4\">{username}</h1></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "component that takes children, which are individual video history items",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "standalone component that displays a video thumbnail, title, and link to watch the video",
          "html": "<li class=\"mb-4\">  <a href={video_url} class=\"block\">    <img src={thumbnail_url} alt={video_title} class=\"w-full\" />    <h3 class=\"text-lg\">{video_title}</h3>  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first, accessible, and SEO-friendly user profile page that displays the user's name, profile picture, and video history. The video history section should display a list of video thumbnails with titles, and the user should be able to click on each video to watch it.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileHeader/>\n  <h2 class=\"text-2xl mt-4\">Video History</h2>\n  <VideoHistoryList>\n    <!-- video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile picture and name",
          "html": "<div class=\"flex justify-center mb-4\">  <img src={profile_picture_url} alt={username} class=\"w-24 h-24 rounded-full\" />  <h1 class=\"text-3xl font-bold ml-4\">{username}</h1></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "component that takes children, which are individual video history items",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "standalone component that displays a video thumbnail, title, and link to watch the video",
          "html": "<li class=\"mb-4\">  <a href={video_url} class=\"block\">    <img src={thumbnail_url} alt={video_title} class=\"w-full\" />    <h3 class=\"text-lg\">{video_title}</h3>  </a></li>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first design that displays a user's profile information and their video history. The profile information should include a profile picture, username, bio, and a list of video titles with timestamps.",
      "html": "<!-- Profile container -->\n<div className=\"max-w-md mx-auto p-4\">\n  <!-- Profile card -->\n  <UserProfileCard />\n  \n  <!-- Video history section -->\n  <h2 className=\"text-lg font-bold mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be rendered here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "standalone component that displays the user's profile information (profile picture, username, bio)",
          "html": "<!-- Profile card container --><div className=\"bg-white p-4 rounded shadow-md\">  <!-- Profile picture -->  <img src={profile_picture_url} alt=\"Profile picture\" className=\"w-24 h-24 rounded-full mb-2\" />  <!-- Username and bio -->  <h3 className=\"text-lg font-bold\">{username}</h3>  <p>{bio}</p></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "component that takes children, displaying a list of video titles with timestamps",
          "html": "<!-- Video history list container --><ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "standalone component that displays a single video title with timestamp",
          "html": "<!-- Video history item container --><li className=\"flex items-center mb-2\">  <!-- Video title and timestamp -->  <p>{video_title} ({video_timestamp})</p></li>"
        }
      ]
    },
    {
      "description": "The UI should display the user's profile information, such as their username, profile picture, and bio, and also showcase their video history, which includes thumbnails, titles, and view counts of the videos they have watched.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <UserProfileHeader />\n  <h2 class=\"text-lg mb-2\">Video History</h2>\n  <VideoHistoryList>\n    <!-- Video history items will be inserted here -->\n  </VideoHistoryList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture, username, and bio.",
          "html": "<div class=\"flex items-center mb-4\">  <img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full mr-4\" />  <div>    <h1 class=\"text-lg\">{username}</h1>    <p class=\"text-gray-600\">{bio}</p>  </div></div>"
        },
        {
          "name": "VideoHistoryList",
          "is_standalone": false,
          "description": "A component that takes children, which represents a list of video history items.",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "VideoHistoryItem",
          "is_standalone": true,
          "description": "A standalone component that displays a single video history item, including the thumbnail, title, and view count.",
          "html": "<li class=\"mb-2\">  <img src={video_thumbnail_url} alt=\"Video Thumbnail\" class=\"w-12 h-12 rounded mr-4\" />  <div>    <h2 class=\"text-lg\">{video_title}</h2>    <p class=\"text-gray-600\">{view_count} views</p>  </div></li>"
        }
      ]
    }
  ],
  "Recipient auto-complete dropdown list": [
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    },
    {
      "description": "The UI should be a text input field with a dropdown list that appears below the input field, displaying a list of suggested recipients. The dropdown list should be scrollable and should display the name and email address of each suggested recipient.",
      "html": "<div class=\"flex flex-col relative\">\n  <AutoCompleteInput />\n  <DropdownList>\n    <!-- dropdown list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "AutoCompleteInput",
          "is_standalone": true,
          "description": "(standalone): The input field where the user types the recipient's name or email address.",
          "html": "<input type=\"text\" class=\"w-full px-4 py-2 border border-gray-300 rounded\" />"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "(takes children): The dropdown list that appears below the input field, displaying a list of suggested recipients.",
          "html": "<ul class=\"absolute bg-white shadow-md p-2 w-full\">  {children}</ul>"
        },
        {
          "name": "RecipientSuggestion",
          "is_standalone": true,
          "description": "(standalone): An individual suggested recipient in the dropdown list, displaying the name and email address of the recipient.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-100\">  <span class=\"text-gray-600\">{recipient_name}</span> &lt;{recipient_email}&gt;</li>"
        }
      ]
    },
    {
      "description": "A text input field with an auto-complete dropdown list that displays a list of recipients as the user types. The dropdown list should be responsive and accessible.",
      "html": "<div className=\"flex flex-col w-full\">\n  <RecipientInput />\n  <DropdownList>\n    <!-- Recipient list items will be inserted here -->\n  </DropdownList>\n</div>\n",
      "components": [
        {
          "name": "RecipientInput",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<input  type=\"text\"  className=\"w-full p-2 pl-10 text-sm text-gray-700\"  placeholder=\"Type a recipient's name or email\"/>"
        },
        {
          "name": "DropdownList",
          "is_standalone": false,
          "description": "A component that takes children, representing the auto-complete dropdown list.",
          "html": "<ul  className=\"absolute bg-white shadow-md w-full z-10\"  aria-labelledby=\"recipient-input\"  role=\"listbox\">  {children}</ul>"
        },
        {
          "name": "RecipientListItem",
          "is_standalone": true,
          "description": "A standalone component that represents a single recipient item in the dropdown list.",
          "html": "<li  className=\"py-2 px-3 hover:bg-gray-100 cursor-pointer\"  role=\"option\">  <span>{recipient_name}</span>  <span className=\"text-gray-600\">{recipient_email}</span></li>"
        }
      ]
    }
  ],
  "WYSIWYG/Rich Text Editors": [
    {
      "description": "A simple, minimalistic WYSIWYG/Rich Text Editor with a toolbar at the top and a contenteditable div below it. The toolbar should have buttons for formatting text (bold, italic, underline), aligning text (left, center, right), and inserting links. The contenteditable div should have a placeholder text \"Start typing...\" and should display the formatted text.",
      "html": "<div className=\"flex flex-col h-screen\">\n  <ToolBar />\n  <Editor>\n    <!-- The contenteditable div will be rendered here -->\n  </Editor>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "(standalone) - Contains buttons for formatting text and inserting links.",
          "html": "<div className=\"flex justify-center mb-2\">  <FormatButton format=\"bold\" />  <FormatButton format=\"italic\" />  <FormatButton format=\"underline\" />  <AlignButton align=\"left\" />  <AlignButton align=\"center\" />  <AlignButton align=\"right\" />  <LinkButton /></div>"
        },
        {
          "name": "Editor",
          "is_standalone": false,
          "description": "(takes children) - The contenteditable div that displays the formatted text.",
          "html": "<div  className=\"p-4 bg-white border border-gray-200 rounded-lg h-full overflow-y-auto\"  contentEditable=\"true\"  placeholder=\"Start typing...\">  {children}</div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for formatting text (e.g., bold, italic, underline).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {format}</button>"
        },
        {
          "name": "AlignButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for aligning text (e.g., left, center, right).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {align}</button>"
        },
        {
          "name": "LinkButton",
          "is_standalone": true,
          "description": "(standalone) - A button for inserting links.",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  Insert Link</button>"
        }
      ]
    },
    {
      "description": "A simple WYSIWYG/Rich Text Editor with a toolbar and a text area to edit and format text. The toolbar should have basic formatting options such as bold, italic, underline, font size, font family, and text alignment.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <Editor>\n    {/* text content will be rendered here */}\n  </Editor>\n</div>\n",
      "components": [
        {
          "name": "Toolbar",
          "is_standalone": true,
          "description": "(standalone) - The top bar with formatting options.",
          "html": "<div class=\"flex justify-center bg-gray-200 p-2\">  <ButtonGroup>    <ToggleButton title=\"Bold\" icon=\"bold\" />    <ToggleButton title=\"Italic\" icon=\"italic\" />    <ToggleButton title=\"Underline\" icon=\"underline\" />  </ButtonGroup>  <ButtonGroup>    <select class=\"px-2 py-1\">      <option value=\"12\">Font Size</option>      <option value=\"14\">14</option>      <option value=\"16\">16</option>    </select>    <select class=\"px-2 py-1\">      <option value=\"Arial\">Arial</option>      <option value=\"Helvetica\">Helvetica</option>      <option value=\"Times New Roman\">Times New Roman</option>    </select>  </ButtonGroup>  <ButtonGroup>    <ToggleButton title=\"Left Align\" icon=\"align-left\" />    <ToggleButton title=\"Center Align\" icon=\"align-center\" />    <ToggleButton title=\"Right Align\" icon=\"align-right\" />  </ButtonGroup></div>"
        },
        {
          "name": "Editor",
          "is_standalone": false,
          "description": "(takes children) - The text area where the user can edit and format text.",
          "html": "<textarea class=\"w-full h-full p-4 overflow-y-auto\">{children}</textarea>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "(takes children) - A group of buttons in the toolbar.",
          "html": "<div class=\"flex items-center\">  {children}</div>"
        },
        {
          "name": "ToggleButton",
          "is_standalone": true,
          "description": "(standalone) - A single button in the toolbar that toggles a formatting option.",
          "html": "<button class=\"px-2 py-1 rounded\" title={title}>  <i class={`fas fa-{icon}`} /></button>"
        }
      ]
    },
    {
      "description": "A simple, minimalistic WYSIWYG/Rich Text Editor with a toolbar at the top and a contenteditable div below it. The toolbar should have buttons for formatting text (bold, italic, underline), aligning text (left, center, right), and inserting links. The contenteditable div should have a placeholder text \"Start typing...\" and should display the formatted text.",
      "html": "<div className=\"flex flex-col h-screen\">\n  <ToolBar />\n  <Editor>\n    <!-- The contenteditable div will be rendered here -->\n  </Editor>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "(standalone) - Contains buttons for formatting text and inserting links.",
          "html": "<div className=\"flex justify-center mb-2\">  <FormatButton format=\"bold\" />  <FormatButton format=\"italic\" />  <FormatButton format=\"underline\" />  <AlignButton align=\"left\" />  <AlignButton align=\"center\" />  <AlignButton align=\"right\" />  <LinkButton /></div>"
        },
        {
          "name": "Editor",
          "is_standalone": false,
          "description": "(takes children) - The contenteditable div that displays the formatted text.",
          "html": "<div  className=\"p-4 bg-white border border-gray-200 rounded-lg h-full overflow-y-auto\"  contentEditable=\"true\"  placeholder=\"Start typing...\">  {children}</div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for formatting text (e.g., bold, italic, underline).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {format}</button>"
        },
        {
          "name": "AlignButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for aligning text (e.g., left, center, right).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {align}</button>"
        },
        {
          "name": "LinkButton",
          "is_standalone": true,
          "description": "(standalone) - A button for inserting links.",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  Insert Link</button>"
        }
      ]
    },
    {
      "description": "A simple, minimalistic WYSIWYG/Rich Text Editor with a toolbar at the top and a contenteditable div below it. The toolbar should have buttons for formatting text (bold, italic, underline), aligning text (left, center, right), and inserting links. The contenteditable div should have a placeholder text \"Start typing...\" and should display the formatted text.",
      "html": "<div className=\"flex flex-col h-screen\">\n  <ToolBar />\n  <Editor>\n    <!-- The contenteditable div will be rendered here -->\n  </Editor>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "(standalone) - Contains buttons for formatting text and inserting links.",
          "html": "<div className=\"flex justify-center mb-2\">  <FormatButton format=\"bold\" />  <FormatButton format=\"italic\" />  <FormatButton format=\"underline\" />  <AlignButton align=\"left\" />  <AlignButton align=\"center\" />  <AlignButton align=\"right\" />  <LinkButton /></div>"
        },
        {
          "name": "Editor",
          "is_standalone": false,
          "description": "(takes children) - The contenteditable div that displays the formatted text.",
          "html": "<div  className=\"p-4 bg-white border border-gray-200 rounded-lg h-full overflow-y-auto\"  contentEditable=\"true\"  placeholder=\"Start typing...\">  {children}</div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for formatting text (e.g., bold, italic, underline).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {format}</button>"
        },
        {
          "name": "AlignButton",
          "is_standalone": true,
          "description": "(standalone) - A single button for aligning text (e.g., left, center, right).",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  {align}</button>"
        },
        {
          "name": "LinkButton",
          "is_standalone": true,
          "description": "(standalone) - A button for inserting links.",
          "html": "<button className=\"px-2 py-1 border border-gray-200 rounded-lg hover:bg-gray-100\">  Insert Link</button>"
        }
      ]
    }
  ],
  "Trending topics display for popular discussions": [
    {
      "description": "The UI should display a list of trending topics, each with a title, a brief description, and a call-to-action button.",
      "html": "<div className=\"container mx-auto p-4 pt-6 lg:p-6 lg:pt-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Trending Topics</h2>\n  <TrendingTopicList>\n    <!-- list of TrendingTopicCard components will go here -->\n  </TrendingTopicList>\n</div>\n",
      "components": [
        {
          "name": "TrendingTopicCard",
          "is_standalone": true,
          "description": "standalone component representing a single trending topic",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{topicTitle}</h3>  <p className=\"text-gray-600\">{topicDescription}</p>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Join Discussion  </button></div>"
        },
        {
          "name": "TrendingTopicList",
          "is_standalone": false,
          "description": "component that takes children, which will be a list of `TrendingTopicCard` components",
          "html": "<ul className=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Search Bar: Input field for searching content": [
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The search bar should be a simple input field with a search icon on the left and a clear button on the right. It should be full-width on mobile devices and have a maximum width on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains the input field, search icon, and clear button.",
          "html": "<div class=\"flex items-center w-full rounded-md border border-gray-300\">  <SearchIcon />  <input type=\"search\" class=\"w-full pl-8 pr-4 py-2\" placeholder=\"Search...\" />  <ClearButton /></div>"
        },
        {
          "name": "SearchIcon",
          "is_standalone": true,
          "description": "standalone component that displays a search icon.",
          "html": "<span class=\"text-gray-400 text-lg\">  <!-- search icon will go here --></span>"
        },
        {
          "name": "ClearButton",
          "is_standalone": true,
          "description": "standalone component that displays a clear button.",
          "html": "<button class=\"text-gray-400 hover:text-gray-600 transition duration-300\">  <!-- clear icon will go here --></button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.",
      "html": "<div class=\"flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4\">\n  <form>\n    <SearchInput />\n    <SearchButton />\n  </form>\n</div>\n",
      "components": [
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "a standalone component that represents the input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full pl-4 pr-10 text-sm text-gray-700\"   placeholder=\"Search...\"  aria-label=\"Search input\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "a standalone component that represents the submit button.",
          "html": "<button   type=\"submit\"   class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {search_button_text}</button>"
        }
      ]
    }
  ],
  "Editable Tables": [
    {
      "description": "A table that can be edited, with input fields for each cell, and a \"Save\" button at the bottom.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <EditableTable>\n    <EditableTableRow>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n    </EditableTableRow>\n    <EditableTableRow>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n      <EditableTableCell><input type=\"text\" /></EditableTableCell>\n    </EditableTableRow>\n    <!-- ... more rows ... -->\n  </EditableTable>\n  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Save</button>\n</div>\n",
      "components": [
        {
          "name": "EditableTableCell",
          "is_standalone": false,
          "description": "(takes children): a single table cell with an input field",
          "html": "<td class=\"border p-2\">{children}</td>"
        },
        {
          "name": "EditableTableRow",
          "is_standalone": false,
          "description": "(takes children): a table row with editable cells",
          "html": "<tr class=\"bg-white\">{children}</tr>"
        },
        {
          "name": "EditableTable",
          "is_standalone": false,
          "description": "(takes children): the entire editable table with multiple rows",
          "html": "<table class=\"table-auto border-collapse w-full\">  <tbody>{children}</tbody></table>"
        }
      ]
    }
  ],
  "Pagination/Infinite Scroll": [
    {
      "description": "The UI should display a list of items with pagination controls at the bottom. The pagination controls should have options to navigate to previous and next pages. If the user reaches the end of the list, an \"Load more\" button should appear to load more items.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ul>\n    <ListItem/> <!-- repeat for each item in the list -->\n  </ul>\n  <PaginationControls/>\n</div>\n",
      "components": [
        {
          "name": "PaginationControls",
          "is_standalone": true,
          "description": "(standalone) - Displays the pagination controls.",
          "html": "<div class=\"flex justify-center mb-4\">  <PaginationButtonItem>Prev</PaginationButtonItem>  <PaginationButtonItem>Next</PaginationButtonItem>  <LoadMoreButton>Load more</LoadMoreButton></div>"
        },
        {
          "name": "PaginationButtonItem",
          "is_standalone": true,
          "description": "(standalone) - A single pagination button (e.g. \"Prev\", \"Next\", etc.).",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">{button_label}</button>"
        },
        {
          "name": "LoadMoreButton",
          "is_standalone": true,
          "description": "(standalone) - The \"Load more\" button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{load_more_label}</button>"
        },
        {
          "name": "ListItem",
          "is_standalone": false,
          "description": "(takes children) - A single item in the list.",
          "html": "<li class=\"my-2\">{children}</li>"
        }
      ]
    }
  ],
  "Comment Input: Input field for writing a new comment": [
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "A simple input field with a placeholder text \"Write a comment...\" and a submit button.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <CommentInput />\n  <CommentSubmit />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "(standalone) - The input field component.",
          "html": "<input type=\"text\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentSubmit",
          "is_standalone": true,
          "description": "(standalone) - The submit button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a placeholder text \"Write a comment...\" and a submit button \"Post\" next to it. The input field should be responsive and adaptive to different screen sizes.",
      "html": "<div class=\"flex flex-wrap gap-2\">\n  <CommentInput />\n</div>\n",
      "components": [
        {
          "name": "CommentInput",
          "is_standalone": true,
          "description": "standalone component that contains an input field and a submit button.",
          "html": "<div class=\"flex items-center\">  <CommentTextArea />  <CommentButton /></div>"
        },
        {
          "name": "CommentTextArea",
          "is_standalone": true,
          "description": "standalone component that is the input field itself.",
          "html": "<textarea class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Write a comment...\" />"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "standalone component that is the submit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Post</button>"
        }
      ]
    }
  ],
  "Like Button: Button for liking a post": [
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    },
    {
      "description": "The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.",
      "html": "<div class=\"flex gap-2\">\n  <LikeButton/>\n  <LikeCounter/>\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"p-2 rounded hover:bg-gray-200 active:bg-gray-300\">  {liked ? <span class=\"text-red-600\">♥</span> : <span>♥</span>}</button>"
        },
        {
          "name": "LikeCounter",
          "is_standalone": true,
          "description": "standalone",
          "html": "<p class=\"text-sm text-gray-600\">{like_count} likes</p>"
        }
      ]
    }
  ],
  "Shopping Cart Icon": [
    {
      "description": "The UI should be a shopping cart icon with a badge indicating the number of items in the cart.",
      "html": "<div className=\"absolute top-2 right-2\">\n  <ShoppingCartIcon/>\n  <Badge/>\n</div>\n",
      "components": [
        {
          "name": "ShoppingCartIcon",
          "is_standalone": true,
          "description": "Standalone component representing the shopping cart icon.",
          "html": "<i className=\"fas fa-shopping-cart text-lg text-gray-500 hover:text-gray-800 cursor-pointer\"></i>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "Standalone component representing the badge displaying the number of items in the cart.",
          "html": "<span className=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{item_count}</span>"
        }
      ]
    }
  ],
  "Logout button with confirmation prompt": [
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A logout button that when clicked, prompts the user to confirm they want to log out. If confirmed, the logout action is performed.",
      "html": "<div className=\"flex justify-center mt-4\">\n  <LogoutButton />\n</div>\n\n<!-- Confirmation prompt will be inserted here -->\n<div id=\"confirm-logout\" className=\"hidden\">\n  <ConfirmLogout>\n    <p>Are you sure you want to log out?</p>\n    <div className=\"flex justify-end\">\n      <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">OK</button>\n      <button className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ml-2\">Cancel</button>\n    </div>\n  </ConfirmLogout>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "standalone, displays a button with a logout icon and text.",
          "html": "<button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-sign-out-alt mr-2\" /> Log Out</button>"
        },
        {
          "name": "ConfirmLogout",
          "is_standalone": false,
          "description": "takes children, displays a confirmation prompt to the user with an OK and Cancel button.",
          "html": "<div className=\"bg-white p-4 rounded shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A logout button that, when clicked, displays a confirmation prompt to ensure the user intends to log out. The prompt should have a warning tone and provide a clear call-to-action to confirm logout.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <LogoutButton />\n  <!-- confirmation prompt will be inserted here -->\n  <ConfirmationPrompt>\n    <p>Are you sure you want to log out?</p>\n    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Confirm Logout</button>\n    <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">Cancel</button>\n  </ConfirmationPrompt>\n</div>\n",
      "components": [
        {
          "name": "LogoutButton",
          "is_standalone": true,
          "description": "(standalone): A button that triggers the confirmation prompt.",
          "html": "<button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Log out</button>"
        },
        {
          "name": "ConfirmationPrompt",
          "is_standalone": false,
          "description": "(takes children): A modal dialog with a warning tone that confirms the user's intention to log out.",
          "html": "<div class=\"fixed top-0 left-0 w-full h-full flex justify-center bg-gray-200 bg-opacity-75\">  <div class=\"bg-white rounded shadow-md p-4 max-w-sm\">    {children}  </div></div>"
        }
      ]
    }
  ],
  "Repository Search and Filtering Tool": [
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive search bar with a dropdown list of repositories that can be filtered by keywords. It should also include a pagination system to navigate through the search results.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <RepositoryList>\n    <!-- repository items will be rendered here -->\n  </RepositoryList>\n  <Pagination />\n</main>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a simple search bar with a text input and a submit button",
          "html": "<div class=\"flex justify-center mb-4\">  <input type=\"search\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" placeholder=\"Search repositories\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Search  </button></div>"
        },
        {
          "name": "RepositoryList",
          "is_standalone": false,
          "description": "(takes children) - a list of repository items with pagination",
          "html": "<ul class=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "RepositoryItem",
          "is_standalone": true,
          "description": "(standalone) - a single repository item with its name, description, and language",
          "html": "<li class=\"bg-white shadow-md p-4 mb-4\">  <h2 class=\"text-lg font-bold\">{repository_name}</h2>  <p class=\"text-gray-600\">{repository_description}</p>  <p class=\"text-gray-600\">Language: {repository_language}</p></li>"
        },
        {
          "name": "Pagination",
          "is_standalone": true,
          "description": "(standalone) - a pagination system with previous and next buttons",
          "html": "<nav class=\"flex justify-center mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Previous  </button>  <button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded\">    Next  </button></nav>"
        }
      ]
    }
  ],
  "Direct message conversation list with online status": [
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "The UI should resemble a list of direct messages, with each item displaying the user's profile picture, username, online status, and a preview of the last message. The online status should be indicated by a green dot for online and a gray dot for offline.",
      "html": "<div class=\"flex flex-col p-4\">\n  <!-- header -->\n  <h2 class=\"text-lg font-bold mb-4\">Direct Messages</h2>\n  \n  <!-- conversation list -->\n  <ul class=\"divide-y divide-gray-200\">\n    <DirectMessageListItem />\n    <DirectMessageListItem />\n    <!-- more list items -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "DirectMessageListItem",
          "is_standalone": true,
          "description": "(standalone): A single direct message item in the list",
          "html": "<li class=\"py-4 flex items-center\">  <UserProfilePicture className=\"w-12 h-12 rounded-full mr-4\" />  <div class=\"flex-1\">    <h3 class=\"text-lg font-bold\">{username}</h3>    <OnlineStatusLabel className=\"text-sm text-gray-500\" />    <MessagePreview className=\"text-sm text-gray-500\">{last_message_preview}</MessagePreview>  </div></li>"
        },
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): The user's profile picture",
          "html": "<img src=\"{profile_picture_url}\" alt=\"{username}'s profile picture\" class=\"rounded-full\" />"
        },
        {
          "name": "OnlineStatusLabel",
          "is_standalone": true,
          "description": "(standalone): The online status indicator (green or gray dot)",
          "html": "<span class={online ? \"bg-green-500\" : \"bg-gray-500\"} w-3 h-3 rounded-full inline-block\"></span>"
        },
        {
          "name": "MessagePreview",
          "is_standalone": true,
          "description": "(standalone): A short preview of the last message",
          "html": "<p class=\"text-sm text-gray-500\">{LAST_MESSAGE_PREVIEW}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.",
      "html": "<div className=\"max-w-md overflow-y-auto mx-auto p-4\">\n  <!-- Conversation list -->\n  <ul>\n    <ConversationItem />\n    <ConversationItem />\n    <!-- ... -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ConversationItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single conversation item in the list.",
          "html": "<li className=\"py-4 border-b border-gray-200\">  <div className=\"flex items-center\">    <img src={user_avatar_url} alt=\"User avatar\" className=\"w-10 h-10 rounded-full mr-3\" />    <div className=\"flex-1\">      <h5 className=\"text-lg\">{conversation_title}</h5>      <p className=\"text-gray-600\">{last_message_preview}</p>    </div>    <OnlineStatusIndicator />  </div></li>"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Indicates whether the other user is online or offline.",
          "html": "<span className={online ? 'text-green-500' : 'text-gray-400'}>  {online ? 'Online' : 'Offline'}</span>"
        }
      ]
    }
  ],
  "Content moderation tools for admin teams": [
    {
      "description": "The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.",
      "html": "<div class=\"flex h-screen\">\n  <SidebarNav />\n  <div class=\"flex-1 overflow-y-auto\">\n    <DashboardHeader />\n    <Breadcrumb>\n      <span>Home</span>\n      <span>Moderation Tools</span>\n      <span>Selected Tool</span>\n    </Breadcrumb>\n    <ModerationTool>\n      <ModerationToolCard>\n        <ModerationToolCardHeader />\n        <ModerationToolCardBody>\n          <!-- moderation tool content -->\n        </ModerationToolCardBody>\n      </ModerationToolCard>\n    </ModerationTool>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "SidebarNav",
          "is_standalone": true,
          "description": "(standalone): A navigation menu component that displays moderation tools.",
          "html": "<nav class=\"w-64 bg-gray-200 h-screen p-4\">  <ul>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 1</a>    </li>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 2</a>    </li>    <!-- more tools -->  </ul></nav>"
        },
        {
          "name": "ModerationTool",
          "is_standalone": false,
          "description": "(takes children): A component that wraps the selected moderation tool.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component that displays the admin team's name and a search bar.",
          "html": "<header class=\"p-4 bg-white border-b border-gray-200\">  <h1 class=\"text-lg\">{admin_team_name}</h1>  <input type=\"search\" class=\"w-full pl-10 pr-4 py-2\" placeholder=\"Search\" /></header>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": false,
          "description": "(takes children): A breadcrumb component that displays the current navigation path.",
          "html": "<nav class=\"flex mb-4\">  {children}</nav>"
        },
        {
          "name": "ModerationToolCard",
          "is_standalone": false,
          "description": "(takes children): A card component that displays a moderation tool's information.",
          "html": "<div class=\"bg-white border border-gray-200 p-4\">  <ModerationToolCardHeader />  <ModerationToolCardBody>    {children}  </ModerationToolCardBody></div>"
        },
        {
          "name": "ModerationToolCardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component for the moderation tool card.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-lg\">{tool_name}</h2>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Edit  </button></header>"
        },
        {
          "name": "ModerationToolCardBody",
          "is_standalone": false,
          "description": "(takes children): A body component for the moderation tool card.",
          "html": "<div class=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.",
      "html": "<div class=\"flex h-screen\">\n  <SidebarNav />\n  <div class=\"flex-1 overflow-y-auto\">\n    <DashboardHeader />\n    <Breadcrumb>\n      <span>Home</span>\n      <span>Moderation Tools</span>\n      <span>Selected Tool</span>\n    </Breadcrumb>\n    <ModerationTool>\n      <ModerationToolCard>\n        <ModerationToolCardHeader />\n        <ModerationToolCardBody>\n          <!-- moderation tool content -->\n        </ModerationToolCardBody>\n      </ModerationToolCard>\n    </ModerationTool>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "SidebarNav",
          "is_standalone": true,
          "description": "(standalone): A navigation menu component that displays moderation tools.",
          "html": "<nav class=\"w-64 bg-gray-200 h-screen p-4\">  <ul>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 1</a>    </li>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 2</a>    </li>    <!-- more tools -->  </ul></nav>"
        },
        {
          "name": "ModerationTool",
          "is_standalone": false,
          "description": "(takes children): A component that wraps the selected moderation tool.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component that displays the admin team's name and a search bar.",
          "html": "<header class=\"p-4 bg-white border-b border-gray-200\">  <h1 class=\"text-lg\">{admin_team_name}</h1>  <input type=\"search\" class=\"w-full pl-10 pr-4 py-2\" placeholder=\"Search\" /></header>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": false,
          "description": "(takes children): A breadcrumb component that displays the current navigation path.",
          "html": "<nav class=\"flex mb-4\">  {children}</nav>"
        },
        {
          "name": "ModerationToolCard",
          "is_standalone": false,
          "description": "(takes children): A card component that displays a moderation tool's information.",
          "html": "<div class=\"bg-white border border-gray-200 p-4\">  <ModerationToolCardHeader />  <ModerationToolCardBody>    {children}  </ModerationToolCardBody></div>"
        },
        {
          "name": "ModerationToolCardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component for the moderation tool card.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-lg\">{tool_name}</h2>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Edit  </button></header>"
        },
        {
          "name": "ModerationToolCardBody",
          "is_standalone": false,
          "description": "(takes children): A body component for the moderation tool card.",
          "html": "<div class=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.",
      "html": "<div class=\"flex h-screen\">\n  <SidebarNav />\n  <div class=\"flex-1 overflow-y-auto\">\n    <DashboardHeader />\n    <Breadcrumb>\n      <span>Home</span>\n      <span>Moderation Tools</span>\n      <span>Selected Tool</span>\n    </Breadcrumb>\n    <ModerationTool>\n      <ModerationToolCard>\n        <ModerationToolCardHeader />\n        <ModerationToolCardBody>\n          <!-- moderation tool content -->\n        </ModerationToolCardBody>\n      </ModerationToolCard>\n    </ModerationTool>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "SidebarNav",
          "is_standalone": true,
          "description": "(standalone): A navigation menu component that displays moderation tools.",
          "html": "<nav class=\"w-64 bg-gray-200 h-screen p-4\">  <ul>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 1</a>    </li>    <li>      <a href=\"#\" class=\"block p-2 hover:bg-gray-300\">Tool 2</a>    </li>    <!-- more tools -->  </ul></nav>"
        },
        {
          "name": "ModerationTool",
          "is_standalone": false,
          "description": "(takes children): A component that wraps the selected moderation tool.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component that displays the admin team's name and a search bar.",
          "html": "<header class=\"p-4 bg-white border-b border-gray-200\">  <h1 class=\"text-lg\">{admin_team_name}</h1>  <input type=\"search\" class=\"w-full pl-10 pr-4 py-2\" placeholder=\"Search\" /></header>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": false,
          "description": "(takes children): A breadcrumb component that displays the current navigation path.",
          "html": "<nav class=\"flex mb-4\">  {children}</nav>"
        },
        {
          "name": "ModerationToolCard",
          "is_standalone": false,
          "description": "(takes children): A card component that displays a moderation tool's information.",
          "html": "<div class=\"bg-white border border-gray-200 p-4\">  <ModerationToolCardHeader />  <ModerationToolCardBody>    {children}  </ModerationToolCardBody></div>"
        },
        {
          "name": "ModerationToolCardHeader",
          "is_standalone": true,
          "description": "(standalone): A header component for the moderation tool card.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-lg\">{tool_name}</h2>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Edit  </button></header>"
        },
        {
          "name": "ModerationToolCardBody",
          "is_standalone": false,
          "description": "(takes children): A body component for the moderation tool card.",
          "html": "<div class=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive dashboard that displays various content moderation tools for admin teams. It should have a navigation sidebar, a header, and a main content area.",
      "html": "<div class=\"flex h-screen\">\n  <SidebarNav />\n  <div class=\"flex-1 overflow-hidden\">\n    <DashboardHeader />\n    <main class=\"p-4\">\n      <ContentModerationTools>\n        <!-- Moderation tools will be inserted here -->\n      </ContentModerationTools>\n    </main>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "SidebarNav",
          "is_standalone": true,
          "description": "Standalone component that displays a navigation menu.",
          "html": "<div class=\"w-64 bg-gray-100 p-4 h-screen\">  <h5 class=\"uppercase text-lg mb-2\">Moderation Tools</h5>  <ul>    <li><a href=\"#\" class=\"block py-2 px-4 text-gray-600\">Tool 1</a></li>    <li><a href=\"#\" class=\"block py-2 px-4 text-gray-600\">Tool 2</a></li>    <!-- More links -->  </ul></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "Standalone component that displays the dashboard header.",
          "html": "<header class=\"bg-white py-4\">  <h1 class=\"text-3xl\">{ dashboard_title }</h1>  <p class=\"text-gray-600\">{ dashboard_subtitle }</p></header>"
        },
        {
          "name": "ContentModerationTools",
          "is_standalone": false,
          "description": "Component that takes children, displaying various content moderation tools.",
          "html": "<div class=\"flex flex-wrap -mx-4\">  {children}</div>"
        },
        {
          "name": "ModerationToolCard",
          "is_standalone": true,
          "description": "Standalone component that displays a single content moderation tool.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4 w-full md:w-1/2 xl:w-1/3\">  <h2 class=\"text-lg\">{ tool_name }</h2>  <p class=\"text-gray-600\">{ tool_description }</p>  <ModerationToolButton /></div>"
        },
        {
          "name": "ModerationToolButton",
          "is_standalone": true,
          "description": "Standalone component that displays a button to perform an action on a moderation tool.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  { button_text }</button>"
        }
      ]
    }
  ],
  "Community Forum and Chat Tools": [
    {
      "description": "The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Community Forum</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-2/3 xl:w-2/3 px-4 mb-4\">\n      <ForumTopicList/>\n    </div>\n    <div class=\"w-full md:w-1/3 xl:w-1/3 px-4 mb-4\">\n      <h2 class=\"text-2xl font-bold mb-4\">Chat</h2>\n      <ChatMessageList/>\n      <ChatInput/>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ForumTopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single discussion topic, including the topic title, description, and number of replies.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <h3 class=\"text-lg font-bold\">{topicTitle}</h3>  <p class=\"text-gray-600\">{topicDescription}</p>  <p class=\"text-gray-600\">{replyCount} replies</p></div>"
        },
        {
          "name": "ForumTopicList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "A standalone component that allows users to input and send messages.",
          "html": "<form class=\"flex mb-4\">  <input type=\"text\" class=\"w-full p-2 pl-10 text-gray-700\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single chat message, including the sender's username and message text.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <p class=\"text-gray-600\">{username}</p>  <p class=\"text-gray-600\">{messageText}</p></div>"
        },
        {
          "name": "ChatMessageList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Community Forum</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-2/3 xl:w-2/3 px-4 mb-4\">\n      <ForumTopicList/>\n    </div>\n    <div class=\"w-full md:w-1/3 xl:w-1/3 px-4 mb-4\">\n      <h2 class=\"text-2xl font-bold mb-4\">Chat</h2>\n      <ChatMessageList/>\n      <ChatInput/>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ForumTopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single discussion topic, including the topic title, description, and number of replies.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <h3 class=\"text-lg font-bold\">{topicTitle}</h3>  <p class=\"text-gray-600\">{topicDescription}</p>  <p class=\"text-gray-600\">{replyCount} replies</p></div>"
        },
        {
          "name": "ForumTopicList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "A standalone component that allows users to input and send messages.",
          "html": "<form class=\"flex mb-4\">  <input type=\"text\" class=\"w-full p-2 pl-10 text-gray-700\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single chat message, including the sender's username and message text.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <p class=\"text-gray-600\">{username}</p>  <p class=\"text-gray-600\">{messageText}</p></div>"
        },
        {
          "name": "ChatMessageList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Community Forum</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-2/3 xl:w-2/3 px-4 mb-4\">\n      <ForumTopicList/>\n    </div>\n    <div class=\"w-full md:w-1/3 xl:w-1/3 px-4 mb-4\">\n      <h2 class=\"text-2xl font-bold mb-4\">Chat</h2>\n      <ChatMessageList/>\n      <ChatInput/>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ForumTopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single discussion topic, including the topic title, description, and number of replies.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <h3 class=\"text-lg font-bold\">{topicTitle}</h3>  <p class=\"text-gray-600\">{topicDescription}</p>  <p class=\"text-gray-600\">{replyCount} replies</p></div>"
        },
        {
          "name": "ForumTopicList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "A standalone component that allows users to input and send messages.",
          "html": "<form class=\"flex mb-4\">  <input type=\"text\" class=\"w-full p-2 pl-10 text-gray-700\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single chat message, including the sender's username and message text.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <p class=\"text-gray-600\">{username}</p>  <p class=\"text-gray-600\">{messageText}</p></div>"
        },
        {
          "name": "ChatMessageList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Community Forum</h1>\n  <div class=\"flex flex-wrap -mx-4\">\n    <div class=\"w-full md:w-2/3 xl:w-2/3 px-4 mb-4\">\n      <ForumTopicList/>\n    </div>\n    <div class=\"w-full md:w-1/3 xl:w-1/3 px-4 mb-4\">\n      <h2 class=\"text-2xl font-bold mb-4\">Chat</h2>\n      <ChatMessageList/>\n      <ChatInput/>\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ForumTopicCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single discussion topic, including the topic title, description, and number of replies.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <h3 class=\"text-lg font-bold\">{topicTitle}</h3>  <p class=\"text-gray-600\">{topicDescription}</p>  <p class=\"text-gray-600\">{replyCount} replies</p></div>"
        },
        {
          "name": "ForumTopicList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        },
        {
          "name": "ChatInput",
          "is_standalone": true,
          "description": "A standalone component that allows users to input and send messages.",
          "html": "<form class=\"flex mb-4\">  <input type=\"text\" class=\"w-full p-2 pl-10 text-gray-700\" placeholder=\"Type a message...\">  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button></form>"
        },
        {
          "name": "ChatMessage",
          "is_standalone": true,
          "description": "A standalone component that displays a single chat message, including the sender's username and message text.",
          "html": "<div class=\"mb-4 p-4 border border-gray-200 rounded\">  <p class=\"text-gray-600\">{username}</p>  <p class=\"text-gray-600\">{messageText}</p></div>"
        },
        {
          "name": "ChatMessageList",
          "is_standalone": false,
          "description": "A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.",
          "html": "<div class=\"overflow-y-auto max-h-screen\">  {children}</div>"
        }
      ]
    }
  ],
  "Notification bell with unread count badge": [
    {
      "description": "The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.",
      "html": "<div className=\"flex items-center\">\n  <NotificationBell />\n  <UnreadCountBadge />\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component representing the notification bell icon.",
          "html": "<i className=\"fa fa-bell text-lg text-gray-600\"></i>"
        },
        {
          "name": "UnreadCountBadge",
          "is_standalone": true,
          "description": "standalone component displaying the number of unread notifications.",
          "html": "<div className=\"bg-red-500 text-white rounded-full text-xs p-1\">{unread_count}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.",
      "html": "<div className=\"flex items-center\">\n  <NotificationBell />\n  <UnreadCountBadge />\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component representing the notification bell icon.",
          "html": "<i className=\"fa fa-bell text-lg text-gray-600\"></i>"
        },
        {
          "name": "UnreadCountBadge",
          "is_standalone": true,
          "description": "standalone component displaying the number of unread notifications.",
          "html": "<div className=\"bg-red-500 text-white rounded-full text-xs p-1\">{unread_count}</div>"
        }
      ]
    },
    {
      "description": "A notification bell icon with a small badge displaying the number of unread notifications. The bell should be clickable, and the badge should be highlighted if there are unread notifications.",
      "html": "<NotificationBell />\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "A standalone component that wraps a clickable bell icon and an unread count badge.",
          "html": "<a href=\"{notification_href}\" class=\"flex items-center hover:bg-gray-100 rounded-md p-2\">  <i class=\"fas fa-bell\"></i>  <Badge>{unread_count}</Badge></a>"
        },
        {
          "name": "Badge",
          "is_standalone": false,
          "description": "A component that takes children (the unread count) and displays it in a highlighted circle.",
          "html": "<span class=\"bg-orange-500 rounded-full text-white py-1 px-2 text-xs\">{children}</span>"
        }
      ]
    }
  ],
  "Customer Profile: View customer details": [
    {
      "description": "A simple profile page with a header, customer information, and a call-to-action (CTA) button.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <CustomerProfileHeader />\n  <div class=\"mt-4\">\n    <CustomerInfoSection>\n      <p><strong>Email:</strong> {customer_email}</p>\n      <p><strong>Phone:</strong> {customer_phone}</p>\n      <p><strong>Address:</strong> {customer_address}</p>\n    </CustomerInfoSection>\n  </div>\n  <div class=\"mt-6\">\n    <CallToActionButton />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CustomerProfileHeader",
          "is_standalone": true,
          "description": "Standalone component to display the customer's profile picture and name.",
          "html": "<div class=\"flex flex-col items-center\">  <img src={customer_profile_picture} class=\"w-24 h-24 rounded-full\" alt=\"Customer Profile Picture\" />  <h2 class=\"text-lg font-bold\">{customer_name}</h2></div>"
        },
        {
          "name": "CustomerInfoSection",
          "is_standalone": false,
          "description": "Takes children to display customer information such as email, phone number, and address.",
          "html": "<div class=\"bg-white shadow-md p-4\">  {children}</div>"
        },
        {
          "name": "CallToActionButton",
          "is_standalone": true,
          "description": "Standalone component to render a CTA button with a customizable label.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{cta_label}</button>"
        }
      ]
    }
  ],
  "Integrated Wiki and Documentation Editor": [
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a main editor area with a sidebar containing a table of contents and a search bar. The editor area should have a header with a title, breadcrumbs, and action buttons. The sidebar should be collapsible.",
      "html": "<div class=\"flex h-screen\">\n  <Sidebar/>\n  <div class=\"flex-1 overflow-y-auto\">\n    <EditorHeader/>\n    <EditorArea>\n      <!-- Editor content will be rendered here -->\n    </EditorArea>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone) - Contains a table of contents and a search bar.",
          "html": "<div class=\"hidden md:block bg-gray-100 w-64 h-screen p-4 overflow-y-auto\">  <SearchBar/>  <TableOfContents>    <!-- TOC items will be rendered here -->  </TableOfContents></div>"
        },
        {
          "name": "EditorHeader",
          "is_standalone": true,
          "description": "(standalone) - Header component with a title, breadcrumbs, and action buttons.",
          "html": "<div class=\"bg-white shadow-md p-4\">  <h1 class=\"text-2xl\">{title}</h1>  <div class=\"flex items-center\">    <Breadcrumb/>    <ActionBar/>  </div></div>"
        },
        {
          "name": "EditorArea",
          "is_standalone": false,
          "description": "(takes children) - Main editor area where content is displayed.",
          "html": "<div class=\"p-4 overflow-y-auto\">{children}</div>"
        },
        {
          "name": "ActionBar",
          "is_standalone": true,
          "description": "(standalone) - Container for action buttons.",
          "html": "<div class=\"flex items-center\">  <button class=\"btn btn-primary\">Save</button>  <button class=\"btn btn-secondary\">Cancel</button></div>"
        },
        {
          "name": "Breadcrumb",
          "is_standalone": true,
          "description": "(standalone) - Single breadcrumb item.",
          "html": "<a href=\"#\" class=\"text-gray-600\">{breadcrumb_label}</a>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - Search input field.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\"/>"
        },
        {
          "name": "TableOfContents",
          "is_standalone": false,
          "description": "(takes children) - Container for table of contents items.",
          "html": "<ul class=\"list-none\">{children}</ul>"
        },
        {
          "name": "TOCItem",
          "is_standalone": true,
          "description": "(standalone) - Single table of contents item.",
          "html": "<li class=\"py-2 border-b border-gray-200\">  <a href=\"#\" class=\"text-gray-600\">{toc_item_label}</a></li>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a navigation menu on the left, a search bar at the top, and a main content area that renders the selected page. The main content area should have a toolbar with editing options and a text editor.",
      "html": "<div className=\"flex h-screen\">\n  <Sidebar />\n  <div className=\"flex-1 overflow-hidden\">\n    <SearchBar />\n    <EditorToolbar />\n    <PageContent>\n      <TextEditor />\n    </PageContent>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "(standalone): A navigation menu that displays a list of pages.",
          "html": "<nav className=\"w-64 bg-gray-100 p-4\">  <ul>    <!-- Page links will be rendered here -->  </ul></nav>"
        },
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone): A search input field with a search button.",
          "html": "<div className=\"flex p-4\">  <input    type=\"search\"    placeholder=\"Search...\"    className=\"w-full px-4 py-2 border border-gray-300\"  />  <button className=\"ml-2 bg-orange-500 hover:bg-orange-700 text-white py-2 px-4\">    Search  </button></div>"
        },
        {
          "name": "EditorToolbar",
          "is_standalone": true,
          "description": "(standalone): A toolbar with editing options (e.g., bold, italic, link).",
          "html": "<div className=\"flex p-4\">  <!-- Editing options will be rendered here -->  <button className=\"mr-2\">Bold</button>  <button>Italic</button>  <!-- More options... --></div>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "(takes children): A text editor that renders the page content.",
          "html": "<textarea  className=\"w-full h-full p-4 border border-gray-300\"  placeholder=\"Edit the page content...\">  {children}</textarea>"
        },
        {
          "name": "PageContent",
          "is_standalone": false,
          "description": "(takes children): The main content area that displays the selected page.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a documentation editor with an integrated wiki. The editor should take up most of the screen, with a sidebar containing a list of wiki pages. The layout should be clean, simple, and easy to use.",
      "html": "<div class=\"flex h-screen overflow-hidden\">\n  <WikiSidebar />\n  <DocumentationEditor />\n</div>\n",
      "components": [
        {
          "name": "DocumentationEditor",
          "is_standalone": true,
          "description": "(standalone) - The main text editor component.",
          "html": "<div class=\"flex-1 overflow-y-auto p-4\">  <textarea class=\"w-full h-full p-2 bg-white border border-gray-200 rounded\" /></div>"
        },
        {
          "name": "WikiSidebar",
          "is_standalone": true,
          "description": "(standalone) - The sidebar component that lists wiki pages.",
          "html": "<div class=\"w-64 bg-gray-100 p-2\">  <ul class=\"list-none mb-0\">    {wiki_pages.map((page) => (      <WikiPageItem key={page.id}>{page.title}</WikiPageItem>    ))}  </ul></div>"
        },
        {
          "name": "WikiPageItem",
          "is_standalone": false,
          "description": "(takes children) - A single item in the wiki sidebar, representing a wiki page.",
          "html": "<li class=\"py-2 px-4 hover:bg-gray-200\">  <a href={`/wiki/${{page_slug}}`}>{children}</a></li>"
        }
      ]
    }
  ],
  "Headline and Summary Text": [
    {
      "description": "The UI should display a headline and a summary text in a responsive, mobile-first layout. The headline should be prominent and attention-grabbing, while the summary text should provide a brief overview of the content.",
      "html": "<div class=\"flex flex-col items-center md:flex-row md:justify-center\">\n  <HeadlineComponent />\n  <SummaryTextComponent />\n</div>\n",
      "components": [
        {
          "name": "HeadlineComponent",
          "is_standalone": true,
          "description": "(standalone): displays a prominent headline text",
          "html": "<h1 class=\"text-3xl font-bold mb-4\">{headline_text}</h1>"
        },
        {
          "name": "SummaryTextComponent",
          "is_standalone": true,
          "description": "(standalone): displays a brief summary text",
          "html": "<p class=\"text-lg text-gray-600\">{summary_text}</p>"
        }
      ]
    }
  ],
  "Statistics Section: Showcase impressive metrics and data": [
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should display impressive metrics and data in a visually appealing way, with clear headings, easy-to-read fonts, and sufficient whitespace to make the numbers stand out.",
      "html": "<section className=\"max-w-md mx-auto p-4\">\n  <h2 className=\"text-3xl font-bold mb-4\">Key Statistics</h2>\n  <StatisticsSection>\n    <StatisticCard/>\n    <StatisticCard/>\n    <StatisticCard/>\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "a standalone component that displays a single metric, consisting of a title, value, and optional description.",
          "html": "<div className=\"bg-white shadow-md p-4 mb-4\">  <h3 className=\"text-lg font-bold\">{statistic_title}</h3>  <p className=\"text-3xl font-bold\">{statistic_value}</p>  <p className=\"text-gray-600\">{statistic_description}</p></div>"
        },
        {
          "name": "StatisticsSection",
          "is_standalone": false,
          "description": "a component that takes children, wrapping multiple `StatisticCard`s in a container with a heading.",
          "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    },
    {
      "description": "The Statistics Section should be a prominent section on the page that showcases impressive metrics and data. It should be divided into several sections, each highlighting a different statistic. The section should be responsive, with the statistics stacking vertically on mobile devices and displaying horizontally on larger screens.",
      "html": "<section class=\"mb-12 md:mb-20 lg:mb-24\">\n  <StatisticsSection>\n    <StatisticCard />\n    <StatisticCard />\n    <StatisticCard />\n  </StatisticsSection>\n</section>\n",
      "components": [
        {
          "name": "StatisticCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single statistic, including a value, label, and optional icon.",
          "html": "<div class=\"flex items-center mb-4 md:mb-6 lg:mb-8\">  <div class=\"mr-4 md:mr-6 lg:mr-8\">    <i class=\"fas fa-{icon_class} text-4xl md:text-5xl lg:text-6xl\"></i>  </div>  <div>    <p class=\"text-2xl md:text-3xl lg:text-4xl\">{value}</p>    <p class=\"text-gray-500\">{label}</p>  </div></div>"
        }
      ]
    }
  ],
  "Social media feed with latest posts and images": [
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    },
    {
      "description": "The UI should be a social media feed that displays the latest posts and images in a responsive, mobile-first layout. The feed should be accessible and SEO-friendly, with alt text for images and semantic HTML5 elements.",
      "html": "<div class=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <SocialMediaFeed>\n    <PostCard />\n    <PostCard />\n    <!-- Repeat PostCard components for each post in the feed -->\n  </SocialMediaFeed>\n</div>\n",
      "components": [
        {
          "name": "PostCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single post with an image, post text, and post author.",
          "html": "<article class=\"flex flex-col mb-4 md:mb-6 lg:mb-12\">  <PostImage />  <PostText />  <PostAuthor /></article>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "A standalone component that displays an image with alt text.",
          "html": "<img src=\"{image_url}\" alt=\"{image_alt_text}\" class=\"w-full h-48 object-cover rounded-md\">"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "A standalone component that displays the post text.",
          "html": "<p class=\"text-lg\">{post_text}</p>"
        },
        {
          "name": "PostAuthor",
          "is_standalone": true,
          "description": "A standalone component that displays the post author's name.",
          "html": "<p class=\"text-sm text-gray-600\">{post_author_name}</p>"
        },
        {
          "name": "SocialMediaFeed",
          "is_standalone": false,
          "description": "A component that takes children (multiple PostCard components) and displays them in a feed layout.",
          "html": "<div class=\"flex flex-col divide-y divide-gray-200\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a social media feed with the latest posts, including images, in a responsive and accessible way. The feed should be mobile-first, with a layout that adapts to different screen sizes.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <SocialMediaFeed/>\n</div>\n",
      "components": [
        {
          "name": "SocialMediaFeed",
          "is_standalone": true,
          "description": "a standalone component that renders a list of posts",
          "html": "<div className=\"flex flex-wrap justify-center mb-4\">  {posts.map((post, index) => (    <PostCard key={index}>      <!-- post content, image, and interactions will be rendered here -->    </PostCard>  ))}</div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "a component that takes children (post content, image, and interactions) and renders a single post card",
          "html": "<div className=\"bg-white shadow-md rounded p-4 mb-4\">  <PostImage src={postImageUrl} alt={postImageAlt} />  <div className=\"py-2\">    {children} <!-- post content will be rendered here -->  </div>  <PostInteractions likes={postLikesCount} comments={postCommentsCount} shares={postSharesCount} /></div>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "a standalone component that renders an image with a caption",
          "html": "<img src={src} alt={alt} className=\"w-full h-48 object-cover rounded-t\" /><div className=\"px-2 py-1 text-sm\">{caption}</div>"
        },
        {
          "name": "PostInteractions",
          "is_standalone": true,
          "description": "a standalone component that renders likes, comments, and shares count",
          "html": "<div className=\"flex justify-between text-sm\">  <div>{likes} likes</div>  <div>{comments} comments</div>  <div>{shares} shares</div></div>"
        }
      ]
    }
  ],
  "User Comments and Feedback": [
    {
      "description": "The UI should display a list of user comments and feedback with each comment showing the user's name, comment text, and a rating (out of 5 stars). The comments should be listed in a responsive, mobile-first layout with a clear hierarchy of information.",
      "html": "<div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 className=\"text-xl font-bold mb-4\">User Comments and Feedback</h2>\n  <ul className=\"list-none mb-4\">\n    <li><CommentCard/></li>\n    <li><CommentCard/></li>\n    <!-- add more comments here -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CommentCard",
          "is_standalone": true,
          "description": "A standalone component representing a single user comment.",
          "html": "<div className=\"bg-white p-4 mb-4 shadow-md\">  <h3 className=\"text-lg font-bold\">{userName}</h3>  <p className=\"text-gray-600\">{commentText}</p>  <div className=\"flex items-center mb-2\">    <RatingStars rating={rating} />    <span className=\"ml-2 text-sm\">{rating} out of 5 stars</span>  </div></div>"
        },
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "A standalone component displaying a rating as a row of 5 stars.",
          "html": "<div className=\"flex\">  {Array.from({ length: 5 }, (star, index) => (    <i      className={`fas fa-star ${index < rating ? 'text-yellow-400' : 'text-gray-300'}`}      aria-hidden=\"true\"    />  ))}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of user comments and feedback with each comment showing the user's name, comment text, and a rating (out of 5 stars). The comments should be listed in a responsive, mobile-first layout with a clear hierarchy of information.",
      "html": "<div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 className=\"text-xl font-bold mb-4\">User Comments and Feedback</h2>\n  <ul className=\"list-none mb-4\">\n    <li><CommentCard/></li>\n    <li><CommentCard/></li>\n    <!-- add more comments here -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CommentCard",
          "is_standalone": true,
          "description": "A standalone component representing a single user comment.",
          "html": "<div className=\"bg-white p-4 mb-4 shadow-md\">  <h3 className=\"text-lg font-bold\">{userName}</h3>  <p className=\"text-gray-600\">{commentText}</p>  <div className=\"flex items-center mb-2\">    <RatingStars rating={rating} />    <span className=\"ml-2 text-sm\">{rating} out of 5 stars</span>  </div></div>"
        },
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "A standalone component displaying a rating as a row of 5 stars.",
          "html": "<div className=\"flex\">  {Array.from({ length: 5 }, (star, index) => (    <i      className={`fas fa-star ${index < rating ? 'text-yellow-400' : 'text-gray-300'}`}      aria-hidden=\"true\"    />  ))}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of user comments and feedback with each comment showing the user's name, comment text, and a rating (out of 5 stars). The comments should be listed in a responsive, mobile-first layout with a clear hierarchy of information.",
      "html": "<div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 className=\"text-xl font-bold mb-4\">User Comments and Feedback</h2>\n  <ul className=\"list-none mb-4\">\n    <li><CommentCard/></li>\n    <li><CommentCard/></li>\n    <!-- add more comments here -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CommentCard",
          "is_standalone": true,
          "description": "A standalone component representing a single user comment.",
          "html": "<div className=\"bg-white p-4 mb-4 shadow-md\">  <h3 className=\"text-lg font-bold\">{userName}</h3>  <p className=\"text-gray-600\">{commentText}</p>  <div className=\"flex items-center mb-2\">    <RatingStars rating={rating} />    <span className=\"ml-2 text-sm\">{rating} out of 5 stars</span>  </div></div>"
        },
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "A standalone component displaying a rating as a row of 5 stars.",
          "html": "<div className=\"flex\">  {Array.from({ length: 5 }, (star, index) => (    <i      className={`fas fa-star ${index < rating ? 'text-yellow-400' : 'text-gray-300'}`}      aria-hidden=\"true\"    />  ))}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of user comments and feedback with each comment showing the user's name, comment text, and a rating (out of 5 stars). The comments should be listed in a responsive, mobile-first layout with a clear hierarchy of information.",
      "html": "<div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 className=\"text-xl font-bold mb-4\">User Comments and Feedback</h2>\n  <ul className=\"list-none mb-4\">\n    <li><CommentCard/></li>\n    <li><CommentCard/></li>\n    <!-- add more comments here -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "CommentCard",
          "is_standalone": true,
          "description": "A standalone component representing a single user comment.",
          "html": "<div className=\"bg-white p-4 mb-4 shadow-md\">  <h3 className=\"text-lg font-bold\">{userName}</h3>  <p className=\"text-gray-600\">{commentText}</p>  <div className=\"flex items-center mb-2\">    <RatingStars rating={rating} />    <span className=\"ml-2 text-sm\">{rating} out of 5 stars</span>  </div></div>"
        },
        {
          "name": "RatingStars",
          "is_standalone": true,
          "description": "A standalone component displaying a rating as a row of 5 stars.",
          "html": "<div className=\"flex\">  {Array.from({ length: 5 }, (star, index) => (    <i      className={`fas fa-star ${index < rating ? 'text-yellow-400' : 'text-gray-300'}`}      aria-hidden=\"true\"    />  ))}</div>"
        }
      ]
    }
  ],
  "Profile Picture and Header Image": [
    {
      "description": "The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.",
      "html": "<div className=\"flex flex-col md:flex-row\">\n  <UserProfilePicture />\n  <HeaderImage />\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): A circular profile picture.",
          "html": "<img className=\"w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4\" src={profile_picture_url} alt={profile_picture_alt_text} />"
        },
        {
          "name": "HeaderImage",
          "is_standalone": true,
          "description": "(standalone): A header image that takes up the full width of the screen.",
          "html": "<img className=\"w-full h-64 object-cover\" src={header_image_url} alt={header_image_alt_text} />"
        }
      ]
    },
    {
      "description": "A profile page with a profile picture and a header image.",
      "html": "<div class=\"flex flex-col w-full h-screen\">\n  <UserProfileHeader>\n    <h1>{username}</h1>\n    <p>{bio}</p>\n  </UserProfileHeader>\n  <UserProfilePicture />\n  <!-- rest of the profile page content -->\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "Standalone component, displays a circular image.",
          "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-48 h-48 rounded-full\" />"
        },
        {
          "name": "UserProfileHeader",
          "is_standalone": false,
          "description": "Takes children, displays a header image with overlaid text.",
          "html": "<div class=\"h-64 bg-cover bg-center\" style={{ backgroundImage: `url(${header_image_url})` }}>  <div class=\"flex flex-col items-center justify-center h-full\">    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.",
      "html": "<div className=\"flex flex-col md:flex-row\">\n  <UserProfilePicture />\n  <HeaderImage />\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): A circular profile picture.",
          "html": "<img className=\"w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4\" src={profile_picture_url} alt={profile_picture_alt_text} />"
        },
        {
          "name": "HeaderImage",
          "is_standalone": true,
          "description": "(standalone): A header image that takes up the full width of the screen.",
          "html": "<img className=\"w-full h-64 object-cover\" src={header_image_url} alt={header_image_alt_text} />"
        }
      ]
    },
    {
      "description": "The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.",
      "html": "<div className=\"flex flex-col md:flex-row\">\n  <UserProfilePicture />\n  <HeaderImage />\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): A circular profile picture.",
          "html": "<img className=\"w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4\" src={profile_picture_url} alt={profile_picture_alt_text} />"
        },
        {
          "name": "HeaderImage",
          "is_standalone": true,
          "description": "(standalone): A header image that takes up the full width of the screen.",
          "html": "<img className=\"w-full h-64 object-cover\" src={header_image_url} alt={header_image_alt_text} />"
        }
      ]
    },
    {
      "description": "The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.",
      "html": "<div className=\"flex flex-col md:flex-row\">\n  <UserProfilePicture />\n  <HeaderImage />\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): A circular profile picture.",
          "html": "<img className=\"w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4\" src={profile_picture_url} alt={profile_picture_alt_text} />"
        },
        {
          "name": "HeaderImage",
          "is_standalone": true,
          "description": "(standalone): A header image that takes up the full width of the screen.",
          "html": "<img className=\"w-full h-64 object-cover\" src={header_image_url} alt={header_image_alt_text} />"
        }
      ]
    },
    {
      "description": "The UI should have a profile picture and a header image that takes up the full width of the screen. On mobile, the profile picture should be circular and centered, with the header image below it. On larger screens, the profile picture should be circular and aligned to the left, with the header image taking up the rest of the width.",
      "html": "<div className=\"flex flex-col md:flex-row\">\n  <UserProfilePicture />\n  <HeaderImage />\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "(standalone): A circular profile picture.",
          "html": "<img className=\"w-32 h-32 rounded-full mx-auto md:mx-0 md:mr-4\" src={profile_picture_url} alt={profile_picture_alt_text} />"
        },
        {
          "name": "HeaderImage",
          "is_standalone": true,
          "description": "(standalone): A header image that takes up the full width of the screen.",
          "html": "<img className=\"w-full h-64 object-cover\" src={header_image_url} alt={header_image_alt_text} />"
        }
      ]
    }
  ],
  "Dashboard: Visualize key metrics and KPIs": [
    {
      "description": "The Dashboard UI should display key metrics and KPIs in a clear and concise manner, providing a quick overview of the system's performance. It should be a responsive, mobile-first design that adapts to different screen sizes and devices.",
      "html": "<!-- The main dashboard container -->\n<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <DashboardHeader />\n  <MetricGrid>\n    <MetricCard title=\"Total Users\" value={user_count} unit=\"users\" />\n    <MetricCard title=\"Daily Active Users\" value={dau_count} unit=\"users\" />\n    <MetricCard title=\"Total Revenue\" value={revenue_amount} unit=\"USD\" />\n    <KpiChart title=\"User Engagement\" chartData={engagement_data} />\n  </MetricGrid>\n</div>\n",
      "components": [
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric or KPI, with a title, value, and optional unit.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <p class=\"text-3xl\">{value} {unit}</p></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation links.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Dashboard</h1>  <nav>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a>  </nav></header>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children, which displays a grid of `MetricCard`s.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "KpiChart",
          "is_standalone": true,
          "description": "A standalone component that displays a chart showing a key performance indicator (KPI).",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <!-- Chart component here, e.g. a line chart or bar chart -->  <div class=\"chart\">{chartData}</div></div>"
        }
      ]
    },
    {
      "description": "The Dashboard UI should display key metrics and KPIs in a clear and concise manner, providing a quick overview of the system's performance. It should be a responsive, mobile-first design that adapts to different screen sizes and devices.",
      "html": "<!-- The main dashboard container -->\n<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <DashboardHeader />\n  <MetricGrid>\n    <MetricCard title=\"Total Users\" value={user_count} unit=\"users\" />\n    <MetricCard title=\"Daily Active Users\" value={dau_count} unit=\"users\" />\n    <MetricCard title=\"Total Revenue\" value={revenue_amount} unit=\"USD\" />\n    <KpiChart title=\"User Engagement\" chartData={engagement_data} />\n  </MetricGrid>\n</div>\n",
      "components": [
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric or KPI, with a title, value, and optional unit.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <p class=\"text-3xl\">{value} {unit}</p></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation links.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Dashboard</h1>  <nav>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a>  </nav></header>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children, which displays a grid of `MetricCard`s.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "KpiChart",
          "is_standalone": true,
          "description": "A standalone component that displays a chart showing a key performance indicator (KPI).",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <!-- Chart component here, e.g. a line chart or bar chart -->  <div class=\"chart\">{chartData}</div></div>"
        }
      ]
    },
    {
      "description": "The Dashboard UI should display key metrics and KPIs in a clear and concise manner, providing a quick overview of the system's performance. It should be a responsive, mobile-first design that adapts to different screen sizes and devices.",
      "html": "<!-- The main dashboard container -->\n<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <DashboardHeader />\n  <MetricGrid>\n    <MetricCard title=\"Total Users\" value={user_count} unit=\"users\" />\n    <MetricCard title=\"Daily Active Users\" value={dau_count} unit=\"users\" />\n    <MetricCard title=\"Total Revenue\" value={revenue_amount} unit=\"USD\" />\n    <KpiChart title=\"User Engagement\" chartData={engagement_data} />\n  </MetricGrid>\n</div>\n",
      "components": [
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric or KPI, with a title, value, and optional unit.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <p class=\"text-3xl\">{value} {unit}</p></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation links.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Dashboard</h1>  <nav>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a>  </nav></header>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children, which displays a grid of `MetricCard`s.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "KpiChart",
          "is_standalone": true,
          "description": "A standalone component that displays a chart showing a key performance indicator (KPI).",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <!-- Chart component here, e.g. a line chart or bar chart -->  <div class=\"chart\">{chartData}</div></div>"
        }
      ]
    },
    {
      "description": "The Dashboard UI should display key metrics and KPIs in a clear and concise manner, providing a quick overview of the system's performance. It should be a responsive, mobile-first design that adapts to different screen sizes and devices.",
      "html": "<!-- The main dashboard container -->\n<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <DashboardHeader />\n  <MetricGrid>\n    <MetricCard title=\"Total Users\" value={user_count} unit=\"users\" />\n    <MetricCard title=\"Daily Active Users\" value={dau_count} unit=\"users\" />\n    <MetricCard title=\"Total Revenue\" value={revenue_amount} unit=\"USD\" />\n    <KpiChart title=\"User Engagement\" chartData={engagement_data} />\n  </MetricGrid>\n</div>\n",
      "components": [
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric or KPI, with a title, value, and optional unit.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <p class=\"text-3xl\">{value} {unit}</p></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation links.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Dashboard</h1>  <nav>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a>  </nav></header>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children, which displays a grid of `MetricCard`s.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "KpiChart",
          "is_standalone": true,
          "description": "A standalone component that displays a chart showing a key performance indicator (KPI).",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <!-- Chart component here, e.g. a line chart or bar chart -->  <div class=\"chart\">{chartData}</div></div>"
        }
      ]
    },
    {
      "description": "The Dashboard UI should display key metrics and KPIs in a clear and concise manner, providing a quick overview of the system's performance. It should be a responsive, mobile-first design that adapts to different screen sizes and devices.",
      "html": "<!-- The main dashboard container -->\n<div class=\"max-w-md mx-auto p-4 pt-6\">\n  <DashboardHeader />\n  <MetricGrid>\n    <MetricCard title=\"Total Users\" value={user_count} unit=\"users\" />\n    <MetricCard title=\"Daily Active Users\" value={dau_count} unit=\"users\" />\n    <MetricCard title=\"Total Revenue\" value={revenue_amount} unit=\"USD\" />\n    <KpiChart title=\"User Engagement\" chartData={engagement_data} />\n  </MetricGrid>\n</div>\n",
      "components": [
        {
          "name": "MetricCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric or KPI, with a title, value, and optional unit.",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <p class=\"text-3xl\">{value} {unit}</p></div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation links.",
          "html": "<header class=\"flex justify-between mb-4\">  <h1 class=\"text-2xl\">Dashboard</h1>  <nav>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 1</a>    <a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">Link 2</a>  </nav></header>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children, which displays a grid of `MetricCard`s.",
          "html": "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "KpiChart",
          "is_standalone": true,
          "description": "A standalone component that displays a chart showing a key performance indicator (KPI).",
          "html": "<div class=\"bg-white p-4 rounded shadow-md\">  <h5 class=\"text-lg\">{title}</h5>  <!-- Chart component here, e.g. a line chart or bar chart -->  <div class=\"chart\">{chartData}</div></div>"
        }
      ]
    }
  ],
  "Upload/Progress Bars": [
    {
      "description": "The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.",
      "html": "<div class=\"flex flex-col items-center py-4\">\n  <ProgressBar />\n  <ProgressText />\n</div>\n",
      "components": [
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "Standalone component that displays the progress bar.",
          "html": "<div class=\"bg-gray-200 h-4 w-full rounded-md overflow-hidden\">  <div class=\"bg-blue-500 h-4\" style={`width: ${progressPercentage}%`}></div></div>"
        },
        {
          "name": "ProgressText",
          "is_standalone": true,
          "description": "Standalone component that displays the progress text (e.g., \"35% complete\").",
          "html": "<p class=\"text-lg font-bold\">{progressPercentage}% complete</p>"
        }
      ]
    },
    {
      "description": "A horizontal progress bar that fills up as the upload progresses, with a percentage indicator.",
      "html": "<div className=\"flex items-center gap-2\">\n  <ProgressBar />\n  <ProgressIndicator />\n</div>\n",
      "components": [
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "a standalone component that displays the progress of the upload",
          "html": "<div className=\"bg-gray-200 h-2 rounded-lg overflow-hidden\">  <div className=\"bg-blue-500 h-2 rounded-lg\" style={{ width: `${progressPercentage}%` }} /></div>"
        },
        {
          "name": "ProgressIndicator",
          "is_standalone": true,
          "description": "a standalone component that displays the percentage of the upload",
          "html": "<p className=\"text-sm\">{progressPercentage} %</p>"
        }
      ]
    },
    {
      "description": "The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.",
      "html": "<div class=\"flex flex-col items-center py-4\">\n  <ProgressBar />\n  <ProgressText />\n</div>\n",
      "components": [
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "Standalone component that displays the progress bar.",
          "html": "<div class=\"bg-gray-200 h-4 w-full rounded-md overflow-hidden\">  <div class=\"bg-blue-500 h-4\" style={`width: ${progressPercentage}%`}></div></div>"
        },
        {
          "name": "ProgressText",
          "is_standalone": true,
          "description": "Standalone component that displays the progress text (e.g., \"35% complete\").",
          "html": "<p class=\"text-lg font-bold\">{progressPercentage}% complete</p>"
        }
      ]
    },
    {
      "description": "The UI should display a progress bar that fills up as the upload progresses. The progress bar should be visually appealing, responsive, and accessible.",
      "html": "<div class=\"flex flex-col items-center py-4\">\n  <ProgressBar />\n  <ProgressText />\n</div>\n",
      "components": [
        {
          "name": "ProgressBar",
          "is_standalone": true,
          "description": "Standalone component that displays the progress bar.",
          "html": "<div class=\"bg-gray-200 h-4 w-full rounded-md overflow-hidden\">  <div class=\"bg-blue-500 h-4\" style={`width: ${progressPercentage}%`}></div></div>"
        },
        {
          "name": "ProgressText",
          "is_standalone": true,
          "description": "Standalone component that displays the progress text (e.g., \"35% complete\").",
          "html": "<p class=\"text-lg font-bold\">{progressPercentage}% complete</p>"
        }
      ]
    }
  ],
  "Shipping and delivery options": [
    {
      "description": "The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionsList>\n    <DeliveryOptionCard />\n    <DeliveryOptionCard />\n    <!-- Add more DeliveryOptionCard components as needed -->\n  </ShippingOptionsList>\n</section>\n",
      "components": [
        {
          "name": "DeliveryOptionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single delivery option.",
          "html": "<article class=\"border p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p>{description}</p>  <p>Estimated delivery time: {delivery_time}</p>  <p>Cost: {cost}</p>  <!-- Add more details as needed --></article>"
        },
        {
          "name": "ShippingOptionsList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of delivery options.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionsList>\n    <DeliveryOptionCard />\n    <DeliveryOptionCard />\n    <!-- Add more DeliveryOptionCard components as needed -->\n  </ShippingOptionsList>\n</section>\n",
      "components": [
        {
          "name": "DeliveryOptionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single delivery option.",
          "html": "<article class=\"border p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p>{description}</p>  <p>Estimated delivery time: {delivery_time}</p>  <p>Cost: {cost}</p>  <!-- Add more details as needed --></article>"
        },
        {
          "name": "ShippingOptionsList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of delivery options.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionsList>\n    <DeliveryOptionCard />\n    <DeliveryOptionCard />\n    <!-- Add more DeliveryOptionCard components as needed -->\n  </ShippingOptionsList>\n</section>\n",
      "components": [
        {
          "name": "DeliveryOptionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single delivery option.",
          "html": "<article class=\"border p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p>{description}</p>  <p>Estimated delivery time: {delivery_time}</p>  <p>Cost: {cost}</p>  <!-- Add more details as needed --></article>"
        },
        {
          "name": "ShippingOptionsList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of delivery options.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionsList>\n    <DeliveryOptionCard />\n    <DeliveryOptionCard />\n    <!-- Add more DeliveryOptionCard components as needed -->\n  </ShippingOptionsList>\n</section>\n",
      "components": [
        {
          "name": "DeliveryOptionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single delivery option.",
          "html": "<article class=\"border p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p>{description}</p>  <p>Estimated delivery time: {delivery_time}</p>  <p>Cost: {cost}</p>  <!-- Add more details as needed --></article>"
        },
        {
          "name": "ShippingOptionsList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of delivery options.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-lg font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionsList>\n    <DeliveryOptionCard />\n    <DeliveryOptionCard />\n    <!-- Add more DeliveryOptionCard components as needed -->\n  </ShippingOptionsList>\n</section>\n",
      "components": [
        {
          "name": "DeliveryOptionCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single delivery option.",
          "html": "<article class=\"border p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p>{description}</p>  <p>Estimated delivery time: {delivery_time}</p>  <p>Cost: {cost}</p>  <!-- Add more details as needed --></article>"
        },
        {
          "name": "ShippingOptionsList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of delivery options.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of shipping and delivery options with their respective details, such as names, prices, and estimated delivery times. The UI should be responsive, with a mobile-first design that adapts to different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <h2 class=\"text-2xl font-bold mb-4\">Shipping and Delivery Options</h2>\n  <ShippingOptionList>\n    <!-- shipping options will be rendered here -->\n  </ShippingOptionList>\n</div>\n",
      "components": [
        {
          "name": "ShippingOptionCard",
          "is_standalone": true,
          "description": "a standalone component that displays a single shipping option.",
          "html": "<div class=\"bg-white shadow-md p-4 mb-4\">  <h3 class=\"text-lg font-bold\">{option_name}</h3>  <p class=\"text-gray-600\">{description}</p>  <p class=\"font-bold\">{price}</p>  <p>Estimated delivery time: {estimated_delivery_time}</p></div>"
        },
        {
          "name": "ShippingOptionList",
          "is_standalone": false,
          "description": "a component that takes children, which is a list of `ShippingOptionCard` components.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Room Type and Rate Selection": [
    {
      "description": "The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-8\">\n  <h1 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h1>\n  <RoomTypeList>\n    <!-- Room type cards will be rendered here -->\n  </RoomTypeList>\n</div>\n",
      "components": [
        {
          "name": "RoomTypeCard",
          "is_standalone": true,
          "description": "A standalone component representing a single room type.",
          "html": "<div class=\"flex flex-col mb-4 lg:mb-8\">  <h2 class=\"text-lg font-bold\">{roomTypeName}</h2>  <AmenityList roomTypeAmenities={roomTypeAmenities} />  <RateSelector rateOptions={rateOptions} /></div>"
        },
        {
          "name": "AmenityList",
          "is_standalone": true,
          "description": "A standalone component listing the amenities for a room type.",
          "html": "<ul class=\"list-disc pl-4 mb-4\">  {amenities.map((amenity) => (    <li key={amenity}>{amenity}</li>  ))}</ul>"
        },
        {
          "name": "RateSelector",
          "is_standalone": true,
          "description": "A standalone component allowing the user to select a rate.",
          "html": "<select class=\"w-full p-2 pl-4\">  {rateOptions.map((rate) => (    <option key={rate.id} value={rate.id}>{rate.name}</option>  ))}</select>"
        },
        {
          "name": "RoomTypeList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of room types.",
          "html": "{children}"
        }
      ]
    },
    {
      "description": "A room type and rate selection UI that allows users to choose from different room types and rates.",
      "html": "<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h2>\n  \n  <div class=\"flex flex-wrap -mx-4\">\n    <RoomTypeCard />\n    <RoomTypeCard />\n    <RoomTypeCard />\n    <!-- Add more RoomTypeCard components as needed -->\n  </div>\n  \n  <RateSelection>\n    <RateOption />\n    <RateOption />\n    <RateOption />\n    <!-- Add more RateOption components as needed -->\n  </RateSelection>\n</div>\n",
      "components": [
        {
          "name": "RoomTypeCard",
          "is_standalone": true,
          "description": "(standalone): Displays a single room type with its details and rates.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <h3 class=\"text-lg font-bold\">{room_type_name}</h3>  <p class=\"text-gray-600\">{room_type_description}</p>  <p class=\"text-lg font-bold\">{price_per_night} per night</p></div>"
        },
        {
          "name": "RateSelection",
          "is_standalone": false,
          "description": "(takes children): A container for selecting rates.",
          "html": "<div class=\"p-4\">  <h3 class=\"text-lg font-bold\">Select Rate</h3>  <div class=\"flex flex-wrap -mx-4\">    {children}  </div></div>"
        },
        {
          "name": "RateOption",
          "is_standalone": true,
          "description": "(standalone): A single rate option with its details.",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <input type=\"radio\" id={rate_id} name=\"rate\" />  <label for={rate_id} class=\"text-lg font-bold\">{rate_name}</label>  <p class=\"text-gray-600\">{rate_description}</p>  <p class=\"text-lg font-bold\">{rate_price} per night</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-8\">\n  <h1 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h1>\n  <RoomTypeList>\n    <!-- Room type cards will be rendered here -->\n  </RoomTypeList>\n</div>\n",
      "components": [
        {
          "name": "RoomTypeCard",
          "is_standalone": true,
          "description": "A standalone component representing a single room type.",
          "html": "<div class=\"flex flex-col mb-4 lg:mb-8\">  <h2 class=\"text-lg font-bold\">{roomTypeName}</h2>  <AmenityList roomTypeAmenities={roomTypeAmenities} />  <RateSelector rateOptions={rateOptions} /></div>"
        },
        {
          "name": "AmenityList",
          "is_standalone": true,
          "description": "A standalone component listing the amenities for a room type.",
          "html": "<ul class=\"list-disc pl-4 mb-4\">  {amenities.map((amenity) => (    <li key={amenity}>{amenity}</li>  ))}</ul>"
        },
        {
          "name": "RateSelector",
          "is_standalone": true,
          "description": "A standalone component allowing the user to select a rate.",
          "html": "<select class=\"w-full p-2 pl-4\">  {rateOptions.map((rate) => (    <option key={rate.id} value={rate.id}>{rate.name}</option>  ))}</select>"
        },
        {
          "name": "RoomTypeList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of room types.",
          "html": "{children}"
        }
      ]
    },
    {
      "description": "The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-8\">\n  <h1 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h1>\n  <RoomTypeList>\n    <!-- Room type cards will be rendered here -->\n  </RoomTypeList>\n</div>\n",
      "components": [
        {
          "name": "RoomTypeCard",
          "is_standalone": true,
          "description": "A standalone component representing a single room type.",
          "html": "<div class=\"flex flex-col mb-4 lg:mb-8\">  <h2 class=\"text-lg font-bold\">{roomTypeName}</h2>  <AmenityList roomTypeAmenities={roomTypeAmenities} />  <RateSelector rateOptions={rateOptions} /></div>"
        },
        {
          "name": "AmenityList",
          "is_standalone": true,
          "description": "A standalone component listing the amenities for a room type.",
          "html": "<ul class=\"list-disc pl-4 mb-4\">  {amenities.map((amenity) => (    <li key={amenity}>{amenity}</li>  ))}</ul>"
        },
        {
          "name": "RateSelector",
          "is_standalone": true,
          "description": "A standalone component allowing the user to select a rate.",
          "html": "<select class=\"w-full p-2 pl-4\">  {rateOptions.map((rate) => (    <option key={rate.id} value={rate.id}>{rate.name}</option>  ))}</select>"
        },
        {
          "name": "RoomTypeList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of room types.",
          "html": "{children}"
        }
      ]
    },
    {
      "description": "The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.",
      "html": "<div class=\"max-w-md mx-auto p-4 lg:p-8\">\n  <h1 class=\"text-2xl font-bold mb-4\">Select Room Type and Rate</h1>\n  <RoomTypeList>\n    <!-- Room type cards will be rendered here -->\n  </RoomTypeList>\n</div>\n",
      "components": [
        {
          "name": "RoomTypeCard",
          "is_standalone": true,
          "description": "A standalone component representing a single room type.",
          "html": "<div class=\"flex flex-col mb-4 lg:mb-8\">  <h2 class=\"text-lg font-bold\">{roomTypeName}</h2>  <AmenityList roomTypeAmenities={roomTypeAmenities} />  <RateSelector rateOptions={rateOptions} /></div>"
        },
        {
          "name": "AmenityList",
          "is_standalone": true,
          "description": "A standalone component listing the amenities for a room type.",
          "html": "<ul class=\"list-disc pl-4 mb-4\">  {amenities.map((amenity) => (    <li key={amenity}>{amenity}</li>  ))}</ul>"
        },
        {
          "name": "RateSelector",
          "is_standalone": true,
          "description": "A standalone component allowing the user to select a rate.",
          "html": "<select class=\"w-full p-2 pl-4\">  {rateOptions.map((rate) => (    <option key={rate.id} value={rate.id}>{rate.name}</option>  ))}</select>"
        },
        {
          "name": "RoomTypeList",
          "is_standalone": false,
          "description": "A component that takes children, displaying a list of room types.",
          "html": "{children}"
        }
      ]
    }
  ],
  "Notification Alerts/Badges": [
    {
      "description": "The UI should have a notification badge/alert that displays a small circle or rectangle with a number or a message inside, usually indicating the number of notifications, messages, or updates.",
      "html": "<nav className=\"flex items-center justify-between py-4\">\n  <ul className=\"flex items-center\">\n    <li className=\"mr-4\">\n      <a href=\"#\" className=\"text-gray-600 hover:text-gray-900 transition duration-300\">\n        <NotificationBadge/> <!-- notification badge -->\n      </a>\n    </li>\n  </ul>\n  <NotificationAlert/> <!-- notification alert -->\n</nav>\n",
      "components": [
        {
          "name": "NotificationBadge",
          "is_standalone": true,
          "description": "(standalone) - a small circle or rectangle displaying a number or message",
          "html": "<span className=\"bg-red-500 text-white rounded-full px-2 py-1 text-xs\">{notification_count}</span>"
        },
        {
          "name": "NotificationAlert",
          "is_standalone": true,
          "description": "(standalone) - a small notification message with an icon and text",
          "html": "<div className=\"bg-orange-200 p-2 rounded border-l-4 border-orange-500\">  <i className=\"fas fa-bell mr-2 text-orange-500\"></i>  <span>{notification_message}</span></div>"
        }
      ]
    }
  ],
  "Telephone/Phone Number Inputs": [
    {
      "description": "The UI should be a simple input field with a label, allowing users to enter their phone number. The input field should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">\n  <label for=\"phone-number\" class=\"block mb-2 text-sm font-bold\">Phone Number</label>\n  <PhoneNumberInput id=\"phone-number\" />\n</div>\n",
      "components": [
        {
          "name": "PhoneNumberInput",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input type=\"tel\"        class=\"block w-full pl-10 text-sm text-gray-700\"        id=\"{id}\"        placeholder=\"Enter your phone number\"        pattern=\"[0-9]{3} [0-9]{3} [0-9]{4}\"        required />"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a label, allowing users to enter their phone number. The input field should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">\n  <label for=\"phone-number\" class=\"block mb-2 text-sm font-bold\">Phone Number</label>\n  <PhoneNumberInput id=\"phone-number\" />\n</div>\n",
      "components": [
        {
          "name": "PhoneNumberInput",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input type=\"tel\"        class=\"block w-full pl-10 text-sm text-gray-700\"        id=\"{id}\"        placeholder=\"Enter your phone number\"        pattern=\"[0-9]{3} [0-9]{3} [0-9]{4}\"        required />"
        }
      ]
    },
    {
      "description": "The UI should be a simple input field with a label, allowing users to enter their phone number. The input field should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4\">\n  <label for=\"phone-number\" class=\"block mb-2 text-sm font-bold\">Phone Number</label>\n  <PhoneNumberInput id=\"phone-number\" />\n</div>\n",
      "components": [
        {
          "name": "PhoneNumberInput",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input type=\"tel\"        class=\"block w-full pl-10 text-sm text-gray-700\"        id=\"{id}\"        placeholder=\"Enter your phone number\"        pattern=\"[0-9]{3} [0-9]{3} [0-9]{4}\"        required />"
        }
      ]
    }
  ],
  "Reporting Dashboard: Generate data insights": [
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays various data insights in a clear and organized manner. The dashboard should have a top navigation bar, a sidebar with navigation options, and a main content area that displays different charts, graphs, and data tables.",
      "html": "<div className=\"flex h-screen\">\n  <NavigationBar />\n  <div className=\"flex-1 overflow-y-hidden\">\n    <Sidebar />\n    <main className=\"p-4\">\n      <DataSection>\n        <DataCard>{children}</DataCard>\n        <DataCard>{children}</DataCard>\n      </DataSection>\n      <DataSection>\n        <DataTable>\n          <thead>\n            <tr>\n              <th>{column1_header}</th>\n              <th>{column2_header}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{data_point1}</td>\n              <td>{data_point2}</td>\n            </tr>\n          </tbody>\n        </DataTable>\n      </DataSection>\n    </main>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "- Standalone - Displays the top navigation bar with a dashboard title and navigation links.",
          "html": "<nav className=\"bg-white border-b border-gray-200\">  <div className=\"container mx-auto p-4\">    <h1 className=\"text-lg\">{dashboard_title}</h1>    <ul className=\"flex justify-end\">      <li><a href=\"#\" className=\"text-gray-600\">{nav_link1}</a></li>      <li><a href=\"#\" className=\"text-gray-600\">{nav_link2}</a></li>    </ul>  </div></nav>"
        },
        {
          "name": "Sidebar",
          "is_standalone": true,
          "description": "- Standalone - Displays the sidebar with navigation options.",
          "html": "<aside className=\"w-64 bg-white border-r border-gray-200\">  <nav className=\"px-4\">    <ul>      <li><a href=\"#\" className=\"block py-2\">{sidebar_link1}</a></li>      <li><a href=\"#\" className=\"block py-2\">{sidebar_link2}</a></li>    </ul>  </nav></aside>"
        },
        {
          "name": "DataCard",
          "is_standalone": false,
          "description": "- Takes children - Displays a single data insight, such as a chart or graph, with a title and description.",
          "html": "<div className=\"bg-white shadow-md rounded p-4\">  <h2 className=\"text-lg\">{title}</h2>  <p>{description}</p>  {children}</div>"
        },
        {
          "name": "DataSection",
          "is_standalone": false,
          "description": "- Takes children - Displays a section of data insights, such as a row of charts or graphs.",
          "html": "<div className=\"flex flex-wrap -mx-4\">  {children}</div>"
        },
        {
          "name": "DataTable",
          "is_standalone": false,
          "description": "- Takes children - Displays a table of data with column headers and rows.",
          "html": "<table className=\"w-full\">  {children}</table>"
        }
      ]
    },
    {
      "description": "The UI should display a structured overview of data insights, providing an at-a-glance view of key metrics and trends. The layout should be clean, modern, and easy to navigate, with clear headings, concise labels, and prominent use of data visualization elements.",
      "html": "<div className=\"max-w-7xl mx-auto py-6 px-4\">\n  <DashboardHeader />\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <MetricCard><MetricCard/>\n    <MetricCard><MetricCard/>\n    <MetricCard><MetricCard/>\n  </div>\n  <TrendChart />\n  <FilterBar />\n  <DataGrid>\n    <!-- Data grid rows will be rendered here -->\n  </DataGrid>\n</div>\n",
      "components": [
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "Standalone component displaying the title and navigation for the dashboard.",
          "html": "<div className=\"flex justify-between mb-4\">  <h1 className=\"text-3xl font-bold\">{dashboard_title}</h1>  <nav>    <ul className=\"flex space-x-4\">      <li><a href=\"#\" className=\"text-gray-600\">{nav_item_1}</a></li>      <li><a href=\"#\" className=\"text-gray-600\">{nav_item_2}</a></li>    </ul>  </nav></div>"
        },
        {
          "name": "MetricCard",
          "is_standalone": false,
          "description": "Component that takes children, displaying a single key metric (e.g., \"Total Users\") with a value and optional visualization (e.g., chart, gauge).",
          "html": "<div className=\"bg-white shadow-md p-4\">  <h2 className=\"text-lg font-bold\">{metric_label}</h2>  <p className=\"text-3xl font-bold\">{metric_value}</p>  <!-- Optional visualization -->  <div className=\"h-48\">{children}</div></div>"
        },
        {
          "name": "TrendChart",
          "is_standalone": true,
          "description": "Standalone component rendering a line chart or area chart to illustrate trends over time.",
          "html": "<div className=\"bg-white shadow-md p-4\">  <h2 className=\"text-lg font-bold\">{chart_title}</h2>  <div className=\"h-96\">{chart_data}</div></div>"
        },
        {
          "name": "DataGrid",
          "is_standalone": false,
          "description": "Component that takes children, displaying a sortable, paginated table of data with customizable columns.",
          "html": "<table className=\"w-full\">  <thead>    <tr>      <th>{column_header_1}</th>      <th>{column_header_2}</th>      <th>{column_header_3}</th>    </tr>  </thead>  <tbody>    <!-- Data grid rows will be rendered here -->    {children}  </tbody></table>"
        },
        {
          "name": "FilterBar",
          "is_standalone": true,
          "description": "Standalone component providing filters and sorting options for the data grid.",
          "html": "<div className=\"flex justify-between mb-4\">  <select className=\"py-2 px-3 border border-gray-300\">    <option value=\"\">{filter_option_1}</option>    <option value=\"\">{filter_option_2}</option>  </select>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    {filter_button_label}  </button></div>"
        }
      ]
    }
  ],
  "Form Validation Feedback": [
    {
      "description": "The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.",
      "html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-red-100 rounded\">\n  <ValidationFeedback>\n    <ValidationError/>\n    <ValidationError/>\n  </ValidationFeedback>\n</div>\n",
      "components": [
        {
          "name": "ValidationError",
          "is_standalone": true,
          "description": "component (standalone) - displays a single error message",
          "html": "<p class=\"text-sm text-red-700\">{error_message}</p>"
        },
        {
          "name": "ValidationFeedback",
          "is_standalone": false,
          "description": "component (takes children) - container for one or more `ValidationError` components",
          "html": "<div class=\"space-y-2\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a form input field with an error message or success message below it, indicating the validation status of the input.",
      "html": "<div className=\"flex flex-col gap-2\">\n  <FormInput />\n  <ValidationFeedback>\n    <p>{validation_message}</p>\n  </ValidationFeedback>\n</div>\n",
      "components": [
        {
          "name": "FormInput",
          "is_standalone": true,
          "description": "A standalone component that represents a single form input field.",
          "html": "<input   type=\"text\"   className=\"w-full p-2 pl-10 text-sm text-gray-700\"   placeholder={input_placeholder} />"
        },
        {
          "name": "ValidationFeedback",
          "is_standalone": false,
          "description": "A component that takes children and displays the validation message (error or success).",
          "html": "<div   className={`text-xs ${validation_status === 'error' ? 'text-red-500' : 'text-green-500'}`}>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.",
      "html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-red-100 rounded\">\n  <ValidationFeedback>\n    <ValidationError/>\n    <ValidationError/>\n  </ValidationFeedback>\n</div>\n",
      "components": [
        {
          "name": "ValidationError",
          "is_standalone": true,
          "description": "component (standalone) - displays a single error message",
          "html": "<p class=\"text-sm text-red-700\">{error_message}</p>"
        },
        {
          "name": "ValidationFeedback",
          "is_standalone": false,
          "description": "component (takes children) - container for one or more `ValidationError` components",
          "html": "<div class=\"space-y-2\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.",
      "html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-red-100 rounded\">\n  <ValidationFeedback>\n    <ValidationError/>\n    <ValidationError/>\n  </ValidationFeedback>\n</div>\n",
      "components": [
        {
          "name": "ValidationError",
          "is_standalone": true,
          "description": "component (standalone) - displays a single error message",
          "html": "<p class=\"text-sm text-red-700\">{error_message}</p>"
        },
        {
          "name": "ValidationFeedback",
          "is_standalone": false,
          "description": "component (takes children) - container for one or more `ValidationError` components",
          "html": "<div class=\"space-y-2\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.",
      "html": "<div class=\"max-w-md mx-auto p-4 mb-4 bg-red-100 rounded\">\n  <ValidationFeedback>\n    <ValidationError/>\n    <ValidationError/>\n  </ValidationFeedback>\n</div>\n",
      "components": [
        {
          "name": "ValidationError",
          "is_standalone": true,
          "description": "component (standalone) - displays a single error message",
          "html": "<p class=\"text-sm text-red-700\">{error_message}</p>"
        },
        {
          "name": "ValidationFeedback",
          "is_standalone": false,
          "description": "component (takes children) - container for one or more `ValidationError` components",
          "html": "<div class=\"space-y-2\">  {children}</div>"
        }
      ]
    }
  ],
  "Loading Animations/Spinners": [
    {
      "description": "The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "A standalone component that displays a loading animation.",
          "html": "<div class=\"rounded-full border-2 border-gray-500 h-12 w-12 animate-spin\">  <div class=\"rounded-full border-2 border-gray-500 h-10 w-10 mx-auto\"></div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "A standalone component that displays a loading animation.",
          "html": "<div class=\"rounded-full border-2 border-gray-500 h-12 w-12 animate-spin\">  <div class=\"rounded-full border-2 border-gray-500 h-10 w-10 mx-auto\"></div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "A standalone component that displays a loading animation.",
          "html": "<div class=\"rounded-full border-2 border-gray-500 h-12 w-12 animate-spin\">  <div class=\"rounded-full border-2 border-gray-500 h-10 w-10 mx-auto\"></div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex justify-center\">\n  <LoadingSpinner />\n</div>\n",
      "components": [
        {
          "name": "LoadingSpinner",
          "is_standalone": true,
          "description": "A standalone component that displays a loading animation.",
          "html": "<div class=\"rounded-full border-2 border-gray-500 h-12 w-12 animate-spin\">  <div class=\"rounded-full border-2 border-gray-500 h-10 w-10 mx-auto\"></div></div>"
        }
      ]
    }
  ],
  "Voice Command/Audio Feedback": [
    {
      "description": "The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AudioIndicator />\n  <AudioFeedback />\n</div>\n",
      "components": [
        {
          "name": "AudioIndicator",
          "is_standalone": true,
          "description": "A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.",
          "html": "<div class=\"h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}\" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' -->  <div class=\"h-4 w-4 bg-white rounded-full mx-auto mt-2\" <!-- inner circle -->  </div></div>"
        },
        {
          "name": "AudioFeedback",
          "is_standalone": true,
          "description": "A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.",
          "html": "<div class=\"w-full h-4 bg-gray-200 rounded-lg overflow-hidden\">  <div class=\"h-4 bg-blue-500 rounded-lg\" style=\"width: {audio_feedback_width}%\" <!-- audio_feedback_width is a value between 0 and 100 -->  </div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a microphone icon and a circle that represents the audio feedback. The microphone icon should be surrounded by a circle that changes color based on the audio feedback level. The UI should also display a text that indicates the audio feedback level.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <div class=\"relative\">\n    <MicrophoneIcon />\n    <AudioFeedbackCircle />\n  </div>\n  <AudioFeedbackText />\n</div>\n",
      "components": [
        {
          "name": "MicrophoneIcon",
          "is_standalone": true,
          "description": "A standalone component that displays a microphone icon.",
          "html": "<i class=\"fas fa-microphone text-lg text-gray-500\" />"
        },
        {
          "name": "AudioFeedbackCircle",
          "is_standalone": true,
          "description": "A standalone component that displays a circle that changes color based on the audio feedback level.",
          "html": "<div class={`w-12 h-12 bg-${audio_feedback_level_color} rounded-full`} />"
        },
        {
          "name": "AudioFeedbackText",
          "is_standalone": true,
          "description": "A standalone component that displays the audio feedback level.",
          "html": "<p class=\"text-sm text-gray-500\">{audio_feedback_level_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AudioIndicator />\n  <AudioFeedback />\n</div>\n",
      "components": [
        {
          "name": "AudioIndicator",
          "is_standalone": true,
          "description": "A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.",
          "html": "<div class=\"h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}\" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' -->  <div class=\"h-4 w-4 bg-white rounded-full mx-auto mt-2\" <!-- inner circle -->  </div></div>"
        },
        {
          "name": "AudioFeedback",
          "is_standalone": true,
          "description": "A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.",
          "html": "<div class=\"w-full h-4 bg-gray-200 rounded-lg overflow-hidden\">  <div class=\"h-4 bg-blue-500 rounded-lg\" style=\"width: {audio_feedback_width}%\" <!-- audio_feedback_width is a value between 0 and 100 -->  </div></div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple audio feedback component that visually indicates when the voice command is listening and provides a visual cue for audio feedback.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <AudioIndicator />\n  <AudioFeedback />\n</div>\n",
      "components": [
        {
          "name": "AudioIndicator",
          "is_standalone": true,
          "description": "A standalone component that indicates when the voice command is listening. It will be a circle that changes color to indicate when the voice command is active.",
          "html": "<div class=\"h-8 w-8 bg-gray-200 rounded-full {audio_indicator_state}\" <!-- audio_indicator_state will be 'bg-green-500' when listening, otherwise 'bg-gray-200' -->  <div class=\"h-4 w-4 bg-white rounded-full mx-auto mt-2\" <!-- inner circle -->  </div></div>"
        },
        {
          "name": "AudioFeedback",
          "is_standalone": true,
          "description": "A standalone component that provides a visual cue for audio feedback. It will display a waveform or a similar visual representation of the audio input.",
          "html": "<div class=\"w-full h-4 bg-gray-200 rounded-lg overflow-hidden\">  <div class=\"h-4 bg-blue-500 rounded-lg\" style=\"width: {audio_feedback_width}%\" <!-- audio_feedback_width is a value between 0 and 100 -->  </div></div>"
        }
      ]
    }
  ],
  "Forum Categories and Subforums": [
    {
      "description": "The UI should display a list of forum categories, each containing a title and a list of subforums. Each subforum should also display a title and a brief description.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <h1 className=\"text-3xl font-bold mb-4\">Forum Categories</h1>\n  <ul>\n    <ForumCategory />\n    <ForumCategory />\n    <!-- Add more ForumCategory components here -->\n  </ul>\n</div>\n",
      "components": [
        {
          "name": "ForumCategory",
          "is_standalone": true,
          "description": "standalone component that displays a category title and a list of subforums.",
          "html": "<li className=\"py-2\">  <h2 className=\"text-lg font-bold\">{category_title}</h2>  <ul>    <Subforum />    <Subforum />    <!-- Add more Subforum components here -->  </ul></li>"
        },
        {
          "name": "Subforum",
          "is_standalone": true,
          "description": "standalone component that displays a subforum title and description.",
          "html": "<li className=\"py-2\">  <h3 className=\"text-md font-bold\">{subforum_title}</h3>  <p>{subforum_description}</p></li>"
        }
      ]
    }
  ],
  "Post Text Editor: Input field for writing a new post": [
    {
      "description": "A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TextInput />\n</div>\n",
      "components": [
        {
          "name": "TextInput",
          "is_standalone": true,
          "description": "(standalone): A simple text input field with a label and minimal styling.",
          "html": "<div class=\"flex flex-col mb-4\">  <label class=\"text-sm text-gray-600\" for=\"post-input\">Write a new post:</label>  <input id=\"post-input\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" type=\"text\" placeholder=\"Start typing...\" /></div>"
        }
      ]
    },
    {
      "description": "A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TextInput />\n</div>\n",
      "components": [
        {
          "name": "TextInput",
          "is_standalone": true,
          "description": "(standalone): A simple text input field with a label and minimal styling.",
          "html": "<div class=\"flex flex-col mb-4\">  <label class=\"text-sm text-gray-600\" for=\"post-input\">Write a new post:</label>  <input id=\"post-input\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" type=\"text\" placeholder=\"Start typing...\" /></div>"
        }
      ]
    },
    {
      "description": "A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <TextInput />\n</div>\n",
      "components": [
        {
          "name": "TextInput",
          "is_standalone": true,
          "description": "(standalone): A simple text input field with a label and minimal styling.",
          "html": "<div class=\"flex flex-col mb-4\">  <label class=\"text-sm text-gray-600\" for=\"post-input\">Write a new post:</label>  <input id=\"post-input\" class=\"w-full p-2 pl-10 text-sm text-gray-700\" type=\"text\" placeholder=\"Start typing...\" /></div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple text input field with a placeholder for writing a new post. It should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-col w-full p-4 md:p-6 lg:p-8\">\n  <PostEditor />\n</div>\n",
      "components": [
        {
          "name": "PostEditor",
          "is_standalone": true,
          "description": "A standalone component that contains the text input field.",
          "html": "<div class=\"flex flex-col w-full\">  <InputField /></div>"
        },
        {
          "name": "InputField",
          "is_standalone": true,
          "description": "A standalone component that represents the text input field.",
          "html": "<textarea  class=\"w-full p-2 pl-4 pr-4 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"  placeholder=\"Write a new post...\"  rows=\"5\"></textarea>"
        }
      ]
    }
  ],
  "Search Bar and Filters": [
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and filter the results by different criteria. The search bar should be responsive and mobile-friendly, with the filters hidden on smaller screens and revealed on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n  <FilterButton/>\n  <FilterMenu>\n    <!-- filter options will be inserted here -->\n  </FilterMenu>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - A input field where users can type their search queries.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "(standalone) - A button that toggles the visibility of the filters.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Filters</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "(takes children) - A dropdown menu containing the filter options.",
          "html": "<div class=\"absolute bg-white shadow-md p-2\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option within the FilterMenu.",
          "html": "<button class=\"block w-full p-2 hover:bg-gray-200\">{filter_label}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SearchAndFilters>\n    <SearchBar />\n    <FilterMenu>\n      <FilterButton />\n      <!-- more FilterButton components here -->\n    </FilterMenu>\n  </SearchAndFilters>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "Standalone component for the search input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full py-2 px-4 border-2 border-gray-200 rounded-lg\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "Standalone component for each filter button.",
          "html": "<button   class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filter_name}</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "Component that wraps all filter buttons, takes children.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "SearchAndFilters",
          "is_standalone": false,
          "description": "Component that wraps the search bar and filter menu, takes children.",
          "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive search bar with filters above a results list. The search bar should be placed on top of a rectangular box with a subtle shadow. The filters should be represented as buttons that toggle on and off when clicked.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded-lg shadow-md\">\n  <Filters>\n    <FilterButton>Filter 1</FilterButton>\n    <FilterButton>Filter 2</FilterButton>\n    <FilterButton>Filter 3</FilterButton>\n  </Filters>\n  <SearchBar />\n  <!-- results list will go here -->\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input  type=\"search\"  class=\"w-full pl-4 pr-10 py-2 text-sm text-gray-700\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button  class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filterLabel}</button>"
        },
        {
          "name": "Filters",
          "is_standalone": false,
          "description": "takes children (FilterButton components)",
          "html": "<div class=\"flex mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should consist of a search bar with a text input field, a search button, and filters (e.g., dropdowns or checkboxes) to narrow down the search results.",
      "html": "<div className=\"flex flex-col\">\n  <SearchBar/>\n  <FilterRow>\n    <FilterOption/>\n    <FilterOption/>\n    <!-- Add more FilterOption components as needed -->\n  </FilterRow>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component that contains a text input field and a search button.",
          "html": "<div className=\"flex items-center bg-white rounded-md shadow-md p-2\">  <SearchInput/>  <SearchButton/></div>"
        },
        {
          "name": "SearchInput",
          "is_standalone": true,
          "description": "standalone component that is a text input field.",
          "html": "<input type=\"text\" className=\"border border-gray-200 p-2 w-full\" placeholder=\"Search...\"/>"
        },
        {
          "name": "SearchButton",
          "is_standalone": true,
          "description": "standalone component that is a button.",
          "html": "<button className=\"bg-orange-500 text-white p-2 rounded-md\">  Search</button>"
        },
        {
          "name": "FilterRow",
          "is_standalone": false,
          "description": "component that takes children, which will be filter options (e.g., dropdowns or checkboxes).",
          "html": "<div className=\"flex flex-wrap justify-between\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "standalone component that represents a single filter option (e.g., a dropdown item or checkbox).",
          "html": "<div className=\"mr-2 mb-2\">  <select className=\"border border-gray-200 p-2 w-full\">    <option value={option_value}>{option_label}</option>  </select></div>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and filter the results by different criteria. The search bar should be responsive and mobile-friendly, with the filters hidden on smaller screens and revealed on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n  <FilterButton/>\n  <FilterMenu>\n    <!-- filter options will be inserted here -->\n  </FilterMenu>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - A input field where users can type their search queries.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "(standalone) - A button that toggles the visibility of the filters.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Filters</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "(takes children) - A dropdown menu containing the filter options.",
          "html": "<div class=\"absolute bg-white shadow-md p-2\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option within the FilterMenu.",
          "html": "<button class=\"block w-full p-2 hover:bg-gray-200\">{filter_label}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SearchAndFilters>\n    <SearchBar />\n    <FilterMenu>\n      <FilterButton />\n      <!-- more FilterButton components here -->\n    </FilterMenu>\n  </SearchAndFilters>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "Standalone component for the search input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full py-2 px-4 border-2 border-gray-200 rounded-lg\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "Standalone component for each filter button.",
          "html": "<button   class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filter_name}</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "Component that wraps all filter buttons, takes children.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "SearchAndFilters",
          "is_standalone": false,
          "description": "Component that wraps the search bar and filter menu, takes children.",
          "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive search bar with filters above a results list. The search bar should be placed on top of a rectangular box with a subtle shadow. The filters should be represented as buttons that toggle on and off when clicked.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded-lg shadow-md\">\n  <Filters>\n    <FilterButton>Filter 1</FilterButton>\n    <FilterButton>Filter 2</FilterButton>\n    <FilterButton>Filter 3</FilterButton>\n  </Filters>\n  <SearchBar />\n  <!-- results list will go here -->\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input  type=\"search\"  class=\"w-full pl-4 pr-10 py-2 text-sm text-gray-700\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button  class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filterLabel}</button>"
        },
        {
          "name": "Filters",
          "is_standalone": false,
          "description": "takes children (FilterButton components)",
          "html": "<div class=\"flex mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and filter the results by different criteria. The search bar should be responsive and mobile-friendly, with the filters hidden on smaller screens and revealed on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n  <FilterButton/>\n  <FilterMenu>\n    <!-- filter options will be inserted here -->\n  </FilterMenu>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - A input field where users can type their search queries.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "(standalone) - A button that toggles the visibility of the filters.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Filters</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "(takes children) - A dropdown menu containing the filter options.",
          "html": "<div class=\"absolute bg-white shadow-md p-2\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option within the FilterMenu.",
          "html": "<button class=\"block w-full p-2 hover:bg-gray-200\">{filter_label}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SearchAndFilters>\n    <SearchBar />\n    <FilterMenu>\n      <FilterButton />\n      <!-- more FilterButton components here -->\n    </FilterMenu>\n  </SearchAndFilters>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "Standalone component for the search input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full py-2 px-4 border-2 border-gray-200 rounded-lg\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "Standalone component for each filter button.",
          "html": "<button   class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filter_name}</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "Component that wraps all filter buttons, takes children.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "SearchAndFilters",
          "is_standalone": false,
          "description": "Component that wraps the search bar and filter menu, takes children.",
          "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive search bar with filters above a results list. The search bar should be placed on top of a rectangular box with a subtle shadow. The filters should be represented as buttons that toggle on and off when clicked.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded-lg shadow-md\">\n  <Filters>\n    <FilterButton>Filter 1</FilterButton>\n    <FilterButton>Filter 2</FilterButton>\n    <FilterButton>Filter 3</FilterButton>\n  </Filters>\n  <SearchBar />\n  <!-- results list will go here -->\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input  type=\"search\"  class=\"w-full pl-4 pr-10 py-2 text-sm text-gray-700\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button  class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filterLabel}</button>"
        },
        {
          "name": "Filters",
          "is_standalone": false,
          "description": "takes children (FilterButton components)",
          "html": "<div class=\"flex mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and filter the results by different criteria. The search bar should be responsive and mobile-friendly, with the filters hidden on smaller screens and revealed on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n  <FilterButton/>\n  <FilterMenu>\n    <!-- filter options will be inserted here -->\n  </FilterMenu>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - A input field where users can type their search queries.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "(standalone) - A button that toggles the visibility of the filters.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Filters</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "(takes children) - A dropdown menu containing the filter options.",
          "html": "<div class=\"absolute bg-white shadow-md p-2\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option within the FilterMenu.",
          "html": "<button class=\"block w-full p-2 hover:bg-gray-200\">{filter_label}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and filter the results by different criteria. The search bar should be responsive and mobile-friendly, with the filters hidden on smaller screens and revealed on larger screens.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar/>\n  <FilterButton/>\n  <FilterMenu>\n    <!-- filter options will be inserted here -->\n  </FilterMenu>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - A input field where users can type their search queries.",
          "html": "<input type=\"search\" class=\"w-full p-2 pl-10 text-sm\" placeholder=\"Search...\" />"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "(standalone) - A button that toggles the visibility of the filters.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Filters</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "(takes children) - A dropdown menu containing the filter options.",
          "html": "<div class=\"absolute bg-white shadow-md p-2\">  {children}</div>"
        },
        {
          "name": "FilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option within the FilterMenu.",
          "html": "<button class=\"block w-full p-2 hover:bg-gray-200\">{filter_label}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a search bar with filters, allowing users to search for specific items and apply filters to narrow down the results. The search bar should be prominent and centered, with filters displayed below it.",
      "html": "<div class=\"container mx-auto p-4\">\n  <SearchAndFilters>\n    <SearchBar />\n    <FilterMenu>\n      <FilterButton />\n      <!-- more FilterButton components here -->\n    </FilterMenu>\n  </SearchAndFilters>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "Standalone component for the search input field.",
          "html": "<input   type=\"search\"   id=\"search-input\"   class=\"w-full py-2 px-4 border-2 border-gray-200 rounded-lg\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "Standalone component for each filter button.",
          "html": "<button   class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filter_name}</button>"
        },
        {
          "name": "FilterMenu",
          "is_standalone": false,
          "description": "Component that wraps all filter buttons, takes children.",
          "html": "<div class=\"flex flex-wrap justify-center\">  {children}</div>"
        },
        {
          "name": "SearchAndFilters",
          "is_standalone": false,
          "description": "Component that wraps the search bar and filter menu, takes children.",
          "html": "<div class=\"flex flex-col items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive search bar with filters above a results list. The search bar should be placed on top of a rectangular box with a subtle shadow. The filters should be represented as buttons that toggle on and off when clicked.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded-lg shadow-md\">\n  <Filters>\n    <FilterButton>Filter 1</FilterButton>\n    <FilterButton>Filter 2</FilterButton>\n    <FilterButton>Filter 3</FilterButton>\n  </Filters>\n  <SearchBar />\n  <!-- results list will go here -->\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<input  type=\"search\"  class=\"w-full pl-4 pr-10 py-2 text-sm text-gray-700\"  placeholder=\"Search...\"/>"
        },
        {
          "name": "FilterButton",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button  class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {filterLabel}</button>"
        },
        {
          "name": "Filters",
          "is_standalone": false,
          "description": "takes children (FilterButton components)",
          "html": "<div class=\"flex mb-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have a search bar with a text input field and a search button. Below the search bar, there should be a filter section with checkboxes and labels. The filter section should be collapsible. The UI should be responsive and mobile-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <SearchBar />\n  <FilterSection>\n    <FilterItem />\n    <FilterItem />\n    <FilterItem />\n  </FilterSection>\n</div>\n",
      "components": [
        {
          "name": "SearchBar",
          "is_standalone": true,
          "description": "(standalone) - a text input field and a search button.",
          "html": "<div class=\"flex mb-4\">  <input type=\"text\" class=\"w-full px-2 py-1 border border-gray-200 rounded\" />  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded\">Search</button></div>"
        },
        {
          "name": "FilterSection",
          "is_standalone": false,
          "description": "(takes children) - a collapsible section containing filter checkboxes and labels.",
          "html": "<div class=\"bg-white shadow-md p-2 mb-4\">  <h5 class=\"mb-2\">{filterInSectionTitle}</h5>  <div class=\"flex flex-wrap\">    {children}  </div></div>"
        },
        {
          "name": "FilterItem",
          "is_standalone": true,
          "description": "(standalone) - a single filter checkbox and label.",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" id=\"{filterItemId}\" class=\"mr-2\" />  <label for=\"{filterItemId}\" class=\"text-sm\">{filterItemLabel}</label></div>"
        }
      ]
    }
  ],
  "Features Grid: Highlight key benefits in a grid layout": [
    {
      "description": "A responsive grid layout with 3-4 columns, showcasing key benefits of a product or service. Each grid item should have an icon, a heading, and a brief description.",
      "html": "<section class=\"container mx-auto p-4 lg:p-8\">\n  <FeaturesGrid>\n    <FeatureItem/>\n    <FeatureItem/>\n    <FeatureItem/>\n    <!-- Add more FeatureItem components as needed -->\n  </FeaturesGrid>\n</section>\n",
      "components": [
        {
          "name": "FeatureItem",
          "is_standalone": true,
          "description": "(standalone): A single feature item in the grid, containing an icon, heading, and description.",
          "html": "<div class=\"flex flex-col items-center p-4 lg:p-6\">  <i class=\"text-3xl {icon_class} mb-4\" /> <!-- icon -->  <h3 class=\"text-lg font-bold\">{heading}</h3>  <p class=\"text-gray-600\">{description}</p></div>"
        },
        {
          "name": "FeaturesGrid",
          "is_standalone": false,
          "description": "(takes children): The container element for the feature items, managing the grid layout.",
          "html": "<div class=\"grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8\">  {children}</div>"
        }
      ]
    }
  ],
  "Product Image Gallery: Showcase your product from multiple angles": [
    {
      "description": "The UI should display a product image gallery with multiple images showcasing the product from different angles. The gallery should be responsive, accessible, and SEO-friendly. On mobile devices, the gallery should be swipeable, and on desktop devices, it should have navigation arrows.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProductImageGallery>\n    <ProductImage src={image1} />\n    <ProductImage src={image2} />\n    <ProductImage src={image3} />\n    <NavigationArrow direction=\"prev\" />\n    <NavigationArrow direction=\"next\" />\n  </ProductImageGallery>\n</div>\n",
      "components": [
        {
          "name": "ProductImageGallery",
          "is_standalone": false,
          "description": "The main component that contains the image gallery. This component takes children.",
          "html": "<div class=\"flex justify-center\">  <div class=\"flex overflow-x-scroll snap-x\">    {children}  </div>  <div class=\"flex justify-between mt-2\">    <NavigationArrow direction=\"prev\" />    <NavigationArrow direction=\"next\" />  </div></div>"
        },
        {
          "name": "ProductImage",
          "is_standalone": true,
          "description": "A single image in the gallery. This component is standalone.",
          "html": "<img src={src} alt={alt} class=\"w-full h-64 object-cover rounded-md\" />"
        },
        {
          "name": "NavigationArrow",
          "is_standalone": true,
          "description": "An arrow button for navigating through the images. This component is standalone.",
          "html": "<button class={`text-gray-500 hover:text-gray-800 ${direction === 'prev' ? 'mr-2' : 'ml-2'}`}>  <i class=\"fas fa-arrow-${direction}\"></i></button>"
        }
      ]
    }
  ],
  "Destination and Hotel Cards": [
    {
      "description": "The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CardGrid>\n    <DestinationCard />\n    <DestinationCard />\n    <HotelCard />\n    <HotelCard />\n  </CardGrid>\n</div>\n",
      "components": [
        {
          "name": "DestinationCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a destination.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={destination_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{destination_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "HotelCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a hotel.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={hotel_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{hotel_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "CardGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays them in a grid layout.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a list of destination cards, each containing a hotel card. The destination cards should have a background image, a title, and a description. The hotel cards should have a hotel name, a rating, and a price.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <DestinationList>\n    <DestinationCard />\n    <DestinationCard />\n    <DestinationCard />\n  </DestinationList>\n</div>\n",
      "components": [
        {
          "name": "DestinationCard",
          "is_standalone": true,
          "description": "(standalone) - A card displaying a destination's information",
          "html": "<div className=\"bg-cover bg-center h-64 mb-4\" style={{ backgroundImage: `url(${image_url})` }}>  <div className=\"bg-white p-4 pt-6\">    <h2 className=\"text-lg\">{destination_name}</h2>    <p>{destination_description}</p>    <HotelCard />  </div></div>"
        },
        {
          "name": "HotelCard",
          "is_standalone": true,
          "description": "(standalone) - A card displaying a hotel's information",
          "html": "<div className=\"bg-white p-4 mb-4\">  <h3 className=\"text-md\">{hotel_name}</h3>  <p>Rating: {hotel_rating}/5</p>  <p>Price: {hotel_price}/night</p></div>"
        },
        {
          "name": "DestinationList",
          "is_standalone": false,
          "description": "(takes children) - A container for a list of destination cards",
          "html": "<div className=\"flex flex-wrap justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CardGrid>\n    <DestinationCard />\n    <DestinationCard />\n    <HotelCard />\n    <HotelCard />\n  </CardGrid>\n</div>\n",
      "components": [
        {
          "name": "DestinationCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a destination.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={destination_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{destination_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "HotelCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a hotel.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={hotel_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{hotel_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "CardGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays them in a grid layout.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CardGrid>\n    <DestinationCard />\n    <DestinationCard />\n    <HotelCard />\n    <HotelCard />\n  </CardGrid>\n</div>\n",
      "components": [
        {
          "name": "DestinationCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a destination.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={destination_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{destination_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "HotelCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a hotel.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={hotel_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{hotel_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "CardGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays them in a grid layout.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"container mx-auto p-4\">\n  <CardGrid>\n    <DestinationCard />\n    <DestinationCard />\n    <HotelCard />\n    <HotelCard />\n  </CardGrid>\n</div>\n",
      "components": [
        {
          "name": "DestinationCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a destination.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={destination_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{destination_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "HotelCard",
          "is_standalone": true,
          "description": "A standalone component that displays information about a hotel.",
          "html": "<div class=\"bg-white rounded overflow-hidden shadow-md\">  <img src={image_url} alt={hotel_name} class=\"w-full h-48 object-cover\" />  <div class=\"p-4\">    <h3 class=\"text-lg font-bold\">{hotel_name}</h3>    <p>{description}</p>  </div>  <div class=\"p-4 bg-gray-100\">    <p>{price} per night</p>  </div></div>"
        },
        {
          "name": "CardGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays them in a grid layout.",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Integrations Hub: Connect third-party apps": [
    {
      "description": "The UI should be a card-based layout that displays a list of integrations. Each card should have a logo of the third-party app, a brief description, and a Connect button. The layout should be responsive, with the cards stacking vertically on mobile devices and displaying in a grid on larger screens.",
      "html": "<section class=\"container mx-auto p-4 pt-6 pb-10\">\n  <h1 class=\"text-3xl font-bold mb-4\">Integrations Hub</h1>\n  <IntegrationsList>\n    <IntegrationCard />\n    <IntegrationCard />\n    <!-- Repeat IntegrationCard components for each integration -->\n  </IntegrationsList>\n</section>\n",
      "components": [
        {
          "name": "IntegrationCard",
          "is_standalone": true,
          "description": "A standalone component that represents a single integration.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4 hover:shadow-lg\">  <div class=\"flex items-center mb-2\">    <img src=\"{integration_logo_url}\" alt=\"{integration_name}\" class=\"w-8 h-8 mr-2\" />    <h2 class=\"text-lg font-bold\">{integration_name}</h2>  </div>  <p class=\"text-gray-600\">{integration_description}</p>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Connect</button></div>"
        },
        {
          "name": "IntegrationsList",
          "is_standalone": false,
          "description": "A component that takes children (IntegrationCard components) and displays them in a responsive grid.",
          "html": "<ul class=\"flex flex-wrap justify-center mb-4\">  {children}</ul>"
        }
      ]
    }
  ],
  "News Ticker/Marquee": [
    {
      "description": "The UI should display a horizontal scrolling marquee of news headlines with a black background and white text.",
      "html": "<div class=\"h-screen w-full bg-black\">\n  <NewsTicker/>\n</div>\n",
      "components": [
        {
          "name": "NewsTicker",
          "is_standalone": true,
          "description": "standalone component that wraps the entire marquee.",
          "html": "<div class=\"flex overflow-x-hidden\">  { /* Loop through news items */ }  <MarqueeItem> {marquee_item_text} </MarqueeItem>  { /* End loop */ }</div>"
        },
        {
          "name": "MarqueeItem",
          "is_standalone": true,
          "description": "standalone component that represents a single news headline.",
          "html": "<div class=\"px-4 py-2 text-white\">  {marquee_item_text}</div>"
        }
      ]
    }
  ],
  "Reply button to respond to tweets": [
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "The UI should be a small button with a reply icon and the text \"Reply\". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.",
      "html": "<button><ReplyButton/></button>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button   class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\">  <i class=\"fas fa-reply mr-2\"></i> Reply</button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    },
    {
      "description": "The UI should be a small button with a reply icon and the text \"Reply\". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.",
      "html": "<button><ReplyButton/></button>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button   class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\">  <i class=\"fas fa-reply mr-2\"></i> Reply</button>"
        }
      ]
    },
    {
      "description": "A small reply button that appears when hovering over a tweet, with a white reply icon on a blue background.",
      "html": "<div class=\"flex justify-end\">\n  <ReplyButton />\n</div>\n",
      "components": [
        {
          "name": "ReplyButton",
          "is_standalone": true,
          "description": "- Standalone",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-reply\" aria-hidden=\"true\"></i>  <!-- Button text for screen readers -->  <span class=\"sr-only\">Reply</span></button>"
        }
      ]
    }
  ],
  "Hover Effects/Animations": [
    {
      "description": "The UI should display a box that changes its background color and text color when hovered over, along with a scaling effect.",
      "html": "<div class=\"flex justify-center h-screen\">\n  <HoverEffectBox/>\n</div>\n",
      "components": [
        {
          "name": "HoverEffectBox",
          "is_standalone": true,
          "description": "A standalone component that displays a box with hover effects.",
          "html": "<div  class=\"bg-orange-300 hover:bg-orange-500 transition duration-300 ease-in-out p-10 rounded-md cursor-pointer hover:scale-110\">  <p class=\"text-lg text-orange-800 hover:text-white\">{hover_text}</p></div>"
        }
      ]
    }
  ],
  "User Profile Card: Compact user info and profile link": [
    {
      "description": "A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.",
      "html": "<div class=\"bg-white rounded-md shadow-md p-4\">\n  <UserProfileCard/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that contains all the user profile information.",
          "html": "<div class=\"flex items-center mb-2\">  <ProfilePicture/>  <div class=\"ml-4\">    <Username/>    <ProfileLink/>  </div></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture.",
          "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full object-cover object-top\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name.",
          "html": "<h2 class=\"text-lg font-bold\">{username}</h2>"
        },
        {
          "name": "ProfileLink",
          "is_standalone": true,
          "description": "A standalone component that displays a link to the user's profile page.",
          "html": "<a href={profile_url} class=\"text-blue-600 hover:text-blue-900\">View Profile</a>"
        }
      ]
    },
    {
      "description": "The UI should be a compact user profile card that displays the user's profile picture, name, and a link to their profile.",
      "html": "<div class=\"bg-white rounded shadow-md p-4\">\n  <UserProfileCard/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "Standalone component that contains the user's profile information.",
          "html": "<div class=\"flex items-center\">  <ProfilePicture/>  <div class=\"ml-4\">    <p class=\"text-lg\">{userName}</p>    <ProfileLink/>  </div></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "Standalone component that displays the user's profile picture.",
          "html": "<img src={profilePictureUrl} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full object-cover\" />"
        },
        {
          "name": "ProfileLink",
          "is_standalone": true,
          "description": "Standalone component that links to the user's profile.",
          "html": "<a href={profileUrl} class=\"text-blue-600 hover:text-blue-400\">View Profile</a>"
        }
      ]
    },
    {
      "description": "A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.",
      "html": "<div class=\"bg-white rounded-md shadow-md p-4\">\n  <UserProfileCard/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that contains all the user profile information.",
          "html": "<div class=\"flex items-center mb-2\">  <ProfilePicture/>  <div class=\"ml-4\">    <Username/>    <ProfileLink/>  </div></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture.",
          "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full object-cover object-top\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name.",
          "html": "<h2 class=\"text-lg font-bold\">{username}</h2>"
        },
        {
          "name": "ProfileLink",
          "is_standalone": true,
          "description": "A standalone component that displays a link to the user's profile page.",
          "html": "<a href={profile_url} class=\"text-blue-600 hover:text-blue-900\">View Profile</a>"
        }
      ]
    },
    {
      "description": "A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.",
      "html": "<div class=\"bg-white rounded-md shadow-md p-4\">\n  <UserProfileCard/>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that contains all the user profile information.",
          "html": "<div class=\"flex items-center mb-2\">  <ProfilePicture/>  <div class=\"ml-4\">    <Username/>    <ProfileLink/>  </div></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile picture.",
          "html": "<img src={profile_picture_url} alt=\"Profile Picture\" class=\"w-12 h-12 rounded-full object-cover object-top\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "A standalone component that displays the user's name.",
          "html": "<h2 class=\"text-lg font-bold\">{username}</h2>"
        },
        {
          "name": "ProfileLink",
          "is_standalone": true,
          "description": "A standalone component that displays a link to the user's profile page.",
          "html": "<a href={profile_url} class=\"text-blue-600 hover:text-blue-900\">View Profile</a>"
        }
      ]
    }
  ],
  "Customer review and rating summaries": [
    {
      "description": "The UI should display a summary of customer reviews and ratings, showing the average rating, total number of reviews, and a breakdown of the rating distribution (e.g., 5-star, 4-star, 3-star, etc.).",
      "html": "<div className=\"flex flex-col gap-4\">\n  <ReviewSummary />\n  <RatingBreakdown />\n</div>\n",
      "components": [
        {
          "name": "ReviewSummary",
          "is_standalone": true,
          "description": "a standalone component displaying the review summary.",
          "html": "<div className=\"flex items-center gap-2\">  <p>Average rating: <span className=\"font-bold\">{average_rating}/5</span></p>  <p>{total_reviews} reviews</p></div>"
        },
        {
          "name": "RatingBreakdown",
          "is_standalone": true,
          "description": "a standalone component displaying the rating breakdown.",
          "html": "<dl className=\"flex flex-wrap gap-4\">  <dt>5-star:</dt>  <dd>{five_star_count}</dd>  <dt>4-star:</dt>  <dd>{four_star_count}</dd>  <dt>3-star:</dt>  <dd>{three_star_count}</dd>  <dt>2-star:</dt>  <dd>{two_star_count}</dd>  <dt>1-star:</dt>  <dd>{one_star_count}</dd></dl>"
        },
        {
          "name": "StarRating",
          "is_standalone": true,
          "description": "a standalone component displaying a single star rating.",
          "html": "<span className=\"text-lg\">  { Array(5).fill(0).map((_, i) => (    <i key={i} className={i < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733;</i>  ))}</span>"
        }
      ]
    },
    {
      "description": "The UI should display a summary of customer reviews, including the average rating and total number of reviews. It should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto py-4\">\n  <CustomerReviewSummary/>\n  <div class=\"flex justify-between mb-4\">\n    <RatingSummary/>\n    <ReviewCount/>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "CustomerReviewSummary",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"text-lg font-bold\">{average_rating} out of 5 stars</div>"
        },
        {
          "name": "RatingSummary",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<div class=\"flex items-center\">  <span class=\"text-yellow-500\">{rating_icon}</span>  <span class=\"ml-2\">{average_rating}</span></div>"
        },
        {
          "name": "ReviewCount",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<p>{review_count} reviews</p>"
        }
      ]
    }
  ],
  "Suggested products carousel": [
    {
      "description": "A horizontal carousel displaying multiple products with images, names, and prices. The carousel should be responsive and have navigation arrows on both sides.",
      "html": "<div class=\"flex justify-center\">\n  <CarouselNavigation />\n  <Carousel>\n    <ProductCard />\n    <ProductCard />\n    <ProductCard />\n    <!-- Add more ProductCard components here -->\n  </Carousel>\n  <CarouselNavigation />\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "(standalone): Displays a single product with image, name, and price.",
          "html": "<div class=\"bg-white shadow-md rounded\">  <img src=\"{image_url}\" alt=\"{product_name}\" class=\"w-full h-48 object-cover rounded-t\" />  <div class=\"p-4\">    <h5 class=\"text-lg\">{product_name}</h5>    <p class=\"text-gray-600\">{price}</p>  </div></div>"
        },
        {
          "name": "CarouselNavigation",
          "is_standalone": true,
          "description": "(standalone): Displays navigation arrows for the carousel.",
          "html": "<button class=\"bg-white border-none text-lg hover:text-gray-600 transition duration-300\">  {navigation_arrow}</button>"
        },
        {
          "name": "Carousel",
          "is_standalone": false,
          "description": "(takes children): Container for the carousel, holds multiple **ProductCard** components.",
          "html": "<div class=\"flex overflow-x-hidden\">  {children}</div>"
        }
      ]
    }
  ],
  "Product filtering and sorting controls": [
    {
      "description": "The UI should display a set of filtering and sorting controls for products, allowing users to narrow down their search results by category, price range, and rating. The controls should be responsive, accessible, and easy to use on various devices.",
      "html": "<div className=\"max-w-md mx-auto p-4\">\n  <FilterControls>\n    <FilterCategorySelect/>\n    <PriceRangeSlider/>\n    <RatingFilterButtons/>\n    <SortBySelect/>\n  </FilterControls>\n</div>\n",
      "components": [
        {
          "name": "FilterCategorySelect",
          "is_standalone": true,
          "description": "A standalone dropdown component for selecting a product category.",
          "html": "<select className=\"bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full\">  <option value=\"\">{category_placeholder}</option>  <!-- Option list will be populated dynamically --></select>"
        },
        {
          "name": "PriceRangeSlider",
          "is_standalone": true,
          "description": "A standalone component for selecting a price range.",
          "html": "<div className=\"flex items-center mb-4\">  <span className=\"mr-2\">Min: {min_price}</span>  <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" className=\"w-full\" />  <span className=\"ml-2\">Max: {max_price}</span></div>"
        },
        {
          "name": "RatingFilterButtons",
          "is_standalone": true,
          "description": "A standalone component for selecting a rating filter.",
          "html": "<div className=\"flex mb-4\">  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">4+</button>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">3+</button>  <button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full\">2+</button></div>"
        },
        {
          "name": "SortBySelect",
          "is_standalone": true,
          "description": "A standalone dropdown component for selecting a sorting option.",
          "html": "<select className=\"bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full\">  <option value=\"\">Sort by</option>  <option value=\"price_asc\">Price: Low to High</option>  <option value=\"price_desc\">Price: High to Low</option>  <option value=\"rating_desc\">Rating: High to Low</option></select>"
        },
        {
          "name": "FilterControls",
          "is_standalone": false,
          "description": "A container component that takes children ( FilterCategorySelect, PriceRangeSlider, RatingFilterButtons, and SortBySelect ).",
          "html": "<div className=\"flex flex-wrap justify-between mb-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Testimonial Slider: Showcase social proof from happy customers": [
    {
      "description": "The Testimonial Slider should display quotes from happy customers with their names and photos, enclosed in a container that can be navigated using previous and next buttons. The slider should be responsive, adapting to different screen sizes and devices.",
      "html": "<div class=\"container mx-auto p-4 lg:p-8\">\n  <TestimonialSlider>\n    <TestimonialItem />\n    <TestimonialItem />\n    <!-- Add more TestimonialItem components as needed -->\n  </TestimonialSlider>\n  <SliderNavigation />\n</div>\n",
      "components": [
        {
          "name": "TestimonialSlider",
          "is_standalone": false,
          "description": "A container component that wraps the entire slider, including navigation buttons and testimonial items. (Takes children: TestimonialItem)",
          "html": "<div class=\"flex flex-wrap justify-center mb-4\">  <div class=\"flex-1\">{children}</div>  <SliderNavigation /></div>"
        },
        {
          "name": "TestimonialItem",
          "is_standalone": true,
          "description": "A single testimonial item that displays a customer's quote, name, and photo. (Standalone)",
          "html": "<div class=\"flex flex-col mb-4\">  <img src=\"{photo_url}\" alt=\"{customer_name}\" class=\"rounded-full w-16 h-16 mb-2\" />  <p class=\"text-lg\">{quote}</p>  <p class=\"text-sm\">{customer_name}</p></div>"
        },
        {
          "name": "SliderNavigation",
          "is_standalone": true,
          "description": "A component that contains previous and next buttons for navigating the slider. (Standalone)",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Previous</button>  <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Next</button></div>"
        }
      ]
    }
  ],
  "Google Maps Embeds": [
    {
      "description": "The UI should be a responsive and accessible map embed that displays a location on a map.",
      "html": "<div className=\"max-w-md mx-auto mt-4\">\n  <MapEmbed latitude={latitude} longitude={longitude} zoom={zoom} />\n</div>\n",
      "components": [
        {
          "name": "MapEmbed",
          "is_standalone": true,
          "description": "a standalone component that displays a map embed.",
          "html": "<iframe  className=\"w-full h-64 md:h-96 lg:h-full rounded-lg\"  frameBorder=\"0\"  scrolling=\"no\"  marginHeight=\"0\"  marginWidth=\"0\"  src={`https://maps.google.com/maps?q={latitude},{longitude}&z={zoom}&output=embed`}  allowFullScreen/><MapMarker /><MapInfoWindow />"
        },
        {
          "name": "MapMarker",
          "is_standalone": true,
          "description": "a standalone component that displays a marker on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">  <div className=\"bg-red-500 p-1 rounded-full\">    <div className=\"w-2 h-2 bg-white rounded-full\" />  </div></div>"
        },
        {
          "name": "MapInfoWindow",
          "is_standalone": true,
          "description": "a standalone component that displays an info window on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-4 bg-white rounded-lg\">  <h5 className=\"text-lg\">{locationName}</h5>  <p className=\"text-sm\">{locationAddress}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should display a Google Maps embed with a search bar and a map container. The search bar should allow users to enter a location, and the map container should display the location on a Google Map.",
      "html": "<div className=\"h-screen w-full flex flex-col\">\n  <GoogleMapEmbed>\n    <MapSearchBar />\n    <MapContainer />\n  </GoogleMapEmbed>\n</div>\n",
      "components": [
        {
          "name": "MapSearchBar",
          "is_standalone": true,
          "description": "standalone component that renders a search input field and a search button.",
          "html": "<div className=\"p-4 flex justify-center\">  <input    type=\"search\"    placeholder=\"Enter a location\"    className=\"bg-white border border-gray-300 rounded-md py-2 pl-2 pr-4\"  />  <button    className=\"bg-orange-500 text-white px-4 py-2 rounded-md\"  >    Search  </button></div>"
        },
        {
          "name": "MapContainer",
          "is_standalone": true,
          "description": "standalone component that renders a container for the Google Map.",
          "html": "<div  className=\"h-full w-full\"  id=\"map\"  style={{ width: '100%', height: 'calc(100vh - 64px)' }}>  <!-- map will be rendered here --></div>"
        },
        {
          "name": "GoogleMapEmbed",
          "is_standalone": false,
          "description": "component that takes children, which wraps the `MapSearchBar` and `MapContainer` components.",
          "html": "<div className=\"h-full w-full flex flex-col\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive and accessible map embed that displays a location on a map.",
      "html": "<div className=\"max-w-md mx-auto mt-4\">\n  <MapEmbed latitude={latitude} longitude={longitude} zoom={zoom} />\n</div>\n",
      "components": [
        {
          "name": "MapEmbed",
          "is_standalone": true,
          "description": "a standalone component that displays a map embed.",
          "html": "<iframe  className=\"w-full h-64 md:h-96 lg:h-full rounded-lg\"  frameBorder=\"0\"  scrolling=\"no\"  marginHeight=\"0\"  marginWidth=\"0\"  src={`https://maps.google.com/maps?q={latitude},{longitude}&z={zoom}&output=embed`}  allowFullScreen/><MapMarker /><MapInfoWindow />"
        },
        {
          "name": "MapMarker",
          "is_standalone": true,
          "description": "a standalone component that displays a marker on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">  <div className=\"bg-red-500 p-1 rounded-full\">    <div className=\"w-2 h-2 bg-white rounded-full\" />  </div></div>"
        },
        {
          "name": "MapInfoWindow",
          "is_standalone": true,
          "description": "a standalone component that displays an info window on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-4 bg-white rounded-lg\">  <h5 className=\"text-lg\">{locationName}</h5>  <p className=\"text-sm\">{locationAddress}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive and accessible map embed that displays a location on a map.",
      "html": "<div className=\"max-w-md mx-auto mt-4\">\n  <MapEmbed latitude={latitude} longitude={longitude} zoom={zoom} />\n</div>\n",
      "components": [
        {
          "name": "MapEmbed",
          "is_standalone": true,
          "description": "a standalone component that displays a map embed.",
          "html": "<iframe  className=\"w-full h-64 md:h-96 lg:h-full rounded-lg\"  frameBorder=\"0\"  scrolling=\"no\"  marginHeight=\"0\"  marginWidth=\"0\"  src={`https://maps.google.com/maps?q={latitude},{longitude}&z={zoom}&output=embed`}  allowFullScreen/><MapMarker /><MapInfoWindow />"
        },
        {
          "name": "MapMarker",
          "is_standalone": true,
          "description": "a standalone component that displays a marker on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">  <div className=\"bg-red-500 p-1 rounded-full\">    <div className=\"w-2 h-2 bg-white rounded-full\" />  </div></div>"
        },
        {
          "name": "MapInfoWindow",
          "is_standalone": true,
          "description": "a standalone component that displays an info window on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-4 bg-white rounded-lg\">  <h5 className=\"text-lg\">{locationName}</h5>  <p className=\"text-sm\">{locationAddress}</p></div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive and accessible map embed that displays a location on a map.",
      "html": "<div className=\"max-w-md mx-auto mt-4\">\n  <MapEmbed latitude={latitude} longitude={longitude} zoom={zoom} />\n</div>\n",
      "components": [
        {
          "name": "MapEmbed",
          "is_standalone": true,
          "description": "a standalone component that displays a map embed.",
          "html": "<iframe  className=\"w-full h-64 md:h-96 lg:h-full rounded-lg\"  frameBorder=\"0\"  scrolling=\"no\"  marginHeight=\"0\"  marginWidth=\"0\"  src={`https://maps.google.com/maps?q={latitude},{longitude}&z={zoom}&output=embed`}  allowFullScreen/><MapMarker /><MapInfoWindow />"
        },
        {
          "name": "MapMarker",
          "is_standalone": true,
          "description": "a standalone component that displays a marker on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">  <div className=\"bg-red-500 p-1 rounded-full\">    <div className=\"w-2 h-2 bg-white rounded-full\" />  </div></div>"
        },
        {
          "name": "MapInfoWindow",
          "is_standalone": true,
          "description": "a standalone component that displays an info window on the map.",
          "html": "<div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-4 bg-white rounded-lg\">  <h5 className=\"text-lg\">{locationName}</h5>  <p className=\"text-sm\">{locationAddress}</p></div>"
        }
      ]
    }
  ],
  "Provider Profiles": [
    {
      "description": "The UI should display a list of provider profiles, showcasing their names, profiles pictures, specialties, and short descriptions. The layout should be responsive, with a card-based layout on desktop and a list view on mobile devices.",
      "html": "<section class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Our Providers</h2>\n  <ProviderList>\n    <ProviderProfileCard />\n    <ProviderProfileCard />\n    <!-- Add more ProviderProfileCard components here -->\n  </ProviderList>\n</section>\n",
      "components": [
        {
          "name": "ProviderProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single provider's profile information.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <ProfilePicture src=\"{profile_picture_url}\" alt=\"{provider_name}\" />  <h3 class=\"text-lg font-bold\">{provider_name}</h3>  <p class=\"text-gray-600\">{specialty}</p>  <p class=\"text-gray-600\">{short_description}</p></div>"
        },
        {
          "name": "ProfilePicture",
          "is_standalone": true,
          "description": "A standalone component that displays a provider's profile picture.",
          "html": "<img src=\"{src}\" alt=\"{alt}\" class=\"w-20 h-20 rounded-full mb-4\" />"
        },
        {
          "name": "ProviderList",
          "is_standalone": false,
          "description": "A component that takes children (ProviderProfileCard components) to display a list of provider profiles.",
          "html": "<ul class=\"flex flex-wrap justify-center sm:flex-nowrap\">  {children}</ul>"
        }
      ]
    }
  ],
  "Responsive Post Formatting": [
    {
      "description": "The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContainer>\n    <PostHeader />\n    <PostContent />\n    <PostActions />\n  </PostContainer>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the post's title and metadata.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-2xl font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_at} by {author_name}</p></header>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the post's content.",
          "html": "<div class=\"text-lg leading-relaxed mb-4\">{post_content}</div>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the post's action buttons (e.g., like, comment, share).",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Like  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Comment  </button>  <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">    Share  </button></div>"
        },
        {
          "name": "PostContainer",
          "is_standalone": false,
          "description": "(takes children): Wraps the entire post format.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post formatting, with a profile picture, username, post text, and actions (like, comment, share). The post should adapt to different screen sizes, with the profile picture and username on the same line on larger screens, and stacked on smaller screens.",
      "html": "<div class=\"flex flex-wrap md:flex-nowrap md:justify-start mb-4\">\n  <UserProfilePicture />\n  <div class=\"md:ml-4\">\n    <UserName />\n    <PostText />\n    <PostActions />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "Standalone component, displays the profile picture of the user who made the post.",
          "html": "<img src=\"{profile_picture_url}\" class=\"w-12 h-12 rounded-full\" />"
        },
        {
          "name": "UserName",
          "is_standalone": true,
          "description": "Standalone component, displays the username of the user who made the post.",
          "html": "<span class=\"text-lg\">{username}</span>"
        },
        {
          "name": "PostText",
          "is_standalone": true,
          "description": "Standalone component, displays the text of the post.",
          "html": "<p class=\"text-gray-600\">{post_text}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "Standalone component, displays the actions for the post (like, comment, share).",
          "html": "<div class=\"flex justify-evenly mt-2\">  <button class=\"text-gray-600\">{like_count} likes</button>  <button class=\"text-gray-600\">{comment_count} comments</button>  <button class=\"text-gray-600\">Share</button></div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContainer>\n    <PostHeader />\n    <PostContent />\n    <PostActions />\n  </PostContainer>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the post's title and metadata.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-2xl font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_at} by {author_name}</p></header>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the post's content.",
          "html": "<div class=\"text-lg leading-relaxed mb-4\">{post_content}</div>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the post's action buttons (e.g., like, comment, share).",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Like  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Comment  </button>  <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">    Share  </button></div>"
        },
        {
          "name": "PostContainer",
          "is_standalone": false,
          "description": "(takes children): Wraps the entire post format.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContainer>\n    <PostHeader />\n    <PostContent />\n    <PostActions />\n  </PostContainer>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the post's title and metadata.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-2xl font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_at} by {author_name}</p></header>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the post's content.",
          "html": "<div class=\"text-lg leading-relaxed mb-4\">{post_content}</div>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the post's action buttons (e.g., like, comment, share).",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Like  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Comment  </button>  <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">    Share  </button></div>"
        },
        {
          "name": "PostContainer",
          "is_standalone": false,
          "description": "(takes children): Wraps the entire post format.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContainer>\n    <PostHeader />\n    <PostContent />\n    <PostActions />\n  </PostContainer>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the post's title and metadata.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-2xl font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_at} by {author_name}</p></header>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the post's content.",
          "html": "<div class=\"text-lg leading-relaxed mb-4\">{post_content}</div>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the post's action buttons (e.g., like, comment, share).",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Like  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Comment  </button>  <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">    Share  </button></div>"
        },
        {
          "name": "PostContainer",
          "is_standalone": false,
          "description": "(takes children): Wraps the entire post format.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.",
      "html": "<div class=\"max-w-md mx-auto p-4 md:p-6 lg:p-8\">\n  <PostContainer>\n    <PostHeader />\n    <PostContent />\n    <PostActions />\n  </PostContainer>\n</div>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "(standalone): Displays the post's title and metadata.",
          "html": "<header class=\"flex justify-between mb-4\">  <h2 class=\"text-2xl font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_at} by {author_name}</p></header>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the post's content.",
          "html": "<div class=\"text-lg leading-relaxed mb-4\">{post_content}</div>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the post's action buttons (e.g., like, comment, share).",
          "html": "<div class=\"flex justify-between mb-4\">  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">    Like  </button>  <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">    Comment  </button>  <button class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">    Share  </button></div>"
        },
        {
          "name": "PostContainer",
          "is_standalone": false,
          "description": "(takes children): Wraps the entire post format.",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a responsive post formatting with a header, image, content, and footer sections. The post format should be mobile-first and adaptable to different screen sizes.",
      "html": "<article class=\"mb-4 bg-white rounded shadow-md overflow-hidden\">\n  <PostHeader />\n  <PostImage />\n  <PostContent>\n    <!-- post content will be rendered here -->\n  </PostContent>\n  <PostFooter />\n</article>\n",
      "components": [
        {
          "name": "PostHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the post header.",
          "html": "<header class=\"p-4 border-b border-gray-200\">  <h2 class=\"text-lg font-bold\">{post_title}</h2>  <p class=\"text-sm text-gray-600\">{posted_by} on {posted_date}</p></header>"
        },
        {
          "name": "PostImage",
          "is_standalone": true,
          "description": "A standalone component that displays the post image.",
          "html": "<img src=\"{image_url}\" class=\"w-full h-48 object-cover\" alt=\"{image_alt_text}\">"
        },
        {
          "name": "PostContent",
          "is_standalone": false,
          "description": "A component that displays the post content and takes children.",
          "html": "<div class=\"p-4\">  {children}</div>"
        },
        {
          "name": "PostFooter",
          "is_standalone": true,
          "description": "A standalone component that displays the post footer.",
          "html": "<footer class=\"p-4 border-t border-gray-200\">  <p class=\"text-sm text-gray-600\">{footer_text}</p></footer>"
        }
      ]
    }
  ],
  "Call-to-Action (CTA) Button Section": [
    {
      "description": "The UI should have a prominent call-to-action (CTA) button section with a bold headline, a brief description, and a prominent CTA button that encourages the user to take action.",
      "html": "<section class=\"max-w-md mx-auto p-4 pt-6\">\n  <HeadlineComponent/>\n  <DescriptionComponent/>\n  <CTAButtonComponent/>\n</section>\n",
      "components": [
        {
          "name": "HeadlineComponent",
          "is_standalone": true,
          "description": "Standalone component that displays a bold headline text.",
          "html": "<h2 class=\"text-3xl font-bold\">{headline_text}</h2>"
        },
        {
          "name": "DescriptionComponent",
          "is_standalone": true,
          "description": "Standalone component that displays a brief descriptive text.",
          "html": "<p class=\"text-lg\">{description_text}</p>"
        },
        {
          "name": "CTAButtonComponent",
          "is_standalone": true,
          "description": "Standalone component that displays a prominent CTA button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_button_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a prominent call-to-action (CTA) button section that encourages users to take a specific action. The section should be full-width, with a bold background color, and a contrasting CTA button that stands out. The section should be responsive, with the button size and spacing adjusting based on screen size.",
      "html": "<section class=\"relative pt-12 pb-20 lg:pt-20 lg:pb-32\">\n  <div class=\"container max-w-md mx-auto p-4 lg:p-8\">\n    <CTASection />\n  </div>\n</section>\n",
      "components": [
        {
          "name": "CTASection",
          "is_standalone": true,
          "description": "- standalone component that contains the entire CTA section",
          "html": "<div class=\"bg-orange-500 text-white p-4 lg:p-8\">  <h2 class=\"text-2xl lg:text-3xl\">{headline}</h2>  <p class=\"text-lg lg:text-xl\">{description}</p>  <CTAButton /></div>"
        },
        {
          "name": "CTAButton",
          "is_standalone": true,
          "description": "- standalone component that represents the call-to-action button",
          "html": "<button class=\"bg-white hover:bg-gray-200 text-orange-500 font-bold py-2 px-4 rounded\">  {button_text}</button>"
        }
      ]
    }
  ],
  "Footer with copyright information and disclaimer": [
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a simple footer section that displays copyright information and a disclaimer. The footer should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone) - The main footer component that contains the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto p-4 pt-6\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the copyright information.",
          "html": "<p>&copy; {current_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone) - Displays the disclaimer text.",
          "html": "<p>{disclaimer_text}</p>"
        }
      ]
    },
    {
      "description": "The UI should be a footer section that displays copyright information and a disclaimer. It should be responsive, mobile-first, and accessible.",
      "html": "<footer className=\"bg-gray-200 h-screen pt-4 pb-4\">\n  <FooterComponent />\n</footer>\n",
      "components": [
        {
          "name": "FooterComponent",
          "is_standalone": true,
          "description": "(standalone): The main footer component that wraps the copyright information and disclaimer.",
          "html": "<div className=\"max-w-md mx-auto px-4 lg:px-8\">  <CopyrightComponent />  <DisclaimerComponent /></div>"
        },
        {
          "name": "CopyrightComponent",
          "is_standalone": true,
          "description": "(standalone): Displays the copyright information.",
          "html": "<p className=\"text-sm text-gray-600\">&copy; {copyright_year} {company_name}. All rights reserved.</p>"
        },
        {
          "name": "DisclaimerComponent",
          "is_standalone": true,
          "description": "(standalone): Displays the disclaimer.",
          "html": "<p className=\"text-sm text-gray-600\">{disclaimer_text}</p>"
        }
      ]
    }
  ],
  "Tags and Categories": [
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2>Tags</h2>\n  <TagList>\n    <TagLink />\n    <TagLink />\n    <!-- Add more TagLink components here -->\n  </TagList>\n  <h2>Categories</h2>\n  <CategoryList>\n    <CategoryLink />\n    <CategoryLink />\n    <!-- Add more CategoryLink components here -->\n  </CategoryList>\n</div>\n",
      "components": [
        {
          "name": "TagLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single tag as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={tag_url}>{tag_name} ({tag_count})</a>"
        },
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single category as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={category_url}>{category_name} ({category_count})</a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of tags.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of categories.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2>Tags</h2>\n  <TagList>\n    <TagLink />\n    <TagLink />\n    <!-- Add more TagLink components here -->\n  </TagList>\n  <h2>Categories</h2>\n  <CategoryList>\n    <CategoryLink />\n    <CategoryLink />\n    <!-- Add more CategoryLink components here -->\n  </CategoryList>\n</div>\n",
      "components": [
        {
          "name": "TagLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single tag as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={tag_url}>{tag_name} ({tag_count})</a>"
        },
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single category as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={category_url}>{category_name} ({category_count})</a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of tags.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of categories.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2>Tags</h2>\n  <TagList>\n    <TagLink />\n    <TagLink />\n    <!-- Add more TagLink components here -->\n  </TagList>\n  <h2>Categories</h2>\n  <CategoryList>\n    <CategoryLink />\n    <CategoryLink />\n    <!-- Add more CategoryLink components here -->\n  </CategoryList>\n</div>\n",
      "components": [
        {
          "name": "TagLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single tag as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={tag_url}>{tag_name} ({tag_count})</a>"
        },
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single category as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={category_url}>{category_name} ({category_count})</a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of tags.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of categories.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2>Tags</h2>\n  <TagList>\n    <TagLink />\n    <TagLink />\n    <!-- Add more TagLink components here -->\n  </TagList>\n  <h2>Categories</h2>\n  <CategoryList>\n    <CategoryLink />\n    <CategoryLink />\n    <!-- Add more CategoryLink components here -->\n  </CategoryList>\n</div>\n",
      "components": [
        {
          "name": "TagLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single tag as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={tag_url}>{tag_name} ({tag_count})</a>"
        },
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single category as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={category_url}>{category_name} ({category_count})</a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of tags.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of categories.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first layout that displays a list of tags and categories. The tags and categories should be displayed as clickable links, with the number of associated items displayed in parentheses.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2>Tags</h2>\n  <TagList>\n    <TagLink />\n    <TagLink />\n    <!-- Add more TagLink components here -->\n  </TagList>\n  <h2>Categories</h2>\n  <CategoryList>\n    <CategoryLink />\n    <CategoryLink />\n    <!-- Add more CategoryLink components here -->\n  </CategoryList>\n</div>\n",
      "components": [
        {
          "name": "TagLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single tag as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={tag_url}>{tag_name} ({tag_count})</a>"
        },
        {
          "name": "CategoryLink",
          "is_standalone": true,
          "description": "A standalone component that displays a single category as a clickable link.",
          "html": "<a className=\"text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out\" href={category_url}>{category_name} ({category_count})</a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of tags.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children and displays a list of categories.",
          "html": "<ul className=\"list-none mb-4\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a list of tags and categories in a responsive, mobile-first design. The list should be accessible and SEO-friendly.",
      "html": "<main class=\"max-w-md mx-auto p-4 md:p-6 lg:p-12\">\n  <h1 class=\"text-3xl font-bold mb-4\">Tags and Categories</h1>\n  <section class=\"mb-6\">\n    <h2 class=\"text-lg font-bold mb-2\">Tags</h2>\n    <TagList>\n      <!-- Tags will be rendered here -->\n    </TagList>\n  </section>\n  <section class=\"mb-6\">\n    <h2 class=\"text-lg font-bold mb-2\">Categories</h2>\n    <CategoryList>\n      <!-- Categories will be rendered here -->\n    </CategoryList>\n  </section>\n</main>\n",
      "components": [
        {
          "name": "TagItem",
          "is_standalone": true,
          "description": "A standalone component representing a single tag.",
          "html": "<a href={tag_url} class=\"text-blue-600 hover:text-blue-800 transition duration-300\">  <span class=\"text-sm\">{tag_name}</span></a>"
        },
        {
          "name": "CategoryItem",
          "is_standalone": true,
          "description": "A standalone component representing a single category.",
          "html": "<a href={category_url} class=\"text-blue-600 hover:text-blue-800 transition duration-300\">  <span class=\"text-sm\">{category_name}</span></a>"
        },
        {
          "name": "TagList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of tags.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        },
        {
          "name": "CategoryList",
          "is_standalone": false,
          "description": "A component that takes children, representing a list of categories.",
          "html": "<ul class=\"list-none mb-0\">  {children}</ul>"
        }
      ]
    }
  ],
  "Filters and Sorting": [
    {
      "description": "The UI should display a list of filters and a dropdown for sorting options. The filters should be checkboxes that allow the user to select multiple options. The sorting dropdown should have a default option and allow the user to select from a list of options.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div class=\"flex flex-wrap\">\n    <FilterAndSortComponent>\n      {filters}.map((filter, index) => (\n        <FilterComponent key={index} />\n      ))}\n    </FilterAndSortComponent>\n  </div>\n  <SortComponent />\n</div>\n",
      "components": [
        {
          "name": "FilterComponent",
          "is_standalone": true,
          "description": "A standalone component that displays a single filter option as a checkbox.",
          "html": "<div class=\"mr-4 mb-2\">  <input type=\"checkbox\" id={`filter-${filter_id}`} />  <label for={`filter-${filter_id}`}>{filter_name}</label></div>"
        },
        {
          "name": "SortComponent",
          "is_standalone": true,
          "description": "A standalone component that displays the sorting options as a dropdown.",
          "html": "<select class=\"px-2 py-1 border border-gray-200 rounded\">  <option value=\"\">Default sorting</option>  {sort_options}.map((option, index) => (    <option key={index} value={option.value}>{option.label}</option>  ))}</select>"
        },
        {
          "name": "FilterAndSortComponent",
          "is_standalone": false,
          "description": "A component that contains all the filters and the sort dropdown. Takes children.",
          "html": "<div class=\"flex flex-wrap\">  {children}</div>"
        }
      ]
    }
  ],
  "Zoom/Magnify Effects": [
    {
      "description": "The UI should display an image with a zoom/magnify effect on hover.",
      "html": "<div class=\"container mx-auto p-4\">\n  <ImageMagnify src=\"{image_url}\" alt=\"{image_alt}\"/>\n</div>\n",
      "components": [
        {
          "name": "ImageMagnify",
          "is_standalone": true,
          "description": "(standalone) - Displays an image with a zoom/magnify effect on hover.",
          "html": "<div class=\"relative overflow-hidden\">  <img     src=\"{src}\"     alt=\"{alt}\"     class=\"w-full h-full transition duration-300 ease-in-out hover:scale-125\"  /></div>"
        }
      ]
    },
    {
      "description": "The UI should display an image with a zoom/magnify effect on hover.",
      "html": "<div class=\"container mx-auto p-4\">\n  <ImageMagnify src=\"{image_url}\" alt=\"{image_alt}\"/>\n</div>\n",
      "components": [
        {
          "name": "ImageMagnify",
          "is_standalone": true,
          "description": "(standalone) - Displays an image with a zoom/magnify effect on hover.",
          "html": "<div class=\"relative overflow-hidden\">  <img     src=\"{src}\"     alt=\"{alt}\"     class=\"w-full h-full transition duration-300 ease-in-out hover:scale-125\"  /></div>"
        }
      ]
    },
    {
      "description": "The UI should display an image with a zoom/magnify effect on hover.",
      "html": "<div class=\"container mx-auto p-4\">\n  <ImageMagnify src=\"{image_url}\" alt=\"{image_alt}\"/>\n</div>\n",
      "components": [
        {
          "name": "ImageMagnify",
          "is_standalone": true,
          "description": "(standalone) - Displays an image with a zoom/magnify effect on hover.",
          "html": "<div class=\"relative overflow-hidden\">  <img     src=\"{src}\"     alt=\"{alt}\"     class=\"w-full h-full transition duration-300 ease-in-out hover:scale-125\"  /></div>"
        }
      ]
    }
  ],
  "Server icon and name display with dropdown menu": [
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    },
    {
      "description": "The UI should display a server icon and name, with a dropdown menu that appears when the user clicks on the icon or name.",
      "html": "<div class=\"flex items-center\">\n  <ServerIcon/>\n  <ServerName/>\n  <div class=\"hidden lg:block\">\n    <DropdownMenu>\n      <!-- menu items will be inserted here -->\n    </DropdownMenu>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ServerIcon",
          "is_standalone": true,
          "description": "standalone component that displays a server icon",
          "html": "<i class=\"fas fa-server text-lg\"></i>"
        },
        {
          "name": "ServerName",
          "is_standalone": true,
          "description": "standalone component that displays the server name",
          "html": "<span>{server_name}</span>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "component that takes children, which are the menu items",
          "html": "<div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-md\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    },
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    },
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    },
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    },
    {
      "description": "A compact display of a server icon and name with a dropdown menu that appears when the icon is clicked. The dropdown menu should contain a list of options.",
      "html": "<div class=\"flex items-center\">\n  <ServerIconWithName />\n  <DropdownMenu>\n    <!-- dropdown menu items will be inserted here -->\n  </DropdownMenu>\n</div>\n",
      "components": [
        {
          "name": "ServerIconWithName",
          "is_standalone": true,
          "description": "A standalone component that displays a server icon and name.",
          "html": "<div class=\"flex items-center mb-2\">  <img src={serverIconUrl} alt={serverName} class=\"w-6 h-6 rounded-full\" />  <span class=\"ml-2 text-lg\">{serverName}</span></div>"
        },
        {
          "name": "DropdownMenu",
          "is_standalone": false,
          "description": "A component that takes children (menu items) and is initially hidden, becoming visible when the server icon is clicked.",
          "html": "<div class=\"hidden\">  <ul class=\"bg-white shadow-md py-2\">    {children}  </ul></div>"
        }
      ]
    }
  ],
  "Notification bell for new updates": [
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.",
      "html": "<div class=\"relative inline-block\">\n  <NotificationBell/>\n  <div class=\"absolute top-0 right-0 mt-2 mr-2\">\n    <UpdateList>\n      <!-- update items will be rendered here -->\n    </UpdateList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.",
          "html": "<div class=\"cursor-pointer\">  <i class=\"fas fa-bell text-lg text-gray-600\"></i>  <span class=\"bg-red-500 text-white rounded-full px-2 py-1\">{new_updates_count}</span></div>"
        },
        {
          "name": "UpdateList",
          "is_standalone": false,
          "description": "A component that takes children, which are individual update items.",
          "html": "<ul class=\"bg-white shadow-md py-2\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "A notification bell icon with a badge indicating the number of new updates.",
      "html": "<nav>\n  <ul>\n    <li>\n      <NotificationBell/>\n    </li>\n  </ul>\n</nav>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "(standalone) - The bell icon with a badge indicating new updates.",
          "html": "<a href=\"#\" className=\"relative\">  <i className=\"fas fa-bell\">{/* bell icon */}</i>  <Badge/></a>"
        },
        {
          "name": "Badge",
          "is_standalone": true,
          "description": "(standalone) - A small circle displaying the number of new updates.",
          "html": "<span className=\"absolute top-0 right-0 -mr-2 px-1 bg-red-500 text-white rounded-full text-xs\">{new_update_count}</span>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    },
    {
      "description": "The UI should be a simple notification bell icon with a red badge indicating the number of new updates. The icon should be clickable, and when clicked, it should display a dropdown list of new updates.",
      "html": "<div class=\"relative inline-block\">\n  <NotificationBell/>\n  <div class=\"absolute top-0 right-0 mt-2 mr-2\">\n    <UpdateList>\n      <!-- update items will be rendered here -->\n    </UpdateList>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "A standalone component that renders a clickable bell icon with a red badge indicating the number of new updates.",
          "html": "<div class=\"cursor-pointer\">  <i class=\"fas fa-bell text-lg text-gray-600\"></i>  <span class=\"bg-red-500 text-white rounded-full px-2 py-1\">{new_updates_count}</span></div>"
        },
        {
          "name": "UpdateList",
          "is_standalone": false,
          "description": "A component that takes children, which are individual update items.",
          "html": "<ul class=\"bg-white shadow-md py-2\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.",
      "html": "<div class=\"flex justify-end mr-4\">\n  <NotificationBell />\n</div>\n\n<!-- dropdown list of updates -->\n<div class=\"hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md\">\n  <UpdateItem>{children}</UpdateItem>\n</div>\n",
      "components": [
        {
          "name": "NotificationBell",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<button   class=\"bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2\"  aria-label=\"Notification bell\">  <i class=\"fas fa-bell\"></i>  <UpdateBadge /></button>"
        },
        {
          "name": "UpdateBadge",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<span class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1\">{update_count}</span>"
        },
        {
          "name": "UpdateItem",
          "is_standalone": false,
          "description": "takes children (list of updates)",
          "html": "<li class=\"py-2 border-b border-gray-200 text-sm\">  {children} <!-- new update item text --></li>"
        }
      ]
    }
  ],
  "Price and Discount Badges": [
    {
      "description": "The UI should display two badges, one for price and one for discount, with different background colors and text colors. The price badge should have a light blue background and white text, and the discount badge should have a green background and white text.",
      "html": "<div class=\"flex gap-2\">\n  <PriceBadge/>\n  <DiscountBadge/>\n</div>\n",
      "components": [
        {
          "name": "PriceBadge",
          "is_standalone": true,
          "description": "Standalone component, displays the price of an item.",
          "html": "<span class=\"bg-gray-200 text-white rounded py-1 px-2\">{price}</span>"
        },
        {
          "name": "DiscountBadge",
          "is_standalone": true,
          "description": "Standalone component, displays the discount of an item.",
          "html": "<span class=\"bg-green-400 text-white rounded py-1 px-2\">{discount}% off</span>"
        }
      ]
    },
    {
      "description": "The UI should display two types of badges: a price badge and a discount badge. The price badge shows the original price, and the discount badge shows the discount percentage. The badges should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <PriceBadge/>\n  <DiscountBadge/>\n</div>\n",
      "components": [
        {
          "name": "PriceBadge",
          "is_standalone": true,
          "description": "a standalone component that displays the original price.",
          "html": "<span class=\"bg-gray-200 px-2 py-1 rounded-full text-sm\">  <p>{original_price}</p></span>"
        },
        {
          "name": "DiscountBadge",
          "is_standalone": true,
          "description": "a standalone component that displays the discount percentage.",
          "html": "<span class=\"bg-orange-200 px-2 py-1 rounded-full text-sm\">  <p>{discount_percentage}% Off</p></span>"
        }
      ]
    }
  ],
  "Chart Builder: Visualize data trends": [
    {
      "description": "The UI should be a responsive, mobile-first chart builder that allows users to visualize data trends. It should have a simple and clean design, with a prominent chart area and accessible interactive elements.",
      "html": "<div class=\"flex flex-col h-screen overflow-hidden\">\n  <ChartHeader />\n  <div class=\"flex flex-grow overflow-hidden\">\n    <DataSelector>\n      <!-- data selector options will be rendered here -->\n    </DataSelector>\n    <div class=\"flex-grow\">\n      <ChartCanvas />\n      <AxisLabels />\n      <Legend />\n    </div>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ChartHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the chart title and a dropdown menu for selecting the chart type.",
          "html": "<header class=\"bg-white py-4 shadow-md\">  <h2 class=\"text-lg\">{chart_title}</h2>  <div class=\"relative\">    <button class=\"bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded\">Chart Type</button>    <ul class=\"absolute bg-white shadow-md py-2\">      <li><a href=\"#\" class=\"block py-2 px-4\">Line Chart</a></li>      <li><a href=\"#\" class=\"block py-2 px-4\">Bar Chart</a></li>      <!-- more chart types -->    </ul>  </div></header>"
        },
        {
          "name": "ChartCanvas",
          "is_standalone": true,
          "description": "A standalone component that renders the chart using a third-party library (not included in this response).",
          "html": "<div class=\"flex-grow h-full\">  <!-- chart will be rendered here --></div>"
        },
        {
          "name": "DataSelector",
          "is_standalone": false,
          "description": "A component that takes children and allows users to select the data to display in the chart.",
          "html": "<div class=\"bg-white py-4 pl-4 pr-2\">  <h3 class=\"text-lg\">Select Data</h3>  <ul class=\"list-none mb-4\">    {children}  </ul></div>"
        },
        {
          "name": "AxisLabels",
          "is_standalone": true,
          "description": "A standalone component that displays the axis labels for the chart.",
          "html": "<div class=\"flex justify-between mb-4\">  <p class=\"text-sm\">{x_axis_label}</p>  <p class=\"text-sm\">{y_axis_label}</p></div>"
        },
        {
          "name": "Legend",
          "is_standalone": true,
          "description": "A standalone component that displays the legend for the chart.",
          "html": "<div class=\"bg-white py-4 pl-4 pr-2\">  <h3 class=\"text-lg\">Legend</h3>  <ul class=\"list-none mb-4\">    <!-- legend items will be rendered here -->  </ul></div>"
        }
      ]
    }
  ],
  "Like/Comment/Share Buttons": [
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.",
      "html": "<div className=\"flex items-center justify-center mb-4\">\n  <LikeButton />\n  <CommentButton />\n  <ShareButton />\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "(standalone): represents the like button with a like count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{like_icon}</span>  <span>{like_count} likes</span></button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "(standalone): represents the comment button with a comment count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{comment_icon}</span>  <span>{comment_count} comments</span></button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "(standalone): represents the share button with a share count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{share_icon}</span>  <span>{share_count} shares</span></button>"
        }
      ]
    },
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with a slight gap between each button.",
      "html": "<div className=\"flex justify-between items-center mb-4\">\n  <LikeButton/> \n  <CommentButton/> \n  <ShareButton/> \n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-thumbs-up\" /> {like_count}</button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-comment\" /> {comment_count}</button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "- standalone",
          "html": "<button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">  <i className=\"fas fa-share\" /> {share_count}</button>"
        }
      ]
    },
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.",
      "html": "<div className=\"flex items-center justify-center mb-4\">\n  <LikeButton />\n  <CommentButton />\n  <ShareButton />\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "(standalone): represents the like button with a like count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{like_icon}</span>  <span>{like_count} likes</span></button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "(standalone): represents the comment button with a comment count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{comment_icon}</span>  <span>{comment_count} comments</span></button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "(standalone): represents the share button with a share count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{share_icon}</span>  <span>{share_count} shares</span></button>"
        }
      ]
    },
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.",
      "html": "<div className=\"flex items-center justify-center mb-4\">\n  <LikeButton />\n  <CommentButton />\n  <ShareButton />\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "(standalone): represents the like button with a like count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{like_icon}</span>  <span>{like_count} likes</span></button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "(standalone): represents the comment button with a comment count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{comment_icon}</span>  <span>{comment_count} comments</span></button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "(standalone): represents the share button with a share count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{share_icon}</span>  <span>{share_count} shares</span></button>"
        }
      ]
    },
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.",
      "html": "<div className=\"flex items-center justify-center mb-4\">\n  <LikeButton />\n  <CommentButton />\n  <ShareButton />\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "(standalone): represents the like button with a like count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{like_icon}</span>  <span>{like_count} likes</span></button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "(standalone): represents the comment button with a comment count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{comment_icon}</span>  <span>{comment_count} comments</span></button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "(standalone): represents the share button with a share count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{share_icon}</span>  <span>{share_count} shares</span></button>"
        }
      ]
    },
    {
      "description": "A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.",
      "html": "<div className=\"flex items-center justify-center mb-4\">\n  <LikeButton />\n  <CommentButton />\n  <ShareButton />\n</div>\n",
      "components": [
        {
          "name": "LikeButton",
          "is_standalone": true,
          "description": "(standalone): represents the like button with a like count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{like_icon}</span>  <span>{like_count} likes</span></button>"
        },
        {
          "name": "CommentButton",
          "is_standalone": true,
          "description": "(standalone): represents the comment button with a comment count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{comment_icon}</span>  <span>{comment_count} comments</span></button>"
        },
        {
          "name": "ShareButton",
          "is_standalone": true,
          "description": "(standalone): represents the share button with a share count",
          "html": "<button className=\"inline-flex items-center px-2 py-1 border border-gray-300 rounded-md\">  <span className=\"mr-1\">{share_icon}</span>  <span>{share_count} shares</span></button>"
        }
      ]
    }
  ],
  "Stencil Portals/Masking": [
    {
      "description": "The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular \"window\". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.",
      "html": "<div class=\"relative w-full h-screen\">\n  <PortalMask />\n  <PortalWindow />\n</div>\n",
      "components": [
        {
          "name": "PortalMask",
          "is_standalone": true,
          "description": "- standalone - Represents the masked background.",
          "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-gray-200\" aria-hidden=\"true\">  <!-- masked background --></div>"
        },
        {
          "name": "PortalWindow",
          "is_standalone": true,
          "description": "- standalone - Represents the circular \"window\" through which the background is visible.",
          "html": "<div class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md\">  <!-- circular \"window\" -->  <div class=\"w-full h-full bg-{portal_window_background} rounded-full\"></div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular \"window\". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.",
      "html": "<div class=\"relative w-full h-screen\">\n  <PortalMask />\n  <PortalWindow />\n</div>\n",
      "components": [
        {
          "name": "PortalMask",
          "is_standalone": true,
          "description": "- standalone - Represents the masked background.",
          "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-gray-200\" aria-hidden=\"true\">  <!-- masked background --></div>"
        },
        {
          "name": "PortalWindow",
          "is_standalone": true,
          "description": "- standalone - Represents the circular \"window\" through which the background is visible.",
          "html": "<div class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md\">  <!-- circular \"window\" -->  <div class=\"w-full h-full bg-{portal_window_background} rounded-full\"></div></div>"
        }
      ]
    },
    {
      "description": "The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular \"window\". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.",
      "html": "<div class=\"relative w-full h-screen\">\n  <PortalMask />\n  <PortalWindow />\n</div>\n",
      "components": [
        {
          "name": "PortalMask",
          "is_standalone": true,
          "description": "- standalone - Represents the masked background.",
          "html": "<div class=\"absolute top-0 left-0 w-full h-full bg-gray-200\" aria-hidden=\"true\">  <!-- masked background --></div>"
        },
        {
          "name": "PortalWindow",
          "is_standalone": true,
          "description": "- standalone - Represents the circular \"window\" through which the background is visible.",
          "html": "<div class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md\">  <!-- circular \"window\" -->  <div class=\"w-full h-full bg-{portal_window_background} rounded-full\"></div></div>"
        }
      ]
    }
  ],
  "Contact list with avatar and online status": [
    {
      "description": "A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Contacts</h2>\n  <ul class=\"flex flex-wrap justify-center\">\n    <ContactItem />\n    <ContactItem />\n    <ContactItem />\n  </ul>\n</main>\n",
      "components": [
        {
          "name": "ContactItem",
          "is_standalone": true,
          "description": "A standalone component representing a single contact.",
          "html": "<li class=\"flex items-center mb-4\">  <Avatar />  <div class=\"ml-2\">    <p class=\"text-lg\">{contact_name}</p>    <OnlineStatus />  </div></li>"
        },
        {
          "name": "Avatar",
          "is_standalone": true,
          "description": "A standalone component representing the avatar image of a contact.",
          "html": "<img src={avatar_url} alt=\"{contact_name}'s avatar\" class=\"w-12 h-12 rounded-full\" />"
        },
        {
          "name": "OnlineStatus",
          "is_standalone": true,
          "description": "A standalone component indicating the online status of a contact.",
          "html": "<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>  {online_status === 'online' ? 'Online' : 'Offline'}</span>"
        }
      ]
    },
    {
      "description": "A list of contacts, each with an avatar, name, and online status indicator.",
      "html": "<ul class=\"flex flex-col\">\n  <ContactListItem />\n  <ContactListItem />\n  <!-- more contact list items -->\n</ul>\n",
      "components": [
        {
          "name": "ContactListItem",
          "is_standalone": true,
          "description": "(standalone): Represents a single contact in the list.",
          "html": "<li class=\"flex py-2\">  <Avatar src=\"{avatar_url}\" />  <div class=\"ml-2\">    <p class=\"text-lg\">{name}</p>    <OnlineStatusIndicator online={online_status} />  </div></li>"
        },
        {
          "name": "Avatar",
          "is_standalone": true,
          "description": "(standalone): Displays an avatar image.",
          "html": "<img src=\"{src}\" alt=\"{alt}\" class=\"w-8 h-8 rounded-full\" />"
        },
        {
          "name": "OnlineStatusIndicator",
          "is_standalone": true,
          "description": "(standalone): Displays an online status indicator (e.g., a green dot).",
          "html": "<span class=\"inline-block w-2 h-2 rounded-full {online ? 'bg-green-500' : 'bg-red-500'}\" />"
        }
      ]
    },
    {
      "description": "A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.",
      "html": "<main class=\"max-w-md mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Contacts</h2>\n  <ul class=\"flex flex-wrap justify-center\">\n    <ContactItem />\n    <ContactItem />\n    <ContactItem />\n  </ul>\n</main>\n",
      "components": [
        {
          "name": "ContactItem",
          "is_standalone": true,
          "description": "A standalone component representing a single contact.",
          "html": "<li class=\"flex items-center mb-4\">  <Avatar />  <div class=\"ml-2\">    <p class=\"text-lg\">{contact_name}</p>    <OnlineStatus />  </div></li>"
        },
        {
          "name": "Avatar",
          "is_standalone": true,
          "description": "A standalone component representing the avatar image of a contact.",
          "html": "<img src={avatar_url} alt=\"{contact_name}'s avatar\" class=\"w-12 h-12 rounded-full\" />"
        },
        {
          "name": "OnlineStatus",
          "is_standalone": true,
          "description": "A standalone component indicating the online status of a contact.",
          "html": "<span class={`text-${online_status === 'online' ? 'green-500' : 'gray-500'}`}>  {online_status === 'online' ? 'Online' : 'Offline'}</span>"
        }
      ]
    }
  ],
  "Post Editing and Formatting Tools": [
    {
      "description": "The UI should be a container that holds various formatting tools and a text editor. The tools should be displayed horizontally and be responsive, with larger screens showing more tools and smaller screens showing fewer tools. The text editor should take up the majority of the space and be resizable.",
      "html": "<div class=\"flex h-screen\">\n  <ToolBar/>\n  <div class=\"flex-1 overflow-auto\">\n    <TextEditor>\n      <ResizeHandle/>\n      <!-- text content to be edited -->\n      {text_content}\n    </TextEditor>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "Standalone component that holds all the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormatButton> Bold </FormatButton>  <FormatButton> Italic </FormatButton>  <FormatButton> Underline </FormatButton>  <!-- more format buttons --></div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "Standalone component that represents an individual formatting tool (e.g. Bold, Italic, etc.).",
          "html": "<button class=\"px-2 py-1 rounded hover:bg-gray-200\">{button_text}</button>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "Component that takes children, which is the text content to be edited.",
          "html": "<div class=\"p-4 overflow-auto\" style=\"height: {editor_height}px;\">  <div class=\"editor-content\" contentEditable=\"true\">    {children}  </div>  <ResizeHandle/></div>"
        },
        {
          "name": "ResizeHandle",
          "is_standalone": true,
          "description": "Standalone component that allows users to resize the text editor.",
          "html": "<div class=\"resize-handle\" style=\"cursor: ns-resize;\"></div>"
        }
      ]
    },
    {
      "description": "The UI should be a container that holds various formatting tools and a text editor. The tools should be displayed horizontally and be responsive, with larger screens showing more tools and smaller screens showing fewer tools. The text editor should take up the majority of the space and be resizable.",
      "html": "<div class=\"flex h-screen\">\n  <ToolBar/>\n  <div class=\"flex-1 overflow-auto\">\n    <TextEditor>\n      <ResizeHandle/>\n      <!-- text content to be edited -->\n      {text_content}\n    </TextEditor>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "Standalone component that holds all the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormatButton> Bold </FormatButton>  <FormatButton> Italic </FormatButton>  <FormatButton> Underline </FormatButton>  <!-- more format buttons --></div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "Standalone component that represents an individual formatting tool (e.g. Bold, Italic, etc.).",
          "html": "<button class=\"px-2 py-1 rounded hover:bg-gray-200\">{button_text}</button>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "Component that takes children, which is the text content to be edited.",
          "html": "<div class=\"p-4 overflow-auto\" style=\"height: {editor_height}px;\">  <div class=\"editor-content\" contentEditable=\"true\">    {children}  </div>  <ResizeHandle/></div>"
        },
        {
          "name": "ResizeHandle",
          "is_standalone": true,
          "description": "Standalone component that allows users to resize the text editor.",
          "html": "<div class=\"resize-handle\" style=\"cursor: ns-resize;\"></div>"
        }
      ]
    },
    {
      "description": "The UI should be a container that holds various formatting tools and a text editor. The tools should be displayed horizontally and be responsive, with larger screens showing more tools and smaller screens showing fewer tools. The text editor should take up the majority of the space and be resizable.",
      "html": "<div class=\"flex h-screen\">\n  <ToolBar/>\n  <div class=\"flex-1 overflow-auto\">\n    <TextEditor>\n      <ResizeHandle/>\n      <!-- text content to be edited -->\n      {text_content}\n    </TextEditor>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "Standalone component that holds all the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormatButton> Bold </FormatButton>  <FormatButton> Italic </FormatButton>  <FormatButton> Underline </FormatButton>  <!-- more format buttons --></div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "Standalone component that represents an individual formatting tool (e.g. Bold, Italic, etc.).",
          "html": "<button class=\"px-2 py-1 rounded hover:bg-gray-200\">{button_text}</button>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "Component that takes children, which is the text content to be edited.",
          "html": "<div class=\"p-4 overflow-auto\" style=\"height: {editor_height}px;\">  <div class=\"editor-content\" contentEditable=\"true\">    {children}  </div>  <ResizeHandle/></div>"
        },
        {
          "name": "ResizeHandle",
          "is_standalone": true,
          "description": "Standalone component that allows users to resize the text editor.",
          "html": "<div class=\"resize-handle\" style=\"cursor: ns-resize;\"></div>"
        }
      ]
    },
    {
      "description": "The UI should be a container that holds various formatting tools and a text editor. The tools should be displayed horizontally and be responsive, with larger screens showing more tools and smaller screens showing fewer tools. The text editor should take up the majority of the space and be resizable.",
      "html": "<div class=\"flex h-screen\">\n  <ToolBar/>\n  <div class=\"flex-1 overflow-auto\">\n    <TextEditor>\n      <ResizeHandle/>\n      <!-- text content to be edited -->\n      {text_content}\n    </TextEditor>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "Standalone component that holds all the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormatButton> Bold </FormatButton>  <FormatButton> Italic </FormatButton>  <FormatButton> Underline </FormatButton>  <!-- more format buttons --></div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "Standalone component that represents an individual formatting tool (e.g. Bold, Italic, etc.).",
          "html": "<button class=\"px-2 py-1 rounded hover:bg-gray-200\">{button_text}</button>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "Component that takes children, which is the text content to be edited.",
          "html": "<div class=\"p-4 overflow-auto\" style=\"height: {editor_height}px;\">  <div class=\"editor-content\" contentEditable=\"true\">    {children}  </div>  <ResizeHandle/></div>"
        },
        {
          "name": "ResizeHandle",
          "is_standalone": true,
          "description": "Standalone component that allows users to resize the text editor.",
          "html": "<div class=\"resize-handle\" style=\"cursor: ns-resize;\"></div>"
        }
      ]
    },
    {
      "description": "The UI should be a container that holds various formatting tools and a text editor. The tools should be displayed horizontally and be responsive, with larger screens showing more tools and smaller screens showing fewer tools. The text editor should take up the majority of the space and be resizable.",
      "html": "<div class=\"flex h-screen\">\n  <ToolBar/>\n  <div class=\"flex-1 overflow-auto\">\n    <TextEditor>\n      <ResizeHandle/>\n      <!-- text content to be edited -->\n      {text_content}\n    </TextEditor>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ToolBar",
          "is_standalone": true,
          "description": "Standalone component that holds all the formatting tools.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormatButton> Bold </FormatButton>  <FormatButton> Italic </FormatButton>  <FormatButton> Underline </FormatButton>  <!-- more format buttons --></div>"
        },
        {
          "name": "FormatButton",
          "is_standalone": true,
          "description": "Standalone component that represents an individual formatting tool (e.g. Bold, Italic, etc.).",
          "html": "<button class=\"px-2 py-1 rounded hover:bg-gray-200\">{button_text}</button>"
        },
        {
          "name": "TextEditor",
          "is_standalone": false,
          "description": "Component that takes children, which is the text content to be edited.",
          "html": "<div class=\"p-4 overflow-auto\" style=\"height: {editor_height}px;\">  <div class=\"editor-content\" contentEditable=\"true\">    {children}  </div>  <ResizeHandle/></div>"
        },
        {
          "name": "ResizeHandle",
          "is_standalone": true,
          "description": "Standalone component that allows users to resize the text editor.",
          "html": "<div class=\"resize-handle\" style=\"cursor: ns-resize;\"></div>"
        }
      ]
    }
  ],
  "Post/Tweet Box": [
    {
      "description": "A post/tweet box with a profile picture, username, input field, and a send button.",
      "html": "<div className=\"flex p-4\">\n  <UserProfilePicture />\n  <div className=\"flex-1 ml-4\">\n    <Username />\n    <PostInput><PostInput /></PostInput>\n    <SendButton />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "UserProfilePicture",
          "is_standalone": true,
          "description": "Standalone component",
          "html": "<img className=\"w-12 h-12 rounded-full\" src={profile_picture_url} alt=\"Profile Picture\" />"
        },
        {
          "name": "Username",
          "is_standalone": true,
          "description": "Standalone component",
          "html": "<span className=\"text-lg font-bold\">{username}</span>"
        },
        {
          "name": "PostInput",
          "is_standalone": false,
          "description": "Takes children",
          "html": "<textarea className=\"w-full p-2 pl-10 text-lg\" rows=\"3\" placeholder=\"What's on your mind?\">{children}</textarea>"
        },
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "Standalone component",
          "html": "<button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        }
      ]
    }
  ],
  "Email signature editor with formatting options": [
    {
      "description": "A user interface for editing an email signature with various formatting options. The UI should have a text area for editing the signature, and a toolbar above the text area with buttons for formatting options such as bold, italic, underline, font size, font family, and text color.",
      "html": "<div class=\"flex flex-col h-screen\">\n  <Toolbar/>\n  <SignatureEditor>\n    <textarea class=\"w-full h-full p-2\" value={signature_text}></textarea>\n  </SignatureEditor>\n</div>\n",
      "components": [
        {
          "name": "Toolbar",
          "is_standalone": true,
          "description": "(standalone) - A horizontal bar with formatting option buttons.",
          "html": "<div class=\"flex justify-center mb-2\">  <FormattingButton icon=\"bold\" />  <FormattingButton icon=\"italic\" />  <FormattingButton icon=\"underline\" />  <select class=\"px-2 py-1\" value={font_size}>    <option value=\"10\">10px</option>    <option value=\"12\">12px</option>    <option value=\"14\">14px</option>  </select>  <select class=\"px-2 py-1\" value={font_family}>    <option value=\"Arial\">Arial</option>    <option value=\"Calibri\">Calibri</option>    <option value=\"Times New Roman\">Times New Roman</option>  </select>  <ColorPicker /></div>"
        },
        {
          "name": "FormattingButton",
          "is_standalone": true,
          "description": "(standalone) - A button for a specific formatting option (e.g. bold, italic, underline).",
          "html": "<button class=\"px-2 py-1\">{icon}</button>"
        },
        {
          "name": "SignatureEditor",
          "is_standalone": false,
          "description": "(takes children) - A text area for editing the email signature.",
          "html": "<div class=\"flex-1\">{children}</div>"
        },
        {
          "name": "ColorPicker",
          "is_standalone": true,
          "description": "(standalone) - A dropdown menu for selecting a text color.",
          "html": "<div class=\"relative\">  <button class=\"px-2 py-1\">Select color</button>  <div class=\"absolute bg-white border shadow-md\">    <div class=\"flex flex-wrap\">      <div class=\"w-6 h-6 bg-red-500\" />      <div class=\"w-6 h-6 bg-blue-500\" />      <!-- more colors -->    </div>  </div></div>"
        }
      ]
    }
  ],
  "Server role management with permission editting": [
    {
      "description": "The UI should display a list of server roles with their corresponding permissions. Each role should have an edit button that, when clicked, reveals a permission editor. The permission editor should display a list of available permissions with checkboxes to select or deselect them. The UI should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Server Roles</h1>\n  <ServerRoleList/>\n</div>\n",
      "components": [
        {
          "name": "ServerRoleList",
          "is_standalone": true,
          "description": "A standalone component that displays a list of server roles.",
          "html": "<ul class=\"list-none mb-4\">  {roles.map(role => (    <ServerRoleItem key={role.id}>{role.name}</ServerRoleItem>  ))}</ul>"
        },
        {
          "name": "ServerRoleItem",
          "is_standalone": false,
          "description": "A component that displays a single server role with an edit button. Takes children.",
          "html": "<li class=\"mb-2\">  <span class=\"font-bold\">{children}</span>  <button class=\"ml-2 text-sm text-blue-500\" onClick={handleEditClick}>Edit</button>  {isEditing && <PermissionEditor/>}</li>"
        },
        {
          "name": "PermissionEditor",
          "is_standalone": true,
          "description": "A standalone component that displays a list of available permissions with checkboxes.",
          "html": "<div class=\"p-4 mb-4 bg-white border rounded\">  <h2 class=\"text-lg font-bold mb-2\">Edit Permissions</h2>  <ul class=\"list-none mb-4\">    {permissions.map(permission => (      <PermissionItem key={permission.id}>{permission.name}</PermissionItem>    ))}  </ul>  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Save Changes</button></div>"
        },
        {
          "name": "PermissionItem",
          "is_standalone": false,
          "description": "A component that displays a single permission with a checkbox. Takes children.",
          "html": "<li class=\"mb-2\">  <input type=\"checkbox\" id={permission.id} checked={permission.isSelected} disabled={permission.isReadOnly}/>  <label for={permission.id}>{children}</label></li>"
        }
      ]
    }
  ],
  "Send button to post new tweet": [
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    },
    {
      "description": "A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <TweetButton/>\n</div>\n",
      "components": [
        {
          "name": "TweetButton",
          "is_standalone": true,
          "description": "(standalone) - a self-contained button component with a paper airplane icon and text \"Tweet\"",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  <i class=\"fas fa-paper-plane mr-2\"></i>  {tweet_button_text}</button>"
        }
      ]
    }
  ],
  "Interactive Product Demo Simulation": [
    {
      "description": "The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <ProductHero/>\n  <section class=\"flex flex-wrap justify-center mb-4\">\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n  </section>\n  <CallToAction/>\n  <ProductImage/>\n</div>\n",
      "components": [
        {
          "name": "ProductHero",
          "is_standalone": true,
          "description": "A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.",
          "html": "<section class=\"hero bg-cover bg-center h-screen\" style=\"background-image: url('{hero_image_url}')\">  <div class=\"container mx-auto p-4 md:p-6 lg:p-12\">    <h1 class=\"text-3xl lg:text-5xl text-white\">{hero_title}</h1>    <p class=\"text-lg lg:text-2xl text-white\">{hero_subtitle}</p>  </div></section>"
        },
        {
          "name": "FeatureCard",
          "is_standalone": false,
          "description": "A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 lg:p-6\">  <div slot=\"content\">{children}</div>  <CallToAction/></div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "A standalone component that encourages users to take a specific action, such as \"Learn More\" or \"Get Started\".",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{cta_text}</button>"
        },
        {
          "name": "ProductImage",
          "is_standalone": true,
          "description": "A standalone component that displays a product image.",
          "html": "<img class=\"w-full lg:w-1/2 xl:w-1/3 mx-auto\" src=\"{product_image_url}\" alt=\"{product_image_alt_text}\">"
        }
      ]
    },
    {
      "description": "A interactive product demo simulation UI with a hero section, features section, and a call-to-action (CTA) button.",
      "html": "<div className=\"max-w-7xl mx-auto py-12\">\n  <HeroSection />\n  <div className=\"flex flex-wrap justify-center -mx-4\">\n    <FeatureCard><ComponentName/></FeatureCard>\n    <FeatureCard><ComponentName/></FeatureCard>\n    <FeatureCard><ComponentName/></FeatureName>\n  </div>\n  <CTAButton />\n</div>\n",
      "components": [
        {
          "name": "HeroSection",
          "is_standalone": true,
          "description": "Standalone component",
          "html": "<section className=\"bg-hero bg-cover h-screen flex justify-center items-center\">  <h1 className=\"text-4xl font-bold\">{hero_title}</h1>  <p className=\"text-lg\">{hero_subtitle}</p></section>"
        },
        {
          "name": "FeatureCard",
          "is_standalone": false,
          "description": "Takes children",
          "html": "<div className=\"w-full md:w-1/2 xl:w-1/3 p-4\">  <img src={feature_icon} alt={feature_name} />  <h3 className=\"text-lg\">{feature_name}</h3>  <p>{feature_description}</p>  {children}</div>"
        },
        {
          "name": "CTAButton",
          "is_standalone": true,
          "description": "Standalone component",
          "html": "<button className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  {cta_text}</button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.",
      "html": "<div class=\"container mx-auto p-4 md:p-6 lg:p-12\">\n  <ProductHero/>\n  <section class=\"flex flex-wrap justify-center mb-4\">\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n    <FeatureCard><div slot=\"content\">Insert feature content here...</div></FeatureCard>\n  </section>\n  <CallToAction/>\n  <ProductImage/>\n</div>\n",
      "components": [
        {
          "name": "ProductHero",
          "is_standalone": true,
          "description": "A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.",
          "html": "<section class=\"hero bg-cover bg-center h-screen\" style=\"background-image: url('{hero_image_url}')\">  <div class=\"container mx-auto p-4 md:p-6 lg:p-12\">    <h1 class=\"text-3xl lg:text-5xl text-white\">{hero_title}</h1>    <p class=\"text-lg lg:text-2xl text-white\">{hero_subtitle}</p>  </div></section>"
        },
        {
          "name": "FeatureCard",
          "is_standalone": false,
          "description": "A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.",
          "html": "<div class=\"bg-white shadow-md rounded p-4 lg:p-6\">  <div slot=\"content\">{children}</div>  <CallToAction/></div>"
        },
        {
          "name": "CallToAction",
          "is_standalone": true,
          "description": "A standalone component that encourages users to take a specific action, such as \"Learn More\" or \"Get Started\".",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">{cta_text}</button>"
        },
        {
          "name": "ProductImage",
          "is_standalone": true,
          "description": "A standalone component that displays a product image.",
          "html": "<img class=\"w-full lg:w-1/2 xl:w-1/3 mx-auto\" src=\"{product_image_url}\" alt=\"{product_image_alt_text}\">"
        }
      ]
    }
  ],
  "Background Images/Patterns": [
    {
      "description": "The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"h-screen w-full\">\n  <BackgroundImageContainer />\n</div>\n",
      "components": [
        {
          "name": "BackgroundImageContainer",
          "is_standalone": true,
          "description": "(standalone) - a container element that holds the background image or pattern.",
          "html": "<div   class=\"h-full w-full bg-cover bg-center\tbg-{background_image_or_pattern}\"   style={`background-image: url('{background_image_or_pattern}');`}>  <!-- Background image or pattern will be displayed here --></div>"
        }
      ]
    },
    {
      "description": "The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"h-screen w-full\">\n  <BackgroundImageContainer />\n</div>\n",
      "components": [
        {
          "name": "BackgroundImageContainer",
          "is_standalone": true,
          "description": "(standalone) - a container element that holds the background image or pattern.",
          "html": "<div   class=\"h-full w-full bg-cover bg-center\tbg-{background_image_or_pattern}\"   style={`background-image: url('{background_image_or_pattern}');`}>  <!-- Background image or pattern will be displayed here --></div>"
        }
      ]
    },
    {
      "description": "The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"h-screen w-full\">\n  <BackgroundImageContainer />\n</div>\n",
      "components": [
        {
          "name": "BackgroundImageContainer",
          "is_standalone": true,
          "description": "(standalone) - a container element that holds the background image or pattern.",
          "html": "<div   class=\"h-full w-full bg-cover bg-center\tbg-{background_image_or_pattern}\"   style={`background-image: url('{background_image_or_pattern}');`}>  <!-- Background image or pattern will be displayed here --></div>"
        }
      ]
    },
    {
      "description": "The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.",
      "html": "<div class=\"h-screen w-full\">\n  <BackgroundImageContainer />\n</div>\n",
      "components": [
        {
          "name": "BackgroundImageContainer",
          "is_standalone": true,
          "description": "(standalone) - a container element that holds the background image or pattern.",
          "html": "<div   class=\"h-full w-full bg-cover bg-center\tbg-{background_image_or_pattern}\"   style={`background-image: url('{background_image_or_pattern}');`}>  <!-- Background image or pattern will be displayed here --></div>"
        }
      ]
    }
  ],
  "Tweet analytics for engagement metrics": [
    {
      "description": "The UI should be a dashboard displaying tweet analytics for engagement metrics. It should show the number of likes, retweets, replies, and engagements for a tweet.",
      "html": "<div class=\" container mx-auto p-4 pt-6 md:p-6\">\n  <TweetAnalyticsCard/>\n</div>\n",
      "components": [
        {
          "name": "TweetAnalyticsCard",
          "is_standalone": true,
          "description": "standalone component displaying the tweet analytics",
          "html": "<div class=\"bg-white rounded shadow-md p-4\">  <h2 class=\"text-lg font-bold\">Tweet Analytics</h2>  <ul class=\"list-none mb-0\">    <MetricItem> Likes: {likes} </MetricItem>    <MetricItem> Retweets: {retweets} </MetricItem>    <MetricItem> Replies: {replies} </MetricItem>    <MetricItem> Engagements: {engagements} </MetricItem>  </ul></div>"
        },
        {
          "name": "MetricItem",
          "is_standalone": false,
          "description": "takes children, displays a single metric (e.g. likes, retweets, etc.)",
          "html": "<li class=\"flex items-center mb-2\">  <span class=\"mr-2\">{icon}</span>  <span>{children}</span></li>"
        }
      ]
    }
  ],
  "API Explorer: Discover APIs and endpoints": [
    {
      "description": "The UI should display a sidebar with a list of APIs, and a main content area that shows the details of the selected API, including its endpoints.",
      "html": "<div class=\"flex h-screen\">\n  <ApiSidebar />\n  <div class=\"flex-1 p-4\">\n    <ApiDetails>\n      <h1>{api_name}</h1>\n      <p>{api_description}</p>\n      <ul>\n        <!-- list of endpoints -->\n        <ApiEndpoint />\n        <ApiEndpoint />\n        <!-- ... -->\n      </ul>\n    </ApiDetails>\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ApiSidebar",
          "is_standalone": true,
          "description": "a standalone component that displays a list of APIs",
          "html": "<nav class=\"w-64 p-4 bg-gray-100\">  <h2>APIs</h2>  <ul>    <!-- list of APIs -->    <li><a href=\"#\" class=\"block p-2\">{api_name}</a></li>    <!-- ... -->  </ul></nav>"
        },
        {
          "name": "ApiDetails",
          "is_standalone": false,
          "description": "a component that takes children, displaying details about a selected API",
          "html": "<div>  {children}</div>"
        },
        {
          "name": "ApiEndpoint",
          "is_standalone": true,
          "description": "a standalone component that displays a single API endpoint",
          "html": "<li class=\"p-2 border-b border-gray-200\">  <h3>{endpoint_method} {endpoint_path}</h3>  <p>{endpoint_description}</p></li>"
        }
      ]
    }
  ],
  "Video analytics dashboard for creators": [
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a clean and minimalistic dashboard that displays key video analytics metrics, with a focus on ease of use and accessibility. The dashboard should be responsive and adapt to different screen sizes, with a mobile-first approach.",
      "html": "<div className=\"flex h-screen w-screen bg-gray-100\">\n  <DashboardHeader title=\"Video Analytics Dashboard\" />\n  <main className=\"flex-grow p-4\">\n    <MetricGrid>\n      <AnalyticsCard label=\"Views\" value=\"{view_count}\" icon=\"fa fa-eye\" />\n      <AnalyticsCard label=\"Engagement\" value=\"{engagement_rate}\" icon=\"fa fa-thumbs-up\" />\n      <AnalyticsCard label=\"Watch Time\" value=\"{watch_time}\" icon=\"fa fa-clock\" />\n    </MetricGrid>\n    <section className=\"mt-4\">\n      <h2 className=\"text-lg font-bold\">Recent Videos</h2>\n      <ul className=\"flex flex-wrap justify-center\">\n        <VideoCard>\n          <VideoThumbnail videoTitle=\"{video_title}\" />\n          <h3>{video_title}</h3>\n          <p className=\"text-sm\">{video_description}</p>\n        </VideoCard>\n        <!-- Repeat VideoCard components for each video -->\n      </ul>\n    </section>\n    <MenuButton />\n  </main>\n</div>\n",
      "components": [
        {
          "name": "AnalyticsCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric (e.g. views, engagement, etc.) with a label, value, and optional icon.",
          "html": "<div className=\"bg-white p-4 rounded shadow-md\">  <h3 className=\"text-lg font-bold\">{label}</h3>  <p className=\"text-2xl\">{value}</p>  {icon && <i className={icon} aria-hidden=\"true\" />}</div>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays a grid of `AnalyticsCard` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component that displays a video thumbnail with a play button overlay.",
          "html": "<div className=\"w-40 h-24 bg-gray-200 rounded overflow-hidden\">  <img src=\"{thumbnail_url}\" alt=\"Video Thumbnail\" />  <button className=\"absolute inset-0 flex justify-center items-center text-white\">    <i className=\"fa fa-play\" aria-hidden=\"true\" />  </button></div>"
        },
        {
          "name": "VideoCard",
          "is_standalone": false,
          "description": "A component that takes children and displays a video thumbnail, title, and optional metrics.",
          "html": "<div className=\"flex flex-col w-64 mx-2 mb-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation.",
          "html": "<header className=\"flex justify-between p-4\">  <h1 className=\"text-2xl font-bold\">{title}</h1>  <nav>    <!-- Optional navigation links -->  </nav></header>"
        },
        {
          "name": "MenuButton",
          "is_standalone": true,
          "description": "A standalone component that displays a menu icon with an optional dropdown menu.",
          "html": "<button className=\"flex justify-center w-8 h-8 bg-gray-200 rounded\">  <i className=\"fa fa-bars\" aria-hidden=\"true\" />  <ul className=\"hidden\">    <!-- Optional dropdown menu items -->  </ul></button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a clean and minimalistic dashboard that displays key video analytics metrics, with a focus on ease of use and accessibility. The dashboard should be responsive and adapt to different screen sizes, with a mobile-first approach.",
      "html": "<div className=\"flex h-screen w-screen bg-gray-100\">\n  <DashboardHeader title=\"Video Analytics Dashboard\" />\n  <main className=\"flex-grow p-4\">\n    <MetricGrid>\n      <AnalyticsCard label=\"Views\" value=\"{view_count}\" icon=\"fa fa-eye\" />\n      <AnalyticsCard label=\"Engagement\" value=\"{engagement_rate}\" icon=\"fa fa-thumbs-up\" />\n      <AnalyticsCard label=\"Watch Time\" value=\"{watch_time}\" icon=\"fa fa-clock\" />\n    </MetricGrid>\n    <section className=\"mt-4\">\n      <h2 className=\"text-lg font-bold\">Recent Videos</h2>\n      <ul className=\"flex flex-wrap justify-center\">\n        <VideoCard>\n          <VideoThumbnail videoTitle=\"{video_title}\" />\n          <h3>{video_title}</h3>\n          <p className=\"text-sm\">{video_description}</p>\n        </VideoCard>\n        <!-- Repeat VideoCard components for each video -->\n      </ul>\n    </section>\n    <MenuButton />\n  </main>\n</div>\n",
      "components": [
        {
          "name": "AnalyticsCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric (e.g. views, engagement, etc.) with a label, value, and optional icon.",
          "html": "<div className=\"bg-white p-4 rounded shadow-md\">  <h3 className=\"text-lg font-bold\">{label}</h3>  <p className=\"text-2xl\">{value}</p>  {icon && <i className={icon} aria-hidden=\"true\" />}</div>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays a grid of `AnalyticsCard` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component that displays a video thumbnail with a play button overlay.",
          "html": "<div className=\"w-40 h-24 bg-gray-200 rounded overflow-hidden\">  <img src=\"{thumbnail_url}\" alt=\"Video Thumbnail\" />  <button className=\"absolute inset-0 flex justify-center items-center text-white\">    <i className=\"fa fa-play\" aria-hidden=\"true\" />  </button></div>"
        },
        {
          "name": "VideoCard",
          "is_standalone": false,
          "description": "A component that takes children and displays a video thumbnail, title, and optional metrics.",
          "html": "<div className=\"flex flex-col w-64 mx-2 mb-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation.",
          "html": "<header className=\"flex justify-between p-4\">  <h1 className=\"text-2xl font-bold\">{title}</h1>  <nav>    <!-- Optional navigation links -->  </nav></header>"
        },
        {
          "name": "MenuButton",
          "is_standalone": true,
          "description": "A standalone component that displays a menu icon with an optional dropdown menu.",
          "html": "<button className=\"flex justify-center w-8 h-8 bg-gray-200 rounded\">  <i className=\"fa fa-bars\" aria-hidden=\"true\" />  <ul className=\"hidden\">    <!-- Optional dropdown menu items -->  </ul></button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a clean and minimalistic dashboard that displays key video analytics metrics, with a focus on ease of use and accessibility. The dashboard should be responsive and adapt to different screen sizes, with a mobile-first approach.",
      "html": "<div className=\"flex h-screen w-screen bg-gray-100\">\n  <DashboardHeader title=\"Video Analytics Dashboard\" />\n  <main className=\"flex-grow p-4\">\n    <MetricGrid>\n      <AnalyticsCard label=\"Views\" value=\"{view_count}\" icon=\"fa fa-eye\" />\n      <AnalyticsCard label=\"Engagement\" value=\"{engagement_rate}\" icon=\"fa fa-thumbs-up\" />\n      <AnalyticsCard label=\"Watch Time\" value=\"{watch_time}\" icon=\"fa fa-clock\" />\n    </MetricGrid>\n    <section className=\"mt-4\">\n      <h2 className=\"text-lg font-bold\">Recent Videos</h2>\n      <ul className=\"flex flex-wrap justify-center\">\n        <VideoCard>\n          <VideoThumbnail videoTitle=\"{video_title}\" />\n          <h3>{video_title}</h3>\n          <p className=\"text-sm\">{video_description}</p>\n        </VideoCard>\n        <!-- Repeat VideoCard components for each video -->\n      </ul>\n    </section>\n    <MenuButton />\n  </main>\n</div>\n",
      "components": [
        {
          "name": "AnalyticsCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single metric (e.g. views, engagement, etc.) with a label, value, and optional icon.",
          "html": "<div className=\"bg-white p-4 rounded shadow-md\">  <h3 className=\"text-lg font-bold\">{label}</h3>  <p className=\"text-2xl\">{value}</p>  {icon && <i className={icon} aria-hidden=\"true\" />}</div>"
        },
        {
          "name": "MetricGrid",
          "is_standalone": false,
          "description": "A component that takes children and displays a grid of `AnalyticsCard` components.",
          "html": "<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "A standalone component that displays a video thumbnail with a play button overlay.",
          "html": "<div className=\"w-40 h-24 bg-gray-200 rounded overflow-hidden\">  <img src=\"{thumbnail_url}\" alt=\"Video Thumbnail\" />  <button className=\"absolute inset-0 flex justify-center items-center text-white\">    <i className=\"fa fa-play\" aria-hidden=\"true\" />  </button></div>"
        },
        {
          "name": "VideoCard",
          "is_standalone": false,
          "description": "A component that takes children and displays a video thumbnail, title, and optional metrics.",
          "html": "<div className=\"flex flex-col w-64 mx-2 mb-4\">  {children}</div>"
        },
        {
          "name": "DashboardHeader",
          "is_standalone": true,
          "description": "A standalone component that displays the dashboard title and optional navigation.",
          "html": "<header className=\"flex justify-between p-4\">  <h1 className=\"text-2xl font-bold\">{title}</h1>  <nav>    <!-- Optional navigation links -->  </nav></header>"
        },
        {
          "name": "MenuButton",
          "is_standalone": true,
          "description": "A standalone component that displays a menu icon with an optional dropdown menu.",
          "html": "<button className=\"flex justify-center w-8 h-8 bg-gray-200 rounded\">  <i className=\"fa fa-bars\" aria-hidden=\"true\" />  <ul className=\"hidden\">    <!-- Optional dropdown menu items -->  </ul></button>"
        }
      ]
    },
    {
      "description": "The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.",
      "html": "<div class=\"max-w-md mx-auto p-4 mt-4\">\n  <NavigationBar/>\n  <DashboardContainer>\n    <VideoThumbnail/>\n    <div class=\"flex flex-wrap justify-between mb-4\">\n      <EngagementChart/>\n      <PerformanceTable/>\n    </div>\n  </DashboardContainer>\n</div>\n",
      "components": [
        {
          "name": "NavigationBar",
          "is_standalone": true,
          "description": "(standalone) - a navigation bar with links to other dashboard pages",
          "html": "<nav class=\"flex justify-between mb-4\">  <ul class=\"list-none mb-0\">    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_1}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_2}</a></li>    <li><a href=\"#\" class=\"text-gray-600 hover:text-gray-900\">{nav_link_3}</a></li>  </ul></nav>"
        },
        {
          "name": "VideoThumbnail",
          "is_standalone": true,
          "description": "(standalone) - a video thumbnail with playback information",
          "html": "<div class=\"flex mb-4\">  <img src={video_thumbnail_url} alt={video_title} class=\"w-40 h-40 object-cover rounded-lg\">  <div class=\"ml-4\">    <p class=\"text-lg font-bold\">{video_title}</p>    <p>{video_description}</p>    <p>{playback_info}</p>  </div></div>"
        },
        {
          "name": "EngagementChart",
          "is_standalone": true,
          "description": "(standalone) - a chart displaying video engagement metrics",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Engagement Metrics</h3>  <canvas id=\"engagement-chart\" width={chart_width} height={chart_height}></canvas></div>"
        },
        {
          "name": "PerformanceTable",
          "is_standalone": true,
          "description": "(standalone) - a table showing video performance data",
          "html": "<div class=\"w-full md:w-1/2 xl:w-1/3 p-4 mb-4\">  <h3 class=\"text-lg font-bold mb-2\">Video Performance</h3>  <table class=\"w-full\">    <thead>      <tr>        <th>Metric</th>        <th>Value</th>      </tr>    </thead>    <tbody>      <tr>        <td>Views</td>        <td>{views}</td>      </tr>      <tr>        <td>Likes</td>        <td>{likes}</td>      </tr>      <tr>        <td>Comments</td>        <td>{comments}</td>      </tr>    </tbody>  </table></div>"
        },
        {
          "name": "DashboardContainer",
          "is_standalone": false,
          "description": "(takes children) - a container element that wraps the entire dashboard",
          "html": "<div class=\"p-4 mb-4\">{children}</div>"
        }
      ]
    }
  ],
  "Revenue Forecast: Predict future sales": [
    {
      "description": "The UI should be a simple card component that displays a title, a brief description, and a chart to visualize the revenue forecast. The card should have a clean and modern design, with a prominent title and a subtle background color.",
      "html": "<div class=\"max-w-md mx-auto bg-white shadow-md p-4 rounded\">\n  <RevenueCard>\n    <CardTitle>Revenue Forecast</CardTitle>\n    <CardDescription>Predict future sales</CardDescription>\n    <Chart />\n  </RevenueCard>\n</div>\n",
      "components": [
        {
          "name": "RevenueCard",
          "is_standalone": true,
          "description": "A standalone component that renders a card with a title, description, and a chart.",
          "html": "<div class=\"p-4\">  <h2 class=\"text-lg font-bold\">{children[0]}</h2>  <p class=\"text-gray-600\">{children[1]}</p>  <div class=\"h-48\">{children[2]}</div></div>"
        },
        {
          "name": "Chart",
          "is_standalone": true,
          "description": "A standalone component that renders a chart to visualize the revenue forecast.",
          "html": "<canvas class=\"w-full h-full\" id=\"revenue-chart\"></canvas>"
        },
        {
          "name": "CardTitle",
          "is_standalone": false,
          "description": "A component that takes children to render a title inside the card.",
          "html": "<h2 class=\"text-lg font-bold\">{children}</h2>"
        },
        {
          "name": "CardDescription",
          "is_standalone": false,
          "description": "A component that takes children to render a brief description inside the card.",
          "html": "<p class=\"text-gray-600\">{children}</p>"
        }
      ]
    }
  ],
  "Product Cards/Grids": [
    {
      "description": "A responsive grid of product cards, with each card displaying a product image, title, price, and a \"Add to Cart\" button. The grid should be mobile-first, with a single column on small screens and a multi-column layout on larger screens.",
      "html": "<!-- Product Grid container -->\n<div class=\"container mx-auto p-4\">\n  <!-- Product Grid -->\n  <div class=\"grid gap-4 lg:grid-cols-2 xl:grid-cols-3\">\n    <!-- Product Card 1 -->\n    <ProductCard />\n    <!-- Product Card 2 -->\n    <ProductCard />\n    <!-- ... -->\n  </div>\n</div>\n",
      "components": [
        {
          "name": "ProductCard",
          "is_standalone": true,
          "description": "(standalone): A single product card, containing image, title, price, and \"Add to Cart\" button.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <!-- Product Image -->  <img src=\"{product_image}\" alt=\"{product_title}\" class=\"w-full h-48 object-cover rounded-t-md\" />  <div class=\"p-4\">    <!-- Product Title -->    <h2 class=\"text-lg font-bold\">{product_title}</h2>    <!-- Product Price -->    <p class=\"text-lg\">{product_price}</p>    <!-- Add to Cart Button -->    <button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Add to Cart</button>  </div></div>"
        }
      ]
    }
  ],
  "Project Cards/Grids": [
    {
      "description": "A responsive grid of project cards, with each card displaying a thumbnail, title, description, and tags. The grid should be flexible to accommodate different screen sizes.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <ProjectGrid>\n    <ProjectCard />\n    <ProjectCard />\n    <ProjectCard />\n    <!-- Add more ProjectCard components here -->\n  </ProjectGrid>\n</div>\n",
      "components": [
        {
          "name": "ProjectCard",
          "is_standalone": true,
          "description": "standalone component that displays a single project card",
          "html": "<div class=\"bg-white shadow-md rounded p-4 mb-4\">  <img src={thumbnail_url} alt={project_title} class=\"w-full rounded-t\" />  <h2 class=\"text-lg font-bold\">{project_title}</h2>  <p class=\"text-gray-600\">{project_description}</p>  <ul class=\"flex flex-wrap\">    {tags.map((tag) => (      <li class=\"mr-2\">{tag}</li>    ))}  </ul></div>"
        },
        {
          "name": "ProjectGrid",
          "is_standalone": false,
          "description": "container component that wraps a grid of project cards, takes children",
          "html": "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Countdown Timers": [
    {
      "description": "The UI should display a countdown timer showing days, hours, minutes, and seconds until a specific date and time.",
      "html": "<div className=\"flex justify-center\">\n  <CountdownTimer/>\n</div>\n",
      "components": [
        {
          "name": "CountdownTimer",
          "is_standalone": true,
          "description": "(standalone): The main countdown timer component.",
          "html": "<div className=\"flex gap-4\">  <DayCounter/><span>:</span>  <HourCounter/><span>:</span>  <MinuteCounter/><span>:</span>  <SecondCounter/></div>"
        },
        {
          "name": "DayCounter",
          "is_standalone": true,
          "description": "(standalone): Displays the number of days.",
          "html": "<div className=\"text-4xl\">{days} <span>days</span></div>"
        },
        {
          "name": "HourCounter",
          "is_standalone": true,
          "description": "(standalone): Displays the number of hours.",
          "html": "<div className=\"text-4xl\">{hours} <span>hours</span></div>"
        },
        {
          "name": "MinuteCounter",
          "is_standalone": true,
          "description": "(standalone): Displays the number of minutes.",
          "html": "<div className=\"text-4xl\">{minutes} <span>minutes</span></div>"
        },
        {
          "name": "SecondCounter",
          "is_standalone": true,
          "description": "(standalone): Displays the number of seconds.",
          "html": "<div className=\"text-4xl\">{seconds} <span>seconds</span></div>"
        }
      ]
    }
  ],
  "Channel topic and description with edit button": [
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "The UI should display a channel topic and description with an edit button. The edit button should be aligned to the right side of the container. On smaller screens, the edit button should be aligned below the channel topic.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <ChannelInfo>\n    <ChannelTopic />\n    <ChannelDescription />\n    <EditButton />\n  </ChannelInfo>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "standalone - displays the channel topic",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "standalone - displays the channel description",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "standalone - displays an edit button",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Edit</button>"
        },
        {
          "name": "ChannelInfo",
          "is_standalone": false,
          "description": "takes children - wraps the channel topic, description, and edit button",
          "html": "<div class=\"flex flex-wrap justify-between\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "The UI should display a channel topic and description with an edit button.",
      "html": "<div class=\"flex flex-col gap-2\">\n  <ChannelTopic />\n  <ChannelDescription />\n  <EditButton />\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "standalone component to display the channel topic",
          "html": "<p class=\"text-lg font-bold\">{channel_topic}</p>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "standalone component to display the channel description",
          "html": "<p class=\"text-sm\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "standalone component for the edit button",
          "html": "<button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded\">  Edit</button>"
        }
      ]
    },
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.",
      "html": "<div class=\"flex flex-wrap justify-between mb-4\">\n  <div>\n    <ChannelTopic/>\n    <ChannelDescription/>\n  </div>\n  <EditButton/>\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "Standalone component that displays a heading with the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "Standalone component that displays a paragraph with the channel description.",
          "html": "<p class=\"text-gray-600\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "Standalone component that displays a small button with a pencil icon.",
          "html": "<button class=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded\">  <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Edit</button>"
        }
      ]
    },
    {
      "description": "The UI should display a channel topic and description with an edit button. The topic and description should be clearly readable, and the edit button should be prominent and accessible.",
      "html": "<div class=\"flex flex-col gap-4 md:flex-row md:items-center\">\n  <div class=\"flex-1\">\n    <ChannelTopic />\n    <ChannelDescription />\n  </div>\n  <EditButton />\n</div>\n",
      "components": [
        {
          "name": "ChannelTopic",
          "is_standalone": true,
          "description": "A standalone component that displays the channel topic.",
          "html": "<h2 class=\"text-lg font-bold\">{channel_topic}</h2>"
        },
        {
          "name": "ChannelDescription",
          "is_standalone": true,
          "description": "A standalone component that displays the channel description.",
          "html": "<p class=\"text-sm\">{channel_description}</p>"
        },
        {
          "name": "EditButton",
          "is_standalone": true,
          "description": "A standalone component that displays an edit button.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit</button>"
        }
      ]
    }
  ],
  "Post Card: A single post with user info and actions": [
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.",
      "html": "<div className=\"max-w-md bg-white rounded-lg shadow-md p-4\">\n  <PostCard>\n    <UserProfile />\n    <PostContent />\n    <PostActions />\n  </PostCard>\n</div>\n",
      "components": [
        {
          "name": "UserProfile",
          "is_standalone": true,
          "description": "(standalone): Displays the user's profile picture and name.",
          "html": "<div className=\"flex items-center mb-2\">  <img src={user_profile_picture} className=\"w-10 h-10 rounded-full\" />  <div className=\"ml-2\">    <p className=\"text-lg font-bold\">{user_name}</p>    <p className=\"text-sm text-gray-600\">{timestamp}</p>  </div></div>"
        },
        {
          "name": "PostContent",
          "is_standalone": true,
          "description": "(standalone): Displays the content of the post.",
          "html": "<p className=\"text-lg\">{post_content}</p>"
        },
        {
          "name": "PostActions",
          "is_standalone": true,
          "description": "(standalone): Displays the actions (e.g., like, comment, share) for the post.",
          "html": "<div className=\"flex justify-between mt-4\">  <button className=\"text-gray-600 hover:text-gray-900\">Like</button>  <button className=\"text-gray-600 hover:text-gray-900\">Comment</button>  <button className=\"text-gray-600 hover:text-gray-900\">Share</button></div>"
        },
        {
          "name": "PostCard",
          "is_standalone": false,
          "description": "(takes children): The container component that wraps around the user profile, post content, and post actions.",
          "html": "<div className=\"p-4\">  {children}</div>"
        }
      ]
    }
  ],
  "Email filtering and sorting options": [
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <FilterPanel>\n    <EmailFilterOption/>\n    <EmailFilterOption/>\n    <EmailFilterOption/>\n  </FilterPanel>\n  <SortPanel>\n    <EmailSortOption/>\n    <EmailSortOption/>\n    <EmailSortOption/>\n  </SortPanel>\n</div>\n",
      "components": [
        {
          "name": "EmailFilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option with a checkbox and label.",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" id=\"{filterId}\" class=\"mr-2\">  <label for=\"{filterId}\" class=\"text-sm\">{filterLabel}</label></div>"
        },
        {
          "name": "EmailSortOption",
          "is_standalone": true,
          "description": "(standalone) - A single sort option with a radio button and label.",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"radio\" id=\"{sortId}\" class=\"mr-2\">  <label for=\"{sortId}\" class=\"text-sm\">{sortLabel}</label></div>"
        },
        {
          "name": "FilterPanel",
          "is_standalone": false,
          "description": "(takes children) - The main filter panel that contains all the filter options.",
          "html": "<div class=\"mb-4\">  <h5 class=\"text-lg mb-2\">Filters</h5>  {children}</div>"
        },
        {
          "name": "SortPanel",
          "is_standalone": false,
          "description": "(takes children) - The main sort panel that contains all the sort options.",
          "html": "<div class=\"mb-4\">  <h5 class=\"text-lg mb-2\">Sort by</h5>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.",
      "html": "<div class=\"max-w-md mx-auto p-4 bg-white rounded shadow-md\">\n  <FilterPanel>\n    <EmailFilterOption/>\n    <EmailFilterOption/>\n    <EmailFilterOption/>\n  </FilterPanel>\n  <SortPanel>\n    <EmailSortOption/>\n    <EmailSortOption/>\n    <EmailSortOption/>\n  </SortPanel>\n</div>\n",
      "components": [
        {
          "name": "EmailFilterOption",
          "is_standalone": true,
          "description": "(standalone) - A single filter option with a checkbox and label.",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" id=\"{filterId}\" class=\"mr-2\">  <label for=\"{filterId}\" class=\"text-sm\">{filterLabel}</label></div>"
        },
        {
          "name": "EmailSortOption",
          "is_standalone": true,
          "description": "(standalone) - A single sort option with a radio button and label.",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"radio\" id=\"{sortId}\" class=\"mr-2\">  <label for=\"{sortId}\" class=\"text-sm\">{sortLabel}</label></div>"
        },
        {
          "name": "FilterPanel",
          "is_standalone": false,
          "description": "(takes children) - The main filter panel that contains all the filter options.",
          "html": "<div class=\"mb-4\">  <h5 class=\"text-lg mb-2\">Filters</h5>  {children}</div>"
        },
        {
          "name": "SortPanel",
          "is_standalone": false,
          "description": "(takes children) - The main sort panel that contains all the sort options.",
          "html": "<div class=\"mb-4\">  <h5 class=\"text-lg mb-2\">Sort by</h5>  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of filtering and sorting options for an email inbox. There should be a dropdown for selecting filters (e.g. \"Unread\", \"Starred\", etc.), a dropdown for selecting sorting methods (e.g. \"Oldest\", \"Newest\", etc.), and a button to apply the selected filters and sorting.",
      "html": "<div class=\"flex justify-between p-4\">\n  <FilterSortBar>\n    <FilterDropdown />\n    <SortDropdown />\n    <ApplyButton />\n  </FilterSortBar>\n</div>\n",
      "components": [
        {
          "name": "FilterDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting filters",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a filter</option>    <option value=\"unread\">Unread</option>    <option value=\"starred\">Starred</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "SortDropdown",
          "is_standalone": true,
          "description": "(standalone): a dropdown component for selecting sorting methods",
          "html": "<div class=\"relative inline-block\">  <select class=\"w-full p-2 pl-10 text-sm\">    <option value=\"\">Select a sort method</option>    <option value=\"oldest\">Oldest</option>    <option value=\"newest\">Newest</option>    <!-- more options -->  </select></div>"
        },
        {
          "name": "ApplyButton",
          "is_standalone": true,
          "description": "(standalone): a button to apply the selected filters and sorting",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Apply</button>"
        },
        {
          "name": "FilterSortBar",
          "is_standalone": false,
          "description": "(takes children): a container component to hold the filtering and sorting options",
          "html": "<div class=\"flex justify-between items-center\">{children}</div>"
        }
      ]
    }
  ],
  "GloballyUniqueIdentifiableElements": [
    {
      "description": "The UI should display a list of unique elements, each with a unique identifier, name, and description.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Globally Unique Identifiable Elements</h1>\n  <UniqueIdList>\n    <UniqueIdCard/>\n    <UniqueIdCard/>\n    <UniqueIdCard/>\n    <!-- Add more UniqueIdCard components here -->\n  </UniqueIdList>\n</div>\n",
      "components": [
        {
          "name": "UniqueIdCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single unique element's details.",
          "html": "<div class=\"bg-white shadow-md p-4 rounded mb-4\">  <h2 class=\"text-lg font-bold\">{element_name}</h2>  <p class=\"text-gray-600\">{element_description}</p>  <p class=\"text-sm text-gray-500\">Unique ID: {unique_id}</p></div>"
        },
        {
          "name": "UniqueIdList",
          "is_standalone": false,
          "description": "A component that takes children, which are multiple **UniqueIdCard** components.",
          "html": "<ul class=\"divide-y divide-gray-200\">  {children}</ul>"
        }
      ]
    }
  ],
  "Gallery/Image Lightboxes": [
    {
      "description": "A responsive gallery with multiple images, each having a lightbox effect when clicked. The lightbox will display the image in a larger size with a close button.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:pt-12\">\n  <ImageGallery />\n</div>\n",
      "components": [
        {
          "name": "ImageGallery",
          "is_standalone": true,
          "description": "A standalone component displaying a grid of images.",
          "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {images.map((image, index) => (    <GalleryImage key={index} src={image.src} alt={image.alt} />  ))}</div>"
        },
        {
          "name": "GalleryImage",
          "is_standalone": true,
          "description": "A standalone component representing a single image in the gallery.",
          "html": "<div className=\"cursor-pointer\">  <img src={src} alt={alt} className=\"w-full h-48 object-cover\" />  <Lightbox>    <img src={src} alt={alt} className=\"max-w-full h-auto\" />    <button className=\"absolute top-0 right-0 p-2 text-white\">      <span aria-label=\"Close\">{close_icon}</span>    </button>  </Lightbox></div>"
        },
        {
          "name": "Lightbox",
          "is_standalone": false,
          "description": "A component that takes children (the enlarged image) and displays it in a modal fashion.",
          "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A gallery of images with a lightbox feature that allows users to view larger versions of the images in a modal window.",
      "html": "<div className=\"container mx-auto p-4\">\n  <h2 className=\"text-2xl mb-4\">Gallery</h2>\n  <div className=\"flex flex-wrap -mx-2\">\n    <PhotoThumbnail src=\"image1.jpg\" alt=\"Image 1\" />\n    <PhotoThumbnail src=\"image2.jpg\" alt=\"Image 2\" />\n    <PhotoThumbnail src=\"image3.jpg\" alt=\"Image 3\" />\n    <!-- More thumbnails here... -->\n  </div>\n\n  <PhotoLightbox>\n    <img src=\"image1.jpg\" alt=\"Image 1\" />\n  </PhotoLightbox>\n  <PhotoLightbox>\n    <img src=\"image2.jpg\" alt=\"Image 2\" />\n  </PhotoLightbox>\n  <PhotoLightbox>\n    <img src=\"image3.jpg\" alt=\"Image 3\" />\n  </PhotoLightbox>\n  <!-- More lightboxes here... -->\n</div>\n",
      "components": [
        {
          "name": "PhotoThumbnail",
          "is_standalone": true,
          "description": "(standalone): A small image thumbnail.",
          "html": "<img className=\"w-32 h-32 object-cover rounded-md shadow-md\" src={src} alt={alt} />"
        },
        {
          "name": "PhotoLightbox",
          "is_standalone": false,
          "description": "(takes children): A modal window that displays a larger version of the image.",
          "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50\">  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">    <button className=\"absolute top-0 right-0 text-2xl text-white hover:text-gray-300\" onClick={() => { /* Close lightbox */ }}>      &times;    </button>    {children}  </div></div>"
        }
      ]
    },
    {
      "description": "A responsive gallery with multiple images, each having a lightbox effect when clicked. The lightbox will display the image in a larger size with a close button.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:pt-12\">\n  <ImageGallery />\n</div>\n",
      "components": [
        {
          "name": "ImageGallery",
          "is_standalone": true,
          "description": "A standalone component displaying a grid of images.",
          "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {images.map((image, index) => (    <GalleryImage key={index} src={image.src} alt={image.alt} />  ))}</div>"
        },
        {
          "name": "GalleryImage",
          "is_standalone": true,
          "description": "A standalone component representing a single image in the gallery.",
          "html": "<div className=\"cursor-pointer\">  <img src={src} alt={alt} className=\"w-full h-48 object-cover\" />  <Lightbox>    <img src={src} alt={alt} className=\"max-w-full h-auto\" />    <button className=\"absolute top-0 right-0 p-2 text-white\">      <span aria-label=\"Close\">{close_icon}</span>    </button>  </Lightbox></div>"
        },
        {
          "name": "Lightbox",
          "is_standalone": false,
          "description": "A component that takes children (the enlarged image) and displays it in a modal fashion.",
          "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive gallery with multiple images, each having a lightbox effect when clicked. The lightbox will display the image in a larger size with a close button.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:pt-12\">\n  <ImageGallery />\n</div>\n",
      "components": [
        {
          "name": "ImageGallery",
          "is_standalone": true,
          "description": "A standalone component displaying a grid of images.",
          "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {images.map((image, index) => (    <GalleryImage key={index} src={image.src} alt={image.alt} />  ))}</div>"
        },
        {
          "name": "GalleryImage",
          "is_standalone": true,
          "description": "A standalone component representing a single image in the gallery.",
          "html": "<div className=\"cursor-pointer\">  <img src={src} alt={alt} className=\"w-full h-48 object-cover\" />  <Lightbox>    <img src={src} alt={alt} className=\"max-w-full h-auto\" />    <button className=\"absolute top-0 right-0 p-2 text-white\">      <span aria-label=\"Close\">{close_icon}</span>    </button>  </Lightbox></div>"
        },
        {
          "name": "Lightbox",
          "is_standalone": false,
          "description": "A component that takes children (the enlarged image) and displays it in a modal fashion.",
          "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "A responsive gallery with multiple images, each having a lightbox effect when clicked. The lightbox will display the image in a larger size with a close button.",
      "html": "<div className=\"container mx-auto p-4 pt-6 md:p-6 lg:pt-12\">\n  <ImageGallery />\n</div>\n",
      "components": [
        {
          "name": "ImageGallery",
          "is_standalone": true,
          "description": "A standalone component displaying a grid of images.",
          "html": "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">  {images.map((image, index) => (    <GalleryImage key={index} src={image.src} alt={image.alt} />  ))}</div>"
        },
        {
          "name": "GalleryImage",
          "is_standalone": true,
          "description": "A standalone component representing a single image in the gallery.",
          "html": "<div className=\"cursor-pointer\">  <img src={src} alt={alt} className=\"w-full h-48 object-cover\" />  <Lightbox>    <img src={src} alt={alt} className=\"max-w-full h-auto\" />    <button className=\"absolute top-0 right-0 p-2 text-white\">      <span aria-label=\"Close\">{close_icon}</span>    </button>  </Lightbox></div>"
        },
        {
          "name": "Lightbox",
          "is_standalone": false,
          "description": "A component that takes children (the enlarged image) and displays it in a modal fashion.",
          "html": "<div className=\"fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex justify-center items-center\">  {children}</div>"
        }
      ]
    }
  ],
  "User Profiles and Achievements": [
    {
      "description": "The UI should be a user profile page that displays a user's profile information, achievements, and a way to edit their profile. The profile information should include a profile picture, name, and bio. The achievements section should display a list of achievements with icons, titles, and descriptions.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard />\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Achievements</h2>\n    <AchievementList>\n      <!-- achievement cards will be inserted here -->\n    </AchievementList>\n  </div>\n  <EditProfileButton />\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays a user's profile information, including a profile picture, name, and bio.",
          "html": "<div class=\"flex flex-col items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{username}\" class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "AchievementCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single achievement with an icon, title, and description.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{achievement_icon_url}\" alt=\"{achievement_title}\" class=\"w-6 h-6 mr-2\" />  <div>    <h3 class=\"text-lg font-bold\">{achievement_title}</h3>    <p class=\"text-gray-600\">{achievement_description}</p>  </div></div>"
        },
        {
          "name": "AchievementList",
          "is_standalone": false,
          "description": "A component that takes children (`AchievementCard`s) and displays them in a list.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "EditProfileButton",
          "is_standalone": true,
          "description": "A standalone component that allows the user to edit their profile.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit Profile</button>"
        }
      ]
    },
    {
      "description": "The UI should display a user's profile information and achievements in a clean and modern layout. The profile section should show the user's name, profile picture, and bio. The achievements section should display a list of badges or icons representing the user's accomplishments.",
      "html": "<div class=\"max-w-md mx-auto p-4\">\n  <UserProfileCard />\n  <h2 class=\"text-lg font-bold mb-2\">Achievements</h2>\n  <AchievementList>\n    <AchievementBadge />\n    <AchievementBadge />\n    <!-- more AchievementBadge components here -->\n  </AchievementList>\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays the user's profile information.",
          "html": "<div class=\"bg-white shadow-md rounded p-4\">  <img src={profile_picture_url} class=\"w-16 h-16 rounded-full\" alt=\"Profile Picture\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "AchievementBadge",
          "is_standalone": true,
          "description": "A standalone component that displays a single achievement badge.",
          "html": "<div class=\"bg-yellow-100 rounded p-2\">  <img src={badge_icon_url} class=\"w-8 h-8\" alt=\"Achievement Badge\" />  <span class=\"text-sm\">{badge_name}</span></div>"
        },
        {
          "name": "AchievementList",
          "is_standalone": false,
          "description": "A component that takes children (a list of `AchievementBadge` components).",
          "html": "<ul class=\"flex flex-wrap justify-center\">  {children}</ul>"
        }
      ]
    },
    {
      "description": "The UI should be a user profile page that displays a user's profile information, achievements, and a way to edit their profile. The profile information should include a profile picture, name, and bio. The achievements section should display a list of achievements with icons, titles, and descriptions.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard />\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Achievements</h2>\n    <AchievementList>\n      <!-- achievement cards will be inserted here -->\n    </AchievementList>\n  </div>\n  <EditProfileButton />\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays a user's profile information, including a profile picture, name, and bio.",
          "html": "<div class=\"flex flex-col items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{username}\" class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "AchievementCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single achievement with an icon, title, and description.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{achievement_icon_url}\" alt=\"{achievement_title}\" class=\"w-6 h-6 mr-2\" />  <div>    <h3 class=\"text-lg font-bold\">{achievement_title}</h3>    <p class=\"text-gray-600\">{achievement_description}</p>  </div></div>"
        },
        {
          "name": "AchievementList",
          "is_standalone": false,
          "description": "A component that takes children (`AchievementCard`s) and displays them in a list.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "EditProfileButton",
          "is_standalone": true,
          "description": "A standalone component that allows the user to edit their profile.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit Profile</button>"
        }
      ]
    },
    {
      "description": "The UI should be a user profile page that displays a user's profile information, achievements, and a way to edit their profile. The profile information should include a profile picture, name, and bio. The achievements section should display a list of achievements with icons, titles, and descriptions.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard />\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Achievements</h2>\n    <AchievementList>\n      <!-- achievement cards will be inserted here -->\n    </AchievementList>\n  </div>\n  <EditProfileButton />\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays a user's profile information, including a profile picture, name, and bio.",
          "html": "<div class=\"flex flex-col items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{username}\" class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "AchievementCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single achievement with an icon, title, and description.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{achievement_icon_url}\" alt=\"{achievement_title}\" class=\"w-6 h-6 mr-2\" />  <div>    <h3 class=\"text-lg font-bold\">{achievement_title}</h3>    <p class=\"text-gray-600\">{achievement_description}</p>  </div></div>"
        },
        {
          "name": "AchievementList",
          "is_standalone": false,
          "description": "A component that takes children (`AchievementCard`s) and displays them in a list.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "EditProfileButton",
          "is_standalone": true,
          "description": "A standalone component that allows the user to edit their profile.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit Profile</button>"
        }
      ]
    },
    {
      "description": "The UI should be a user profile page that displays a user's profile information, achievements, and a way to edit their profile. The profile information should include a profile picture, name, and bio. The achievements section should display a list of achievements with icons, titles, and descriptions.",
      "html": "<div class=\"max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12\">\n  <UserProfileCard />\n  <div class=\"mt-6\">\n    <h2 class=\"text-lg font-bold\">Achievements</h2>\n    <AchievementList>\n      <!-- achievement cards will be inserted here -->\n    </AchievementList>\n  </div>\n  <EditProfileButton />\n</div>\n",
      "components": [
        {
          "name": "UserProfileCard",
          "is_standalone": true,
          "description": "A standalone component that displays a user's profile information, including a profile picture, name, and bio.",
          "html": "<div class=\"flex flex-col items-center mb-4\">  <img src=\"{profile_picture_url}\" alt=\"{username}\" class=\"w-24 h-24 rounded-full mb-2\" />  <h2 class=\"text-lg font-bold\">{username}</h2>  <p class=\"text-gray-600\">{bio}</p></div>"
        },
        {
          "name": "AchievementCard",
          "is_standalone": true,
          "description": "A standalone component that displays a single achievement with an icon, title, and description.",
          "html": "<div class=\"flex items-center mb-4\">  <img src=\"{achievement_icon_url}\" alt=\"{achievement_title}\" class=\"w-6 h-6 mr-2\" />  <div>    <h3 class=\"text-lg font-bold\">{achievement_title}</h3>    <p class=\"text-gray-600\">{achievement_description}</p>  </div></div>"
        },
        {
          "name": "AchievementList",
          "is_standalone": false,
          "description": "A component that takes children (`AchievementCard`s) and displays them in a list.",
          "html": "<ul class=\"list-none p-0 m-0\">  {children}</ul>"
        },
        {
          "name": "EditProfileButton",
          "is_standalone": true,
          "description": "A standalone component that allows the user to edit their profile.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Edit Profile</button>"
        }
      ]
    }
  ],
  "Revealing/Hover Effects": [
    {
      "description": "The UI should display a set of cards with hover effects. When the user hovers over a card, the card's background color changes, and an icon appears. The cards should be arranged in a responsive grid layout, with two columns on larger screens and one column on smaller screens.",
      "html": "<!-- outer container with responsive grid layout -->\n<div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n  <!-- first card -->\n  <RevealCard />\n  <!-- second card -->\n  <RevealCard />\n  <!-- third card -->\n  <RevealCard />\n  <!-- and so on... -->\n</div>\n",
      "components": [
        {
          "name": "RevealCard",
          "is_standalone": true,
          "description": "a standalone component that represents a single card with hover effect.",
          "html": "<!-- card container with hover effect --><div class=\"bg-white shadow-md rounded overflow-hidden hover:bg-purple-500 transition duration-300\">  <!-- card content -->  <h2 class=\"text-lg font-bold\">{card_title}</h2>  <p class=\"text-gray-600\">{card_description}</p>  <!-- reveal icon on hover -->  <RevealIcon class=\"hidden hover:block\" /></div>"
        },
        {
          "name": "RevealIcon",
          "is_standalone": true,
          "description": "a standalone component that represents the icon that appears on hover.",
          "html": "<!-- icon element with styles for hover effect --><i class=\"fas fa-star text-yellow-500 text-2xl hover:text-white transition duration-300\" />"
        }
      ]
    },
    {
      "description": "The UI should display a container with a revealing hover effect. When the user hovers over the container, a colored background and a heading should be revealed.",
      "html": "<div class=\"relative w-full h-48 md:h-64 lg:h-80 XL:h-96\">\n  <RevealContainer/>\n</div>\n",
      "components": [
        {
          "name": "RevealContainer",
          "is_standalone": true,
          "description": "standalone component that wraps the revealing hover effect.",
          "html": "<div  class=\"absolute inset-0 z-10 overflow-hidden bg-transparent transition duration-300 ease-in-out hover:bg-orange-500 hover:opacity-90\">  <RevealContent/></div>"
        },
        {
          "name": "RevealContent",
          "is_standalone": true,
          "description": "standalone component that displays the revealed content (heading and background).",
          "html": "<div class=\"flex items-center justify-center h-full\">  <h2 class=\"text-2xl font-bold\">{heading_text}</h2></div>"
        }
      ]
    },
    {
      "description": "The UI should display a set of cards with hover effects. When the user hovers over a card, the card's background color changes, and an icon appears. The cards should be arranged in a responsive grid layout, with two columns on larger screens and one column on smaller screens.",
      "html": "<!-- outer container with responsive grid layout -->\n<div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n  <!-- first card -->\n  <RevealCard />\n  <!-- second card -->\n  <RevealCard />\n  <!-- third card -->\n  <RevealCard />\n  <!-- and so on... -->\n</div>\n",
      "components": [
        {
          "name": "RevealCard",
          "is_standalone": true,
          "description": "a standalone component that represents a single card with hover effect.",
          "html": "<!-- card container with hover effect --><div class=\"bg-white shadow-md rounded overflow-hidden hover:bg-purple-500 transition duration-300\">  <!-- card content -->  <h2 class=\"text-lg font-bold\">{card_title}</h2>  <p class=\"text-gray-600\">{card_description}</p>  <!-- reveal icon on hover -->  <RevealIcon class=\"hidden hover:block\" /></div>"
        },
        {
          "name": "RevealIcon",
          "is_standalone": true,
          "description": "a standalone component that represents the icon that appears on hover.",
          "html": "<!-- icon element with styles for hover effect --><i class=\"fas fa-star text-yellow-500 text-2xl hover:text-white transition duration-300\" />"
        }
      ]
    },
    {
      "description": "The UI should display a set of cards with hover effects. When the user hovers over a card, the card's background color changes, and an icon appears. The cards should be arranged in a responsive grid layout, with two columns on larger screens and one column on smaller screens.",
      "html": "<!-- outer container with responsive grid layout -->\n<div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n  <!-- first card -->\n  <RevealCard />\n  <!-- second card -->\n  <RevealCard />\n  <!-- third card -->\n  <RevealCard />\n  <!-- and so on... -->\n</div>\n",
      "components": [
        {
          "name": "RevealCard",
          "is_standalone": true,
          "description": "a standalone component that represents a single card with hover effect.",
          "html": "<!-- card container with hover effect --><div class=\"bg-white shadow-md rounded overflow-hidden hover:bg-purple-500 transition duration-300\">  <!-- card content -->  <h2 class=\"text-lg font-bold\">{card_title}</h2>  <p class=\"text-gray-600\">{card_description}</p>  <!-- reveal icon on hover -->  <RevealIcon class=\"hidden hover:block\" /></div>"
        },
        {
          "name": "RevealIcon",
          "is_standalone": true,
          "description": "a standalone component that represents the icon that appears on hover.",
          "html": "<!-- icon element with styles for hover effect --><i class=\"fas fa-star text-yellow-500 text-2xl hover:text-white transition duration-300\" />"
        }
      ]
    }
  ],
  "Upvote and downvote buttons for rating content": [
    {
      "description": "The UI should be a pair of buttons for upvoting and downvoting content, with a count of the total votes displayed next to them. The buttons should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <VoteControl>\n    <VoteButton direction=\"up\" />\n    <VoteCount />\n    <VoteButton direction=\"down\" />\n  </VoteControl>\n</div>\n",
      "components": [
        {
          "name": "VoteButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {direction === 'up' ? '▲' : '▼'}</button>"
        },
        {
          "name": "VoteCount",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-600\">{vote_count}</span>"
        },
        {
          "name": "VoteControl",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"flex items-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a pair of buttons for upvoting and downvoting content, with a count of the total votes displayed next to them. The buttons should be responsive and mobile-friendly.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <VoteControl>\n    <VoteButton direction=\"up\" />\n    <VoteCount />\n    <VoteButton direction=\"down\" />\n  </VoteControl>\n</div>\n",
      "components": [
        {
          "name": "VoteButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  {direction === 'up' ? '▲' : '▼'}</button>"
        },
        {
          "name": "VoteCount",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<span class=\"text-gray-600\">{vote_count}</span>"
        },
        {
          "name": "VoteControl",
          "is_standalone": false,
          "description": "(takes children)",
          "html": "<div class=\"flex items-center\">  {children}</div>"
        }
      ]
    }
  ],
  "Article Title: Headline of individual post": [
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    },
    {
      "description": "The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.",
      "html": "<header class=\"max-w-md mx-auto p-4\">\n  <PostHeadline/>\n</header>\n",
      "components": [
        {
          "name": "PostHeadline",
          "is_standalone": true,
          "description": "standalone component",
          "html": "<h1 class=\"text-3xl font-bold mb-2\">{post_title}</h1>"
        }
      ]
    }
  ],
  "Send and save draft buttons": [
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "A horizontal row with two adjacent buttons, a \"Send\" button and a \"Save Draft\" button.",
      "html": "<div class=\"flex justify-end\">\n  <SendButton/>\n  <SaveDraftButton class=\"ml-2\"/>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "(standalone)",
          "html": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  Save Draft</button>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    },
    {
      "description": "The UI should have two buttons, \"Send\" and \"Save Draft\", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.",
      "html": "<div class=\"flex flex-wrap justify-center mb-4\">\n  <ButtonGroup>\n    <SendButton/>\n    <SaveDraftButton/>\n  </ButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SendButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">Send</button>"
        },
        {
          "name": "SaveDraftButton",
          "is_standalone": true,
          "description": "a standalone button component.",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">Save Draft</button>"
        },
        {
          "name": "ButtonGroup",
          "is_standalone": false,
          "description": "a component that takes two children.",
          "html": "<div class=\"flex justify-center mb-4\">{children}</div>"
        }
      ]
    }
  ],
  "Customizable Themes: Brand your interface": [
    {
      "description": "A menu with a list of theme options, where each option displays a preview of the theme and allows the user to select it.",
      "html": "<div class=\"w-full p-4 bg-gray-100 rounded\">\n  <h2 class=\"text-lg font-bold mb-2\">Customizable Themes</h2>\n  <ThemeSelector>\n    <ThemeOption />\n    <ThemeOption />\n    <ThemeOption />\n    <!-- more theme options here -->\n  </ThemeSelector>\n</div>\n",
      "components": [
        {
          "name": "ThemeOption",
          "is_standalone": true,
          "description": "(standalone): a single theme option with a preview and a checkbox to select it",
          "html": "<div class=\"flex items-center mb-2\">  <input type=\"checkbox\" class=\"mr-2\" />  <div class=\"w-12 h-6 bg-{theme_color} mr-2\" />  <span class=\"text-sm\">{theme_name}</span></div>"
        },
        {
          "name": "ThemeSelector",
          "is_standalone": false,
          "description": "(takes children): a container for a list of theme options",
          "html": "<ul class=\"list-none mb-0\">{children}</ul>"
        }
      ]
    }
  ],
  "Webcam/Camera Interfaces": [
    {
      "description": "The UI should display a webcam/video camera interface with a live feed, a capture button, and a toggle switch to switch between the front and rear cameras.",
      "html": "<div class=\"flex flex-col items-center h-screen\">\n  <WebcamFeed />\n  <div class=\"flex justify-center mb-4\">\n    <CaptureButton />\n    <CameraToggle />\n  </div>\n</div>\n",
      "components": [
        {
          "name": "WebcamFeed",
          "is_standalone": true,
          "description": "(standalone) - displays the live webcam feed",
          "html": "<div class=\"w-full h-full\">  <video class=\"w-full h-full object-cover\" id=\"video\"></video></div>"
        },
        {
          "name": "CaptureButton",
          "is_standalone": true,
          "description": "(standalone) - a button to capture a photo/video",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Capture</button>"
        },
        {
          "name": "CameraToggle",
          "is_standalone": true,
          "description": "(standalone) - a toggle switch to switch between the front and rear cameras",
          "html": "<label class=\"switch\">  <input type=\"checkbox\" />  <span class=\"slider round\"></span>  Front/Rear</label>"
        }
      ]
    }
  ],
  "Social Sharing: Buttons for sharing content": [
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.",
      "html": "<div class=\"flex justify-center sm:flex-row flex-wrap\">\n  <SocialShareButtonGroup>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <SocialShareButton/>\n    <!-- Add more social media buttons here -->\n  </SocialShareButtonGroup>\n</div>\n",
      "components": [
        {
          "name": "SocialShareButton",
          "is_standalone": true,
          "description": "Standalone component, represents a single social media sharing button.",
          "html": "<button class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded\">  <i class={`fab fa-${social_media_icon}`}></i>  <span class=\"ml-2\">{social_media_label}</span></button>"
        },
        {
          "name": "SocialShareButtonGroup",
          "is_standalone": false,
          "description": "Component that takes children, represents the container for the social media sharing buttons.",
          "html": "<div class=\"flex flex-wrap justify-center md:flex-row\">  {children}</div>"
        }
      ]
    }
  ],
  "Add to cart and wishlist buttons": [
    {
      "description": "The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ButtonContainer>\n    <AddToCartButton />\n    <AddToWishlistButton />\n  </ButtonContainer>\n</div>\n",
      "components": [
        {
          "name": "AddToCartButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
        },
        {
          "name": "AddToWishlistButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
        },
        {
          "name": "ButtonContainer",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"flex justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ButtonContainer>\n    <AddToCartButton />\n    <AddToWishlistButton />\n  </ButtonContainer>\n</div>\n",
      "components": [
        {
          "name": "AddToCartButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
        },
        {
          "name": "AddToWishlistButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
        },
        {
          "name": "ButtonContainer",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"flex justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ButtonContainer>\n    <AddToCartButton />\n    <AddToWishlistButton />\n  </ButtonContainer>\n</div>\n",
      "components": [
        {
          "name": "AddToCartButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
        },
        {
          "name": "AddToWishlistButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
        },
        {
          "name": "ButtonContainer",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"flex justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ButtonContainer>\n    <AddToCartButton />\n    <AddToWishlistButton />\n  </ButtonContainer>\n</div>\n",
      "components": [
        {
          "name": "AddToCartButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
        },
        {
          "name": "AddToWishlistButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
        },
        {
          "name": "ButtonContainer",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"flex justify-center\">  {children}</div>"
        }
      ]
    },
    {
      "description": "The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.",
      "html": "<div class=\"flex justify-center mb-4\">\n  <ButtonContainer>\n    <AddToCartButton />\n    <AddToWishlistButton />\n  </ButtonContainer>\n</div>\n",
      "components": [
        {
          "name": "AddToCartButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded\">  Add to Cart</button>"
        },
        {
          "name": "AddToWishlistButton",
          "is_standalone": true,
          "description": "standalone",
          "html": "<button class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">  Add to Wishlist</button>"
        },
        {
          "name": "ButtonContainer",
          "is_standalone": false,
          "description": "takes children",
          "html": "<div class=\"flex justify-center\">  {children}</div>"
        }
      ]
    }
  ]
}