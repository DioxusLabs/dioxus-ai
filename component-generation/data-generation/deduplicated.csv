input,output
Author bio display,"description:
The UI should display an author's bio, including their name, profile picture, bio text, and social media links. The layout should be responsive, with the profile picture above the bio text on mobile devices and to the left of the bio text on larger screens.
components:
- SocialMediaLinks: standalone component
- ProfilePicture: standalone component
html:
<div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/3 xl:w-1/4 px-4 mb-4 md:mb-0""><ProfilePicture/></div><div class=""w-full md:w-2/3 xl:w-3/4 px-4""><h2 class=""text-lg font-bold"">{author_name}</h2><p class=""text-gray-600"">{bio_text}</p><SocialMediaLinks/></div></div>
component html:
SocialMediaLinks:
<ul class=""flex justify-start mb-4""><li class=""mr-4""><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer"">Twitter</a></li><li class=""mr-4""><a href=""{linkedin_url}"" target=""_blank"" rel=""noopener noreferrer"">LinkedIn</a></li><li><a href=""{github_url}"" target=""_blank"" rel=""noopener noreferrer"">GitHub</a></li></ul>
ProfilePicture:
<img class=""w-24 h-24 rounded-full mb-4"" src=""{profile_picture_url}"" alt=""{author_name}'s profile picture""/>"
Venue information display,"description:
The UI should display the essential information about a venue, including its name, address, and a brief description. The layout should be responsive, mobile-first, and accessible, with clear typography and sufficient whitespace.
components:
- VenueHeader: Standalone component to display the venue's name and address.
- VenueDescription: Standalone component to display a brief description of the venue.
html:
<div class=""max-w-md mx-auto p-4""><VenueHeader/><VenueDescription/></div>
component html:
VenueHeader:
<div class=""flex justify-between mb-2""><h2 class=""text-lg font-bold"">{venue_name}</h2><p class=""text-gray-600"">{venue_address}</p></div>
VenueDescription:
<p class=""text-gray-600"">{venue_description}</p>"
Breadcrumb navigation for category and subreddits,"description:
The UI should display a breadcrumb navigation for categories and subreddits. Each item in the breadcrumb should display the category name and have a separator (e.g., `/`) between each item.
components:
- BreadCrumb: standalone component that renders a single breadcrumb item.
- BreadCrumbNavigation: container component that takes children (multiple `BreadCrumb` components).
html:
<nav class=""flex items-center mb-4""><BreadCrumbNavigation><BreadCrumb/><BreadCrumb/><!-- Add more Breadcrumbs as needed --></BreadCrumbNavigation></nav>
component html:
BreadCrumb:
<li class=""mr-2""><a href=""{category_url}"" class=""text-gray-600 hover:text-gray-900"">{category_name}</a><span class=""text-gray-400"">/</span></li>
BreadCrumbNavigation:
<ul class=""flex"">{children}</ul>"
Video Players/Embeds,"description:
The UI should display a responsive video player/embed that adapts to different screen sizes. The video player should have a maximum width and be centered horizontally on the page. The video title and video description should be displayed below the video player.
components:
- VideoPlayer: A standalone component that wraps the video player/embed.
- VideoTitle: A standalone component that displays the video title.
- VideoDescription: A standalone component that displays the video description.
html:
<div class=""max-w-md mx-auto""><VideoPlayer/><VideoTitle/><VideoDescription/></div>
component html:
VideoPlayer:
<div class=""video-player aspect-w-16 aspect-h-9""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
VideoDescription:
<p class=""text-sm"">{video_description}</p>"
A component to display the number of comments on a news story,"description:
The component should display the number of comments on a news story in a clear and concise manner. It should be easily readable and stand out from the rest of the UI. On smaller screens, it should be compact and easy to tap on mobile devices. On larger screens, it should be more prominent and have more visual hierarchy.
components:
- CommentCount: (Standalone): Displays the number of comments on a news story.
html:
<div class=""flex justify-center mb-4""><CommentCount/></div>
component html:
CommentCount:
<span class=""bg-orange-100 text-orange-800 py-1 px-2 rounded-full text-sm sm:text-base md:text-lg lg:text-xl"">{comment_count} comments</span>"
"Section header with a white background, blue title text, and a subtle gradient effect","description:
The UI should have a clean and modern design, with a white background to provide a neutral background for the section header. The title text should be in blue to draw attention to the section. A subtle gradient effect should add depth to the design. The section header should be responsive, with a smaller font size on mobile devices and a larger font size on larger screens.
components:
- SectionHeader: (Takes Children): A section header component that contains a title and optional children. On mobile devices, the title font size should be `lg` and the padding should be `py-2`. On larger screens, the title font size should be `xl` and the padding should be `py-4`. The background should have a subtle gradient effect.
html:
<SectionHeader>{children}</SectionHeader>
component html:
SectionHeader:
<div class=""bg-gradient-to-r from-gray-100 to-white py-2 md:py-4""><h2 class=""text-blue-700 text-lg md:text-xl"">{children}</h2></div>"
Testimonial quote text component with a italic font and white color,"description:
The Testimonial Quote Text component should be a block of italic text with a white color. The text should be wrapped in a container with a subtle background color and a slight shadow to give it a quote-like appearance. The text should be large enough to be readable on different screen sizes.
components:
- TestimonialQuoteText: (Takes Children): This component wraps the quote text and provides the styling for it.
html:
<div class=""md:w-1/2 lg:w-1/3 xl:w-1/4 p-4 bg-gray-800 rounded-md shadow-md""><TestimonialQuoteText><!-- Quote text will be rendered here --></TestimonialQuoteText></div>
component html:
TestimonialQuoteText:
<p class=""text-white font-italic text-2xl md:text-3xl lg:text-4xl xl:text-5xl"">{children}</p>"
Ruby text,"description:
The UI should feature a heading with a main text that has a pronunciation guide right above it using the ruby annotation. This is commonly used to aid in reading East Asian characters by providing phonetic information. The UI should be simple, clear, and visually distinct to separate ruby text from the main text.
components:
- RubyText: (Standalone): This component will display the main text with its corresponding pronunciation text (ruby) above it.
- PageTitle: (Standalone): Displays the main heading of the page.
html:
<div class=""container mx-auto p-4""><PageTitle/><div class=""text-center mt-8""><RubyText/></div></div>
component html:
RubyText:
<p class=""text-lg leading-normal""><ruby>{base_characters} <rt>{pronunciation}</rt></ruby></p>
PageTitle:
<h1 class=""text-2xl font-bold text-gray-800"">Understanding Ruby Annotations </h1>"
Coupon/Discount Codes,"description:
A clean and simple coupon/discount code input field with a submit button. The input field should be accompanied by a label and a description. The submit button should be prominent and accessible.
components:
- CouponCodeInput: Standalone component that renders a single input field for the coupon/discount code.
- SubmitButton: Standalone component that renders a submit button.
- CouponCodeLabel: Standalone component that renders a label for the input field.
- DescriptionText: Standalone component that renders a small text description.
html:
<div class=""max-w-md mx-auto p-4""><form><CouponCodeLabel/><CouponCodeInput/><DescriptionText/><SubmitButton/></form></div>
component html:
CouponCodeInput:
<input type=""text"" id=""coupon-code"" class=""block w-full pl-10 text-sm text-gray-700""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Code</button>
CouponCodeLabel:
<label for=""coupon-code"" class=""block text-sm font-bold mb-2"">Enter your coupon code:</label>
DescriptionText:
<p class=""text-xs text-gray-500"">Enter a valid coupon code to receive your discount.</p>"
Hero Video: Engage visitors with a captivating video,"description:
The Hero Video component should take up the full width and height of the viewport, pushing the rest of the content below the fold. It should have a dark overlay to enhance the video's visibility, and a prominent call-to-action (CTA) button in the center.
components:
- HeroVideoContainer: (standalone): Wraps the entire Hero Video section.
- VideoOverlay: (standalone): Dark overlay for the video.
- HeroVideo: (standalone): The actual video element.
- CallToAction: (standalone): The prominent CTA button.
html:
<div class=""min-h-screen flex items-center justify-center""><HeroVideoContainer/></div>
component html:
HeroVideoContainer:
<div class=""absolute top-0 left-0 w-full h-full""><VideoOverlay/><HeroVideo/><CallToAction/></div>
VideoOverlay:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-900 opacity-75""></div>
HeroVideo:
<video class=""w-full h-full object-cover"" autoplay muted loop><source src=""{video_source}"" type=""video/mp4""/></video>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
"Horizontal separator component, a thin white line with a subtle shadow effect","description:
The Horizontal Separator component should be a thin, white line with a subtle shadow effect to add depth and dimension. It should scale well on different screen sizes and be accessible on mobile devices.
components:
- HorizontalSeparator: (Standalone): A thin, white line with a subtle shadow effect to separate content horizontally.
html:
<div class=""container mx-auto p-4""><!-- Content above the separator --><HorizontalSeparator/><!-- Content below the separator --></div>
component html:
HorizontalSeparator:
<hr class=""border-white shadow-sm""/>"
Post Editing and Formatting Tools,"description:
The UI should consist of a simple, clean layout featuring a section for post editing with a text area and a section below or beside it (depending on the screen size) for formatting tools like buttons for bold, italic, underline, and list creation. This should be mobile responsive, adjusting the layout based on the device size.
components:
- TextAreaEditor: (Standalone): A text input area where users can type in their posts.
- FormattingToolbar: (Standalone): A toolbar containing buttons for applying various text formats like bold, italic, underline, and list options.
html:
<div class=""container mx-auto px-4""><div class=""editor flex flex-col md:flex-row""><TextAreaEditor/><FormattingToolbar/></div></div>
component html:
TextAreaEditor:
<div class=""text-area-editor flex flex-col flex-grow p-4""><label for=""postContent"" class=""font-semibold mb-2"">Your Post</label><textarea id=""postContent"" class=""form-textarea mt-1 block w-full border rounded-lg shadow-sm"" rows=""10""></textarea></div>
FormattingToolbar:
<div class=""formatting-toolbar p-4""><div class=""flex space-x-2 justify-center md:justify-start""><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Bold</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Italic</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>Underline</span></button><button class=""bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded inline-flex items-center""><span>List</span></button></div></div>"
A search bar with a magnifying glass icon and a white background,"description:
The search bar should be a rounded rectangle with a white background and a magnifying glass icon on the left side. The text input should take up most of the width, and the icon should be slightly smaller than the input field. On smaller screens, the search bar should be narrower and taller to accommodate the smaller screen size.
components:
- SearchBar: (Takes Children): The main search bar component that contains the magnifying glass icon and the text input.
- MagnifyingGlassIcon: (Standalone): The icon component that represents the magnifying glass.
html:
<div class=""flex justify-center mb-4""><SearchBar><MagnifyingGlassIcon/><input type=""text"" class=""w-full pl-10"" placeholder=""Search...""/></SearchBar></div>
component html:
SearchBar:
<div class=""bg-white shadow-md rounded-md p-2 flex items-center"">{children}</div>
MagnifyingGlassIcon:
<svg><!-- magnifying glass --></svg>"
"A component that displays a list of sports-related statistics (e.g. ""Most Points Scored in a Game"") with numbers and labels","description:
The UI should be a clean and simple list of statistics with bold, eye-catching numbers and brief labels. The layout should adapt to different screen sizes, with the statistics stacked vertically on smaller screens and arranged in a grid on larger screens. The color scheme should be a calming blue and white theme with highlights of bright, energetic orange to draw attention to the most impressive statistics.
components:
- StatisticList: (Takes Children): A wrapper component that contains multiple StatisticItems. It should have a subtle shadow and a subtle gradient to give it depth.
html:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md""><StatisticList><!-- multiple StatisticItem components will be rendered here --></StatisticList></div>
component html:
StatisticList:
<div class=""p-4 bg-white rounded-lg shadow-md""><div class=""grid grid-cols-1 sm:grid-cols-3 gap-4"">{children} </div></div>"
Trending topics display for popular discussions,"description:
The UI should display a list of trending topics, each with a title, a brief description, and a call-to-action button.
components:
- TrendingTopicList: component that takes children, which will be a list of `TrendingTopicCard` components
html:
<div class=""container mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- list of TrendingTopicCard components will go here --></TrendingTopicList></div>
component html:
TrendingTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Author Bio: Information about article's author,"description:
The UI should display the author's name, profile picture, and a brief bio. It should be visually appealing and easy to read.
components:
- AuthorProfilePicture: A standalone component that displays the author's profile picture.
- AuthorBio: A standalone component that displays the author's bio.
- AuthorName: A standalone component that displays the author's name.
- AuthorBioContainer: A component that takes children, which wraps around the author's profile picture, name, and bio.
html:
<div class=""container mx-auto p-4 lg:p-6""><AuthorBioContainer><AuthorProfilePicture/><AuthorName/><AuthorBio/></AuthorBioContainer></div>
component html:
AuthorProfilePicture:
<img src={author_profile_picture_url} alt={author_name} class=""w-16 h-16 rounded-full object-cover""/>
AuthorBio:
<p class=""text-gray-600"">{author_bio}</p>
AuthorName:
<h2 class=""text-lg font-bold"">{author_name}</h2>
AuthorBioContainer:
<div class=""flex flex-col items-center lg:flex-row lg:items-start lg:justify-between"">{children}</div>"
"A course author component with a name, photo, and bio","description:
The UI should have a clean and modern design, with a focus on making the course author's information stand out. The component should be responsive, with the author's photo, name, and bio rearranging and resizing to fit different screen sizes. The background should be a light, neutral color, with subtle shadows and highlights to add depth. The author's name should be prominent, with a larger font size and a bold weight. The bio should be concise and easy to read.
components:
- AuthorComponent: (Takes Children): A container component that holds the author's information.
- AuthorPhoto: (Standalone): Displays the author's photo.
- AuthorName: (Standalone): Displays the author's name.
- AuthorBio: (Takes Children): Displays the author's bio.
html:
<div class=""max-w-md mx-auto p-4 pt-6 bg-white rounded-lg shadow-md""><AuthorComponent><AuthorPhoto/><AuthorName/><AuthorBio>{children}</AuthorBio></AuthorComponent></div>
component html:
AuthorComponent:
<div class=""flex flex-col md:flex-row md:items-center mb-4"">{children}</div>
AuthorPhoto:
<img src={photo_url} alt={author_name} class=""w-24 h-24 rounded-full md:w-32 md:h-32 md:m-4""/>
AuthorName:
<h2 class=""text-2xl font-bold mb-2"">{author_name}</h2>
AuthorBio:
<p class=""text-lg text-gray-600"">{children}</p>"
"Graphic symbol representing the brand or website, usually clickable","description:
The UI should display a logo that is clickable, responding to different screen sizes, and is accessible.
components:
- Logo: a standalone component representing the brand or website.
html:
<a href=""/"" aria-label=""Home""><Logo/></a>
component html:
Logo:
<img src={logo_src} alt={logo_alt} class=""w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16""/><!-- logo_src: the URL of the logo image, logo_alt: the alt text of the logo -->"
Product Rating Distribution,"description:
The UI should display a product rating distribution chart, which shows the number of ratings for each rating value (e.g., 1-5 stars). The chart should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- RatingDistributionChart: Standalone component that displays the rating distribution chart.
- RatingBar: Standalone component that represents a single rating bar in the chart.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Rating Distribution</h2><RatingDistributionChart/></div>
component html:
RatingDistributionChart:
<div class=""flex flex-wrap justify-center mb-4"">{ratingBars}</div>
RatingBar:
<div class=""w-full md:w-1/2 xl:w-1/3 p-2""><div class=""bg-gray-200 h-4 rounded-full""><div class=""bg-yellow-500 h-4 rounded-full"" style=""`width: {percentage}%;""}></div></div><p class=""text-sm"">{ratingValue} stars ({count} ratings)</p></div>"
"Small image or icon representing the user, often used for profile pictures","description:
- The UI should feature a circular profile picture, typically used to represent a user. This image should be responsive and adapt to different screen sizes while maintaining its aspect ratio.
components:
- UserProfileImage: A standalone component that displays a circular user profile image.
html:
<UserProfileImage/>
component html:
UserProfileImage:
<!-- Circular User Profile Image --><img src=""{user_profile_url}"" alt=""User profile"" class=""w-16 h-16 md:w-24 md:h-24 lg:w-32 lg:h-32 rounded-full object-cover"">"
Playlist generator tool,"description:
The UI should be a simple, responsive, and accessible web page that allows users to generate a playlist based on their preferences. The page should have a header with a title and a brief description, a form to collect user preferences, a button to generate the playlist, and a section to display the generated playlist.
components:
- HeaderComponent: A standalone component that displays the title and description of the playlist generator tool.
- FormComponent: A standalone component that contains a form to collect user preferences, including input fields for genre, mood, and number of tracks.
- GenerateButtonComponent: A standalone component that displays a button to generate the playlist.
- PlaylistComponent: A component that takes children to display the generated playlist, including a list of tracks with artist, song title, and duration.
html:
<div class=""max-w-md mx-auto p-4""><HeaderComponent/><FormComponent/><GenerateButtonComponent/><PlaylistComponent><!-- playlist content will be rendered here --></PlaylistComponent></div>
component html:
HeaderComponent:
<header class=""mb-4""><h1 class=""text-2xl"">Playlist Generator</h1><p class=""text-lg"">Generate a playlist based on your preferences!</p></header>
FormComponent:
<form class=""flex flex-wrap mb-4""><label for=""genre"" class=""w-full md:w-1/2 mb-2"">Genre:</label><select id=""genre"" class=""w-full md:w-1/2 p-2 mb-2""><option value="""">Select a genre</option>{genre_options} </select><label for=""mood"" class=""w-full md:w-1/2 mb-2"">Mood:</label><select id=""mood"" class=""w-full md:w-1/2 p-2 mb-2""><option value="""">Select a mood</option>{mood_options} </select><label for=""num-tracks"" class=""w-full md:w-1/2 mb-2"">Number of tracks:</label><input type=""number"" id=""num-tracks"" class=""w-full md:w-1/2 p-2 mb-2"" value=""10""/></form>
GenerateButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Generate Playlist</button>
PlaylistComponent:
<div class=""flex flex-wrap"">{children}</div>"
Highlighted box drawing attention to important information or announcements,"description:
The UI should feature a highlighted box that stands out visually from the rest of the content, meant to draw attention to important information or announcements. This box should include a title and the body text. The design should be noticeable but not overwhelming and should be easily distinguishable due to its background color, padding, and possibly a border.
components:
- HighlightedBox: (Standalone)**: This component will contain the major elements of the highlighted information box, including a title and body text.
html:
<div class=""container mx-auto p-4""><HighlightedBox/></div>
component html:
HighlightedBox:
<div role=""alert"" class=""bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4""><h2 class=""font-bold"">Important Announcement</h2><p>{announcement_body}</p></div>"
Personal information form,"description:
The UI should be a simple form with labels and input fields for personal information such as name, email, phone number, and address. The form should be responsive and mobile-friendly.
components:
- FormHeader: A standalone component that displays the title of the form.
- FormField: A component that takes a label and an input field as children.
- InputField: A standalone component that renders a simple text input field.
- AddressField: A standalone component that renders a grouped input field for address information.
- SubmitButton: A standalone component that renders a submit button.
html:
<form class=""max-w-md mx-auto p-4 bg-white shadow-md rounded""><FormHeader/><div class=""flex flex-wrap -mx-3 mb-6""><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Name</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Email</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Phone</label><InputField/></FormField></div><AddressField/><SubmitButton/></form>
component html:
FormHeader:
<h2 class=""text-lg font-bold"">{form_title}</h2>
FormField:
<div class=""w-full md:w-1/2 px-3 mb-6""><label class=""block uppercase tracking-wide text-xs text-gray-700"">{label}</label>{children}</div>
InputField:
<input class=""appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white"" type=""text""/>
AddressField:
<div class=""flex flex-wrap -mx-3 mb-6""><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Street</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">City</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">State</label><InputField/></FormField><FormField><label class=""block uppercase tracking-wide text-xs text-gray-700"">Zip</label><InputField/></FormField></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
"Navigation system where content is organized into tabs, allowing users to switch between sections","description:
A navigation system with tabs that allow users to switch between sections. The tabs should be horizontal and responsive, with a clear active state and a visible separator between tabs.
components:
- TabList: Standalone component to render the list of tabs.
- TabContent: Component that takes children to render the content of the active tab.
html:
<div class=""flex flex-col w-full max-w-md mx-auto""><TabList/><div class=""p-4""><TabContent/></div></div>
component html:
TabList:
<ul class=""flex flex-wrap justify-center mb-4"">{/* Insert TabControl components here */ }</ul>
TabContent:
<div class=""prose"">{children}</div>"
Footer Newsletter Form,"description:
A simple footer newsletter form with a label, input field, and submit button, all aligned horizontally and responsive.
components:
- FooterNewsletterForm: Standalone component that contains the newsletter form.
- FormLabel: Standalone component that displays the label text.
- FormInput: Standalone component that renders an input field.
- FormSubmitButton: Standalone component that renders a submit button.
html:
<footer class=""bg-gray-200 h-screen pt-4 pb-10""><div class=""max-w-md mx-auto p-4""><FooterNewsletterForm/></div></footer>
component html:
FooterNewsletterForm:
<div class=""flex flex-wrap justify-center mb-4""><FormLabel/><FormInput/><FormSubmitButton/></div>
FormLabel:
<label class=""text-sm font-bold mb-2"" for=""newsletter-email"">Stay updated with our newsletter</label>
FormInput:
<input type=""email"" id=""newsletter-email"" class=""w-full pl-2 py-2 text-sm text-gray-700"" placeholder=""your@email.com""/>
FormSubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Video/Audio Players,"description:
The UI should have a large video or audio player in the center, with playback controls (play/pause, seek, volume) below it. There should also be a title and optional description above the player.
components:
- MediaPlayer: standalone, displays the video or audio content
- MediaControls: standalone, displays the playback controls (play/pause, seek, volume)
- MediaTitle: standalone, displays the title of the media
- MediaDescription: standalone, displays a optional description of the media
html:
<div class=""flex flex-col h-screen p-4""><div class=""flex justify-center mb-4""><MediaTitle/><!-- displays the title of the media --><MediaDescription/><!-- displays a optional description of the media --></div><MediaPlayer/><!-- displays the video or audio content --><MediaControls/><!-- displays the playback controls (play/pause, seek, volume) --></div>
component html:
MediaPlayer:
<div class=""w-full h-96 bg-gray-200 rounded-lg""><!-- video or audio content will be rendered here --></div>
MediaControls:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_or_pause_text} </button><div class=""mx-4""><input type=""range"" class=""w-full""/></div><button class=""bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"">Volume: {volume_level}% </button></div>
MediaTitle:
<h2 class=""text-2xl font-bold mb-2"">{media_title}</h2>
MediaDescription:
<p class=""text-gray-600"">{media_description}</p>"
Award or achievement section with icons and dates,"description:
The UI should have a section that showcases awards or achievements, with icons and dates.
components:
- AwardItem: A standalone component that represents a single award or achievement.
- AchievementSection: A component that takes children and wraps the award items.
html:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl mb-4"">Awards and Achievements</h2><AchievementSection><AwardItem/><AwardItem/><AwardItem/></AchievementSection></section>
component html:
AwardItem:
<div class=""flex items-center mb-4""><span class=""mr-4"">{icon}</span><div><h3 class=""text-lg"">{award_name}</h3><p class=""text-sm text-gray-600"">{award_date}</p></div></div>
AchievementSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Make a component that displays a product's pricing information with a discounted price and original price,"description:
The UI should display the product's pricing information in a clear and concise manner, with the discounted price and original price prominently displayed. The discounted price should be highlighted to draw the user's attention. The UI should scale well on different screen sizes, with the prices adjusting their font size and spacing accordingly.
components:
- ProductPricing: (Takes Children): Displays the product's pricing information, including the discounted price and original price.
html:
<!-- Product pricing information --><div class=""bg-gray-100 p-4 rounded-lg shadow-md""><ProductPricing><!-- Pricing information will be rendered here --></ProductPricing></div>
component html:
ProductPricing:
<!-- Pricing information container --><div class=""flex flex-col items-center""><p class=""text-lg font-bold"">{discounted_price}</p><p class=""text-gray-500 line-through"">{original_price}</p><p class=""text-sm text-gray-500"">{discount_percent}% off</p>{children}</div>"
"Simple, rounded article thumbnail images","description:
The UI should feature a rounded thumbnail image with a subtle shadow to give it a slightly elevated look. The image should be responsive and scale down on smaller screens. The border-radius should be consistent across all screen sizes to maintain a visually appealing design.
components:
- RoundedThumbnail: (Takes Children): A rounded thumbnail image with a subtle shadow.
html:
<div class=""max-w-md mx-auto sm:max-w-lg md:max-w-2xl lg:max-w-4xl xl:max-w-full""><RoundedThumbnail><!-- image content --></RoundedThumbnail></div>
component html:
RoundedThumbnail:
<div class=""w-full rounded-lg overflow-hidden shadow-md""><img class=""w-full h-48 object-cover rounded-lg"" src={image_url} alt={image_alt}/>{children}</div>"
Testimonial Author Name,"description:
The UI should display a testimonial author's name in a readable font size, with a slight emphasis on the text to distinguish it from the testimonial content.
components:
- TestimonialAuthorName: (standalone)
html:
<div class=""flex flex-wrap mb-4""><p class=""text-lg text-gray-600""><TestimonialAuthorName/></p></div>
component html:
TestimonialAuthorName:
<span class=""font-bold"">{authorName}</span>"
A responsive image component with a subtle box shadow,"description:
The UI should feature a responsive image component that scales well on different screen sizes. The image should have a subtle box shadow to add depth and dimension. The component should be easily accessible and responsive on mobile devices.
components:
- ResponsiveImage: (Takes Children): This component takes an image source as a child element and applies a subtle box shadow. It should scale responsively on different screen sizes.
html:
<div class=""max-w-md mx-auto""><ResponsiveImage><img src=""{image_src}"" alt=""{image_alt}""/></ResponsiveImage></div>
component html:
ResponsiveImage:
<div class=""shadow-md rounded overflow-hidden"">{children}</div>"
Simple round avatar icon with a white border,"description:
The UI should feature a simple round avatar icon with a white border, which will stand out against different backgrounds. The avatar icon will be responsive, meaning its size will adjust according to the screen size.
components:
- AvatarIcon: (Standalone): A simple round avatar icon with a white border. On small screens (`sm`), the avatar will be 36px in diameter. On medium screens (`md`), it will be 48px in diameter. On large screens (`lg`), it will be 60px in diameter.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<div class=""rounded-full bg-cover bg-center w-12 h-12 sm:w-10 sm:h-10 md:w-12 md:h-12 lg:w-16 lg:h-16 border-2 border-white""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-full h-full rounded-full""/></div>"
Apply button with a blue background and white text,"description:
The apply button should have a blue background with white text, making it stand out and grabbing the user's attention. The button should be responsive, with a larger size on larger screens and a smaller size on smaller screens.
components:
- ApplyButton: (Standalone)
html:
<!-- Top-level HTML --><div class=""flex justify-center mb-4""><ApplyButton/></div>
component html:
ApplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Apply</button>"
Unordered list,"description:
A simple unordered list with bullet points, suitable for displaying a collection of items.
components:
- ListItem: (standalone) - a single item in the list
- UnorderedList: (takes children) - the container for the list items
html:
}<UnorderedList><ListItem/><ListItem/><!-- more list items --></UnorderedList>
component html:
ListItem:
<li class=""mb-2"">{list_item_text}</li>
UnorderedList:
<ul class=""list-unstyled mb-0"">{children}</ul>"
Social Sharing Count,"description:
The Social Sharing Count UI should display the number of shares on various social media platforms, such as Facebook, Twitter, and LinkedIn. The UI should be responsive, mobile-first, and accessible. It should also be easily readable and understandable.
components:
- SocialShareCount: A standalone component that displays the total share count across all social media platforms.
- SocialMediaShareCount: A component that displays the share count for a specific social media platform. It takes children, which is the platform's icon and name.
- SocialMediaIcon: A standalone component that displays an icon for a specific social media platform.
html:
<div class=""flex flex-wrap justify-center mb-4""><SocialShareCount/><div class=""flex flex-wrap justify-center""><SocialMediaShareCount><SocialMediaIcon/>Facebook</SocialMediaShareCount><SocialMediaShareCount><SocialMediaIcon/>Twitter</SocialMediaShareCount><SocialMediaShareCount><SocialMediaIcon/>LinkedIn</SocialMediaShareCount></div></div>
component html:
SocialShareCount:
<p class=""text-lg font-bold"">{total_share_count} shares</p>
SocialMediaShareCount:
<div class=""flex items-center mr-4"">{children} <p class=""ml-2"">{share_count} shares</p></div>
SocialMediaIcon:
<!-- Use a class to style the icon, e.g. Facebook icon --><i class=""fab fa-facebook-f text-lg""></i>"
Responsive Article Layout,"description:
The UI should display a responsive article layout with a header, image, and content sections. The layout should be mobile-first, accessible, and SEO-friendly.
components:
- ArticleHeader: Standalone component that displays the article title and metadata.
- ArticleImage: Standalone component that displays the article image.
- ArticleContent: Component that takes children, which represents the article content.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><ArticleHeader/><ArticleImage/><ArticleContent><!-- Article content goes here --></ArticleContent></div>
component html:
ArticleHeader:
<header class=""mb-4 md:mb-6 lg:mb-12""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{article_title}</h1><p class=""text-sm md:text-base lg:text-lg"">{author_name} - {published_date}</p></header>
ArticleImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 md:mb-6 lg:mb-12""/>
ArticleContent:
<div class=""prose lg:prose-lg"">{children}</div>"
"A comment component with a white background, user avatar, username, and date posted","description:
The comment component should have a white background, a user avatar, username, and date posted. The avatar should be a circular image, and the username and date posted should be displayed in a horizontal layout next to the avatar. The component should be responsive, with the avatar size and text size adjusting based on screen size.
components:
- CommentComponent: (Takes Children): This component renders a single comment with a user avatar, username, and date posted.
html:
<CommentComponent><!-- comment content here --></CommentComponent>
component html:
CommentComponent:
<div class=""bg-white p-4 rounded-lg shadow-md""><div class=""flex items-center""><img src={avatarUrl} alt=""User Avatar"" class=""w-8 h-8 rounded-full mr-2""/><div><span class=""text-gray-700"">{username}</span><span class=""text-gray-500 text-sm"">{datePosted}</span></div></div><div class=""mt-2"">{children}</div></div>"
Service section with icons and brief descriptions,"description:
The UI should be a responsive service section with a grid of services, each consisting of an icon, a brief description, and a title. The icons should be large and prominent, with the description and title below. The service section should be accessible, responsive, and SEO-friendly.
components:
- Service: A standalone component representing a single service, consisting of an icon, title, and description.
- ServiceIcon: A standalone component representing the icon of a service.
- ServiceInfo: A standalone component representing the title and description of a service.
html:
<div class=""container mx-auto p-4""><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><Service/><Service/><Service/><!-- Add more Service components as needed --></div></div>
component html:
Service:
<div class=""flex flex-col items-center""><ServiceIcon/><ServiceInfo/></div>
ServiceIcon:
<i class=""text-5xl {icon_class}"" aria-hidden=""true""></i>
ServiceInfo:
<div class=""text-center""><h3 class=""text-lg"">{title}</h3><p class=""text-gray-600"">{description}</p></div>"
A header with a black background that includes:,"description:
The UI should be a header with a black background that includes a logo, navigation links, and a call to action (CTA) button. The layout should be responsive, with elements rearranging to fit different screen sizes.
components:
- HeaderView: (Takes Children): The top-level component that contains all the header elements. On small screens, it should take up the full width and height of the screen. On medium screens and up, it should be a fixed height and centered horizontally.
- Logo: (Standalone): A logo component that displays the application's logo. On small screens, it should be centered and take up the full width. On medium screens and up, it should be aligned to the left.
- NavLinks: (Takes Children): A component that displays navigation links. On small screens, it should be hidden by default and displayed when a toggle button is clicked. On medium screens and up, it should be displayed horizontally next to the logo.
- CTAButton: (Standalone): A call to action button that prompts the user to take an action. On small screens, it should be centered and take up the full width. On medium screens and up, it should be aligned to the right.
html:
<header class=""bg-black h-screen md:h-20 flex justify-center items-center""><HeaderView><Logo/><NavLinks><!-- navigation links will be placed here --></NavLinks><CTAButton/></HeaderView></header>
component html:
HeaderView:
<div class=""container mx-auto p-4 md:p-0"">{children}</div>
Logo:
<img src=""{logo_url}"" alt=""Logo"" class=""w-full md:w-48 mx-auto md:mx-0""/>
NavLinks:
<nav class=""md:flex justify-between items-center""><button class=""md:hidden"" aria-label=""Toggle navigation""><svg><!-- three horizontal lines for toggle button --></svg></button><ul class=""md:flex justify-between items-center"">{children} </ul></nav>
CTAButton:
<button class=""bg-gradient-to-r from-blue-500 to-green-500 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Keyboard input,"description:
The UI should consist of a clearly labeled input field that is designed for keyboard input. This input field should be easily accessible and prominently displayed on the page, providing a straightforward interface for users to type in text. Additionally, the field should be accompanied by helper text or a label that closely describes its function or purpose.
components:
- InputField: Standalone component. This component serves as the text input area where users will type their data.
- InputLabel: Standalone component. This is a label element that describes the associated input field.
html:
<div class=""flex flex-col items-center justify-center p-4""><InputLabel/><InputField/></div>
component html:
InputField:
<input type=""text"" id=""keyboardInput"" class=""mt-2 p-2 border rounded-lg bg-white shadow-sm w-full sm:w-96 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"" placeholder=""Type something..."">
InputLabel:
<label for=""keyboardInput"" class=""text-lg font-medium text-gray-700"">Enter Text:</label>"
User-generated content display,"description:
The UI should display user-generated content in a clean and readable format. It should be responsive, mobile-first, and accessible. The content should be displayed in a card-like layout, with a image, title, and description.
components:
- UserProfilePicture: A standalone component that displays the user's profile picture.
- ContentCard: A component that takes children, displaying the user-generated content in a card-like layout.
- ContentTitle: A standalone component that displays the title of the user-generated content.
- ContentDescription: A standalone component that displays the description of the user-generated content.
html:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><UserProfilePicture/><ContentCard><ContentTitle/><ContentDescription/></ContentCard></div>
component html:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""w-12 h-12 rounded-full""/>
ContentCard:
<div class=""px-6 py-4"">{children}</div>
ContentTitle:
<h2 class=""text-lg font-bold"">{content_title}</h2>
ContentDescription:
<p class=""text-gray-600"">{content_description}</p>"
"A ""Load More"" button with an arrow icon","description:
The ""Load More"" button should be a prominent call-to-action that invites users to load more content. It should be easily accessible on both mobile and desktop devices. On mobile devices, the button should be full-width to make it easy to tap. On larger screens, the button should be centered with adequate padding to maintain a clean design.
components:
- LoadMoreButton: (Standalone)**: A button component with a load more label and an arrow icon. It should be easily accessible on both mobile and desktop devices.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><!-- other content here --><LoadMoreButton/></div>
component html:
LoadMoreButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Load More <i class=""fas fa-arrow-down ml-2""></i></button>"
"Pet profile components with profile picture, name, and bio","description:
The UI should have a clean and modern design with a focus on showcasing the pet's profile picture, name, and bio. The profile picture should be prominently displayed, with the name and bio displayed below. The UI should be responsive and accessible on different screen sizes.
components:
- PetProfile: (Takes Children): This is the top-level component that contains the pet profile picture, name, and bio.
- PetProfilePicture: (Standalone): This component displays the pet's profile picture.
- PetName: (Standalone): This component displays the pet's name.
- PetBio: (Standalone): This component displays the pet's bio.
html:
<div class=""flex flex-col md:flex-row items-center p-4 md:p-8""><PetProfile><PetProfilePicture/><div class=""flex flex-col ml-4""><PetName/><PetBio/></div></PetProfile></div>
component html:
PetProfile:
<div class=""flex flex-col md:flex-row items-center p-4 md:p-8"">{children}</div>
PetProfilePicture:
<img src={profile_picture_url} alt={pet_name} class=""w-24 h-24 md:w-48 md:h-48 rounded-full object-cover""/>
PetName:
<h2 class=""text-2xl md:text-3xl font-bold"">{pet_name}</h2>
PetBio:
<p class=""text-gray-600"">{pet_bio}</p>"
"A hero section with a large background image and bold, white text overlay","description:
The hero section should have a large background image that takes up the full height of the viewport, with bold, white text overlay on top. The text should be centered both horizontally and vertically. On smaller screens, the text should be smaller and the background image should scale down to fit the screen. On larger screens, the text should be larger and the background image should stretch to fill the available space.
components:
- HeroSection: (Takes Children): A full-height hero section with a background image and overlay text.
- HeroBackground: (Standalone): The background image of the hero section.
- HeroOverlay: (Takes Children): The text overlay on top of the background image.
html:
<div class=""h-screen w-full""><HeroSection><HeroBackground/><HeroOverlay>{hero_text}
</HeroOverlay></HeroSection></div>
component html:
HeroSection:
<div class=""h-screen w-full relative"">{children}</div>
HeroBackground:
<img src={background_image_url} class=""absolute top-0 left-0 w-full h-full object-cover""/>
HeroOverlay:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-6xl xl:text-8xl"">{children}</div>"
Sidebar with popular posts and trending topics,"description:
The UI should consist of a sidebar with two sections: popular posts and trending topics. The popular posts section should display a list of post titles with a brief description and a ""Read more"" button. The trending topics section should display a list of topic names with a badge indicating the number of posts related to each topic. The sidebar should be responsive, with a maximum width of 300px on larger screens and a full-width layout on smaller screens.
components:
- PopularPostCard: A standalone component representing a single popular post.
- TrendingTopicBadge: A standalone component displaying a topic name and a badge with the number of related posts.
- Sidebar: A component that takes children, wrapping the popular posts and trending topics sections.
html:
<aside class=""max-w-md md:max-w-none""><Sidebar><h2 class=""text-lg font-bold mb-2"">Popular Posts</h2><ul><li><PopularPostCard/></li><li><PopularPostCard/></li><li><PopularPostCard/></li></ul><h2 class=""text-lg font-bold mb-2"">Trending Topics</h2><ul><li><TrendingTopicBadge/></li><li><TrendingTopicBadge/></li><li><TrendingTopicBadge/></li></ul></Sidebar></aside>
component html:
PopularPostCard:
<div class=""flex items-start mb-4""><img src={image_url} alt={post_title} class=""w-12 h-12 rounded-full mr-4""><div><h3 class=""text-lg font-bold"">{post_title}</h3><p class=""text-gray-600"">{post_excerpt}</p><a href={post_url} class=""text-blue-600 hover:text-blue-900"">Read more</a></div></div>
TrendingTopicBadge:
<span class=""inline-flex items-center"">{topic_name} <span class=""bg-orange-100 text-orange-800 text-xs font-bold px-2 rounded"">{topic_post_count} posts</span></span>
Sidebar:
<div class=""bg-gray-100 p-4"">{children}</div>"
A date posted component with a gray background and white text,"description:
The Date Posted component should be a small, rectangular box with a gray background and white text. The text should be centered and easily readable. The component should be responsive, meaning it should scale down on smaller screen sizes to remain readable.
components:
- DatePosted: Standalone
html:
<div class=""container mx-auto p-4""><DatePosted/></div>
component html:
DatePosted:
<div class=""bg-gray-200 text-white p-2 rounded"">{date_posted}</div>"
Background image with a subtle texture or pattern,"description:
The UI should have a subtle background image with a texture or pattern that adds depth and visual interest. The background image should be responsive and scale well on different screen sizes. The texture or pattern should be subtle enough not to distract from the main content.
components:
- BackgroundImageContainer: (Standalone): This component will contain the background image with a subtle texture or pattern. On small screens (`sm:`), the background image should take up the full screen. On medium screens (`md:`), the background image should have a slight padding on the sides. On large screens (`lg:`), the background image should have a more pronounced padding on the sides.
html:
<div class=""h-screen w-full bg-cover bg-center"" style=""background-image: url('{background_image_url}')""><!-- rest of the UI content will go here --></div>
component html:
BackgroundImageContainer:
<div class=""h-screen w-full bg-cover bg-center"" style=""background-image: url('{background_image_url}')""><!-- subtle texture or pattern will be displayed here --></div>"
Notification Alerts/Badges,"description:
The UI should have a notification badge/alert that displays a small circle or rectangle with a number or a message inside, usually indicating the number of notifications, messages, or updates.
components:
- NotificationBadge: (standalone) - a small circle or rectangle displaying a number or message
- NotificationAlert: (standalone) - a small notification message with an icon and text
html:
<nav class=""flex items-center justify-between py-4""><ul class=""flex items-center""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><NotificationBadge/><!-- notification badge --></a></li></ul><NotificationAlert/><!-- notification alert --></nav>
component html:
NotificationBadge:
<span class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notification_count}</span>
NotificationAlert:
<div class=""bg-orange-200 p-2 rounded border-l-4 border-orange-500""><i class=""fas fa-bell mr-2 text-orange-500""></i><span>{notification_message}</span></div>"
Product Feature Description,"description:
The UI should be a responsive, mobile-first, and accessible section of a product page that displays a brief description of a feature, with an optional icon and a call-to-action (CTA) button.
components:
- FeatureDescription: standalone component that renders a brief description of a feature.
- FeatureIcon: standalone component that renders an icon related to the feature.
- CallToActionButton: standalone component that renders a CTA button.
html:
<section class=""max-w-md mx-auto p-4 lg:p-6""><FeatureIcon/><FeatureDescription/><CallToActionButton/></section>
component html:
FeatureDescription:
<p class=""text-lg leading-relaxed"">{feature_description}</p>
FeatureIcon:
<span class=""inline-block mr-2""><i class=""fas fa-{icon_class}"" aria-hidden=""true""></i></span>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
A news teaser component that displays a brief summary of the featured story,"description:
The news teaser component should be visually appealing and easy to read. It should display a brief summary of the featured story, along with an eye-catching image and a call-to-action to read more. The component should be responsive and scale well on different screen sizes. On smaller screens, the image and text should stack vertically, while on larger screens, they should be side by side.
components:
- NewsTeaser: (Takes Children): The top-level component that wraps the entire news teaser.
- TeaserImage: (Standalone): Displays the featured image.
- TeaserSummary: (Takes Children): Displays the brief summary of the story.
- ReadMoreLink: (Standalone): A call-to-action link to read more about the story.
html:
<NewsTeaser><TeaserImage/><TeaserSummary>{teaser_summary_text}
</TeaserSummary><ReadMoreLink/></NewsTeaser>
component html:
NewsTeaser:
<div class=""flex flex-wrap lg:flex-nowrap justify-center lg:justify-start mb-4"">{children}</div>
TeaserImage:
<img src=""{image_url}"" alt={image_alt_text} class=""w-full lg:w-1/2 object-cover rounded-t""/>
TeaserSummary:
<div class=""px-4 lg:w-1/2 lg:px-0""><h3 class=""text-lg font-bold"">{teaser_title}</h3><p class=""text-sm"">{children}</p></div>
ReadMoreLink:
<a href={read_more_url} class=""text-sm text-blue-600 hover:text-blue-800"">Read more &raquo;</a>"
Categories,"description:
The UI should display a list of categories, with each category displayed as a box with a title and a count of items in that category. The categories should be responsive, arranged in a grid on larger screens and in a list on smaller screens.
components:
- CategoryCard: A standalone component that displays a single category.
- CategoriesList: A component that takes children, which are a list of `CategoryCard` components.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Categories</h1><CategoriesList><CategoryCard/><CategoryCard/><!-- More CategoryCard components here --></CategoriesList></div>
component html:
CategoryCard:
<div class=""bg-white shadow-md p-4 rounded mb-4""><h2 class=""text-lg font-bold"">{categoryName}</h2><p class=""text-gray-600 text-sm"">{itemCount} items</p></div>
CategoriesList:
<div class=""grid lg:grid-cols-2 gap-4"">{children}</div>"
Hero Section with Form,"description:
A hero section with a background image, a heading, a paragraph of text, and a form with input fields and a submit button. The form should be centered and responsive.
components:
- HeroBackground: standalone
- HeroContent: standalone
- FormInputs: standalone
- SubmitButton: standalone
html:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeroContent/><form><FormInputs/><SubmitButton/></form></div></section>
component html:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style=""backgroundImage: url({hero_image_url});""}></div>
HeroContent:
<div class=""text-center mb-8""><h1 class=""text-3xl md:text-4xl lg:text-5xl"">{hero_heading}</h1><p class=""text-lg md:text-xl lg:text-2xl"">{hero_text}</p></div>
FormInputs:
<div class=""flex flex-col mb-4""><input class=""w-full p-2 mb-2"" type=""text"" placeholder=""Name:""/><input class=""w-full p-2 mb-2"" type=""email"" placeholder=""Email:""/><input class=""w-full p-2 mb-2"" type=""tel"" placeholder=""Phone:""/></div>
SubmitButton:
<button class=""w-full p-2 bg-orange-500 hover:bg-orange-700 text-white"">Submit</button>"
"Title displayed at the top of the browser window or tab, summarizing the content of the page","description:
The UI should display a title at the top of the browser window or tab, summarizing the content of the page.
components:
- PageTitle: Standalone component. Displays the title of the page.
html:
<head><PageTitle/></head>
component html:
PageTitle:
<title>{page_title}</title>"
"Section separator with a thin, dark gray line","description:
The UI should have a clean and minimalistic design, with a focus on readability and separation of content. The section separator should be a thin, dark gray line that stretches across the width of the container, with some vertical padding to create space between sections.
components:
- SectionSeparator: (Standalone): A thin, dark gray line that separates sections of content.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><!-- Content above the separator --><SectionSeparator/><!-- Content below the separator --></div>
component html:
SectionSeparator:
<hr class=""border-b border-gray-700 mb-4 md:mb-6 lg:mb-8""/>"
Video lightboxes,"description:
The UI should display a video lightbox that opens when a user clicks on a thumbnail or a button. The lightbox should overlay the main content with a dark background, and display a video player with controls (play, pause, volume). The video should be responsive and adaptable to different screen sizes.
components:
- VideoThumbnail: - standalone - displays a thumbnail image with a play button
- VideoLightbox: - takes children - displays a dark background overlay with a video player and controls
- VideoPlayer: - standalone - displays a video player with controls (play, pause, volume)
html:
<div class=""container mx-auto p-4""><!-- video thumbnail --><VideoThumbnail/><!-- lightbox container --><div class=""hidden"" id=""lightbox-container""><VideoLightbox><VideoPlayer/></VideoLightbox></div></div>
component html:
VideoThumbnail:
<button class=""flex justify-center items-center w-full h-48 bg-gray-200 rounded-md""><img src=""{thumbnail_url}"" alt=""Video thumbnail""/><span class=""text-lg text-white"">Play</span></button>
VideoLightbox:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-75 p-4"">{children} <button class=""absolute top-0 right-0 p-2 text-white"" onclick=""closeLightbox()"">×</button></div>
VideoPlayer:
<div class=""w-full h-full""><video src=""{video_url}"" controls/></div>"
"Category badge with a label and a number (e.g. ""Action (12)"")","description:
The UI should be a small, rounded badge with a label and a number. The badge should be easily readable, with sufficient contrast between the background and text colors. The badge should scale well on different screen sizes, ensuring the text remains legible.
components:
- CategoryBadge: (Takes Children): A badge with a label and a number. The badge has a rounded shape and a colored background. The label and number are centered horizontally and vertically inside the badge.
html:
<CategoryBadge>Action <span>{count}</span></CategoryBadge>
component html:
CategoryBadge:
<span class=""inline-flex items-center rounded-full px-2 py-1 text-sm font-medium"">{children}</span>"
Time picker dropdown,"description:
A dropdown time picker with hours and minutes selection.
components:
- TimePickerDropdown: a standalone component that renders a dropdown time picker.
- TimeOption: a component that takes children, representing a single time option in the dropdown.
html:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded"">Select Time
</button><ul class=""absolute z-10 hidden md:block""><TimePickerDropdown/></ul></div>
component html:
TimePickerDropdown:
<ul class=""bg-white border border-gray-200 rounded"">{timeOptions}</ul>
TimeOption:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
News or updates section with date and title,"description:
The UI should be a list of news or updates, each with a date and title. The date should be displayed in a smaller text above the title. The title should be a heading element to provide structure and hierarchy. The list should be responsive, with each item taking up the full width on mobile devices and being stacked horizontally on larger screens.
components:
- NewsCard: A standalone component that represents a single news or update item.
- NewsList: A component that takes children, representing a list of news or update items.
html:
<div class=""container max-w-md mx-auto p-4 md:p-8""><h2>News and Updates</h2><NewsList><NewsCard/><NewsCard/><NewsCard/></NewsList></div>
component html:
NewsCard:
<div class=""mb-4 p-4 border-b border-gray-200""><time dateTime=""{date_iso}"">{date_display}</time><h3>{title}</h3></div>
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Headings and subheadings,"description:
The UI should display a heading and subheading in a responsive and accessible manner, using a clean and minimalistic design.
components:
- Heading: A standalone component that displays a heading.
- Subheading: A standalone component that displays a subheading.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><Heading/><Subheading/></div>
component html:
Heading:
<h1 class=""text-3xl font-bold mb-4"">{heading_text}</h1>
Subheading:
<p class=""text-lg text-gray-600 mb-8"">{subheading_text}</p>"
A post component with a light grey background and dark text,"description:
The UI should have a clean and minimalistic design with a light grey background and dark text to provide sufficient contrast for readability.
components:
- PostComponent: (Takes Children): This component represents a single post with a light grey background and dark text. It should have a max width of 500px on larger screens and be full width on smaller screens.
html:
<PostComponent><!-- post content will be rendered here --></PostComponent>
component html:
PostComponent:
<div class=""bg-gray-200 px-4 py-6 rounded-lg shadow-md""><!-- {children} --></div>"
Underlined text,"description:
The UI should feature a segment of text that is visually underlined to emphasize or highlight it. This can be used within paragraphs, labels, or any other textual content where emphasis is required.
components:
- UnderlinedText: (Standalone): A component that renders a span of text with an underline.
html:
<p>Here is some text with <UnderlinedText/>in it.
</p>
component html:
UnderlinedText:
<!-- UnderlinedText: Renders text with a visual underline for emphasis --><span class=""underline"">{text}</span>"
Pop-up text providing additional information when users hover over an element,"description:
A small, rounded rectangle with a subtle shadow that appears when a user hovers over a specific element, displaying additional information related to that element. The pop-up text should be easily readable and disappear when the user stops hovering.
components:
- Tooltip: a standalone component that wraps the additional information.
html:
<span class=""hover:cursor-help"" onMouseOver={(e) =>{/* show tooltip */ }><!-- hoverable element --><Tooltip/><!-- inserts the tooltip component --><!-- hoverable element's content --></span>
component html:
Tooltip:
<div class=""absolute bg-white rounded-sm p-1 text-xs text-gray-600 shadow-md"">{tooltip_text}</div>"
Button Groups,"description:
The UI should display a group of buttons that can be used to perform different actions. The buttons should be grouped together and spaced evenly. The UI should be responsive, mobile-first, and accessible.
components:
- ButtonGroup: A container component that groups multiple buttons together. This component takes children.
- Button: An individual button component that can be used to perform an action. This component is standalone.
html:
<div class=""flex flex-wrap justify-center""><ButtonGroup><Button/><Button/><Button/></ButtonGroup></div>
component html:
ButtonGroup:
<div class=""flex flex-wrap justify-center'>{children}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
"Alerts (error, success, info)","description:
The UI should feature three types of alert boxes:
   - Error: Displayed with a red background to denote an issue or problem.
   - Success: Displayed with a green background to signify that an action has been completed successfully.
   - Info: Displayed with a blue background to provide general information or tips.

   Each alert box should contain:
   - A title in bold.
   - A message with more detailed explanation.
   - A responsive layout that adapts to various screen sizes.
components:
- AlertBox: (Standalone): This component is responsible for rendering an alert. It needs `type` (error, success, info) and `content` (includes both a title and a message) as properties.
html:
<div class=""container mx-auto p-4""><AlertBox/><AlertBox/><AlertBox/></div>
component html:
AlertBox:
<div class={`alert flex p-4 mb-4 rounded text-white {type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500'}`} role=""alert""><div><p class=""font-bold"">{title}</p><p>{message}</p></div></div>"
"A horizontal divider component with a thin, white line","description:
The horizontal divider component should be a thin, white line that separates different sections of the UI. It should be responsive and adapt to different screen sizes.
components:
- HorizontalDivider: (Standalone): A thin, white horizontal line that separates different sections of the UI.
html:
<!-- top level UI --><div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><!-- content above the divider --><HorizontalDivider/><!-- content below the divider --></div>
component html:
HorizontalDivider:
<!-- HorizontalDivider --><hr class=""border-t border-white h-px w-full""/>"
Video upload controls,"description:
The UI should display a file input field for selecting a video file, a upload button, and a progress bar that indicates the upload progress. The upload controls should be responsive, mobile-friendly, and accessible.
components:
- FileInput: A standalone component that renders a file input field.
- UploadButton: A standalone component that renders a button to initiate the upload process.
- ProgressBar: A standalone component that renders a progress bar to indicate the upload progress.
html:
<div class=""flex flex-col items-center p-4""><FileInput/><UploadButton/><ProgressBar/></div>
component html:
FileInput:
<input type=""file"" accept=""video/*"" id=""video-file"" class=""block w-full py-2 pl-10 text-sm text-gray-700""/>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Upload Video</button>
ProgressBar:
<div class=""progress-bar w-full h-2 bg-gray-200 rounded-lg""><div class=""progress-bar-inner bg-orange-500 {upload_progress}% h-2 rounded-lg""></div></div>"
"A search bar with a magnifying glass icon on the right and a placeholder text ""Where are you going?""","description:
The search bar should be a prominent, rounded rectangle with a subtle shadow to give it depth. The magnifying glass icon should be a light gray color and be positioned on the right side of the search bar. The placeholder text should be a light gray color and have a font size that's slightly smaller than the user's input text. The search bar should scale down on smaller screens to accommodate smaller screen sizes.
components:
- SearchBar: (Takes Children): A text input with a magnifying glass icon and a placeholder text. On small screens, the search bar should take up the full width of the screen. On larger screens, it should be around 300-400 pixels wide and centered horizontally.
- MagnifyingGlassIcon: (Standalone): A small, light gray magnifying glass icon.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><SearchBar><MagnifyingGlassIcon/></SearchBar></div>
component html:
SearchBar:
<div class=""relative flex items-center w-full md:w-3/4 lg:w-1/2""><input type=""search"" placeholder=""Where are you going?"" class=""pl-4 pr-12 text-lg rounded-md shadow-md w-full""/>{children}</div>
MagnifyingGlassIcon:
<i class=""fas fa-search text-gray-300 absolute right-4 top-4""/>"
Breadcrumb navigation component that shows the current category and subcategories,"description:
The breadcrumb navigation component should be a horizontal navigation bar that shows the current category and subcategories. It should be responsive, accessible, and well-documented. The component should use highlight colors to make different parts of the UI stand out. It should also use shadows and gradients to add depth and dimension to the UI. The layout should scale to fit different screen sizes, with a mobile-first approach to ensure responsiveness and accessibility on mobile devices.
components:
- BreadcrumbNavigation: (Takes Children): This component displays the breadcrumb navigation bar with the current category and subcategories. It should have a subtle shadow and gradient effect to give it depth.
- BreadcrumbItem: (Standalone): This component represents a single breadcrumb item, showing the category or subcategory name. It should have a highlight color to make it stand out.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><BreadcrumbNavigation><!-- breadcrumb items will be rendered here --></BreadcrumbNavigation></div>
component html:
BreadcrumbNavigation:
<nav class=""flex items-center py-2 bg-white shadow-md rounded""><ol class=""flex items-center"">{children} </ol></nav>
BreadcrumbItem:
<li class=""mr-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><a class=""text-sm"" href={link}>{category_name}</a><span class=""text-gray-400 mx-2"">/</span></li>"
Featured Image Gallery,"description:
The UI should be a responsive image gallery with a maximum of 6 images, arranged in a 2x3 grid on large screens, 2 images per row on medium screens, and 1 image per row on small screens. The images should be equally spaced and take up the full width of the gallery. On hover, the images should have a subtle overlay with the image's caption.
components:
- ImageCard: (standalone) - A single image with a caption overlay
- ImageGallery: (takes children) - A container for the image cards, provides the grid layout
html:
<div class=""max-w-md mx-auto""><ImageGallery><ImageCard/><ImageCard/><ImageCard/><ImageCard/><ImageCard/><ImageCard/></ImageGallery></div>
component html:
ImageCard:
<div class=""relative overflow-hidden rounded-md""><img src={image_src} alt={image_alt} class=""w-full h-48 object-cover rounded-md""/><div class=""absolute inset-0 flex justify-center items-center opacity-0 hover:opacity-100 transition duration-300""><p class=""text-sm text-white"">{image_caption}</p></div></div>
ImageGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Thread/List View of Topics,"description:
A vertical list of topics with a title, description, and some metadata (e.g. author, timestamp). Each topic should have a clear visual distinction from the others.
components:
- TopicListItem: (standalone): a single topic item in the list
- TopicList: (takes children): the container for the list of topics
html:
<div class=""container mx-auto p-4""><TopicList><TopicListItem/><TopicListItem/><!-- add more TopicListItem components here --></TopicList></div>
component html:
TopicListItem:
<li class=""py-4""><h2 class=""text-lg"">{topic_title}</h2><p class=""text-gray-500"">{topic_description}</p><p class=""text-xs text-gray-400"">Posted by {author_name} on {timestamp} </p></li>
TopicList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Savings calculator tool,"description:
The UI for the Savings Calculator tool should feature a simple, clean layout with an input form where users can enter their initial savings amount, monthly deposit, and interest rate. Below the form, there should be a display area where the estimated savings total after a specified number of years is shown.
components:
- InputForm: (Standalone): A component containing input fields for the initial savings, monthly deposit, and interest rate, along with a submit button.
- SavingsDisplay: (Standalone): A component to display the calculated savings after a certain number of years.
html:
<div class=""container mx-auto p-4""><h1 class=""text-lg font-bold"">Savings Calculator</h1><InputForm/><SavingsDisplay/></div>
component html:
InputForm:
<form class=""space-y-4""><div><label for=""initialAmount"" class=""block text-sm font-medium text-gray-700"">Initial Savings</label><input type=""number"" id=""initialAmount"" name=""initialAmount"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter initial savings amount"" required></div><div><label for=""monthlyDeposit"" class=""block text-sm font-medium text-gray-700"">Monthly Deposit</label><input type=""number"" id=""monthlyDeposit"" name=""monthlyDeposit"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter monthly deposit amount"" required></div><div><label for=""interestRate"" class=""block text-sm font-medium text-gray-700"">Interest Rate (%)</label><input type=""number"" id=""interestRate"" name=""interestRate"" step=""0.01"" class=""mt-1 block w-full p-2 border border-gray-300 rounded-md"" placeholder=""Enter interest rate"" required></div><div><button type=""submit"" class=""mt-3 w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Calculate </button></div></form>
SavingsDisplay:
<div class=""mt-6 p-4 border-t border-gray-300""><h2 class=""text-lg font-semibold"">Estimated Savings</h2><p>Total savings after <span class=""font-semibold"">{years}</span>years:</p><p class=""text-xl font-bold"">{savingsTotal}</p></div>"
Notification Badge: Displays new notification count,"description:
A small badge that displays a count of new notifications, often placed in the top right corner of a navigation item or icon.
components:
- NotificationBadge: Standalone component that displays the notification count.
html:
<nav><ul><li><a href=""#"" class=""flex items-center""><span>Notifications</span><NotificationBadge/></a></li></ul></nav>
component html:
NotificationBadge:
<div class=""bg-red-500 text-white rounded-full px-2 py-1 text-xs"">{notificationCount}</div>"
Social Media Share Button,"description:
The UI should be a social media share button that allows users to share content on various social media platforms. The button should be responsive, mobile-first, and accessible. It should have a neutral background color and a prominent call-to-action (CTA) to encourage users to share. The button should also display the social media platform's logo and a brief text indicating the platform's name.
components:
- SocialMediaShareButton: (standalone): The main button component that contains the social media platform's logo and text.
- SocialMediaIcon: (standalone): The social media platform's logo.
- SocialMediaText: (standalone): The brief text indicating the social media platform's name.
html:
<div class=""flex justify-center mb-4""><SocialMediaShareButton/></div>
component html:
SocialMediaShareButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><SocialMediaIcon/><SocialMediaText/></button>
SocialMediaIcon:
<img src={social_media_logo_url} alt={social_media_platform_name} class=""h-4 w-4 mr-2""/>
SocialMediaText:
<span>{social_media_platform_name}</span>"
Table column group,"description:
A table column group is a UI component that defines a group of columns in a table. It should be responsive, accessible, and easy to read. The columns should be evenly spaced and take up the full width of the container.
components:
- TableColumnGroup: A wrapper component that defines a group of columns. Takes children.
- TableColumn: A single column definition. Standalone.
html:
<table><colgroup><TableColumnGroup><!-- column definitions go here --></TableColumnGroup></colgroup></table>
component html:
TableColumnGroup:
<!-- NOTE: col elements will be generated by TableColumn components --><colgroup>{children}</colgroup>
TableColumn:
<col span={column_span}/>"
Verified checkmark and badge for official channels,"description:
The UI should display a verified checkmark and badge indicating an official channel. The badge should be a rounded rectangle with a checked icon inside, and a subtle border. The text ""Verified"" should be displayed next to the badge.
components:
- VerifiedBadge: standalone component
- VerifiedText: standalone component
html:
<div class=""flex items-center""><VerifiedBadge/><VerifiedText/></div>
component html:
VerifiedBadge:
<div class=""w-6 h-6 bg-gray-200 rounded-full border border-gray-300 flex justify-center items-center""><span class=""text-lg material-icons"">check</span></div>
VerifiedText:
<p class=""text-sm text-gray-600"">{verified_text}</p>"
Profile image cropper component with circular or rounded corners,"description:
The UI should have a circular or rounded corner profile image cropper component that allows users to upload and crop their profile images. The component should be responsive, accessible, and visually appealing, with a consistent color palette throughout. On smaller screen sizes, the component should be more compact, with a larger upload button and a smaller preview area. On larger screen sizes, the component should have a larger preview area and a more prominent crop tool.
components:
- ProfileImageCropper: (Takes Children): The top-level component that contains the upload button, crop tool, and preview area.
- UploadButton: (Standalone): A button that allows users to upload their profile images.
- CropTool: (Standalone): A tool that allows users to crop their profile images.
- PreviewArea: (Takes Children): An area that displays the uploaded profile image and allows users to crop it.
html:
<div class=""max-w-md mx-auto p-4 bg-white shadow-md rounded-lg""><ProfileImageCropper><UploadButton/><CropTool/><PreviewArea><!-- Profile image preview --></PreviewArea></ProfileImageCropper></div>
component html:
ProfileImageCropper:
<div class=""flex flex-col w-full h-full"">{children}</div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg"">Upload Profile Image</button>
CropTool:
<div class=""flex justify-center mb-4""><button class=""bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg mr-2"">Crop </button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg"">Reset </button></div>
PreviewArea:
<div class=""w-full h-64 overflow-hidden relative"">{children} <img src=""{imageUrl}"" alt=""Profile Image"" class=""w-full h-full object-cover rounded-lg""/><!-- Crop overlay --><div class=""absolute top-0 left-0 w-full h-full bg-black opacity-50 rounded-lg""></div></div>"
Server icon and name display with dropdown menu,"description:
The UI should display a server icon and name, with a dropdown menu that appears when the user clicks on the icon or name.
components:
- ServerIcon: standalone component that displays a server icon
- ServerName: standalone component that displays the server name
- DropdownMenu: component that takes children, which are the menu items
html:
<div class=""flex items-center""><ServerIcon/><ServerName/><div class=""hidden lg:block""><DropdownMenu><!-- menu items will be inserted here --></DropdownMenu></div></div>
component html:
ServerIcon:
<i class=""fas fa-server text-lg""></i>
ServerName:
<span>{server_name}</span>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md shadow-md"">{children}</div>"
Download button for files,"description:
The UI should feature a download button, prominently displayed, typically with an icon indicating a down-arrow or similar to suggest ""download"". It should be easily accessible, with clear labeling for accessibility purposes.
components:
- DownloadButton: Standalone component.
html:
<div class=""p-4""><DownloadButton/></div>
component html:
DownloadButton:
<a href=""{file_url}"" class=""inline-block px-4 py-2 bg-blue-500 text-white font-semibold text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"" download=""{file_name}"">Download </a>"
"Author bio component with name, photo, and short description","description:
The Author Bio component should be a compact, visually appealing section that prominently displays the author's name, photo, and a brief description. On larger screens, the component should be centered, with the photo on the left and the text on the right. On smaller screens, the photo should be on top, with the text below it.
components:
- AuthorBio: (Takes Children): The top-level component that wraps the author's bio information.
- AuthorAvatar: (Standalone): Displays the author's photo.
- AuthorName: (Standalone): Displays the author's name in a prominent font size.
- AuthorDescription: (Standalone): Displays a brief description of the author.
html:
<AuthorBio><AuthorAvatar/><div class=""flex flex-wrap""><AuthorName/><AuthorDescription/></div></AuthorBio>
component html:
AuthorBio:
<div class=""max-w-md mx-auto p-4 lg:p-6 bg-white shadow-md rounded-lg lg:flex lg:flex-wrap"">{children}</div>
AuthorAvatar:
<img src={author_photo_url} alt={author_name} class=""w-24 h-24 rounded-full lg:mr-4""/>
AuthorName:
<h2 class=""text-2xl font-bold"">{author_name}</h2>
AuthorDescription:
<p class=""text-gray-600"">{author_description}</p>"
No script message,"description:
- The UI should display a simple message indicating that JavaScript is disabled in the user's browser, and some features of the website may not function properly without it.
components:
- NoScriptMessage: - A standalone component that displays a message about the absence of JavaScript.
html:
<noscript><NoScriptMessage/></noscript>
component html:
NoScriptMessage:
<div class=""bg-red-100 border-l-4 border-red-500 text-red-700 p-4"" role=""alert""><p>Please note, this website requires JavaScript to function properly. Please enable JavaScript in your browser settings.</p></div>"
A grid container component to display a collection of destination cards,"description:
The UI should be a responsive grid container that displays a collection of destination cards in a visually appealing and easy-to-navigate layout. The grid should adapt to different screen sizes, with a maximum of 3 columns on large screens and a single column on small screens. Each destination card should have a hover effect to highlight it, and a subtle shadow to add depth.
components:
- DestinationGrid: (Takes Children): A responsive grid container that displays a collection of destination cards.
- DestinationCard: (Takes Children): A single destination card with a hover effect and subtle shadow.
html:
<DestinationGrid><!-- children will be rendered here --></DestinationGrid>
component html:
DestinationGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4"">{children}</div>
DestinationCard:
<div class=""bg-white shadow-md rounded p-4 hover:bg-gray-50 transition duration-300 ease-in-out""><h2 class=""text-lg font-bold"">{destination_name}</h2><p class=""text-gray-600"">{destination_description}</p>{children}</div>"
Featured Video Play Icon,"description:
The UI should display a play icon overlaid on a featured video thumbnail. The play icon should be a white triangle with a rounded rectangle background. The icon should be responsive, accessible, and mobile-first.
components:
- FeaturedVideoPlayIcon: (standalone): displays the play icon overlaid on a featured video thumbnail.
html:
<div class=""w-full h-full relative""><img src=""{thumbnail_url}"" alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/><FeaturedVideoPlayIcon/></div>
component html:
FeaturedVideoPlayIcon:
<div class=""absolute inset-0 flex justify-center items-center bg-gray-800 rounded-lg p-4""><div class=""w-10 h-10 bg-white rounded-full flex justify-center items-center""><span class=""text-gray-800 text-3xl"">{<!-- play icon -->}</span></div></div>"
Testimonial Author Title,"description:
The UI should display a testimonial author title, which typically appears below a quote or testimonial text. The title should be visually distinct from the quote text, with a smaller font size and a different font style. The title should also be responsive, adapting to different screen sizes.
components:
- TestimonialAuthorTitle: Standalone component that displays the author's title.
html:
<div class=""flex flex-col items-center mb-4""><!-- Quote or testimonial text --><blockquote class=""text-lg italic mb-2"">{testimonial_text}</blockquote><TestimonialAuthorTitle/></div>
component html:
TestimonialAuthorTitle:
<p class=""text-sm font-bold"">{author_title}</p>"
Breadcrumbs for navigation,"description:
The UI should display a sequence of breadcrumbs, each representing a navigation step, separated by a separator (e.g., `/`). The breadcrumbs should be responsive, accessible, and SEO-friendly.
components:
- Breadcrumb: (standalone): Represents a single breadcrumb item.
- BreadcrumbList: (takes children): A container for a list of breadcrumbs.
html:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap mb-4 list-none""><BreadcrumbList><Breadcrumb/><!-- more breadcrumbs here --></BreadcrumbList></ol></nav>
component html:
Breadcrumb:
<li class=""inline-flex items-center""><a href=""{breadcrumb_url}"" class=""text-gray-600 hover:text-gray-900"">{breadcrumb_label}</a><span class=""text-gray-600"">{separator}</span></li>
BreadcrumbList:
<ol class=""flex flex-wrap mb-4 list-none"">{children}</ol>"
Timer control,"description:
The UI should be a simple timer control with a circular progress bar and a text display showing the remaining time. The timer control should be responsive, mobile-first, and accessible.
components:
- TimerControl: stand-alone component that contains the entire timer control
- CircularProgressBar: stand-alone component that displays the circular progress bar
- RemainingTimeDisplay: stand-alone component that displays the remaining time
html:
<div class=""max-w-md mx-auto p-4""><TimerControl/></div>
component html:
TimerControl:
<div class=""flex items-center justify-center""><CircularProgressBar/><RemainingTimeDisplay/></div>
CircularProgressBar:
<div class=""w-24 h-24 bg-gray-200 rounded-full overflow-hidden""><div class=""w-full h-full bg-orange-500 rounded-full"" style=""'--progress': {progressPercentage}%;""}></div></div>
RemainingTimeDisplay:
<p class=""text-2xl font-bold"">{remainingTime}</p>"
Progress bar for loading,"description:
A horizontal progress bar that shows the progress of a task, with a fill color that grows from left to right as the task progresses.
components:
- ProgressBar: (standalone component)
html:
<div class=""w-full h-4 bg-gray-200 rounded""><div class=""bg-orange-500 h-4"" style=""width: <progresspercentage>%""></div><ProgressBar/></div>
component html:
ProgressBar:
<!-- Only used for accessibility, hidden visually --><div aria-valuemin=""0"" aria-valuemax=""100"" aria-valuenow=""<progresspercentage>"" role=""progressbar""></div>"
"User profile component with an avatar, username, level, and experience points","description:
The user profile component should display the user's avatar, username, level, and experience points in a clean and organized manner. The component should be responsive, with the elements rearranging themselves to fit different screen sizes. On larger screens, the avatar should be larger and centered, with the username and level information displayed below. On smaller screens, the avatar should be smaller and aligned to the left, with the username and level information displayed to its right.
components:
- UserProfile: (Takes Children): A container component that displays user profile information.
- UserProfileAvatar: (Standalone): Displays the user's avatar.
- UserProfileInfo: (Takes Children): Displays the user's username, level, and experience points.
html:
<UserProfile><UserProfileAvatar/><UserProfileInfo><h2>{username}</h2><p>Level {level}</p><p>{experience_points} experience points</p></UserProfileInfo></UserProfile>
component html:
UserProfile:
<div class=""bg-white shadow-md rounded px-4 py-6 md:p-8 lg:p-12"">{children}</div>
UserProfileAvatar:
<img src={avatar_url} alt=""User Avatar"" class=""w-24 h-24 rounded-full mx-auto md:mx-0 md:w-48 md:h-48""/>
UserProfileInfo:
<div class=""flex flex-col md:flex-row md:items-center md:justify-between"">{children}</div>"
Image filters,"description:
The UI should display a list of image filters with their corresponding names and preview images. The filters should be displayed in a grid layout, with multiple filters per row. Each filter should have a hover effect and a clickable area to apply the filter to an image.
components:
- ImageFilter: (standalone): A single image filter component, rendering an image and a label.
- ImageFilterGrid: (takes children): A container component that holds multiple `ImageFilter` components in a grid layout.
html:
<!-- Container for image filters --><div class=""max-w-md mx-auto p-4""><!-- Grid of image filters --><ImageFilterGrid><ImageFilter/><ImageFilter/><ImageFilter/><!-- Add more ImageFilter components as needed --></ImageFilterGrid></div>
component html:
ImageFilter:
<!-- Single image filter component --><div class=""relative hover:shadow-md rounded-md overflow-hidden""><!-- Filter preview image --><img src=""{filter_preview_url}"" alt=""{filter_name}"" class=""w-full h-24 object-cover rounded-t-md""><!-- Filter label --><p class=""absolute bottom-0 left-0 p-2 bg-white text-gray-800"">{filter_name}</p></div>
ImageFilterGrid:
<!-- Container for image filters in a grid layout --><div class=""grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
"A blog post preview component that includes a rectangle with a white background, a featured image at the top, and a brief summary text in a smaller font","description:
The blog post preview component should have a clean and modern design that effectively showcases the featured image and summarizes the blog post. The rectangle with a white background should provide a clear contrast to the surrounding UI elements. The featured image should be displayed prominently at the top of the component, followed by a brief summary text in a smaller font size. The component should scale well on different screen sizes, with the image and text adjusting to fit the available space.
components:
- BlogPostPreview: (Takes Children): The top-level component that contains the featured image and summary text.
html:
<BlogPostPreview><!-- Featured image and summary text will be rendered here --></BlogPostPreview>
component html:
BlogPostPreview:
<div class=""bg-white rounded shadow-md p-4 md:p-6 lg:p-8""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full rounded-t mb-4""><div class=""text-sm text-gray-600"">{children}</div></div>"
Rich media embed with video playback and playback controls,"description:
The UI should be a rich media embed with a video player that has playback controls, including play/pause, volume control, and a progress bar. The video player should be responsive and adaptable to different screen sizes.
components:
- RichMediaEmbed: standalone component that contains the video player and playback controls.
- VideoPlayer: standalone component that contains the video element and playback controls.
- PlaybackControls: standalone component that contains the play/pause button, volume control, and progress bar.
- ProgressBar: standalone component that displays the video progress.
- VolumeControl: standalone component that allows the user to adjust the volume.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><RichMediaEmbed/></div>
component html:
RichMediaEmbed:
<div class=""flex flex-col h-full""><VideoPlayer/></div>
VideoPlayer:
<div class=""flex-grow""><video src=""{videoSrc}"" class=""w-full h-full object-cover""></video><PlaybackControls/></div>
PlaybackControls:
<div class=""flex justify-between py-2""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Play/Pause"">{playPauseButtonIcon} </button><ProgressBar/><VolumeControl/></div>
ProgressBar:
<div class=""flex-grow w-full h-2 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style=""width: {progressPercentage}%;""}></div></div>
VolumeControl:
<div class=""flex items-center""><button class=""text-gray-500 hover:text-gray-700"" aria-label=""Mute/Unmute"">{muteButtonIcon} </button><div class=""h-2 w-16 bg-gray-200 rounded""><div class=""bg-orange-500 h-2"" style=""width: {volumePercentage}%;""}></div></div></div>"
"Testimonial component with a rounded rectangle background, a medium font size, and a small font size for the attribution","description:
The Testimonial component should have a rounded rectangle background with a soft gradient effect. The testimonial text should be in a medium font size, and the attribution (author of the testimonial) should be in a smaller font size. The component should be responsive, adjusting its width and font size according to the screen size.
components:
- Testimonial: (Takes Children): A component that displays a testimonial with a rounded rectangle background, a medium font size for the testimonial text, and a small font size for the attribution.
html:
<Testimonial><!-- testimonial text --><p>{testimonial_text}</p><!-- attribution --><p><span>{author_name}</span>, {author_title}</p></Testimonial>
component html:
Testimonial:
<div class=""bg-gradient-to-r from-gray-100 to-gray-200 p-4 rounded-lg shadow-md""><p class=""text-lg"">{children}</p><p class=""text-sm text-gray-600"">{children}</p></div>"
A grid component to display multiple cards in a responsive layout,"description:
The UI should display a responsive grid of cards, with a maximum of 3 cards per row on larger screens and 1 card per row on smaller screens. The cards should have a subtle shadow and a hover effect to make them stand out. The grid should be centered and have a maximum width to prevent it from becoming too wide on large screens.
components:
- CardGrid: (Takes Children): A responsive grid of cards, takes an array of `Card` children as props.
- Card: (Takes Children): A single card component, takes a title, description, and any additional children as props.
html:
<div class=""max-w-6xl mx-auto p-4""><CardGrid><!-- Cards will be rendered here --></CardGrid></div>
component html:
CardGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"">{children}</div>
Card:
<div class=""bg-white shadow-md rounded-lg p-4 hover:shadow-lg""><h2 class=""text-lg font-bold"">{title}</h2><p class=""text-gray-600"">{description}</p>{children}</div>"
Reply button to respond to tweets,"description:
The UI should be a small button with a reply icon and the text ""Reply"". The button should be blue and round, with a subtle hover effect. The text should be white and centered vertically within the button.
components:
- ReplyButton: (standalone)
html:
<button><ReplyButton/></button>
component html:
ReplyButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-reply mr-2""></i>Reply</button>"
Rating stars,"description:
The UI should display a rating system with a variable number of filled and unfilled stars, indicating a rating out of 5.
components:
- RatingStars: (standalone): The overall rating component.
- FilledStar: (standalone): A single filled star.
- UnfilledStar: (standalone): A single unfilled star.
html:
<div class=""flex justify-center""><RatingStars/></div>
component html:
RatingStars:
<div class=""flex"">{stars}</div>
FilledStar:
<i class=""fas fa-star text-yellow-400""></i>
UnfilledStar:
<i class=""fas fa-star text-gray-400""></i>"
Article Thumbnail Images,"description:
The UI should display a thumbnail image of an article with a brief description. The thumbnail image should be responsive and adapt to different screen sizes. On mobile devices, the thumbnail image should be stacked on top of the description, while on larger screens, the thumbnail image should be displayed alongside the description.
components:
- ArticleThumbnail: A standalone component that displays a thumbnail image and a brief description.
- ThumbnailImage: A standalone component that displays the thumbnail image.
- DescriptionText: A standalone component that displays the brief description.
html:
<div class=""flex flex-wrap lg:flex-nowrap mb-4 lg:mb-8""><ArticleThumbnail/></div>
component html:
ArticleThumbnail:
<div class=""lg:w-1/2 lg:pr-4""><ThumbnailImage/><DescriptionText/></div>
ThumbnailImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full lg:w-1/2 lg:h-48 object-cover""/>
DescriptionText:
<p class=""text-lg lg:text-xl"">{description}</p>"
Logout button with confirmation prompt,"description:
A logout button that when clicked, prompts the user to confirm they want to log out. If confirmed, the logout action is performed.
components:
- LogoutButton: standalone, displays a button with a logout icon and text.
- ConfirmLogout: takes children, displays a confirmation prompt to the user with an OK and Cancel button.
html:
<div class=""flex justify-center mt-4""><LogoutButton/></div><!-- Confirmation prompt will be inserted here --><div id=""confirm-logout"" class=""hidden""><ConfirmLogout><p>Are you sure you want to log out?</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">OK</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded ml-2"">Cancel</button></div></ConfirmLogout></div>
component html:
LogoutButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-sign-out-alt mr-2""/>Log Out</button>
ConfirmLogout:
<div class=""bg-white p-4 rounded shadow-md"">{children}</div>"
"A testimonial component that displays a quote, name, and occupation","description:
The testimonial component should be a visually appealing and easy-to-read section that presents a quote, name, and occupation. The quote should be the main focus, with the name and occupation serving as additional context. The component should be responsive, with the layout adjusting to fit different screen sizes.
components:
- TestimonialCard: (Takes Children): A container component that wraps the quote, name, and occupation. It should have a subtle background color and shadow to give it depth.
- Quote: (Standalone): Displays the quote text in a large, readable font size.
- Name: (Standalone): Displays the name of the person who gave the quote.
- Occupation: (Standalone): Displays the occupation of the person who gave the quote.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><TestimonialCard><Quote/><Name/><Occupation/></TestimonialCard></div>
component html:
TestimonialCard:
<div class=""bg-gray-100 rounded-sm shadow-md p-4 md:p-6 lg:p-8"">{children}</div>
Quote:
<blockquote class=""text-lg md:text-xl lg:text-2xl font-bold"">{quote_text}</blockquote>
Name:
<p class=""text-gray-600"">{name}</p>
Occupation:
<p class=""text-gray-600"">{occupation}</p>"
Product tutorials,"description:
The UI should display a list of product tutorials with a title, description, and a call-to-action (CTA) button to watch the tutorial. The list should be responsive and mobile-friendly.
components:
- TutorialCard: A standalone component that displays a single tutorial's information.
- TutorialList: A component that takes children (a list of `TutorialCard`s) and displays them in a responsive list.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Product Tutorials</h1><TutorialList><TutorialCard/><TutorialCard/><!-- Add more TutorialCard components here --></TutorialList></div>
component html:
TutorialCard:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h2 class=""text-lg font-bold"">{tutorial_title}</h2><p class=""text-gray-600"">{tutorial_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Watch Tutorial</button></div>
TutorialList:
<ul class=""list-none mb-0"">{children}</ul>"
"Container for content, typically featuring an image, title, and brief description","description:
The UI should be a responsive, mobile-first container that displays an image, title, and brief description. The image should be displayed at the top, followed by the title and description below it. The container should be accessible and SEO-friendly.
components:
- MediaCard: A standalone component that contains an image, title, and description.
- MediaCardImage: A standalone component that displays an image.
- MediaCardText: A standalone component that displays a title and description.
html:
<div class=""max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden""><MediaCard/></div>
component html:
MediaCard:
<div class=""flex flex-col""><MediaCardImage/><MediaCardText/></div>
MediaCardImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-t-xl""/>
MediaCardText:
<div class=""p-4""><h5 class=""text-lg font-bold"">{title}</h5><p class=""text-sm"">{description}</p></div>"
Bidding/Auction Functions,"description:
The UI should display a list of auctions, with each auction showing its title, current price, bidding information, and a ""Place Bid"" button. The bidding information should include the current highest bidder and the number of bids. The UI should be responsive, with a layout that adapts to different screen sizes.
components:
- AuctionCard: A standalone component representing a single auction.
- BidInfo: A standalone component displaying the current highest bidder and number of bids.
- PlaceBidButton: A standalone component for the ""Place Bid"" button.
- AuctionList: A component that takes children, displaying a list of auctions.
html:
<div class=""max-w-md mx-auto p-4""><AuctionList><AuctionCard/><AuctionCard/><!-- Add more auction cards here --></AuctionList></div>
component html:
AuctionCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{auction_title}</h2><p class=""text-gray-600"">{auction_description}</p><BidInfo/><PlaceBidButton/></div>
BidInfo:
<p class=""text-sm text-gray-600 mb-2"">Current bid: {current_bid} by {highest_bidder_name} ({num_bids} bids)</p>
PlaceBidButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Place Bid</button>
AuctionList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Music playlist interface,"description:
The UI should comprise a simple, clean layout showing a music playlist. It should include a header with the playlist name and a list displaying each song with details such as the title, artist, and a button to play each song. The design will be mobile-responsive, with items stacking vertically on smaller screens and aligning in a columnar fashion on larger screens.
components:
- PlaylistHeader: (Standalone) - Displays the playlist name.
- SongItem: (Takes children) - Represents an individual song in the playlist. Each song includes a ""Play"" button beside the title and artist name.
- PlayButton: (Standalone) - A button used to play the song.
html:
<div class=""max-w-lg mx-auto""><PlaylistHeader/><div class=""space-y-4""><SongItem><span>Song Title One - Artist One</span><PlayButton/></SongItem><SongItem><span>Song Title Two - Artist Two</span><PlayButton/></SongItem><!-- Add more <SongItem/>as needed --></div></div>
component html:
PlaylistHeader:
<div class=""text-center p-4 shadow-lg""><h1 class=""text-2xl font-bold"">{playlistName}</h1></div>
SongItem:
<div class=""flex justify-between items-center p-2 bg-white shadow rounded-md"">{children}</div>
PlayButton:
<button class=""px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"">Play</button>"
Weather forecast display,"description:
The UI should display the current weather condition, temperature, and a 5-day forecast. The layout should be responsive, with a card-based design that adapts to different screen sizes.
components:
- WeatherCard: A standalone component that displays the current weather condition and temperature.
- ForecastList: A component that takes children, displaying a list of forecast items.
- ForecastItem: A standalone component that displays a single day's forecast.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><WeatherCard/><ForecastList><ForecastItem/><ForecastItem/><ForecastItem/><ForecastItem/><ForecastItem/></ForecastList></div>
component html:
WeatherCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-2xl"">Current Weather</h2><p>{current_weather_condition}</p><p>{temperature}°C</p></div>
ForecastList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
ForecastItem:
<li class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg"">{forecast_date}</h3><p>{forecast_condition}</p><p>{forecast_temp}°C</p></li>"
Keyboard-Navigable interfaces,"description:
The UI should be a simple, accessible navigation menu that can be navigated using a keyboard. It should have a clear visual focus indicator to help users navigate using their keyboard.
components:
- NavItem: A standalone component representing a single navigation item.
- NavList: A component that takes children, representing a list of navigation items.
html:
<nav aria-label=""Main Navigation"" class=""max-w-md mx-auto p-4""><NavList><NavItem/><NavItem/><NavItem/></NavList></nav>
component html:
NavItem:
<li tabindex=""0"" class=""py-2 px-4 border-b border-gray-200 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none""><a href=""{href}"" class=""text-gray-700"">{label}</a><span class=""sr-only"">(current)</span></li>
NavList:
<ul role=""menu"" class=""list-none mb-4"">{children}</ul>"
Barcode scanner input,"description:
The UI should be a simple input field with a barcode scanner button next to it. The input field should be responsive and adapt to different screen sizes. The barcode scanner button should be easily clickable on mobile devices.
components:
- BarcodeScannerInput: A standalone component that wraps an input field and a barcode scanner button.
- BarcodeScannerButton: A standalone component that represents the barcode scanner button.
html:
<div class=""flex flex-col items-center w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4 mx-auto""><BarcodeScannerInput/></div>
component html:
BarcodeScannerInput:
<div class=""flex flex-row items-center p-2""><input type=""text"" id=""barcode-input"" class=""w-full p-2 text-lg"" placeholder=""Scan or enter barcode""/><BarcodeScannerButton/></div>
BarcodeScannerButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Scan</button>"
Email subscription form,"description:
The UI should be a simple email subscription form that is responsive, mobile-first, and accessible. It should have a input field for the user's email address, a subscribe button, and a success message that appears after submission.
components:
- EmailInput: A standalone component that renders an input field for the user's email address.
- SubscribeButton: A standalone component that renders a button to submit the form.
- SuccessMessage: A standalone component that renders a success message after form submission.
- SubscriptionForm: A component that takes children and renders the entire subscription form.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><SubscriptionForm><EmailInput/><SubscribeButton/><SuccessMessage/></SubscriptionForm></div>
component html:
EmailInput:
<input type=""email"" id=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
SuccessMessage:
<p class=""text-green-600"">{success_message}</p>
SubscriptionForm:
<form class=""flex flex-col w-full max-w-md"">{children}</form>"
Featured Product Badge Icon,"description:
The UI should feature a small badge icon with a ribbon-like design, indicating a product is featured. The badge should be responsive and accessible.
components:
- FeaturedBadgeIcon: standalone component, representing the featured product badge icon.
html:
<span class=""inline-block""><FeaturedBadgeIcon/></span>
component html:
FeaturedBadgeIcon:
<span class=""w-6 h-6 bg-orange-500 rounded-full inline-block relative""><span class=""ribbon ribbon-vertical""><!-- ribbon design --><span class=""ribbon-content text-xs text-white"">{ribbon_text}</span></span><span class=""featured-badge-icon inline-block w-4 h-4 bg-white rounded-full absolute top-0 right-0 -mt-1 -mr-1""><!-- icon --><i class=""fas fa-star text-yellow-500"" aria-hidden=""true""></i></span></span>"
Profile Picture and Header Image,"description:
The UI should display a profile picture and a header image, responsive and accessible on various devices.
components:
- ProfilePictureComponent: Standalone, displays a profile picture.
- HeaderImageComponent: Standalone, displays a header image.
- UserProfileHeader: Takes children, contains the profile picture and header image.
html:
<UserProfileHeader><ProfilePictureComponent/><HeaderImageComponent/></UserProfileHeader>
component html:
ProfilePictureComponent:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>
HeaderImageComponent:
<img src={header_image_url} alt=""Header Image"" class=""w-full h-64 object-cover""/>
UserProfileHeader:
<header class=""flex flex-col items-center py-4"">{children}</header>"
Illustrations,"description:
The UI should be a responsive illustration container that displays an illustration image with a caption. The illustration should be responsive, taking up the full width of its parent container on mobile devices and up to 2/3 of the parent container width on larger screens. The caption should be displayed below the illustration.
components:
- IllustrationContainer: (standalone) - a container for the illustration
- IllustrationCaption: (takes children) - a caption for the illustration
html:
<div class=""max-w-md mx-auto md:flex md:flex-col""><IllustrationContainer/><IllustrationCaption/></div>
component html:
IllustrationContainer:
<div class=""mb-4""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full md:max-w-2/3 mx-auto""/></div>
IllustrationCaption:
<p class=""text-lg"">{children}</p>"
Car rental booking form,"description:
The UI should be a responsive, mobile-first car rental booking form with input fields for pickup and return dates, pickup and return locations, car type, and driver's information. The form should be accessible and easy to use on various devices.
components:
- DatePicker: (standalone): A date picker component for selecting pickup and return dates.
- LocationInput: (standalone): A location input component for selecting pickup and return locations.
- CarTypeSelect: (standalone): A dropdown component for selecting the car type.
- DriverInfoInput: (standalone): A component for inputting driver's information (name, email, phone number).
- BookingForm: (takes children): A container component for the entire booking form.
- FormItem: (takes children): A component for individual form items (e.g., label, input, error message).
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Car Rental Booking</h1><BookingForm><FormItem><label for=""pickupDate"">Pickup Date</label><DatePicker/></FormItem><FormItem><label for=""returnDate"">Return Date</label><DatePicker/></FormItem><FormItem><label for=""pickupLocation"">Pickup Location</label><LocationInput/></FormItem><FormItem><label for=""returnLocation"">Return Location</label><LocationInput/></FormItem><FormItem><label for=""carType"">Car Type</label><CarTypeSelect/></FormItem><FormItem><label for=""driverName"">Driver's Name</label><DriverInfoInput/></FormItem><FormItem><label for=""driverEmail"">Email</label><DriverInfoInput/></FormItem><FormItem><label for=""driverPhone"">Phone Number</label><DriverInfoInput/></FormItem><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Now</button></BookingForm></div>
component html:
DatePicker:
<input type=""date"" id=""{id}"" name=""{name}"" value=""{value}""/>
LocationInput:
<input type=""text"" id=""{id}"" name=""{name}"" placeholder=""Enter location""/>
CarTypeSelect:
<select id=""{id}"" name=""{name}""><option value="""">Select Car Type</option>{options}</select>
DriverInfoInput:
<input type=""text"" id=""{id}"" name=""{name}"" placeholder=""{placeholder}""/>
BookingForm:
<form>{children}</form>
FormItem:
<div class=""mb-4""><label for=""{id}"" class=""block text-gray-700"">{label}</label>{children} <p class=""text-red-500 text-xs"">{errorMessage}</p></div>"
"Comment component with a user avatar, comment text, and a ""like"" and ""reply"" count","description:
The Comment component should have a clean and minimalistic design, with a clear layout that separates the different parts of the comment. The user avatar should be visually distinct from the comment text and the ""like"" and ""reply"" counts. The component should be responsive and scale well on different screen sizes.
components:
- Comment: (Takes Children): The top-level component that contains the user avatar, comment text, and ""like"" and ""reply"" counts.
- UserAvatar: (Standalone): A small circular image that displays the user's avatar.
- CommentText: (Takes Children): The text of the comment.
- LikeAndReplyCounts: (Standalone): Displays the number of likes and replies to the comment.
html:
<div class=""flex flex-wrap p-4 mb-4 border-b border-gray-200""><Comment><UserAvatar/><CommentText>{children}</CommentText><LikeAndReplyCounts/></Comment></div>
component html:
Comment:
<div class=""flex flex-wrap p-4 mb-4 border-b border-gray-200"">{children}</div>
UserAvatar:
<img src={avatar_url} alt={username} class=""w-10 h-10 rounded-full mr-4""/>
CommentText:
<p class=""text-gray-600"">{children}</p>
LikeAndReplyCounts:
<div class=""text-gray-500 text-sm""><span>{like_count} likes</span><span class=""ml-2"">{reply_count} replies</span></div>"
Flash sale countdown,"description:
A flash sale countdown should be a prominent and attention-grabbing component that displays the remaining time (hours, minutes, seconds) until the sale ends. It should be mobile-friendly, responsive, and easily accessible.
components:
- FlashSaleCountdown: (standalone): The main component that displays the countdown timer.
- CountdownTimer: (standalone): Displays the remaining time in hours, minutes, and seconds.
html:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-orange-100 rounded-xl""><h2 class=""text-2xl font-bold mb-2 text-orange-500"">Flash Sale!</h2><FlashSaleCountdown/><p class=""text-sm text-gray-500"">Hurry! Sale ends soon! </p></section>
component html:
FlashSaleCountdown:
<div class=""flex justify-center mb-4""><CountdownTimer/></div>
CountdownTimer:
<div class=""flex justify-center mb-2""><span class=""text-3xl font-bold"">{hours} hour{hours>1 ? 's' : ''}</span><span class=""text-lg mx-2"">:</span><span class=""text-3xl font-bold"">{mins} minute{mins>1 ? 's' : ''}</span><span class=""text-lg mx-2"">:</span><span class=""text-3xl font-bold"">{secs} second{secs>1 ? 's' : ''}</span></div>"
Dropdown Menu Item,"description:
The UI should be a dropdown menu item that displays a label and an optional icon. When clicked, it should reveal a dropdown menu.
components:
- DropdownMenuItem: Takes children. A single item in a dropdown menu.
- DropdownMenuIcon: Standalone. An icon displayed next to the label in a dropdown menu item.
html:
<nav class=""flex flex-wrap justify-center""><DropdownMenuItem><DropdownMenuIcon/><span>{menuItemLabel}</span></DropdownMenuItem></nav>
component html:
DropdownMenuItem:
<li class=""dropdown-menu-item"">{children}</li>
DropdownMenuIcon:
<i class=""fas {iconClass} mr-2""></i>"
Hashtag display for topic tracking,"description:
A hashtag display component that shows a list of trending topics, each represented by a clickable hashtag with the topic name and the number of posts associated with it. The component should be responsive, accessible, and SEO-friendly.
components:
- HashtagItem: (standalone): Represents a single hashtag with its topic name and post count.
- HashtagList: (takes children): A container that renders a list of **HashtagItem** components.
html:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><HashtagList/></div>
component html:
HashtagItem:
<a href=""#"" class=""inline-block mr-4 mb-2""><span class=""text-gray-600 text-sm"">{topic_name}</span><span class=""bg-gray-200 px-2 py-1 text-gray-600 text-xs rounded"">{post_count} posts</span></a>
HashtagList:
<ul class=""list-none mb-0"">{children}</ul>"
"Design a logo featuring a stylized ""GO"" abbreviation with a joystick incorporated into the design","description:
The logo should be modern, sleek, and eye-catching, conveying a sense of gaming and movement. The stylized ""GO"" abbreviation should be prominent, with the joystick incorporation adding a fun and interactive touch. The logo should be scalable and legible on various screen sizes.
components:
- LogoGo: (Standalone): This is the main logo component featuring the stylized ""GO"" abbreviation with a joystick incorporated into the design.
html:
<LogoGo/>
component html:
LogoGo:
<div class=""flex justify-center mb-4""><div class=""text-3xl font-bold text-orange-600""><span class=""relative""><span class=""absolute top-0 left-0 w-1/2 h-full bg-orange-600""></span>G </span><span class=""relative""><span class=""absolute top-0 right-0 w-1/2 h-full bg-orange-600""></span>O </span></div><div class=""joystick-container""><div class=""joystick""><!-- joystick design here --></div></div></div>"
Floating Action Buttons,"description:
A set of floating action buttons (FABs) that can be used to perform various actions. There should be a main FAB and several smaller FABs that can be toggled on and off.
components:
- MainFab: Standalone component that represents the main FAB.
- MiniFab: Standalone component that represents a smaller FAB.
- FabContainer: Component that takes children, used to wrap the FABs.
html:
<div class=""fixed bottom-0 right-0 mb-4 mr-4""><FabContainer><MainFab/><MiniFab/><MiniFab/><MiniFab/></FabContainer></div>
component html:
MainFab:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{main_fab_icon}</button>
MiniFab:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded-full"">{mini_fab_icon}</button>
FabContainer:
<div class=""relative"">{children}</div>"
Featured Product Image Size,"description:
The UI should display a featured product image with a responsive size that adapts to different screen sizes. The image should be centered and take up the full width of its parent container on mobile devices, and then scale up to a maximum width on larger screens.
components:
- FeaturedProductImage: A standalone component that displays a featured product image.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><FeaturedProductImage/></div>
component html:
FeaturedProductImage:
<img src={image_url} alt={product_name} class=""w-full object-cover object-center md:max-w-md lg:max-w-lg rounded""/>"
Inputs (text),"description:
A basic text input field with a label, allowing users to enter a single line of text.
components:
- InputLabel: standalone, displays a label for the input field
- TextInput: standalone, a single-line text input field
html:
<div class=""flex flex-col gap-2""><InputLabel/><TextInput/></div>
component html:
InputLabel:
<label for=""{input_id}"" class=""text-sm"">{label_text}</label>
TextInput:
<input type=""text"" id=""{input_id}"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/>"
Aside content,"description:
The UI should consist of a primary content section with an aside section aligned to one side. The primary content will be broader, focusing on the main information, while the aside section contains complementary information or links (e.g., related articles, advertisements). It should be responsive, with the aside possibly moving below the main content or to a different position on smaller screens.
components:
- MainContent: (Standalone): Where the main information or articles will be displayed.
- AsideContent: (Standalone): Dedicated to secondary information such as additional articles, quick facts, or ads.
html:
<div class=""flex flex-col md:flex-row""><MainContent/><AsideContent/></div>
component html:
MainContent:
<!-- Main content section displaying primary information --><div class=""flex-1 p-4""><h1 class=""text-xl font-bold mb-2"">{main_heading}</h1><p>{main_paragraph}</p></div>
AsideContent:
<!-- Aside section for complementary information --><div class=""w-full md:w-1/4 p-4 border-l md:border-l-0 md:border-t""><h2 class=""text-lg font-semibold mb-2"">Related Articles</h2><ul class=""list-disc pl-5 space-y-1""><li><a href=""{related_article_link_1}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_1}</a></li><li><a href=""{related_article_link_2}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_2}</a></li><li><a href=""{related_article_link_3}"" class=""text-blue-600 hover:text-blue-800"">{related_article_title_3}</a></li></ul></div>"
Thread Favorites and Watching,"description:
The UI should display a list of threads that the user has favorited or is watching, with options to unfavorite or stop watching each thread.
components:
- ThreadCard: A standalone component that displays a single thread's information.
- ThreadsList: A component that takes children, which is a list of `ThreadCard` components.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Thread Favorites and Watching</h2><ThreadsList><ThreadCard/><ThreadCard/><!-- more ThreadCard components here --></ThreadsList></div>
component html:
ThreadCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{thread_title}</h3><p class=""text-gray-600"">{thread_description}</p><div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_favorite ? 'Unfavorite' : 'Favorite'} </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_watching ? 'Stop Watching' : 'Watch'} </button></div></div>
ThreadsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Alert Notification Icon Color,"description:
The UI should be a notification icon with a colored alert indicator, indicating a notification or update. The icon should be responsive and accessible.
components:
- NotificationIcon: - Standalone component that displays an icon with an optional alert indicator.
html:
<div class=""flex justify-center""><NotificationIcon/></div>
component html:
NotificationIcon:
<!-- Notification icon with an optional alert indicator --><span class=""inline-block relative""><i class=""fas fa-bell text-lg text-gray-600"" aria-hidden=""true""></i>{has_alert && <span class=""absolute top-0 right-0 inline-block w-2 h-2 bg-{alert_color}-500 rounded-full""></span>}</span>"
Partner logos display,"description:
The UI should display a list of partner logos in a row, with each logo appearing one after the other. The logos should be evenly spaced and responsive to different screen sizes.
components:
- PartnerLogos: component (takes children): contains a list of `PartnerLogo` components
html:
<!-- Container for the partner logos --><div class=""flex flex-wrap justify-center""><!-- Partner logos will be inserted here --><PartnerLogos><!-- Partner logos will be inserted here --></PartnerLogos></div>
component html:
PartnerLogos:
<!-- Container for multiple partner logos --><div class=""flex flex-wrap justify-center"">{children}</div>"
Expanded dropdown menu displaying multiple levels of navigation or content,"description:
The UI should display a dropdown menu that expands to show multiple levels of navigation or content. The menu should be responsive, mobile-first, and accessible. On hover or click, the menu should expand to show the nested levels of navigation or content.
components:
- DropdownTrigger: (standalone) - The trigger element to expand/collapse the dropdown menu.
- DropdownMenu: (takes children) - The container for the dropdown menu.
- DropdownItem: (takes children) - A single item in the dropdown menu, which can contain nested items.
html:
<nav class=""flex justify-center""><DropdownTrigger/><DropdownMenu><DropdownItem>Item 1</DropdownItem><DropdownItem>Item 2
<DropdownMenu><DropdownItem>Nested Item 2.1</DropdownItem><DropdownItem>Nested Item 2.2</DropdownItem></DropdownMenu></DropdownItem><DropdownItem>Item 3</DropdownItem></DropdownMenu></nav>
component html:
DropdownTrigger:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{trigger_text} <span class=""caret ml-2""></span></button>
DropdownMenu:
<ul class=""absolute bg-white shadow-md py-2 w-48"">{children}</ul>
DropdownItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""#"" class=""text-gray-800"">{item_text}</a>{children}</li>"
Popovers,"description:
The Popover UI should feature a small, floating box that displays additional content when a triggering element (like a button or link) is hovered over or focused. It should include a title and some content, and position itself relative to the trigger without obstructing other content on the page.
components:
- PopoverTrigger: A standalone component that acts as the clickable or focusable element used to trigger the popover.
- PopoverContent: Takes children; this component is the floating box that appears and displays additional information or interactive elements.
html:
<div class=""relative""><PopoverTrigger/><PopoverContent><h3 class=""font-bold text-lg"">{popover_title}</h3><p>{popover_content}</p></PopoverContent></div>
component html:
PopoverTrigger:
<button class=""px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-opacity-75"" aria-describedby=""popoverContent"">Toggle Popover</button>
PopoverContent:
<div class=""absolute z-10 w-64 p-4 bg-white shadow-lg rounded-lg mt-2 hidden"" role=""tooltip"" id=""popoverContent"">{children}</div>"
Job/Project Listings,"description:
The UI should be a list of job/project listings, each displaying essential information such as the job title, company, location, and a brief description. The listings should be responsive, accessible, and easy to read.
components:
- JobListing: A standalone component that represents a single job listing.
- JobListingCard: A standalone component that wraps the job listing information.
- JobTitle: A standalone component that displays the job title.
- CompanyName: A standalone component that displays the company name.
- Location: A standalone component that displays the location.
- JobDescription: A standalone component that displays a brief job description.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Job Listings</h1><ul class=""list-none mb-0""><JobListing/><JobListing/><!-- Add more JobListing components here --></ul></div>
component html:
JobListing:
<li class=""mb-4""><JobListingCard/></li>
JobListingCard:
<div class=""bg-white shadow-md rounded p-4""><JobTitle/><CompanyName/><Location/><JobDescription/></div>
JobTitle:
<h2 class=""text-lg font-bold"">{job_title}</h2>
CompanyName:
<p class=""text-gray-600"">{company_name}</p>
Location:
<p class=""text-gray-600"">{location}</p>
JobDescription:
<p class=""text-gray-600"">{job_description}</p>"
Callout Box Container,"description:
The UI should be a responsive container that holds a callout box, typically used to highlight important information or provide additional context. The container should be mobile-first, accessible, and SEO-friendly.
components:
- CalloutBoxContainer: standalone component that wraps the callout box.
- CalloutBox: standalone component that renders the callout box content.
html:
<section class=""max-w-md mx-auto p-4 lg:p-6""><CalloutBoxContainer/></section>
component html:
CalloutBoxContainer:
<div class=""bg-yellow-100 p-4 rounded-md shadow-md""><CalloutBox/></div>
CalloutBox:
<div class=""text-lg font-bold"">{callout_title}</div><p class=""text-base"">{callout_description}</p>"
Image gallery control,"description:
The UI should consist of a gallery of images displayed in a grid format. Each image can be clicked to view a larger version. There should be a modal overlay that displays the full-size image when any image in the gallery is clicked. The modal should have a close button to exit the view.
components:
- GridGallery: Standalone component; it displays images in a grid layout.
- ModalOverlay: Component that takes children; it is used to display the larger version of an image along with a close button.
html:
<div class=""container mx-auto p-4""><GridGallery/><ModalOverlay><img src=""{selectedImageUrl}"" alt=""{selectedImageAlt}"" class=""max-w-full max-h-full""/><button class=""absolute top-2 right-2 text-xl"">&times;</button></ModalOverlay></div>
component html:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4""><img src=""{imageUrl1}"" alt=""{imageAlt1}"" class=""w-full cursor-pointer""/><img src=""{imageUrl2}"" alt=""{imageAlt2}"" class=""w-full cursor-pointer""/><img src=""{imageUrl3}"" alt=""{imageAlt3}"" class=""w-full cursor-pointer""/><!-- More images can be added similarly --></div>
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center"">{children} </div>"
"A comment component with a profile picture, username, and datetime","description:
The comment component should display a profile picture, username, datetime, and the comment text. The profile picture should be rounded and centered. The username and datetime should be displayed on the same line, with the username in a slightly larger font size and the datetime in a smaller font size. The comment text should be displayed below the username and datetime.
components:
- Comment: (Takes Children): This component will display a profile picture, username, datetime, and the comment text.
html:
<div class=""flex flex-col gap-4""><Comment><!-- comment text will be rendered here --></Comment></div>
component html:
Comment:
<div class=""flex gap-2""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-8 h-8 rounded-full""/><div class=""flex flex-col""><div class=""flex items-center gap-2""><span class=""text-lg font-bold"">{username}</span><span class=""text-sm text-gray-500"">{datetime}</span></div><div class=""text-base"">{children}</div></div></div>"
Alert Notification Sound,"description:
The UI should be a compact alert notification sound component that indicates an audible alert to the user. It should be visually appealing, mobile-friendly, and accessible.
components:
- AlertSoundIndicator: A standalone component that displays a visual representation of an alert notification sound.
html:
<div class=""flex justify-center mb-4""><AlertSoundIndicator/></div>
component html:
AlertSoundIndicator:
<div class=""bg-orange-500 p-2 rounded-full""><span class=""material-icons text-white"">volume_up</span></div>"
"A ""new arrival"" badge with a blue color and white text","description:
The UI should be a small badge with a blue background and white text that reads ""New Arrival"". It should be compact and attention-grabbing. On smaller screens, it should be slightly smaller to fit within the available space.
components:
- NewArrivalBadge: (Standalone): This component is a small badge that indicates a new arrival.
html:
<div class=""flex justify-center mb-4""><NewArrivalBadge/></div>
component html:
NewArrivalBadge:
<span class=""bg-blue-500 text-white px-2 py-1 rounded-md text-xs"">New Arrival</span>"
Featured Product Badge,"description:
The UI should display a small badge indicating that a product is featured, with a subtle background color, white text, and a slight rounded corner.
components:
- FeaturedBadge: (standalone)
html:
<span class=""inline-block px-2 py-1 rounded-md bg-amber-500 text-white text-xs""><FeaturedBadge/></span>
component html:
FeaturedBadge:
<span>Featured</span>"
Wizards,"description:
The Wizard UI should be a simple, responsive, and accessible interface that guides the user through a series of steps to complete a task. It should have a clear and concise layout, with each step building upon the previous one.
components:
- WizardHeader: A standalone component that displays the title and navigation for the wizard.
- WizardStep: A component that takes children, representing a single step in the wizard.
- WizardStepTitle: A standalone component that displays the title of a wizard step.
- WizardStepContent: A component that takes children, representing the content of a wizard step.
- WizardFooter: A standalone component that displays the navigation and actions for the wizard.
html:
<div class=""max-w-md mx-auto p-4""><WizardHeader/><div class=""flex flex-wrap -mx-4""><WizardStep><WizardStepTitle/><WizardStepContent><!-- step content here --></WizardStepContent></WizardStep><!-- more wizard steps here --></div><WizardFooter/></div>
component html:
WizardHeader:
<div class=""flex justify-between mb-4""><h1 class=""text-2xl"">{wizard_title}</h1><nav class=""text-sm""><ol class=""list-none""><li><a href=""#"" class=""text-blue-600"">{step_1_title}</a></li><li><a href=""#"" class=""text-blue-600"">{step_2_title}</a></li><!-- more navigation items here --></ol></nav></div>
WizardStep:
<div class=""wizard-step p-4 mb-4"">{children}</div>
WizardStepTitle:
<h2 class=""text-lg"">{step_title}</h2>
WizardStepContent:
<div class=""wizard-step-content"">{children}</div>
WizardFooter:
<div class=""flex justify-between mb-4""><button class=""btn btn-primary"">{primary_action}</button><button class=""btn btn-secondary"">{secondary_action}</button></div>"
Real-time feedback on form input validity as users type,"description:
The UI should display a form with a single input field and a submit button. As the user types, the input field should display real-time feedback on the input validity, with green text indicating valid input and red text indicating invalid input.
components:
- InputField: A standalone component that renders a single input field with real-time feedback on input validity.
- FormButton: A standalone component that renders a submit button.
html:
<div class=""max-w-md mx-auto p-4 mt-4""><form><InputField/><FormButton/></form></div>
component html:
InputField:
<div class=""mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your input"" aria-invalid={inputInvalid}/>{inputInvalid ? ( <p class=""text-xs text-red-600"">{invalidFeedback}</p>) : ( <p class=""text-xs text-green-600"">{validFeedback}</p>)}</div>
FormButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={inputInvalid}>Submit</button>"
Upload file input field with file type and size limits,"description:
The UI should have a file input field that allows users to upload a file. The input field should have a label indicating the accepted file types and a maximum file size.
components:
- FileInput: (standalone) - The file input field
- Label: (takes children) - The label for the file input field
- Description: (takes children) - The description of the file input field
html:
<div class=""flex flex-col gap-2""><Label>Upload File ({acceptedFileTypes})</Label><FileInput/><Description>Max file size: {maxFileSize}MB</Description></div>
component html:
FileInput:
<input type=""file"" class=""block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"" accept={acceptedFileTypes} maxLength={maxFileSize * 1024 * 1024}/>
Label:
<label class=""block mb-2 text-sm font-medium text-gray-700"">{children}</label>
Description:
<p class=""text-sm text-gray-500"">{children}</p>"
Breadcrumb Current Page Text,"description:
The UI should display the current page text in a breadcrumb navigation, with the text being the last item in the breadcrumb trail. The text should be highlighted to indicate the current page.
components:
- Breadcrumb: A standalone component that renders a single breadcrumb item.
- CurrentPageText: A standalone component that renders the current page text.
html:
<nav aria-label=""Breadcrumb""><ol class=""flex flex-wrap""><!-- previous breadcrumb items --><li><Breadcrumb/>...</li><li aria-current=""page""><CurrentPageText/></li></ol></nav>
component html:
Breadcrumb:
<li><a href=""{href}"" class=""text-gray-500 hover:text-gray-900"">{breadcrumb_text}</a></li>
CurrentPageText:
<span aria-current=""page"" class=""text-gray-900"">{current_page_text}</span>"
Video effects,"description:
The UI for video effects should present a set of video effects that users can apply. It should display in a grid layout, showcasing each effect with a descriptive name under each effect preview.
components:
- VideoEffectGrid: (Standalone)**: A component that holds all video effects previews in a grid layout.
- VideoEffectCard: (Standalone)**: A card component for each video effect, showing a preview image and the effect name.
html:
<div class=""container mx-auto px-4""><h1 class=""text-2xl font-bold text-center my-4"">Video Effects</h1><VideoEffectGrid/></div>
component html:
VideoEffectGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><VideoEffectCard/><VideoEffectCard/><!-- Additional <VideoEffectCard/>can be added based on the number of effects available --></div>
VideoEffectCard:
<div class=""bg-gray-200 rounded-lg overflow-hidden shadow-lg""><div class=""bg-black aspect-w-16 aspect-h-9""><!-- Example placeholder for a video effect preview --><div class=""w-full h-full flex justify-center items-center text-gray-500"">Effect Preview</div></div><div class=""p-4""><h3 class=""font-semibold text-lg text-gray-800"">{effect_name}</h3></div></div>"
Similar items display,"description:
The UI should display a list of similar items, each with a title, description, and a call-to-action (CTA) button. The items should be displayed in a grid or list format, with sufficient spacing between each item. The UI should be responsive, with the item cards adapting to different screen sizes.
components:
- SimilarItemCard: a standalone component that represents a single similar item, with a title, description, and CTA button.
- SimilarItemsList: a component that takes children (`SimilarItemCard` components) and displays them in a grid or list format.
html:
<section class=""container mx-auto p-4 mb-8""><h2 class=""text-2xl font-bold mb-4"">Similar Items</h2><SimilarItemsList><SimilarItemCard/><SimilarItemCard/><SimilarItemCard/><!-- add more item cards here --></SimilarItemsList></section>
component html:
SimilarItemCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{item_title}</h3><p class=""text-gray-600"">{item_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
SimilarItemsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Product demos,"description:
The UI should display a showcase of product demos, with each demo featuring a screenshot, a brief description, and a call-to-action (CTA) button to learn more. The layout should be responsive, with demos arranged in a grid on larger screens and stacked vertically on smaller screens.
components:
- ProductDemoCard: standalone component that displays a single product demo
- ProductDemosGrid: component that takes children (`ProductDemoCard`s) and arranges them in a grid
html:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-3xl font-bold mb-4"">Product Demos</h2><ProductDemosGrid><ProductDemoCard/><ProductDemoCard/><!-- Add more ProductDemoCard components here --></ProductDemosGrid></section>
component html:
ProductDemoCard:
<div class=""bg-white p-4 rounded shadow-md""><img src={screenshot_url} class=""w-full mb-4"" alt={demo_title}/><h3 class=""text-lg font-bold"">{demo_title}</h3><p class=""text-gray-600"">{demo_description}</p><a href={learn_more_url} class=""btn btn-primary"">Learn More</a></div>
ProductDemosGrid:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Category Navigation,"description:
The UI should be a horizontal navigation bar that displays categories. Each category should be a clickable item with a title and an optional count of items in that category.
components:
- CategoryNavItem: A standalone component that displays a single category.
- CategoryNav: A component that takes children, which are multiple `CategoryNavItem` components.
html:
<nav class=""flex justify-center mb-4""><ul class=""flex flex-wrap justify-center""><CategoryNav><CategoryNavItem/><CategoryNavItem/><!-- Add more CategoryNavItem components here --></CategoryNav></ul></nav>
component html:
CategoryNavItem:
<li class=""mr-4""><a class=""text-gray-600 hover:text-gray-900 transition duration-300"" href={categoryUrl}>{categoryTitle} <span class=""text-sm text-gray-500"">({itemCount})</span></a></li>
CategoryNav:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Header User Avatar,"description:
The UI should be a header with a user avatar displayed on the right side. The avatar should be circular and have a slight drop shadow.
components:
- UserAvatar: standalone component that displays the user's avatar image.
html:
<header class=""fixed top-0 left-0 w-full bg-white py-4 shadow-md""><div class=""container mx-auto p-4 flex justify-end""><UserAvatar/></div></header>
component html:
UserAvatar:
<img src={user_avatar_url} alt={username} class=""w-12 h-12 rounded-full shadow-md""/>"
"A ""Call to Action"" button with a green background and white text","description:
The Call to Action (CTA) button should have a prominent green background with white text, making it stand out and grabbing the user's attention. On smaller screens, the button should be full-width to ensure it's easily tappable. On larger screens, the button can be centered horizontally, with some spacing around it to create some breathing room.
components:
- CallToAction: (Standalone): A button with a green background and white text. On `sm` screens, the button should be full-width with a slightly larger font size. On `md` screens and above, the button should be centered horizontally with some spacing around it.
html:
<div class=""flex justify-center sm:w-full""><CallToAction/></div>
component html:
CallToAction:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
"**Recipe List:** A scrollable list component with a white background, featuring a series of Recipe Cards.","description:
The Recipe List component should be a scrollable list with a white background, featuring a series of Recipe Cards. The list should be responsive, with the cards adapting to different screen sizes. On smaller screens, the cards should stack vertically, while on larger screens, they should display in a grid-like layout.
components:
- RecipeList: (Takes Children): A scrollable list component that contains a series of `RecipeCard` components.
- RecipeCard: (Standalone): A component that displays a single recipe, featuring a title, image, and brief description.
html:
<div class=""flex-1 overflow-y-auto bg-white rounded-md shadow-md""><RecipeList><!-- Recipe cards will be rendered here --></RecipeList></div>
component html:
RecipeList:
<div class=""flex flex-col p-4 md:p-6 lg:p-8"">{children}</div>
RecipeCard:
<div class=""bg-white rounded-md shadow-md p-4 md:p-6 lg:p-8 mb-4""><h2 class=""text-lg font-bold"">{recipe_title}</h2><img src={image_url} alt={recipe_title} class=""w-full mb-4""/><p class=""text-gray-600"">{recipe_description}</p></div>"
Comment thread with replies and nested comments,"description:
The UI should display a comment thread with replies and nested comments. Each comment should have the commenter's name, profile picture, and comment text. Replies should be indented under their parent comment. The entire thread should be responsive and accessible.
components:
- CommentThread: Takes children. The top-level component for the comment thread.
- Comment: Takes children. A single comment with a profile picture, commenter's name, and comment text.
- CommentReply: Takes children. A reply to a comment, nested under its parent comment.
html:
<div class=""max-w-md mx-auto p-4""><CommentThread><!-- Comment 1 with replies --><Comment><!-- Comment content --><CommentReply><!-- Reply 1 content --><CommentReply><!-- Reply 2 content --></CommentReply></CommentReply></Comment><!-- Comment 2 --><Comment><!-- Comment content --></Comment></CommentThread></div>
component html:
CommentThread:
<ul class=""list-none mb-4"">{children}</ul>
Comment:
<li class=""mb-4""><div class=""flex items-center mb-2""><img src={profile_picture_url} alt={commenter_name} class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{commenter_name}</span></div><p class=""text-gray-600"">{comment_text}</p>{children}</li>
CommentReply:
<ul class=""list-none pl-4 mb-4""><li><div class=""flex items-center mb-2""><img src={profile_picture_url} alt={commenter_name} class=""w-8 h-8 rounded-full mr-2""/><span class=""text-lg"">{commenter_name}</span></div><p class=""text-gray-600"">{comment_text}</p>{children} </li></ul>"
Create a component that displays a list of product categories with icons and text,"description:
The UI should display a list of product categories with icons and text in a clean and organized manner. The list should be responsive, with each item taking up the full width on mobile devices and displaying in a grid layout on larger screens. Each item should have a prominent icon, a clear category title, and enough space to breathe. The UI should be easy to navigate and understand, with clear typography and adequate spacing between items.
components:
- CategoryItem: (Takes Children): A single item in the list of product categories, displaying an icon, text, and optional children.
- CategoryList: (Takes Children): A container component that displays a list of `CategoryItem`s.
html:
<CategoryList><CategoryItem><!-- hardware --><p>Computer Hardware</p></CategoryItem><CategoryItem><!-- software --><p>Software Solutions</p></CategoryItem><CategoryItem><!-- accessories --><p>Gadget Accessories</p></CategoryItem><!-- Add more CategoryItem components here --></CategoryList>
component html:
CategoryItem:
<div class=""flex items-center mb-4 lg:mb-6""><svg><!-- {icon_name} --></svg><div class=""flex-1"">{children} </div></div>
CategoryList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Featured Image Lightbox Size,"description:
The UI for the Featured Image Lightbox Size should consist of a featured image that, when clicked, opens a larger version of the image in a modal (lightbox) for better viewing. The modal should also include a close button to exit the expanded view. The design should be responsive, ensuring it adapts well across devices from mobile to desktop.
components:
- FeaturedImage: Standalone component that displays a thumbnail version of the image.
- ModalLightbox: Component that takes children. It serves as the overlay containing the larger image and a close button.
- ImageButton: Standalone component. A button styled to be visually based on its function, such as a close button in the lightbox.
html:
<div><!-- Thumbnail image that opens the lightbox on click --><FeaturedImage/><!-- Modal component for the lightbox feature --><ModalLightbox><img src=""{full_image_url}"" alt=""{full_image_description}"" class=""max-w-full h-auto""/><ImageButton/></ModalLightbox></div>
component html:
FeaturedImage:
<!-- Thumbnail image --><img src=""{thumbnail_image_url}"" alt=""{thumbnail_image_description}"" class=""cursor-pointer w-full""/>
ModalLightbox:
<!-- Lightbox modal that covers the screen with a semi-transparent backdrop --><div class=""fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center"">{children} </div>
ImageButton:
<!-- Button to close the modal, typically styled with an appropriate icon or text --><button class=""absolute top-2 right-2 text-white text-2xl p-2"">Close</button>"
Blog Post Category Link,"description:
A simple link with a text label indicating the blog post category, styled with a subtle hover effect and rounded corners.
components:
- BlogPostCategoryLink: A standalone component displaying a single blog post category link.
html:
<div class=""flex items-center mb-4""><BlogPostCategoryLink/></div>
component html:
BlogPostCategoryLink:
<a href=""{categoryLink}"" class=""text-sm text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out rounded px-2 py-1"">{categoryName}</a>"
A notification component with a red circle and a white number,"description:
The notification component should be a small, circular badge that displays a number of notifications. It should be red to grab the user's attention, with a white number in the center. The badge should be small enough to fit in a navigation bar or toolbar, but large enough to be easily tappable on mobile devices.
components:
- NotificationBadge: (Standalone): A small, circular badge that displays a number of notifications.
html:
<nav><!-- Navigation items --><NotificationBadge/></nav>
component html:
NotificationBadge:
<div class=""relative inline-flex justify-center w-6 h-6 bg-red-500 rounded-full text-white""><span class=""absolute top-0 right-0"">{notification_count}</span></div>"
Profile avatar display,"description:
The UI should display a circular profile avatar with a name and a brief description below it. The avatar should be responsive and mobile-friendly.
components:
- ProfileAvatar: (standalone): Displays a circular avatar image
- ProfileInfo: (takes children): Displays the name and description of the profile
html:
<div class=""flex flex-col items-center mb-4""><ProfileAvatar/><ProfileInfo><p class=""text-lg"">{profile_name}</p><p class=""text-sm text-gray-500"">{profile_description}</p></ProfileInfo></div>
component html:
ProfileAvatar:
<img src={avatar_url} alt=""Profile Avatar"" class=""w-24 h-24 rounded-full object-cover""/>
ProfileInfo:
<div class=""text-center"">{children}</div>"
"A ""Top Stories"" section with a scrolling marquee of headlines and images","description:
The ""Top Stories"" section should be a attention-grabbing, horizontally scrolling marquee that showcases the latest news headlines and images. The marquee should be responsive and adapt to different screen sizes. On smaller screens, the marquee should be a single row of items, while on larger screens, it can be a multi-row layout. The headlines and images should be displayed in a consistent and visually appealing way, with clear typography and adequate whitespace to avoid clutter.
components:
- TopStoriesContainer: (Takes Children): A container component that wraps the marquee of top stories. It should have a consistent padding and background color to distinguish it from the rest of the UI.
- StoryItem: (Standalone): A single story item component that displays a headline, image, and optional description. It should have a consistent layout and styling across different screen sizes.
html:
<div class=""flex justify-center py-4 bg-gray-100""><TopStoriesContainer><!-- Story items will be rendered here --></TopStoriesContainer></div>
component html:
TopStoriesContainer:
<div class=""flex flex-wrap justify-center sm:flex-nowrap md:flex-wrap lg:flex-nowrap xl:flex-wrap"">{children}</div>
StoryItem:
<div class=""flex items-center px-4 py-2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5""><img src={image_url} alt={headline} class=""h-12 w-12 mr-4 rounded-full""/><div><h3 class=""text-lg font-bold"">{headline}</h3><p class=""text-gray-600"">{description}</p></div></div>"
"Featured game carousel component, featuring a rotating list of game covers with titles and short descriptions","description:
The UI should feature a rotating carousel of game covers with titles and short descriptions. The carousel should be responsive, with a minimum of 3-4 game covers visible on larger screens, and 1-2 on smaller screens. The carousel should have navigation controls (prev/next) and a subtle animation effect when switching between games. The background should be a dark, muted color to make the game covers stand out.
components:
- FeaturedGameCarousel: (Takes Children): A container component for the entire carousel.
- CarouselNavigation: (Standalone): A component containing prev/next navigation controls.
html:
<div class=""max-w-md mx-auto py-8""><FeaturedGameCarousel><!-- Game covers will be rendered here --></FeaturedGameCarousel><CarouselNavigation/></div>
component html:
FeaturedGameCarousel:
<div class=""relative flex justify-center mb-4""><div class="" carousel-container"">{children} </div><div class=""absolute top-0 right-0 z-10""><CarouselNavigation/></div></div>
CarouselNavigation:
<div class=""flex justify-between py-2""><button class=""px-2 py-1 rounded-md bg-teal-500 hover:bg-teal-700 text-white"">Prev </button><button class=""px-2 py-1 rounded-md bg-teal-500 hover:bg-teal-700 text-white"">Next </button></div>"
Breadcrumb Separator Style,"description:
The UI should display a breadcrumb separator in a horizontal layout, with each separator element separated by a vertical line. The separators should be responsive, accessible, and mobile-first.
components:
- BreadcrumbSeparator: (standalone)
html:
<nav aria-label=""Breadcrumb""><ol class=""flex flex-wrap""><li><a href=""#"" class=""text-gray-600 transition duration-300"">Home</a></li><li><BreadcrumbSeparator/></li><li><a href=""#"" class=""text-gray-600 transition duration-300"">About</a></li><li><BreadcrumbSeparator/></li><li><a href=""#"" class=""text-gray-600 transition duration-300"">Contact</a></li></ol></nav>
component html:
BreadcrumbSeparator:
<span aria-hidden=""true"" class=""mx-2"">/</span>"
A pet profile avatar with a subtle shadow effect,"description:
The pet profile avatar should be a circular image with a subtle shadow effect to give it a slight 3D appearance. The image should be responsive and scale down on smaller screens to ensure it remains visible and accessible. The shadow effect should be subtle to avoid overwhelming the avatar.
components:
- PetAvatar: (Standalone): A circular image component that represents a pet's profile picture. It should have a subtle shadow effect to give it a slight 3D appearance.
html:
<div class=""flex justify-center mb-4""><PetAvatar/></div>
component html:
PetAvatar:
<img src={pet_image_url} alt={pet_name} class=""w-24 h-24 rounded-full shadow-md hover:shadow-lg transition-shadow duration-300 ease-in-out""/>"
A date and time component with a small font size and a gray text color.,"description:
The UI should display the current date and time in a small, gray font. The component should be responsive and adaptable to different screen sizes.
components:
- DateTimeComponent: (Standalone): This component displays the current date and time. On small screens (sm:), the component should take up the full width of the screen and have a font size of 0.75rem. On medium screens (md:) and larger, the component should have a width of 200px and a font size of 1rem. The text color should be a light gray (`text-gray-400`).
html:
<DateTimeComponent/>
component html:
DateTimeComponent:
<p class=""text-gray-400 text-sm md:text-base w-full md:w-200"">{date_and_time}</p>"
A footer with a dark gray background that includes:,"description:
The footer should have a dark gray background to provide contrast with the rest of the UI. It should have a simple layout with three main parts: a section for navigation links, a section for social media links, and a section for copyright information. The layout should be responsive and adjust to different screen sizes. On smaller screens, the sections should stack vertically to improve readability.
components:
- SocialMediaLink: (Standalone): A social media link with a white icon and light gray text color. On smaller screens (sm), it should be displayed horizontally, and on larger screens (md), it should be displayed vertically.
- CopyrightInfo: (Standalone): A section with copyright information with a light gray text color.
html:
<footer class=""bg-darkGray h-screen p-4 md:p-8 lg:p-12""><div class=""flex flex-wrap justify-center sm:flex-wrap md:flex-nowrap""><nav class=""w-full sm:w-full md:w-1/2"">{FooterNavItems}
</nav><div class=""w-full sm:w-full md:w-1/2""><ul class=""flex sm:flex-wrap md:flex-nowrap"">{SocialMediaLinks}
</ul><CopyrightInfo/></div></div></footer>
component html:
SocialMediaLink:
<li class=""mb-2 sm:mb-0 sm:mr-4 md:mb-2""><a href=""#"" class=""text-lightGray hover:text-white""><i class=""fab fa-{social_media_icon} text-white""></i><span class=""sr-only"">{social_media_name}</span></a></li>
CopyrightInfo:
<p class=""text-lightGray text-sm"">{copyright_text}</p>"
Form Validation Feedback,"description:
The UI should display form validation feedback in a clear and accessible manner. It should provide users with information about the errors in their form submission, with clear and concise error messages.
components:
- ValidationError: component (standalone) - displays a single error message
- ValidationFeedback: component (takes children) - container for one or more `ValidationError` components
html:
<div class=""max-w-md mx-auto p-4 mb-4 bg-red-100 rounded""><ValidationFeedback><ValidationError/><ValidationError/></ValidationFeedback></div>
component html:
ValidationError:
<p class=""text-sm text-red-700"">{error_message}</p>
ValidationFeedback:
<div class=""space-y-2"">{children}</div>"
Search bar for finding videos,"description:
The search bar should be a compact input field with a search icon and a submit button. It should be responsive, taking up the full width on mobile devices and adjusting to a wider layout on larger screens.
components:
- SearchBar: standalone component that contains the input field, search icon, and submit button.
- SearchInput: standalone component that renders the input field.
- SearchButton: standalone component that renders the submit button and search icon.
html:
<div class=""max-w-md mx-auto p-4 md:p-8""><SearchBar/></div>
component html:
SearchBar:
<div class=""flex items-center w-full""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full pl-10 pr-4 py-2 text-lg"" placeholder=""Find a video..."">
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Input area where users can enter text or data,"description:
A simple text input field with a placeholder and a submit button.
components:
- InputField: A standalone component that renders a text input field.
- SubmitButton: A standalone component that renders a submit button.
- InputGroup: A component that takes children and groups the input field and submit button together.
html:
<div class=""max-w-md mx-auto p-4""><InputGroup><InputField/><SubmitButton/></InputGroup></div>
component html:
InputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
InputGroup:
<div class=""flex flex-wrap -mx-3 mb-2"">{children}</div>"
Embedded image,"description:
Since images are not permitted, we will describe an alternative UI which includes a placeholder for where the image would normally be displayed. This can be represented with a simple bordered box containing descriptive text about the image.
components:
- ImagePlaceholder: Standalone component. It represents where an image would typically be displayed and includes a brief description or caption.
html:
<div class=""container mx-auto p-4""><div class=""image-section""><ImagePlaceholder/></div></div>
component html:
ImagePlaceholder:
<div class=""border-2 border-gray-300 p-4 text-center""><p class=""text-gray-500"">[Image Description or Title]</p></div>"
"A comment component with a username, timestamp, and comment text","description:
The comment component should have a clean and minimalistic design, with a focus on readability. It should have a slight shadow to give it depth and distinction from the surrounding UI. The username should be displayed prominently, with the timestamp and comment text in a slightly smaller font size.
components:
- CommentComponent: (Takes Children): This component will display a single comment, including the username, timestamp, and comment text.
html:
<div class=""max-w-md mx-auto p-4""><CommentComponent><!-- Comment content will go here --></CommentComponent></div>
component html:
CommentComponent:
<div class=""bg-white shadow-md p-4 rounded""><div class=""flex justify-between mb-2""><p class=""text-sm font-bold"">{userName}</p><p class=""text-xs text-gray-500"">{timestamp}</p></div><p class=""text-base"">{children}</p></div>"
Faceted search results display,"description:
The UI should display a list of search results with facets (filters) on the side. The facets should allow the user to narrow down the search results. The search results should be displayed in a list with each item showing the title, description, and any other relevant information.
components:
- FacetContainer: A standalone component that wraps the facets.
- FacetItem: A standalone component that displays a single item within a facet (e.g. ""$0-$50"", ""Nike"", etc.).
- SearchResult: A standalone component that displays a single search result.
- SearchResults: A component that takes children and displays the list of search results.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/4 xl:w-1/5 p-4""><FacetContainer/></div><div class=""w-full md:w-3/4 xl:w-4/5 p-4""><SearchResults><!-- search results will be rendered here --></SearchResults></div></div></div>
component html:
FacetContainer:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold mb-4"">Filters</h2><!-- facets will be rendered here --></div>
FacetItem:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{facet_item_id}""/><label for=""{facet_item_id}"" class=""ml-2"">{facet_item_name}</label></li>
SearchResult:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h3 class=""text-lg"">{result_title}</h3><p class=""text-sm"">{result_description}</p><!-- other result details can be added here --></div>
SearchResults:
<ul class=""list-none mb-0"">{children}</ul>"
Data Importer: Upload bulk data,"description:
The UI should be a simple, responsive page with a header, a form to upload a file, and a button to submit the file. The page should be accessible and mobile-friendly.
components:
- DataImporterHeader: Standalone component to display the page header.
- FileUploadForm: Takes children. A form component to upload a file.
- SubmitButton: Standalone component to submit the file.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><DataImporterHeader/><FileUploadForm><input type=""file"" id=""file"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer focus:outline-none""/><label for=""file"" class=""sr-only"">Select file</label><SubmitButton/></FileUploadForm><div class=""text-gray-500 text-sm"">{import_result}</div></div>
component html:
DataImporterHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold mb-2"">Data Importer</h1><p class=""text-gray-500 text-sm"">Upload bulk data</p></header>
FileUploadForm:
<form class=""flex flex-col gap-4 mb-4"">{children}</form>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload</button>"
Noise (visual),"description:
The UI should be a noise (visual) component that displays a visually appealing noise pattern, commonly used as a backgrounds or overlays in digital designs. The noise pattern should be responsive and adapt to different screen sizes.
components:
- NoiseComponent: (standalone): The main noise component that renders the noise pattern.
html:
<div class=""h-screen w-full bg-cover""><NoiseComponent/></div>
component html:
NoiseComponent:
<div class=""absolute inset-0 bg-noise bg-cover opacity-50""></div>"
"A simple, circular avatar icon that displays a user's profile picture","description:
The UI should be a circular avatar icon that displays a user's profile picture. The avatar should be responsive, scaling down on smaller screens while maintaining its circular shape. The border should be a subtle highlight color to make the avatar stand out. On hover, the avatar should have a subtle shadow to indicate interactivity.
components:
- AvatarIcon: (Standalone): A circular avatar icon that displays a user's profile picture.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-{highlight_color} shadow-md hover:shadow-lg""/>"
Calculator widget,"description:
The UI should resemble a basic calculator with a display screen at the top and a keypad below. The keypad should have numbers 0-9, basic arithmetic operators (+, -, x, /), and a few additional functions (clear, equals).
components:
- CalculatorDisplay: Standalone - displays the current calculation or result
- KeypadButton: Takes children (the button's label) - a single button on the keypad
- Keypad: Takes children (multiple `KeypadButton`s) - the entire keypad
html:
<div class=""max-w-md mx-auto p-4 pt-6""><CalculatorDisplay/><Keypad><KeypadButton>7</KeypadButton><KeypadButton>8</KeypadButton><KeypadButton>9</KeypadButton><KeypadButton>/</KeypadButton><KeypadButton>4</KeypadButton><KeypadButton>5</KeypadButton><KeypadButton>6</KeypadButton><KeypadButton>*</KeypadButton><KeypadButton>1</KeypadButton><KeypadButton>2</KeypadButton><KeypadButton>3</KeypadButton><KeypadButton>-</KeypadButton><KeypadButton>0</KeypadButton><KeypadButton>.</KeypadButton><KeypadButton>=</KeypadButton><KeypadButton>+</KeypadButton><KeypadButton>C</KeypadButton></Keypad></div>
component html:
CalculatorDisplay:
<div class=""bg-gray-200 p-2 text-lg"">{currentcalculation}</div>
KeypadButton:
<button class=""bg-gray-300 hover:bg-gray-400 text-lg py-2 px-4"">{children}</button>
Keypad:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Featured Product Reviews,"description:
The UI should display a list of featured product reviews, each with a product image, review title, rating, and short description. The reviews should be displayed in a grid or list format, with a maximum of 3 reviews per row on desktop and 1 review per row on mobile devices.
components:
- FeaturedReviewCard: A standalone component that displays a single review, including the product image, review title, rating, and short description.
- ReviewsGrid: A component that takes children and displays them in a grid format, with a maximum of 3 reviews per row on desktop and 1 review per row on mobile devices.
html:
<div class=""max-w-md mx-auto p-4""><h2>Featured Reviews</h2><ReviewsGrid><FeaturedReviewCard/><FeaturedReviewCard/><FeaturedReviewCard/><!-- Add more review cards here --></ReviewsGrid></div>
component html:
FeaturedReviewCard:
<div class=""bg-white border rounded p-4""><img src={product_image_url} alt={product_name} class=""w-full mb-4""/><h3 class=""text-lg font-bold"">{review_title}</h3><div class=""flex items-center mb-2""><span class=""text-lg"">{rating}/5</span><span class=""text-gray-600"">{rating_count} reviews</span></div><p>{short_description}</p></div>
ReviewsGrid:
<div class=""grid gap-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1"">{children}</div>"
Dropdown Menu Item Icon,"description:
The UI should be a dropdown menu item with an icon. The icon should be on the left side of the text, and the text should be displayed in a single line.
components:
- DropdownMenuItemIcon: A standalone component that contains an icon and text.
- Icon: A standalone component that represents the icon.
html:
<ul><li><DropdownMenuItemIcon/></li></ul>
component html:
DropdownMenuItemIcon:
<li><Icon/><span>{menuItemText}</span></li>
Icon:
<i class=""w-4 h-4 text-gray-500""></i>"
Featured Image Lightbox Close,"description:
A lightbox with a close button at the top right corner, displaying a large featured image. The lightbox should be modal, overlaying the underlying content.
components:
- FeaturedImageLightbox: a standalone component that contains a large featured image and a close button.
- LightboxCloseButton: a standalone component that provides a close button for the lightbox.
html:
<div class=""fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50""><FeaturedImageLightbox/></div>
component html:
FeaturedImageLightbox:
<div class=""max-w-md p-4 bg-white rounded""><LightboxCloseButton/><img src=""{image_url}"" alt=""{image_alt}"" class=""max-w-full h-auto rounded""></div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-800""><i class=""fas fa-times"" aria-label=""Close""></i></button>"
Page Title Header,"description:
- The UI features a simple, prominent header that displays the page title. The header should be centered, with a larger font to emphasize the title, and it should adapt to different screen sizes.
components:
- PageTitleHeader: Standalone component. This component will display the title text.
html:
<header><PageTitleHeader/></header>
component html:
PageTitleHeader:
<h1 class=""text-2xl md:text-4xl text-center my-4"">{pageTitle}</h1>"
"Testimonial component with a quote, author name, and author title","description:
The Testimonial component should display a quote, author name, and author title in a clean and modern design. The quote should be the main focus, with the author name and title secondary information. On smaller screens, the author information should be displayed below the quote, and on larger screens, it should be displayed to the right of the quote.
components:
- Testimonial: (Takes Children): A container for the testimonial quote, author name, and author title.
html:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><Testimonial><!-- testimonial content will go here --></Testimonial></main>
component html:
Testimonial:
<div class=""bg-white shadow-md rounded-md p-4 md:p-6 lg:p-8""><blockquote class=""text-lg md:text-xl lg:text-2xl font-bold mb-2"">{children}</blockquote><div class=""flex flex-col md:flex-row items-center md:items-start mb-2""><span class=""text-gray-600"">{authorName}</span><span class=""text-gray-400"">{authorTitle}</span></div></div>"
Image captions,"description:
The UI should display an image with a caption below it. The caption should be centered and have a subtle background color to differentiate it from the rest of the content.
components:
- ImageCaption: component (standalone) - This component will display an image with a caption below it.
- Caption: component (takes children) - This component will render the caption text.
html:
<div class=""max-w-md mx-auto""><ImageCaption/></div>
component html:
ImageCaption:
<div class=""flex justify-center""><img src={imageSource} alt={imageAlt} class=""w-full max-w-md object-cover rounded-t-md""/><Caption>{captionText}</Caption></div>
Caption:
<div class=""bg-gray-100 p-2 text-center"">{children}</div>"
"A footer component with a dark gray background, white text, and links to the website's social media pages, terms of use, and privacy policy.","description:
The footer component should have a dark gray background with white text to provide sufficient contrast. The links should be highlighted with a slight blue tone to make them stand out. The layout should be responsive, with the links and text adjusted accordingly for different screen sizes.
components:
- FooterComponent: (Standalone): A footer component that contains links to social media pages, terms of use, and privacy policy.
html:
<footer class=""bg-darkGray h-screen pt-4 pb-6 text-white""><!-- FooterComponent goes here --></footer>
component html:
FooterComponent:
<div class=""max-w-md mx-auto px-4""><ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4 mb-4""><a href=""{facebook_url}"" class=""text-blue-500 hover:text-blue-700"">Facebook </a></li><li class=""mr-4 mb-4""><a href=""{twitter_url}"" class=""text-blue-500 hover:text-blue-700"">Twitter </a></li><li class=""mr-4 mb-4""><a href=""{instagram_url}"" class=""text-blue-500 hover:text-blue-700"">Instagram </a></li></ul><ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4 mb-4""><a href=""{terms_of_use_url}"" class=""text-blue-500 hover:text-blue-700"">Terms of Use </a></li><li class=""mr-4 mb-4""><a href=""{privacy_policy_url}"" class=""text-blue-500 hover:text-blue-700"">Privacy Policy </a></li></ul><p class=""text-sm text-gray-400"">Copyright {current_year} {website_name}</p></div>"
Video analytics dashboard for creators,"description:
The UI should be a responsive, mobile-first dashboard that displays video analytics data in a clear and concise manner. It should include a navigation bar, a video thumbnail with playback information, a chart displaying video engagement metrics, and a table showing video performance data.
components:
- NavigationBar: (standalone) - a navigation bar with links to other dashboard pages
- VideoThumbnail: (standalone) - a video thumbnail with playback information
- EngagementChart: (standalone) - a chart displaying video engagement metrics
- PerformanceTable: (standalone) - a table showing video performance data
- DashboardContainer: (takes children) - a container element that wraps the entire dashboard
html:
<div class=""max-w-md mx-auto p-4 mt-4""><NavigationBar/><DashboardContainer><VideoThumbnail/><div class=""flex flex-wrap justify-between mb-4""><EngagementChart/><PerformanceTable/></div></DashboardContainer></div>
component html:
NavigationBar:
<nav class=""flex justify-between mb-4""><ul class=""list-none mb-0""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_3}</a></li></ul></nav>
VideoThumbnail:
<div class=""flex mb-4""><img src={video_thumbnail_url} alt={video_title} class=""w-40 h-40 object-cover rounded-lg""><div class=""ml-4""><p class=""text-lg font-bold"">{video_title}</p><p>{video_description}</p><p>{playback_info}</p></div></div>
EngagementChart:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Engagement Metrics</h3><canvas id=""engagement-chart"" width={chart_width} height={chart_height}></canvas></div>
PerformanceTable:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg font-bold mb-2"">Video Performance</h3><table class=""w-full""><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody><tr><td>Views</td><td>{views}</td></tr><tr><td>Likes</td><td>{likes}</td></tr><tr><td>Comments</td><td>{comments}</td></tr></tbody></table></div>
DashboardContainer:
<div class=""p-4 mb-4"">{children}</div>"
Interface for selecting tags or categories from a predefined list,"description:
The UI should be a dropdown list of tags or categories. The list should be searchable, and users should be able to select multiple items.
components:
- TagSelector: A dropdown list of tags or categories. Takes children.
- TagOption: A single tag or category option. Standalone.
html:
<div class=""flex flex-wrap justify-center mx-auto max-w-md p-4""><TagSelector><!-- dropdown list of tags or categories --></TagSelector></div>
component html:
TagSelector:
<div class=""relative""><input type=""text"" placeholder=""Search..."" class=""w-full pl-4 pr-10 py-2 border border-gray-300 rounded""/><ul class=""absolute z-10 w-full bg-white shadow-md"">{children} </ul></div>
TagOption:
<li class=""px-4 py-2 hover:bg-gray-100""><input type=""checkbox"" id=""{tag_id}"" value=""{tag_name}"" class=""mr-2""/><label htmlFor=""{tag_id}"">{tag_name}</label></li>"
Progress tracker,"description:
The UI should be a horizontal progress bar with a percentage indicator. The progress bar should be responsive and mobile-friendly.
components:
- ProgressBar: Standalone component that displays the progress.
- PercentageIndicator: Standalone component that displays the percentage.
html:
<div class=""flex flex-col items-center""><ProgressBar/><PercentageIndicator/></div>
component html:
ProgressBar:
<div class=""bg-gray-200 h-4 rounded-full""><div class=""bg-primary-500 h-4 rounded-full"" style=""width: {progressPercentage}%;""}></div></div>
PercentageIndicator:
<p class=""text-sm"">{progressPercentage}%</p>"
Portfolio filter with categories and tags,"description:
- The UI will display a list of portfolio items that can be filtered by categories and tags.
   - At the top, there will be a filter section with buttons for each category and tag.
   - Below the filters, there will be a grid displaying portfolio items.
   - Each portfolio item will show an image, title, and a brief description.
components:
- FilterBar: A standalone component that contains buttons for filtering by categories and tags.
- PortfolioItem: A standalone component that displays an individual portfolio item, including an image, title, and description.
- PortfolioGrid: A component that takes children; it is used to arrange the PortfolioItem components into a grid layout.
html:
<div class=""container mx-auto p-4""><!-- Filter Bar for categories and tags --><FilterBar/><!-- Portfolio Grid to display items --><PortfolioGrid><PortfolioItem/><PortfolioItem/><PortfolioItem/><!-- More PortfolioItems as needed --></PortfolioGrid></div>
component html:
FilterBar:
<div class=""flex flex-wrap gap-2 p-2""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Category 1</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Category 2</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Tag 1</button><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Tag 2</button><!-- More buttons as needed --></div>
PortfolioItem:
<div class=""max-w-sm rounded overflow-hidden shadow-lg""><img class=""w-full"" src=""{portfolio_image_url}"" alt=""{portfolio_image_alt}""><div class=""px-6 py-4""><div class=""font-bold text-xl mb-2"">{portfolio_title}</div><p class=""text-gray-700 text-base"">{portfolio_description} </p></div></div>
PortfolioGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"">{children}</div>"
Trending now section with a horizontal scrollable list of small cards,"description:
The UI should be a responsive and accessible horizontal scrollable list of small cards, showcasing trending items. The list should be wrapped in a container with a subtle shadow to give it depth. Each card should have a highlight color to make it stand out, and a slight gradient effect to add dimension. The layout should scale well on different screen sizes, with the cards adjusting their width and margin to fit the screen.
components:
- TrendingNowSection: (Takes Children): A container for the trending now section, with a subtle shadow and padding.
- TrendingCard: (Takes Children): A small card representing a trending item, with a highlight color and gradient effect.
html:
<TrendingNowSection><TrendingCard>{children}</TrendingCard><TrendingCard>{children}</TrendingCard><!-- repeat for multiple items --></TrendingNowSection>
component html:
TrendingNowSection:
<div class=""flex flex-wrap w-full overflow-x-scroll shadow-md rounded-lg p-4"">{children}</div>
TrendingCard:
<div class=""w-40 lg:w-56 xl:w-64 mx-2 mb-4 p-2 rounded-lg bg-white shadow-md""><div class=""bg-gradient-to-r from-orange-400 to-yellow-400 h-2 w-full rounded-t-lg""/><div class=""p-2"">{children} </div></div>"
Telephone/Phone Number Inputs,"description:
A responsive, mobile-first, accessible, and SEO-friendly phone number input field with a label and optional error message.
components:
- PhoneNumberInput: A standalone component that renders a phone number input field with a label.
- InputError: A standalone component that renders an error message below the input field.
html:
<div class=""flex flex-col mb-4""><PhoneNumberInput/><InputError/></div>
component html:
PhoneNumberInput:
<label class=""block text-sm mb-1"">Phone Number <input type=""tel"" class=""block w-full pl-10 text-sm text-gray-700"" placeholder=""(___) ___-____""/></label>
InputError:
<p class=""text-sm text-red-600"">{error_message}</p>"
"Comment component with avatar, name, date, and comment text","description:
The Comment component should have a prominent avatar, followed by the commenter's name and date, and then the comment text. The avatar should be rounded and have a slight shadow. The name and date should be on the same line, with the name in a slightly larger font. The comment text should be in a smaller font and have a slight opacity. On larger screens, the avatar should be larger and the text should be larger as well.
components:
- CommentComponent: (Takes Children): This is the top-level component that contains the avatar, name, date, and comment text.
html:
<CommentComponent><!-- Avatar, Name, Date, and Comment Text will be rendered here --></CommentComponent>
component html:
CommentComponent:
<div class=""flex gap-4 mb-4""><img src=""{avatarUrl}"" alt=""Avatar"" class=""w-12 h-12 rounded-full shadow-md""/><div class=""flex-1""><div class=""flex items-center""><span class=""text-lg font-bold"">{name}</span><span class=""text-gray-500 text-sm"">{date}</span></div><p class=""text-sm opacity-80"">{children}</p></div></div>"
Inline editable fields,"description:
The UI should be a container with multiple inline editable fields, each consisting of a label and an input field. The input fields should be editable inline, allowing users to click and edit the text directly. The fields should be stacked vertically and have a consistent spacing between them.
components:
- EditableField: A standalone component representing a single editable field, consisting of a label and an input field.
- EditableFieldsContainer: A component that takes children, wrapping the `EditableField` components.
html:
<div class=""max-w-md mx-auto p-4 pt-6""><EditableFieldsContainer><EditableField/><EditableField/><EditableField/></EditableFieldsContainer></div>
component html:
EditableField:
<div class=""flex items-center mb-2""><label class=""w-1/3"">{label_text}:</label><input type=""text"" value={initial_value} class=""w-2/3 px-2 py-1 border border-gray-300 rounded""/></div>
EditableFieldsContainer:
<div class=""space-y-4"">{children}</div>"
A grid component that displays a list of recipe cards in a 3x3 grid,"description:
The UI should display a 3x3 grid of recipe cards, with each card showcasing a recipe's image, name, and description. The grid should be responsive, with the cards rearranging to fit different screen sizes. On smaller screens, the grid should collapse into a single column, with each card taking up the full width of the screen. On larger screens, the grid should expand to display 3 columns. The cards should have a subtle shadow and gradient effect to add depth and dimension.
components:
- RecipeCard: (Takes Children): A single recipe card that displays an image, name, and description. On small screens, the card should take up the full width of the screen. On larger screens, the card should be approximately one-third of the screen width.
- RecipeGrid: (Takes Children): A grid component that displays a list of recipe cards in a 3x3 grid. The grid should be responsive, rearranging to fit different screen sizes.
html:
<RecipeGrid><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard><RecipeCard>...</RecipeCard></RecipeGrid>
component html:
RecipeCard:
<div class=""md:w-1/3 xl:w-1/3 p-4""><img src=""{recipe_image}"" alt=""{recipe_name}"" class=""rounded shadow-md""><h2 class=""text-lg font-bold"">{recipe_name}</h2><p class=""text-gray-600"">{recipe_description}</p>{children}</div>
RecipeGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-4"">{children}</div>"
Featured Posts: Showcase of top articles,"description:
The UI should display a showcase of top articles, featuring a title, image, and short description for each article. The showcase should be responsive, with a maximum of 3 articles per row on desktop and 1 article per row on mobile.
components:
- FeaturedPostCard: A standalone component that displays a single featured post.
- FeaturedPostsGrid: A component that takes children (`FeaturedPostCard` components) and displays them in a grid layout.
html:
<section class=""container mx-auto p-4""><h2>Featured Posts</h2><div class=""grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4""><FeaturedPostsGrid><FeaturedPostCard/><FeaturedPostCard/><FeaturedPostCard/><!-- Add more FeaturedPostCard components here --></FeaturedPostsGrid></div></section>
component html:
FeaturedPostCard:
<article class=""bg-white rounded-lg shadow-md p-4""><img src=""{post_image}"" alt=""{post_title}"" class=""w-full h-48 object-cover rounded-t-lg""/><h3 class=""text-lg font-bold"">{post_title}</h3><p>{post_description}</p><a href=""{post_url}"" class=""text-blue-600 hover:text-blue-900"">Read more</a></article>
FeaturedPostsGrid:
<div class=""grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4"">{children}</div>"
Suggested products carousel,"description:
A horizontal carousel displaying multiple products with images, names, and prices. The carousel should be responsive and have navigation arrows on both sides.
components:
- ProductCard: (standalone): Displays a single product with image, name, and price.
- CarouselNavigation: (standalone): Displays navigation arrows for the carousel.
- Carousel: (takes children): Container for the carousel, holds multiple **ProductCard** components.
html:
<div class=""flex justify-center""><CarouselNavigation/><Carousel><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></Carousel><CarouselNavigation/></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded""><img src=""{image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h5 class=""text-lg"">{product_name}</h5><p class=""text-gray-600"">{price}</p></div></div>
CarouselNavigation:
<button class=""bg-white border-none text-lg hover:text-gray-600 transition duration-300"">{navigation_arrow}</button>
Carousel:
<div class=""flex overflow-x-hidden"">{children}</div>"
Testimonials carousel,"description:
The UI should display a testimonials carousel that allows users to view multiple testimonials via sliding or pagination. Each testimonial can include text content (e.g., the testimonial message), the name of the person, and their title or affiliation. The design should be clean and minimal, using arrows or buttons for navigation.
components:
- TestimonialCard: (Standalone)**: Displays a single testimonial including the message, person's name, and title.
- CarouselControls: (Standalone)**: Provides buttons or arrows to navigate through the testimonials.
html:
<section aria-label=""Testimonials"" class=""max-w-xl mx-auto overflow-hidden""><div class=""flex space-x-4 snap-x overflow-x-auto""><TestimonialCard/><TestimonialCard/><TestimonialCard/></div><CarouselControls/></section>
component html:
TestimonialCard:
<article class=""snap-start w-full flex-shrink-0 p-4 text-center""><blockquote class=""text-lg font-medium"">{testimonial_text}</blockquote><footer class=""mt-4""><p class=""font-semibold"">{person_name}</p><p class=""text-sm text-gray-600"">{person_title}</p></footer></article>
CarouselControls:
<div class=""flex justify-center space-x-2 mt-4""><button aria-label=""Previous testimonial"" class=""p-2 text-white bg-gray-800 rounded-full"">&#9664; <!-- Left arrow --></button><button aria-label=""Next testimonial"" class=""p-2 text-white bg-gray-800 rounded-full"">&#9654; <!-- Right arrow --></button></div>"
Quote thumbnails,"description:
The UI should display a collection of quote thumbnails, each containing a quote, an author, and a background image. The thumbnails should be responsive, mobile-first, and accessible.
components:
- QuoteThumbnail: (standalone) - A single quote thumbnail component.
- QuoteList: (takes children) - A container component to hold multiple `QuoteThumbnail` components.
html:
<div class=""max-w-md mx-auto p-4""><QuoteList><QuoteThumbnail/><QuoteThumbnail/><!-- Add more QuoteThumbnail components here --></QuoteList></div>
component html:
QuoteThumbnail:
<div class=""bg-cover bg-center h-48 w-full mb-4 rounded-lg shadow-md""><blockquote class=""p-4 text-lg text-white""><p>{quote_text}</p><cite class=""text-sm"">{author}</cite></blockquote></div>
QuoteList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
"Job type component with an icon (e.g. full-time, part-time, internship) and white text","description:
The Job Type component should be a small, rounded rectangular badge with a subtle gradient background and a white text. The icon should be a small circle with a subtle shadow. The component should be responsive and scale well on different screen sizes.
components:
- JobType: (Takes Children): This component displays a job type (e.g. full-time, part-time, internship) with an icon.
html:
<JobType>Full-time</JobType>
component html:
JobType:
<div class=""inline-flex items-center rounded-md px-2 py-1 bg-gradient-to-r from-{jobTypeColor} to-{jobTypeColor} shadow-md""><span class=""w-4 h-4 mr-1 inline-block rounded-full {jobTypeIconColor} shadow-sm"">{icon}</span><span class=""text-xs font-bold text-white"">{children}</span></div>"
User Profile Card: Compact user info and profile link,"description:
A compact, responsive user profile card that displays a user's name, profile picture, and a link to their profile page.
components:
- UserProfileCard: A standalone component that contains all the user profile information.
- ProfilePicture: A standalone component that displays the user's profile picture.
- Username: A standalone component that displays the user's name.
- ProfileLink: A standalone component that displays a link to the user's profile page.
html:
<div class=""bg-white rounded-md shadow-md p-4""><UserProfileCard/></div>
component html:
UserProfileCard:
<div class=""flex items-center mb-2""><ProfilePicture/><div class=""ml-4""><Username/><ProfileLink/></div></div>
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-12 h-12 rounded-full object-cover object-top""/>
Username:
<h2 class=""text-lg font-bold"">{username}</h2>
ProfileLink:
<a href={profile_url} class=""text-blue-600 hover:text-blue-900"">View Profile</a>"
"A ""Related posts"" component that includes a heading and a list of preview images with a white background and a subtle border","description:
The ""Related posts"" component should have a clean and minimalistic design, with a white background and a subtle border to make it stand out. The heading should be prominent and easy to read, with a clear hierarchy of information. The list of preview images should be displayed in a grid or column layout, with a slight gap between each image to create a sense of breathing room. The component should scale well on different screen sizes, with the grid layout adjusting to fit the available space.
components:
- RelatedPostsContainer: (Takes Children): This component wraps the entire ""Related posts"" section, providing the white background and subtle border. It takes children elements, which include the heading and list of preview images.
- RelatedPostsImage: (Standalone): This component represents a single preview image in the list. It should display a placeholder image (e.g. a gray rectangle) until the actual image is loaded.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8 bg-white border border-gray-200 rounded""><h2 class=""text-2xl font-bold mb-4"">Related Posts</h2><div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}
</div></div>
component html:
RelatedPostsContainer:
<div class=""container mx-auto p-4 md:p-6 lg:p-8 bg-white border border-gray-200 rounded"">{children}</div>
RelatedPostsImage:
<div class=""w-full md:w-1/2 lg:w-1/3 p-2""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 md:h-64 lg:h-80 object-cover object-center""/></div>"
Zoom/Magnify Effects,"description:
The UI should display an image with a zoom effect on hover, where the image is magnified to a larger size.
components:
- ImageZoom: A standalone component that displays an image with a zoom effect on hover.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><ImageZoom/></div>
component html:
ImageZoom:
<div class=""relative overflow-hidden""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover transition duration-300 ease-in-out""/><div class=""absolute top-0 left-0 w-full h-full opacity-0 hover:opacity-100 transition duration-300 ease-in-out""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover scale-150""/></div></div>"
Video sharing buttons for social media,"description:
The UI should display a row of social media buttons that allow users to share a video. The buttons should be responsive, mobile-friendly, and easily accessible.
components:
- SocialMediaButton: (standalone): A single button for a specific social media platform.
- SocialMediaButtonGroup: (takes children): A container that holds multiple `SocialMediaButton` components.
html:
<div class=""flex justify-center mb-4""><SocialMediaButtonGroup><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more buttons as needed --></SocialMediaButtonGroup></div>
component html:
SocialMediaButton:
<a href=""{share_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""bg-{brand_color} hover:bg-{brand_hover_color} text-white font-bold py-2 px-4 rounded""><img src=""{icon_url}"" alt=""{platform_name} icon"" class=""w-4 h-4 mr-2"">{platform_name}</a>
SocialMediaButtonGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Product sorting,"description:
- The UI should feature a compact selection interface that allows users to sort a list of products based on a set of predefined criteria such as price, popularity, and rating. This might typically be a dropdown menu from which users can select the sorting option. On mobile, this dropdown should be easily accessible, and on larger screens, it should be visible and intuitive as part of a product listing page.
components:
- SortDropdown: (Standalone): A dropdown component that allows users to select the sort order of products.
- Label: (Standalone): A text label for the dropdown to guide users on what the dropdown is for.
html:
<div class=""flex flex-col sm:flex-row items-center justify-between p-4""><Label/><SortDropdown/></div>
component html:
SortDropdown:
<select class=""form-select appearance-none block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"" aria-label=""Sort products by""><option value=""price"">Price: Low to High</option><option value=""price-desc"">Price: High to Low</option><option value=""popularity"">Popularity</option><option value=""rating"">Rating</option></select>
Label:
<label for=""productSortDropdown"" class=""block text-sm font-medium text-gray-700"">Sort by: </label>"
Breadcrumb Home Link,"description:
The UI should be a single link that represents the home breadcrumb. It should be a simple, responsive, and accessible link that indicates the current location in a breadcrumb trail.
components:
- BreadcrumbHomeLink: (standalone)
html:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li><BreadcrumbHomeLink/></li><!-- other breadcrumb links will go here --></ol></nav>
component html:
BreadcrumbHomeLink:
<a class=""text-gray-600 hover:text-gray-900"" href={homeUrl}>Home</a>"
Author and Date Metadata,"description:
A simple metadata section displaying the author's name and the date of publication, aligned to the left and styled for readability.
components:
- AuthorMetadata: standalone component displaying the author's name.
- DateMetadata: standalone component displaying the date of publication.
- MetadataContainer: container component taking two children: AuthorMetadata and DateMetadata.
html:
<div class=""flex flex-wrap justify-start mb-4""><MetadataContainer><AuthorMetadata/><DateMetadata/></MetadataContainer></div>
component html:
AuthorMetadata:
<p class=""text-gray-600 text-sm"">{author_name}</p>
DateMetadata:
<p class=""text-gray-600 text-sm"">{publication_date}</p>
MetadataContainer:
<div class=""flex flex-wrap items-center"">{children}</div>"
Search Bar/Autocomplete,"description:
The UI should be a responsive search bar with an autocomplete dropdown that appears when the user starts typing. The search bar should be mobile-first and have a minimal design.
components:
- SearchBar: standalone, contains the search input and autocomplete dropdown
- AutocompleteDropdown: takes children (`AutocompleteOption` components)
html:
<nav class=""flex justify-center mb-4""><SearchBar/></nav>
component html:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder=""Search...""/><AutocompleteDropdown><!-- Autocomplete options will be rendered here --></AutocompleteDropdown><span class=""absolute inset-y-0 left-0 flex items-center pl-4""><svg><!-- Replace with an icon from a public domain or open-source icon set --></svg></span></div>
AutocompleteDropdown:
<ul class=""absolute w-full bg-white shadow-md"">{children}</ul>"
User Ranks and Badges,"description:
The UI should display a user's rank and badges in a compact and visually appealing way. The rank should be prominently displayed, and the badges should be shown as a series of icons or images below the rank.
components:
- UserRank: component (standalone): Displays the user's rank.
- BadgeList: component (takes children): Displays a list of badges.
html:
<div class=""flex flex-col items-center""><UserRank/><!-- Displays the user's rank --><BadgeList><!-- List of badges will be rendered here --></BadgeList></div>
component html:
UserRank:
<div class=""text-2xl font-bold"">{rank_name}</div>
BadgeList:
<div class=""flex flex-wrap justify-center"">{children} <!-- List of Badge components will be rendered here --></div>"
Dependancy Graph Visualization Component,"description:
The Dependency Graph Visualization Component should display a graph showing the relationships between different dependencies. The graph should be responsive, accessible, and mobile-friendly. The nodes in the graph should be clickable, and when clicked, the node should be highlighted and the related dependencies should be visually emphasized.
components:
- DependencyGraphComponent: (takes children) - contains the graph and handles node relationships
- TooltipComponent: (takes children) - displays additional information when a node is hovered or clicked
html:
<div class=""max-w-md mx-auto pt-4""><DependencyGraphComponent><!-- graph content here --></DependencyGraphComponent></div>
component html:
DependencyGraphComponent:
<div class=""flex flex-wrap justify-center"">{children}</div>
TooltipComponent:
<div class=""absolute bg-gray-100 p-2 rounded-md"">{children}</div>"
Customer Review Profile,"description:
The UI should display a customer's profile with a profile picture, name, rating, and a brief review. The profile picture should be circular and placed to the left of the review information. The rating should be displayed using a 5-star system.
components:
- ProfilePicture: (standalone) - displays the customer's profile picture
- ReviewInformation: (takes children) - contains the customer's name, rating, and review
- Rating: (standalone) - displays the customer's rating using a 5-star system
- ReviewText: (standalone) - displays the customer's brief review
html:
<div class=""flex items-center mb-4""><ProfilePicture/><ReviewInformation><h5 class=""text-lg"">{customer_name}</h5><Rating/><ReviewText/></ReviewInformation></div>
component html:
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Customer Profile Picture"" class=""w-12 h-12 rounded-full mr-4"">
ReviewInformation:
<div class=""ml-4"">{children}</div>
Rating:
<div class=""flex mb-2"">{Array(5).fill(0).map((_, i) =>( <span key={i} class={`text-yellow-400 {i < rating ? 'fill-current' : 'fill-none'}`}><i class=""fas fa-star""></i></span>))}</div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Footer with a dark gray background and a simple font,"description:
The footer should have a dark gray background, a simple font, and be responsive to different screen sizes. The footer should be easily readable on various devices.
components:
- FooterContainer: (Takes Children): A container component for the footer. It should have a dark gray background and will take other components as children.
- FooterCopyright: (Standalone): A component showing the copyright information.
- FooterSocialMedia: (Standalone): A component showing social media links.
html:
<footer class=""bg-dark-gray h-screen pt-12 pb-4""><FooterContainer><FooterCopyright/><FooterSocialMedia/></FooterContainer></footer>
component html:
FooterContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>
FooterCopyright:
<p class=""text-sm text-gray-300"">&copy; {current_year} {company_name}. All rights reserved.</p>
FooterSocialMedia:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><a href=""{facebook_url}"" class=""text-gray-400 hover:text-gray-600""><i class=""fab fa-facebook-f""></i></a></li><li class=""mr-4""><a href=""{twitter_url}"" class=""text-gray-400 hover:text-gray-600""><i class=""fab fa-twitter""></i></a></li><!-- Add more social media links here --></ul>"
Infographics,"description:
- The UI for infographics should present graphical data in a visually appealing and clear way. The layout will typically include a combination of text, numbers, and bars or circles to represent data. These elements should fit well on both mobile and desktop screens, automatically adjusting their size and position according to the screen size.
components:
- TitleSection: (Standalone)**: Displays the title of the infographic.
- DataPoint: (Takes children)**: Represents a single data point within the infographic. This might include a bar, a number, and some descriptive text.
- DataContainer: (Takes children)**: A container that groups DataPoint components, aligning them appropriately.
html:
<div class=""max-w-4xl mx-auto p-4""><TitleSection/><DataContainer><DataPoint><h3>{data_point_title1}</h3><p>{data_point_value1}</p><div class=""w-full bg-gray-200 h-4""><div class=""bg-blue-500 h-4"" style=""width: {data_percentage1}%;""></div></div></DataPoint><DataPoint><h3>{data_point_title2}</h3><p>{data_point_value2}</p><div class=""w-full bg-gray-200 h-4""><div class=""bg-blue-500 h-4"" style=""width: {data_percentage2}%;""></div></div></DataPoint><!-- Additional DataPoint components can be added similarly --></DataContainer></div>
component html:
TitleSection:
<div class=""text-center font-bold text-xl mb-4"">{infographic_title}</div>
DataPoint:
<div class=""mb-4"">{children}</div>
DataContainer:
<div class=""space-y-4"">{children}</div>"
Search Input Clear Button,"description:
The UI should be a search input field with a clear button on the right side. The clear button should appear only when there is text in the input field. When clicked, the clear button should clear the input field.
components:
- SearchInput: (standalone)
- ClearButton: (standalone)
html:
<div class=""flex w-full max-w-md""><SearchInput/><ClearButton/></div>
component html:
SearchInput:
<input type=""search"" class=""w-full pl-4 pr-10 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"" placeholder=""Search...""/>
ClearButton:
<button class=""inline-flex justify-center w-8 h-8 bg-gray-100 text-gray-500 hover:text-gray-700 hover:bg-gray-200 transition ease-in-out duration-200""><span aria-hidden=""true"">&times;</span></button>"
Real-time Comment and Discussion Forum,"description:
The UI should be a responsive, mobile-first comment and discussion forum that displays a list of comments and allows users to post new comments. The forum should have a clean and simple design, with clear typography and sufficient whitespace to improve readability.
components:
- CommentItem: A standalone component that displays a single comment.
- CommentForm: A standalone component that allows users to post a new comment.
- CommentList: A component that takes children (multiple `CommentItem` components) and displays them in a list.
- ForumHeader: A standalone component that displays the title of the forum.
- ForumContainer: A component that takes children (multiple components) and wraps them in a container with a max-width for responsive design.
html:
<div class=""max-w-md mx-auto p-4""><ForumHeader/><ForumContainer><CommentList><CommentItem/><CommentItem/><!-- Add more CommentItem components here --></CommentList><CommentForm/></ForumContainer></div>
component html:
CommentItem:
<div class=""flex gap-2 py-2 border-b border-gray-200""><img src=""{avatar_url}"" alt=""Avatar"" class=""w-8 h-8 rounded-full""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-gray-600"">{comment_text}</p></div></div>
CommentForm:
<form class=""flex flex-col gap-2""><input type=""text"" placeholder=""Write a comment..."" class=""w-full p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Post Comment </button></form>
CommentList:
<ul class=""list-none p-0"">{children}</ul>
ForumHeader:
<h1 class=""text-2xl font-bold"">{forum_title}</h1>
ForumContainer:
<div class=""max-w-md mx-auto p-4"">{children}</div>"
Social Media Icons,"description:
A horizontal row of social media icons, with each icon representing a different platform (e.g. Facebook, Twitter, Instagram, etc.). The icons should be evenly spaced and responsive to different screen sizes.
components:
- SocialMediaIcon: (standalone) - A single social media icon.
- SocialMediaIconList: (takes children) - A container for a list of social media icons.
html:
<nav aria-label=""Social media links""><SocialMediaIconList><SocialMediaIcon/><SocialMediaIcon/><SocialMediaIcon/><!-- Add more social media icons here --></SocialMediaIconList></nav>
component html:
SocialMediaIcon:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon}"" aria-hidden=""true""></i></a>
SocialMediaIconList:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Text input field for users to search within the website,"description:
A simple search input field with a placeholder and a submit button.
components:
- SearchInput: (standalone) - a text input field with a placeholder.
- SearchButton: (standalone) - a submit button.
html:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
component html:
SearchInput:
<input type=""search"" placeholder=""Search..."" class=""w-full md:w-1/2 lg:w-1/3 pl-2 pr-10 text-sm text-gray-700""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
"A footer component that displays links to social media profiles, a newsletter signup, and copyright information","description:
The footer component should have a clean and modern design, with a dark background to provide contrast to the rest of the UI. The social media links should be displayed prominently, with recognizable icons for each platform. The newsletter signup form should be simple and easy to use, with a clear call-to-action. The copyright information should be displayed in a smaller font size at the bottom of the footer.
components:
- SocialMediaLinks: (Standalone): Displays links to social media profiles, with icons for each platform.
- NewsletterSignup: (Takes Children): A simple form for users to sign up for a newsletter.
- CopyrightInfo: (Standalone): Displays copyright information.
html:
<footer class=""bg-gray-900 h-screen pt-12 md:pt-20 lg:pt-24""><div class=""container mx-auto p-4 md:p-6 lg:p-8""><SocialMediaLinks/><NewsletterSignup>{children}
</NewsletterSignup><CopyrightInfo/></div></footer>
component html:
SocialMediaLinks:
<ul class=""flex justify-center mb-4 md:mb-6 lg:mb-8""><li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{facebook_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- facebook --></svg></a></li><li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- twitter --></svg></a></li><li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{instagram_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- instagram --></svg></a></li></ul>
NewsletterSignup:
<div class=""max-w-md mx-auto mb-4 md:mb-6 lg:mb-8""><h3 class=""text-lg md:text-xl lg:text-2xl mb-2"">Stay in touch</h3><form><input type=""email"" placeholder=""Enter your email"" class=""w-full mb-2 md:mb-4 lg:mb-6""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign up</button>{children} </form></div>
CopyrightInfo:
<p class=""text-sm md:text-base lg:text-lg text-gray-500"">&copy; {year} {company_name}. All rights reserved.</p>"
Client testimonials display,"description:
A responsive, mobile-first testimonial display with a background image, a quote, the author's name, and their job title. The background image should be a subtle gradient that doesn't overpower the text.
components:
- TestimonialCard: Standalone component that contains the quote, author's name, and job title.
- QuoteText: Standalone component that displays the quote text.
- AuthorInfo: Standalone component that displays the author's name and job title.
html:
<section class=""relative h-screen bg-cover bg-center"" style=""background-image: url({background_image_url})""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><TestimonialCard/></div></section>
component html:
TestimonialCard:
<div class=""max-w-md mx-auto bg-white rounded shadow-md p-4 md:p-6""><QuoteText/><AuthorInfo/></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-4"">{quote_text}</blockquote>
AuthorInfo:
<p class=""text-sm"">{author_name}, {author_job_title}</p>"
"Call-to-action (CTA) button with a white outline and green fill, displaying ""Get Started""","description:
A prominent call-to-action button that stands out from the rest of the UI, with a clean and modern design. The button should have a white outline and a green fill, with the text ""Get Started"" in a clear and readable font.
components:
- CallToAction: (Standalone): A prominently displayed button that catches the user's attention, with a white outline and green fill.
html:
<div class=""flex justify-center p-4""><CallToAction/></div>
component html:
CallToAction:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border-2 border-white rounded"">Get Started</button>"
"A member list component that displays a list of community members, including their profile pictures and usernames","description:
The UI will be a responsive list of community members, showcasing their profile pictures and usernames. The list will be neatly organized, with each member's information displayed in a card-like format. On larger screens, the list will be divided into multiple columns to make the most of the available screen real estate. On smaller screens, the list will be a single column to ensure easy readability.
components:
- MemberList: (Takes Children): This is the top-level component that contains the list of community members.
- MemberCard: (Standalone): This component represents a single community member, displaying their profile picture and username.
html:
<MemberList><MemberCard/><MemberCard/><!-- Repeat for each community member --></MemberList>
component html:
MemberList:
<div class=""container mx-auto p-4 lg:p-6 xl:p-8""><h2 class=""text-2xl lg:text-3xl xl:text-4xl"">Community Members</h2><ul class=""flex flex-wrap justify-center lg:flex-no-wrap"">{children} </ul></div>
MemberCard:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4 xl:p-6""><div class=""bg-white rounded shadow-md p-4""><img src=""{profile_picture_url}"" alt=""{username}"" class=""w-16 h-16 rounded-full mx-auto""><h3 class=""text-lg"">{username}</h3></div></li>"
Call-to-Action (CTA) Button Section,"description:
The UI should be a prominent call-to-action (CTA) button section that encourages users to take a specific action. The section should be full-width, with a bold background color, and a contrasting CTA button that stands out. The section should be responsive, with the button size and spacing adjusting based on screen size.
components:
- CTASection: - standalone component that contains the entire CTA section
- CTAButton: - standalone component that represents the call-to-action button
html:
<section class=""relative pt-12 pb-20 lg:pt-20 lg:pb-32""><div class=""container max-w-md mx-auto p-4 lg:p-8""><CTASection/></div></section>
component html:
CTASection:
<div class=""bg-orange-500 text-white p-4 lg:p-8""><h2 class=""text-2xl lg:text-3xl"">{headline}</h2><p class=""text-lg lg:text-xl"">{description}</p><CTAButton/></div>
CTAButton:
<button class=""bg-white hover:bg-gray-200 text-orange-500 font-bold py-2 px-4 rounded"">{button_text}</button>"
User profile popup with avatar and username,"description:
The UI should be a popup modal that displays a user's avatar and username. The popup should be responsive, mobile-first, and accessible. The avatar should be a circular image, and the username should be displayed in a readable font size.
components:
- UserProfilePopup: - standalone component that represents the entire popup modal.
- UserProfileAvatar: - standalone component that represents the user's avatar.
- UserProfileUsername: - standalone component that represents the user's username.
html:
<div class=""fixed top-0 left-0 w-full h-full bg-gray-500 bg-opacity-50 flex justify-center pt-20""><!-- popup modal container --><div class=""bg-white rounded shadow-md p-4 w-96 md:w-128 lg:w-160""><!-- UserProfilePopup component --><UserProfilePopup/></div></div>
component html:
UserProfilePopup:
<div class=""flex flex-col items-center""><UserProfileAvatar/><UserProfileUsername/></div>
UserProfileAvatar:
<img src=""{avatar_url}"" alt=""User Avatar"" class=""rounded-full w-24 h-24 mb-2""/>
UserProfileUsername:
<h2 class=""text-lg font-bold"">{username}</h2>"
Upvote and downvote buttons for rating content,"description:
The UI should consist of two buttons, one for upvoting and one for downvoting, placed side by side. The upvote button should have an upward-facing arrow icon, and the downvote button should have a downward-facing arrow icon. The buttons should be small and compact, with a subtle background color and a hover effect to indicate interactivity.
components:
- RatingButtons: a standalone component that contains both the upvote and downvote buttons
- UpvoteButton: a standalone component that renders the upvote button
- DownvoteButton: a standalone component that renders the downvote button
html:
<div class=""flex items-center""><RatingButtons/></div>
component html:
RatingButtons:
<div class=""flex""><UpvoteButton/><DownvoteButton/></div>
UpvoteButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-arrow-up""></i><span>{upvote_count}</span></button>
DownvoteButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-arrow-down""></i><span>{downvote_count}</span></button>"
Mention display for tagged users,"description:
The UI should display a list of users with tags, allowing users to be mentioned in a post or comment. Each user should be displayed with their username and a tag icon.
components:
- TaggedUserList: A component that takes children, rendering a list of `TaggedUser` components.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Mentioned Users</h2><TaggedUserList><!-- list of tagged users will be rendered here --></TaggedUserList></div>
component html:
TaggedUserList:
<ul class=""list-none mb-0"">{children}</ul>"
"A resource card component with a blue background, white text, and an icon representing the resource type (e.g. book, video, article)","description:
The Resource Card component should have a blue background with white text and an icon representing the resource type. The card should be responsive and scale well on different screen sizes. On smaller screens, the card should be stacked vertically, while on larger screens, the icon and text should be side by side.
components:
- ResourceIcon: (Standalone): A component that renders an SVG icon representing the resource type (e.g. book, video, article).
html:
<!-- ResourceCard component --><div class=""bg-blue-500 p-4 rounded-md shadow-md""><ResourceIcon/><div class=""text-white"">{children}</div></div>
component html:
ResourceIcon:
<!-- Book Icon --><svg><!-- book --></svg><!-- Video Icon --><svg><!-- video --></svg><!-- Article Icon --><svg><!-- article --></svg>"
A button with a blue background and white text to follow or unfollow a user,"description:
The UI should have a prominent blue button with white text that stands out on the page. The button should be rounded and have a slight shadow to give it depth. On hover, the button should have a slight gradient effect to indicate interactivity. The text should be clear and easy to read. On smaller screens, the button should be full-width to ensure it's easy to tap.
components:
- FollowButton: (Takes Children): A button to follow or unfollow a user.
html:
<div class=""flex justify-center mb-4""><FollowButton>{followButtonText}</FollowButton></div>
component html:
FollowButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded shadow-md hover:shadow-lg"">{children}</button>"
Language selector,"description:
The language selector should be a dropdown menu that displays the current language and allows the user to select from a list of available languages. It should be responsive, mobile-friendly, and accessible.
components:
- LanguageSelector: (standalone): The main language selector component.
- LanguageOption: (takes children): A single language option in the dropdown menu.
html:
<nav class=""lg:flex justify-end pt-2""><LanguageSelector/></nav>
component html:
LanguageSelector:
<div class=""relative""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{currentLanguage} <span class=""caret""></span></button><ul class=""absolute top-full left-0 w-full bg-white rounded-b shadow-md""><LanguageOption>English</LanguageOption><LanguageOption>Español</LanguageOption><LanguageOption>Français</LanguageOption><!-- Add more language options here --></ul></div>
LanguageOption:
<li class=""px-4 py-2 hover:bg-gray-100""><a href=""#"" class=""block"">{children}</a></li>"
Featured Image Zoom Button,"description:
The UI should display a featured image with a zoom button overlaid on top of it. When the zoom button is clicked, a larger version of the image should be displayed. The zoom button should be circular and have a zoom icon (+) in the center.
components:
- FeaturedImage: standalone, displays the featured image
- ZoomButton: standalone, displays the zoom button
html:
<div class=""relative""><FeaturedImage/><ZoomButton/></div>
component html:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-full object-cover rounded-md""/>
ZoomButton:
<button class=""absolute bottom-4 right-4 rounded-full bg-white p-2 shadow-md""><span class=""text-2xl"">+</span></button>"
Product trials,"description:
The UI should display a list of product trials with their respective details, such as the product name, trial duration, and a call-to-action (CTA) button to sign up for the trial. The UI should be responsive, making it accessible on various devices and screen sizes.
components:
- ProductTrialCard: A standalone component representing a single product trial.
- TrialList: A component that takes children, rendering a list of `ProductTrialCard`s.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Product Trials</h2><TrialList><ProductTrialCard/><ProductTrialCard/><!-- Add more ProductTrialCard components here --></TrialList></div>
component html:
ProductTrialCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h3 class=""text-xl font-bold"">{productName}</h3><p>Free trial for {trialDuration} days</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign up for trial</button></div>
TrialList:
<ul class=""list-none mb-0"">{children}</ul>"
Contact List: Manage customer relationships,"description:
The Contact List UI should display a list of customer contacts, each with their name, email, and phone number. The list should be responsive, with a mobile-friendly design that adapts to different screen sizes. The UI should be accessible, with clear typography and sufficient color contrast. The design should also prioritize readability and simplicity, making it easy for users to scan and manage their customer relationships.
components:
- ContactListItem: (standalone): Represents an individual contact in the list, displaying name, email, and phone number.
- ContactListHEADER: (standalone): The header component that displays the column titles for the contact list.
- ContactListCONTAINER: (takes children): The main container that holds the contact list items.
html:
<div class=""max-w-md mx-auto p-4""><ContactListHEADER/><ContactListCONTAINER><!-- Contact list items will be rendered here --><ContactListItem/><ContactListItem/><!-- ... --></ContactListCONTAINER></div>
component html:
ContactListItem:
<li class=""flex items-center py-4""><div class=""w-1/3"">{contact_name}</div><div class=""w-1/3"">{contact_email}</div><div class=""w-1/3"">{contact_phone}</div></li>
ContactListHEADER:
<thead><tr><th class=""w-1/3"">Name</th><th class=""w-1/3"">Email</th><th class=""w-1/3"">Phone</th></tr></thead>
ContactListCONTAINER:
<table class=""w-full""><ContactListHEADER/><tbody>{children} </tbody></table>"
"A card component with a soft shadow, rounded corners, and a prominent headline","description:
The UI should feature a card component with a soft shadow to give it a sense of depth, rounded corners to soften the overall look, and a prominent headline to draw attention to the content. The card should have a clean and simple design, with a subtle gradient background to add visual interest. The headline should be bold and centered, with a larger font size to make it stand out.
components:
- CardComponent: (Takes Children): A reusable card component with a soft shadow, rounded corners, and a prominent headline.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><CardComponent><!-- Card content will be rendered here --></CardComponent></div>
component html:
CardComponent:
<div class=""bg-gradient-to-r from-gray-100 to-gray-200 rounded-lg shadow-md p-4 md:p-6""><h2 class=""text-3xl font-bold text-center"">{headline}</h2><div class=""px-4 md:px-6"">{children} </div></div>"
Product Description Table,"description:
The UI should be a table that displays product information in a clear and organized manner. The table should be responsive, with columns adapting to different screen sizes. The table should also be accessible, with proper semantic HTML and ARIA attributes.
components:
- ProductDescriptionTable: A standalone component that renders a table with product information.
- TableCell: A component that takes children and renders a table cell with the provided content.
- TableRow: A component that takes children and renders a table row with the provided cells.
html:
<div class=""max-w-md mx-auto p-4""><ProductDescriptionTable/></div>
component html:
ProductDescriptionTable:
<table class=""border-collapse w-full""><thead><TableRow><TableCell>Feature</TableCell><TableCell>Description</TableCell></TableRow></thead><tbody>{tableRows} </tbody></table>
TableCell:
<td class=""p-2 border"">{children}</td>
TableRow:
<tr class=""odd:bg-gray-100"">{children}</tr>"
A loading indicator (e.g. spinning wheel) to display while data is loading,"description:
The loading indicator should be a simple, centered spinning wheel that takes up the full height and width of the screen on mobile devices, and a smaller, fixed-size indicator on larger screens. The wheel should spin slowly and smoothly to convey that the system is working in the background.
components:
- LoadingIndicator: (Standalone): A spinning wheel that indicates that data is loading.
html:
<div class=""flex h-screen justify-center items-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""inline-block animate-spin""><div class=""h-12 w-12 border-4 border-solid rounded-full border-gray-300""><div class=""h-8 w-8 bg-gray-300 rounded-full""></div></div></div>"
A horizontal divider component to separate sections,"description:
The horizontal divider should be a thin, horizontal line that separates sections of content. It should be responsive, meaning it should adjust its width based on the screen size. On smaller screens, the divider should be more prominent to help separate sections, while on larger screens, it can be more subtle.
components:
- HorizontalDivider: (Standalone): A horizontal line that separates sections of content.
html:
<HorizontalDivider/>
component html:
HorizontalDivider:
<div class=""w-full h-px bg-gray-200 dark:bg-gray-600 md:bg-gray-300 lg:bg-gray-400 xl:bg-gray-500 mb-4 md:mb-6 lg:mb-8 xl:mb-10""><div class=""h-px bg-gray-200 dark:bg-gray-600 md:bg-gray-300 lg:bg-gray-400 xl:bg-gray-500""></div></div>"
Scroll-Activated Animation Effect,"description:
The UI should display a box that animates when the user scrolls to a certain point on the page. The box should be invisible until the animation is triggered.
components:
- AnimatedBox: (standalone) : A box that animates when the user scrolls to a certain point on the page.
html:
<div class=""h-screen overflow-y-scroll""><!-- scrollable content --><p>{scrollable_content}</p><!-- animated box --><AnimatedBox/><!-- more scrollable content --><p>{more_scrollable_content}</p></div>
component html:
AnimatedBox:
<div class=""hidden opacity-0 transition-all duration-500"" data-animate-trigger=""scroll"" data-animate-class=""block opacity-100""><!-- animated content --><p>{animated_content}</p></div>"
Featured Product Variations,"description:
The UI should display a featured product with variations, showcasing different options for the same product. The layout should be responsive, with a mobile-first approach, and should include accessibility features.
components:
- ProductHeader: A standalone component displaying the product name and rating.
- ProductImage: A standalone component displaying the product image.
- VariationSelect: A standalone component displaying a dropdown to select a product variation.
- ProductPrice: A standalone component displaying the product price.
- CallToAction: A standalone component displaying a call-to-action button.
- ProductVariationsList: A component taking children, displaying a list of product variations.
- ProductVariationItem: A component taking children, displaying a single product variation item.
html:
<div class=""max-w-md mx-auto""><ProductHeader/><ProductImage/><div class=""flex justify-between mb-4""><VariationSelect/><ProductPrice/></div><ProductVariationsList><ProductVariationItem>{variation_name}</ProductVariationItem><!-- repeat for each variation --></ProductVariationsList><CallToAction/></div>
component html:
ProductHeader:
<div class=""mb-4""><h2 class=""text-2xl"">{product_name}</h2><p>Rating: {rating}/5</p></div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full mb-4"">
VariationSelect:
<select class=""w-full p-2 mb-4""><option value="""">Select a variation</option><!-- options will be populated dynamically --></select>
ProductPrice:
<p class=""text-lg font-bold"">{price}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
ProductVariationsList:
<ul class=""list-none mb-4"">{children}</ul>
ProductVariationItem:
<li class=""py-2 border-b border-gray-200"">{children}</li>"
Map View of Locations,"description:
The UI should be a map view that displays multiple locations as markers on a map, with a sidebar that lists the locations. The map should be responsive and adapt to different screen sizes. The UI should be accessible and follow SEO best practices.
components:
- MapViewComponent: (standalone): The main map view component that renders the map and locations.
- LocationListComponent: (takes children): A list of locations in the sidebar.
- LocationListItemComponent: (standalone): A single location item in the list.
html:
<div class=""flex h-screen w-full""><MapViewComponent/><LocationListComponent><!-- List of locations will be rendered here --></LocationListComponent></div>
component html:
MapViewComponent:
<div class=""h-full w-full md:w-2/3""><!-- Map will be rendered here --><div id=""map"" class=""h-full w-full""></div></div>
LocationListComponent:
<div class=""h-full w-full md:w-1/3 overflow-y-auto p-4"">{children}</div>
LocationListItemComponent:
<div class=""flex items-center py-2 border-b border-gray-200""><span class=""mr-2"">{location_icon}</span><span>{location_name}</span></div>"
Avatar Upload: Input field for uploading a profile picture,"description:
The UI should be a simple input field with a label that allows users to upload a profile picture. The input field should be responsive and adapt to different screen sizes.
components:
- InputLabel: (standalone) - The label for the input field.
- InputField: (standalone) - The input field for uploading the profile picture.
html:
<div class=""flex flex-col md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4""><InputLabel/><InputField/><!-- Optional: display uploaded image --><img src=""{uploaded_image_url}"" alt=""Profile Picture"" class=""w-full h-full object-cover rounded-full""/></div>
component html:
InputLabel:
<label for=""avatar-upload"" class=""block mb-2 text-sm font-bold text-gray-700"">Upload Profile Picture</label>
InputField:
<input type=""file"" id=""avatar-upload"" class=""block w-full px-4 py-2 text-gray-700""/>"
Sparkle controls,"description:
The UI design for ""Sparkle Controls"" should consist of a collection of interactive elements like buttons, sliders, or dials that emulate a playful and vibrant 'sparkle' theme. These controls could be used for applications like sound mixers, lighting controls, or any user interface that benefits from a lively and engaging aesthetic. Each control will feature shimmering, glittering effects or animations to align with the theme.
components:
- SparkleButton: (Standalone): A button with a glittering sparkle effect on hover or click.
- SparkleSlider: (Standalone): A slider control that glints or shines as it is adjusted.
- SparkleDial: (Standalone): A rotational dial with a sparkling effect evident during interaction.
html:
<div class=""p-4""><h1 class=""text-xl text-center font-bold text-slate-700 my-4"">Sparkle Controls</h1><div class=""flex flex-wrap justify-around items-center""><SparkleButton/><SparkleSlider/><SparkleDial/></div></div>
component html:
SparkleButton:
<button class=""bg-gradient-to-r from-pink-300 via-purple-300 to-indigo-400 p-2 rounded-lg text-white hover:animate-pulse"">{button_text} </button>
SparkleSlider:
<label class=""block""><span class=""text-gray-700"">{label_text}</span><input type=""range"" class=""w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer sparkle-slider""></label>
SparkleDial:
<div class=""relative""><input type=""range"" min=""0"" max=""100"" value=""{initial_value}"" class=""rotation-slider appearance-none w-10 h-10 bg-transparent rounded-full cursor-pointer""><div class=""absolute inset-0 flex items-center justify-center""><div class=""text-xs"">{dial_label}</div></div></div>"
"Company overview component with a blue background, white text, and a logo","description:
The company overview component should have a blue background with white text and a logo. The layout should be responsive, with the logo and text resizing and repositioning to fit different screen sizes. On larger screens, the logo should be displayed prominently at the top, with the text below. On smaller screens, the logo should be smaller and to the left of the text.
components:
- CompanyOverview: (Takes Children): A container component that holds the logo and text.
- Logo: (Standalone): A component that displays the company logo.
- CompanyText: (Takes Children): A component that displays the company overview text.
html:
<CompanyOverview><Logo/><CompanyText>{company_name} is a leading {industry} company.</CompanyText></CompanyOverview>
component html:
CompanyOverview:
<div class=""bg-blue-500 h-screen flex flex-col justify-center p-4 lg:p-8"">{children}</div>
Logo:
<img class=""w-48 h-48 lg:w-64 lg:h-64 mx-auto mb-4 lg:mb-8"" src=""{logo_url}"" alt=""{company_name} logo""/>
CompanyText:
<p class=""text-white text-lg lg:text-2xl"">{children}</p>"
Toggle switches for settings,"description:
The UI should display a toggle switch with a label, allowing users to toggle a setting on or off. The toggle switch should be responsive, accessible, and follow a mobile-first approach.
components:
- ToggleSwitch: A standalone component that renders a toggle switch with a label.
html:
<div class=""flex justify-center mb-4""><ToggleSwitch/></div>
component html:
ToggleSwitch:
<div class=""flex items-center mb-2""><input id=""toggle-switch"" type=""checkbox"" class=""w-10 h-5 transition duration-300 rounded-full outline-none""/><label for=""toggle-switch"" class=""ml-2 text-sm font-medium text-gray-900"">{label_text} </label></div>"
A loading indicator with a spinning circles animation,"description:
The UI should feature a circular loading indicator with spinning circles animation. The animation should be smooth and continuous. The loading indicator should be centered on the screen and have sufficient space around it to avoid clutter. The animation should be visually appealing and not too distracting. The UI should adapt to different screen sizes, maintaining its center alignment and proportionally scaling the size of the loading indicator.
components:
- LoadingIndicator: (Standalone): A circular loading indicator with spinning circles animation. On small screens (sm:), it should be 40px in diameter. On medium screens (md:), it should be 60px in diameter. On large screens (lg:), it should be 80px in diameter.
html:
<div class=""flex h-screen justify-center items-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""relative""><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><div class=""animate-spin ease-linear rounded-full border-4 border-gray-200 border-t-4 border-t-white h-{loader_size} w-{loader_size}""></div></div></div>"
Video call interface,"description:
The UI should display a video feed from the local camera, a video feed from the remote caller, and some controls to manage the call. The layout should be responsive and adapt to different screen sizes.
components:
- CallHeader: A standalone component that displays the caller's information (e.g. name, profile picture).
- LocalVideoFeed: A standalone component that displays the local video feed from the user's camera.
- RemoteVideoFeed: A standalone component that displays the remote video feed from the caller.
- CallControls: A standalone component that displays buttons to manage the call (e.g. mute, unmute, hang up).
- CallLayout: A container component that takes children and arranges them in a responsive layout.
html:
<div class=""flex h-screen w-full""><CallLayout><CallHeader/><div class=""flex flex-wrap justify-center""><LocalVideoFeed/><RemoteVideoFeed/></div><CallControls/></CallLayout></div>
component html:
CallHeader:
<div class=""flex items-center mb-4""><img src={profile_picture} alt={caller_name} class=""w-12 h-12 rounded-full mr-4""/><h2 class=""text-lg"">{caller_name}</h2></div>
LocalVideoFeed:
<video autoplay playsinline class=""w-full h-full max-w-md max-h-md""></video>
RemoteVideoFeed:
<video autoplay playsinline class=""w-full h-full max-w-md max-h-md""></video>
CallControls:
<div class=""flex justify-center mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Mute</button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ml-4"">Unmute</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ml-4"">Hang up</button></div>
CallLayout:
<!-- this component just wraps its children with some basic layout styles --><div class=""flex flex-col items-center p-4"">{children}</div>"
Create a simple round avatar icon for customer profiles,"description:
The UI should feature a circular avatar with a subtle shadow to give it a slight 3D effect. The avatar should be a consistent size across all screen sizes, with a slightly larger size on larger screens. The avatar should have a white background with a dark-colored border to make it stand out.
components:
- AvatarIcon: (Standalone): This component will render a circular avatar with a white background and a dark-colored border. On smaller screens (sm), the avatar will be 40px in diameter. On larger screens (md and up), the avatar will be 60px in diameter.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<div class=""rounded-full bg-white border-2 border-gray-800 shadow-md w-10 h-10 sm:w-10 sm:h-10 md:w-12 md:h-12 lg:w-12 lg:h-12 xl:w-16 xl:h-16""><img src=""{avatar_url}"" alt=""{customer_name}"" class=""rounded-full w-full h-full""/></div>"
A call-to-action (CTA) button with a bold font and a white background,"description:
The UI should have a prominent call-to-action (CTA) button that stands out with a bold font and a white background. The button should be easily clickable on different screen sizes and should have sufficient padding to make it accessible.
components:
- CtaButton: (Standalone): A prominent call-to-action button with a bold font and a white background.
html:
<div class=""flex justify-center h-screen""><CtaButton/></div>
component html:
CtaButton:
<button class=""bg-white text-lg font-bold py-4 px-8 rounded shadow-md hover:shadow-lg transition duration-500 ease-in-out"">{cta_text}</button>"
"Footer with a black background, social media links, and copyright information","description:
The footer should have a black background to make the content stand out. The social media links should be displayed horizontally, with a slight gap between each link. The copyright information should be displayed below the social media links. The footer should be responsive, taking up the full width of the screen on mobile devices and stacking the content vertically. On larger screens, the social media links should be displayed side by side, with the copyright information centered below.
components:
- SocialMediaLink: (Standalone): A single social media link, represented by an SVG icon.
- CopyrightInfo: (Standalone): The copyright information, including the year and organization name.
html:
<footer class=""bg-black h-screen py-8 md:py-12 lg:py-16""><div class=""container mx-auto px-4 md:px-6 lg:px-12""><div class=""flex flex-wrap justify-center"">{socialMediaLinks}
</div><div class=""text-center text-white""><CopyrightInfo/></div></div></footer>
component html:
SocialMediaLink:
<a href=""{linkUrl}"" target=""_blank"" class=""text-white hover:text-gray-300 transition duration-300 ease-in-out""><svg><!-- {socialMediaPlatform} --></svg></a>
CopyrightInfo:
<p class=""text-white"">{copyrightYear} {organizationName}. All rights reserved.</p>"
A call-to-action button with a blue background and white text,"description:
The UI should be a prominent call-to-action button that stands out on the page. It should have a blue background and white text to create high contrast and draw the user's attention.
components:
- CallToActionButton: (Standalone): A prominent button that encourages the user to take action.
html:
<div class=""flex justify-center mb-4""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
A graph component displaying user progress (e.g. a line chart),"description:
The graph component should be a responsive, interactive line chart that displays a user's progress over time. The chart should be easy to read and understand, with clear labels and a clean design. The graph should scale well on different screen sizes, with a minimum height to ensure the chart is always legible.
components:
- GraphContainer: (Takes Children): A container component that wraps the graph and its associated elements. This component should be responsive and adapt to different screen sizes.
- GraphChart: (Standalone): The line chart component that displays the user's progress. This component should be interactive, allowing users to hover over data points to see more information.
- GraphLegend: (Takes Children): A component that displays the legend for the graph, explaining the different data series represented on the chart.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><GraphContainer><GraphChart/><GraphLegend><!-- legend items will be rendered here --></GraphLegend></GraphContainer></div>
component html:
GraphContainer:
<div class=""flex flex-col md:flex-row justify-center items-center p-4 md:p-6 lg:p-8"">{children}</div>
GraphChart:
<div class=""w-full h-64 md:h-80 lg:h-96""><!-- the line chart will be rendered here --><svg><!-- graph data will be rendered here --></svg></div>
GraphLegend:
<ul class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8"">{children}</ul>"
"Review component with a user avatar, game title, rating, and review text","description:
The review component should be a compact, visually appealing container that displays essential information about a user's review of a game. It should include a user avatar, game title, rating, and review text. The component should be responsive, scaling down on smaller screens to maintain readability.
components:
- ReviewComponent: (Takes Children): A container component that wraps all review information.
- UserAvatar: (Standalone): A circular image displaying the user's avatar.
- GameTitle: (Standalone): A heading element displaying the title of the game.
- Rating: (Standalone): A rating indicator displaying the user's rating (e.g., 1-5 stars).
- ReviewText: (Standalone): A text element displaying the user's review text.
html:
<div class=""flex flex-wrap bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><ReviewComponent><UserAvatar/><GameTitle/><Rating/><ReviewText/></ReviewComponent></div>
component html:
ReviewComponent:
<div class=""flex flex-wrap justify-between mb-4"">{children}</div>
UserAvatar:
<img src={avatarUrl} alt=""User Avatar"" class=""w-12 h-12 rounded-full mr-4""/>
GameTitle:
<h2 class=""text-lg font-bold"">{gameTitle}</h2>
Rating:
<div class=""text-yellow-400"">{rating}/5 <i class=""fas fa-star"" aria-hidden=""true""></i></div>
ReviewText:
<p class=""text-gray-600"">{reviewText}</p>"
Project/Task Management Tools,"description:
The UI should be a task management dashboard that displays a list of tasks, with filters and sorting options. The dashboard should be responsive, with a mobile-first approach, and should be accessible and SEO-friendly.
components:
- TaskCard: A standalone component that displays a single task.
- TaskList: A component that takes children, which is a list of `TaskCard` components.
- FilterBar: A standalone component that displays filter and sorting options.
- Dashboard: A component that takes children, which is the main dashboard container.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><FilterBar/><Dashboard><TaskList><TaskCard/><TaskCard/><!-- Add more TaskCard components here --></TaskList></Dashboard></div>
component html:
TaskCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><div class=""flex justify-between mt-2""><button class=""btn btn-primary"">Edit</button><button class=""btn btn-danger"">Delete</button></div></div>
TaskList:
<ul class=""list-none mb-4"">{children}</ul>
FilterBar:
<div class=""flex justify-between mb-4""><select class=""w-full lg:w-1/2 xl:w-1/3""><option value="""">Filter by</option><option value=""all"">All tasks</option><option value=""completed"">Completed tasks</option><option value=""pending"">Pending tasks</option></select><button class=""btn ml-2"">Sort by</button></div>
Dashboard:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
A featured products section with a title and a grid of product cards,"description:
The featured products section should have a clear title that stands out, followed by a grid of product cards that adapt to different screen sizes. The product cards should have a visually appealing design, with a clear image, product name, and short description. The grid should be responsive, with 2-3 columns on larger screens and 1-2 columns on smaller screens.
components:
- FeaturedProductsSection: (Takes Children): A container component that holds the title and product grid.
- ProductCard: (Takes Children): A component that represents a single product, featuring an image, name, and short description.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><FeaturedProductsSection><h2 class=""text-xl font-bold mb-4"">Featured Products</h2><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><ProductCard><!-- product card content --></ProductCard><ProductCard><!-- product card content --></ProductCard><!-- more product cards --></div></FeaturedProductsSection></div>
component html:
FeaturedProductsSection:
<div class=""bg-white shadow-md rounded p-4 lg:p-6"">{children}</div>
ProductCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover mb-4""/><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-gray-600"">{product_description}</p>{children}</div>"
"Navigation menu with game categories (e.g. action, adventure, role-playing) and a dropdown arrow","description:
The navigation menu should be a compact and responsive dropdown menu that displays a list of game categories. On smaller screens, the menu should be accessible via a hamburger icon, while on larger screens, it should be displayed as a horizontal menu bar. The menu items should have a subtle hover effect and a highlighted active state. The dropdown arrow should be a simple, downward-pointing caret.
components:
- GameCategoryNavigation: Takes children. A container component for the navigation menu.
- GameCategoryMenuItem: Takes children. A single menu item with a category name and a dropdown arrow.
- DropdownArrow: Standalone. A small, downward-pointing caret icon.
html:
<div class=""sticky top-0 z-50 flex justify-center w-full lg:w-auto bg-gray-100 py-2 md:py-4""><GameCategoryNavigation><GameCategoryMenuItem>action</GameCategoryMenuItem><GameCategoryMenuItem>adventure</GameCategoryMenuItem><GameCategoryMenuItem>role-playing</GameCategoryMenuItem><!-- Add more menu items here --></GameCategoryNavigation></div>
component html:
GameCategoryNavigation:
<nav class=""flex flex-wrap justify-center lg:flex-no-wrap lg:justify-start"">{children}</nav>
GameCategoryMenuItem:
<button class=""flex items-center justify-between w-full py-2 pl-4 pr-2 md:py-4 md:pl-6 md:pr-4 hover:bg-gray-200"">{children} <DropdownArrow/></button>
DropdownArrow:
<span class=""text-gray-500 text-sm"">△</span>"
Color pickers,"description:
A color picker UI consists of a input field to enter a color value, a color picker button, and a color preview container to display the selected color. The UI should be responsive, mobile-first, and accessible.
components:
- ColorInput: A standalone component that renders a text input field to enter a color value.
- ColorPickerButton: A standalone component that renders a button to open the color picker dialog.
- ColorPreview: A standalone component that displays the selected color.
- ColorPickerDialog: A component that takes children, which is a dialog that contains the color picker UI.
html:
<div class=""flex flex-col gap-2 p-4""><ColorInput/><ColorPickerButton/><ColorPreview/><ColorPickerDialog><!-- Color picker UI content here --></ColorPickerDialog></div>
component html:
ColorInput:
<input type=""text"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" value={colorValue}/>
ColorPickerButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Pick a color</button>
ColorPreview:
<div class=""h-6 w-6 rounded-full"" style=""backgroundColor: selectedColor;""}/>
ColorPickerDialog:
<div class=""absolute top-0 left-0 w-full h-full bg-white rounded shadow-md p-4""><!-- Color picker UI content here -->{children}</div>"
"Divider component with a thin, bright orange line","description:
The Divider component should be a thin, bright orange line that separates different sections of the UI. It should be responsive and adapt to different screen sizes.
components:
- Divider: (Standalone): A thin, bright orange line that separates different sections of the UI.
html:
<!-- Assume this is part of a larger UI, and we're focusing on the Divider component --><div class=""flex flex-col mx-auto p-4 md:p-8 lg:p-12""><!-- Content above the divider --><Divider/><!-- Content below the divider --></div>
component html:
Divider:
<div class=""w-full h-0.5 bg-orange-500 my-4 md:my-6 lg:my-8""></div>"
Payment gateways,"description:
The UI should display a list of payment gateways, each with its logo, name, and a brief description. The list should be responsive, mobile-first, and accessible. The UI should also be simple and easy to use.
components:
- PaymentGatewayCard: A standalone component that represents a single payment gateway.
- PaymentGatewaysList: A component that takes children (a list of `PaymentGatewayCard` components).
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Payment Gateways</h2><PaymentGatewaysList><PaymentGatewayCard/><PaymentGatewayCard/><!-- Add more PaymentGatewayCard components here --></PaymentGatewaysList></div>
component html:
PaymentGatewayCard:
<div class=""flex items-center p-4 border-b border-gray-200""><img src={gatewayLogo} alt={gatewayName} class=""w-8 h-8 mr-4""/><div><h3 class=""text-sm font-bold"">{gatewayName}</h3><p class=""text-sm text-gray-600"">{gatewayDescription}</p></div></div>
PaymentGatewaysList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Call-to-Action Buttons (CTAs),"description:
The UI should display a prominent call-to-action button that encourages users to take a specific action. The button should be visually appealing, easy to click, and accessible on various devices.
components:
- PrimaryButton: A standalone component that renders a primary call-to-action button.
html:
<div class=""max-w-md mx-auto p-4""><PrimaryButton/></div>
component html:
PrimaryButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""button"">{button_text}</button>"
Message input field with send button and emoji picker,"description:
The UI should be a message input field with a send button and an emoji picker. The input field should be responsive and mobile-friendly. The send button should be enabled only when the input field has some text. The emoji picker should be a dropdown list that appears when the user clicks on the emoji icon. The UI should be accessible, with clear labels and high contrast colors.
components:
- MessageInputField: standalone component that renders an input field.
- SendButton: standalone component that renders a button.
- EmojiPicker: standalone component that renders a dropdown list of emojis.
- EmojiPickerTrigger: takes children, renders a button that toggles the emoji picker dropdown.
html:
<div class=""flex flex-wrap justify-center mb-4""><MessageInputField/><SendButton/><EmojiPickerTrigger><EmojiPicker/></EmojiPickerTrigger></div>
component html:
MessageInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type a message...""/>
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={isDisabled}>Send</button>
EmojiPicker:
<ul class=""absolute bg-white rounded shadow-md p-2"">{emojis.map((emoji) =>( <li class=""py-2 px-4 hover:bg-gray-100"">{emoji}</li>))}</ul>
EmojiPickerTrigger:
<button class=""p-2 hover:bg-gray-100 rounded text-lg"">{children}</button>"
A loading animation component with a spinning wheel and text,"description:
The loading animation component should be a circular loading wheel with a spinning animation, accompanied by a brief text description indicating that the application is loading. The text should be short and concise, such as ""Loading..."" or ""Please wait..."". The component should be centered on the screen and have a subtle background color to make it stand out.
components:
- LoadingAnimation: (Standalone): This component will render a circular loading wheel with a spinning animation and a brief text description.
html:
<div class=""flex justify-center items-center h-screen""><LoadingAnimation/></div>
component html:
LoadingAnimation:
<div class=""flex justify-center mb-4""><div class=""animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-purple-500""/><p class=""text-lg text-purple-600"">{loading_text}</p></div>"
Hero Background Video,"description:
The UI should be a full-screen hero section with a background video that auto-plays on load. The video should be muted and loop indefinitely. There should be a text overlay with a heading and a call-to-action (CTA) button.
components:
- HeroBackgroundVideo: A standalone component that renders a full-screen background video.
- HeroOverlay: A component that renders the text overlay with a heading and CTA button. Takes children.
html:
<div class=""h-screen w-full relative""><HeroBackgroundVideo/><HeroOverlay><!-- Hero overlay content will go here --></HeroOverlay></div>
component html:
HeroBackgroundVideo:
<video autoPlay loop muted class=""absolute top-0 left-0 w-full h-full object-cover"" poster={video_poster}><source src={video_src} type={video_type}/>Your browser does not support the video tag.</video>
HeroOverlay:
<div class=""absolute top-0 left-0 w-full h-full flex items-center justify-center"">{children}</div>"
Date and time,"description:
The UI should display the current date and time in a clear and readable format.
components:
- DateTimeDisplay: A standalone component that displays the current date and time.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><DateTimeDisplay/></div>
component html:
DateTimeDisplay:
<div class=""text-lg md:text-xl lg:text-2xl font-bold"">{date}, {time}</div>"
Header Search Button,"description:
A navigation header with a search button that is responsive, mobile-first, and accessible.
components:
- Navbar: (standalone) - the main navigation header
- SearchButton: (standalone) - a button to trigger search functionality
html:
<header class=""flex justify-between p-4""><nav class=""w-full md:w-1/2""><Navbar/></nav><SearchButton/></header>
component html:
Navbar:
<nav class=""flex justify-between""><ul class=""flex justify-between mb-0 list-none""><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_1}</a></li><li class=""mr-4""><a href=""#"" class=""text-blue-600"">{nav_item_2}</a></li><!-- Add more list items as needed --></ul></nav>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span class=""sr-only"">Search</span><i class=""fas fa-search"" aria-hidden=""true""></i></button>"
Search bar with a white outlined box and a magnifying glass icon,"description:
The search bar UI should be a prominent element on the page, with a clear and concise design that draws the user's attention. The search bar should be a rectangular box with a white outline, with a magnifying glass icon on the left side. The search input field should be large enough to accommodate a moderate-length search query. On smaller screens, the search bar should shrink in size to fit the available space.
components:
- SearchBar: (Takes Children): A search bar component that contains a magnifying glass icon and a text input field.
- MagnifyingGlassIcon: (Standalone): A magnifying glass icon component used in the `SearchBar` component.
- SearchInput: (Standalone): A text input field component used in the `SearchBar` component.
html:
<SearchBar><MagnifyingGlassIcon/><SearchInput/></SearchBar>
component html:
SearchBar:
<div class=""flex justify-start w-full max-w-md mx-auto bg-white border border-white hover:border-gray-200 transition duration-300 ease-in-out"">{children}</div>
MagnifyingGlassIcon:
<i class=""fas fa-search text-gray-500 text-lg"" aria-hidden=""true""></i>
SearchInput:
<input class=""w-full pl-10 py-2 text-lg text-gray-700 border-none rounded-r-md focus:outline-none"" type=""search"" placeholder=""Search...""/>"
A call-to-action button with a green background and white text,"description:
The call-to-action button should be a prominent element on the page, drawing the user's attention to take action. It should have a green background and white text to create a high contrast and make it easily readable. The button should be rounded to give it a softer and more approachable look.
components:
- CallToActionButton: (Standalone): A button element with a green background and white text that serves as a call-to-action.
html:
<div class=""flex justify-center""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Dropdown menu that expands inline within the content flow,"description:
The UI should be a dropdown menu that expands inline within the content flow. It should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- DropdownToggle: A standalone component that triggers the dropdown menu.
- DropdownMenu: A component that takes children and contains the dropdown menu items.
- DropdownMenuItem: A standalone component that represents an individual item in the dropdown menu.
html:
<nav><DropdownToggle/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><!-- Add more DropdownMenuItem components here --></DropdownMenu></nav>
component html:
DropdownToggle:
<button class=""text-sm font-bold py-2 px-4 rounded-md hover:bg-gray-100"">{toggle_text}</button>
DropdownMenu:
<ul class=""list-none p-0 m-0 bg-white shadow-md rounded"">{children}</ul>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href=""{item_href}"" class=""text-sm text-gray-600"">{item_text}</a></li>"
"A call-to-action (CTA) component that displays a bold, bright-colored button with a white outline","description:
The CTA component should be a prominent, eye-catching element that stands out on the page. It should have a bold, bright-colored background with a white outline to create a sense of depth and dimension. The text should be large and bold to grab the user's attention.
components:
- CallToAction: (Takes Children): This component represents the CTA button. It should be a rectangular button with a bold, bright-colored background and a white outline.
html:
<div class=""max-w-md mx-auto mt-4 mb-8""><CallToAction>Get Started Today!</CallToAction></div>
component html:
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 border-2 border-white rounded"">{children}</button>"
Audio filters,"description:
The UI should be a horizontal list of audio filters, with each filter represented by a button. The buttons should be responsive, adapting to different screen sizes, and accessible, with clear labels and descriptive text. The UI should be simple and easy to use.
components:
- AudioFilterButton: a standalone component representing a single audio filter button.
- AudioFiltersList: a component that takes children, containing the list of audio filter buttons.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Audio Filters</h2><AudioFiltersList><AudioFilterButton/><AudioFilterButton/><AudioFilterButton/><!-- Add more AudioFilterButton components as needed --></AudioFiltersList></div>
component html:
AudioFilterButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">{filter_name}</button>
AudioFiltersList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Footer Social Media Icon,"description:
The UI should be a footer social media icon list that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. It should consist of a horizontal list of social media icons (e.g. Facebook, Twitter, Instagram, etc.) with a hover effect to change the icon color.
components:
- FooterSocialMediaIconList: A standalone component that contains a list of social media icons.
- SocialMediaIcon: A component that takes children (the icon itself) and is a child of `FooterSocialMediaIconList`.
html:
<footer class=""px-4 pt-4 md:px-6 md:pt-6 lg:px-8 lg:pt-8""><FooterSocialMediaIconList/></footer>
component html:
FooterSocialMediaIconList:
<ul class=""flex justify-center md:flex-wrap""><SocialMediaIcon><i class=""fab fa-facebook-f"">{facebook_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"">{twitter_icon}</i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"">{instagram_icon}</i></SocialMediaIcon><!-- Add more social media icons here --></ul>
SocialMediaIcon:
<li class=""mr-4 md:mr-6 lg:mr-8""><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"">{children} </a></li>"
Make a component that displays a product rating with 5-star icons and a percentage score,"description:
The UI should display a product rating component that shows a rating out of 5 stars and a percentage score. The component should be responsive and adapt to different screen sizes. On smaller screens, the component should be compact and easy to read, while on larger screens, it should be more prominent and visually appealing.
components:
- RatingComponent: (Takes Children): This component displays the product rating with 5-star icons and a percentage score. On small screens (sm:), the component should be compact and show only the rating and percentage score. On medium screens (md:), the component should add some padding and margin to create a clean layout. On large screens (lg:), the component should increase in size and add a subtle shadow effect.
html:
<div class=""flex justify-center mb-4""><RatingComponent><!-- rating and percentage score will be rendered here --></RatingComponent></div>
component html:
RatingComponent:
<div class=""flex items-center justify-center mb-2 sm:mb-4 md:px-4 lg:px-8 lg:shadow-md""><div class=""flex""><!-- 5-star icons -->{[...Array(5)].map((_, i) =>( <i key={i} class={`fas fa-star {i < rating ? 'text-yellow-300' : 'text-gray-300'}`}></i>))} </div><div class=""ml-2 text-lg"">{percentageScore}%</div>{children}</div>"
A navigation bar with white text and a green underline effect on hover,"description:
The navigation bar should be a horizontal bar at the top of the screen with links to different sections of the website. The text should be white, and on hover, the text should have a green underline effect. The navigation bar should be responsive, so it scales down on smaller screens.
components:
- NavigationBar: (Takes Children): A horizontal navigation bar with links to different sections of the website.
- NavItem: (Takes Children): An individual navigation item with a link and hover effect.
html:
<NavigationBar><NavItem>Home</NavItem><NavItem>About</NavItem><NavItem>Contact</NavItem></NavigationBar>
component html:
NavigationBar:
<nav class=""flex justify-between bg-gray-800 py-4"">{children}</nav>
NavItem:
<a class=""text-white hover:text-white hover:no-underline hover:border-b-2 hover:border-green-500"" href={link_href}>{children}</a>"
Semantic HTML5 Markup,"description:
The UI should be a basic web page with a header, navigation, main content area, and footer. The layout should be responsive and mobile-friendly.
components:
- HeaderComponent: (standalone) - The topmost section of the page, containing the site's title and navigation.
- NavigationComponent: (standalone) - A list of links to other parts of the site.
- MainComponent: (takes children) - The main content area of the page, containing articles, images, or other content.
- FooterComponent: (standalone) - The bottommost section of the page, containing copyright information and other miscellaneous links.
html:
<html lang=""en""><head><meta charset=""UTF-8""/><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""/><title>{title}</title></head><body class=""min-h-screen flex flex-col""><HeaderComponent/><NavigationComponent/><main class=""flex-1""><MainComponent><!-- child components will be rendered here --></MainComponent></main><FooterComponent/></body></html>
component html:
HeaderComponent:
<header class=""bg-blue-500 py-4 text-white""><h1>{site_title}</h1></header>
NavigationComponent:
<nav class=""bg-gray-200 py-4""><ul class=""flex flex-wrap justify-center""><li class=""mr-4""><a href=""{nav_link_1}"">{nav_text_1}</a></li><li class=""mr-4""><a href=""{nav_link_2}"">{nav_text_2}</a></li><!-- more links here --></ul></nav>
MainComponent:
<div class=""px-4 pt-4"">{children}</div>
FooterComponent:
<footer class=""bg-gray-200 py-4""><p>&copy; {year} {site_name}</p></footer>"
Make a product grid component that displays a grid of product cards,"description:
The product grid component should be a responsive grid that adapts to different screen sizes, displaying a collection of product cards in a clean and organized manner. The grid should have a maximum of 3 columns on larger screens, and reduce to 2 columns on medium screens, and a single column on small screens. Each product card should have a prominent image, a brief product description, and a ""Buy Now"" call-to-action button.
components:
- ProductGrid: (Takes Children): The top-level component that wraps the grid of product cards.
- ProductCard: (Standalone): An individual product card that displays product information.
html:
<div class=""max-w-md mx-auto pt-4 pb-8""><ProductGrid><!-- Product cards will be rendered here --></ProductGrid></div>
component html:
ProductGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"">{children}</div>
ProductCard:
<div class=""bg-white shadow-md rounded overflow-hidden""><img src={productImageSrc} alt={productName} class=""w-full h-48 object-cover""/><div class=""p-4""><h2 class=""text-lg font-bold"">{productName}</h2><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>"
Email filtering and sorting options,"description:
The UI should be a compact and responsive email filtering and sorting options panel that can be easily accessed from an email inbox. It should have a minimalistic design with clear labels and intuitive icons. The panel should be adaptable to different screen sizes and devices.
components:
- EmailFilterOption: (standalone) - A single filter option with a checkbox and label.
- EmailSortOption: (standalone) - A single sort option with a radio button and label.
- FilterPanel: (takes children) - The main filter panel that contains all the filter options.
- SortPanel: (takes children) - The main sort panel that contains all the sort options.
html:
<div class=""max-w-md mx-auto p-4 bg-white rounded shadow-md""><FilterPanel><EmailFilterOption/><EmailFilterOption/><EmailFilterOption/></FilterPanel><SortPanel><EmailSortOption/><EmailSortOption/><EmailSortOption/></SortPanel></div>
component html:
EmailFilterOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" id=""{filterId}"" class=""mr-2""><label for=""{filterId}"" class=""text-sm"">{filterLabel}</label></div>
EmailSortOption:
<div class=""flex items-center mb-2""><input type=""radio"" id=""{sortId}"" class=""mr-2""><label for=""{sortId}"" class=""text-sm"">{sortLabel}</label></div>
FilterPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Filters</h5>{children}</div>
SortPanel:
<div class=""mb-4""><h5 class=""text-lg mb-2"">Sort by</h5>{children}</div>"
"Discussion thread component with a user avatar, discussion title, and post content","description:
The UI should resemble a typical discussion thread, with a clear visual hierarchy to guide the user's attention. The user avatar should be prominently displayed, followed by the discussion title, and then the post content. The layout should be responsive, with a single column on small screens and a two-column layout on larger screens.
components:
- DiscussionThread: Takes children. This component represents the entire discussion thread, containing the avatar, title, and post content. On small screens, it will be a single column, and on larger screens, it will be a two-column layout.
- Avatar: Standalone. This component displays the user's avatar. It should be a circular image with a subtle border and a light gray background.
- DiscussionTitle: Takes children. This component displays the title of the discussion. It should be a heading element with a large font size and a bold font weight.
- PostContent: Takes children. This component displays the content of the post. It should be a paragraph element with a regular font size and a readable font family.
html:
<DiscussionThread><Avatar/><DiscussionTitle>{discussion_title}</DiscussionTitle><PostContent>{post_content}</PostContent></DiscussionThread>
component html:
DiscussionThread:
<div class=""flex flex-col md:flex-row justify-start items-start md:items-center"">{children}</div>
Avatar:
<img src={avatar_url} alt=""User Avatar"" class=""w-12 h-12 rounded-full border-2 border-gray-200""/>
DiscussionTitle:
<h2 class=""text-2xl font-bold"">{children}</h2>
PostContent:
<p class=""text-lg"">{children}</p>"
"Quote component with a large font size, italic font style, and a subtle quotation mark icon","description:
The Quote component should be a visually appealing element that draws attention to the quoted text. It should have a large font size, italic font style, and a subtle quotation mark icon. The component should scale well on different screen sizes, ensuring that the text remains readable and the icon is not distorted.
components:
- Quote: (Takes Children): This component will display the quoted text with a large font size, italic font style, and a subtle quotation mark icon. On smaller screens (mobile devices), the text should be centered and the icon should be smaller. On larger screens (tablets and desktops), the text can be left-aligned and the icon can be larger.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><Quote>{children}</Quote></div>
component html:
Quote:
<span class=""text-lg md:text-xl lg:text-2xl italic""><i class=""fas fa-quote-left mr-2 text-gray-500""></i>{children}</span>"
Comment Section: User discussions and feedback,"description:
The UI should be a comment section with a list of comments, each with a username, timestamp, comment text, and a reply button. The design should be clean, minimal, and easy to read.
components:
- CommentCard: A standalone component that represents a single comment.
- CommentList: A component that takes children (CommentCards) and displays them in a list.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Comments</h2><CommentList><CommentCard/><CommentCard/><!-- more CommentCards here --></CommentList></div>
component html:
CommentCard:
<div class=""bg-white p-4 mb-4 shadow-md""><div class=""flex items-center mb-2""><span class=""text-sm"">{username}</span><span class=""text-xs text-gray-500 ml-2"">{timestamp}</span></div><p class=""text-sm"">{comment_text}</p><button class=""text-sm text-blue-500 hover:text-blue-700 transition duration-300 ease-in-out"">Reply</button></div>
CommentList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
A grid of movie/TV show posters (250x350px) with a white border and a subtle drop shadow,"description:
The UI should be a responsive grid of movie/TV show posters, with a white border and a subtle drop shadow. The posters should have a consistent size of 250x350px, with a 2px white border and a subtle drop shadow to give a sense of depth. The grid should be responsive, with a maximum of 5 posters per row on larger screens and fewer posters per row on smaller screens. The background of the grid should be a dark gray color to make the posters stand out.
components:
- PosterGrid: (Takes Children): A responsive grid of movie/TV show posters.
- Poster: (Standalone): A single movie/TV show poster with a white border and a subtle drop shadow.
html:
<div class=""container mx-auto p-4 lg:p-6""><PosterGrid><!-- Posters will be rendered here --></PosterGrid></div>
component html:
PosterGrid:
<div class=""grid gap-4 lg:gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5"">{children}</div>
Poster:
<div class=""bg-gray-800 shadow-md border-2 border-white rounded""><img src=""{poster_image_url}"" alt=""{poster_title}"" class=""w-full h-full object-cover""></div>"
Interactive element used for actions like submitting forms or navigating,"description:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly interactive element that can be used for actions like submitting forms or navigating. It should have a clear and consistent visual design, with sufficient color contrast and clear typography.
components:
- Button: A standalone component that renders a clickable button.
html:
<Button/>
component html:
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""{button_type}"">{button_text}</button>"
Poll question display,"description:
The UI should display a poll question with options and a submit button. It should be responsive, mobile-first, and accessible.
components:
- PollQuestion: Standalone component that displays the poll question.
- PollOption: Standalone component that displays a poll option.
- SubmitButton: Standalone component that displays a submit button.
- PollContainer: Takes children (PollQuestion, PollOption, SubmitButton).
html:
<div class=""max-w-md mx-auto bg-white p-4 shadow-md rounded""><PollContainer><PollQuestion/><ul><PollOption/><PollOption/><!-- add more PollOption components as needed --></ul><SubmitButton/></PollContainer></div>
component html:
PollQuestion:
<h2 class=""text-lg"">{question_text}</h2>
PollOption:
<li class=""py-2""><input type=""radio"" id=""{option_id}"" name=""poll_option""/><label for=""{option_id}"" class=""text-lg"">{option_text}</label></li>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>
PollContainer:
<div class=""px-4 py-2"">{children}</div>"
Featured Product Price Tag,"description:
The UI should display a featured product price tag with a discounted price, original price, and a percentage discount. The design should be responsive, mobile-first, and accessible.
components:
- FeaturedPriceTag: (standalone): Display the featured product price tag.
- DiscountBadge: (standalone): Display the percentage discount badge.
html:
<div class=""flex flex-wrap items-center mb-4""><FeaturedPriceTag/></div>
component html:
FeaturedPriceTag:
<div class=""bg-gray-100 p-2 rounded""><p class=""text-lg font-bold"">{newPrice}</p><p class=""text-gray-500 line-through"">{originalPrice}</p><DiscountBadge/></div>
DiscountBadge:
<span class=""bg-orange-200 text-orange-600 px-2 py-1 rounded"">{discountPercentage}% off</span>"
Map interface allowing users to interact with and explore geographic data,"description:
- A full-screen map interface with tools for zooming in and out.
   - A sidebar for displaying information about selected regions or locations on the map.
   - Buttons or controls for interaction, such as pan, zoom, and layer switching.
components:
- MapContainer: (Standalone): This component encapsulates the full map display area.
- Sidebar: (Takes children): This is a component for showing additional information or controls related to the map content.
- ZoomControls: (Standalone): This component includes buttons to zoom in and out of the map.
html:
<div class=""flex h-screen""><Sidebar><p>Explore geographic data about various regions. Select an area to view more details here.</p></Sidebar><MapContainer/><ZoomControls/></div>
component html:
MapContainer:
<div id=""map"" class=""flex-1 h-full""></div>
Sidebar:
<div class=""w-64 bg-gray-200 p-4"">{children} </div>
ZoomControls:
<div class=""absolute top-4 right-4 flex flex-col""><button class=""p-2 mb-2 bg-black text-white"">+</button><button class=""p-2 bg-black text-white"">-</button></div>"
Footer Newsletter Submit,"description:
The UI should be a simple newsletter submit form in the footer of a website. It should have a text input for the email address and a submit button. The form should be responsive, mobile-first, and accessible.
components:
- FooterNewsletterSubmit: a standalone component that contains the newsletter submit form.
- NewsletterInput: a standalone component that is a text input for the email address.
- SubmitButton: a standalone component that is a submit button.
html:
<footer><FooterNewsletterSubmit/></footer>
component html:
FooterNewsletterSubmit:
<div class=""bg-gray-200 p-4 md:p-6 lg:p-8""><h4 class=""text-lg md:text-xl lg:text-2xl"">{newsletter_title}</h4><NewsletterInput/><SubmitButton/></div>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Prominent section highlighting important or trending content,"description:
A prominent section that stands out from the rest of the page, highlighting important or trending content. It should have a clear heading, a short description, and a call-to-action (CTA) button. The section should be responsive, mobile-first, and accessible.
components:
- HeroHeader: Standalone component for the heading of the prominent section.
- HeroDescription: Standalone component for the short description of the prominent section.
- CallToActionButton: Standalone component for the CTA button.
- ProminentSection: Component that takes children, wrapping the entire prominent section.
html:
<div class=""max-w-md mx-auto p-4""><ProminentSection><HeroHeader/><HeroDescription/><CallToActionButton/></ProminentSection></div>
component html:
HeroHeader:
<h2 class=""text-3xl font-bold"">{header_text}</h2>
HeroDescription:
<p class=""text-lg"">{description_text}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProminentSection:
<div class=""bg-gray-100 p-4 rounded shadow-md"">{children}</div>"
A hero banner with a high-quality image of a happy pet,"description:
The UI should be a hero banner that showcases a high-quality image of a happy pet. The image should be the main focus of the banner, with a subtle overlay to add context and contrast. The banner should be responsive, with the image scaling to fit different screen sizes. On smaller screens, the image should be cropped to focus on the pet's face. On larger screens, the image should be shown in its entirety.
components:
- HeroBanner: (Takes Children): A hero banner component that wraps the image and overlay.
- PetImage: (Standalone): A component that displays the high-quality image of a happy pet.
- Overlay: (Takes Children): A component that adds a subtle overlay to the image, providing context and contrast.
html:
<div class=""w-full h-screen flex justify-center items-center""><HeroBanner><PetImage/><Overlay><h2 class=""text-3xl font-bold"">{pet_name}</h2><p>{pet_breed}</p></Overlay></HeroBanner></div>
component html:
HeroBanner:
<div class=""relative w-full h-full"">{children}</div>
PetImage:
<img src={image_src} alt=""Happy pet"" class=""w-full h-full object-cover""/>
Overlay:
<div class=""absolute bottom-0 left-0 p-4 bg-gray-900 bg-opacity-50 text-white"">{children}</div>"
Notifications display,"description:
The UI should display a list of notifications in a card-style layout, with each notification showing the notification message, timestamp, and a close button. The layout should be responsive and mobile-friendly.
components:
- NotificationList: a component that takes children, which is a list of `NotificationCard` components
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Notifications</h2><NotificationList><!-- list of notifications will be rendered here --></NotificationList></div>
component html:
NotificationList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Email Newsletter Signups,"description:
The UI should be a simple, responsive form that allows users to input their email address and subscribe to a newsletter. The form should be easily accessible on various devices and screen readers.
components:
- NewsletterSignupForm: A standalone component that contains the email input field and submit button.
- EmailInput: A standalone component that represents the email input field.
- SubmitButton: A standalone component that represents the submit button.
html:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white rounded shadow-md""><h2 class=""text-lg font-bold mb-4"">Stay updated with our newsletter!</h2><NewsletterSignupForm/></section>
component html:
NewsletterSignupForm:
<form class=""flex flex-wrap -mx-3""><EmailInput/><SubmitButton/></form>
EmailInput:
<input type=""email"" class=""w-full px-4 py-2 text-lg"" placeholder=""Your email address"" aria-label=""Email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Visual indicator showing the completion status of a process or task,"description:
A horizontal progress bar with a fill color indicating the completion percentage.
components:
- ProgressBar: standalone component
html:
<div class=""flex justify-center mb-4""><ProgressBar/></div>
component html:
ProgressBar:
<div class=""w-full bg-gray-200 h-2 rounded-full""><div class={`bg-{color} h-2 rounded-full`} style=""width: {percentage}%;""}/></div>"
A review component with a 5-star rating system and a comment count,"description:
The review component should have a clean and simple design that effectively communicates the rating and comment count. The 5-star rating system should be prominent, with the stars being visually appealing and easy to understand. The comment count should be displayed clearly and concisely. The component should scale well on different screen sizes, with the layout adjusting to fit the available space.
components:
- RatingStars: (Standalone): A component that displays the 5-star rating system. On small screens, the stars should be displayed horizontally, and on larger screens, they should be displayed in a row with some spacing between each star.
- CommentCount: (Standalone): A component that displays the comment count. The text should be concise and easy to read.
- ReviewContainer: (Takes Children): A container component that wraps around the `RatingStars` and `CommentCount` components.
html:
<ReviewContainer><RatingStars/><CommentCount/></ReviewContainer>
component html:
RatingStars:
<div class=""flex items-center"">{stars.map((star, index) =>( <i key={index} class={`fas fa-star {star ? 'text-yellow-400' : 'text-gray-400'}`}/>))}</div>
CommentCount:
<p class=""text-sm text-gray-600"">{comment_count} comments</p>
ReviewContainer:
<div class=""flex flex-wrap items-center mb-4"">{children}</div>"
Social media sharing buttons,"description:
A horizontal row of buttons, each representing a social media platform, with a light background and a hover effect to indicate interactivity.
components:
- SocialMediaShareBar: A container component that holds all the social media buttons. (standalone)
- SocialMediaButton: A button component for each social media platform. (takes children)
html:
<div class=""container mx-auto p-4""><SocialMediaShareBar/></div>
component html:
SocialMediaShareBar:
<div class=""flex justify-center mb-4""><SocialMediaButton>Facebook</SocialMediaButton><SocialMediaButton>Twitter</SocialMediaButton><SocialMediaButton>LinkedIn</SocialMediaButton><!-- Add more buttons as needed --></div>
SocialMediaButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{children}</button>"
Product Description Bullet,"description:
The UI should display a bullet point with a product description. The bullet point should be a simple icon, and the product description should be a short sentence or phrase.
components:
- BulletPoint: (standalone): Displays a bullet point icon.
- DescriptionText: (standalone): Displays the product description.
html:
<div class=""flex items-center""><BulletPoint/><DescriptionText/></div>
component html:
BulletPoint:
<span class=""text-xl"">•</span>
DescriptionText:
<p class=""text-lg"">{description_text}</p>"
Random quote generator,"description:
A centered card with a quote, author, and a button to generate a new quote.
components:
- QuoteCard: A standalone component that contains the quote and author.
- ActionButton: A standalone component that generates a new quote when clicked.
html:
<div class=""flex h-screen justify-center p-4""><QuoteCard/><ActionButton/></div>
component html:
QuoteCard:
<div class=""bg-white rounded p-4 max-w-md shadow-md""><blockquote class=""text-lg"">{quote}</blockquote><p class=""text-gray-500"">— {author}</p></div>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">New Quote</button>"
"Menu with minimal spacing between items, conserving screen space","description:
The UI should be a compact menu with minimal spacing between items, conserving screen space.
components:
- MenuItem: a standalone component that represents a single item in the menu.
- Menu: a component that takes children, representing the container for the menu items.
html:
<nav class=""flex flex-wrap justify-center mb-4""><Menu><MenuItem/><MenuItem/><MenuItem/><!-- Add more menu items here --></Menu></nav>
component html:
MenuItem:
<li class=""mr-2""><a href=""{menu_item_url}"" class=""text-gray-600 hover:text-gray-900"">{menu_item_label}</a></li>
Menu:
<ul class=""list-none m-0 p-0 flex flex-wrap justify-center"">{children}</ul>"
FAQ/Accordion Sections,"description:
The UI should display a list of FAQ sections, each with a question and an answer. The answer should be hidden by default and toggled on click. The FAQ sections should be stacked vertically, with a slight gap between each section. On mobile devices, the FAQ sections should take up the full width of the screen. On larger screens, the FAQ sections should be limited to a maximum width.
components:
- AccordionSection: (standalone) - Represents a single FAQ section
- AccordionQuestion: (standalone) - Represents the question part of an AccordionSection
- AccordionAnswer: (standalone) - Represents the answer part of an AccordionSection
html:
<div class=""flex flex-wrap justify-center max-w-md mx-auto""><AccordionSection/><AccordionSection/><!-- Add more AccordionSection components here --></div>
component html:
AccordionSection:
<div class=""mb-4""><AccordionQuestion/><AccordionAnswer/></div>
AccordionQuestion:
<button class=""w-full bg-gray-100 py-2 px-4 text-left"">{question_text}</button>
AccordionAnswer:
<div class=""hidden""><p>{answer_text}</p></div>"
Hero Background Pattern,"description:
The UI should display a hero section with a background pattern, typically used as a visually appealing introduction to a website or page.
components:
- HeroBackgroundPattern: (standalone): a container element that holds the background pattern.
- HeroContent: (takes children): a container element that holds the content inside the hero section.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><HeroBackgroundPattern/><HeroContent><!-- hero content goes here --></HeroContent></div>
component html:
HeroBackgroundPattern:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-noise""></div>
HeroContent:
<div class=""relative z-10 p-4 md:p-6 lg:p-12"">{children}</div>"
Call to Action Button Text,"description:
The UI should be a responsive, mobile-first Call to Action (CTA) button with a clear and concise text.
components:
- CallToActionButton: A standalone component representing the CTA button.
html:
<button class=""cta-button""><CallToActionButton/></button>
component html:
CallToActionButton:
<span class=""text-sm font-bold text-white"">{cta_text}</span>"
"Make a user testimonial component that displays a user's avatar, quote, and rating as a compact, elegant layout","description:
The user testimonial component should be a compact, elegant layout that displays a user's avatar, quote, and rating in a harmonious way. The component should be responsive, accessible, and visually appealing on different screen sizes.
components:
- Avatar: (standalone): Displays the user's avatar as a circular image.
- Quote: (takes children): Displays the user's quote in a readable font size with adequate line spacing.
- Rating: (standalone): Displays the user's rating out of 5 stars.
html:
<div class=""flex flex-col md:flex-row items-center md:items-start mb-8""><Avatar/><div class=""ml-4 md:ml-6""><Quote>{children}</Quote><Rating/></div></div>
component html:
Avatar:
<img src={avatar_url} alt={username} class=""w-12 h-12 rounded-full""/>
Quote:
<quote class=""text-lg leading-relaxed"">{children}</quote>
Rating:
<div class=""flex items-center"">{[...Array(rating).keys()].map((_, index) =>( <svg><!-- star --></svg>))} {[...Array(5 - rating).keys()].map((_, index) =>( <svg><!-- star-o --></svg>))}</div>"
Page Content Text,"description:
The UI should display a page content text component, which contains a heading and a paragraph of text, with proper margin and padding for readability.
components:
- PageContentText: A standalone component that displays a heading and a paragraph of text.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><PageContentText/></div>
component html:
PageContentText:
<div class=""mb-4""><h2 class=""text-lg font-bold mb-2"">{heading}</h2><p class=""text-gray-600"">{text}</p></div>"
Revealing/Hover Effects,"description:
The UI should display a container with a revealing hover effect. When the user hovers over the container, a colored background and a heading should be revealed.
components:
- RevealContainer: standalone component that wraps the revealing hover effect.
- RevealContent: standalone component that displays the revealed content (heading and background).
html:
<div class=""relative w-full h-48 md:h-64 lg:h-80 XL:h-96""><RevealContainer/></div>
component html:
RevealContainer:
<div class=""absolute inset-0 z-10 overflow-hidden bg-transparent transition duration-300 ease-in-out hover:bg-orange-500 hover:opacity-90""><RevealContent/></div>
RevealContent:
<div class=""flex items-center justify-center h-full""><h2 class=""text-2xl font-bold"">{heading_text}</h2></div>"
"Job category component with a blue background, category name, and number of job openings","description:
The Job Category component should have a blue background, with the category name in a larger font size and the number of job openings in a smaller font size. The component should be responsive, with the text adjusting to fit different screen sizes. On smaller screens, the text should wrap to the next line, and on larger screens, the text should be on the same line.
components:
- JobCategory: (Takes Children): A component that displays a job category with a blue background, category name, and number of job openings.
html:
<div class=""flex flex-wrap justify-center""><JobCategory><!-- category 1 --></JobCategory><JobCategory><!-- category 2 --></JobCategory><JobCategory><!-- category 3 --></JobCategory></div>
component html:
JobCategory:
<div class=""bg-blue-500 p-4 rounded-md shadow-md""><h2 class=""text-lg"">{categoryName}</h2><p class=""text-sm"">{jobOpeningsCount} openings</p>{children}</div>"
Session details display,"description:
The UI should display the details of a session, including the session title, speaker, location, date, and time. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- SessionTitle: A standalone component to display the session title.
- SessionMeta: A standalone component to display the session speaker, location, date, and time.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><SessionTitle/><SessionMeta/></div>
component html:
SessionTitle:
<h2 class=""text-lg font-bold"">{session_title}</h2>
SessionMeta:
<ul class=""list-none mb-4""><li class=""mb-2""><span class=""text-gray-600"">Speaker:</span>{speaker_name} </li><li class=""mb-2""><span class=""text-gray-600"">Location:</span>{location} </li><li class=""mb-2""><span class=""text-gray-600"">Date:</span>{date} </li><li class=""mb-2""><span class=""text-gray-600"">Time:</span>{time} </li></ul>"
Video thumbnails,"description:
The UI should display a grid of video thumbnails, with each thumbnail showing a preview image, a title, and a duration. The grid should be responsive, with more columns on larger screens and fewer columns on smaller screens.
components:
- VideoThumbnail: (standalone): A single video thumbnail with a preview image, title, and duration.
- VideoThumbnailGrid: (takes children): A container for a grid of `VideoThumbnail` components.
html:
<div class=""container mx-auto p-4""><VideoThumbnailGrid><VideoThumbnail/><VideoThumbnail/><!-- add more VideoThumbnail components here --></VideoThumbnailGrid></div>
component html:
VideoThumbnail:
<div class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{thumbnail_url}"" alt=""{video_title}"" class=""w-full h-40 object-cover rounded-md""/><div class=""mt-2""><h3 class=""text-lg"">{video_title}</h3><p class=""text-sm"">{duration}</p></div></div>
VideoThumbnailGrid:
<div class=""flex flex-wrap justify-center -mx-4"">{children}</div>"
Quiz and Assessment Tools,"description:
The UI should display a list of quiz and assessment tools with their names, descriptions, and ratings. The UI should be responsive, mobile-first, and accessible.
components:
- QuizCard: (standalone): A single quiz or assessment tool card with name, description, and rating.
- QuizList: (takes children): A list of `QuizCard` components.
html:
<main class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quiz and Assessment Tools</h1><QuizList><QuizCard/><QuizCard/><!-- Add more QuizCard components here --></QuizList></main>
component html:
QuizCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{quiz_name}</h2><p class=""text-gray-600"">{quiz_description}</p><p class=""text-sm"">Rating: {rating}/5</p></div>
QuizList:
<ul class=""list-none mb-0"">{children}</ul>"
Photo gallery component with thumbnail images and lightbox effect,"description:
The UI should be a responsive photo gallery with a thumbnail grid and a lightbox effect when an image is clicked. The gallery should be accessible and easy to navigate on different screen sizes. The thumbnail grid should scale to fit different screen sizes, with a maximum of 3 columns on large screens and 1 column on small screens. When an image is clicked, a lightbox should appear with a larger version of the image, navigation arrows, and a close button.
components:
- PhotoGallery: (Takes Children): A container component that holds the thumbnail grid and lightbox.
- Lightbox: (Takes Children): A component that displays a larger version of the image, navigation arrows, and a close button.
- NavigationArrows: (Standalone): A component that displays navigation arrows for the lightbox.
- CloseButton: (Standalone): A button to close the lightbox.
html:
<div class=""container max-w-md mx-auto p-4""><PhotoGallery><!-- thumbnail grid will be rendered here --></PhotoGallery></div>
component html:
PhotoGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4"">{children}</div>
Lightbox:
<div class=""fixed top-0 left-0 w-full h-full bg-black bg-opacity-70 flex justify-center""><div class=""flex justify-center w-full h-full"">{children} </div><CloseButton/></div>
NavigationArrows:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><button class=""bg-white rounded-full p-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><svg><!-- left-arrow --></svg></button><button class=""bg-white rounded-full p-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><svg><!-- right-arrow --></svg></button></div>
CloseButton:
<button class=""absolute top-2 right-2 bg-white rounded-full p-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><svg><!-- close --></svg></button>"
Video uploaders,"description:
The UI should display a video uploader component that includes a file input, a progress bar, and a cancel button. The component should be responsive and adapt to different screen sizes.
components:
- VideoUploader: A standalone component that allows users to upload a video file.
- FileInput: A component that wraps a file input element. Standalone.
- ProgressBar: A component that displays the progress of the video upload. Standalone.
- CancelButton: A component that displays a cancel button. Standalone.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><VideoUploader/></div>
component html:
VideoUploader:
<div class=""flex flex-col gap-4""><FileInput/><ProgressBar/><CancelButton/></div>
FileInput:
<label class=""block mb-2""><span class=""sr-only"">{select_file_label}</span><input type=""file"" class=""block w-full text-sm text-gray-700""/></label>
ProgressBar:
<div class=""w-full bg-gray-200 h-2""><div class=""bg-blue-600 h-2"" style=""width: {upload_progress}%;""}></div><p class=""text-sm"">{upload_progress}% completed</p></div>
CancelButton:
<button class=""py-2 px-4 bg-red-600 text-white"">{cancel_label}</button>"
Audio player,"description:
The UI should be a responsive audio player with a simple and clean design. It should have a play/pause button, a progress bar, and a display for the current time and duration of the audio.
components:
- AudioPlayer: standalone, contains the entire audio player UI
- PlayPauseButton: standalone, a button to toggle play and pause
- ProgressBar: standalone, a progress bar to display the current progress of the audio
- TimeDisplay: standalone, displays the current time and duration of the audio
html:
<div class=""flex flex-col items-center w-full p-4 md:p-6 lg:p-8""><AudioPlayer/></div>
component html:
AudioPlayer:
<div class=""flex flex-col items-center w-full""><PlayPauseButton/><ProgressBar/><TimeDisplay/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_text}</button>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style=""width: playback_progress + '%;""}></div></div>
TimeDisplay:
<p class=""text-sm text-gray-600"">{current_time}/ {audio_duration}</p>"
Call to Action,"description:
The UI should be a prominent call-to-action (CTA) button that stands out on the page. It should be centered horizontally on the page and have a bold, contrasting color scheme to grab the user's attention.
components:
- CallToActionButton: (standalone): A single button component that renders a CTA.
html:
<section class=""flex justify-center mt-12""><CallToActionButton/></section>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Warning or error message for invalid input,"description:
The UI should display a warning or error message for invalid input. It should be a rectangular box with a red or orange background color, a clear and concise message, and an ""X"" icon to close the message.
components:
- ErrorMessage: (standalone): Displays the error message.
- CloseButton: (standalone): Displays an ""X"" icon to close the message.
html:
<div class=""bg-red-100 p-4 rounded mb-4""><ErrorMessage/><CloseButton/></div>
component html:
ErrorMessage:
<p class=""text-red-700"">{error_message}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">&times;</button>"
Confetti,"description:
The UI should be a colorful and celebratory confetti design, with multiple strips of colorful paper scraps falling from the top of the screen to the bottom, creating a joyful and festive atmosphere.
components:
- ConfettiStrip: A standalone component representing a single strip of confetti paper.
- ConfettiContainer: A container component that takes children.
html:
<div class=""h-screen w-full bg-white overflow-hidden""><ConfettiContainer><ConfettiStrip/><ConfettiStrip/><ConfettiStrip/><!-- Add more ConfettiStrip components here --></ConfettiContainer></div>
component html:
ConfettiStrip:
<div class=""absolute top-0 w-2 h-20 bg-{color} shadow-md"" style=""left: {Math.random() * 100}%; animation: fall 2s infinite;""}>{/* Add some randomness to the strip's color and animation delay */} <style>{` @keyframes fall { 0% { transform: translateY(-100%); } 100% { transform: translateY(100vh); } } `}</style></div>
ConfettiContainer:
<div class=""relative h-screen w-full overflow-hidden"" aria-label=""Confetti container"">{children}</div>"
Reporting Dashboard: Generate data insights,"description:
The UI should be a responsive, mobile-first dashboard that displays various data insights in a clear and organized manner. The dashboard should have a top navigation bar, a sidebar with navigation options, and a main content area that displays different charts, graphs, and data tables.
components:
- NavigationBar: - Standalone - Displays the top navigation bar with a dashboard title and navigation links.
- Sidebar: - Standalone - Displays the sidebar with navigation options.
- DataCard: - Takes children - Displays a single data insight, such as a chart or graph, with a title and description.
- DataSection: - Takes children - Displays a section of data insights, such as a row of charts or graphs.
- DataTable: - Takes children - Displays a table of data with column headers and rows.
html:
<div class=""flex h-screen""><NavigationBar/><div class=""flex-1 overflow-y-hidden""><Sidebar/><main class=""p-4""><DataSection><DataCard>{children}</DataCard><DataCard>{children}</DataCard></DataSection><DataSection><DataTable><thead><tr><th>{column1_header}</th><th>{column2_header}</th></tr></thead><tbody><tr><td>{data_point1}</td><td>{data_point2}</td></tr></tbody></DataTable></DataSection></main></div></div>
component html:
NavigationBar:
<nav class=""bg-white border-b border-gray-200""><div class=""container mx-auto p-4""><h1 class=""text-lg"">{dashboard_title}</h1><ul class=""flex justify-end""><li><a href=""#"" class=""text-gray-600"">{nav_link1}</a></li><li><a href=""#"" class=""text-gray-600"">{nav_link2}</a></li></ul></div></nav>
Sidebar:
<aside class=""w-64 bg-white border-r border-gray-200""><nav class=""px-4""><ul><li><a href=""#"" class=""block py-2"">{sidebar_link1}</a></li><li><a href=""#"" class=""block py-2"">{sidebar_link2}</a></li></ul></nav></aside>
DataCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">{title}</h2><p>{description}</p>{children}</div>
DataSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>
DataTable:
<table class=""w-full"">{children}</table>"
Post Card: A single post with user info and actions,"description:
The UI should be a card that displays a single post with user information and actions. It should be responsive, mobile-first, accessible, and SEO-friendly. The card should have a clear hierarchy of information, with the user's profile picture, name, and timestamp at the top, followed by the post content, and then the actions (e.g., like, comment, share) at the bottom.
components:
- UserProfile: (standalone): Displays the user's profile picture and name.
- PostContent: (standalone): Displays the content of the post.
- PostActions: (standalone): Displays the actions (e.g., like, comment, share) for the post.
- PostCard: (takes children): The container component that wraps around the user profile, post content, and post actions.
html:
<div class=""max-w-md bg-white rounded-lg shadow-md p-4""><PostCard><UserProfile/><PostContent/><PostActions/></PostCard></div>
component html:
UserProfile:
<div class=""flex items-center mb-2""><img src={user_profile_picture} class=""w-10 h-10 rounded-full""/><div class=""ml-2""><p class=""text-lg font-bold"">{user_name}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostActions:
<div class=""flex justify-between mt-4""><button class=""text-gray-600 hover:text-gray-900"">Like</button><button class=""text-gray-600 hover:text-gray-900"">Comment</button><button class=""text-gray-600 hover:text-gray-900"">Share</button></div>
PostCard:
<div class=""p-4"">{children}</div>"
Syntax highlighting controls,"description:
The UI for the syntax highlighting controls should include a series of buttons or toggle switches that allow users to select different syntax highlighting styles for a code display area. This might include options for different color themes like ""light"", ""dark"", ""solarized"", etc. These controls should be intuitive, easily accessible, and visually appealing.
components:
- SyntaxControlPanel: A standalone component that houses all the syntax highlighting controls.
- ThemeToggleButton: A component that represents a toggle button for changing the theme of the syntax highlighting, takes children to label the button.
html:
<!-- Main container for syntax highlighting controls --><div class=""bg-gray-100 p-4""><h2 class=""text-lg font-semibold"">Syntax Highlighting</h2><SyntaxControlPanel/></div>
component html:
SyntaxControlPanel:
<!-- Container for the toggle buttons --><div class=""flex space-x-2""><ThemeToggleButton>Light</ThemeToggleButton><ThemeToggleButton>Dark</ThemeToggleButton><ThemeToggleButton>Solarized</ThemeToggleButton></div>
ThemeToggleButton:
<!-- Toggle button for themes --><button class=""px-4 py-2 text-white bg-blue-500 hover:bg-blue-600 focus:ring-2 focus:ring-blue-300 rounded"">{children}</button>"
Search Result Item Link,"description:
The Search Result Item Link should display a link with a title, a summary, and a URL. The link should be visually appealing, with a clear hierarchy of information and sufficient whitespace for readability.
components:
- SearchResultItemLink: A standalone component that contains a link with a title, summary, and URL.
html:
<ul class=""list-none mb-4""><li><SearchResultItemLink/></li></ul>
component html:
SearchResultItemLink:
<a href=""{url}"" class=""block py-4 no-underline hover:underline""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{summary}</p></a>"
Hero Image/Header,"description:
The UI should display a hero image/header section that takes up the full width of the screen, with a background image, a heading, and a call-to-action (CTA) button. The heading and CTA button should be centered horizontally and vertically within the hero image.
components:
- HeroImageHeader: (standalone)
- HeroHeading: (standalone)
- CallToAction: (standalone)
html:
<section class=""h-screen w-full relative""><HeroImageHeader/><!-- hero image background --><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center""><HeroHeading/><CallToAction/></div></section>
component html:
HeroImageHeader:
<div class=""h-screen w-full bg-cover bg-center"" style=""`background-image: url({hero_image_url});""}></div>
HeroHeading:
<h1 class=""text-3xl font-bold"">{hero_heading}</h1>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
"A workout plan component that displays a grid of exercise cards with images, titles, and short descriptions","description:
The UI should display a grid of exercise cards, with each card featuring an image, title, and short description. The cards should be arranged in a responsive grid that adapts to different screen sizes. On smaller screens, the cards should stack vertically, while on larger screens, they should be arranged in a grid with multiple columns.
components:
- WorkoutPlanGrid: (Takes Children): A container component that arranges the exercise cards in a responsive grid.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><WorkoutPlanGrid>{exerciseCards}
</WorkoutPlanGrid></div>
component html:
WorkoutPlanGrid:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Sidebar Widget Content,"description:
The UI should be a compact sidebar widget that displays a title, a short description, and a call-to-action (CTA) button. The widget should be responsive, adapting to different screen sizes and devices.
components:
- SidebarWidget: The main container for the sidebar widget, which takes children.
- WidgetTitle: A heading element that displays the title of the widget, standalone.
- WidgetDescription: A paragraph element that displays a short description of the widget, standalone.
- CallToActionButton: A button element that displays a call-to-action, standalone.
html:
<div class=""w-full md:w-1/4 lg:w-1/5 xl:w-1/6 p-4""><SidebarWidget><WidgetTitle/><WidgetDescription/><CallToActionButton/></SidebarWidget></div>
component html:
SidebarWidget:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>
WidgetTitle:
<h2 class=""text-lg font-bold"">{widget_title}</h2>
WidgetDescription:
<p class=""text-sm"">{widget_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Avatar display for user profile picture,"description:
The UI should be a circular avatar container with a user profile picture, responsive and mobile-first, with a maximum size of 120px.
components:
- Avatar: standalone component
html:
<div class=""flex justify-center mb-4""><Avatar/></div>
component html:
Avatar:
<img src={avatarUrl} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full object-cover""/>"
Post List: Teasers for latest articles,"description:
A responsive list of article teasers, with a maximum of 3 articles per row on desktop, 2 articles per row on tablet, and 1 article per row on mobile. Each teaser includes a title, a brief summary, and a ""Read more"" button.
components:
- PostTeaser: A single article teaser, standalone.
- PostList: The container for the list of article teasers, takes children.
html:
<div class=""max-w-md mx-auto px-4 sm:px-6 lg:px-8""><PostList><!-- Repeat the PostTeaser component for each article --><PostTeaser/><PostTeaser/><PostTeaser/><!-- ... --></PostList></div>
component html:
PostTeaser:
<li class=""w-full sm:w-1/2 md:w-1/3 xl:w-1/4 p-4""><h2 class=""text-lg mb-2"">{post_title}</h2><p class=""text-gray-600"">{post_summary}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white py-2 px-4 rounded"">Read more </button></li>
PostList:
<ul class=""flex flex-wrap justify-center -mx-4"">{children}</ul>"
Unfollow button to unsubscribe from users,"description:
The Unfollow button should be a simple, rounded rectangle with a grey background and white text. It should be centered horizontally and have a subtle animation when hovered.
components:
- UnfollowButton: (standalone)
html:
<div class=""flex justify-center mb-4""><UnfollowButton/></div>
component html:
UnfollowButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-white font-bold py-2 px-4 rounded"">Unfollow</button>"
Security Center: Monitor system security,"description:
The UI should be a dashboard that displays various security metrics and alerts. It should have a header with a title and a navigation menu. The main content area should have a grid layout with multiple sections, each displaying different security-related information.
components:
- SecurityHeader: Standalone component that displays the title and navigation menu.
- SecuritySection: Component that takes children and displays a section of security information.
- MetricCard: Standalone component that displays a single metric (e.g. ""System Vulnerabilities: 5"").
- AlertList: Component that takes children and displays a list of security alerts.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SecurityHeader/><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><SecuritySection><MetricCard/><MetricCard/></SecuritySection><SecuritySection><AlertList><li>{alert_message}</li><li>{alert_message}</li></AlertList></SecuritySection></div></div>
component html:
SecurityHeader:
<header class=""flex justify-between mb-4""><h1 class=""text-2xl font-bold"">Security Center</h1><nav class=""flex""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Dashboard</a><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Settings</a></nav></header>
SecuritySection:
<section class=""bg-white p-4 rounded shadow-md"">{children}</section>
MetricCard:
<div class=""bg-white p-4 rounded shadow-md""><h2 class=""text-lg font-bold"">{metric_name}</h2><p class=""text-gray-600"">{metric_value}</p></div>
AlertList:
<ul class=""list-none mb-0"">{children}</ul>"
Google Maps Embeds,"description:
The UI should display a Google Maps embed with a search bar and a map container. The search bar should allow users to enter a location, and the map container should display the location on a Google Map.
components:
- MapSearchBar: standalone component that renders a search input field and a search button.
- MapContainer: standalone component that renders a container for the Google Map.
- GoogleMapEmbed: component that takes children, which wraps the `MapSearchBar` and `MapContainer` components.
html:
<div class=""h-screen w-full flex flex-col""><GoogleMapEmbed><MapSearchBar/><MapContainer/></GoogleMapEmbed></div>
component html:
MapSearchBar:
<div class=""p-4 flex justify-center""><input type=""search"" placeholder=""Enter a location"" class=""bg-white border border-gray-300 rounded-md py-2 pl-2 pr-4""/><button class=""bg-orange-500 text-white px-4 py-2 rounded-md"">Search </button></div>
MapContainer:
<div class=""h-full w-full"" id=""map"" style=""width: 100%; height: calc(100vh - 64px);""}><!-- map will be rendered here --></div>
GoogleMapEmbed:
<div class=""h-full w-full flex flex-col"">{children}</div>"
"Product grid component that displays products in a 3x3 grid, with each product showcased in a:","description:
The UI should display a 3x3 grid of products, with each product showcased in a card-like layout. The grid should be responsive and adjust to different screen sizes, with a maximum of 3 columns on larger screens and a single column on smaller screens. Each product card should have a prominent display of the product image, with the product name, price, and a ""Add to Cart"" button below. The cards should have a subtle shadow and slight gradient effect to give them depth and dimension.
components:
- ProductGrid: (Takes Children): A container component that displays a grid of `ProductCard` components.
- ProductCard: (Standalone): A component that showcases a single product, with an image, name, price, and ""Add to Cart"" button.
html:
<ProductGrid><ProductCard/><ProductCard/><ProductCard/><ProductCard/><ProductCard/><ProductCard/><ProductCard/><ProductCard/><ProductCard/></ProductGrid>
component html:
ProductGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 p-4"">{children}</div>
ProductCard:
<div class=""bg-white shadow-md rounded-lg overflow-hidden""><img src={image_url} class=""w-full h-40 object-cover""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_price}</p><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Add to Cart </button></div></div>"
Featured Image Carousel Navigation,"description:
The UI should be a navigation component for a featured image carousel, displaying a series of small thumbnails that allow the user to navigate to specific images in the carousel. The component should be responsive, mobile-first, and accessible.
components:
- ImageCarouselNavigation: a standalone component that contains the navigation for the image carousel
- ThumbnailImage: a standalone component that represents the image within a thumbnail
html:
<nav aria-label=""Featured Image Carousel Navigation""><ul class=""flex flex-wrap justify-center mb-4""><ImageCarouselNavigation/></ul></nav>
component html:
ImageCarouselNavigation:
<li class=""mr-4"">{thumbnails}</li>
ThumbnailImage:
<img src={thumbnail_src} alt={thumbnail_alt} class=""w-full h-full object-cover rounded-md""/>"
Featured Video Player,"description:
The UI should be a responsive video player with a prominent play button, video title, and video description. It should be accessible and SEO-friendly.
components:
- VideoPlayer: Standalone component that renders the video player.
- VideoPlayButton: Standalone component that renders the play button.
- VideoTitle: Standalone component that renders the video title.
- VideoDescription: Standalone component that renders the video description.
html:
<!-- Container for the video player --><div class=""max-w-md lg:max-w-lg xl:max-w-xl mx-auto p-4""><!-- Video player component --><VideoPlayer/><!-- Video title component --><VideoTitle/><!-- Video description component --><VideoDescription/></div>
component html:
VideoPlayer:
<!-- Video player container --><div class=""relative""><!-- Video element --><video id=""video"" class=""w-full h-full"" poster=""{poster_url}""><source src=""{video_url}"" type=""video/mp4""/></video><!-- Video play button --><VideoPlayButton/></div>
VideoPlayButton:
<!-- Play button --><button class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Play video""><span class=""sr-only"">Play video</span><i class=""fas fa-play"" aria-hidden=""true""></i></button>
VideoTitle:
<!-- Video title --><h2 class=""text-2xl font-bold mb-2"">{video_title}</h2>
VideoDescription:
<!-- Video description --><p class=""text-lg mb-4"">{video_description}</p>"
Featured Video Controls,"description:
The UI should display a featured video with playback controls, including play/pause, volume, and full-screen toggles. The controls should be laid out horizontally and be responsive to different screen sizes.
components:
- FeaturedVideoControls: a standalone component that wraps the video controls
- PlayPauseToggle: a standalone component for the play/pause toggle button
- VolumeToggle: a standalone component for the volume toggle button
- FullScreenToggle: a standalone component for the full-screen toggle button
html:
<div class=""flex justify-center mb-4""><FeaturedVideoControls/></div>
component html:
FeaturedVideoControls:
<div class=""flex items-center justify-center""><PlayPauseToggle/><VolumeToggle/><FullScreenToggle/></div>
PlayPauseToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon}</button>
VolumeToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{volume_icon}</button>
FullScreenToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{full_screen_icon}</button>"
Table filtering,"description:
The UI should feature a table displaying a set of data (e.g., user information, product details) with an input field above the table to filter the data based on user input. This should be simple and intuitive, allowing users to quickly reduce the dataset to relevant entries based on their filter criteria.
components:
- FilterInput: A standalone component; an input field where users can type to filter the table data.
- DataTable: A component that takes children; this will display the data rows that match the filter criteria.
html:
<div class=""container mx-auto p-4""><h1 class=""text-xl font-bold text-gray-800 mb-4"">Data Overview</h1><FilterInput/><DataTable><tr class=""bg-gray-50 border-b border-gray-200""><th class=""px-4 py-2 text-gray-600"">ID</th><th class=""px-4 py-2 text-gray-600"">Name</th><th class=""px-4 py-2 text-gray-600"">Email</th></tr><!-- Rows will dynamically populate here based on filter --></DataTable></div>
component html:
FilterInput:
<input type=""text"" placeholder=""Filter results..."" class=""w-full p-2 border border-gray-300 rounded-lg mb-4"" aria-label=""Filter Table""/>
DataTable:
<table class=""w-full text-left rounded-lg overflow-hidden"">{children} </table>"
Social Media Feed,"description:
The social media feed should be a scrollable list of posts, each displaying the user's profile picture, name, post content, and any accompanying media (e.g. images, videos). The feed should be responsive, with posts stacking vertically on smaller screens and displaying in a masonry layout on larger screens.
components:
- SocialMediaPost: a standalone component representing a single post in the feed
- UserProfilePicture: a standalone component displaying a user's profile picture
- PostContent: a standalone component displaying the text content of a post
- MediaThumbnail: a standalone component displaying a thumbnail for an image or video
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Social Media Feed</h2><div class=""flex flex-wrap -mx-2""><SocialMediaPost/><SocialMediaPost/><!-- add more posts here --></div></div>
component html:
SocialMediaPost:
<div class=""w-full md:w-1/2 xl:w-1/3 px-2 mb-4""><UserProfilePicture/><div class=""px-4 py-2""><h3 class=""text-lg font-bold"">{username}</h3><PostContent/><MediaThumbnail/></div></div>
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""{username}'s profile picture"" class=""w-12 h-12 rounded-full mr-2""/>
PostContent:
<p>{post_content}</p>
MediaThumbnail:
<img src=""{media_thumbnail_url}"" alt=""Thumbnail for {media_type}"" class=""w-full h-48 object-cover rounded""/>"
"Single post with text, image, and comments","description:
The UI should display a single post with a text, an image, and comments below. The post text should be in a readable font size, and the image should be responsive. The comments section should be divided into individual comment blocks with the commentator's name and comment text.
components:
- PostContent: A standalone component that renders the post text and image.
- CommentsSection: A component that takes children (`CommentBlock` components) and renders them.
html:
<!-- Post Container --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContent/><CommentsSection><!-- Comment blocks will be inserted here --></CommentsSection></div>
component html:
PostContent:
<!-- Post Content Container --><div class=""mb-4""><p class=""text-lg"">{post_text}</p><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-auto mb-4""/></div>
CommentsSection:
<!-- Comments Section Container --><div class=""mt-4"">{children}</div>"
"A hero section component with a background image, headline, and call-to-action button","description:
The hero section should be a prominent section on the page that immediately grabs the user's attention. It should have a high-quality background image that scales well on different screen sizes, a clear and concise headline, and a prominent call-to-action button. The background image should be darkened or overlaid with a gradient to ensure the headline and button stand out.
components:
- HeroSection: (Takes Children): The top-level component that contains the hero section.
- HeroBackground: (Standalone): The background image component.
- HeroHeadline: (Standalone): The headline component.
- HeroCTA: (Standalone): The call-to-action button component.
html:
<div class=""min-h-screen flex justify-center items-center""><HeroSection><HeroBackground/><div class=""container mx-auto p-4 lg:p-8""><HeroHeadline/><HeroCTA/></div></HeroSection></div>
component html:
HeroSection:
<div class=""relative"">{children}</div>
HeroBackground:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-center"" style=""background-image: url({background_image_url})""><div class=""absolute top-0 left-0 w-full h-full bg-gray-700 opacity-50""></div></div>
HeroHeadline:
<h1 class=""text-4xl lg:text-6xl font-bold text-white"">{headline_text}</h1>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text} </button>"
Shadows (box),"description:
A box with a shadow effect, which gives the impression of depth.
components:
- ShadowBox: A standalone component that displays a box with a shadow effect.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:pt-12""><ShadowBox/></div>
component html:
ShadowBox:
<div class=""bg-white p-4 shadow-md rounded""><!-- Add content here --></div>"
Tag component with a blue background and white text,"description:
The `Tag` component should be a small, rectangular shape with a blue background color and white text. The text should be centered horizontally and vertically within the tag. The component should be small enough to fit on a single line, but large enough to be easily clickable or tappable.
components:
- Tag: (Standalone): A small, rectangular component representing a tag or label.
html:
<Tag/>
component html:
Tag:
<span class=""bg-blue-500 text-white rounded px-2 py-1 text-xs"">{tag_text}</span>"
"A testimonial component that shows a list of user testimonials, with:","description:
The testimonial component should have a clean and modern design, with a light background color and a subtle gradient to give it some depth. Each testimonial item should have a profile picture, a quote, and the user's name and title. The component should be responsive and scale well on different screen sizes.
components:
- TestimonialComponent: (Takes Children): This is the top-level component that contains a list of testimonials. It should have a subtle gradient background and a max-width to constrain the content.
- TestimonialItem: (Standalone): This component represents a single testimonial item, containing a profile picture, a quote, and the user's name and title.
html:
<div class=""max-w-md mx-auto p-4 bg-gradient-to-b from-gray-100 to-white shadow-md rounded""><h2 class=""text-lg font-bold mb-4"">What Our Users Say</h2><TestimonialComponent><!-- Child components will be rendered here --></TestimonialComponent></div>
component html:
TestimonialComponent:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>
TestimonialItem:
<div class=""flex mb-6""><img src={profile_picture_url} alt={username} class=""w-12 h-12 rounded-full mr-4""/><div><p class=""text-lg mb-2"">{quote}</p><p class=""text-sm text-gray-600"">{username}, {title}</p></div></div>"
Features List: Break down complex features into bite-sized chunks,"description:
The UI should be a responsive, mobile-first, and accessible list of features, with each feature broken down into a concise and readable format. The list should be SEO-friendly and well-documented.
components:
- FeatureListItem: (standalone) - represents a single feature item in the list
- FeatureListWrapper: (takes children) - wraps the list of feature items
html:
<div class=""mx-auto max-w-md py-8""><FeatureListWrapper><FeatureListItem/><FeatureListItem/><FeatureListItem/><!-- add more FeatureListItem components here --></FeatureListWrapper></div>
component html:
FeatureListItem:
<li class=""mb-4""><h3 class=""text-lg font-bold"">{feature_title}</h3><p class=""text-gray-600"">{feature_description}</p><ul class=""list-none mb-2""><li>{feature_breakdown_point_1}</li><li>{feature_breakdown_point_2}</li><!-- add more breakdown points here --></ul></li>
FeatureListWrapper:
<ul class=""list-none"">{children}</ul>"
Features Grid: Highlight key benefits in a grid layout,"description:
A responsive grid layout with 3-4 columns, showcasing key benefits of a product or service. Each grid item should have an icon, a heading, and a brief description.
components:
- FeatureItem: (standalone): A single feature item in the grid, containing an icon, heading, and description.
- FeaturesGrid: (takes children): The container element for the feature items, managing the grid layout.
html:
<section class=""container mx-auto p-4 lg:p-8""><FeaturesGrid><FeatureItem/><FeatureItem/><FeatureItem/><!-- Add more FeatureItem components as needed --></FeaturesGrid></section>
component html:
FeatureItem:
<div class=""flex flex-col items-center p-4 lg:p-6""><i class=""text-3xl {icon_class} mb-4""/><!-- icon --><h3 class=""text-lg font-bold"">{heading}</h3><p class=""text-gray-600"">{description}</p></div>
FeaturesGrid:
<div class=""grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8"">{children}</div>"
Dynamic Product Feature List,"description:
The UI should display a list of product features in a clean and organized manner, with each feature listed in a separate row. The list should be responsive and work well on mobile devices.
components:
- FeatureListItem: a standalone component that displays a single product feature.
- FeatureList: a component that takes children, wrapping the list of features.
html:
<div class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-4"">Product Features</h2><FeatureList><FeatureListItem/><FeatureListItem/><!-- Add more FeatureListItem components as needed --></FeatureList></div>
component html:
FeatureListItem:
<div class=""flex items-center mb-4""><i class=""fas fa-check text-green-500 mr-2"" aria-hidden=""true""></i><p class=""text-gray-700"">{feature_name}</p><p class=""text-gray-500 text-sm"">{feature_description}</p></div>
FeatureList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Images/Zoom,"description:
The UI should display a product image with a zoom feature, allowing users to hover or click on the image to view a larger, zoomed-in version of the product.
components:
- ProductImage: A standalone component that displays a product image with a zoom feature.
- ZoomedImage: A standalone component that displays a larger, zoomed-in version of the product image.
html:
<div class=""container mx-auto p-4 md:p-8""><ProductImage/></div>
component html:
ProductImage:
<div class=""relative""><img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-full object-cover""/><div class=""absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 hover:bg-opacity-75 transition duration-300""><ZoomedImage/></div></div>
ZoomedImage:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-full object-contain""/>"
"User badge component with a small icon, username, and level indicator (e.g. ""Level 10"")","description:
The User Badge component should be a compact, visually appealing container that displays a small icon, a username, and a level indicator. It should be responsive and adapt to different screen sizes. On smaller screens, the component should be more compact, with the icon and text aligned vertically, while on larger screens, the icon and text can be aligned horizontally. The level indicator should be highlighted with a distinctive color to draw attention.
components:
- UserBadge: (Takes Children): This is the top-level component that contains the user's information. It will contain a small icon, a username, and a level indicator.
html:
<UserBadge><!-- username and level indicator will be rendered here --></UserBadge>
component html:
UserBadge:
<div class=""flex flex-col md:flex-row items-center bg-white rounded-lg p-2 shadow-md""><img src=""{icon_url}"" alt=""User Icon"" class=""w-8 h-8 md:w-12 md:h-12 mr-2""/><div class=""flex flex-col""><span class=""text-lg"">{username}</span><span class=""text-sm text-teal-600"">{level_indicator}</span>{children} </div></div>"
Hero Background Image Size,"description:
The UI should display a hero section with a background image that scales responsively to fit different screen sizes.
components:
- HeroBackground: standalone component that displays the background image
- HeroContent: standalone component that displays content on top of the background image
html:
<section class=""h-screen w-full relative""><HeroBackground/><HeroContent/></section>
component html:
HeroBackground:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style=""backgroundImage: url({imageUrl});""}/>
HeroContent:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-xl text-white""><h1>{heroHeaderText}</h1><p>{heroDescriptionText}</p></div>"
Code block controls,"description:
The UI should display a code block with controls to toggle the language, toggle the code wrapping, and copy the code. The controls should be placed above the code block.
components:
- CodeBlock: (standalone) - The main code block component.
- CodeBlockControls: (takes children) - A container for the code block controls.
- LanguageToggle: (standalone) - A dropdown to toggle the language of the code block.
- WrapToggle: (standalone) - A toggle button to toggle code wrapping.
- CopyCode: (standalone) - A button to copy the code.
html:
<div class=""flex flex-col""><CodeBlockControls><LanguageToggle/><WrapToggle/><CopyCode/></CodeBlockControls><CodeBlock/></div>
component html:
CodeBlock:
<pre><code>{code}</code></pre>
CodeBlockControls:
<div class=""flex justify-end mb-2"">{children}</div>
LanguageToggle:
<select class=""px-2 py-1 text-sm"">{language_options}</select>
WrapToggle:
<button class=""px-2 py-1 text-sm"">Toggle Wrap</button>
CopyCode:
<button class=""px-2 py-1 text-sm"">Copy</button>"
"A showcase of featured workouts with images, headlines, and brief descriptions","description:
The UI should display a showcase of featured workouts in a grid layout, with each workout displayed as a card with an image, headline, and brief description. The grid layout should be responsive and adapt to different screen sizes. On larger screens, the cards should be arranged in a 3-column grid, while on smaller screens, the cards should be arranged in a single column.
components:
- WorkoutShowcase: (Takes Children): A container component that displays a grid of `WorkoutCard` components.
html:
<div class=""max-w-md mx-auto p-4 lg:max-w-3xl lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Featured Workouts</h1><WorkoutShowcase><!-- workout cards will be rendered here --></WorkoutShowcase></div>
component html:
WorkoutShowcase:
<div class=""grid gap-4 lg:grid-cols-3"">{children}</div>"
Hotel reservation form,"description:
The UI should be a simple hotel reservation form with input fields for guest information, check-in and check-out dates, room type, and a submit button. The form should be responsive, mobile-friendly, and accessible.
components:
- GuestInformationComponent: (standalone) - contains input fields for guest name, email, and phone number
- DatePickerComponent: (standalone) - a single date picker for check-in and check-out dates
- RoomTypeComponent: (standalone) - a dropdown menu for selecting room type
- SubmitButtonComponent: (standalone) - a submit button for the form
- ReservationFormComponent: (takes children) - the outer container for the form
html:
<ReservationFormComponent><GuestInformationComponent/><DatePickerComponent/><RoomTypeComponent/><SubmitButtonComponent/></ReservationFormComponent>
component html:
GuestInformationComponent:
<div class=""flex flex-wrap -mx-3 mb-6""><div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""name"">Name </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""name"" type=""text""/></div><div class=""w-full md:w-1/2 px-3""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""email"">Email </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""email"" type=""email""/></div><div class=""w-full md:w-1/2 px-3""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""phone"">Phone </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""phone"" type=""tel""/></div></div>
DatePickerComponent:
<div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""checkin_date"">Check-in Date </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""checkin_date"" type=""date""/><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""checkout_date"">Check-out Date </label><input class=""appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""checkout_date"" type=""date""/></div>
RoomTypeComponent:
<div class=""w-full md:w-1/2 px-3 mb-6 md:mb-0""><label class=""block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2"" for=""room_type"">Room Type </label><select class=""block appearance-none w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4"" id=""room_type""><option value="""">Select room type</option><option value=""single"">Single</option><option value=""double"">Double</option><option value=""suite"">Suite</option></select></div>
SubmitButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" type=""submit"">Book Now</button>
ReservationFormComponent:
<form class=""max-w-md w-full mx-auto p-4 pt-6"">{children}</form>"
Error message displayed within the context of a form field or input area,"description:
The UI should display an error message below a form field or input area, indicating that the user has entered invalid data. The error message should be accessible, responsive, and visually distinct from the rest of the form.
components:
- FormFieldError: A standalone component that displays an error message related to a form field.
html:
<div class=""max-w-md mx-auto p-4""><label class=""block mb-2"" for=""input-field"">Input Field</label><input class=""block w-full p-2 pl-10 text-sm text-gray-700"" id=""input-field"" type=""text""/><FormFieldError/></div>
component html:
FormFieldError:
<p class=""text-xs text-red-600 mt-1"">{error_message}</p>"
Individual email thread with reply buttons,"description:
The UI should display an individual email thread with reply buttons. The email thread should show the sender's name, email subject, and email body. There should be reply buttons (e.g., ""Reply"" and ""Reply All"") below the email body.
components:
- EmailThread: Standalone component that displays an individual email thread.
- EmailMetadata: Standalone component that displays the sender's name and email subject.
- EmailBody: Standalone component that displays the email body.
- ReplyButtons: Standalone component that displays the reply buttons.
html:
<div class=""max-w-md mx-auto p-4""><EmailThread/></div>
component html:
EmailThread:
<div class=""border bg-white rounded p-4""><EmailMetadata/><EmailBody/><ReplyButtons/></div>
EmailMetadata:
<div class=""flex justify-between mb-2""><p class=""font-bold"">{sender_name}</p><p class=""text-gray-600"">{email_subject}</p></div>
EmailBody:
<div class=""mb-4""><p>{email_body}</p></div>
ReplyButtons:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Reply All</button></div>"
"A section title component with a large, bold font and a subtle underline","description:
The SectionTitle component should have a large, bold font and a subtle underline. The font size should scale down on smaller screens to ensure readability. The underline should be a subtle highlight color to draw attention to the section title.
components:
- SectionTitle: (Standalone): A single-line title component with a large, bold font and a subtle underline.
html:
<!-- No top-level UI HTML, this component is standalone -->
component html:
SectionTitle:
<h2 class=""text-3xl sm:text-2xl md:text-xl lg:text-2xl font-bold pb-2 border-b-2 border-{highlight_color}"">{title}</h2>"
Social media icons,"description:
A horizontal list of social media icons with a light gray background and white icons. The icons should be evenly spaced and have a subtle animation on hover.
components:
- SocialMediaIcon: (standalone): A single social media icon.
- SocialMediaIcons: (takes children): A container for a list of social media icons.
html:
<div class=""bg-gray-200 p-4""><SocialMediaIcons><SocialMediaIcon/><SocialMediaIcon/><SocialMediaIcon/></SocialMediaIcons></div>
component html:
SocialMediaIcon:
<a href=""{SocialMediaLink}"" target=""_blank"" rel=""noopener noreferrer"" class=""text-lg mx-4 transition duration-300 ease-in-out hover:text-gray-600""><i class=""fab fa-{SocialMediaPlatform}""></i></a>
SocialMediaIcons:
<div class=""flex justify-center"">{children}</div>"
Date picker calendar,"description:
The UI should be a calendar date picker that allows users to select a date. The calendar should be responsive, mobile-friendly, and accessible. It should display a month view with days of the week at the top and a navigation system to move between months.
components:
- DatePickerCalendar: standalone component that contains the entire calendar interface.
- MonthNavigation: standalone component that allows users to navigate between months.
html:
<div class=""max-w-md mx-auto p-4""><DatePickerCalendar/></div>
component html:
DatePickerCalendar:
<div class=""flex flex-col""><MonthNavigation/><table class=""w-full""><thead><tr><th class=""px-4 py-2"">Sun</th><th class=""px-4 py-2"">Mon</th><th class=""px-4 py-2"">Tue</th><th class=""px-4 py-2"">Wed</th><th class=""px-4 py-2"">Thu</th><th class=""px-4 py-2"">Fri</th><th class=""px-4 py-2"">Sat</th></tr></thead><tbody>{day_cells} </tbody></table></div>
MonthNavigation:
<div class=""flex justify-between mb-4""><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300"">❮</button><span class=""px-4 py-2"">{month_name} {year}</span><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300"">❯</button></div>"
Lightbox display,"description:
The UI should feature a Lightbox display which typically consists of an image gallery where clicking on a thumbnail opens the image in a larger view ""over"" the page, often darkening the background to focus on the image. This display should be responsive, adjusting for different screen sizes, and allow easy navigation through images.
components:
- ThumbnailGallery: (Standalone) - This component displays the thumbnails of the images.
- LightboxModal: (Takes children) - A modal component that displays the selected image in a larger view with a darkened background.
html:
<div class=""p-4""><!-- Thumbnail gallery where users pick an image --><ThumbnailGallery/><!-- Modal that displays when an image is clicked --><LightboxModal><img src=""{lightboxImageSrc}"" alt=""{lightboxImageAlt}"" class=""max-w-full max-h-full""/></LightboxModal></div>
component html:
ThumbnailGallery:
<div class=""grid grid-cols-3 gap-4 md:grid-cols-5 lg:grid-cols-6""><img src=""{thumbnail1Src}"" alt=""{thumbnail1Alt}"" class=""w-full cursor-pointer""/><img src=""{thumbnail2Src}"" alt=""{thumbnail2Alt}"" class=""w-full cursor-pointer""/><!-- Add more images similarly depending on the number of images to display --></div>
LightboxModal:
<div class=""fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center p-4""><div class=""bg-white p-4 max-w-3xl max-h-full overflow-auto"">{children} </div></div>"
A separator line with a soft grey color,"description:
A simple, horizontal separator line with a soft grey color that provides a subtle visual separation between elements.
components:
- Separator: (Standalone): A horizontal separator line.
html:
<Separator/>
component html:
Separator:
<div class=""h-[1px] bg-gray-200""></div>"
Sample text,"description:
The UI should be a simple header component with a title and a description.
components:
- HeaderTitle: A standalone component that displays a title.
- HeaderDescription: A standalone component that displays a description.
- Header: A container component that takes children.
html:
<header><Header/></header>
component html:
HeaderTitle:
<h1 class=""text-3xl font-bold"">{title}</h1>
HeaderDescription:
<p class=""text-lg"">{description}</p>
Header:
<div class=""flex flex-col items-center p-4 md:flex-row md:justify-between"">{children}</div>"
"A hero section with a high-quality background image, overlaid with a tagline and call-to-action button","description:
The hero section should have a high-quality background image that scales well on different screen sizes. The tagline should be prominent and centered on the page, with the call-to-action button below it. The button should stand out with a contrasting color. The overall design should be visually appealing and guide the user's attention to the call-to-action button.
components:
- HeroBackground: (Standalone): A full-width, full-height background image that scales on different screen sizes.
- HeroTagline: (Standalone): A centered tagline that overlays the background image.
- HeroCTAButton: (Standalone): A prominent call-to-action button that overlays the background image.
html:
<section class=""h-screen w-full relative overflow-hidden""><HeroBackground/><div class=""absolute inset-0 flex flex-col justify-center px-4 md:px-8 lg:px-12""><HeroTagline/><HeroCTAButton/></div></section>
component html:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style=""backgroundImage: url({hero_background_image});""}></div>
HeroTagline:
<h1 class=""text-3xl md:text-4xl lg:text-5xl font-bold text-white"">{hero_tagline}</h1>
HeroCTAButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_button_text}</button>"
Dropdown menu,"description:
The UI should be a dropdown menu that is hidden by default and appears when the user clicks on a button or hovering over it. The dropdown menu should be responsive, accessible, and SEO-friendly.
components:
- DropdownButton: (standalone): a button that triggers the dropdown menu
- DropdownMenu: (takes children): a container that holds the dropdown menu items
- DropdownMenuItem: (standalone): an individual item in the dropdown menu
html:
<div class=""relative inline-flex""><DropdownButton/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><!-- add more DropdownMenuItem here --></DropdownMenu></div>
component html:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{button_text}</button>
DropdownMenu:
<div class=""absolute top-full left-0 w-48 bg-white shadow-md"">{children}</div>
DropdownMenuItem:
<a href=""#"" class=""block py-2 px-4 text-gray-600 hover:text-gray-900"">{menu_item_text}</a>"
"A component that displays a 3-column layout with titles, short descriptions, and prices for each travel package","description:
The UI should have a clean and modern design that showcases three travel packages in a 3-column layout. Each package should have a title, short description, and price. The layout should be responsive, with the columns stacking on top of each other on small screens and becoming horizontal on larger screens. The UI should use a consistent color palette with highlight colors to make each package stand out.
components:
- PackageList: (Takes Children): A container component that holds a list of travel packages.
- PackageItem: (Standalone): A single travel package component that displays the title, description, and price.
html:
<div class=""container mx-auto p-4""><PackageList><!-- Package items will be rendered here --></PackageList></div>
component html:
PackageList:
<div class=""flex flex-wrap justify-center md:flex-no-wrap md:flex-row"">{children}</div>
PackageItem:
<div class=""bg-white rounded shadow-md p-4 md:w-1/3 xl:w-1/4""><h3 class=""text-lg font-bold"">{packageName}</h3><p class=""text-gray-600"">{packageDescription}</p><p class=""text-lg font-bold"">{packagePrice}</p></div>"
A section header with a large font size and a subtle gradient effect,"description:
The UI should have a prominent section header that grabs the user's attention. The header should have a large font size and a subtle gradient effect to add depth and visual interest. The gradient effect should be subtle to avoid overwhelming the user.
components:
- SectionHeader: (Standalone): A prominent section header with a large font size and a subtle gradient effect.
html:
<!-- The top level UI contains a single SectionHeader component --><SectionHeader/>
component html:
SectionHeader:
<!-- The SectionHeader component has a large font size and a subtle gradient effect --><h2 class=""text-4xl font-bold gradient-header"">Section Header</h2>"
A simple round avatar icon to represent event organizers,"description:
The UI should be a simple, rounded avatar icon that represents event organizers. It should be visually appealing, easy to use, and responsive on different screen sizes. The avatar icon should be circular in shape, with a subtle shadow to add depth. The background color of the avatar should be a highlight color that makes it stand out, and the text inside the avatar should be a contrasting color to ensure accessibility.
components:
- EventOrganizerAvatar: (Standalone): A circular avatar icon that represents an event organizer. It should have a subtle shadow and a highlight background color. The avatar should scale down on smaller screen sizes to ensure it remains visually appealing.
html:
<div class=""flex justify-center""><EventOrganizerAvatar/></div>
component html:
EventOrganizerAvatar:
<div class=""w-12 h-12 md:w-16 md:h-16 lg:w-20 lg:h-20 rounded-full bg-orange-200 shadow-md flex justify-center""><p class=""text-lg md:text-xl lg:text-2xl font-bold text-white"">{initials}</p></div>"
Video upload tool with encoding options,"description:
The UI should be a video upload tool with encoding options. It should have a file input field, a dropdown menu for selecting the encoding preset, a checkbox for enabling watermarks, and a submit button. The UI should be responsive, accessible, and SEO-friendly.
components:
- UploadInput: A standalone component for the file input field.
- EncodingPresetSelect: A standalone component for the dropdown menu for selecting the encoding preset.
- WatermarkCheckbox: A standalone component for the checkbox for enabling watermarks.
- SubmitButton: A standalone component for the submit button.
- VideoUploadForm: A component that takes children, which is the parent component that wraps all the other components.
html:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><VideoUploadForm><UploadInput/><EncodingPresetSelect/><WatermarkCheckbox/><SubmitButton/></VideoUploadForm></div>
component html:
UploadInput:
<div class=""mb-4""><input type=""file"" id=""video-upload"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><label for=""video-upload"" class=""sr-only"">Select a video file</label></div>
EncodingPresetSelect:
<div class=""mb-4""><select id=""encoding-preset"" class=""block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400""><option value="""">{select_preset}</option><!-- more options will be generated dynamically --></select><label for=""encoding-preset"" class=""sr-only"">Select an encoding preset</label></div>
WatermarkCheckbox:
<div class=""mb-4""><input type=""checkbox"" id=""watermark"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:ring-blue-500""><label for=""watermark"" class=""ml-2 text-sm text-gray-600"">Enable watermark</label></div>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Video</button>
VideoUploadForm:
<!-- this component will wrap all the other components --><div class=""p-4"">{children}</div>"
Audio Players,"description:
The UI should be a responsive audio player with controls to play, pause, and adjust volume. It should be mobile-friendly and accessible.
components:
- AudioPlayer: standalone component that contains the audio player controls
- PlayPauseButton: standalone component that toggles play and pause states
- VolumeController: standalone component that allows adjusting the volume
- AudioSeekBar: standalone component that displays the audio progress
html:
<!-- Audio player container --><div class=""flex flex-col items-center justify-center p-4 md:p-8""><!-- Audio player controls --><AudioPlayer/></div>
component html:
AudioPlayer:
<!-- Audio player controls container --><div class=""flex flex-row items-center justify-center mb-4""><!-- Play/pause button --><PlayPauseButton/><!-- Volume controller --><VolumeController/><!-- Audio seek bar --><AudioSeekBar/></div>
PlayPauseButton:
<!-- Play/pause button container --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_icon} <!-- play or pause icon --></button>
VolumeController:
<!-- Volume controller container --><div class=""flex flex-row items-center""><!-- Volume icon --><span class=""text-gray-600"">{volume_icon} <!-- volume icon --></span><!-- Volume slider --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""100"" step=""1"" value=""{volume_level}""/></div>
AudioSeekBar:
<!-- Audio seek bar container --><div class=""flex flex-row items-center""><!-- Audio elapsed time --><span class=""text-gray-600"">{elapsed_time} <!-- elapsed time --></span><!-- Audio seek bar --><input type=""range"" class=""w-full h-2 rounded-lg"" min=""0"" max=""{audio_duration}"" step=""1"" value=""{current_time}""/><!-- Audio remaining time --><span class=""text-gray-600"">{remaining_time} <!-- remaining time --></span></div>"
Dropdown Menu Title,"description:
The Dropdown Menu Title UI should be a dropdown menu title element that displays a title and a dropdown icon, indicating that there are more options available. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- DropdownMenuTitle: a standalone component that displays the title and dropdown icon.
- DropdownIcon: a standalone component that displays the dropdown icon.
html:
<div class=""flex items-center justify-between""><DropdownMenuTitle/><DropdownIcon/></div>
component html:
DropdownMenuTitle:
<p class=""text-lg font-bold"">{menu_title}</p>
DropdownIcon:
<span class=""material-icons"">arrow_drop_down</span>"
Hero Section with Text,"description:
The UI should be a hero section with a background image and a section of text overlay on top of it. The background image should be full-width and take up the entire screen height on desktop. On mobile, the image should be smaller and the text should be more prominent.
components:
- HeroSection: (standalone) - the main hero section component
- HeroText: (takes children) - the text overlay component
html:
<section class=""h-screen w-full relative""><HeroSection/><HeroText><!-- hero text content goes here --></HeroText></section>
component html:
HeroSection:
<div class=""h-screen w-full absolute top-0 left-0 bg-cover bg-center"" style=""backgroundImage: url({hero_image_url});""}/>
HeroText:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-3xl text-white"">{children}</div>"
Filter criteria that dynamically adjusts based on the context of the content being displayed,"description:
The UI should display a dynamic filter criteria section that adjusts based on the context of the content being displayed. It should have a title, a dropdown to select the filter criteria, and a input field to enter the filter value. The filter criteria should be responsive and accessible.
components:
- DynamicFilter: A standalone component that renders a dynamic filter criteria section.
- FilterTitle: A standalone component that renders the title of the filter criteria section.
- FilterDropdown: A standalone component that renders a dropdown to select the filter criteria.
- FilterInput: A standalone component that renders an input field to enter the filter value.
html:
<div class=""max-w-md mx-auto p-4""><DynamicFilter/></div>
component html:
DynamicFilter:
<div class=""flex flex-wrap -mx-4 mb-4""><FilterTitle/><FilterDropdown/><FilterInput/></div>
FilterTitle:
<h5 class=""text-lg font-bold"">{filter_title}</h5>
FilterDropdown:
<select class=""block w-full pl-10 text-sm text-gray-700"">{filter_criteria_options}</select>
FilterInput:
<input type=""text"" class=""block w-full pl-10 pr-10 py-2 text-sm text-gray-700"" placeholder=""{filter_placeholder}""/>"
List of options that appears when a user clicks or hovers over a button or link,"description:
The UI should feature a button or link that, when clicked or hovered over, reveals a dropdown list of options. The list should appear directly beneath the button or link and be vertically aligned with the start of the button or link. It should be styled minimally with clear visual separation between each option.
components:
- DropdownButton: (standalone): This component represents the button that triggers the dropdown list.
- DropdownMenu: (takes children): This is the container for the list of options that appears when the DropdownButton is activated.
- DropdownItem: (takes children): Represents a single option within the DropdownMenu.
html:
<div class=""relative""><DropdownButton/><DropdownMenu><DropdownItem>Option 1</DropdownItem><DropdownItem>Option 2</DropdownItem><DropdownItem>Option 3</DropdownItem></DropdownMenu></div>
component html:
DropdownButton:
<!-- Button to trigger dropdown --><button class=""px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"" aria-haspopup=""true"" aria-expanded=""false"">Click for options </button>
DropdownMenu:
<!-- Container for dropdown items, hidden by default, shown on button click/hover --><div class=""absolute left-0 mt-1 w-48 bg-white shadow-lg border border-gray-200 rounded-md hidden"">{children} </div>
DropdownItem:
<!-- Individual dropdown item --><a href=""{item_link}"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">{children} </a>"
Dropdown Menu Arrow,"description:
A dropdown menu arrow is a small triangle that indicates the presence of a dropdown menu. It should be a small, downward-facing triangle that changes direction when the dropdown menu is open.
components:
- DropdownMenuArrow: A standalone component that displays a triangle pointing down or up.
html:
<button class=""flex justify-center""><!-- dropdown menu button content --><DropdownMenuArrow/></button>
component html:
DropdownMenuArrow:
<div class=""w-3 h-3""><span class=""block w-full h-0.5 bg-current rotate-45 translate-x-1/2 -translate-y-1/2""></span><span class=""block w-full h-0.5 bg-current -rotate-45 translate-x-1/2 translate-y-1/2""></span></div>"
Shader/Gradient backgrounds,"description:
The UI should display a container with a shader/gradient background that changes color depending on the screen size.
components:
- GradientBackground: A standalone component that displays a shader/gradient background.
html:
<div class=""h-screen w-full""><GradientBackground/></div>
component html:
GradientBackground:
<div class=""h-full w-full bg-gradient-to-r from-{start_color} to-{end_color} md:bg-gradient-to-br lg:bg-gradient-to-t""><!-- background container --></div>"
A product grid component that displays 4 products per row,"description:
The product grid component should display products in a grid layout with 4 products per row on large screens, 2 products per row on medium screens, and 1 product per row on small screens. The grid should have a gap of 1rem between products and a margin of 2rem on the outside. The products should have a subtle shadow and a hover effect to highlight the product on mouseover. The component should be responsive and accessible on different screen sizes.
components:
- ProductGrid: (Takes Children): A container component that holds the product items.
- ProductItem: (Standalone): A component that represents a single product item.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductGrid><!-- Product items will be rendered here --></ProductGrid></div>
component html:
ProductGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 my-4"">{children}</div>
ProductItem:
<div class=""bg-white shadow-md rounded overflow-hidden""><img src={product_image} alt={product_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-lg font-bold"">{product_price}</p></div></div>"
Upload/Progress Bars,"description:
A horizontal progress bar that fills up as the upload progresses, with a percentage indicator.
components:
- ProgressBar: a standalone component that displays the progress of the upload
- ProgressIndicator: a standalone component that displays the percentage of the upload
html:
<div class=""flex items-center gap-2""><ProgressBar/><ProgressIndicator/></div>
component html:
ProgressBar:
<div class=""bg-gray-200 h-2 rounded-lg overflow-hidden""><div class=""bg-blue-500 h-2 rounded-lg"" style=""width: {progressPercentage}%;""}/></div>
ProgressIndicator:
<p class=""text-sm"">{progressPercentage} %</p>"
Alerts (warning),"description:
The UI should include an alert notification that communicates a warning to users. The alert will typically be highlighted with colors that designate caution, such as yellow or orange, and contain a clear and concise message.
components:
- AlertBox: (Standalone)**: This is the container for the alert message. It is styled to draw attention and indicate the warning status.
html:
<div class=""main-content""><AlertBox/></div>
component html:
AlertBox:
<div role=""alert"" class=""p-4 mb-4 bg-yellow-200 text-yellow-800 border-l-4 border-yellow-600""><p>{warningMessage}</p></div>"
Location component with a map pin icon and white text,"description:
The Location component should be a compact, iconic representation of a location, with a map pin icon and white text on a colored background. It should be easily readable on different screen sizes.
components:
- LocationComponent: (Takes Children): A compact representation of a location, with a map pin icon and white text on a colored background.
html:
<LocationComponent><span>{locationName}</span></LocationComponent>
component html:
LocationComponent:
<div class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-map-pin mr-2"" aria-hidden=""true""></i>{children}</div>"
Hero Overlay Gradient,"description:
The UI should be a hero section with a gradient overlay, typically used as a background image or video, with a clear call-to-action (CTA) on top of it.
components:
- HeroGradientOverlay: (standalone): The gradient overlay component.
- HeroCTA: (takes children): The call-to-action component.
html:
<section class=""h-screen relative""><HeroGradientOverlay/><div class=""absolute inset-0 flex items-center justify-center""><HeroCTA>Insert CTA text or button here</HeroCTA></div></section>
component html:
HeroGradientOverlay:
<div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-80""></div>
HeroCTA:
<div class=""text-2xl font-bold text-white"">{children}</div>"
Drag-and-Drop FileUploader Component,"description:
The UI should be a rectangular box with a dashed border, where users can drag and drop files or click to select files to upload. The box should have a label ""Drag and drop files or click to upload"" and a progress bar to show the upload progress.
components:
- FileUploader: standalone component that contains a drop zone and a progress bar
- DropZone: standalone component that displays the drag-and-drop area
- ProgressBar: standalone component that displays the upload progress
html:
<div class=""max-w-md mx-auto p-4""><FileUploader/></div>
component html:
FileUploader:
<div class=""bg-gray-50 border-2 border-dashed rounded flex flex-col justify-center p-4""><DropZone/><ProgressBar/><p>{upload_progress}% uploaded</p><p>{error_message}</p></div>
DropZone:
<div class=""p-4 text-center""><p>Drag and drop files or click to upload</p><input type=""file"" multiple/></div>
ProgressBar:
<div class=""w-full bg-gray-200 rounded h-2""><div class=""bg-blue-500 h-2"" style=""`width: {upload_progress}%;""}></div></div>"
Profile picture with dropdown menu options,"description:
A profile picture with a dropdown menu that appears when the profile picture is clicked. The dropdown menu should contain several options.
components:
- ProfilePicture: (standalone)
- DropdownMenu: (takes children)
- MenuItem: (standalone)
html:
<div class=""flex justify-end""><ProfilePicture/><DropdownMenu><MenuItem/><MenuItem/><MenuItem/></DropdownMenu></div>
component html:
ProfilePicture:
<img src={profile_picture_url} class=""w-8 h-8 rounded-full cursor-pointer""/>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md"">{children}</div>
MenuItem:
<a href={menu_item_url} class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">{menu_item_text}</a>"
"A thumbnail image component with a rounded 8px corner, displaying a photo of a teacher or instructor","description:
The thumbnail image component should be a rectangular box with a rounded corner, displaying a photo of a teacher or instructor. The image should be centered within the box and take up most of the space. The box should have a subtle shadow to give it depth. On smaller screens, the box should be smaller and more circular to fit the screen size.
components:
- ThumbnailImage: (Takes Children): A container component that holds the image and provides the rounded corner and shadow styling.
html:
<ThumbnailImage><!-- image here --></ThumbnailImage>
component html:
ThumbnailImage:
<div class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 rounded-2xl shadow-md overflow-hidden"">{children}</div>"
Audio transitions,"description:
The UI should display a list of audio transitions with their corresponding durations and types. The list should be responsive, easily accessible on both desktop and mobile devices, and follow a card-based layout for each transition.
components:
- AudioTransitionCard: standalone component representing a single audio transition.
- TransitionList: component that takes children, representing the list of audio transitions.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Audio Transitions</h2><TransitionList><AudioTransitionCard/><AudioTransitionCard/><!-- Add more AudioTransitionCard components as needed --></TransitionList></div>
component html:
AudioTransitionCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4""><h3 class=""text-lg font-bold"">{transition_name}</h3><p>Type: {transition_type}</p><p>Duration: {duration} seconds</p></div>
TransitionList:
<ul class=""list-none mb-0"">{children}</ul>"
Parallax,"description:
The UI should be a full-screen parallax effect with a background image that moves slower than the foreground content when the user scrolls. The foreground content should be a simple headline and a call-to-action button.
components:
- ParallaxBackground: - Standalone
- HeroContent: - Takes children
- HeroHeadline: - Standalone
- CallToActionButton: - Standalone
html:
<div class=""h-screen w-full relative overflow-hidden""><ParallaxBackground/><div class=""absolute top-0 left-0 w-full h-full flex justify-center items-center""><HeroContent><HeroHeadline/><CallToActionButton/></HeroContent></div></div>
component html:
ParallaxBackground:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-center"" style=""backgroundImage: url({background_image_url});""}></div>
HeroContent:
<div class=""max-w-md mx-auto"">{children}</div>
HeroHeadline:
<h1 class=""text-4xl font-bold"">{headline_text}</h1>
CallToActionButton:
<button class=""px-4 py-2 rounded bg-orange-500 text-white"">{button_text}</button>"
Background Images/Patterns,"description:
The UI should display a container with a background image or pattern. The image or pattern should be responsive and adapt to different screen sizes.
components:
- BackgroundImageContainer: (standalone) - a container element that holds the background image or pattern.
html:
<div class=""h-screen w-full""><BackgroundImageContainer/></div>
component html:
BackgroundImageContainer:
<div class=""h-full w-full bg-cover bg-center	bg-{background_image_or_pattern}"" style=""`background-image: url('{background_image_or_pattern}');""}><!-- Background image or pattern will be displayed here --></div>"
"**Load More Button**: A button with a white background and black text, saying ""Load More"" to load additional news articles","description:
The UI should have a prominent ""Load More"" button that stands out from the rest of the content. It should be easily accessible on various screen sizes and have a clear visual hierarchy. The button should be responsive, accessible, and easy to use.
components:
- LoadMoreButton: (Standalone): A button component that loads additional content when clicked. On xs screens, it should have a width of 100% and on sm screens and above, it should have a max-width of 200px and be centered horizontally.
html:
<div class=""flex justify-center mb-4""><!-- news article content here --><LoadMoreButton/></div>
component html:
LoadMoreButton:
<button class=""bg-white hover:bg-gray-100 text-black font-bold py-2 px-4 rounded"">Load More</button>"
Headings 1,"description:
The UI should display a heading with a title. The heading should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- Heading: (standalone)
html:
<div class=""max-w-md mx-auto p-4""><Heading/></div>
component html:
Heading:
<h1 class=""text-3xl font-bold mb-4"">{heading_title}</h1>"
Product Price Discount,"description:
The UI should display the original price of a product, a discounted price, and a discount percentage. The discounted price should be prominent, and the original price should be struck through. The discount percentage should be displayed clearly.
components:
- ProductPriceDiscountContainer: (standalone): A container component that holds the product price discount information.
- OriginalPrice: (standalone): A component that displays the original price of the product.
- DiscountPrice: (standalone): A component that displays the discounted price of the product.
- DiscountPercentage: (standalone): A component that displays the discount percentage.
html:
<div class=""flex items-center mb-4""><ProductPriceDiscountContainer/></div>
component html:
ProductPriceDiscountContainer:
<div class=""flex items-center""><OriginalPrice/>{' '}<s>{original_price}</s><DiscountPrice/>{discount_price} <DiscountPercentage/>({discount_percentage}% off)</div>
OriginalPrice:
<span class=""text-gray-500 text-sm"">{original_price}</span>
DiscountPrice:
<span class=""text-lg font-bold text-red-600"">{discount_price}</span>
DiscountPercentage:
<span class=""text-sm text-gray-600"">{discount_percentage}%</span>"
Notification bell for new updates,"description:
The UI should display a bell icon with a red badge indicating the number of new updates. The bell icon should change color when hovered or focused. When clicked, a dropdown list of new updates should appear.
components:
- NotificationBell: standalone component
- UpdateBadge: standalone component
- UpdateItem: takes children (list of updates)
html:
<div class=""flex justify-end mr-4""><NotificationBell/></div><!-- dropdown list of updates --><div class=""hidden absolute z-10 bg-white py-2 w-64 rounded shadow-md""><UpdateItem>{children}</UpdateItem></div>
component html:
NotificationBell:
<button class=""bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-full p-2"" aria-label=""Notification bell""><i class=""fas fa-bell""></i><UpdateBadge/></button>
UpdateBadge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{update_count}</span>
UpdateItem:
<li class=""py-2 border-b border-gray-200 text-sm"">{children} <!-- new update item text --></li>"
Recipe ingredients list,"description:
The UI should display a list of ingredients needed for a recipe, with each ingredient listed on a new line. The ingredient name should be displayed in a bold font, with the quantity and unit of measurement displayed next to it. The list should be responsive and adapt to different screen sizes.
components:
- IngredientItem: a standalone component that displays a single ingredient.
- IngredientList: a component that takes children (multiple `IngredientItem`s) and displays them in a list.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Ingredients</h2><IngredientList><IngredientItem/><IngredientItem/><!-- Add more IngredientItem components here --></IngredientList></div>
component html:
IngredientItem:
<div class=""flex items-center mb-2""><span class=""font-bold"">{ingredient_name}</span><span class=""ml-2"">{quantity} {unit}</span></div>
IngredientList:
<ul class=""list-none mb-0"">{children}</ul>"
Breadcrumb navigation component with white text on a dark background,"description:
The UI should have a dark background with white text to provide high contrast and make the breadcrumb navigation stand out. The breadcrumb navigation should be displayed in a horizontal row with each item separated by a separator (e.g., ""/""). The separator should be slightly smaller than the breadcrumb items. The UI should be responsive and adjust to different screen sizes.
components:
- BreadcrumbNavItem: (Takes Children): This component represents an individual item in the breadcrumb navigation. It should display the item's text in white on a dark background. On small screens, the text should be displayed in a single line. On medium screens and above, the text should be displayed in two lines if the text is too long.
- BreadcrumbSeparator: (Standalone): This component represents the separator between breadcrumb items. It should be a small, dark gray slash character.
- BreadcrumbNavigation: (Takes Children): This component represents the entire breadcrumb navigation. It should display a horizontal row of breadcrumb items separated by separators.
html:
<div class=""bg-dark pt-4 pb-4""><BreadcrumbNavigation><BreadcrumbNavItem>Home</BreadcrumbNavItem><BreadcrumbSeparator/><BreadcrumbNavItem>Library</BreadcrumbNavItem><BreadcrumbSeparator/><BreadcrumbNavItem>{library_name}</BreadcrumbNavItem></BreadcrumbNavigation></div>
component html:
BreadcrumbNavItem:
<a href=""#"" class=""text-white text-sm md:text-base"">{children}</a>
BreadcrumbSeparator:
<span class=""text-darkgray text-sm"">/</span>
BreadcrumbNavigation:
<nav class=""flex flex-wrap items-center justify-start mb-4"">{children}</nav>"
Geo-location Map Markers,"description:
A responsive map with geo-location markers displaying locations on a map. The map should be accessible, with keyboard navigation and screen reader compatibility. The UI should be mobile-first, with a clean and minimal design.
components:
- MapContainer: Standalone component that wraps the map.
- Marker: Standalone component representing a location on the map.
- MarkerPopup: Component that displays information about a location when a marker is clicked. Takes children.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><MapContainer/></div>
component html:
MapContainer:
<div class=""h-full w-full rounded-lg overflow-hidden""><div class=""leaflet-container"" id=""map""></div></div>
Marker:
<div class=""marker""><span class=""marker-icon"">{marker_icon}</span><span class=""marker-tooltip"">{marker_tooltip}</span></div>
MarkerPopup:
<div class=""popup flex flex-col p-4 bg-white rounded-lg shadow-md""><h2 class=""text-lg font-bold"">{location_name}</h2><p>{location_description}</p>{children}</div>"
A section header component with a bold title and a subtle background color,"description:
The Section Header component should have a bold title and a subtle background color to draw attention to the section. The background color should be a slightly darker shade of the primary color scheme. The title should be large and bold to create visual hierarchy. The component should be responsive and adjust its layout based on screen size.
components:
- SectionHeader: (Takes Children): This component will wrap the title and optional child elements.
html:
<SectionHeader><h2>{title}</h2><!-- optional child elements -->{children}
</SectionHeader>
component html:
SectionHeader:
<div class=""bg-gray-200 py-4 px-6 md:px-12 lg:px-24""><div class=""container mx-auto flex justify-center""><h2 class=""text-xl lg:text-2xl font-bold"">{children}</h2></div></div>"
Blog post display,"description:
The UI should display a blog post with a title, author, date, and content. The title should be prominent, the author and date should be smaller, and the content should be the main focus. The UI should be responsive and adapt to different screen sizes.
components:
- BlogPost: standalone component that displays a single blog post
- PostHeader: standalone component that displays the title, author, and date of the post
- PostContent: standalone component that displays the content of the post
html:
<div class=""container mx-auto p-4 md:p-6 lg:px-12""><BlogPost/></div>
component html:
BlogPost:
<div class=""flex flex-col""><PostHeader/><PostContent/></div>
PostHeader:
<div class=""mb-2""><h1 class=""text-3xl font-bold"">{title}</h1><p class=""text-gray-600 text-sm"">By {author} on {date}</p></div>
PostContent:
<div class=""prose max-w-full mx-auto"">{content}</div>"
"A hero section with a large background image of a popular game and a tagline ""Game On!""","description:
The hero section should have a large background image of a popular game, with a bold and colorful design to grab the user's attention. The tagline ""Game On!"" should be prominently displayed in a modern, sans-serif font. The background image should be responsive and scale to fit different screen sizes.
components:
- HeroSection: (Takes Children): A container component that wraps the background image and tagline.
- BackgroundImage: (Standalone): Displays the background image of the popular game.
- Tagline: (Standalone): Displays the ""Game On!"" tagline.
html:
<HeroSection><BackgroundImage/><Tagline/></HeroSection>
component html:
HeroSection:
<section class=""h-screen w-full flex items-center justify-center pb-12"">{children}</section>
BackgroundImage:
<div class=""absolute inset-0 bg-cover bg-center"" style=""backgroundImage: url('{image_url}');""}></div>
Tagline:
<h1 class=""text-4xl font-bold text-gray-900"">{tagline_text}</h1>"
"A profile information component, displaying the user's name, bio, and number of courses enrolled","description:
The UI should display the user's profile information in a clean and concise manner. The component should be responsive, accessible, and visually appealing. On smaller screens, the component should take up the full width, while on larger screens, it should be centered with a maximum width.
components:
- ProfileInfo: Takes children. Displays the user's profile information.
- UserInfo: Standalone. Displays the user's name and bio.
- CourseCounter: Standalone. Displays the number of courses enrolled.
html:
<ProfileInfo><UserInfo/><CourseCounter/></ProfileInfo>
component html:
ProfileInfo:
<div class=""max-w-md mx-auto p-4 bg-white shadow-md rounded-md"">{children}</div>
UserInfo:
<div class=""flex flex-col mb-4""><h2 class=""text-lg font-bold"">{userName}</h2><p class=""text-gray-600"">{userBio}</p></div>
CourseCounter:
<div class=""text-sm text-gray-600""><svg><!-- book --></svg>{courseCount} courses enrolled</div>"
"User profile with karma, post history, and info","description:
The UI should display a user's profile information, including their karma score, post history, and additional info. The profile should be divided into sections, with each section having a clear heading and concise information. The design should be clean, minimalistic, and easy to read.
components:
- UserProfileCard: A standalone component that displays the user's profile information, including their karma score and additional info.
- PostHistoryList: A component that takes children, displaying a list of the user's post history.
- PostHistoryItem: A standalone component that displays a single post's information, including the post title, date, and content.
- InfoSection: A component that takes children, displaying additional information about the user.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><UserProfileCard/><div class=""mt-6""><h2 class=""text-lg font-bold"">Post History</h2><PostHistoryList/></div><div class=""mt-6""><h2 class=""text-lg font-bold"">Info</h2><InfoSection/></div></div>
component html:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><h1 class=""text-lg font-bold"">{username}</h1><p>Karma: {karma_score}</p><p>{bio}</p></div>
PostHistoryList:
<ul class=""list-none p-0 m-0"">{children}</ul>
PostHistoryItem:
<li class=""py-4 border-b border-gray-200 last:border-0""><h3 class=""text-lg"">{post_title}</h3><p class=""text-sm"">{post_date}</p><p>{post_content}</p></li>
InfoSection:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">Info</h2>{children}</div>"
Recipe cooking timer,"description:
A simple, minimalist design with a prominent timer display, start/stop buttons, and a small area for displaying the recipe name.
components:
- RecipeHeader: a standalone component displaying the recipe name.
- TimerDisplay: a standalone component displaying the current time.
- ControlButtons: a standalone component containing start and stop buttons.
- TimerContainer: a component that takes children, wrapping the timer display and control buttons.
html:
<div class=""flex flex-col mx-auto p-4 max-w-md""><RecipeHeader/><TimerContainer><TimerDisplay/><ControlButtons/></TimerContainer></div>
component html:
RecipeHeader:
<h2 class=""text-lg font-bold"">{recipe_name}</h2>
TimerDisplay:
<p class=""text-4xl font-bold"">{mm}:{ss}</p>
ControlButtons:
<div class=""flex justify-center mt-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Start</button><button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Stop</button></div>
TimerContainer:
<div class=""flex flex-col items-center"">{children}</div>"
Product forums,"description:
The UI should display a list of forum topics with their titles, descriptions, and metadata (e.g., number of replies, views). The UI should be responsive, accessible, and easy to navigate.
components:
- ForumTopicList: A component that takes children, containing a list of `ForumTopicCard` components.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Product Forums</h1><ForumTopicList><!-- Forum topic cards will be inserted here --></ForumTopicList></div>
component html:
ForumTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Badges,"description:
The UI should consist of a set of badges. Each badge will have text inside that represents a status, category, or other relevant information. The badges should have a visually appealing design with rounded corners and a solid background color that differentiates them from one another.
components:
- Badge: (Standalone)**: A small, pill-shaped component that displays text within a colored background. It is typically used to indicate status, category, or to showcase small pieces of information like tags.
html:
<div class=""flex flex-wrap gap-2""><Badge/><Badge/><Badge/></div>
component html:
Badge:
<span class=""text-sm font-medium px-3 py-1 bg-blue-500 text-white rounded-full"">{badge_text} </span>"
Sticky/Fixed Navigation,"description:
The UI should have a sticky/fixed navigation bar that is visible at the top of the page, and remains fixed in place as the user scrolls down the page.
components:
- NavigationBar: A standalone component that contains the navigation links.
html:
<body><NavigationBar/><!-- page content --><main><!-- page content here --></main></body>
component html:
NavigationBar:
<nav class=""fixed top-0 left-0 w-full bg-white shadow-md""><div class=""max-w-md mx-auto px-4""><ul class=""flex justify-between py-4""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Home</a></li><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">About</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Contact</a></li></ul></div></nav>"
Email signature editor with formatting options,"description:
The UI should be a responsive, mobile-first email signature editor with formatting options. The editor should have a toolbar with options to format the text, such as bold, italic, underline, and font size. The editor should also have a preview section to display the formatted text. The UI should be accessible and SEO-friendly.
components:
- EditorToolbar: A standalone component that contains the formatting options (bold, italic, underline, font size).
- EditorInput: A standalone component that is the input field for the email signature text.
- PreviewArea: A standalone component that displays the formatted text.
- FormattingOption: A component that takes children, representing an individual formatting option (e.g. bold, italic, etc.).
html:
<div class=""flex flex-col w-full h-screen p-4""><EditorToolbar/><EditorInput/><PreviewArea/></div>
component html:
EditorToolbar:
<div class=""flex justify-between mb-2""><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Bold</button></FormattingOption><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Italic</button></FormattingOption><FormattingOption><button class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1"">Underline</button></FormattingOption><FormattingOption><select class=""bg-gray-200 hover:bg-gray-300 rounded px-2 py-1""><option value=""12px"">12px</option><option value=""14px"">14px</option><option value=""16px"">16px</option></select></FormattingOption></div>
EditorInput:
<textarea class=""w-full p-2 h-48 bg-gray-200 rounded"" placeholder=""Enter your email signature...""></textarea>
PreviewArea:
<div class=""bg-gray-100 p-4 rounded"">{signaturePreview}</div>
FormattingOption:
<div class=""mr-2"">{children}</div>"
A like and comment count component that displays the number of likes and comments on a post,"description:
The UI should have a compact design that showcases the like and comment counts in a clear and concise manner. The component should be responsive and adapt to different screen sizes. On smaller screens, the component should be stacked vertically, while on larger screens, it should be displayed side-by-side. The component should use a consistent color palette, with highlights to draw attention to the counts.
components:
- LikeCommentCount: (Takes Children): Displays the like and comment counts.
html:
<section class=""flex flex-wrap justify-center mb-4 md:flex-no-wrap""><LikeCommentCount><!-- like and comment counts will be rendered here --></LikeCommentCount></section>
component html:
LikeCommentCount:
<div class=""bg-gray-100 p-2 rounded-sm shadow-sm md:p-4""><div class=""flex flex-wrap justify-between mb-2""><div class=""text-lg font-bold"">{like_count} <span class=""text-gray-500"">Likes</span></div><div class=""text-lg font-bold"">{comment_count} <span class=""text-gray-500"">Comments</span></div></div>{children}</div>"
Audio player controls,"description:
The audio player controls should be a compact, horizontally laid out set of buttons and a slider that allow users to control audio playback. The UI should be responsive, mobile-friendly, and accessible.
components:
- PlaybackButton: A standalone button that toggles playback.
- VolumeSlider: A standalone component that allows users to adjust the volume.
- SkipBackButton: A standalone button that skips to the previous track.
- SkipForwardButton: A standalone button that skips to the next track.
- SeekBar: A standalone component that displays the audio progress and allows users to seek to a specific position.
html:
<div class=""flex justify-center""><SkipBackButton/><PlaybackButton/><SeekBar/><VolumeSlider/><SkipForwardButton/></div>
component html:
PlaybackButton:
<button class=""bg-gray-200 hover:bg-gray-300 rounded-full p-2"">{playback_icon} <!-- icon will be a pause icon when playing, a play icon when paused --></button>
VolumeSlider:
<div class=""flex items-center""><span class=""mr-2"">{volume_label}</span><input class=""w-20"" type=""range"" min=""0"" max=""100"" value=""{volume_level}""/></div>
SkipBackButton:
<button class=""bg-gray-200 hover:bg-gray-300 rounded-full p-2"">{previous_icon}</button>
SkipForwardButton:
<button class=""bg-gray-200 hover:bg-gray-300 rounded-full p-2"">{next_icon}</button>
SeekBar:
<div class=""flex items-center""><span class=""mr-2"">{current_position}</span><input class=""w-40"" type=""range"" min=""0"" max=""{duration}"" value=""{current_position}""/><span class=""ml-2"">{duration}</span></div>"
A simple horizontal line separator to divide sections of the page,"description:
The UI should have a simple horizontal line separator that divides sections of the page. The separator should be responsive, with a consistent thickness and color across different screen sizes.
components:
- HorizontalSeparator: (Standalone): A simple horizontal line separator that divides sections of the page.
html:
<!-- Page content above the separator --><HorizontalSeparator/><!-- Page content below the separator -->
component html:
HorizontalSeparator:
<hr class=""w-full border-0 border-b border-solid border-gray-200""/>"
Dropdown list,"description:
A dropdown list that displays a list of options when the user clicks on it. The list should be hidden by default and appear when the user interacts with the dropdown. The dropdown should be responsive, mobile-friendly, and accessible.
components:
- DropdownButton: - standalone: The button that, when clicked, displays the dropdown list.
- DropdownList: - takes children: The container for the list of options.
- DropdownListItem: - standalone: An individual list item in the dropdown list.
html:
<div class=""relative inline-block""><DropdownButton/><DropdownList><!-- list items will be inserted here --></DropdownList></div>
component html:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{dropdown_title}</button>
DropdownList:
<ul class=""absolute bg-white shadow-md py-1 mt-2 w-48"">{children}</ul>
DropdownListItem:
<li class=""py-2 px-4 hover:bg-gray-100""><a href={list_item_link} class=""text-gray-800"">{list_item_text}</a></li>"
Flight booking form,"description:
The UI of the flight booking form should be user-friendly and straightforward, providing fields for the user to enter details such as departure, destination, departure and return dates, and the number of passengers. It should also include a search button to submit the form data.
components:
- InputField: Standalone component used to render text input fields.
- DatePicker: Standalone component for selecting dates.
- NumberSelector: Standalone component for selecting numbers (like the number of passengers).
- FormButton: Standalone component representing the button to submit the form.
html:
<div class=""container mx-auto p-4""><form class=""space-y-4""><InputField/><InputField/><DatePicker/><DatePicker/><NumberSelector/><FormButton/></form></div>
component html:
InputField:
<div class=""flex flex-col""><label for=""{input_id}"" class=""mb-2"">{label}</label><input id=""{input_id}"" type=""text"" placeholder=""{placeholder}"" class=""border p-2""/></div>
DatePicker:
<div class=""flex flex-col""><label for=""{date_picker_id}"" class=""mb-2"">{label}</label><input id=""{date_picker_id}"" type=""date"" class=""border p-2""/></div>
NumberSelector:
<div class=""flex flex-col""><label for=""{number_selector_id}"" class=""mb-2"">{label}</label><input id=""{number_selector_id}"" type=""number"" min=""1"" class=""border p-2""/></div>
FormButton:
<button type=""submit"" class=""w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Blog Post Category List,"description:
The UI should be a list of categories with a title, possibly with an icon, and a count of posts in each category. The list should be responsive, with a layout that adapts to different screen sizes.
components:
- CategoryList: a component that wraps the list of categories, and takes children (a list of `CategoryCard` components).
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Categories</h2><ul class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- category cards will be inserted here --></CategoryList></ul></div>
component html:
CategoryList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Room Type and Rate Selection,"description:
The UI should display a list of room types with their corresponding rates and amenities. It should be responsive, with a single column layout on mobile devices and a two-column layout on larger screens. Each room type should have a header with the room type name, a list of amenities, and a rate selection dropdown.
components:
- AmenityList: A standalone component listing the amenities for a room type.
- RateSelector: A standalone component allowing the user to select a rate.
- RoomTypeList: A component that takes children, displaying a list of room types.
html:
<div class=""max-w-md mx-auto p-4 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Select Room Type and Rate</h1><RoomTypeList><!-- Room type cards will be rendered here --></RoomTypeList></div>
component html:
AmenityList:
<ul class=""list-disc pl-4 mb-4"">{amenities.map((amenity) =>( <li key={amenity}>{amenity}</li>))}</ul>
RateSelector:
<select class=""w-full p-2 pl-4"">{rateOptions.map((rate) =>( <option key={rate.id} value={rate.id}>{rate.name}</option>))}</select>
RoomTypeList:
{children}"
Video captions,"description:
The UI should display captions for a video. The captions should be displayed below the video and should be responsive, mobile-first, and accessible.
components:
- VideoCaption: (standalone) - Displays a single caption for the video.
- VideoCaptions: (takes children) - Container for all the video captions.
html:
<div class=""flex flex-col""><video src=""{video_source}"" class=""w-full h-full""></video><div class=""px-4 py-2""><VideoCaptions><VideoCaption/><VideoCaption/><!-- Add more VideoCaption components here --></VideoCaptions></div></div>
component html:
VideoCaption:
<p class=""text-sm"">{caption_text} ({start_time} - {end_time})</p>
VideoCaptions:
<div class=""space-y-2"">{children}</div>"
Responsive Image Galleries,"description:
The UI for the Responsive Image Gallery should consist of a grid layout of images that adjust to different screen sizes. Images should be evenly spaced, and on smaller screens, images can adjust to either a single column or fewer columns than on larger screens. The gallery should maintain a clean, balanced appearance without clutter, ensuring each image is displayed prominently and is clearly visible.
components:
- Gallery: (Standalone)**: This is the primary container for the image collection.
- GalleryItem: (Children)**: Represents each individual image item within the gallery. This component contains the image and can optionally hold a caption or other relevant information.
html:
<main><Gallery/></main>
component html:
Gallery:
<div class=""grid grid-cols-3 gap-4 p-4 md:grid-cols-5 lg:grid-cols-7""><GalleryItem><img src=""{img_url1}"" alt=""{img_alt1}"" class=""w-full h-auto""/></GalleryItem><GalleryItem><img src=""{img_url2}"" alt=""{img_alt2}"" class=""w-full h-auto""/></GalleryItem><GalleryItem><img src=""{img_url3}"" alt=""{img_alt3}"" class=""w-full h-auto""/></GalleryItem><!-- More GalleryItems as needed for the gallery --></div>
GalleryItem:
<div class=""relative"">{children}</div>"
Links,"description:
The UI should display a list of links with a brief description and an optional icon.
components:
- LinkItem: A standalone component representing a single link.
- LinkList: A component that takes children, containing a list of `LinkItem` components.
html:
<div class=""max-w-md mx-auto p-4""><LinkList><LinkItem/><LinkItem/><!-- add more LinkItem components here --></LinkList></div>
component html:
LinkItem:
<a href=""{link_url}"" class=""block mb-4""><!-- optional icon -->{icon_url ? <img src={icon_url} alt="""" class=""w-4 h-4 mr-2""/>: null} <span>{link_text}</span><p class=""text-gray-600"">{link_description}</p></a>
LinkList:
<ul class=""list-none mb-0"">{children}</ul>"
Revenue Forecast: Predict future sales,"description:
The UI should be a simple, informative, and responsive dashboard that displays a revenue forecast chart and some key statistics.
components:
- RevenueForecastHeader: Standalone, displays the title and a brief description of the revenue forecast.
- ForecastChart: Standalone, displays a chart showing the revenue forecast.
- KeyStatistics: Standalone, displays a list of key statistics related to the revenue forecast.
html:
<div class=""max-w-md mx-auto p-4 md:p-8""><RevenueForecastHeader/><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-3/4 px-4 mb-4 md:mb-0""><ForecastChart/></div><div class=""w-full md:w-1/3 xl:w-1/4 px-4""><KeyStatistics/></div></div></div>
component html:
RevenueForecastHeader:
<div class=""mb-4""><h1 class=""text-2xl font-bold"">Revenue Forecast</h1><p class=""text-gray-600"">{forecast_description}</p></div>
ForecastChart:
<div class=""bg-white p-4 rounded shadow-md""><canvas id=""forecast-chart"" width=""400"" height=""200""></canvas></div>
KeyStatistics:
<ul class=""list-none mb-0""><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Projected Revenue:</span><span>{projected_revenue}</span></li><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Average Growth Rate:</span><span>{average_growth_rate}%</span></li><li class=""flex justify-between mb-2 p-2 bg-gray-100 rounded""><span>Forecast Period:</span><span>{forecast_period}</span></li></ul>"
Product Description List Item,"description:
The UI should display a list item that contains a product description, which includes a product title, a product rating, and a short product description. The component should be responsive, mobile-first, and accessible.
components:
- ProductDescriptionListItem: standalone component
- ProductTitle: standalone component, displays the title of the product
- ProductRating: standalone component, displays the rating of the product
- ProductDescription: standalone component, displays a short description of the product
html:
<ul class=""flex flex-col gap-4 md:flex-row md:flex-wrap""><ProductDescriptionListItem/><!-- more list items --></ul>
component html:
ProductDescriptionListItem:
<li class=""flex flex-col gap-2""><ProductTitle/><ProductRating/><ProductDescription/></li>
ProductTitle:
<h2 class=""text-lg font-bold"">{productName}</h2>
ProductRating:
<div class=""flex gap-1"">{rating} <span class=""text-sm"">/ 5</span></div>
ProductDescription:
<p>{productDescription}</p>"
Interactive Product Demo Simulation,"description:
The UI should be a responsive, mobile-first, interactive demo simulation that allows users to explore a product's features and benefits. It should have a clean and modern design, with clear typography and prominent calls-to-action.
components:
- ProductHero: A standalone component that serves as the hero section of the demo simulation, featuring a prominent product image and a brief introduction.
- FeatureCard: A component that takes children, used to showcase individual features of the product, including a brief description and a call-to-action.
- CallToAction: A standalone component that encourages users to take a specific action, such as ""Learn More"" or ""Get Started"".
- ProductImage: A standalone component that displays a product image.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ProductHero/><section class=""flex flex-wrap justify-center mb-4""><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard><FeatureCard><div slot=""content"">Insert feature content here...</div></FeatureCard></section><CallToAction/><ProductImage/></div>
component html:
ProductHero:
<section class=""hero bg-cover bg-center h-screen"" style=""background-image: url('{hero_image_url}')""><div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl lg:text-5xl text-white"">{hero_title}</h1><p class=""text-lg lg:text-2xl text-white"">{hero_subtitle}</p></div></section>
FeatureCard:
<div class=""bg-white shadow-md rounded p-4 lg:p-6""><div slot=""content"">{children}</div><CallToAction/></div>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>
ProductImage:
<img class=""w-full lg:w-1/2 xl:w-1/3 mx-auto"" src=""{product_image_url}"" alt=""{product_image_alt_text}"">"
Social sharing buttons,"description:
A horizontal row of social sharing buttons, each with a corresponding logo and label, that allow users to share content on various social media platforms. The buttons should be evenly spaced and responsive to different screen sizes.
components:
- SocialSharingButton: A standalone component that represents a single social sharing button.
- SocialSharingButtonGroup: A component that takes children and wraps the `SocialSharingButton` components.
html:
<div class=""flex justify-center mb-4""><SocialSharingButtonGroup><SocialSharingButton/><SocialSharingButton/><SocialSharingButton/><!-- Add more SocialSharingButton components as needed --></SocialSharingButtonGroup></div>
component html:
SocialSharingButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><img src={logoUrl} alt={label} class=""w-4 h-4 mr-2"">{label}</button>
SocialSharingButtonGroup:
<div class=""flex justify-center"">{children}</div>"
Testimonial Avatar Image,"description:
The UI should display a circular avatar image with a testimonial quote wrapped around it.
components:
- TestimonialAvatarImage: standalone component that displays a circular avatar image with a testimonial quote.
- QuoteText: standalone component that displays the testimonial quote.
html:
<div class=""flex flex-col items-center mb-4""><TestimonialAvatarImage/><QuoteText/></div>
component html:
TestimonialAvatarImage:
<img src={avatar_image_url} alt={name} class=""w-20 h-20 rounded-full object-cover""/>
QuoteText:
<blockquote class=""text-lg font-bold"">{quote}</blockquote>"
Embedded video,"description:
The UI should display an embedded video with a responsive design that adapts to different screen sizes. The video should have a playable thumbnail, and the video controls should be accessible.
components:
- VideoThumbnail: A standalone component that displays the video thumbnail.
- VideoPlayer: A component that takes children (the video iframe) and provides video controls.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><VideoThumbnail/><VideoPlayer><iframe src={video_url} frameborder=""0"" allowfullscreen></iframe></VideoPlayer></div>
component html:
VideoThumbnail:
<img src={thumbnail_url} alt=""Video thumbnail"" class=""w-full h-48 object-cover rounded-md md:h-64 lg:h-80""/>
VideoPlayer:
<div class=""relative overflow-hidden"">{children} <!-- video controls will be added here --></div>"
"Social media icons (Facebook, Twitter, LinkedIn) in the footer","description:
The social media icons should be displayed horizontally in the footer of the page, with each icon having a slight hover effect to make them stand out. The icons should be easily clickable on mobile devices. The footer should be responsive and scale well on different screen sizes.
components:
- SocialMediaLink: (Takes Children): A single social media link with an icon and a link to the social media platform. This component will be repeated for each social media platform.
- Footer: (Takes Children): The footer component that contains the social media links.
html:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8 xl:p-10""><div class=""flex justify-center mb-4 md:mb-6 lg:mb-8 xl:mb-10""><SocialMediaLink><!-- Facebook icon and link --></SocialMediaLink><SocialMediaLink><!-- Twitter icon and link --></SocialMediaLink><SocialMediaLink><!-- LinkedIn icon and link --></SocialMediaLink></div></footer>
component html:
SocialMediaLink:
<a href=""{social_media_link}"" class=""inline-block mr-4 md:mr-6 lg:mr-8 xl:mr-10 hover:shadow-md transition duration-300 ease-in-out""><i class=""fab fa-{social_media_platform} fa-lg text-{social_media_color}""></i>{children}</a>
Footer:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8 xl:p-10""><div class=""flex justify-center mb-4 md:mb-6 lg:mb-8 xl:mb-10"">{children} </div></footer>"
Navigation Menu Toggle Text,"description:
The UI should be a responsive, mobile-first navigation menu toggle text that adapts to different screen sizes. On smaller screens, the toggle text should be displayed, and on larger screens, the navigation menu should be visible.
components:
- NavigationToggleText: (standalone): displays the toggle text for the navigation menu
- NavigationMenu: (takes children): displays the navigation menu items
html:
<div class=""flex justify-between items-center w-full lg:hidden""><NavigationToggleText/><NavigationMenu><!-- navigation menu items will be inserted here --></NavigationMenu></div>
component html:
NavigationToggleText:
<a href=""#"" class=""text-lg font-bold hover:text-gray-700"">{menuToggleText}</a>
NavigationMenu:
<nav class=""lg:flex lg:flex-wrap lg:justify-center""><ul class=""lg:flex lg:flex-wrap"">{children} </ul></nav>"
Tweet edit button for post revisions,"description:
The UI should be a small, circular button with a pencil icon, indicating that it's an edit button for tweet revisions. It should be responsive, accessible, and SEO-friendly.
components:
- EditButton: A standalone component that displays an edit icon and allows users to edit a tweet revision.
html:
<div class=""flex justify-end mb-2""><EditButton/></div>
component html:
EditButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded-full""><i class=""fas fa-pencil-alt text-sm"" aria-label=""Edit tweet revision""></i></button>"
Integrated Wiki and Documentation Editor,"description:
The UI should be a responsive, mobile-first, and accessible Integrated Wiki and Documentation Editor. It should have a navigation sidebar, a primary content area, and a floating action button for creating new pages. The navigation sidebar should display a list of wiki pages, with the ability to search and filter pages. The primary content area should display the selected wiki page's content, with a toolbar for editing and formatting options.
components:
- WikiSidebar: (standalone): a navigation sidebar component that displays a list of wiki pages
- WikiPageList: (standalone): a component that displays a list of wiki pages
- WikiPageSearch: (standalone): a search input component for searching wiki pages
- WikiPageFilter: (standalone): a filter component for filtering wiki pages
- WikiPageContent: (takes children): a component that displays the selected wiki page's content
- EditorToolbar: (standalone): a toolbar component for editing and formatting options
- FloatingActionButton: (standalone): a floating action button component for creating new pages
html:
<div class=""flex h-screen""><WikiSidebar/><div class=""flex flex-grow""><WikiPageContent><!-- Wiki page content goes here --></WikiPageContent><EditorToolbar/></div><FloatingActionButton/></div>
component html:
WikiSidebar:
<div class=""w-64 h-screen p-4 bg-gray-100""><WikiPageSearch/><WikiPageFilter/><WikiPageList/></div>
WikiPageList:
<ul class=""list-none p-0 m-0"">{wiki_pages.map((page) =>( <li class=""py-2 px-4 hover:bg-gray-200""><a href={page.url}>{page.title}</a></li>))}</ul>
WikiPageSearch:
<input type=""search"" class=""w-full p-2 pl-10 text-sm"" placeholder=""Search wiki pages""/>
WikiPageFilter:
<select class=""w-full p-2 text-sm""><option value="""">All pages</option>{filters.map((filter) =>( <option value={filter.value}>{filter.label}</option>))}</select>
WikiPageContent:
<div class=""prose lg:prose-lg mx-auto"">{children}</div>
EditorToolbar:
<div class=""flex justify-end p-2""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Save </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Preview </button><!-- more toolbar buttons --></div>
FloatingActionButton:
<button class=""fixed bottom-4 right-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded shadow-md""><i class=""fas fa-plus""></i></button>"
"A loading animation component with a simple, spinning circle and a subtle fade-in effect","description:
The UI should consist of a spinning circle loading animation with a subtle fade-in effect. The circle should be a bright accent color to draw the user's attention. The animation should be smooth and continuous, with a consistent speed. The component should be responsive, scaling down on smaller screens while maintaining its circular shape.
components:
- LoadingSpinner: (Standalone): A spinning circle loading animation with a subtle fade-in effect.
html:
<div class=""flex justify-center h-screen""><LoadingSpinner/></div>
component html:
LoadingSpinner:
<div class=""animate-spin rounded-full border-[3px] border-solid border-gray-200 border-t-transparent w-12 h-12 mx-auto""><span class=""sr-only"">Loading...</span></div>"
A loading spinner with a circular motion and white color,"description:
The UI should be a simple, responsive loading spinner that indicates to the user that the application is loading. The spinner should be a circular motion with a white color to provide a clean and modern look. The spinner should scale down on smaller screens to ensure it remains visible and accessible.
components:
- LoadingSpinner: (Standalone): A circular loading spinner that rotates to indicate loading.
html:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
component html:
LoadingSpinner:
<div class=""w-12 h-12 border-4 border-solid border-white rounded-full animate-spin""/>"
Search bar for finding products,"description:
The UI should be a simple search bar with a input field and a submit button. It should be responsive, mobile-first, and accessible.
components:
- SearchBar: standalone component that contains the search input field and submit button.
- SearchInput: standalone component that is a simple input field.
- SearchButton: standalone component that is a submit button.
html:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
component html:
SearchBar:
<div class=""flex items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search products""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
Customer Review Rating,"description:
A customer review rating component that displays a rating out of 5 stars, along with a brief review text. The component should be responsive and accessible.
components:
- RatingStars: (standalone): displays a rating out of 5 stars
- ReviewText: (standalone): displays a brief review text
- CustomerReview: (takes children): wraps the rating stars and review text
html:
<div class=""max-w-md md:max-w-lg lg:max-w-xl mx-auto p-4""><CustomerReview><RatingStars/><ReviewText/></CustomerReview></div>
component html:
RatingStars:
<div class=""flex items-center"">{starsFilled}<i class=""fas fa-star text-yellow-400""></i>{starsEmpty}<i class=""fas fa-star text-gray-400""></i></div>
ReviewText:
<p class=""text-sm"">{reviewText}</p>
CustomerReview:
<div class=""flex flex-col md:flex-row justify-between mb-4"">{children}</div>"
Loading Animations/Spinners,"description:
The UI should display a loading animation/spinner that indicates to the user that the system is processing information. The animation should be responsive, mobile-first, and accessible.
components:
- LoadingSpinner: A standalone component that displays a loading animation.
html:
<div class=""flex justify-center""><LoadingSpinner/></div>
component html:
LoadingSpinner:
<div class=""rounded-full border-2 border-gray-500 h-12 w-12 animate-spin""><div class=""rounded-full border-2 border-gray-500 h-10 w-10 mx-auto""></div></div>"
Gradient (radial) controls,"description:
- The UI will consist of several radial gradient controlled elements that demonstrably adjust their background gradients as per user input.
   - These elements will showcase gradient effects such as color intensity and direction changes.
   - Additionally, there should be labels or indicators for each control to explain what aspect of the gradient they adjust (e.g., color, intensity).
components:
- GradientDisplay: (Standalone)**: Displays the radial gradient effect as per current settings.
- ControlLabel: (Standalone)**: Displays a label next to each control explaining its function.
html:
<div class=""flex flex-col items-center justify-center space-y-4 p-4""><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for color control --><GradientDisplay/></div><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for intensity control --><GradientDisplay/></div><div class=""p-2""><ControlLabel/><!-- Radial gradient display with label for direction control --><GradientDisplay/></div></div>
component html:
GradientDisplay:
<div class=""w-64 h-64 rounded-full"" style=""background: radial-gradient(circle, {primary_color}, {secondary_color});""></div>
ControlLabel:
<label class=""block text-sm text-gray-600 mb-1"">{label_text}</label>"
Appointment scheduler,"description:
The UI should be a responsive, mobile-first design that displays a calendar and a list of available time slots for an appointment. The user can select a date and time, and then submit the appointment request.
components:
- CalendarHeader: a standalone component that displays the current month and navigation arrows.
- CalendarGrid: a standalone component that displays a grid of days in the current month.
- TimeSlotList: a component that takes children, which displays a list of available time slots.
- TimeSlot: a component that takes children, which displays a single time slot.
- AppointmentForm: a component that takes children, which displays a form to submit an appointment request.
html:
<div class=""flex flex-col h-screen""><CalendarHeader/><CalendarGrid/><TimeSlotList><TimeSlot>8:00 AM - 9:00 AM</TimeSlot><TimeSlot>9:00 AM - 10:00 AM</TimeSlot><!-- more time slots --></TimeSlotList><AppointmentForm><label for=""name"">Name:</label><input type=""text"" id=""name""/><label for=""email"">Email:</label><input type=""email"" id=""email""/><button type=""submit"">Submit</button></AppointmentForm></div>
component html:
CalendarHeader:
<div class=""flex justify-between mb-4""><button	class=""text-gray-600 hover:text-gray-900"">«</button><h2 class=""text-lg"">{current_month}</h2><button	class=""text-gray-600 hover:text-gray-900"">»</button></div>
CalendarGrid:
<div class=""grid grid-cols-7 gap-4 mb-4"">{days_in_month}.map((day, index) =>( <div key={index} class=""text-center"">{day}</div>))}</div>
TimeSlotList:
<ul class=""list-none mb-4"">{children}</ul>
TimeSlot:
<li class=""py-2 border-b"">{children}</li>
AppointmentForm:
<form class=""flex flex-col"">{children}</form>"
Hero section background image with a subtle gradient effect,"description:
The hero section should have a background image with a subtle gradient effect to add depth and dimension. The gradient effect should be responsive and adapt to different screen sizes. The background image should be high-quality and related to the content of the hero section. The hero section should have a clear call-to-action (CTA) to guide the user's attention. The UI should be responsive, accessible, and easy to navigate on different screen sizes.
components:
- HeroSection: (Takes Children): The hero section component contains a background image with a subtle gradient effect and a call-to-action. On small screens, the background image should be centered and scaled to fit the screen. On medium and large screens, the background image should be full-bleed with a subtle gradient effect. The CTA button should be prominently displayed on all screen sizes.
- CallToAction: (Standalone): The call-to-action button component should be a prominent button that guides the user's attention. The button should be accessible and easy to click on all screen sizes.
html:
<div class=""h-screen w-full flex items-center justify-center""><HeroSection><CallToAction/></HeroSection></div>
component html:
HeroSection:
<section class=""h-screen w-full relative""><div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style=""`background-image: url({backgroundImageUrl}); background-blend-mode: multiply;""}><div class=""absolute top-0 left-0 h-full w-full bg-gradient-to-r from-gray-500 to-gray-700 opacity-50""></div></div><div class=""container mx-auto p-4"">{children} </div></section>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaText}</button>"
Call to Action Button Color,"description:
The UI should have a prominent call to action (CTA) button that is responsive and has an appealing color that stands out but also aligns with accessibility standards for color contrast.
components:
- ButtonComponent: A standalone component that represents a button. This button will be styled with TailwindCSS to be visually distinct and accessible.
html:
<div class=""flex justify-center items-center h-screen""><ButtonComponent/></div>
component html:
ButtonComponent:
<button type=""button"" class=""text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"">Click Me! </button>"
"A footer with a dark background and white text, including links to documentation, support, and contact pages","description:
The footer should have a dark background with white text, making it easily readable. The links to documentation, support, and contact pages should be prominently displayed. The footer should be responsive and scalable on different screen sizes.
components:
- Footer: (Standalone): The footer component will contain links to documentation, support, and contact pages. It should have a dark background with white text.
html:
<footer class=""bg-dark text-white p-4 md:p-8""><Footer/></footer>
component html:
Footer:
<div class=""flex flex-wrap justify-center mb-4""><a href=""{documentationUrl}"" class=""text-white hover:text-gray-200"">Documentation</a><span class=""mx-4"">|</span><a href=""{supportUrl}"" class=""text-white hover:text-gray-200"">Support</a><span class=""mx-4"">|</span><a href=""{contactUrl}"" class=""text-white hover:text-gray-200"">Contact</a></div><p class=""text-sm text-gray-400"">{copyrightYear} {appName}. All rights reserved.</p>"
A related courses component with a title and a list of course cards,"description:
The UI should have a clear title that stands out, followed by a list of course cards that are easily readable and accessible. The layout should be responsive, with the course cards adjusting their size and layout according to the screen size. On smaller screens, the course cards should be stacked vertically, while on larger screens, they should be arranged in a grid.
components:
- RelatedCourses: (Takes Children): A container component that holds the title and list of course cards.
- CourseCard: (Standalone): A single course card that displays course information.
html:
<RelatedCourses><h2>Related Courses</h2><ul><CourseCard/><CourseCard/><!-- Add more CourseCard components here --></ul></RelatedCourses>
component html:
RelatedCourses:
<div class=""max-w-md mx-auto p-4 lg:p-8 xl:max-w-lg"">{children}</div>
CourseCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4 lg:mb-0 lg:w-1/2 xl:w-1/3""><h3 class=""text-lg font-bold"">{course_title}</h3><p>{course_description}</p><p><span class=""text-lg font-bold"">{course_duration}</span>hours</p></div>"
Table cells,"description:
The UI should be a table cell that can be used to display data in a table. It should be responsive, mobile-first, accessible, SEO-friendly, well-documented, and as simple as possible.
components:
- TableCell: (standalone): a single table cell that can contain text or other elements
- Table: (takes children): a table that contains multiple table cells
html:
<table class=""table-auto border-collapse w-full""><tr><TableCell/><TableCell/></tr></table>
component html:
TableCell:
<td class=""px-4 py-2"">{cell_content}</td>
Table:
<table class=""table-auto border-collapse w-full""><tbody>{children} </tbody></table>"
YouTube/Vimeo Embeds,"description:
The UI should display an embedded YouTube or Vimeo video player with a responsive width and a fixed aspect ratio. The video player should be centered on the page.
components:
- VideoEmbed: A standalone component that displays an embedded video player.
- AspectRatioWrapper: A component that wraps the video player and maintains a fixed aspect ratio. It takes children.
html:
<div class=""flex justify-center""><AspectRatioWrapper><VideoEmbed/></AspectRatioWrapper></div>
component html:
VideoEmbed:
{/* YouTube or Vimeo iframe */}<iframe src={video_url} frameBorder=""0"" allowFullScreen allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture""/>
AspectRatioWrapper:
<div class=""relative pb-16/9"" style=""maxWidth: 100vw; maxHeight: 80vh;""}>{children}</div>"
Send and save draft buttons,"description:
The UI should have two buttons, ""Send"" and ""Save Draft"", side by side, with sufficient padding and margin to make them easily clickable. The buttons should be responsive, mobile-first, and accessible.
components:
- SendButton: a standalone button component.
- SaveDraftButton: a standalone button component.
- ButtonGroup: a component that takes two children.
html:
<div class=""flex flex-wrap justify-center mb-4""><ButtonGroup><SendButton/><SaveDraftButton/></ButtonGroup></div>
component html:
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
SaveDraftButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Save Draft</button>
ButtonGroup:
<div class=""flex justify-center mb-4"">{children}</div>"
Certifications or licenses section with issuers,"description:
The Certifications or Licenses section should display a list of certificates or licenses with their corresponding issuers, dates, and credential IDs. The section should be organized in a clean and readable manner, with each certification or license displayed in a separate row. The issuer, date, and credential ID should be displayed in a concise and easily readable format.
components:
- CertificationCard: (standalone): Displays a single certification or license with its issuer, date, and credential ID.
- CertificationList: (takes children): Container component for a list of certifications or licenses.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Certifications and Licenses</h2><CertificationList><CertificationCard/><CertificationCard/><!-- Add more CertificationCard components here --></CertificationList></section>
component html:
CertificationCard:
<div class=""flex justify-between mb-4""><div><h3 class=""text-lg font-bold"">{issuer_name}</h3><p>{credential_id}</p></div><div class=""text-gray-600""><p>{issue_date}</p></div></div>
CertificationList:
<ul class=""list-none"">{children}</ul>"
Loading indicators,"description:
The UI should display a loading indicator that informs the user that the application is processing or loading data. The indicator should be a spinning wheel or a progress bar that appears when the application is fetching data or performing a lengthy operation.
components:
- LoadingIndicator: Standalone component that displays a loading animation.
html:
<div class=""flex justify-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""inline-block animate-spin""><div class=""border-4 border-gray-200 border-solid rounded-full w-12 h-12"" role=""progressbar"" aria-valuetext=""{loading_text}""></div></div>"
Send button to post new tweet,"description:
A call-to-action button to post a new tweet, responsive and accessible, with a blue background and white text, with a paper airplane icon indicating sending a tweet.
components:
- TweetButton: (standalone) - a self-contained button component with a paper airplane icon and text ""Tweet""
html:
<div class=""flex justify-center mb-4""><TweetButton/></div>
component html:
TweetButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2""></i>{tweet_button_text}</button>"
Header with a deep blue background and white text,"description:
The UI should have a prominent header with a deep blue background and white text, making it stand out and easy to read. The header should scale well on different screen sizes, with the text size adjusting accordingly.
components:
- HeaderBar: (Standalone): A header component with a deep blue background and white text, containing the title of the page.
html:
<div class=""h-screen flex flex-col""><HeaderBar/><!-- rest of the UI components --></div>
component html:
HeaderBar:
<header class=""bg-deep-blue h-16 sm:h-20 md:h-24 lg:h-32 xl:h-40 text-white p-4 flex justify-center""><h1 class=""text-xl sm:text-2xl md:text-3xl lg:text-4xl xl:text-5xl"">{header_title}</h1></header>"
Sticky sidebar,"description:
The UI should have a sticky sidebar that remains fixed on the screen as the user scrolls. The sidebar should be responsive and adapt to different screen sizes.
components:
- Sidebar: A standalone component that represents the sticky sidebar.
- MainContent: A component that takes children, representing the main content of the page.
html:
<div class=""flex h-screen""><Sidebar/><MainContent><!-- main content goes here --></MainContent></div>
component html:
Sidebar:
<aside class=""w-64 bg-gray-100 h-screen sticky top-0 overflow-y-auto hidden md:block""><!-- sidebar content goes here --></aside>
MainContent:
<main class=""flex-1 p-4"">{children}</main>"
Bus ticket booking form,"description:
The UI should resemble a simple bus ticket booking form with input fields for passenger details, travel dates, and bus route selection. The form should be responsive, mobile-friendly, and easy to navigate.
components:
- PassengerDetails: (standalone): A section to input passenger details (name, email, phone number)
- TravelDetails: (standalone): A section to input travel dates and bus route selection
- BookingButton: (standalone): A call-to-action button to submit the booking form
- FormError: (takes children): A component to display error messages (if any)
html:
<div class=""max-w-md mx-auto p-4 pt-6 mb-4""><h1 class=""text-3xl font-bold mb-4"">Book Your Bus Ticket</h1><PassengerDetails/><TravelDetails/><BookingButton/><FormError>{error_message}</FormError></div>
component html:
PassengerDetails:
<div class=""mb-4""><label for=""name"" class=""block mb-2"">Name:</label><input type=""text"" id=""name"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""email"" class=""block mb-2"">Email:</label><input type=""email"" id=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""phone"" class=""block mb-2"">Phone Number:</label><input type=""tel"" id=""phone"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
TravelDetails:
<div class=""mb-4""><label for=""from"" class=""block mb-2"">From:</label><input type=""text"" id=""from"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""to"" class=""block mb-2"">To:</label><input type=""text"" id=""to"" class=""w-full p-2 pl-10 text-sm text-gray-700""/><label for=""date"" class=""block mb-2"">Travel Date:</label><input type=""date"" id=""date"" class=""w-full p-2 pl-10 text-sm text-gray-700""/></div>
BookingButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Ticket</button>
FormError:
<p class=""text-red-500"">{children}</p>"
Call-to-action button with a bright orange background and white text,"description:
The UI should have a bright orange call-to-action button with white text, making it stand out and grabbing the user's attention. The button should be large enough to be easily clickable on mobile devices and small enough to fit comfortably on larger screens.
components:
- CallToActionButton: (Standalone): A bright orange button with white text, encouraging the user to take action. On mobile devices, the button should be full-width and have a large font size. On larger screens, the button should be smaller and centered horizontally.
html:
<div class=""flex h-screen justify-center""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full sm:w-full md:w-1/2 lg:w-1/3 xl:w-1/4"">{call_to_action_text}</button>"
Stencil Portals/Masking,"description:
The UI should display a rectangular portal with a masked background, allowing a smaller rectangular area to be visible through a circular ""window"". The portal should have a subtle shadow and a slight border radius. The masked area should be a solid color or a subtle gradient.
components:
- PortalMask: - standalone - Represents the masked background.
- PortalWindow: - standalone - Represents the circular ""window"" through which the background is visible.
html:
<div class=""relative w-full h-screen""><PortalMask/><PortalWindow/></div>
component html:
PortalMask:
<div class=""absolute top-0 left-0 w-full h-full bg-gray-200"" aria-hidden=""true""><!-- masked background --></div>
PortalWindow:
<div class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 rounded-full bg-white shadow-md""><!-- circular ""window"" --><div class=""w-full h-full bg-{portal_window_background} rounded-full""></div></div>"
Hashtag and @Mention Links,"description:
The UI should display a list of hashtag and @mention links, with each link displaying a unique identifier (e.g., #hashtag or @username). The links should be styled differently to distinguish between hashtags and @mentions.
components:
- HashtagLink: a standalone component displaying a hashtag link.
- MentionLink: a standalone component displaying an @mention link.
- LinkList: a component that takes children, displaying a list of hashtag and @mention links.
html:
<div class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold"">Links</h2><LinkList><HashtagLink/><!-- displays a hashtag link --><MentionLink/><!-- displays an @mention link --><!-- add more links as needed --></LinkList></div>
component html:
HashtagLink:
<a href `{hashtag_url}` class=""text-blue-600 hover:text-blue-900"">{hashtag_text}</a>
MentionLink:
<a href `{mention_url}` class=""text-orange-600 hover:text-orange-900"">@{username}</a>
LinkList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
A grid of movie/TV show posters with a white border and a dark grey background,"description:
The UI should be a grid of movie/TV show posters with a white border and a dark grey background. The posters should be arranged in a responsive grid that scales to fit different screen sizes. On smaller screens, the grid should display fewer columns, and on larger screens, it should display more columns. The posters should have a slight shadow to give them depth.
components:
- PosterGrid: (Takes Children): A responsive grid that displays a collection of `Poster` components. On smaller screens, it should display 2 columns, on medium screens 3 columns, and on larger screens 4 columns.
- Poster: (Standalone): A single movie/TV show poster with a white border and a dark grey background.
html:
<div class=""h-screen bg-darkgrey""><PosterGrid><!-- Posters will be rendered here --></PosterGrid></div>
component html:
PosterGrid:
<div class=""grid gap-4 lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"">{children}</div>
Poster:
<div class=""bg-white border-2 border-white shadow-md p-2""><img src=""{poster_url}"" alt=""{poster_alt_text}"" class=""w-full h-full object-cover""/><h2 class=""text-lg font-bold"">{title}</h2></div>"
A profile page component with:,"description:
The UI should have a clean and modern design, with a prominent profile picture and clear hierarchy of information. The layout should be responsive and adapt to different screen sizes.
components:
- UserProfile: (Takes Children): This component represents the entire profile page. It contains the profile picture, bio, and other information.
- ProfilePicture: (Standalone): This component displays the user's profile picture.
- Bio: (Takes Children): This component displays the user's bio information.
- UserInfo: (Takes Children): This component displays additional user information, such as their location and occupation.
- SocialMediaLinks: (Takes Children): This component displays links to the user's social media profiles.
html:
<UserProfile><ProfilePicture/><Bio>{bio_text}</Bio><UserInfo><p>{location}</p><p>{occupation}</p></UserInfo><SocialMediaLinks><a href={twitter_url}>Twitter</a><a href={facebook_url}>Facebook</a><a href={linkedin_url}>LinkedIn</a></SocialMediaLinks></UserProfile>
component html:
UserProfile:
<div class=""flex flex-col mx-auto p-4 lg:p-6 lg:max-w-md"">{children}</div>
ProfilePicture:
<img class=""rounded-full w-48 h-48 lg:w-64 lg:h-64"" src={profile_picture_url} alt=""Profile Picture""/>
Bio:
<div class=""text-lg lg:text-xl"">{children}</div>
UserInfo:
<div class=""flex flex-col text-sm lg:text-base"">{children}</div>
SocialMediaLinks:
<ul class=""flex flex-wrap justify-center mb-4 lg:mb-6"">{children}</ul>"
Profile avatar dropdown,"description:
A responsive profile avatar dropdown with a profile picture, username, and a dropdown menu with options.
components:
- ProfileAvatarDropdown: Standalone component that contains the profile picture, username, and dropdown menu.
- DropdownItem: Takes children (e.g. dropdown item text).
html:
<nav class=""flex justify-end""><ProfileAvatarDropdown/></nav>
component html:
ProfileAvatarDropdown:
<div class=""relative inline-block""><img src={profile_picture_url} alt={username} class=""h-10 w-10 rounded-full cursor-pointer""/><span class=""ml-2 text-sm font-medium"">{username}</span><ul class=""absolute right-0 mt-2 w-48 bg-white rounded shadow-md""><li><DropdownItem>Settings</DropdownItem></li><li><DropdownItem>Logout</DropdownItem></li></ul></div>
DropdownItem:
<li class=""px-4 py-2 hover:bg-gray-100"">{children}</li>"
Filters and Sorting,"description:
The UI should display a filter and sorting component that allows users to filter and sort a list of items. The filter section should have a dropdown menu with options to filter by category, and the sorting section should have a dropdown menu with options to sort by name, date, or rating. The component should be responsive, mobile-first, and accessible.
components:
- FilterDropdown: - standalone component
- SortDropdown: - standalone component
- FiltersAndSortingContainer: - container component that takes children
html:
<div class=""max-w-md mx-auto p-4""><FiltersAndSortingContainer><FilterDropdown/><SortDropdown/></FiltersAndSortingContainer></div>
component html:
FilterDropdown:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 py-2 px-4 rounded"">{filterPlaceholder}</button><ul class=""absolute z-10 w-full bg-white shadow-md""><li><a href=""#"" class=""block py-2 px-4"">{filterOption1}</a></li><li><a href=""#"" class=""block py-2 px-4"">{filterOption2}</a></li><!-- more filter options --></ul></div>
SortDropdown:
<div class=""relative inline-block""><button class=""bg-gray-100 hover:bg-gray-200 py-2 px-4 rounded"">{sortPlaceholder}</button><ul class=""absolute z-10 w-full bg-white shadow-md""><li><a href=""#"" class=""block py-2 px-4"">{sortOption1}</a></li><li><a href=""#"" class=""block py-2 px-4"">{sortOption2}</a></li><!-- more sort options --></ul></div>
FiltersAndSortingContainer:
<div class=""flex justify-between mb-4"">{children}</div>"
Download button,"description:
A responsive, mobile-first button with a download icon and text that indicates the file type.
components:
- DownloadButton: A standalone component that represents a button to download a file.
html:
<button class=""download-button""><DownloadButton/></button>
component html:
DownloadButton:
<span class=""flex items-center""><i class=""fas fa-download text-lg mr-2""></i><span class=""text-sm"">{file_type}</span><span class=""text-xs"">{file_size}</span></span>"
"Hero section with a high-quality background image of a popular game, overlaid with a tagline and call-to-action button","description:
The hero section should be visually striking, with a high-quality background image of a popular game. The tagline should be short, attention-grabbing, and easily readable. The call-to-action (CTA) button should be prominent and encourage the user to take action. The design should scale well on different screen sizes, with the background image adapting to fit the device width.
components:
- HeroBackground: (Standalone): A full-width, full-height container that holds the background image of the popular game.
- Tagline: (Standalone): A text element that displays a short, attention-grabbing phrase.
- CallToAction: (Standalone): A prominent button that encourages the user to take action.
- HeroContent: (Takes Children): A container that holds the tagline and call-to-action elements.
html:
<div class=""h-screen w-full relative""><HeroBackground/><HeroContent><Tagline/><CallToAction/></HeroContent></div>
component html:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center h-full w-full"" style=""backgroundImage: url({gameBackgroundImage});""}></div>
Tagline:
<h2 class=""text-4xl font-bold text-white"">{taglineText}</h2>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Get Started</button>
HeroContent:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center"">{children}</div>"
Blog Post Date Published,"description:
The UI should display the date a blog post was published, with a clean and minimal design that is responsive and accessible.
components:
- PublishedDate: A standalone component that displays the date a blog post was published.
html:
<footer class=""mb-4 text-sm text-gray-500""><PublishedDate/></footer>
component html:
PublishedDate:
<span class=""text-gray-500"">{published_date}</span>"
A category navigation component with thumbnails and titles,"description:
The category navigation component should display a list of categories with thumbnails and titles. Each category item should have a prominent thumbnail on the left and a title on the right. The thumbnail should be a small, square image that represents the category. The title should be a brief, descriptive text that indicates what the category is about.

On smaller screens, the category items should be stacked vertically to ensure readability and ease of use. On larger screens, the category items can be displayed horizontally in a grid layout to make the most of the available screen real estate.
components:
- CategoryNav: (Takes Children): The top-level navigation component that contains a list of `CategoryNavItem` components.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><CategoryNav><!-- CategoryNavItem components will be rendered here --></CategoryNav></div>
component html:
CategoryNav:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8"">{children}</div>"
Image displayed within the flow of text or content,"description:
The UI should display an image within the flow of text or content, likely in a blog post or article. The image should be responsive, mobile-friendly, and accessible.
components:
- InlineImage: A standalone component that displays an image within the flow of text or content.
html:
<div class=""max-w-md mx-auto""><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p><InlineImage/><p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p></div>
component html:
InlineImage:
<img src={image_url} alt={image_alt_text} class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto mb-4""/>"
Article summaries,"description:
The UI should display a list of article summaries, each consisting of a title, a brief description, and a link to the full article. The summaries should be responsive, readable, and visually appealing.
components:
- ArticleSummary: Standalone component to display a single article summary.
- ArticleList: Component that takes children, a list of `ArticleSummary` components.
html:
<section class=""max-w-lg mx-auto p-4 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Article Summaries</h1><ArticleList><ArticleSummary/><ArticleSummary/><!-- Add more ArticleSummary components here --></ArticleList></section>
component html:
ArticleSummary:
<article class=""mb-4 p-4 border-b border-gray-200""><h2 class=""text-lg font-bold"">{title}</h2><p class=""text-gray-600"">{description}</p><a href={link} class=""text-blue-600 hover:text-blue-900"">Read more</a></article>
ArticleList:
<ul class=""list-none mb-0"">{children}</ul>"
Rich Text Editors,"description:
The UI should resemble a minimalistic rich text editor, similar to a simplified Medium editor or the GitHub comment editor. It should have a toolbar with basic formatting options, a contenteditable div for editing, and a character count indicator.
components:
- ToolBar: (standalone) - The top toolbar with formatting options.
- Editor: (takes children) - The contenteditable div where the user can edit the text.
- CharacterCount: (standalone) - Displays the character count of the edited text.
html:
<div class=""flex flex-col h-screen overflow-y-auto""><ToolBar/><Editor><!-- The user can edit the text here -->{children}
</Editor><CharacterCount/></div>
component html:
ToolBar:
<div class=""bg-gray-100 py-2 px-4 flex justify-between""><button class=""text-gray-500 hover:text-gray-800""><!-- Bold formatting button --><i class=""fas fa-bold""></i></button><button class=""text-gray-500 hover:text-gray-800""><!-- Italic formatting button --><i class=""fas fa-italic""></i></button><!-- More formatting options... --></div>
Editor:
<div contentEditable=""true"" class=""px-4 py-2 w-full h-full overflow-y-auto"" aria-multiline=""true"" aria-label=""Rich text editor"">{children}</div>
CharacterCount:
<p class=""text-gray-500 text-sm"">{character_count} characters</p>"
"Circular progress indicator, often used for loading animations","description:
The UI should be a circular progress indicator with aLoader spinning animation. The circle should be incomplete when the progress is not 100%. The color scheme will be a calming blue.
components:
- CircularProgressIndicator: standalone
html:
<div class=""flex justify-center""><CircularProgressIndicator/></div>
component html:
CircularProgressIndicator:
<div class=""w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin""><div class=""w-full h-full border-4 border-blue-500 border-dashed rounded-full"" style=""`--progress: {progress}%;""}></div></div>"
Callout Box Shadow,"description:
The UI should be a callout box with a shadow effect, which is a rectangular box with a subtle shadow effect to give it a sense of depth. The callout box should be responsive and mobile-friendly.
components:
- CalloutBoxShadow: A standalone component that represents the callout box with a shadow effect.
html:
<div class=""max-w-md mx-auto mt-4 p-4 bg-white rounded shadow-md""><CalloutBoxShadow/></div>
component html:
CalloutBoxShadow:
<div class=""px-4 py-3""><p class=""text-lg font-bold"">{callout_title}</p><p class=""text-gray-600"">{callout_text}</p></div>"
"User profile information component, displaying the user's name, profile picture, and short bio","description:
The UI should display the user's profile picture, name, and short bio in a clean and concise manner. The profile picture should be circular and have a subtle shadow to give it depth. The user's name should be displayed prominently in a large, bold font, and the bio should be displayed in a smaller, readable font. The component should be responsive and scale well on different screen sizes.
components:
- UserProfilePicture: (Standalone): A circular profile picture with a subtle shadow.
- UserName: (Standalone): A bold, large font displaying the user's name.
- UserBio: (Standalone): A smaller, readable font displaying the user's short bio.
- UserProfileInfo: (Takes Children): A container component that holds the user's profile picture, name, and bio.
html:
<div class=""flex flex-col items-center py-4 md:flex-row md:justify-center lg:py-6""><UserProfileInfo><UserProfilePicture/><UserName/><UserBio/></UserProfileInfo></div>
component html:
UserProfilePicture:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""w-24 h-24 rounded-full shadow-md""/>
UserName:
<h2 class=""text-2xl font-bold"">{user_name}</h2>
UserBio:
<p class=""text-lg"">{user_bio}</p>
UserProfileInfo:
<div class=""flex flex-col items-center md:flex-row md:items-start"">{children}</div>"
Company Logo Icon,"description:
The UI should be a simple icon that displays the company logo. It should be responsive, mobile-first, and accessible.
components:
- CompanyLogoIcon: A standalone component that displays the company logo.
html:
/nav><CompanyLogoIcon/></nav>
component html:
CompanyLogoIcon:
<a href=""{homepage_url}""><img src=""{logo_url}"" alt=""Company Logo"" class=""w-8 h-8 md:w-10 md:h-10 rounded-full""/></a>"
Backdrops,"description:
The UI should display a backdrop with a blurred background image, a semi-transparent overlay, and a title header on top.
components:
- BackdropHeader: Standalone, displays the title header on top of the backdrop.
- BackdropImage: Standalone, displays the blurred background image.
- BackdropOverlay: Standalone, displays the semi-transparent overlay.
- BackdropContainer: Takes children, wraps the entire backdrop component.
html:
<div class=""max-w-md mx-auto p-4""><BackdropContainer><BackdropImage/><BackdropOverlay/><BackdropHeader/></BackdropContainer></div>
component html:
BackdropHeader:
<h1 class=""text-3xl font-bold"">{title}</h1>
BackdropImage:
<div class=""absolute inset-0 w-full h-full object-cover blur-md"" style=""backgroundImage: url({image_url});""}/>
BackdropOverlay:
<div class=""absolute inset-0 w-full h-full bg-gray-900 opacity-50""/>
BackdropContainer:
<div class=""relative h-screen"">{children}</div>"
Outlines (fill),"description:
The UI should display a list of outline points with fill colors. Each outline point should have a title, a fill color, and optional description.
components:
- OutlinePoint: standalone component representing a single outline point.
- OutlineList: component that takes children, representing the list of outline points.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Outline Points</h2><OutlineList><OutlinePoint/><OutlinePoint/><!-- Add more OutlinePoint components here --></OutlineList></div>
component html:
OutlinePoint:
<div class=""flex items-center mb-4""><div class=""w-4 h-4 bg-{fill_color} rounded-full mr-4""></div><div><h3 class=""text-md font-bold"">{title}</h3><p class=""text-gray-600 text-sm"">{description}</p></div></div>
OutlineList:
<ul class=""list-none m-0 p-0"">{children}</ul>"
"A product details component that displays a larger product image, detailed product description, and specifications","description:
The product details component should display a larger product image, detailed product description, and specifications in a clean and organized manner. The layout should scale well on different screen sizes, with the image taking up more space on smaller screens and the description and specifications taking up more space on larger screens. The design should use a consistent color palette with highlight colors to draw attention to important information. Shadows and gradients can be used to add depth and dimension to the UI.
components:
- ProductImage: (Standalone): Displays the larger product image.
- ProductDescription: (Takes Children): Displays the detailed product description.
- ProductSpecifications: (Takes Children): Displays the product specifications.
html:
<div class=""flex flex-wrap lg:flex-no-wrap justify-center mb-4""><ProductImage/><div class=""lg:w-1/2 xl:w-2/3 p-4""><ProductDescription>{children}</ProductDescription><ProductSpecifications>{children}</ProductSpecifications></div></div>
component html:
ProductImage:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full lg:w-1/2 xl:w-1/3 mb-4 rounded shadow-md""/>
ProductDescription:
<div class=""mb-4""><h2 class=""text-2xl font-bold"">{product_name}</h2><p>{children}</p></div>
ProductSpecifications:
<table class=""w-full mb-4""><tbody>{children} </tbody></table>"
"A horizontal list of category buttons (Politics, Entertainment, etc.) with a white background and dark text","description:
The UI should be a horizontal list of category buttons with a white background and dark text. The buttons should be equally spaced and have a subtle shadow to give them depth. The text should be centered within each button and be large enough to read comfortably on all screen sizes. The UI should scale well on different screen sizes, with the buttons becoming smaller on smaller screens.
components:
- CategoryBarButton: (Takes Children): A button component that displays a category label. It should have a white background, dark text, and a subtle shadow. On smaller screens, the text should be smaller and the padding should be reduced.
html:
<div class=""flex justify-center bg-white py-4""><CategoryBarButton>Politics</CategoryBarButton><CategoryBarButton>Entertainment</CategoryBarButton><CategoryBarButton>Sports</CategoryBarButton><!-- Add more category buttons here --></div>
component html:
CategoryBarButton:
<button class=""px-4 py-2 text-lg font-medium text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-lg shadow-md"">{children}</button>"
Tax calculator tool,"description:
The UI should be a simple, easy-to-use tax calculator that allows users to input their income and select their filing status to calculate their tax liability. The UI should be responsive, mobile-friendly, and accessible.
components:
- TaxCalculator: (standalone): The main tax calculator component that contains all the other components.
- IncomeInput: (standalone): A text input field for users to enter their income.
- FilingStatusSelect: (standalone): A dropdown select field for users to select their filing status.
- TaxResult: (standalone): A component that displays the calculated tax liability.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TaxCalculator/></div>
component html:
TaxCalculator:
<div class=""flex flex-col gap-4""><IncomeInput/><FilingStatusSelect/><TaxResult/></div>
IncomeInput:
<div class=""flex flex-col""><label class=""text-lg"" htmlFor=""income"">Income:</label><input type=""number"" id=""income"" class=""w-full p-2 pl-10 text-lg""/></div>
FilingStatusSelect:
<div class=""flex flex-col""><label class=""text-lg"" htmlFor=""filing-status"">Filing Status:</label><select id=""filing-status"" class=""w-full p-2 pl-10 text-lg""><option value=""single"">Single</option><option value=""married-jointly"">Married Filing Jointly</option><option value=""married-separately"">Married Filing Separately</option><option value=""head-of-household"">Head of Household</option></select></div>
TaxResult:
<div class=""text-lg font-bold"">Your tax liability is: {tax_liability}</div>"
"A footer component with a dark background, featuring links to social media, legal pages, and a newsletter signup","description:
The footer should be a dark background section with a contrasting light-colored text and accents. It should have three main sections: social media links, legal links, and a newsletter signup form. The social media links should be displayed horizontally on desktop and stacked on mobile. The legal links should be displayed horizontally on desktop and stacked on mobile. The newsletter signup form should be displayed below the social media and legal links on desktop and at the bottom on mobile.
components:
- Footer: (Takes Children): The container for the footer section.
- SocialMediaLinks: (Standalone): Displays links to social media platforms.
- LegalLinks: (Standalone): Displays links to legal pages.
- NewsletterSignup: (Standalone): Displays a form to sign up for a newsletter.
html:
<footer class=""bg-darkgray-900 h-screen pt-12 md:pt-20 lg:pt-24""><Footer><SocialMediaLinks/><LegalLinks/><NewsletterSignup/></Footer></footer>
component html:
Footer:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8"">{children}</div>
SocialMediaLinks:
<ul class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8""><li class=""mr-4 mb-2 md:mr-6 lg:mr-8""><a href={facebook_url} target=""_blank"" rel=""noopener noreferrer"" class=""text-white hover:text-blue-400 transition duration-300""><i class=""fab fa-facebook-f""/></a></li><li class=""mr-4 mb-2 md:mr-6 lg:mr-8""><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer"" class=""text-white hover:text-blue-400 transition duration-300""><i class=""fab fa-twitter""/></a></li><!-- Add more social media links here --></ul>
LegalLinks:
<ul class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8""><li class=""mr-4 mb-2 md:mr-6 lg:mr-8""><a href={terms_url} class=""text-white hover:text-blue-400 transition duration-300"">Terms of Service</a></li><li class=""mr-4 mb-2 md:mr-6 lg:mr-8""><a href={privacy_url} class=""text-white hover:text-blue-400 transition duration-300"">Privacy Policy</a></li><!-- Add more legal links here --></ul>
NewsletterSignup:
<form class=""flex flex-col w-full max-w-md mx-auto p-4 md:p-6 lg:p-8""><label for=""email"" class=""text-white"">Stay updated with our newsletter!</label><input type=""email"" id=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>"
"Area displaying recent notifications or alerts, often accessible via an icon or button","description:
The UI should display a dropdown list of recent notifications or alerts, accessible via a button or icon. The dropdown list should be responsive, easily accessible, and follow accessibility guidelines.
components:
- NotificationButton: A standalone component displaying an icon or text indicating the presence of notifications.
- NotificationDropdown: A component taking children, displaying a dropdown list of notifications.
- NotificationItem: A standalone component displaying a single notification.
html:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><NotificationButton/><NotificationDropdown><NotificationItem/><NotificationItem/><!-- Add more NotificationItem components here --></NotificationDropdown></button>
component html:
NotificationButton:
<!-- NotificationButton component --><button class=""flex items-center""><span class=""text-lg"">{icon}</span><span class=""text-xs"">{notification_count} new</span></button>
NotificationDropdown:
<!-- NotificationDropdown component --><div class=""absolute bg-white rounded shadow-md p-2""><h5 class=""text-lg font-bold"">{dropdown_title}</h5>{children}</div>
NotificationItem:
<!-- NotificationItem component --><div class=""px-4 py-2 hover:bg-gray-100""><p class=""text-sm"">{notification_text}</p><span class=""text-xs text-gray-500"">{notification_time}</span></div>"
Contact list with details,"description:
The UI should display a list of contacts with their names, emails, and phone numbers. Each contact should be shown in a separate row with a clean and minimalistic design. The list should be responsive, easy to read, and accessible on different devices.
components:
- ContactList: (takes children): A container for the list of contacts.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""divide-y""><ContactList><!-- contact items will be inserted here --></ContactList></ul></div>
component html:
ContactList:
<ul class=""divide-y"">{children}</ul>"
Product Feature List,"description:
The UI should be a list of product features, with each feature having a title, description, and optional icon. The list should be responsive, with each feature taking up the full width on mobile devices and being arranged in a grid on larger screens.
components:
- FeatureList: A component wrapping a list of `FeatureItem`s, taking in a list of features as children.
html:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4""><FeatureList><!-- List of features goes here --></FeatureList></div></div>
component html:
FeatureList:
<div class=""flex flex-wrap"">{children}</div>"
Meter,"description:
The UI will feature a simple meter component that visually represents a value as a proportion of a total. This is typically used to display statistics like disk usage, survey results, or skill levels in a graphical format. The meter should be horizontally styled with labels or markers for clarity.
components:
- MeterLabel: Standalone component, which displays text related to the meter (such as the title or percentage).
- MeterBar: Standalone component, which visually represents the value by varying its width according to the percentage.
html:
<div class=""flex flex-col space-y-2 p-4""><MeterLabel/><MeterBar/></div>
component html:
MeterLabel:
<div class=""text-sm font-medium text-gray-700"">{label_text}</div>
MeterBar:
<div class=""w-full bg-gray-200 rounded-full overflow-hidden""><div class=""bg-blue-600 h-2 rounded-full"" style=""width: {percentage_value}%;""></div></div>"
Product Feature Icon Size,"description:
The UI should display a product feature icon with a specific size. The icon should be responsive and accessible.
components:
- ProductFeatureIcon: A standalone component that displays an icon with a specific size.
html:
<div class=""flex justify-center mb-4""><ProductFeatureIcon/></div>
component html:
ProductFeatureIcon:
<i class=""fas fa-{icon_type} text-{icon_color} text-{icon_size}""></i>"
"A search bar component with a simple, rounded input field and a magnifying glass icon","description:
The search bar component should have a simple, rounded input field with a magnifying glass icon on the right side. The input field should be the main focus of the component, with the magnifying glass icon serving as a visual cue for searching. The component should be responsive and adapt to different screen sizes.
components:
- SearchBar: (Takes Children): A container component that holds the input field and the magnifying glass icon.
html:
<SearchBar><!-- input field and magnifying glass icon will be rendered here --></SearchBar>
component html:
SearchBar:
<div class=""flex flex-wrap items-center justify-between bg-white dark:bg-gray-800 rounded-md shadow-md p-2""><input type=""search"" class=""w-full lg:w-3/4 xl:w-2/3 pr-4 pl-10 text-lg text-gray-700 dark:text-gray-200"" placeholder=""Search...""><span class=""text-gray-500 dark:text-gray-400 text-lg"">{/* magnifying glass icon will be rendered here */}</span>{children}</div>"
Countdown controls,"description:
The UI should display a countdown timer with controls to play, pause, and reset the timer. The timer should display the time in hours, minutes, and seconds. The play and pause buttons should toggle between playing and pausing the timer, and the reset button should reset the timer to its initial state.
components:
- CountdownTimer: Standalone component that displays the time in hours, minutes, and seconds.
- PlayPauseButton: Standalone component that toggles between play and pause states.
- ResetButton: Standalone component that resets the timer to its initial state.
- CountdownControls: Component that wraps the PlayPauseButton and ResetButton, takes children.
html:
<div class=""flex flex-col gap-4""><CountdownTimer/><CountdownControls><PlayPauseButton/><ResetButton/></CountdownControls></div>
component html:
CountdownTimer:
<div class=""text-3xl font-bold"">{hours}:{minutes}:{seconds}</div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{playPauseText}</button>
ResetButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Reset</button>
CountdownControls:
<div class=""flex gap-2"">{children}</div>"
"A ""Pet Care Tips"" section with a grid of illustrated cards, each with a title and brief text","description:
The UI should be a responsive grid of illustrated cards, each showcasing a pet care tip. The cards should be visually appealing, with a clear title and brief text. The layout should scale well on different screen sizes, with a maximum of 2-3 cards per row on larger screens and 1 card per row on smaller screens. The cards should have a subtle shadow and gradient effect to give them depth and dimension.
components:
- PetCareTipsGrid: (Takes Children): This component represents the grid of pet care tip cards. It should be a responsive grid container that adapts to different screen sizes.
html:
<section class=""container mx-auto p-4 lg:p-6""><h2 class=""text-3xl font-bold mb-4"">Pet Care Tips</h2><PetCareTipsGrid><!-- Child components will be rendered here --></PetCareTipsGrid></section>
component html:
PetCareTipsGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4"">{children}</div>"
Dropdown menus,"description:
The UI consists of a dropdown menu button that users can click or tap to reveal a list of options. Each option is selectable, and the dropdown list will hide after a selection is made or if the user clicks outside the dropdown. The button should display the currently selected option or a default placeholder if no option is selected.
components:
- DropdownButton: (Standalone) - This component represents the button that users interact with to toggle the dropdown menu.
- DropdownMenu: (Takes children) - This is the container for the dropdown items. It should only appear when the DropdownButton is activated.
html:
<div class=""relative""><DropdownButton/><DropdownMenu><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 1</a><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 2</a><a href=""#"" class=""block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"">Option 3</a></DropdownMenu></div>
component html:
DropdownButton:
<button class=""bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50"">{selected_option} </button>
DropdownMenu:
<div class=""absolute mt-2 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5"">{children} </div>"
"Customer photo component that renders a small, rounded photo of the customer","description:
The customer photo component should be a small, rounded photo of the customer that fits nicely on any screen size. On smaller screens, the photo should be smaller and more circular, while on larger screens, it can be slightly larger and more rounded at the corners. The photo should have a subtle shadow to give it some depth.
components:
- CustomerPhoto: (Standalone): A small, rounded photo of the customer.
html:
<!-- The customer photo component is used standalone --><CustomerPhoto/>
component html:
CustomerPhoto:
<img src={customerPhotoUrl} alt={customerName} class=""rounded-full h-16 w-16 xl:h-20 xl:w-20 shadow-md""/>"
Social Sharing Button,"description:
- The UI should feature a social sharing button that is visually appealing and easily recognizable. It should include an icon that represents the social platform (e.g., Twitter, Facebook) and optionally, some text such as ""Share"" or ""Tweet"". The button should be styled to stand out but also feel cohesive with most website designs.
components:
- SocialButton: Standalone component. Represents a clickable button designed for sharing content on social media platforms. It includes an icon and text.
html:
<div class=""p-4""><!-- Social sharing button for sharing content --><SocialButton/></div>
component html:
SocialButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center""><span class=""mx-2"">Share on {social_network}</span></button>"
About me section with bio and profile picture,"description:
The UI should be a responsive, mobile-first About Me section with a profile picture and a brief bio. The profile picture should be circular and positioned above the bio. The bio should be a short paragraphs of text.
components:
- AboutMeContainer: Standalone component that wraps the entire About Me section.
- ProfilePicture: Standalone component that displays the profile picture.
- Bio: Standalone component that displays the bio text.
html:
<div class=""max-w-md mx-auto p-4""><AboutMeContainer/></div>
component html:
AboutMeContainer:
<div class=""flex flex-col items-center md:flex-row""><ProfilePicture/><Bio/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""{profile_picture_alt}"" class=""w-24 h-24 rounded-full mb-4 md:mr-4 md:mb-0""/>
Bio:
<p class=""text-lg"">{bio_text}</p>"
Chart Builder: Visualize data trends,"description:
The UI should be a responsive, mobile-first chart builder that allows users to visualize data trends. It should have a simple and clean design, with a prominent chart area and accessible interactive elements.
components:
- ChartHeader: A standalone component that displays the chart title and a dropdown menu for selecting the chart type.
- ChartCanvas: A standalone component that renders the chart using a third-party library (not included in this response).
- DataSelector: A component that takes children and allows users to select the data to display in the chart.
- AxisLabels: A standalone component that displays the axis labels for the chart.
- Legend: A standalone component that displays the legend for the chart.
html:
<div class=""flex flex-col h-screen overflow-hidden""><ChartHeader/><div class=""flex flex-grow overflow-hidden""><DataSelector><!-- data selector options will be rendered here --></DataSelector><div class=""flex-grow""><ChartCanvas/><AxisLabels/><Legend/></div></div></div>
component html:
ChartHeader:
<header class=""bg-white py-4 shadow-md""><h2 class=""text-lg"">{chart_title}</h2><div class=""relative""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Chart Type</button><ul class=""absolute bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">Line Chart</a></li><li><a href=""#"" class=""block py-2 px-4"">Bar Chart</a></li><!-- more chart types --></ul></div></header>
ChartCanvas:
<div class=""flex-grow h-full""><!-- chart will be rendered here --></div>
DataSelector:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Select Data</h3><ul class=""list-none mb-4"">{children} </ul></div>
AxisLabels:
<div class=""flex justify-between mb-4""><p class=""text-sm"">{x_axis_label}</p><p class=""text-sm"">{y_axis_label}</p></div>
Legend:
<div class=""bg-white py-4 pl-4 pr-2""><h3 class=""text-lg"">Legend</h3><ul class=""list-none mb-4""><!-- legend items will be rendered here --></ul></div>"
User Profile and Reputation System,"description:
The UI should display a user's profile information, including their username, profile picture, reputation score, and badges. The reputation score should be prominently displayed, and the badges should be displayed in a grid or list.
components:
- UserProfileHeader: Standalone component that displays the user's profile picture and username.
- ReputationScore: Standalone component that displays the user's reputation score.
- BadgeGrid: Component that takes children, which are `Badge` components.
- Badge: Standalone component that displays a single badge.
html:
<div class=""flex justify-center""><UserProfileHeader/><div class=""ml-4""><ReputationScore/><BadgeGrid><Badge/><Badge/><!-- More badges here --></BadgeGrid></div></div>
component html:
UserProfileHeader:
<div class=""flex items-center""><img src=""{profile_picture_url}"" alt=""Profile Picture"" class=""w-12 h-12 rounded-full""/><h2 class=""ml-2 text-lg"">{username}</h2></div>
ReputationScore:
<h3 class=""text-lg font-bold"">{reputation_score} Reputation</h3>
BadgeGrid:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
Badge:
<li class=""mr-2 mb-2""><img src=""{badge_image_url}"" alt=""Badge"" class=""w-8 h-8""/><span class=""text-sm"">{badge_name}</span></li>"
Comment controls,"description:
The UI should display a set of comment controls, including a textarea for writing a comment, a button to submit the comment, and an optional cancel button.
components:
- CommentInput: a standalone component that contains a textarea for writing a comment.
- SubmitButton: a standalone component that displays a submit button.
- CancelButton: a standalone component that displays a cancel button. Optional.
html:
<div class=""flex flex-wrap justify-center mt-4""><CommentInput/><SubmitButton/><CancelButton/></div>
component html:
CommentInput:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{placeholder_text}""></textarea>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>
CancelButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Cancel</button>"
Modal window,"description:
A modal window that appears on top of the main content, with a darkened background, a white overlay with a title, content, and a close button.
components:
- ModalOverlay: (standalone): The darkened background that covers the main content.
- ModalWindow: (takes children): The white overlay that contains the title, content, and close button.
- ModalHeader: (takes children): The top section of the modal window that displays the title.
- ModalCloseButton: (standalone): The button to close the modal window.
- ModalContent: (takes children): The main content area of the modal window.
html:
<div class=""fixed inset-0 z-50""><ModalOverlay/><div class=""fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 p-4 bg-white rounded-md shadow-md""><ModalWindow><ModalHeader><h2>{modal_title}</h2><ModalCloseButton/></ModalHeader><ModalContent>{children}
</ModalContent></ModalWindow></div></div>
component html:
ModalOverlay:
<div class=""fixed inset-0 bg-gray-700 bg-opacity-50""></div>
ModalWindow:
<div class=""bg-white rounded-md shadow-md"">{children}</div>
ModalHeader:
<div class=""flex justify-between mb-4"">{children}</div>
ModalCloseButton:
<button class=""text-gray-400 hover:text-gray-600 transition duration-300 ease-in-out focus:outline-none"" aria-label=""Close modal"">×</button>
ModalContent:
<div class=""px-4"">{children}</div>"
Testimonial text with a medium font size and light font weight,"description:
The UI should have a clean and minimalistic design, with a medium font size and light font weight to make the testimonial text easy to read. The text should be centered in a container with a subtle background color and a slight shadow to give it a soft, elevated look. On smaller screens, the text should be smaller and centered to fit the screen size.
components:
- Testimonial: (Takes Children): A container component that renders a testimonial text with a medium font size and light font weight.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8 bg-gray-100 shadow-md rounded""><Testimonial>{children}</Testimonial></div>
component html:
Testimonial:
<p class=""text-lg font-light text-center"">{children}</p>"
Customer Profile: View customer details,"description:
A simple profile page with a header, customer information, and a call-to-action (CTA) button.
components:
- CustomerProfileHeader: Standalone component to display the customer's profile picture and name.
- CustomerInfoSection: Takes children to display customer information such as email, phone number, and address.
- CallToActionButton: Standalone component to render a CTA button with a customizable label.
html:
<div class=""max-w-md mx-auto p-4 pt-6""><CustomerProfileHeader/><div class=""mt-4""><CustomerInfoSection><p><strong>Email:</strong>{customer_email}</p><p><strong>Phone:</strong>{customer_phone}</p><p><strong>Address:</strong>{customer_address}</p></CustomerInfoSection></div><div class=""mt-6""><CallToActionButton/></div></div>
component html:
CustomerProfileHeader:
<div class=""flex flex-col items-center""><img src={customer_profile_picture} class=""w-24 h-24 rounded-full"" alt=""Customer Profile Picture""/><h2 class=""text-lg font-bold"">{customer_name}</h2></div>
CustomerInfoSection:
<div class=""bg-white shadow-md p-4"">{children}</div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_label}</button>"
Threads,"description:
The UI should display a list of threads, with each thread showing a title, a brief description, and the number of replies. The list should be responsive, with a card-based layout on larger screens and a simple list on smaller screens.
components:
- ThreadCard: a standalone component representing a single thread, with a title, description, and reply count.
- ThreadList: a component that takes children, wrapping the list of threads.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ThreadList><ThreadCard/><ThreadCard/><!-- More ThreadCard components here --></ThreadList></div>
component html:
ThreadCard:
<div class=""bg-white rounded shadow-md p-4 mb-4""><h2 class=""text-lg font-bold"">{thread_title}</h2><p class=""text-gray-600"">{thread_description}</p><p class=""text-gray-500"">{reply_count} replies</p></div>
ThreadList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Header User Dropdown,"description:
The UI should display a dropdown menu when the user clicks on their profile picture or username in the header. The dropdown menu should contain links to the user's profile, account settings, and a logout button.
components:
- Header: A standalone component that contains the header layout with a profile dropdown.
- UserProfileDropdown: A component that takes children and renders a dropdown menu with links to the user's profile and account settings, and a logout button.
- DropdownLink: A standalone component that renders a single link inside the dropdown menu.
html:
<header class=""fixed top-0 left-0 w-full bg-white shadow-md""><nav class=""container mx-auto p-4 flex justify-between""><!-- logo and navigation --><a href=""#"" class=""text-xl"">Logo</a><ul class=""flex""><li><a href=""#"" class=""mr-4"">Link 1</a></li><li><a href=""#"" class=""mr-4"">Link 2</a></li></ul><!-- user profile dropdown --><div class=""relative""><UserProfileDropdown/></div></nav></header>
component html:
Header:
<nav class=""container mx-auto p-4 flex justify-between""><!-- logo and navigation --><a href=""#"" class=""text-xl"">Logo</a><ul class=""flex""><li><a href=""#"" class=""mr-4"">Link 1</a></li><li><a href=""#"" class=""mr-4"">Link 2</a></li></ul><!-- user profile dropdown --><div class=""relative""><UserProfileDropdown/></div></nav>
UserProfileDropdown:
<div class=""absolute top-full right-0 w-48 bg-white shadow-md""><ul>{children} </ul></div>
DropdownLink:
<li><a href=""#"" class=""block py-2 px-4"">{link_text}</a></li>"
Post Reply and Editing Tools,"description:
The UI should display a post reply section with editing tools. The editing tools should include a text area for typing a response, a submit button to post the reply, and editing tools such as bold, italic, and link. The UI should be responsive, mobile-first, and accessible.
components:
- PostReply: standalone, includes a text area and a submit button
- EditingTools: standalone, includes buttons for bold, italic, and link
- ReplySubmitButton: standalone, a submit button to post the reply
html:
<div class=""max-w-md mx-auto p-4""><PostReply/><EditingTools/><ReplySubmitButton/></div>
component html:
PostReply:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""reply"" name=""reply"" placeholder=""Type your reply...""></textarea>
EditingTools:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Bold </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Italic </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Link </button></div>
ReplySubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post Reply</button>"
A breadcrumb component that displays the current location in the website's hierarchy,"description:
The breadcrumb component should display a series of links that represent the current location in the website's hierarchy. The links should be separated by a forward slash (/) or a greater-than symbol (›) to indicate the hierarchy. The component should be responsive, with the links wrapping to a new line on smaller screens. The component should have a subtle background color and a slight shadow to give it depth. The text color should be a dark gray, with the current page highlighted in a prominent color.
components:
- Breadcrumb: (Takes Children): A container component that holds the breadcrumb links.
- BreadcrumbLink: (Takes Children): A single link in the breadcrumb trail. The link should be a child of the Breadcrumb component.
html:
<Breadcrumb><BreadcrumbLink>Home</BreadcrumbLink><BreadcrumbLink>Category</BreadcrumbLink><BreadcrumbLink>Subcategory</BreadcrumbLink><BreadcrumbLink>{currentPage}</BreadcrumbLink></Breadcrumb>
component html:
Breadcrumb:
<nav class=""bg-gray-100 rounded shadow-sm p-2 mb-4""><ol class=""list-none flex flex-wrap"">{children} </ol></nav>
BreadcrumbLink:
<li class=""mr-2""><a class=""text-gray-600 hover:text-gray-900"" href=""{href}"">{children}</a><span class=""text-gray-400 mx-2"">›</span></li>"
Thin border around course cards and other UI elements,"description:
The UI should have a clean and modern design with a focus on simplicity and readability. It should have a thin border around course cards and other UI elements to provide visual separation and hierarchy. The UI should also use a consistent color palette with highlight colors to draw attention to important elements. The layout should scale well on different screen sizes, with a mobile-first approach to ensure responsiveness and accessibility on smaller devices.
components:
- CourseList: (Takes Children): A list component that displays a collection of `CourseCard`s. It should have a maximum width and margin on larger screens to provide breathing room.
- CourseDetail: (Standalone): A component that displays detailed information about a course. It should have a thin border and a subtle shadow to provide depth.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Courses</h1><CourseList><!-- course cards will be rendered here --></CourseList></div>
component html:
CourseList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>
CourseDetail:
<div class=""border border-gray-200 rounded shadow-sm p-4 mb-4""><h2 class=""text-2xl font-bold"">{courseTitle}</h2><p>{courseDescription}</p></div>"
Navigation Menu Item Link,"description:
The UI should feature a single navigation menu item link, which is typically part of a larger navigation bar. It should be visually identifiable, interactive, and should adjust to different screen sizes effectively.
components:
- NavigationLink: Standalone component. This represents a single anchor link that's styled to fit within a navigation menu.
html:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Navigation Menu</title><link href=""https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"" rel=""stylesheet""></head><body><nav class=""bg-gray-800 text-white p-4""><ul class=""flex space-x-4""><li><NavigationLink/></li></ul></nav></body></html>
component html:
NavigationLink:
<a href=""{url}"" class=""text-white hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"">{link_text}</a>"
Grid component with equal column widths and a small gap between columns,"description:
The UI should display a grid of columns with equal widths, with a small gap between each column. The grid should be responsive, adjusting to different screen sizes by adding or removing columns as necessary. The grid should also be accessible, with a clear visual hierarchy and sufficient contrast between the grid items and the background.
components:
- GridColumn: (Takes Children): This component represents a single column in the grid. It should have equal width to other columns in the grid, with a small gap between them. On small screens, the grid should display one column per row, on medium screens two columns per row, and on large screens three columns per row.
- GridItem: (Takes Children): This component represents a single item within a grid column. It should have a slight highlight on hover and a subtle shadow to give it depth.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><GridColumn><GridItem>{children}</GridItem></GridColumn><GridColumn><GridItem>{children}</GridItem></GridColumn><!-- Repeat GridColumn and GridItem components as needed --></div></div>
component html:
GridColumn:
<div class=""flex-grow p-4"">{children}</div>
GridItem:
<div class=""bg-white shadow-md rounded p-4 hover:bg-gray-100 transition duration-300 ease-in-out"">{children}</div>"
Channel topic and description with edit button,"description:
A channel topic and description with an edit button. The topic should be a heading, the description should be a paragraph, and the edit button should be a small button with a pencil icon. The UI should be responsive, with the edit button aligned to the right on larger screens, and below the description on smaller screens.
components:
- ChannelTopic: Standalone component that displays a heading with the channel topic.
- ChannelDescription: Standalone component that displays a paragraph with the channel description.
- EditButton: Standalone component that displays a small button with a pencil icon.
html:
<div class=""flex flex-wrap justify-between mb-4""><div><ChannelTopic/><ChannelDescription/></div><EditButton/></div>
component html:
ChannelTopic:
<h2 class=""text-lg font-bold"">{channel_topic}</h2>
ChannelDescription:
<p class=""text-gray-600"">{channel_description}</p>
EditButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-200 rounded""><i class=""fas fa-pencil-alt"" aria-hidden=""true""></i>Edit</button>"
Parallax scrolling,"description:
The UI should have a hero section with a background image that appears to move slower than the foreground content when the user scrolls, creating a parallax effect. The foreground content should include a heading, a subheading, and a call-to-action button.
components:
- HeroSection: standalone component that contains the background image and foreground content.
- ParallaxBackground: standalone component that displays the background image.
- ForegroundContent: standalone component that displays the heading, subheading, and call-to-action button.
html:
<div class=""h-screen w-full overflow-hidden""><HeroSection/></div>
component html:
HeroSection:
<div class=""relative h-screen""><ParallaxBackground/><ForegroundContent/></div>
ParallaxBackground:
<div class=""absolute inset-0 w-full h-full bg-cover bg-center"" style=""backgroundImage: url({heroImage});""}/>
ForegroundContent:
<div class=""absolute inset-0 flex flex-col justify-center p-4 lg:p-12""><h1 class=""text-4xl font-bold"">{heroHeading}</h1><p class=""text-lg"">{heroSubheading}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Call to Action</button></div>"
Company Fax Number,"description:
A simple text element displaying the company's fax number, with a clear label and adequate spacing.
components:
- FaxNumberDisplay: A standalone component that displays a fax number with a label.
html:
<div class=""flex flex-col md:flex-row items-center mb-4""><FaxNumberDisplay/></div>
component html:
FaxNumberDisplay:
<p class=""text-sm leading-5 text-gray-700"">Fax: <span class=""font-medium"">{fax_number}</span></p>"
Upload button,"description:
A simple upload button with a label ""Upload a file"" and an icon to indicate file upload.
components:
- UploadButton: A standalone component that contains a button with a label and an icon.
html:
<UploadButton/>
component html:
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" typeof=""button""><i class=""fas fa-upload mr-2"" aria-hidden=""true""></i><span>Upload a file</span></button>"
Team or colleagues section with photos and bios,"description:
The UI should be a responsive grid of team members, with each member showing a photo, name, and bio. The grid should adapt to different screen sizes, with a max of 4 columns on larger screens and 1 column on smaller screens.
components:
- TeamMember: (standalone) - represents a single team member
- TeamSection: (takes children) - the container for all team members
html:
<TeamSection><TeamMember/><TeamMember/><TeamMember/><!-- Add more TeamMember components here --></TeamSection>
component html:
TeamMember:
<div class=""flex flex-col items-center mb-4""><img src=""{photoUrl}"" alt=""{name}"" class=""w-24 h-24 rounded-full mb-2""/><h3 class=""text-lg font-bold"">{name}</h3><p class=""text-gray-600"">{bio}</p></div>
TeamSection:
<section class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Our Team</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"">{children} </div></section>"
Footer Terms Link,"description:
A simple text link in the footer of a website that says ""Terms"" and links to a terms and conditions page.
components:
- FooterTermsLink: (standalone)
html:
<footer class=""flex justify-center p-4""><FooterTermsLink/></footer>
component html:
FooterTermsLink:
<a href={termsUrl} class=""text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out"">Terms</a>"
A rating component with 5-star icons and an average rating display,"description:
The rating component should display a row of 5 star icons, with a variable number of them filled in to indicate the average rating. The average rating should be displayed as a numerical value next to the stars. The component should be compact and easy to read, with a clear visual distinction between filled and unfilled stars. On smaller screens, the stars should be smaller and more compact, while on larger screens, they should be larger and more spaced out.
components:
- RatingComponent: (Takes Children): Displays the rating information, including the star icons and average rating value.
- StarIcon: (Standalone): A single star icon that can be filled or unfilled.
html:
<RatingComponent><!-- star icons will be rendered here --><span>{averageRating}/ 5</span></RatingComponent>
component html:
RatingComponent:
<div class=""flex items-center"">{children} <span class=""ml-2 text-sm"">{averageRating}/ 5</span></div>
StarIcon:
<i class=""las la-star {filled ? 'text-yellow-400' : 'text-gray-300'}""></i>"
Archive calendar display,"description:
The UI should display a calendar archive, showcasing a list of months and years with corresponding archives. The layout should be responsive, with a mobile-first approach. The design should be simple, clean, and accessible.
components:
- ArchiveCalendar: The main component that wraps the entire archive calendar display. (Standalone)
- ArchiveYear: Represents a year in the archive calendar. (Takes children)
- ArchiveMonth: Represents a month in the archive calendar. (Standalone)
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ArchiveCalendar/></div>
component html:
ArchiveCalendar:
<ul class=""list-none mb-4"">{archiveYears}</ul>
ArchiveYear:
<li class=""py-2 border-b border-gray-200""><h2 class=""text-lg font-bold"">{year}</h2><ul class=""list-none pl-4"">{children} </ul></li>
ArchiveMonth:
<li class=""py-2""><a href=""{month_link}"" class=""text-blue-600 hover:text-blue-900"">{month_name} </a></li>"
"Section at the bottom of the page containing links, copyright information, and other details","description:
The UI should be a footer section at the bottom of the page that contains links, copyright information, and other details. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented. The footer should have a dark background with light-colored text.
components:
- Footer: standalone component that wraps the entire footer section.
- FooterLinks: standalone component that displays a list of links.
- CopyrightInfo: standalone component that displays copyright information.
- FooterDetails: standalone component that displays other details.
html:
<footer class=""bg-dark text-light pt-4 pb-2""><Footer/></footer>
component html:
Footer:
<div class=""container mx-auto p-4""><FooterLinks/><CopyrightInfo/><FooterDetails/></div>
FooterLinks:
<ul class=""list-none mb-4""><li><a href=""{link1_url}"" class=""text-light"">{link1_text}</a></li><li><a href=""{link2_url}"" class=""text-light"">{link2_text}</a></li><!-- Add more links as needed --></ul>
CopyrightInfo:
<p class=""text-sm"">{copyright_info}</p>
FooterDetails:
<p class=""text-sm"">{footer_details}</p>"
Trending topics display,"description:
A responsive, mobile-first trending topics display that showcases a list of trending topics with their corresponding counts. The UI should be clean, simple, and easy to navigate.
components:
- TrendingTopic: standalone component that displays a single trending topic
- TopicCount: standalone component that displays the count of a topic
html:
<div class=""mx-auto max-w-md p-4 pt-6 lg:max-w-lg""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><ul class=""divide-y divide-gray-200""><TrendingTopic/><TrendingTopic/><!-- More trending topics here --></ul></div>
component html:
TrendingTopic:
<li class=""py-4""><a href=""#"" class=""text-gray-900 hover:text-gray-600 transition duration-300 ease-in-out""><span class=""text-lg"">{topic_name}</span><TopicCount/></a></li>
TopicCount:
<span class=""text-gray-600 text-sm"">{topic_count} tweets</span>"
"A job listing component with a white background, a company logo, job title, and short description","description:
The UI should be a clean and minimalistic job listing component that showcases the company logo, job title, and short description. The component should have a white background to provide good contrast with the text and logo. On smaller screens, the component should be stacked vertically to ensure readability. On larger screens, the component should be displayed horizontally to provide a more compact layout.
components:
- CompanyLogo: (Standalone): A circular container that displays the company logo. The logo should be centered and have a max width/height of 40px.
- JobTitle: (Standalone): A heading element that displays the job title. The text should be bold and have a font size of 18px.
- JobDescription: (Standalone): A paragraph element that displays the short job description. The text should be regular font style and have a font size of 16px.
- JobListing: (Takes Children): The top-level component that contains the company logo, job title, and job description.
html:
<div class=""bg-white p-4 rounded-md shadow-md""><JobListing><CompanyLogo/><JobTitle/><JobDescription/></JobListing></div>
component html:
CompanyLogo:
<img src=""{company_logo_url}"" alt=""{company_name} logo"" class=""w-10 h-10 rounded-full mx-auto""/>
JobTitle:
<h2 class=""font-bold text-lg"">{job_title}</h2>
JobDescription:
<p class=""text-gray-600"">{job_description}</p>
JobListing:
<div class=""flex flex-wrap justify-between md:flex-row""><div class=""w-full md:w-1/4"">{children}</div></div>"
Alerts (error),"description:
The UI should display an error alert message in a conspicuous manner, drawing the user's attention to an error that has occurred.
components:
- ErrorAlert: Standalone component that displays an error message.
html:
<div class=""container mx-auto p-4""><ErrorAlert/></div>
component html:
ErrorAlert:
<div class=""bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"" role=""alert""><strong class=""font-bold"">{error_message}</strong><span class=""block sm:inline"">{error_description}</span><span class=""absolute top-0 bottom-0 right-0 px-4 py-3""><button class=""text-red-900 hover:text-red-700 transition duration-300 ease-in-out"" aria-label=""Close""><span aria-hidden=""true"">×</span></button></span></div>"
Call-to-action (CTA) buttons with a prominent color scheme,"description:
The CTA button should be prominent and attention-grabbing, with a clear and concise label. The button should have a prominent color scheme that stands out from the rest of the UI. On smaller screens, the button should be full-width to make it easy to tap. On larger screens, the button should have some horizontal padding to make it easier to click.
components:
- CallToActionButton: (Standalone): A prominent CTA button with a clear and concise label.
html:
<div class=""flex items-center justify-center h-screen""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md transition duration-500 ease-in-out"">{label}</button>"
"A horizontal list of event categories (e.g. music, comedy, sports) with icons","description:
The UI should be a horizontal list of event categories, each represented by an icon and a label. The list should be responsive, adjusting to different screen sizes. On smaller screens, the list should wrap to multiple lines, while on larger screens, the list should be displayed on a single line. The icons and labels should be easily readable and accessible.
components:
- CategoryLabel: (Standalone): A component that displays the label for a specific event category. Should be a plain text element with a readable font size and color.
- CategoryItem: (Takes Children): A component that wraps a `CategoryIcon` and a `CategoryLabel`. Should be a flex container that wraps the icon and label.
- CategoryList: (Takes Children): A component that displays a horizontal list of `CategoryItem`s. Should be a flex container that wraps the list items.
html:
<div class=""flex flex-wrap justify-center mb-4""><CategoryList><!-- list items will be rendered here --></CategoryList></div>
component html:
CategoryLabel:
<p class=""text-lg"">{label}</p>
CategoryItem:
<div class=""flex items-center mr-4"">{children}</div>
CategoryList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
A company logo component with a square shape and a white background,"description:
The company logo component should be a square shape with a white background, making it stand out and easily recognizable. The logo will scale down on smaller screens to maintain its visibility.
components:
- CompanyLogo: (Standalone): A square company logo with a white background.
html:
<div class=""flex justify-center""><CompanyLogo/></div>
component html:
CompanyLogo:
<div class=""h-12 w-12 bg-white rounded-md shadow-md""><!-- Logo image or text will go here -->{logo_image_or_text}</div>"
Core values display,"description:
The UI should display a list of core values in a responsive, mobile-first design. Each value should be displayed as a card with a title, description, and icon.
components:
- CoreValueCard: a standalone component that displays a single core value.
- CoreValuesList: a component that takes children, which are multiple `CoreValueCard` components.
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Our Core Values</h2><CoreValuesList><CoreValueCard/><CoreValueCard/><!-- add more CoreValueCard components here --></CoreValuesList></section>
component html:
CoreValueCard:
<div class=""bg-white shadow-md p-4 mb-4 rounded""><div class=""flex items-center mb-2""><i class=""fas fa-{icon_type} text-2xl text-gray-500 mr-2""/><h3 class=""text-lg font-bold"">{value_title}</h3></div><p>{value_description}</p></div>
CoreValuesList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Card-based layout,"description:
The UI should be a responsive grid of cards, with each card containing a title, description, and optional image. The cards should be stacked vertically on mobile devices and arranged in a grid on larger screens.
components:
- Card: standalone component, represents a single card in the grid
- CardBody: standalone component, represents the body of a card (contains title, description, and image)
html:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3""><Card/><Card/><Card/><!-- Add more cards here --></div>
component html:
Card:
<div class=""bg-white shadow-md rounded p-4""><CardBody/></div>
CardBody:
<div><h5 class=""text-lg"">{card_title}</h5><p class=""text-gray-600"">{card_description}</p>{card_image && <img src={card_image} alt={card_title} class=""w-full mb-4""/>}</div>"
Countdown to event date,"description:
The UI should display a countdown to a specific event date, showing the days, hours, minutes, and seconds remaining until the event. The design should be modern, clean, and responsive, with a prominent display of the countdown timer.
components:
- CountdownTimer: A standalone component that displays the countdown timer.
- CountdownSegment: A component that displays a single unit of time (days, hours, minutes, seconds) and takes children.
html:
<div class=""max-w-md mx-auto p-4 py-8""><h2 class=""text-3xl font-bold mb-4"">Countdown to Event</h2><div class=""flex justify-center mb-4""><CountdownTimer/></div></div>
component html:
CountdownTimer:
<div class=""flex justify-center mb-4""><CountdownSegment>{days} days</CountdownSegment><CountdownSegment>{hours} hours</CountdownSegment><CountdownSegment>{minutes} minutes</CountdownSegment><CountdownSegment>{seconds} seconds</CountdownSegment></div>
CountdownSegment:
<div class=""px-4 py-2 mx-2 bg-gray-200 rounded""><span class=""text-2xl"">{children}</span></div>"
"A product card component that displays a product image, product name, price, and a ""Add to cart"" button","description:
The product card component should display a clear and concise overview of a product, making it easy for users to decide whether to add it to their cart. On smaller screens, the product image should be prominent, with the product name and price displayed below it. On larger screens, the product image should be displayed alongside the product name and price.
components:
- ProductImage: (Standalone): A rounded rectangle image that displays the product image. On smaller screens, it should take up most of the width of the screen.
- ProductName: (Standalone): A heading element that displays the product name. It should be larger on smaller screens and smaller on larger screens.
- ProductPrice: (Standalone): A paragraph element that displays the product price. It should be displayed alongside the product name on larger screens.
- AddToCartButton: (Standalone): A button element that triggers an action to add the product to the cart. It should be displayed below the product price on smaller screens and alongside the product price on larger screens.
html:
<div class=""flex flex-col sm:flex-row justify-center p-4 md:p-6 lg:p-8""><ProductImage/><div class=""flex flex-col justify-center""><ProductName/><ProductPrice/><AddToCartButton/></div></div>
component html:
ProductImage:
<img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full sm:w-48 md:w-64 lg:w-80 rounded-xl shadow-md""/>
ProductName:
<h2 class=""text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold"">{product_name}</h2>
ProductPrice:
<p class=""text-gray-600"">{product_price}</p>
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to cart</button>"
Toolbar that appears contextually based on user actions or selections,"description:
The UI should be a contextual toolbar that appears when a user selects an element or performs a specific action. The toolbar should be floating above the main content, with a subtle hover effect and a slight animation when it appears/disappears. It should be responsive, adjusting its position and size according to the screen size and device.
components:
- ContextualToolbar: The main toolbar component that appears contextually. It takes children.
- ToolbarItem: An individual item within the toolbar, such as a button or a dropdown. It takes children.
html:
<div class=""fixed top-0 left-0 z-10 w-full lg:w-auto lg:absolute lg:top-auto lg:left-auto lg:bottom-0 lg:right-0""><ContextualToolbar><ToolbarItem><button>Item 1</button></ToolbarItem><ToolbarItem><button>Item 2</button></ToolbarItem><ToolbarItem><button>Item 3</button></ToolbarItem></ContextualToolbar></div>
component html:
ContextualToolbar:
<div class=""bg-white shadow-md rounded-lg p-2 lg:p-4""><ul class=""flex flex-wrap justify-center lg:flex-no-wrap"">{children} </ul></div>
ToolbarItem:
<li class=""mr-2 lg:mr-4"">{children}</li>"
Carousel slider for images,"description:
A responsive carousel slider that displays a series of images. It should have navigation controls (previous and next arrows) and dots or indicators to show the current slide. The slider should be mobile-first, accessible, and SEO-friendly.
components:
- CarouselSlider: The container component that wraps the entire slider. It takes children.
- CarouselSlide: A single slide that contains an image. It takes children.
- CarouselNavigation: The navigation control component that contains previous and next arrows. Standalone.
- CarouselIndicators: The indicators component that displays the dots or circles. Standalone.
html:
<div class=""container mx-auto p-4""><CarouselSlider><CarouselSlide><img src={image1} alt=""Slide 1""/></CarouselSlide><CarouselSlide><img src={image2} alt=""Slide 2""/></CarouselSlide><CarouselSlide><img src={image3} alt=""Slide 3""/></CarouselSlide></CarouselSlider><CarouselNavigation/><CarouselIndicators/></div>
component html:
CarouselSlider:
<div class=""relative overflow-hidden"">{children} <CarouselNavigation/><CarouselIndicators/></div>
CarouselSlide:
<div class=""w-full h-full"">{children}</div>
CarouselNavigation:
<div class=""absolute inset-x-0 bottom-0 flex justify-between p-2""><button class=""bg-white rounded-full p-2""><svg><!-- previous arrow SVG --></svg></button><button class=""bg-white rounded-full p-2""><svg><!-- next arrow SVG --></svg></button></div>
CarouselIndicators:
<div class=""flex justify-center p-2"">{Array.from(Array({slide_count})).map((_, index) =>( <button key={index} class={`w-4 h-4 rounded-full {index === {current_slide} ? 'bg-white' : 'bg-gray-300'}`}/>))}</div>"
A byline component to display the author's name and title,"description:
The byline component should display the author's name and title in a clean and readable format. It should be responsive, accessible, and visually appealing. On smaller screens, the author's name and title should be stacked, while on larger screens, they can be displayed side by side.
components:
- Byline: (Takes Children): A container component that displays the author's name and title. It should have a subtle background color and a slight shadow to give it a sense of depth.
html:
<div class=""max-w-md mx-auto p-4 sm:p-6 lg:p-8""><Byline><!-- Byline content will be rendered here --></Byline></div>
component html:
Byline:
<div class=""bg-gray-100 shadow-md p-4 sm:p-6 lg:p-8""><div class=""flex flex-col sm:flex-row items-center""><p class=""text-lg sm:text-xl lg:text-2xl"">{authorName}</p><p class=""text-sm sm:text-base lg:text-lg"">{authorTitle}</p></div>{children}</div>"
Hero Header with Background Image,"description:
The UI should be a hero header with a full-width background image that takes up the entire screen on mobile devices and scales down to a fixed height on larger screens. The header should also contain a heading and a button.
components:
- HeroHeader: standalone component that contains the background image, heading, and button.
- HeroHeading: standalone component that contains the heading text.
- HeroCTA: standalone component that contains the call-to-action button.
html:
<div class=""h-screen md:h-96 w-full""><HeroHeader/></div>
component html:
HeroHeader:
<div class=""relative h-full w-full""><div class=""absolute inset-0""><img src=""{background_image_url}"" alt=""Hero background image"" class=""w-full h-full object-cover""/></div><div class=""container mx-auto p-4 pt-6 md:pt-12""><HeroHeading/><HeroCTA/></div></div>
HeroHeading:
<h1 class=""text-3xl md:text-5xl font-bold"">{hero_heading_text}</h1>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Product error,"description:
The UI should be a simple error page that displays an error message and a call-to-action (CTA) to go back to the product page.
components:
- ErrorMessage: A standalone component that displays the error message.
- CallToAction: A standalone component that displays a CTA button to go back to the product page.
html:
<main class=""max-w-md mx-auto p-4 pt-6 pb-8 md:p-6 lg:p-12""><ErrorMessage/><CallToAction/></main>
component html:
ErrorMessage:
<p class=""text-lg text-red-500"">{error_message}</p>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Go back to product page</button>"
Success message display,"description:
The UI should be a simple success message display component that shows a checkmark icon, a success message, and an optional sub-message. It should be responsive, mobile-first, and accessible.
components:
- SuccessMessageDisplay: (standalone)
html:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 bg-green-100 rounded-lg shadow-md""><SuccessMessageDisplay/></div>
component html:
SuccessMessageDisplay:
<div class=""flex items-center mb-2""><span class=""text-green-600 text-2xl mr-2""><i class=""fas fa-check-circle""></i></span><div class=""text-lg leading-relaxed"">{message}</div></div>{subMessage && ( <p class=""text-sm text-gray-600"">{subMessage}</p>)}"
Tag cloud component with popular pet-related keywords,"description:
The UI should display a visually appealing tag cloud component that showcases popular pet-related keywords. The component should be responsive, accessible, and easy to use. The design should incorporate a consistent color palette, shadows, and gradients to add depth and dimension. The layout should scale well on different screen sizes, guiding the user's attention to the most important keywords.
components:
- TagCloud: (Takes Children): A container component that holds a collection of tags. It should display the tags in a visually appealing way, with varying font sizes and colors to indicate popularity.
- Tag: (Standalone): A single tag component that displays a keyword with a font size and color indicating its popularity.
html:
<div class=""container mx-auto p-4 pt-6 lg:p-6 xl:p-8""><TagCloud><!-- Tags will be rendered here --></TagCloud></div>
component html:
TagCloud:
<div class=""flex flex-wrap justify-center mb-4 lg:mb-6 xl:mb-8"">{children}</div>
Tag:
<span class=""inline-block mx-2 mb-2 lg:mx-3 xl:mx-4"" style=""fontSize: {fontSize}px; color: {color}; boxShadow: 0 0 {shadowSize}px rgba(0;""}>{tagName}</span>"
Responsive Filtering and Sorting,"description:
A responsive filtering and sorting UI that adapts to different screen sizes, with a search bar, a filtering section, a sorting section, and a list of items.
components:
- SearchBar: (standalone) - a search bar component
- FilterSection: (takes children) - a filtering section component that takes filter options as children
- FilterOption: (standalone) - a single filter option component
- SortingSection: (takes children) - a sorting section component that takes sorting options as children
- SortingOption: (standalone) - a single sorting option component
- ItemList: (takes children) - a list of items component that takes individual items as children
- Item: (standalone) - a single item component
html:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><SearchBar/><div class=""flex flex-wrap -mx-4""><FilterSection><FilterOption/><FilterOption/></FilterSection><SortingSection><SortingOption/><SortingOption/></SortingSection></div><ItemList><Item/><Item/></ItemList></div>
component html:
SearchBar:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Search...""/>
FilterSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pr-6"">{children}</div>
FilterOption:
<label class=""block text-gray-600""><input type=""checkbox"" class=""mr-2""/>{filter_name}</label>
SortingSection:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:pl-6"">{children}</div>
SortingOption:
<button class=""bg-white hover:bg-gray-100 text-gray-600 py-2 px-4 border border-gray-300 rounded"">{sorting_option_name}</button>
ItemList:
<ul class=""list-none p-0 m-0"">{children}</ul>
Item:
<li class=""py-4 px-4 border-b border-gray-200""><h2 class=""text-lg"">{item_name}</h2><p>{item_description}</p></li>"
Related Articles/Recommended Content,"description:
The UI should be a section that displays a list of related articles or recommended content. It should be a Card-based layout with a header, a list of article titles, and a ""More"" button to view more articles.
components:
- RelatedArticles: (takes children): The container component that holds the list of `ArticleCard`s and the ""More"" button.
html:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Related Articles</h2><RelatedArticles><!-- Article cards will be inserted here --></RelatedArticles></section>
component html:
RelatedArticles:
<div class=""flex flex-wrap -mx-4"">{children} <button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">More</button></div>"
Search bar for finding specific content,"description:
The UI should be a simple search bar with a input field and a search button. The search bar should be responsive, taking up the full width of the screen on mobile devices and adding some margins on larger screens. The input field should have a placeholder text and the search button should have an icon of a magnifying glass.
components:
- SearchBar: standalone component that contains the input field and search button.
- SearchInput: standalone component that is the input field.
- SearchButton: standalone component that is the search button.
html:
<nav class=""flex justify-center md:w-3/4 md:mx-auto""><SearchBar/></nav>
component html:
SearchBar:
<div class=""flex items-center bg-white border border-gray-200 rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md""><i class=""fas fa-search""></i></button>"
Table footers,"description:
A simple table footer that displays summary information about the table data.
components:
- TableFooter: standalone component that contains the footer information.
html:
<table><!-- table headers and rows --><tfoot><tr><TableFooter/></tr></tfoot></table>
component html:
TableFooter:
<td colspan=""{column_count}"" class=""px-4 py-2 bg-gray-100 border-t border-gray-200""><!-- footer information here, e.g., summary statistics --><p>{summary_text}</p></td>"
Trip Itinerary and Booking Summary,"description:
The UI should display a trip itinerary and booking summary, showing the trip details, booking information, and a summary of the booking.
components:
- TripItinerarySummary: standalone, displays trip details
- BookingInfo: standalone, displays booking information
- BookingSummary: standalone, displays a summary of the booking
- SectionCard: takes children, a card layout for displaying information
html:
<div class=""max-w-md mx-auto p-4""><SectionCard><TripItinerarySummary/></SectionCard><SectionCard><BookingInfo/></SectionCard><SectionCard><BookingSummary/></SectionCard></div>
component html:
TripItinerarySummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Trip Itinerary</h2><p>Departure: {departure_date}</p><p>Destination: {destination}</p><p>Duration: {duration} days</p></div>
BookingInfo:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Information</h2><p>Booking ID: {booking_id}</p><p>Booking Date: {booking_date}</p><p>Payment Method: {payment_method}</p></div>
BookingSummary:
<div class=""px-4 py-2""><h2 class=""text-lg font-bold mb-2"">Booking Summary</h2><p>Total Cost: {total_cost}</p><p>Number of Travelers: {num_travelers}</p></div>
SectionCard:
<div class=""bg-white shadow-md rounded px-4 py-2 mb-4"">{children}</div>"
"A pagination component, allowing users to navigate through a list of items (e.g., courses or lessons)","description:
The pagination component should be easy to use and accessible on different screen sizes. It should have a clear separation between the previous, current, and next buttons. On smaller screens, the component should be compact and stack the buttons vertically, while on larger screens, the buttons should be horizontal and evenly spaced.
components:
- Pagination: (Takes Children): This component will render the entire pagination UI. It will contain the PreviousButton, CurrentPage, and NextButton components.
- PreviousButton: (Standalone): A button to navigate to the previous page.
- CurrentPage: (Standalone): Displays the current page number and total number of pages.
- NextButton: (Standalone): A button to navigate to the next page.
html:
<Pagination><PreviousButton/><CurrentPage/><NextButton/></Pagination>
component html:
Pagination:
<nav class=""flex justify-center flex-wrap mb-4"">{children}</nav>
PreviousButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={isDisabled}>Previous</button>
CurrentPage:
<p class=""text-lg"">{currentPage} of {totalPages}</p>
NextButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" disabled={isDisabled}>Next</button>"
Loading Spinner: Animated loading indicator,"description:
The UI should be a small, circular loading indicator that rotates to indicate that the system is busy loading data. The spinner should be centered horizontally and vertically, and should be easily accessible on all devices.
components:
- LoadingSpinner: standalone component
html:
<div class=""flex justify-center items-center h-screen""><LoadingSpinner/></div>
component html:
LoadingSpinner:
<div class=""spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"" role=""progressbar"" aria-valuetext=""Loading...""><span class=""sr-only"">Loading...</span></div>"
Like button to show tweet approval,"description:
A simple button with a heart icon and a counter to indicate the number of likes.
components:
- LikeButton: standalone component with a heart icon and a counter.
html:
<div class=""flex mb-4""><!-- container for like button and counter --><LikeButton/><p class=""text-sm"">{like_count} likes</p></div>
component html:
LikeButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-heart""></i></button>"
Social Sharing Link,"description:
- A simple button or link that users can click to share content on a social media platform. The button should be visually identifiable with an icon representing the social platform (like a Facebook or Twitter logo), accompanied by text (e.g., ""Share on Facebook""). It should be responsive, scaling appropriately across devices.
components:
- SocialSharingLink: A standalone component.
html:
<div class=""container mx-auto p-4""><SocialSharingLink/></div>
component html:
SocialSharingLink:
<!-- Social Sharing Link: Allows users to share content on social media --><a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500""><span>{social_media_icon} Share on {social_media}</span></a>"
Pricing packages display,"description:
The UI should display a set of pricing packages with their respective details, such as package name, price, features, and a call-to-action (CTA) button. The UI should be responsive, mobile-first, and accessible.
components:
- PricingPackageCard: a standalone component that displays a single pricing package.
- PricingPackagesList: a component that takes children (multiple `PricingPackageCard` components) and displays them in a grid layout.
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Pricing Packages</h1><PricingPackagesList><PricingPackageCard/><PricingPackageCard/><PricingPackageCard/></PricingPackagesList></div>
component html:
PricingPackageCard:
<div class=""bg-white shadow-md rounded p-4 md:w-1/2 xl:w-1/3""><h2 class=""text-lg font-bold"">{package_name}</h2><p class=""text-lg"">{price}</p><ul class=""list-none mb-4""><li>{feature1}</li><li>{feature2}</li><li>{feature3}</li></ul><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign Up</button></div>
PricingPackagesList:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Social Media Icon Link,"description:
A clickable social media icon that links to a specific social media platform.
components:
- SocialMediaIconLink: standalone component
html:
<a href={<social_media_url>} class=""flex justify-center w-8 h-8 text-lg transition duration-300 hover:text-primary-500""><SocialMediaIconLink/></a>
component html:
SocialMediaIconLink:
<i class=""fab fa-{social_media_platform}""></i><!-- fab is from font awesome brand -->"
Testimonial Author Photo,"description:
The UI should display a circular author photo with a testimonial quote and the author's name. The author photo should be rounded and bordered, with a subtle shadow effect. The testimonial quote should be displayed in a clean, readable font, and the author's name should be displayed in a smaller, italicized font.
components:
- TestimonialAuthorPhoto: Standalone component that displays the author photo.
- TestimonialQuote: Standalone component that displays the testimonial quote.
- AuthorName: Standalone component that displays the author's name.
html:
<div class=""md:flex items-center mb-4""><div class=""md:w-1/3 md:pr-4""><TestimonialAuthorPhoto/></div><div class=""md:w-2/3 md:pl-4""><TestimonialQuote/><AuthorName/></div></div>
component html:
TestimonialAuthorPhoto:
<img src={author_photo_url} alt={author_name} class=""w-24 h-24 rounded-full border-2 border-gray-300 shadow-md""/>
TestimonialQuote:
<blockquote class=""text-lg italic mb-2"">{testimonial_quote}</blockquote>
AuthorName:
<p class=""text-sm italic"">{author_name}</p>"
"Create a comment component with a white background, dark text, and a subtle padding to make it stand out from the dark background","description:
The comment component will have a white background, dark text, and a subtle padding to make it stand out from the dark background. It will be a standalone component that can be used to display a single comment.
components:
- CommentComponent: (Standalone): A single comment component with a white background, dark text, and a subtle padding.
html:
<!-- Not applicable, as this is a standalone component -->
component html:
CommentComponent:
<div class=""bg-white dark:text-dark-700 p-4 rounded-md""><p>{comment_text}</p></div>"
"A comment component with a light gray background, rounded corners, and a subtle shadow effect","description:
The Comment component should have a light gray background, rounded corners, and a subtle shadow effect. The component should be responsive, making it easy to read and navigate on different screen sizes. On smaller screens, the component should take up the full width of the screen, and on larger screens, it should have a maximum width to prevent it from becoming too wide.
components:
- CommentComponent: (Takes Children): This component represents a single comment. It should have a light gray background, rounded corners, and a subtle shadow effect.
html:
<CommentComponent><!-- content of the comment --></CommentComponent>
component html:
CommentComponent:
<div class=""bg-gray-100 rounded-lg shadow-md p-4"">{children}</div>"
Code Editor with Syntax Highlighting,"description:
A code editor with syntax highlighting, where the user can view and edit code. The code will be highlighted with different colors to distinguish between keywords, variables, and other elements.
components:
- CodeEditor: The main component that contains the code editing area. It takes children.
- SyntaxHighlightedCode: A component that displays the code with syntax highlighting. It takes children.
html:
<div class=""max-w-md mx-auto bg-white p-4 rounded shadow-md""><CodeEditor><SyntaxHighlightedCode><!-- Code goes here --></SyntaxHighlightedCode></CodeEditor></div>
component html:
CodeEditor:
<div class=""h-screen overflow-y-auto p-4"">{children}</div>
SyntaxHighlightedCode:
<pre class=""text-sm"">{children}</pre>"
Image uploaders,"description:
The UI for an image uploader typically features a drag-and-drop area or a button where users can select an image file from their device. Once an image is selected or dragged into the area, there might be an optional preview of the image before it's uploaded. A clear visual indication (such as a progress bar or spinner) indicates the upload process. After the upload is complete, a confirmation message or thumbnail of the uploaded image may be displayed.
components:
- FileUploadArea: Standalone, allows users to either click to select a file or drag and drop a file onto the area.
- ImagePreview: Standalone, displays the image that's to be uploaded to provide visual feedback to the user.
- UploadButton: Standalone, a button that the user clicks to initiate the file upload.
- ProgressBar: Standalone, displays the progress of the file upload.
html:
<div class=""container mx-auto p-4""><h1 class=""text-lg font-semibold"">Upload Your Image</h1><FileUploadArea/><ImagePreview/><UploadButton/><ProgressBar/></div>
component html:
FileUploadArea:
<div class=""border-2 border-dashed border-gray-300 p-6 text-center cursor-pointer hover:border-gray-500""><p>Drag and drop your image here or <span class=""text-blue-500 underline"">browse</span></p><input type=""file"" class=""hidden"" accept=""image/*""></div>
ImagePreview:
<div class=""mt-4""><img src=""{preview_image_url}"" alt=""Uploaded image preview"" class=""max-w-full h-auto""></div>
UploadButton:
<button class=""mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Image </button>
ProgressBar:
<div class=""mt-4 w-full bg-gray-200 rounded-full""><div class=""bg-blue-500 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full"" style=""width: {uploadPercentage}%;"">{uploadPercentage}%</div></div>"
A grid component that displays a list of news articles in a 3-column layout.,"description:
The UI should display a list of news articles in a 3-column layout, making it easy to scan and read. The grid should be responsive, adapting to different screen sizes. On smaller screens, the grid should collapse to a single column, and on larger screens, the grid should expand to a 3-column layout. The UI should use a consistent color palette, with a highlight color to make the news articles stand out. Shadows and gradients can be used to add depth and dimension to the UI.
components:
- NewsGrid: (Takes Children): A container component that displays a list of news articles in a grid layout.
- NewsCard: (Standalone): A component that displays a single news article, including a title, description, and image.
html:
<div class=""container mx-auto p-4 lg:p-6""><NewsGrid><!-- children will be rendered here --></NewsGrid></div>
component html:
NewsGrid:
<div class=""grid gap-4 lg:grid-cols-3"">{children}</div>
NewsCard:
<div class=""bg-white shadow-md p-4 rounded""><img src=""{image_url}"" alt=""{title}"" class=""w-full h-48 object-cover rounded-t""/><h2 class=""text-lg font-bold"">{title}</h2><p class=""text-gray-600"">{description}</p></div>"
A component to display a list of related articles,"description:
The UI should be a simple, yet visually appealing list of article summaries. The list should be responsive, with each article summary displayed as a card on larger screens, and as a compact list item on smaller screens. The cards/list items should have a clear hierarchy, with the most important information (article title) standing out the most. The UI should also provide a clear call-to-action (CTA) to read each article.
components:
- ArticleList: (Takes Children): A container for the list of article summaries.
- ArticleSummary: (Standalone): A single article summary, consisting of a title, brief description, and CTA.
html:
<ArticleList><!-- Article summaries will be rendered here --></ArticleList>
component html:
ArticleList:
<div class=""flex flex-wrap justify-center md:flex-row flex-col max-w-4xl mx-auto p-4"">{children}</div>
ArticleSummary:
<div class=""bg-white shadow-md rounded p-4 mb-4 w-full md:w-1/2 xl:w-1/3""><h3 class=""text-lg font-bold"">{article_title}</h3><p class=""text-gray-600"">{article_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read More</button></div>"
"Expanded menu with multiple columns and subsections, often seen in navigation bars","description:
The UI should be a responsive, multi-column navigation menu with subsections. It should have a clean and minimalistic design, with clear typography and sufficient spacing between elements. On larger screens, the menu should expand to show multiple columns, making it easy to navigate through the various sections.
components:
- NavMenu: The main navigation menu component, which takes children.
- NavItem: A single navigation item, which takes children.
- NavColumn: A column within the navigation menu, which takes children.
- NavSubsection: A subsection within a navigation item, which takes children.
html:
<div class=""container mx-auto p-4 lg:p-6""><NavMenu><NavColumn><NavItem><a href=""#"" class=""text-lg"">Section 1</a><NavSubsection><NavItem><a href=""#"">Subsection 1.1</a></NavItem><NavItem><a href=""#"">Subsection 1.2</a></NavItem></NavSubsection></NavItem><NavItem><a href=""#"">Link 2</a></NavItem></NavColumn><NavColumn><NavItem><a href=""#"">Section 2</a></NavItem><NavItem><a href=""#"">Link 3</a></NavItem><NavItem><a href=""#"">Link 4</a></NavItem></NavColumn></NavMenu></div>
component html:
NavMenu:
<nav class=""flex justify-center lg:flex-wrap"">{children}</nav>
NavItem:
<li class=""mb-4 lg:mb-8"">{children} {subsections && ( <NavSubsection>{subsections} </NavSubsection>)}</li>
NavColumn:
<ul class=""list-none mb-4 lg:mb-8 lg:w-1/2 xl:w-1/3"">{children}</ul>
NavSubsection:
<ul class=""list-none pl-4"">{children}</ul>"
Voice Command/Audio Feedback,"description:
The UI should display a microphone icon and a circle that represents the audio feedback. The microphone icon should be surrounded by a circle that changes color based on the audio feedback level. The UI should also display a text that indicates the audio feedback level.
components:
- MicrophoneIcon: A standalone component that displays a microphone icon.
- AudioFeedbackCircle: A standalone component that displays a circle that changes color based on the audio feedback level.
- AudioFeedbackText: A standalone component that displays the audio feedback level.
html:
<div class=""flex justify-center mb-4""><div class=""relative""><MicrophoneIcon/><AudioFeedbackCircle/></div><AudioFeedbackText/></div>
component html:
MicrophoneIcon:
<i class=""fas fa-microphone text-lg text-gray-500""/>
AudioFeedbackCircle:
<div class={`w-12 h-12 bg-{audio_feedback_level_color} rounded-full`}/>
AudioFeedbackText:
<p class=""text-sm text-gray-500"">{audio_feedback_level_text}</p>"
"Checkout process steps indicator with completed and upcoming steps (white background, black text)","description:
The UI should display a horizontal sequence of steps, with completed steps indicated by a green checkmark and upcoming steps indicated by a gray circle. Each step should have a brief label and a counter indicating the step number. The background should be white, and the text should be black.
components:
- StepIndicator: (Takes Children): A single step indicator, which can be either completed or upcoming.
- CheckoutSteps: (Takes Children): The container for the sequence of steps.
html:
<div class=""flex justify-center mb-4""><CheckoutSteps><StepIndicator>Shipping Information</StepIndicator><StepIndicator>Payment Method</StepIndicator><StepIndicator>Review Order</StepIndicator><StepIndicator>Place Order</StepIndicator></CheckoutSteps></div>
component html:
StepIndicator:
<div class=""flex items-center mr-4 mb-2""><span class=""text-lg"">{stepNumber}</span><span class={`ml-2 {completed ? 'text-green-500' : 'text-gray-500'}`}>{completed ? <i class=""fas fa-check""></i>: <i class=""fas fa-circle""></i>} </span><span class=""ml-2"">{children}</span></div>
CheckoutSteps:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
A header with a white background and dark text,"description:
The UI should have a clean and simple header with a white background and dark text. The header should be responsive, adjusting its layout and font size according to the screen size. On larger screens, the header should have more padding and a larger font size, while on smaller screens, it should have less padding and a smaller font size.
components:
- SiteHeader: (Standalone): The top-most component that contains the title of the site and the navigation links. On smaller screens, it should have a single line with the title and navigation links stacked on top of each other. On larger screens, it should have two lines with the title on one line and the navigation links on the other line.
html:
<SiteHeader/>
component html:
SiteHeader:
<header class=""bg-white py-4 md:py-6 lg:py-8""><div class=""container mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-2xl md:text-3xl lg:text-4xl"">{site_title}</h1><nav class=""flex justify-end""><ul class=""flex""><li><a class=""text-dark hover:text-darker"" href=""#"">{nav_link_1}</a></li><li><a class=""text-dark hover:text-darker"" href=""#"">{nav_link_2}</a></li><!-- Add more navigation links as needed --></ul></nav></div></header>"
Simple round avatar icon for author profiles,"description:
The UI should be a simple, round avatar icon that displays the author's profile picture. It should be responsive and scalable on different screen sizes, with a consistent color palette and accessible design.
components:
- AuthorAvatar: (Standalone): A circular avatar icon displaying the author's profile picture. On small screens (mobile), the avatar should be 40px in diameter, on medium screens (tablet), 60px, and on large screens (desktop), 80px in diameter.
html:
<div class=""flex justify-center""><AuthorAvatar/></div>
component html:
AuthorAvatar:
<img src={author_image_url} alt={author_name} class=""rounded-full w-10 h-10 sm:w-12 sm:h-12 md:w-16 md:h-16 lg:w-20 lg:h-20""/>"
Footer with a dark gray background that contains:,"description:
The footer should have a dark gray background with a subtle shadow to give it depth. It should be split into three sections: a copyright section, a social media links section, and a subscribe section. The footer should be responsive, with the sections stacking on top of each other on smaller screens.
components:
- FooterContainer: (Takes Children): The container for the entire footer.
- CopyrightSection: (Standalone): Displays the copyright information.
- SocialMediaLinks: (Standalone): Displays links to social media profiles.
- SubscribeSection: (Standalone): Allows users to subscribe to a newsletter.
html:
<footer class=""bg-darkGray-800 h-screen px-4 py-12 md:px-12 lg:px-24""><FooterContainer><CopyrightSection/><SocialMediaLinks/><SubscribeSection/></FooterContainer></footer>
component html:
FooterContainer:
<div class=""max-w-md mx-auto flex flex-wrap justify-center"">{children}</div>
CopyrightSection:
<p class=""text-gray-400 text-sm"">{copyright_text}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><a href=""{facebook_url}"" target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-facebook-f text-2xl text-gray-500 hover:text-gray-800""></i></a></li><li class=""mr-4""><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-twitter text-2xl text-gray-500 hover:text-gray-800""></i></a></li><!-- Add more social media links here --></ul>
SubscribeSection:
<div class=""flex flex-wrap justify-center mb-4""><input class=""w-full sm:w-1/2 lg:w-1/3 xl:w-1/4 pl-4 pr-4 py-2 bg-gray-100 border border-gray-300 rounded"" type=""email"" placeholder=""Enter your email address""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe </button></div>"
Tweet input field for user input,"description:
The UI should be a simple text input field for users to enter their tweets, with a character count indicator next to it.
components:
- TweetInputField: (standalone)
- CharacterCountIndicator: (standalone)
html:
<div class=""flex w-full max-w-md p-4 mx-auto mt-4""><TweetInputField/><CharacterCountIndicator/></div>
component html:
TweetInputField:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""What's on your mind?"" aria-label=""Tweet input field""/>
CharacterCountIndicator:
<span class=""text-gray-500"">{characterCount}/ 280</span>"
"A ""Featured Pet Sitter"" section with a photo, name, and brief description","description:
The ""Featured Pet Sitter"" section should be a prominent and attention-grabbing element on the page. It should showcase a photo of the pet sitter, their name, and a brief description. The section should scale well for mobile, tablet, and desktop screens.
components:
- FeaturedPetSitter: (Takes Children): A container component that holds the featured pet sitter's information.
- PetSitterPhoto: (Standalone): A component that displays the pet sitter's photo.
- PetSitterInfo: (Takes Children): A component that displays the pet sitter's name and brief description.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><FeaturedPetSitter><PetSitterPhoto/><PetSitterInfo><!-- pet sitter info content will go here --></PetSitterInfo></FeaturedPetSitter></div>
component html:
FeaturedPetSitter:
<div class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8"">{children}</div>
PetSitterPhoto:
<img src={pet_sitter_photo_url} alt=""Pet Sitter Photo"" class=""w-32 h-32 md:w-48 md:h-48 lg:w-64 lg:h-64 rounded-full shadow-md""/>
PetSitterInfo:
<div class=""flex-grow pl-4 md:pl-6 lg:pl-8""><h2 class=""text-xl md:text-2xl lg:text-3xl font-bold"">{pet_sitter_name}</h2><p class=""text-gray-600"">{pet_sitter_description}</p>{children}</div>"
Targets/Anchor Links,"description:
The UI should display a list of target/anchor links with a descriptive text and a reference to the section on the same page. The links should be styled with an underline on hover and a smooth transition effect.
components:
- TargetLink: A standalone component representing a single target link.
- TargetsList: A component that takes children, wrapping a list of `TargetLink` components.
html:
<TargetsList><TargetLink/><TargetLink/><!-- add more links here --></TargetsList>
component html:
TargetLink:
<li class=""mb-2""><a href={`#{target_id}`} class=""text-gray-600 hover:text-gray-900 hover:underline transition duration-300 ease-in-out"">{target_text} </a></li>
TargetsList:
<ul class=""list-none mb-4"">{children}</ul>"
"A paragraph component with a clear font, comfortable line height, and a subtle text color","description:
The `Paragraph` component should have a clear font, comfortable line height, and a subtle text color. It should be easy to read on different screen sizes.
components:
- Paragraph: (Takes Children): A paragraph of text with a clear font, comfortable line height, and a subtle text color. On smaller screens, the font size should be slightly smaller to fit more text on the screen. On larger screens, the font size should be slightly larger for better readability.
html:
<!-- main content container --><div class=""max-w-md mx-auto p-4""><!-- paragraph component --><Paragraph>{children}</Paragraph></div>
component html:
Paragraph:
<p class=""text-lg lg:text-xl leading-relaxed text-gray-600"">{children}</p>"
Separators,"description:
The UI should consist of horizontal separator lines and vertical separator lines, used to divide sections or contents visually on a web page. These separators can enhance the visual organization of content and improve readability.
components:
- HorizontalSeparator: (Standalone): A horizontal line used to separate content in layouts horizontally.
- VerticalSeparator: (Standalone): A vertical line used to separate content in layouts vertically.
html:
<div class=""p-4""><div class=""mb-4""><p>Content above the horizontal separator</p><HorizontalSeparator/><p>Content below the horizontal separator</p></div><div class=""flex items-center""><p>Content to the left of the vertical separator</p><VerticalSeparator/><p>Content to the right of the vertical separator</p></div></div>
component html:
HorizontalSeparator:
<!-- Horizontal line as a visual separator --><hr class=""border-t border-gray-300 my-4""/>
VerticalSeparator:
<!-- Vertical line as a visual separator --><div class=""border-l border-gray-300 mx-4 h-full""></div>"
Featured event section with a large image and overlaying text,"description:
The Featured Event section should be visually striking, with a large image that grabs the user's attention and overlaying text that provides context. The section should be responsive, with the image and text adapting to different screen sizes.
components:
- FeaturedEventContainer: (Takes Children): A container component that holds the image and overlaying text.
- EventImage: (Standalone): A component that displays the large image.
- EventOverlay: (Takes Children): A component that displays the overlaying text.
html:
<div class=""flex flex-col w-full h-screen""><FeaturedEventContainer><EventImage/><EventOverlay><!-- overlaying text will go here --></EventOverlay></FeaturedEventContainer></div>
component html:
FeaturedEventContainer:
<div class=""relative w-full h-screen"">{children}</div>
EventImage:
<img src={image_url} class=""absolute w-full h-full object-cover"" alt={image_alt_text}/>
EventOverlay:
<div class=""absolute bottom-0 left-0 w-full py-4 px-6 bg-gray-900 bg-opacity-75 text-white"">{children}</div>"
Featured Product Image Alt,"description:
The UI should display a prominent product image with an alternative text, making it accessible to users with visual impairments.
components:
- ProductImage: A standalone component that displays the product image with an alternative text.
html:
<img src={image_url} alt={product_image_alt} class=""w-full h-64 object-cover rounded-lg""/>
component html:
ProductImage:
<img src={image_url} alt={product_image_alt} class=""w-full h-64 object-cover rounded-lg""/>"
Responsive Image Breakpoints,"description:
The UI should display a responsive image that adapts to different screen sizes and breakpoints.
components:
- ResponsiveImage: (standalone component)
html:
<div class=""mx-auto max-w-md p-4""><ResponsiveImage/></div>
component html:
ResponsiveImage:
<img src=""{image_url}"" class=""w-full h-auto rounded-lg mx-auto md:w-3/4 md:h-64 lg:w-1/2 lg:h-80 xl:w-1/3 xl:h-96"" alt=""{image_alt_text}""/>"
Stock market ticker,"description:
The UI should display a scrolling list of stock market tickers with the company name, stock symbol, current price, and percentage change. The list should be responsive, with a single column on mobile devices and a multi-column layout on larger screens.
components:
- StockTickerList: (takes children): A list of stock market ticker items
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Stock Market Tickers</h1><StockTickerList><!-- List of stock ticker items --></StockTickerList></div>
component html:
StockTickerList:
<ul class=""flex flex-wrap -mx-2"">{children}</ul>"
"A post component that includes a text input field, character counter, and upload button for images and videos","description:
The post component should be a rectangular container with a white background, slightly rounded corners, and a subtle shadow to give it depth. The text input field should be a prominent element, stretching across the container's width. Below the input field, a character counter should display the remaining characters. On the right side of the container, an upload button for images and videos should be positioned. The upload button should be a rounded rectangle with a bright accent color to draw attention.

On smaller screens (e.g., mobile devices), the component should scale down, with the text input field and character counter stacked vertically to accommodate the narrower screen width. The upload button should be repositioned below the character counter to maintain a clean layout.
components:
- PostContainer: (Takes Children): The outer container for the post component, providing a white background and rounded corners.
- TextInput: (Standalone): A single-line text input field with a subtle border and placeholder text.
- CharacterCounter: (Standalone): A small text element displaying the remaining characters.
- UploadButton: (Standalone): A rounded button with a bright accent color, allowing users to upload images and videos.
html:
<div class=""max-w-md mx-auto p-4 bg-white rounded-lg shadow-md""><PostContainer><TextInput/><CharacterCounter/><UploadButton/></PostContainer></div>
component html:
PostContainer:
<div class=""bg-white rounded-lg p-4"">{children}</div>
TextInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700 border border-gray-300 rounded-lg"" placeholder=""Write a post...""/>
CharacterCounter:
<p class=""text-sm text-gray-500"">{character_count} characters remaining</p>
UploadButton:
<button class=""w-24 h-8 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">Upload</button>"
A prominent hero banner with a large background image and white text overlay,"description:
The UI should have a prominent hero banner that takes up the full width of the screen, with a large background image that scales down on smaller screen sizes. The background image should be darkened slightly to make the white text overlay stand out. The text overlay should have a large font size and should be centered both horizontally and vertically.
components:
- HeroBanner: (Takes Children): This component represents the hero banner with a large background image and text overlay.
html:
<div class=""h-screen w-full relative""><HeroBanner><!-- hero banner content --></HeroBanner></div>
component html:
HeroBanner:
<div class=""h-screen w-full relative""><div class=""absolute w-full h-full bg-cover bg-center"" style=""backgroundImage: url({hero_image});""}></div><div class=""absolute w-full h-full bg-black bg-opacity-50""></div><div class=""absolute inset-0 flex items-center justify-center text-white"">{children} </div></div>"
Social media icon set with a white fill color,"description:
The UI should be a horizontal row of social media icons with a white fill color. The icons should be evenly spaced and have a consistent size. On smaller screens, the icons should be stacked vertically to ensure they are still easily clickable. The icons should have a subtle shadow to give them some depth.
components:
- SocialMediaIcon: (Takes Children): A single social media icon with a white fill color.
- SocialMediaIconSet: (Takes Children): A horizontal row of social media icons.
html:
<div class=""flex justify-center mb-4 xl:justify-start""><SocialMediaIconSet><SocialMediaIcon><i class=""fab fa-facebook-f"" aria-hidden=""true""></i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-twitter"" aria-hidden=""true""></i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-instagram"" aria-hidden=""true""></i></SocialMediaIcon><SocialMediaIcon><i class=""fab fa-youtube"" aria-hidden=""true""></i></SocialMediaIcon></SocialMediaIconSet></div>
component html:
SocialMediaIcon:
<a href=""{href}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex justify-center w-10 h-10 rounded-full bg-white shadow-md hover:shadow-lg"">{children}</a>
SocialMediaIconSet:
<div class=""flex flex-wrap justify-center xl:flex-nowrap xl:justify-start mb-4 xl:mb-0"">{children}</div>"
A section header component with a bold font and light-colored background,"description:
The UI should have a clean and modern design with a bold font and light-colored background for the section header component. The component should be responsive and accessible on different screen sizes.
components:
- SectionHeader: (Standalone): This component will render a bold font with a light-colored background. On smaller screens (mobile and tablet), the component will take up the full width of the screen, and on larger screens (laptop and desktop), it will have a maximum width of 800px.
html:
<div class=""max-w-md mx-auto p-4""><SectionHeader/></div>
component html:
SectionHeader:
<div class=""bg-gray-200 py-2 px-4 mb-4 rounded""><h2 class=""text-lg font-bold"">{header_text}</h2></div>"
Headline and Summary Text,"description:
A headline and summary text section, typically used on a blog post or article page, that is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- HeadlineComponent: (standalone) - Displays a headline text.
- SummaryTextComponent: (standalone) - Displays a summary text.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><HeadlineComponent/><SummaryTextComponent/></div>
component html:
HeadlineComponent:
<h1 class=""text-3xl md:text-4xl lg:text-5xl font-bold"">{headline_text}</h1>
SummaryTextComponent:
<p class=""text-lg md:text-xl lg:text-2xl"">{summary_text}</p>"
Footer Contact Info,"description:
The UI should display the website's contact information, including address, phone number, and email, in a responsive and accessible layout.
components:
- FooterContactInfo: standalone component that contains contact information.
- Address: standalone component that displays the website's address.
- PhoneNumber: standalone component that displays the website's phone number.
- Email: standalone component that displays the website's email.
html:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><FooterContactInfo/></footer>
component html:
FooterContactInfo:
<div class=""flex flex-col md:flex-row justify-between""><Address/><PhoneNumber/><Email/></div>
Address:
<address class=""not-italic""><p>{street_address}</p><p>{city_state_zip}</p></address>
PhoneNumber:
<p class=""text-lg"">{phone_number}</p>
Email:
<p><a href={`mailto:{email_address}`}>{email_address}</a></p>"
Filter dropdown menu,"description:
The UI should feature a dropdown menu that users can click to expand and view a list of filter options. Each filter option is a selectable item that, when clicked, presumably affects content displayed elsewhere on the page.
components:
- DropdownButton: (Standalone)**: A button that when clicked, will toggle the visibility of the DropdownContent.
- DropdownContent: (Can have children)**: A container that holds the various filter options.
- DropdownItem: (Standalone)**: Represents an individual filter option within the DropdownContent.
html:
<div class=""relative""><DropdownButton/><DropdownContent><!-- Sample filter options --><DropdownItem/><DropdownItem/><DropdownItem/></DropdownContent></div>
component html:
DropdownButton:
<button class=""px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-lg shadow-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-50"" aria-haspopup=""true"" aria-expanded=""{aria_expanded}"" id=""dropdownButton"">Filter Options </button>
DropdownContent:
<div class=""absolute mt-1 bg-white shadow-lg rounded-md w-48"" aria-labelledby=""dropdownButton"" style=""display: {dropdown_display};"">{children} </div>
DropdownItem:
<a href=""#"" class=""block px-4 py-2 text-sm text-gray-800 hover:bg-gray-100"" role=""menuitem"">{filter_option_name}</a>"
Product Image Gallery: Showcase your product from multiple angles,"description:
The UI should feature a main display area that showcases a large view of the selected product image. Below the main display, there should be a horizontal list of thumbnails representing different angles or variations of the product. Clicking a thumbnail should update the main display with that image. This gallery should be responsive, adapting to both mobile and desktop views.
components:
- ImageDisplay: (Standalone)**: A component that displays the main image.
- ThumbnailList: (Standalone)**: A component that contains all the thumbnails.
- Thumbnail: (Children)**: A component that represents an individual thumbnail.
html:
<div class=""max-w-4xl mx-auto p-4""><ImageDisplay/><ThumbnailList/></div>
component html:
ImageDisplay:
<div class=""w-full""><img src=""{selectedImageUrl}"" alt=""{selectedImageAlt}"" class=""w-full h-auto""/></div>
ThumbnailList:
<div class=""flex overflow-x-auto mt-4 space-x-2""><Thumbnail><img src=""{thumbnailUrl1}"" alt=""{thumbnailAlt1}"" class=""w-20 h-20 object-cover border-2 border-transparent hover:border-gray-400 cursor-pointer""/></Thumbnail><Thumbnail><img src=""{thumbnailUrl2}"" alt=""{thumbnailAlt2}"" class=""w-20 h-20 object-cover border-2 border-transparent hover:border-gray-400 cursor-pointer""/></Thumbnail><!-- Additional thumbnails can be added similarly --></div>
Thumbnail:
<div>{children} </div>"
A rating component featuring a row of yellow stars,"description:
The rating component should feature a row of yellow stars that indicate the rating, with a possibility to hover and change the rating. The component should be responsive, easy to use, and accessible on different screen sizes.
components:
- RatingComponent: (Takes Children): This component consists of a row of stars that indicate the rating. On desktop screens, the stars should be larger and more spaced out, while on mobile screens, they should be smaller and closer together. The component takes child elements indicating the rating value.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-8""><RatingComponent>{ratingValue}</RatingComponent></div>
component html:
RatingComponent:
<div class=""flex items-center""><!-- loop through the rating value and render a star for each rating point -->{[...Array({ratingValue})].map((_, index) =>( <div key={index} class=""inline-block mx-1""><i class=""fas fa-star text-yellow-400 text-lg md:text-xl lg:text-2xl""></i></div>))} {children}</div>"
A search bar with a magnifying glass icon,"description:
The search bar should be a prominent element on the page, with a clear input field and a magnifying glass icon to help users quickly identify its purpose. The search bar should be easily accessible on all screen sizes, with a responsive design that adapts to different devices.
components:
- SearchBarContainer: (Takes Children): A container element that wraps the search input and magnifying glass icon. It should have a subtle background color and a slight shadow to give it depth.
- SearchInput: (Standalone): A text input field where users can enter their search queries. It should have a clean and minimal design, with a subtle border and padding to make it easy to focus.
- MagnifyingGlassIcon: (Standalone): A small icon that represents a magnifying glass. It should be placed to the right of the search input field and have a subtle animation effect when hovered.
html:
<div class=""flex justify-center mt-4 md:mt-6 lg:mt-8""><SearchBarContainer><SearchInput/><MagnifyingGlassIcon/></SearchBarContainer></div>
component html:
SearchBarContainer:
<div class=""bg-white shadow-md rounded-md p-2 md:p-3 lg:p-4"">{children}</div>
SearchInput:
<input class=""w-full pl-2 pr-10 text-lg md:text-xl lg:text-2xl py-2 md:py-3 lg:py-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" type=""search"" placeholder=""Search""/>
MagnifyingGlassIcon:
<span class=""text-gray-500 text-lg md:text-xl lg:text-2xl cursor-pointer hover:text-blue-500 transition duration-300""><i class=""fas fa-search""></i></span>"
"Vertical stack of collapsible sections, revealing content when clicked","description:
The UI should display a vertical stack of collapsible sections, with each section having a header that can be clicked to reveal or hide its content. The sections should be stacked on top of each other, with a subtle animation when expanding or collapsing.
components:
- CollapsibleSection: a standalone component representing a single collapsible section
- CollapsibleHeader: a standalone component representing the header of a collapsible section
- CollapsibleContent: a standalone component representing the content of a collapsible section
html:
<div class=""flex flex-col gap-4""><CollapsibleSection/><CollapsibleSection/><!-- Add more sections as needed --></div>
component html:
CollapsibleSection:
<div class=""collapsible-section""><CollapsibleHeader/><CollapsibleContent/></div>
CollapsibleHeader:
<button class=""collapsible-header cursor-pointer hover:bg-gray-100 transition-colors""><span>{section_title}</span><svg><!-- Icon will be defined in CSS using Tailwind utility classes --></svg></button>
CollapsibleContent:
<div class=""collapsible-content overflow-hidden transition-all""><p>{section_content}</p></div>"
Featured Product Title,"description:
The UI should display a prominent title highlighting a featured product. It should be visually appealing, responsive, and accessible.
components:
- FeaturedProductTitle: Standalone component that displays a highlighted title.
html:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedProductTitle/></section>
component html:
FeaturedProductTitle:
<h2 class=""text-3xl font-bold mb-4 text-primary"">{product_title}</h2>"
Project Timeline Visualization Tool,"description:
The UI should be a responsive, mobile-first, and accessible visualization tool that displays a project timeline, including milestones, tasks, and dependencies. The tool should be easy to use, intuitive, and provide a clear visual representation of the project timeline.
components:
- ProjectTimeline: The main component that renders the project timeline. Takes children.
- MilestoneCard: A card component that represents a milestone in the project timeline. Standalone.
- TaskCard: A card component that represents a task in the project timeline. Standalone.
- DependencyLine: A line component that represents a dependency between tasks or milestones. Standalone.
html:
<!-- The main project timeline component --><div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProjectTimeline><!-- Milestones and tasks will be rendered here --></ProjectTimeline></div>
component html:
ProjectTimeline:
<!-- Container for the project timeline --><div class=""flex flex-col"">{children}</div>
MilestoneCard:
<!-- Milestone card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{milestone_name}</h3><p class=""text-gray-600"">{milestone_description}</p><p class=""text-sm text-gray-500"">{milestone_date}</p></div>
TaskCard:
<!-- Task card component --><div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{task_name}</h3><p class=""text-gray-600"">{task_description}</p><p class=""text-sm text-gray-500"">{task_date}</p></div>
DependencyLine:
<!-- Dependency line component --><div class=""h-4 w-1 bg-gray-300""></div>"
Callout Box Border Radius,"description:
A callout box with a border radius, typically used to highlight important information or provide additional context.
components:
- CalloutBox: A standalone component that contains a title and a description.
- CalloutBoxTitle: A standalone component that displays the title of the callout box.
- CalloutBoxDescription: A standalone component that displays the description of the callout box.
html:
<div class=""w-full max-w-md p-4 bg-white shadow-md rounded-lg""><CalloutBox/></div>
component html:
CalloutBox:
<div class=""p-4 border-l-4 border-green-500""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<p class=""text-lg font-bold"">{title}</p>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Social Media Profile,"description:
The UI should display a user's social media profile information, including their profile picture, name, bio, and follower count. The profile picture should be circular and have a white border. The name and bio should be displayed below the profile picture, and the follower count should be displayed alongside the bio.
components:
- ProfilePicture: A standalone component that displays a circular profile picture with a white border.
- ProfileInfo: A component that takes children, displaying the user's name, bio, and follower count.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProfilePicture/><ProfileInfo><h2 class=""text-lg font-bold"">{username}</h2><p>{bio}</p><p class=""text-sm text-gray-600"">{follower_count} followers</p></ProfileInfo></div>
component html:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full border-2 border-white""/>
ProfileInfo:
<div class=""flex flex-col py-4"">{children}</div>"
Featured Image Zoom Level,"description:
The UI should display a featured image with a zoom level indicator, allowing users to zoom in or out of the image. The image should be responsive, adapting to different screen sizes and devices. The zoom level indicator should be visually appealing and easy to use.
components:
- FeaturedImage: a standalone component that displays the featured image.
- ZoomLevelIndicator: a standalone component that displays the zoom level indicator.
- ZoomControl: a component that takes children (e.g., zoom in and zoom out buttons).
html:
<div class=""flex justify-center""><FeaturedImage/><ZoomControl><button>+</button><button>-</button></ZoomControl><ZoomLevelIndicator/></div>
component html:
FeaturedImage:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>
ZoomLevelIndicator:
<p>Zoom: {zoom_level}%</p>
ZoomControl:
<div class=""flex justify-center"">{children}</div>"
Counters,"description:
- The UI should display three separate counters for different statistics such as total users, projects, and downloads. Each counter will feature a large number and a label describing what the number represents. Each counter should be visually distinct but maintain a uniform style for coherence.
components:
- StatisticCounter: (Standalone)**: Displays the statistic number and its label.
- CountersContainer: (Takes children)**: A container that groups all the individual StatisticCounters.
html:
<div class=""CountersContainer""><StatisticCounter/><StatisticCounter/><StatisticCounter/></div>
component html:
StatisticCounter:
<div class=""p-4 md:w-1/3""><!-- Statistic display with large number and label --><div class=""flex flex-col items-center""><div class=""text-3xl font-bold"">{statistic_number}</div><div class=""text-sm text-gray-600"">{statistic_label}</div></div></div>
CountersContainer:
<div class=""flex flex-wrap justify-center items-center space-x-4""><!-- Children counters will be displayed here -->{children} </div>"
User Profile Cards,"description:
The UI should be a responsive, mobile-first, and accessible user profile card that displays a user's profile information, including their name, profile picture, bio, and social media links.
components:
- UserProfileCard: standalone component that renders the entire user profile card.
- ProfilePicture: standalone component that renders the user's profile picture.
- ProfileInfo: standalone component that renders the user's name and bio.
- SocialMediaLinks: standalone component that renders the user's social media links.
html:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4""><UserProfileCard/></div>
component html:
UserProfileCard:
<div class=""flex flex-col items-center mb-4""><ProfilePicture/><ProfileInfo/><SocialMediaLinks/></div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""w-24 h-24 rounded-full mb-4""/>
ProfileInfo:
<div class=""text-lg font-bold"">{user_name}</div><p class=""text-gray-600"">{bio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><a href=""{twitter_url}"" aria-label=""Twitter"" class=""text-blue-500 hover:text-blue-800 transition duration-300 ease-in-out"">Twitter</a></li><li class=""mr-4""><a href=""{github_url}"" aria-label=""GitHub"" class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">GitHub</a></li><li><a href=""{linkedin_url}"" aria-label=""LinkedIn"" class=""text-blue-500 hover:text-blue-800 transition duration-300 ease-in-out"">LinkedIn</a></li></ul>"
Call-to-action buttons,"description:
- The UI should feature a set of call-to-action (CTA) buttons that are visually appealing and easy to interact with. Each button should have a distinct color that stands out. The buttons should be sized appropriately for both desktop and mobile screens, with adequate padding and a hover effect for desktop users to indicate interactivity.
components:
- PrimaryButton: Standalone component. A button designed for the primary action, typically styled with a bold color and hover effect.
- SecondaryButton: Standalone component. A button used for secondary actions, styled differently from the primary button, usually with a less prominent color.
html:
<div class=""flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4 p-4""><PrimaryButton/><SecondaryButton/></div>
component html:
PrimaryButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Primary Action</button>
SecondaryButton:
<button class=""bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded"">Secondary Action</button>"
File uploader with drag-and-drop,"description:
The UI should be a rectangular box with a dashed border and a ""Drag and drop files here"" text inside. When a file is dragged over the box, the border should turn blue and the text should change to ""Drop files here"". When a file is dropped, the border should turn green and the text should change to ""File uploaded successfully"".
components:
- UploaderBox: standalone component that displays the drag-and-drop box
- DragAndDropText: standalone component that displays the text inside the box
html:
<div class=""max-w-md mx-auto p-4""><UploaderBox/></div>
component html:
UploaderBox:
<div class=""h-48 w-full border-2 border-dashed border-gray-300 rounded-md p-4 hover:border-blue-500 hover:text-blue-500 drop:cursor-pointer drop:border-green-500 drop:text-green-500""><DragAndDropText/></div>
DragAndDropText:
<p class=""text-lg text-gray-600"">{drag_and_drop_text}</p>"
Track element,"description:
The track element should display the track's title, artist, and album artwork. It should be responsive and accessible.
components:
- TrackElement: A standalone component representing a single track.
- TrackInfo: A component that displays the track's title and artist. It takes children.
- AlbumArtwork: A standalone component displaying the album artwork.
html:
<div class=""flex flex-wrap justify-center mb-4""><AlbumArtwork/><div class=""ml-4""><TrackInfo><TrackElement/></TrackInfo></div></div>
component html:
TrackElement:
<p class=""text-lg"">{track_title}</p><p class=""text-sm"">{artist_name}</p>
TrackInfo:
<div class=""flex flex-col"">{children}</div>
AlbumArtwork:
<img src={album_artwork_url} alt=""Album Artwork""/>"
A product recommendation component that displays a list of suggested products with images and names,"description:
The product recommendation component should display a list of suggested products in a grid layout, with each product featuring an image and a name. The layout should be responsive, with the number of columns adjusting based on screen size. On smaller screens, the products should be displayed in a single column, while on larger screens, the products should be displayed in multiple columns. The component should have a subtle background color and a slight shadow to give it depth. The product images should have a subtle border radius and a slight hover effect to indicate interactivity.
components:
- ProductRecommendation: (Takes Children): The top-level component that contains the list of suggested products.
- Product: (Standalone): A single product component that displays an image and a name.
html:
<div class=""bg-gray-100 p-4 rounded shadow-md""><h2 class=""text-lg font-bold mb-4"">Recommended Products</h2><div class=""grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4""><!-- Product components will be rendered here --></div></div>
component html:
ProductRecommendation:
<div class=""bg-gray-100 p-4 rounded shadow-md""><h2 class=""text-lg font-bold mb-4"">{header}</h2><div class=""grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"">{children} </div></div>
Product:
<div class=""flex flex-col justify-center p-4 border border-gray-200 rounded hover:border-gray-400""><img src=""{productImage}"" alt=""{productName}"" class=""w-full h-48 object-cover rounded-t""/><h3 class=""text-lg font-bold"">{productName}</h3></div>"
A social media icon component that displays a social media platform's logo and link,"description:
The social media icon component should display a social media platform's logo and link. The logo should be easily recognizable and the link should be visually distinct from the logo. The component should be responsive and adaptable to different screen sizes.
components:
- SocialMediaIcon: (Takes Children): A component that displays a social media platform's logo and link.
html:
<div class=""flex flex-wrap gap-2 justify-center mb-4""><SocialMediaIcon><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- twitter --></svg></a></SocialMediaIcon><SocialMediaIcon><a href=""{facebook_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- facebook --></svg></a></SocialMediaIcon><!-- Add more social media icons here --></div>
component html:
SocialMediaIcon:
<a href=""{link_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 transition duration-300 ease-in-out"">{children}</a>"
Countdown timer component,"description:
The UI should display a countdown timer with days, hours, minutes, and seconds remaining until a specific deadline. The timer should be responsive, accessible, and SEO-friendly.
components:
- CountdownTimer: A standalone component that displays the countdown timer.
- TimeUnit: A component that displays a single unit of time (e.g. days, hours, minutes, seconds). Takes children.
html:
<div class=""container mx-auto p-4""><CountdownTimer/></div>
component html:
CountdownTimer:
<div class=""flex justify-center mb-4""><TimeUnit>{days} days</TimeUnit><TimeUnit>{hours} hours</TimeUnit><TimeUnit>{minutes} minutes</TimeUnit><TimeUnit>{seconds} seconds</TimeUnit></div>
TimeUnit:
<div class=""text-2xl font-bold mx-2"">{children}</div>"
Text providing guidance or instructions within the context of a form field or interface element,"description:
The UI should display a help text or hint that provides guidance or instructions to the user within the context of a form field or interface element. The text should be clearly visible and easily readable.
components:
- HintText: (standalone): This component will display the help text or hint.
html:
<div class=""form-group""><label for=""fieldName"">Field Label</label><input type=""text"" id=""fieldName""/><HintText/></div>
component html:
HintText:
<span class=""text-sm text-gray-500"">{hint_text}</span>"
Footer Copyright Year,"description:
The UI should be a simple footer with a copyright notice that includes the current year.
components:
- FooterCopyright: A standalone component that displays a copyright notice with the current year.
html:
<footer><FooterCopyright/></footer>
component html:
FooterCopyright:
<p class=""text-sm text-gray-500"">© {current_year} All rights reserved.</p>"
Affiliate program display,"description:
The UI should display a summary of an affiliate program, including the program's name, description, commission rate, and a call-to-action (CTA) button to join the program. The UI should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- AffiliateProgramCard: A standalone component that displays the affiliate program's details.
- ProgramName: A standalone component that displays the affiliate program's name.
- ProgramDescription: A standalone component that displays the affiliate program's description.
- CommissionRate: A standalone component that displays the affiliate program's commission rate.
- JoinProgramButton: A standalone component that displays a CTA button to join the program.
html:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4""><AffiliateProgramCard/></div>
component html:
AffiliateProgramCard:
<div class=""flex flex-col p-4""><ProgramName/><ProgramDescription/><CommissionRate/><JoinProgramButton/></div>
ProgramName:
<h2 class=""text-lg font-bold"">{program_name}</h2>
ProgramDescription:
<p class=""text-gray-600"">{program_description}</p>
CommissionRate:
<p class=""text-lg"">{commission_rate}% commission</p>
JoinProgramButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Join Program</button>"
Filter options,"description:
The UI should be a filter options component that allows users to select options to filter a list of items. It should be responsive, mobile-first, and accessible. On desktop, it should be a horizontal list of options, and on mobile, it should be a vertical list.
components:
- FilterOption: A standalone component that represents a single filter option.
- FilterOptionsList: A component that takes children (FilterOption components) and renders them in a list.
html:
<div class=""flex flex-wrap md:flex-nowrap""><FilterOptionsList><FilterOption/><!-- option 1 --><FilterOption/><!-- option 2 --><!-- more options --></FilterOptionsList></div>
component html:
FilterOption:
<label class=""block mb-2 md:mr-4""><input type=""checkbox"" class=""mr-2""/>{option_label}</label>
FilterOptionsList:
<ul class=""flex flex-wrap md:flex-nowrap"">{children}</ul>"
Replies,"description:
The UI should be a simple reply interface with a text input field, a send button, and a display section for previous replies. The interface should be responsive, mobile-first, and accessible.
components:
- ReplyInput: a standalone component that displays a text input field and a send button.
- ReplyList: a component that takes children, which are individual `ReplyItem` components.
- ReplyItem: a standalone component that displays a single reply.
html:
<div class=""max-w-md mx-auto p-4""><ReplyInput/><ReplyList><ReplyItem/><!-- Add more ReplyItem components here --></ReplyList></div>
component html:
ReplyInput:
<div class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your reply...""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send</button></div>
ReplyList:
<ul class=""list-none mb-4"">{children}</ul>
ReplyItem:
<li class=""py-2 border-b border-gray-200""><p class=""text-sm"">{reply_text}</p><p class=""text-xs text-gray-500"">{reply_author}</p></li>"
Calendar display,"description:
The UI should display a calendar with the current month and year, with each day of the month listed in a grid format. The calendar should be responsive and accessible on different devices.
components:
- CalendarHeader: A standalone component that displays the current month and year.
- CalendarGrid: A component that contains a grid of `DayCell` components, takes children to populate the calendar grid.
html:
<div class=""max-w-md mx-auto p-4""><CalendarHeader/><CalendarGrid><!-- grid of days will be inserted here --></CalendarGrid></div>
component html:
CalendarHeader:
<div class=""flex justify-between mb-4""><h2 class=""text-lg"">{current_month} {current_year}</h2><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Prev</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next</button></div>
CalendarGrid:
<table class=""w-full""><tbody><tr>{children} <!-- DayCell components will be inserted here --></tr><!-- additional rows will be inserted here --></tbody></table>"
Product Description Text,"description:
The UI should display a product description text, which is a brief summary of the product's features and benefits. The text should be readable on various devices and should be accessible to screen readers.
components:
- ProductDescriptionText: standalone component that renders the product description text.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductDescriptionText/></div>
component html:
ProductDescriptionText:
<p class=""text-lg leading-relaxed"">{product_description_text}</p>"
Friends List: List of friends with profile links,"description:
The UI should be a responsive list of friends with profile links. The list should be displayed in a grid on larger screens and a vertical list on smaller screens. Each friend's name should be a link to their profile.
components:
- FriendCard: (standalone): a single friend's information with a profile link
- FriendsList: (takes children): a container for the list of friends
html:
<div class=""container mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Friends</h2><FriendsList><!-- friend cards will be inserted here --><FriendCard/><FriendCard/><!-- ... --></FriendsList></div>
component html:
FriendCard:
<div class=""flex items-center mb-4""><img src={profile_image_url} alt=""Profile image"" class=""w-12 h-12 rounded-full mr-4""/><a href={profile_url} class=""text-blue-600 hover:text-blue-900"">{friend_name}</a></div>
FriendsList:
<ul class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</ul>"
"A sidebar component that displays filters, categories, and a call-to-action button","description:
The sidebar should be a compact, responsive, and visually appealing component that displays filters, categories, and a call-to-action (CTA) button. It should be accessible on various screen sizes, with a mobile-first approach. On smaller screens, the sidebar should take up the full width, while on larger screens, it should be a narrower column.
components:
- SidebarContainer: (Takes Children): The top-level container for the sidebar, which wraps all the other components.
- FilterComponent: (Standalone): Displays a list of filters with checkboxes or radio buttons.
- CategoryList: (Standalone): Displays a list of categories with links or buttons.
- CallToActionButton: (Standalone): A prominent button that encourages the user to take action.
html:
<div class=""md:flex md:flex-row-reverse lg:w-1/3 xl:w-1/4 p-4 bg-gray-100 shadow-md""><SidebarContainer><FilterComponent/><CategoryList/><CallToActionButton/></SidebarContainer></div>
component html:
SidebarContainer:
<div class=""flex-1 p-4 bg-white shadow-md"">{children}</div>
FilterComponent:
<div class=""mb-4""><h5 class=""font-bold mb-2"">Filters</h5><ul><li class=""flex items-center mb-2""><input type=""checkbox"" id=""{filter_id}""/><label class=""ml-2"" for=""{filter_id}"">{filter_name}</label></li><!-- More filter items --></ul></div>
CategoryList:
<div class=""mb-4""><h5 class=""font-bold mb-2"">Categories</h5><ul><li class=""mb-2""><a href=""#"" class=""text-blue-600 hover:text-blue-900"">{category_name}</a></li><!-- More category items --></ul></div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
A loading indicator component with a spinning wheel and a gray background,"description:
The loading indicator component should be a circular spinner with a gray background that takes center stage on the page. The spinner should be animated to rotate, indicating that the application is loading. The gray background should provide sufficient contrast to make the spinner visible. On smaller screens, the loading indicator should be larger to ensure it remains visible. On larger screens, the loading indicator can be smaller and more subtle.
components:
- LoadingIndicator: (Standalone): This component displays a spinning wheel on a gray background.
html:
<div class=""h-screen w-full flex justify-center items-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""bg-gray-200 h-48 w-48 md:h-24 md:w-24 lg:h-20 lg:w-20 xl:h-16 xl:w-16 rounded-full flex justify-center items-center""><div class=""animate-spin h-12 w-12 md:h-8 md:w-8 lg:h-6 lg:w-6 xl:h-4 xl:w-4 border-4 border-solid border-gray-400 rounded-full""><!-- spinning wheel --></div></div>"
"""Add to Cart"" button with a green background and white text","description:
The UI should be a simple button with a green background and white text that says ""Add to Cart"". The button should be responsive, accessible, and easy to use on different screen sizes.
components:
- AddToCartButton: (Standalone): This component is a standalone button with a green background and white text that says ""Add to Cart"". On small screens, the button should be full-width and have a large font size. On medium and large screens, the button should be smaller and have a smaller font size.
html:
<AddToCartButton/>
component html:
AddToCartButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>"
Shipping and delivery options,"description:
The UI should display shipping and delivery options in a clear and organized manner. It should be responsive, easy to read, and accessible on various devices.
components:
- DeliveryOptionCard: A standalone component that displays a single delivery option.
- ShippingOptionsList: A component that takes children and displays a list of delivery options.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Shipping and Delivery Options</h2><ShippingOptionsList><DeliveryOptionCard/><DeliveryOptionCard/><!-- Add more DeliveryOptionCard components as needed --></ShippingOptionsList></section>
component html:
DeliveryOptionCard:
<article class=""border p-4 mb-4""><h3 class=""text-lg font-bold"">{option_name}</h3><p>{description}</p><p>Estimated delivery time: {delivery_time}</p><p>Cost: {cost}</p><!-- Add more details as needed --></article>
ShippingOptionsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Forum Categories and Subforums,"description:
The UI should display a list of forum categories, each containing a title and a list of subforums. Each subforum should also display a title and a brief description.
components:
- ForumCategory: standalone component that displays a category title and a list of subforums.
- Subforum: standalone component that displays a subforum title and description.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Forum Categories</h1><ul><ForumCategory/><ForumCategory/><!-- Add more ForumCategory components here --></ul></div>
component html:
ForumCategory:
<li class=""py-2""><h2 class=""text-lg font-bold"">{category_title}</h2><ul><Subforum/><Subforum/><!-- Add more Subforum components here --></ul></li>
Subforum:
<li class=""py-2""><h3 class=""text-md font-bold"">{subforum_title}</h3><p>{subforum_description}</p></li>"
Social Sharing: Buttons for sharing content,"description:
The UI should be a horizontal row of social media sharing buttons, each with an icon and a brief label. The buttons should be evenly spaced and have a subtle hover effect. On mobile devices, the buttons should stack vertically to accommodate smaller screens.
components:
- SocialShareButton: Standalone component, represents a single social media sharing button.
- SocialShareButtonGroup: Component that takes children, represents the container for the social media sharing buttons.
html:
<div class=""flex justify-center sm:flex-row flex-wrap""><SocialShareButtonGroup><SocialShareButton/><SocialShareButton/><SocialShareButton/><!-- Add more social media buttons here --></SocialShareButtonGroup></div>
component html:
SocialShareButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class={`fab fa-{social_media_icon}`}></i><span class=""ml-2"">{social_media_label}</span></button>
SocialShareButtonGroup:
<div class=""flex flex-wrap justify-center md:flex-row"">{children}</div>"
Resource download links,"description:
The UI should display a list of resource download links, with each link showing the resource name, file size, and a download button. The list should be responsive, mobile-first, and accessible.
components:
- ResourceDownloadLink: A standalone component that displays a single resource download link.
- ResourceDownloadList: A component that takes children, which are ResourceDownloadLink components, and displays them in a list.
html:
<div class=""max-w-md mx-auto p-4 mt-6""><h2 class=""text-2xl font-bold mb-4"">Resource Downloads</h2><ResourceDownloadList><ResourceDownloadLink/><ResourceDownloadLink/><!-- Add more ResourceDownloadLink components here --></ResourceDownloadList></div>
component html:
ResourceDownloadLink:
<a href=""{download_url}"" class=""flex items-center justify-between py-4 border-b border-gray-200""><span class=""text-lg"">{resource_name}</span><span class=""text-sm text-gray-600"">{file_size} KB</span><button class=""bg-orange-500 hover:bg-orange-700 text-white py-2 px-4 rounded"">Download</button></a>
ResourceDownloadList:
<ul class=""list-none mb-0"">{children}</ul>"
A search bar with a white background and light grey placeholder text,"description:
The search bar should be a prominent and easily accessible component of the UI. It should have a clean and minimal design, making it easy for users to focus on searching. The search bar should be responsive, adjusting its size and layout based on the screen size.
components:
- SearchBar: (Standalone): The search bar component is a standalone component that allows users to input search queries. It should have a white background and light grey placeholder text. On smaller screens, it should take up the full width of the screen, and on larger screens, it should have a maximum width.
html:
<SearchBar/>
component html:
SearchBar:
<div class=""bg-white rounded-md shadow-md p-2""><input type=""search"" placeholder={placeholder_text} class=""w-full p-2 text-lg text-gray-400 focus:outline-none""/><svg><!-- search --></svg></div>"
Reply controls,"description:
The UI should be a reply control that allows the user to reply to a message. It should have a text input field, a send button, and an optional cancel button. The reply control should be responsive and mobile-friendly.
components:
- ReplyInput: (standalone): A text input field for the user to enter their reply.
- SendButton: (standalone): A button to send the reply.
- CancelButton: (standalone, optional): A button to cancel the reply.
- ReplyControl: (takes children): The container component that holds the reply input, send button, and cancel button.
html:
<div class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><ReplyControl><ReplyInput/><SendButton/><CancelButton/></ReplyControl></div>
component html:
ReplyInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type your reply...""/>
SendButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button>
CancelButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{cancel_label}</button>
ReplyControl:
<div class=""flex flex-wrap -mx-3 mb-6"">{children}</div>"
Callout Box Link,"description:
A callout box link should have a prominent background color, a bold title, and a descriptive text. It should also have a clear call-to-action (CTA) link. On mobile, the text should be concise and the CTA should be prominent. On larger screens, the text can be longer and the CTA should be secondary to the title.
components:
- CalloutBoxLink: standalone component
- CalloutBox: standalone component, contains `CalloutBoxLink`
- CalloutTitle: standalone component, contained within `CalloutBox`
- CalloutText: standalone component, contained within `CalloutBox`
- CalloutCTA: standalone component, contained within `CalloutBoxLink`
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded-lg shadow-md""><CalloutBox/></div>
component html:
CalloutBoxLink:
<a href=""{link_url}"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><CalloutCTA/></a>
CalloutBox:
<div class=""p-4 md:p-6 lg:p-8 bg-teal-500 text-white rounded-lg""><CalloutTitle/><CalloutText/><CalloutBoxLink/></div>
CalloutTitle:
<h2 class=""text-lg md:text-xl lg:text-2xl font-bold"">{title}</h2>
CalloutText:
<p class=""text-sm md:text-base lg:text-lg"">{text}</p>
CalloutCTA:
<span class=""text-sm"">{cta_text}</span>"
Promotional banner with a discount offer and countdown timer,"description:
The UI should have a prominent banner that catches the user's attention, with a clear discount offer and a countdown timer to create a sense of urgency. The banner should be responsive, with a layout that adapts to different screen sizes.
components:
- PromoBanner: (Takes Children): A container component for the promotional banner, with a background color and padding. On small screens, it should take up the full width of the screen, and on larger screens, it should have a max width to prevent it from becoming too wide.
- DiscountOffer: (Standalone): A component that displays the discount offer, with a highlight color to draw attention.
- CountdownTimer: (Standalone): A component that displays the countdown timer, with a clear and easy-to-read format.
html:
<div class=""flex justify-center mb-4""><PromoBanner><DiscountOffer/><CountdownTimer/></PromoBanner></div>
component html:
PromoBanner:
<div class=""bg-orange-500 py-4 px-6 md:max-w-md lg:max-w-lg xl:max-w-xl"">{children}</div>
DiscountOffer:
<div class=""text-xl font-bold text-white"">Get {discount_percent}% off your first purchase!</div>
CountdownTimer:
<div class=""text-lg font-bold text-white"">Offer ends in: {days} days, {hours} hours, {minutes} minutes, {seconds} seconds</div>"
Comment component with a white background and a subtle shadow effect,"description:
The Comment component should have a clean and minimalistic design with a white background and a subtle shadow effect to give it some depth. The text should be easy to read with a sufficient font size and line spacing. The component should scale well on different screen sizes, with the text wrapping to the next line when necessary.
components:
- Comment: (Standalone): Displays a single comment with a white background and a subtle shadow effect.
html:
<div class=""max-w-lg mx-auto p-4 md:p-6 lg:p-8""><Comment/></div>
component html:
Comment:
<div class=""bg-white shadow-sm p-4 rounded-md""><p class=""text-gray-600"">{comment_text}</p><!-- avatar icon --><svg><!-- user --></svg><span class=""text-gray-400"">{comment_author}</span></div>"
Call-to-Action: Prominent button or link,"description:
A prominent call-to-action (CTA) button or link that stands out on the page, encouraging users to take a specific action.
components:
- CallToActionButton: Standalone component that displays a prominent CTA button.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:pt-12""><!-- Hero section content here --><CallToActionButton/><!-- Additional content or footer here --></div>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
"A dark grey footer with a white outline, featuring links to social media, copyright information, and a terms of service link","description:
The footer should have a dark grey background with a white outline, making it stand out from the rest of the UI. It should be easily readable on different screen sizes and have a clear hierarchy of information. The social media links should be prominent, with the copyright information and terms of service link below.
components:
- Footer: (Takes Children): The top-level footer component that contains all the footer content.
- SocialMediaLinks: (Standalone): A component that displays links to social media platforms.
- CopyrightInfo: (Standalone): A component that displays copyright information.
- TermsOfServiceLink: (Standalone): A component that displays a link to the terms of service.
html:
<footer class=""bg-darkGrey p-4 md:p-6 lg:p-8 xl:p-10""><Footer><SocialMediaLinks/><CopyrightInfo/><TermsOfServiceLink/></Footer></footer>
component html:
Footer:
<div class=""container mx-auto p-4 md:p-6 lg:p-8 xl:p-10"">{children}</div>
SocialMediaLinks:
<ul class=""flex justify-center mb-4 md:mb-6 lg:mb-8 xl:mb-10""><li class=""mr-4 md:mr-6 lg:mr-8 xl:mr-10""><a href={facebook_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-facebook"" aria-hidden=""true""></i></a></li><li class=""mr-4 md:mr-6 lg:mr-8 xl:mr-10""><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-twitter"" aria-hidden=""true""></i></a></li><li class=""mr-4 md:mr-6 lg:mr-8 xl:mr-10""><a href={instagram_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-instagram"" aria-hidden=""true""></i></a></li></ul>
CopyrightInfo:
<p class=""text-sm md:text-base lg:text-lg xl:text-xl text-grey-lighter"">&copy; {year} {company_name}. All rights reserved.</p>
TermsOfServiceLink:
<p class=""text-sm md:text-base lg:text-lg xl:text-xl text-grey-lighter""><a href={terms_of_service_url} target=""_blank"" rel=""noopener noreferrer"">Terms of Service</a></p>"
A loading animation with a rotating wheel icon,"description:
The UI should feature a prominent rotating wheel icon to indicate loading, surrounded by a subtle background that catches the user's attention. The wheel icon should rotate smoothly to create a sense of dynamism. The UI should scale well on different screen sizes, ensuring the wheel icon remains prominent and easy to see.
components:
- LoadingIndicator: (Standalone): This component renders a rotating wheel icon to indicate loading. On small screens (mobile), the wheel icon should be relatively large (around 40px in diameter) and centered horizontally. On medium screens (tablet), the wheel icon should grow to around 60px in diameter. On large screens (desktop), the wheel icon should be around 80px in diameter.
html:
<div class=""flex justify-center h-screen""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""flex justify-center""><div class=""animate-spin rounded-full border-4 border-gray-200 border-t-4 border-t-purple-600 w-10 h-10 md:w-12 md:h-12 lg:w-16 lg:h-16""><span class=""sr-only"">Loading...</span></div></div>"
"A call-to-action (CTA) button with a green background and white text ""Shop Now""","description:
The CTA button should have a prominent green background to grab the user's attention, with white text ""Shop Now"" that's easy to read. The button should be responsive, with a moderate size on larger screens and a smaller size on mobile devices.
components:
- CtaButton: (Standalone): A green button with white text ""Shop Now"".
html:
<div class=""flex justify-center mb-4""><CtaButton/></div>
component html:
CtaButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Shop Now</button>"
Table rows,"description:
A table with multiple rows, with each row containing some data.
components:
- TableRow: takes children, represents a single table row
- TableCell: takes children, represents a single table cell within a row
html:
<table class=""table-auto mx-auto mt-4""><tbody><TableRow><TableCell>{cellData1}</TableCell><TableCell>{cellData2}</TableCell><TableCell>{cellData3}</TableCell></TableRow><TableRow><TableCell>{cellData4}</TableCell><TableCell>{cellData5}</TableCell><TableCell>{cellData6}</TableCell></TableRow><!-- Add more TableRow components as needed --></tbody></table>
component html:
TableRow:
<tr class=""border-b border-gray-200"">{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Course Cards/Grids,"description:
The UI should display a responsive grid of course cards, with each card showing the course title, instructor, and a call-to-action (CTA) button. The grid should be mobile-first, with cards stacking vertically on small screens and displaying in a grid on larger screens.
components:
- CourseCard: (standalone): A single course card component
- CourseGrid: (takes children): A container component that holds multiple `CourseCard` components
html:
<div class=""container mx-auto p-4""><CourseGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components here --></CourseGrid></div>
component html:
CourseCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg"">{course_title}</h3><p class=""text-gray-600"">{instructor}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text} </button></div>
CourseGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Footer Newsletter Text,"description:
The UI should display a brief text introducing the newsletter, a text input field to enter an email address, and a call-to-action button to submit the email address.
components:
- NewsletterText: A standalone component displaying the introductory text.
- NewsletterInput: A standalone component containing a text input field for entering an email address.
- SubscribeButton: A standalone component displaying a call-to-action button to submit the email address.
html:
<footer><NewsletterText/><NewsletterInput/><SubscribeButton/></footer>
component html:
NewsletterText:
<p class=""text-lg xl:text-xl font-bold"">Stay up-to-date with our latest news and updates!</p>
NewsletterInput:
<input class=""w-full xl:w-1/2 p-2 pl-10 text-sm text-gray-700"" type=""email"" placeholder=""Enter your email address...""/>
SubscribeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Leaderboards and Rankings,"description:
A simple leaderboard and ranking system that displays a table with usernames, rankings, and scores.
components:
- LeaderboardHeader: A standalone component that displays the header of the leaderboard table.
- RankingTable: A component that takes children and displays the entire leaderboard table.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6""><RankingTable><LeaderboardHeader/><!-- Leaderboard rows will be rendered here --></RankingTable></div>
component html:
LeaderboardHeader:
<thead><tr><th class=""text-left"">Rank</th><th class=""text-left"">Username</th><th class=""text-right"">Score</th></tr></thead>
RankingTable:
<div class=""overflow-x-auto""><table class=""w-full"">{children} </table></div>"
"Banner displaying alerts, messages, or announcements","description:
The UI should be a horizontal banner that displays alerts, messages, or announcements. It should be visually prominent, with a noticeable background color and text color. The banner should be responsive, meaning it should adapt to different screen sizes and devices.
components:
- AlertBanner: A standalone component that displays an alert, message, or announcement.
html:
<div class=""max-w-md mx-auto p-4""><AlertBanner/></div>
component html:
AlertBanner:
<div class=""bg-orange-500 text-white p-4 rounded""><p>{alert_message}</p><button class=""bg-white text-orange-500 hover:bg-orange-700 hover:text-white transition duration-300 ease-in-out py-2 px-4 rounded"">Dismiss</button></div>"
Pinned messages with timestamp and author display,"description:
The UI should display a list of pinned messages, each with a timestamp and author information. The messages should be displayed in a clean and readable format, with the timestamp and author information clearly visible.
components:
- PinnedMessage: A standalone component that displays a single pinned message, including the message text, timestamp, and author information.
- PinnedMessageList: A component that takes children, which is a list of `PinnedMessage` components.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Pinned Messages</h2><PinnedMessageList><PinnedMessage/><PinnedMessage/><!-- additional pinned messages here --></PinnedMessageList></div>
component html:
PinnedMessage:
<div class=""flex items-center mb-2""><span class=""text-gray-600"">{author_name}</span><span class=""text-gray-400 text-sm ml-2"">{timestamp}</span><p class=""ml-4"">{message_text}</p></div>
PinnedMessageList:
<ul class=""list-none mb-0"">{children}</ul>"
"Profile Navigation (e.g. tabs, sidebar)","description:
- A responsive sidebar for larger screens that becomes a top navigation bar on smaller screens. This UI should be clean with links for different sections of a user profile (e.g., Overview, Settings, Messages, Friends). Highlights the active section visually.
components:
- ProfileNavigation: Standalone component that encapsulates the entire navigation logic.
- NavigationLink: Component that takes children and is used to render individual navigation links.
html:
<ProfileNavigation/>
component html:
ProfileNavigation:
<!-- Profile navigation with responsive design --><nav class=""bg-gray-700 p-4""><ul class=""flex flex-col md:flex-row md:justify-start""><NavigationLink><a href=""/profile/overview"" class=""text-white px-2 py-1 hover:bg-gray-900"">Overview</a></NavigationLink><NavigationLink><a href=""/profile/settings"" class=""text-white px-2 py-1 hover:bg-gray-900"">Settings</a></NavigationLink><NavigationLink><a href=""/profile/messages"" class=""text-white px-2 py-1 hover:bg-gray-900"">Messages</a></NavigationLink><NavigationLink><a href=""/profile/friends"" class=""text-white px-2 py-1 hover:bg-gray-900"">Friends</a></NavigationLink></ul></nav>
NavigationLink:
<!-- Reusable navigation link component --><li class=""border-b md:border-0"">{children} </li>"
Product image placeholder with a light gray background and a dashed border,"description:
The UI should be a simple product image placeholder with a light gray background and a dashed border. It should be responsive, meaning it should scale proportionally on different screen sizes. On smaller screens, the placeholder should be smaller, and on larger screens, it should be larger.
components:
- ImagePlaceholder: (Standalone): A product image placeholder with a light gray background and a dashed border.
html:
<ImagePlaceholder/>
component html:
ImagePlaceholder:
<div class=""bg-gray-100 border-dashed border-2 rounded-md p-4""><!-- placeholder content --></div>"
"Design a product card with an image, product name, price, and rating (in stars)","description:
The product card should be a compact, visually appealing component that displays essential product information. On larger screens, it should be wide enough to display the image, product name, price, and rating in a single row. On smaller screens, it should adapt to a stacked layout to maintain readability. The image should be prominent, with a subtle shadow to add depth. The product name should be bold and prominent, with the price and rating displayed clearly below.
components:
- ProductCard: (Takes Children): A container component for the product information.
- ProductImage: (Standalone): Displays the product image.
- ProductName: (Standalone): Displays the product name.
- ProductPrice: (Standalone): Displays the product price.
- ProductRating: (Standalone): Displays the product rating in stars.
html:
<div class=""flex flex-wrap md:flex-nowrap mb-4 md:mb-6 lg:mb-8""><ProductCard><ProductImage/><div class=""flex-1 pl-4 md:pl-6 lg:pl-8""><ProductName/><ProductPrice/><ProductRating/></div></ProductCard></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8"">{children}</div>
ProductImage:
<img src=""{image_src}"" alt=""{product_name}"" class=""w-full md:w-40 lg:w-48 mb-2 md:mb-4 lg:mb-6 rounded""/>
ProductName:
<h2 class=""text-lg md:text-2xl lg:text-3xl font-bold"">{product_name}</h2>
ProductPrice:
<p class=""text-lg md:text-xl lg:text-2xl"">{price}</p>
ProductRating:
<div class=""flex"">{stars} <span class=""text-sm md:text-base lg:text-lg"">({rating})</span></div><!-- stars will be a repeated element, e.g., <span class=""inline-block w-4 h-4 bg-yellow-400 rounded-full""></span>-->"
"A ""Load More"" button with a dark grey background and white text","description:
The UI should consist of a single ""Load More"" button with a dark grey background and white text. The button should be centered and have a subtle box shadow to give it some depth. On smaller screens, the button should be full-width to make it easy to tap. On larger screens, the button should have some padding on the sides to make it stand out.
components:
- LoadMoreButton: (Standalone): A button with a dark grey background and white text that says ""Load More"". On small screens, it should be full-width with a minimal padding. On larger screens, it should have some padding on the sides.
html:
<div class=""flex justify-center""><LoadMoreButton/></div>
component html:
LoadMoreButton:
<button class=""bg-dark-grey text-white hover:bg-dark-grey-hover py-2 px-4 rounded shadow-md"">Load More</button>"
Text area,"description:
The UI should feature a simple, responsive text area designed for user input, accommodating a reasonable amount of text. It should be clearly visible with a border and perhaps a subtle background color to distinguish it from the rest of the UI. Padding around the text area should ensure the text does not touch the edges, enhancing readability and user comfort.
components:
- TextArea: This is a standalone component. It encapsulates a text input area where users can type multi-line text.
html:
<div class=""container mx-auto p-4""><TextArea/></div>
component html:
TextArea:
<!-- TextArea component: A multi-line area for user input with styled borders and padding --><textarea class=""w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400"" placeholder=""Type here..."" rows=""4"" aria-label=""Input area""></textarea>"
Effects (animation),"description:
- Since the requirement is vague, I'll design a simple text-based UI that will animate on hover. This could represent a common interaction effect in UIs like button hover effects for feedback.
components:
- HoverEffectText: Standalone; this is the component that will change its appearance when hovered over with a mouse or focused via keyboard navigation.
html:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Simple Hover Effect</title><link href=""https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"" rel=""stylesheet""></head><body class=""flex justify-center items-center h-screen bg-gray-100""><HoverEffectText/></body></html>
component html:
HoverEffectText:
<!-- HoverEffectText Component: An element that animates its color and scale on hover --><div tabindex=""0"" class=""px-6 py-3 bg-blue-500 text-white font-bold rounded transition duration-300 ease-in-out hover:bg-blue-600 hover:scale-110 focus:bg-blue-600 focus:scale-110 outline-none"">Hover or Focus Me!</div>"
Breadcrumb Home Icon,"description:
The UI should display a breadcrumb navigation with a home icon at the beginning. The home icon should be a clickable link.
components:
- HomeIcon: A standalone component that displays a clickable home icon.
- Breadcrumb: A component that takes children and displays them as a breadcrumb navigation.
html:
<nav aria-label=""Breadcrumb"" class=""flex flex-wrap""><HomeIcon/><Breadcrumb><!-- breadcrumb items will be inserted here --></Breadcrumb></nav>
component html:
HomeIcon:
<a href=""/"" class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><i class=""fas fa-home""></i></a>
Breadcrumb:
<ul class=""flex flex-wrap"">{children}</ul>"
File input field,"description:
- A file input UI typically features a button that users can click to open their file explorer. Once a file is selected, the file name is displayed next to the button.
components:
- FileInput: A standalone component including a file input element and a label.
- FileNameDisplay: A standalone component that displays the selected file name.
html:
<div class=""flex flex-col space-y-2""><FileInput/><FileNameDisplay/></div>
component html:
FileInput:
<!-- FileInput: Provides an interface for users to upload files --><label for=""fileInput"" class=""block text-sm font-medium text-gray-700"">Upload file</label><input id=""fileInput"" name=""fileInput"" type=""file"" class=""block w-full text-sm text-gray-900 file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-gray-50 file:text-gray-700 hover:file:bg-gray-100""/>
FileNameDisplay:
<!-- FileNameDisplay: Shows the name of the selected file --><span class=""text-sm text-gray-700"">{selectedFileName}</span>"
Repository Search and Filtering Tool,"description:
- A header with a title ""Repository Search""
   - A search input field where users can type a repository name to search for in a realistic Git repository hosting environment like GitHub or GitLab.
   - A dropdown filter selector to filter search results by language (e.g., ""JavaScript"", ""Python"").
   - A ""Search"" button to initiate the search.
   - A section below to display search results, listing repositories with their names, a brief description, and the primary language.
   - Responsive layout with mobile-friendly usability.
components:
- SearchHeader: (Standalone): A header component displaying the title.
- SearchForm: (Standalone): A form containing the search input, language filter, and search button.
- RepositoryList: (Standalone): A component to display the results of the search.
- RepositoryItem: (Takes children): Represents a single repository in the list, showing specific details like the name, description, and primary language.
html:
<div class=""container mx-auto px-4""><SearchHeader/><SearchForm/><RepositoryList/></div>
component html:
SearchHeader:
<header class=""text-center py-4""><h1 class=""text-2xl font-bold"">Repository Search</h1></header>
SearchForm:
<form class=""flex flex-col gap-4 p-4""><input type=""text"" placeholder=""Search repositories..."" class=""p-2 border rounded""/><select class=""p-2 border rounded""><option value=""All"">All Languages</option><option value=""JavaScript"">JavaScript</option><option value=""Python"">Python</option><!-- Additional languages can be added here --></select><button type=""submit"" class=""bg-blue-500 text-white p-2 rounded hover:bg-blue-600"">Search</button></form>
RepositoryList:
<div><RepositoryItem><h2 class=""font-semibold"">{repositoryName}</h2><p>{repositoryDescription}</p><span class=""text-gray-600"">{repositoryLanguage}</span></RepositoryItem><!-- More RepositoryItem components can be listed here based on search results --></div>
RepositoryItem:
<div class=""border-b border-gray-200 p-4"">{children} </div>"
"A grid of news article cards, each with:","description:
The UI should be a responsive grid of news article cards, with each card featuring a headline, summary, and image. The cards should be arranged in a grid layout that adapts to different screen sizes, with a maximum of 3 columns on large screens and a single column on small screens. The cards should have a consistent design, with a clear hierarchy of information and visual elements that draw attention to the most important details.
components:
- NewsCard: (Takes Children): A single news article card, featuring a headline, summary, and image.
- NewsGrid: (Takes Children): A grid container that holds multiple `NewsCard` components.
html:
<NewsGrid><NewsCard><!-- first news card content --></NewsCard><NewsCard><!-- second news card content --></NewsCard><!-- more news cards --></NewsGrid>
component html:
NewsCard:
<div class=""bg-white shadow-md rounded-sm p-4 md:p-6 lg:p-8""><img src={image_url} alt={image_alt} class=""w-full h-48 object-cover mb-4""/><h2 class=""text-lg font-bold"">{headline}</h2><p class=""text-gray-600"">{summary}</p>{children}</div>
NewsGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-4"">{children}</div>"
Travel itinerary planner,"description:
The UI should be a responsive, mobile-first travel itinerary planner that displays a list of trips, each with a title, destination, and dates. Each trip should have an ""Edit"" and ""Delete"" button. The UI should be accessible and SEO-friendly.
components:
- TripCard: A standalone component that displays a single trip's details.
- TripList: A component that takes children, which are multiple `TripCard` components.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Travel Itinerary Planner</h1><TripList><TripCard/><TripCard/><!-- Add more TripCard components here --></TripList></div>
component html:
TripCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{trip_title}</h2><p>Destination: {destination}</p><p>Dates: {start_date} - {end_date}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button></div>
TripList:
<ul class=""list-none mb-4"">{children}</ul>"
"Links to documentation, support, and contact page in a horizontal navigation menu","description:
The UI should be a simple horizontal navigation menu with three links to documentation, support, and contact page. The menu should be responsive, with the links stacked vertically on small screens and aligned horizontally on larger screens. The menu should be accessible and follow a consistent color palette.
components:
- Nav: (Takes Children): The top-level navigation component that wraps the navigation links.
- NavItem: (Takes Children): An individual navigation item that contains a link to a page.
html:
<!-- Navigation menu --><nav class=""flex justify-between items-center py-4 md:px-4 lg:px-12""><Nav><NavItem><a href=""/docs"">Documentation</a></NavItem><NavItem><a href=""/support"">Support</a></NavItem><NavItem><a href=""/contact"">Contact</a></NavItem></Nav></nav>
component html:
Nav:
<!-- Container for navigation items --><nav class=""flex justify-between items-center py-4 md:px-4 lg:px-12"">{children}</nav>
NavItem:
<!-- Individual navigation item --><li class=""mr-4 md:mr-8 lg:mr-12""><a href=""{href}"" class=""text-gray-600 hover:text-gray-900"">{children}</a></li>"
WYSIWYG/Rich Text Editors,"description:
The UI should resemble a typical text editor with formatting options, such as bold, italic, and font sizes. It should also have a toolbar with buttons for undo, redo, and formatting options.
components:
- EditorToolbar: (standalone): The top toolbar with formatting options.
- EditorInput: (takes children): The input field where the user can enter and format text.
- UndoButton: (standalone): A button to undo the last change.
- RedoButton: (standalone): A button to redo the last change.
- FormatButton: (standalone): A dropdown button to select font sizes and formatting options.
html:
<div class=""flex flex-col h-screen""><EditorToolbar/><EditorInput><!-- The input field where the user can enter and format text --></EditorInput></div>
component html:
EditorToolbar:
<div class=""flex justify-between bg-gray-200 p-2""><UndoButton/><RedoButton/><FormatButton/><!-- More formatting options can be added here --></div>
EditorInput:
<textarea class=""w-full p-4 h-screen overflow-auto"" `{height}`>{children}</textarea>
UndoButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-undo""></i>Undo</button>
RedoButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded""><i class=""fas fa-redo""></i>Redo</button>
FormatButton:
<div class=""relative""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 rounded"">Format </button><div class=""absolute top-full left-0 bg-white border shadow-md p-2 hidden""><!-- Dropdown menu with font sizes and formatting options --><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Bold</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Italic</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-100"">Font Size: {font_size}</a></li></ul></div></div>"
Terms and conditions link,"description:
- The UI should feature a simple, easily accessible link that users can click to open the terms and conditions page. This link should be styled discreetly but should be noticeable enough for users to find.
components:
- TermsLink: A standalone component that outputs a text link, pointing to a terms and conditions page.
html:
<div class=""flex justify-center p-4""><TermsLink/></div>
component html:
TermsLink:
<a href=""{terms_link_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">Terms & Conditions</a>"
Paginated list component with a blue background and white text,"description:
The Paginated List component should have a blue background with white text, making it easy to read. The list items should be spaced out evenly, with a subtle shadow to give it a sense of depth. On smaller screens, the list items should stack vertically, while on larger screens, they should be displayed horizontally with a maximum of 3 items per row.
components:
- PaginationList: (Takes Children): A container component that wraps around the paginated list items and provides navigation between pages.
- PaginationItem: (Standalone): An individual list item with a blue background and white text.
html:
<PaginationList><!-- pagination items will be rendered here --></PaginationList>
component html:
PaginationList:
<div class=""bg-blue-500 py-4 px-6flex flex-wrap justify-center"">{children} <div class=""flex justify-center mt-4""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">Previous</button><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">Next</button></div></div>
PaginationItem:
<div class=""bg-blue-500 px-4 py-2 text-white rounded shadow-md""><p>{pagination_item_text}</p></div>"
Product Rating Count,"description:
The UI should display the total number of product ratings and the average rating, with an optional ""Write a review"" button. The design should be responsive, mobile-first, and accessible.
components:
- ProductRatingCount: A standalone component that displays the total number of ratings.
- AverageRating: A standalone component that displays the average rating.
- WriteAReviewButton: A standalone component that displays a ""Write a review"" button.
html:
<div class=""flex flex-wrap justify-center mb-4""><ProductRatingCount/><AverageRating/><WriteAReviewButton/></div>
component html:
ProductRatingCount:
<p class=""text-sm"">{rating_count} ratings</p>
AverageRating:
<p class=""text-sm"">Average rating: {average_rating}/5</p>
WriteAReviewButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Write a review</button>"
"Header with a logo, search bar, and links to documentation, support, and contact page","description:
The UI should have a clean and modern design, with a prominent logo, a search bar, and links to various pages. The layout should be responsive, with a mobile-first approach, and use a consistent color palette throughout.
components:
- LogoComponent: (Standalone): A component that displays the logo of the application. It should be displayed prominently on all screen sizes.
- SearchBarComponent: (Standalone): A component that allows users to search for content. It should be displayed below the logo on large screens and to the right of the logo on smaller screens.
- NavLinkComponent: (Takes Children): A component that displays a link to a specific page. It should be displayed to the right of the search bar on large screens and below the search bar on smaller screens.
html:
<header class=""bg-white shadow-md py-4""><div class=""container mx-auto p-4 flex justify-between items-center""><LogoComponent/><div class=""hidden sm:block""><SearchBarComponent/></div><nav class=""flex justify-end""><NavLinkComponent>Documentation</NavLinkComponent><NavLinkComponent>Support</NavLinkComponent><NavLinkComponent>Contact</NavLinkComponent></nav><div class=""sm:hidden flex justify-end""><SearchBarComponent/></div></div></header>
component html:
LogoComponent:
<a href=""#"" class=""text-3xl font-bold text-indigo-600""><img src=""{logo_url}"" alt=""Logo"" class=""h-8 w-8""/></a>
SearchBarComponent:
<form class=""flex justify-center""><input type=""search"" placeholder=""Search"" class=""bg-white border border-gray-300 rounded-md py-2 px-4""/><button type=""submit"" class=""bg-indigo-600 text-white py-2 px-4 rounded-md"">Search</button></form>
NavLinkComponent:
<a href=""#"" class=""text-gray-600 hover:text-indigo-600 transition duration-300 ease-in-out"">{children}</a>"
Glow controls,"description:
A simple glow controls interface with a toggle button to turn the glow effect on/off, and a slider to adjust the glow intensity.
components:
- GlowToggleButton: a standalone component representing the toggle button
- GlowIntensitySlider: a standalone component representing the slider
- GlowControlsContainer: a container component that takes children
html:
<div class=""flex justify-center mb-4""><GlowControlsContainer><GlowToggleButton/><GlowIntensitySlider/></GlowControlsContainer></div>
component html:
GlowToggleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><span>{toggle_text}</span></button>
GlowIntensitySlider:
<input type=""range"" min=""0"" max=""100"" value={glow_intensity} class=""w-full""/>
GlowControlsContainer:
<div class=""flex flex-col items-center"">{children}</div>"
A blog post grid component with a max-width container,"description:
The UI should be a responsive grid of blog post cards, with a maximum width container to maintain readability and accessibility. On larger screens, the grid should have multiple columns to showcase more posts at once. On smaller screens, the grid should collapse into a single column for easy scrolling.
components:
- BlogPostGrid: (Takes Children): A container component that holds multiple `BlogPostCard` components in a grid layout.
- BlogPostCard: (Standalone): A card component that displays a single blog post's title, excerpt, and call-to-action.
html:
<div class=""max-w-4xl mx-auto p-4""><BlogPostGrid><!-- Child components will be rendered here --></BlogPostGrid></div>
component html:
BlogPostGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
BlogPostCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{post_title}</h2><p class=""text-gray-600"">{post_excerpt}</p><a class=""text-blue-600 hover:text-blue-800"" href={post_link}>Read more</a></div>"
Search Bar and Filters,"description:
The UI should consist of a search bar with a text input field, a search button, and filters (e.g., dropdowns or checkboxes) to narrow down the search results.
components:
- SearchBar: standalone component that contains a text input field and a search button.
- SearchInput: standalone component that is a text input field.
- SearchButton: standalone component that is a button.
- FilterRow: component that takes children, which will be filter options (e.g., dropdowns or checkboxes).
- FilterOption: standalone component that represents a single filter option (e.g., a dropdown item or checkbox).
html:
<div class=""flex flex-col""><SearchBar/><FilterRow><FilterOption/><FilterOption/><!-- Add more FilterOption components as needed --></FilterRow></div>
component html:
SearchBar:
<div class=""flex items-center bg-white rounded-md shadow-md p-2""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""text"" class=""border border-gray-200 p-2 w-full"" placeholder=""Search...""/>
SearchButton:
<button class=""bg-orange-500 text-white p-2 rounded-md"">Search</button>
FilterRow:
<div class=""flex flex-wrap justify-between"">{children}</div>
FilterOption:
<div class=""mr-2 mb-2""><select class=""border border-gray-200 p-2 w-full""><option value={option_value}>{option_label}</option></select></div>"
Video Background with Overlay Text,"description:
The UI should be a full-screen video background with overlay text that is centered and responsive to different screen sizes.
components:
- VideoBackground: A standalone component that displays a full-screen video.
- OverlayText: A component that takes children and displays text over the video background.
html:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><div class=""absolute top-0 left-0 h-screen w-screen flex justify-center items-center""><OverlayText><!-- overlay text content will go here --></OverlayText></div></div>
component html:
VideoBackground:
<video autoplay loop muted playsinline><source src={videoUrl} type=""video/mp4""/></video>
OverlayText:
<div class=""text-3xl font-bold text-white"">{children}</div>"
Testimonial Quote Box,"description:
The UI should display a quote from a person, along with their name and title. The quote should be in a larger font size and have a subtle background color to make it stand out. The person's name and title should be displayed below the quote in a smaller font size. The component should be responsive and have a max width to prevent it from taking up too much horizontal space.
components:
- TestimonialQuoteBox: Standalone component that contains the entire testimonial quote box.
- QuoteText: Standalone component that displays the quote text.
- AuthorInfo: Standalone component that displays the author's name and title.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><TestimonialQuoteBox/></div>
component html:
TestimonialQuoteBox:
<blockquote class=""bg-gray-100 p-4 md:p-6 lg:p-8 rounded-md""><QuoteText/><AuthorInfo/></blockquote>
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-bold"">{quote_text}</p>
AuthorInfo:
<p class=""text-sm md:text-base lg:text-lg"">{author_name}, {author_title}</p>"
Agenda display,"description:
The UI should display a list of agenda items, each with a title, description, and date. The layout should be responsive, with a single column on mobile devices and a two-column layout on larger screens.
components:
- AgendaList: (takes children): Container component for the list of agenda items.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Agenda</h1><AgendaList><!-- agenda items will be rendered here --></AgendaList></div>
component html:
AgendaList:
<ul class=""list-none mb-0"">{children}</ul>"
Post/Tweet Embeds,"description:
The UI should display a single post or tweet embed with a username, avatar, timestamp, and content. The embed should be responsive, displaying well on both desktop and mobile devices.
components:
- PostHeader: Standalone component displaying the username and avatar.
- PostMeta: Standalone component displaying the timestamp.
- PostContent: Takes children, displaying the content of the post.
- PostEmbed: Takes children, wrapping the entire post embed.
html:
<div class=""max-w-md mx-auto p-4""><PostEmbed><PostHeader/><PostMeta/><PostContent><!-- Post content goes here --></PostContent></PostEmbed></div>
component html:
PostHeader:
<div class=""flex items-center mb-2""><img src={avatarUrl} alt={username} class=""w-10 h-10 rounded-full mr-2""/><p class=""font-bold"">{username}</p></div>
PostMeta:
<p class=""text-gray-500 text-sm"">{timestamp}</p>
PostContent:
<div class=""prose"">{children}</div>
PostEmbed:
<div class="" bg-white p-4 rounded shadow-md"">{children}</div>"
"Testimonial component with a user's name, profile picture, and quote","description:
The testimonial component should be a clean and simple container that highlights a user's quote, profile picture, and name. The component should be responsive, accessible, and have a consistent color palette. On smaller screens, the component should be stacked vertically, while on larger screens, the profile picture should be aligned to the left of the quote and name. The component should have a subtle background color and a slight shadow to add depth.
components:
- TestimonialContainer: (Takes Children): This component wraps the contents of the testimonial. It should have a subtle background color and a slight shadow. On smaller screens, it should take up the full width of the screen, while on larger screens, it should be limited to a maximum width.
- UserProfilePicture: (Standalone): This component displays the user's profile picture. It should be a circular image with a slight border radius.
- TestimonialQuote: (Takes Children): This component displays the user's quote. It should be a blockquote with a subtle font size and a slight italic style.
- Username: (Takes Children): This component displays the user's name. It should be a simple paragraph tag with a subtle font size.
html:
<div class=""md:max-w-md mx-auto p-4 md:p-6""><TestimonialContainer><UserProfilePicture/><TestimonialQuote>{quote}</TestimonialQuote><Username>{username}</Username></TestimonialContainer></div>
component html:
TestimonialContainer:
<div class=""bg-white shadow-md p-4 md:p-6 rounded-md"">{children}</div>
UserProfilePicture:
<img src={profile_picture_url} alt={username} class=""w-16 h-16 rounded-full border-2 border-gray-200 mx-auto""/>
TestimonialQuote:
<blockquote class=""italic text-lg"">{children}</blockquote>
Username:
<p class=""text-lg"">{children}</p>"
Sticky Header/Footer,"description:
The UI should have a sticky header at the top of the page, a main content area in the middle, and a sticky footer at the bottom of the page. The header and footer should remain fixed at the top and bottom of the page, respectively, even when the user scrolls.
components:
- StickyHeader: A standalone component that represents the sticky header.
- StickyFooter: A standalone component that represents the sticky footer.
- ContentArea: A component that takes children, representing the main content area of the page.
html:
<div class=""h-screen flex flex-col""><StickyHeader/><ContentArea><!-- main content goes here --></ContentArea><StickyFooter/></div>
component html:
StickyHeader:
<header class=""sticky top-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- header content goes here --><h1>{header_title}</h1></header>
StickyFooter:
<footer class=""sticky bottom-0 z-50 w-full h-16 bg-gray-800 text-white p-4 flex justify-center""><!-- footer content goes here --><p>{copyright_text}</p></footer>
ContentArea:
<div class=""flex-1 overflow-y-auto p-4"">{children}</div>"
A product description section with a gray background and white text,"description:
The product description section should have a clean and minimalistic design, with a gray background and white text to provide good contrast and readability. The section should scale well on different screen sizes, with a max-width to prevent the text from becoming too wide on large screens. The gray background should be a gentle gradient to add some depth to the section.
components:
- ProductDescriptionSection: (Takes Children): A container component that wraps the product description text and provides a gray background with a gradient effect. On small screens, the section should take up the full width of the screen. On medium screens and above, the section should have a max-width of 768px and be centered horizontally.
- ProductDescriptionText: (Takes Children): A text component that contains the product description text. The text should be white and have a comfortable font size on all screen sizes.
html:
<ProductDescriptionSection><ProductDescriptionText>{product_description_text}</ProductDescriptionText></ProductDescriptionSection>
component html:
ProductDescriptionSection:
<div class=""bg-gray-200 bg-gradient-to-b from-gray-200 to-gray-300 py-8 md:max-w-md md:mx-auto"">{children}</div>
ProductDescriptionText:
<p class=""text-white text-lg md:text-xl"">{children}</p>"
Hero section with background image and tagline,"description:
The UI should be a hero section with a background image and a tagline. The background image should cover the full width and height of the section, and the tagline should be centered vertically and horizontally on top of the image.
components:
- HeroBackground: A standalone component that represents the background image of the hero section.
- HeroTagline: A component that represents the tagline of the hero section. It takes children (the tagline text).
html:
<section class=""h-screen w-full relative""><HeroBackground/><div class=""absolute inset-0 flex items-center justify-center""><HeroTagline><p>{tagline_text}</p></HeroTagline></div></section>
component html:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style=""backgroundImage: url({background_image_url});""}></div>
HeroTagline:
<div class=""text-2xl font-bold text-white"">{children}</div>"
Product details page,"description:
The product details page should display the product's image, name, description, price, and call-to-action (CTA) buttons. The UI should be responsive, with the image and description side-by-side on large screens, and stacked on small screens.
components:
- ProductImage: (standalone): displays the product image
- ProductHeader: (standalone): displays the product name and price
- ProductDescription: (standalone): displays the product description
- CallToAction: (standalone): displays the call-to-action buttons
html:
<!-- Product details page --><div class=""flex flex-col md:flex-row gap-4 md:gap-8""><ProductImage/><div class=""md:w-2/3""><ProductHeader/><ProductDescription/></div><CallToAction/></div>
component html:
ProductImage:
<img src={imageUrl} alt={productName} class=""w-full md:w-1/2 h-64 md:h-full object-cover""/>
ProductHeader:
<h1 class=""text-3xl font-bold"">{productName}</h1><p class=""text-lg"">{productPrice}</p>
ProductDescription:
<p class=""text-lg"">{productDescription}</p>
CallToAction:
<div class=""flex gap-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Learn More</button></div>"
Display format presenting content as a vertical list,"description:
The UI should display a list of items in a vertical format, with each item taking up the full width of the container. The list should be responsive, meaning it should adapt to different screen sizes and devices.
components:
- ListItem: a standalone component representing a single item in the list.
- ItemList: a component that takes children, which are multiple `ListItem` components.
html:
<div class=""max-w-md mx-auto p-4""><ItemList><ListItem/><ListItem/><!-- Add more ListItem components here --></ItemList></div>
component html:
ListItem:
<li class=""py-2 border-b border-gray-200""><p class=""text-lg"">{list_item_content}</p></li>
ItemList:
<ul class=""list-none mb-0"">{children}</ul>"
Wishlist items,"description:
- The UI should display a list of wishlist items where each item contains a title, description, and a 'Remove' button.
   - The layout should be clean and spacious, with each item neatly carded.
   - Responsiveness ensures items adjust in a grid or column based on screen size.
components:
- Wishlist: Standalone component that contains multiple `WishlistItem` components.
- WishlistItem: Component that takes children. It displays individual item details and a remove button.
html:
<div class=""container mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">My Wishlist</h1><Wishlist/></div>
component html:
Wishlist:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><WishlistItem><h2 class=""text-lg font-semibold"">{item_title}</h2><p>{item_description}</p><button class=""mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700 transition duration-300"">Remove </button></WishlistItem><!-- Additional WishlistItem instances would be added here --></div>
WishlistItem:
<div class=""p-4 border border-gray-300 rounded shadow-sm"">{children} </div>"
Small box that users can click to select or deselect an option,"description:
A small checkbox that can be toggled on and off, indicating a selected or deselected option. The checkbox should be responsive and accessible.
components:
- CheckBox: component (standalone)
html:
<div class=""flex items-center""><CheckBox/><label class=""ml-2"">{option_label}</label></div>
component html:
CheckBox:
<input type=""checkbox"" class=""w-4 h-4 text-blue-600 bg-gray-100 rounded"" aria-label={option_label}/>"
Content moderation tools for admin teams,"description:
The UI should resemble a dashboard with a navigation menu on the left, and a main content area on the right. The navigation menu should display various moderation tools, and the main content area should display the selected tool. The UI should be responsive, with a mobile-first approach, making it accessible on smaller screens.
components:
- SidebarNav: (standalone): A navigation menu component that displays moderation tools.
- ModerationTool: (takes children): A component that wraps the selected moderation tool.
- DashboardHeader: (standalone): A header component that displays the admin team's name and a search bar.
- Breadcrumb: (takes children): A breadcrumb component that displays the current navigation path.
- ModerationToolCard: (takes children): A card component that displays a moderation tool's information.
- ModerationToolCardHeader: (standalone): A header component for the moderation tool card.
- ModerationToolCardBody: (takes children): A body component for the moderation tool card.
html:
<div class=""flex h-screen""><SidebarNav/><div class=""flex-1 overflow-y-auto""><DashboardHeader/><Breadcrumb><span>Home</span><span>Moderation Tools</span><span>Selected Tool</span></Breadcrumb><ModerationTool><ModerationToolCard><ModerationToolCardHeader/><ModerationToolCardBody><!-- moderation tool content --></ModerationToolCardBody></ModerationToolCard></ModerationTool></div></div>
component html:
SidebarNav:
<nav class=""w-64 bg-gray-200 h-screen p-4""><ul><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 1</a></li><li><a href=""#"" class=""block p-2 hover:bg-gray-300"">Tool 2</a></li><!-- more tools --></ul></nav>
ModerationTool:
<div class=""p-4"">{children}</div>
DashboardHeader:
<header class=""p-4 bg-white border-b border-gray-200""><h1 class=""text-lg"">{admin_team_name}</h1><input type=""search"" class=""w-full pl-10 pr-4 py-2"" placeholder=""Search""/></header>
Breadcrumb:
<nav class=""flex mb-4"">{children}</nav>
ModerationToolCard:
<div class=""bg-white border border-gray-200 p-4""><ModerationToolCardHeader/><ModerationToolCardBody>{children} </ModerationToolCardBody></div>
ModerationToolCardHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-lg"">{tool_name}</h2><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Edit </button></header>
ModerationToolCardBody:
<div class=""p-4"">{children}</div>"
Feedback/rating system,"description:
A simple rating system with 5 stars, where users can select a rating from 1 to 5 stars, and leave a feedback comment.
components:
- RatingStars: A standalone component that displays 5 stars, with the selected stars filled.
- FeedbackInput: A standalone component that is a text input for users to leave a feedback comment.
- RatingFeedback: A component that takes children, wrapping the `RatingStars` and `FeedbackInput` components.
html:
<RatingFeedback><RatingStars/><FeedbackInput/></RatingFeedback>
component html:
RatingStars:
<div class=""flex flex-wrap justify-center mb-4"">{ Array(5).fill(0).map((_, i) =>( <button key={i} class={`w-6 h-6 {i < rating ? 'text-yellow-400' : 'text-gray-400'} hover:text-yellow-400`} onClick={() =>setRating(i + 1)}><i class=""fas fa-star""></i></button>)) }</div>
FeedbackInput:
<textarea class=""w-full p-4 pl-10 text-sm text-gray-700"" placeholder=""Leave a feedback..."" value={feedback} onChange={(e) =>setFeedback(e.target.value)}/>
RatingFeedback:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 md:pt-0"">{children}</div>"
A sidebar component that displays a list of links to popular workout plans and nutrition guides,"description:
The sidebar component should have a clean and modern design, making it easy for users to navigate through the list of workout plans and nutrition guides. The component should be responsive, with a maximum width on larger screens and a full-width layout on smaller screens. The links should be clearly distinguishable, with a subtle hover effect to indicate interactivity.
components:
- Sidebar: (Takes Children): This component wraps the entire sidebar layout, providing a container for the list of links.
- SidebarLink: (Standalone): Each link to a workout plan or nutrition guide, including the label and a subtle icon indicating the type of resource.
html:
<div class=""lg:w-64 lg:h-screen bg-gray-100 p-4 overflow-y-auto""><Sidebar><!-- links will be rendered here --></Sidebar></div>
component html:
Sidebar:
<div class=""flex flex-col h-full""><div class=""px-4 pt-4"">{children}</div></div>
SidebarLink:
<a href=""{link_url}"" class=""flex items-center py-2 px-4 hover:bg-gray-200""><span class=""mr-2"">{icon}</span><span>{label}</span></a>"
Alert Notification Icon,"description:
The UI should display an alert notification icon, typically used to indicate that there are new notifications or alerts for the user. The icon should be a bell shape with a red badge on top, indicating the number of notifications.
components:
- AlertNotificationIcon: A standalone component that displays the alert notification icon.
html:
<nav class=""flex items-center""><AlertNotificationIcon/></nav>
component html:
AlertNotificationIcon:
<span class=""relative""><!-- Bell icon --><i class=""fas fa-bell text-lg text-gray-600""></i><!-- Red badge with notification count --><span class=""absolute top-0 right-0 -mt-2 -mr-2 bg-red-500 rounded-full w-4 h-4 text-white text-xs flex items-center justify-center"">{notification_count}</span></span>"
Shopping Cart Icon,"description:
The UI should be a shopping cart icon with a badge indicating the number of items in the cart.
components:
- ShoppingCartIcon: Standalone component representing the shopping cart icon.
- Badge: Standalone component representing the badge displaying the number of items in the cart.
html:
<div class=""absolute top-2 right-2""><ShoppingCartIcon/><Badge/></div>
component html:
ShoppingCartIcon:
<i class=""fas fa-shopping-cart text-lg text-gray-500 hover:text-gray-800 cursor-pointer""></i>
Badge:
<span class=""bg-red-500 text-white text-xs rounded-full px-2 py-1"">{item_count}</span>"
Tweet delete button for post removal,"description:
A small delete button with a trash can icon to remove a tweet from a post.
components:
- TweetDeleteButton: (standalone)
html:
<button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><TweetDeleteButton/></button>
component html:
TweetDeleteButton:
<span class=""text-lg inline-block""><i class=""fas fa-trash-alt""></i></span>"
Navigation Breadcrumb,"description:
The UI should be a horizontal navigation breadcrumb with links to each step, allowing users to navigate back and forth between pages. The breadcrumbs should be responsive, accessible, and mobile-friendly.
components:
- Breadcrumb: A standalone component that renders a single breadcrumb item.
- BreadcrumbContainer: A component that takes children, which are multiple `Breadcrumb` components.
html:
<nav aria-label=""Breadcrumb"" class=""flex flex-wrap mb-4""><BreadcrumbContainer><Breadcrumb/><Breadcrumb/><Breadcrumb/></BreadcrumbContainer></nav>
component html:
Breadcrumb:
<li class=""inline-flex items-center""><a href=""{breadcrumb_link}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{breadcrumb_label}</a><span class=""text-gray-600 mx-2"">{/* separator */}</span></li>
BreadcrumbContainer:
<ul class=""flex flex-wrap list-none mb-0"">{children}</ul>"
Blog Post Comment Form Label,"description:
A simple form label with a text input for commenting on a blog post. The label should be responsive, mobile-first, and accessible.
components:
- CommentFormLabel: A standalone component representing the label for the comment form.
- CommentInput: A standalone component representing the text input for the comment.
html:
<form><CommentFormLabel/><CommentInput/></form>
component html:
CommentFormLabel:
<label class=""block text-sm font-medium text-gray-700 mb-2"" htmlFor=""comment"">Leave a comment:</label>
CommentInput:
<input class=""block w-full pl-10 text-sm text-gray-700"" type=""text"" id=""comment"" name=""comment""/>"
A job category component with a gray background and white text,"description:
The UI should be a simple, rectangular component with a gray background and white text. It should be compact and easy to read, with a clear hierarchy of information. On smaller screens, the component should be full-width, while on larger screens, it should have a maximum width to prevent it from becoming too wide.
components:
- JobCategory: (Takes Children): A job category component that displays a category name and optional child elements. It has a gray background and white text.
html:
<div class=""max-w-md mx-auto bg-gray-200 p-4 rounded""><JobCategory>Category Name
{children}
</JobCategory></div>
component html:
JobCategory:
<div class=""bg-gray-200 text-white p-4 rounded""><h5 class=""mb-2"">{categoryName}</h5>{children}</div>"
"A review component that displays the reviewer's name, rating, and review text","description:
The review component should have a clean and simple design that makes it easy to read and understand the reviewer's name, rating, and review text. The component should be responsive and adapt to different screen sizes. On smaller screens, the component should stack vertically to ensure readability.
components:
- ReviewContainer: (Takes Children): The outer container for the review component. It should have a subtle background color and a slight shadow to give it depth.
- ReviewerInfo: (Standalone): Displays the reviewer's name and rating. On smaller screens, the rating should be displayed below the reviewer's name.
- ReviewText: (Standalone): Displays the review text. It should have a reasonable font size and line height to ensure readability.
html:
<ReviewContainer><ReviewerInfo/><ReviewText/></ReviewContainer>
component html:
ReviewContainer:
<div class=""bg-gray-100 rounded-md p-4 shadow-md"">{children}</div>
ReviewerInfo:
<div class=""flex justify-between mb-2 sm:block sm:mb-4""><p class=""text-lg"">{reviewer_name}</p><div class=""rating""><span class=""text-lg"">{rating}/ 5</span></div></div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Featured Image Carousel Nav,"description:
The UI should be a carousel navigation for featured images, allowing users to navigate through multiple images. The navigation should be responsive, mobile-first, and accessible.
components:
- CarouselNavItem: A standalone component representing a navigation item in the carousel.
- CarouselNav: A component that takes children, representing the navigation container for the carousel.
html:
<nav class=""flex justify-center mb-4""><CarouselNav><CarouselNavItem/><CarouselNavItem/><CarouselNavItem/><!-- Add more CarouselNavItem components here --></CarouselNav></nav>
component html:
CarouselNavItem:
<button class=""w-4 h-4 bg-gray-300 rounded-full mx-1""><!-- Use Tailwind CSS to style the navigation item --></button>
CarouselNav:
<ul class=""flex justify-center"">{children}</ul>"
Tooltip providing additional information specific to the context of the element,"description:
The UI should consist of a interactive element (e.g. a button or a link) with a tooltip that appears when hovered or focused. The tooltip should provide additional information specific to the context of the element.
components:
- ToolTipTrigger: (standalone): The interactive element that triggers the tooltip.
- ToolTipContent: (takes children): The content of the tooltip.
html:
<div class=""relative""><ToolTipTrigger/><ToolTipContent/></div>
component html:
ToolTipTrigger:
<a href=""#"" class=""...""><!-- button or link content --></a>
ToolTipContent:
<div class=""absolute bg-gray-100 text-sm p-2 rounded"">{children}</div>"
Blog Post Archive,"description:
The UI should be a responsive blog post archive that displays a list of blog posts with their titles, excerpts, and metadata. The layout should be mobile-first, with a card-based design that adapts to different screen sizes.
components:
- BlogPostArchive: A component that takes children (an array of `BlogPostCard` components).
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Blog Post Archive</h1><BlogPostArchive><!-- Blog post cards will be rendered here --></BlogPostArchive></div>
component html:
BlogPostArchive:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Alert Close Button Style,"description:
The UI should be a small, clickable button that allows users to close an alert message. The button should be a small ""X"" or ""Close"" text, and should be styled to stand out from the rest of the alert message.
components:
- AlertCloseButton: a standalone component that renders a small clickable button to close an alert message.
html:
<div class=""alert-message""><!-- alert message content goes here --><AlertCloseButton/></div>
component html:
AlertCloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-label=""Close"" class=""sr-only"">{close_button_text}</span><span aria-hidden=""true"">×{/* or ""Close"" text */}</span></button>"
Code snippets,"description:
The UI should be a simple code snippet display component, showing a block of code with syntax highlighting.
components:
- CodeSnippet: A standalone component that displays a block of code.
- CodeLine: A component that displays a single line of code, takes children.
html:
<div class=""bg-gray-100 p-4 rounded-md""><CodeSnippet/></div>
component html:
CodeSnippet:
<pre class=""p-4 overflow-x-auto rounded-md""><code class=""text-sm"">{code}</code></pre>
CodeLine:
<div class=""flex""><span class=""text-gray-500"">{line_number}</span><code class=""pl-2"">{children}</code></div>"
"A post component with a white background, rounded corners, and a subtle shadow effect","description:
The UI should have a modern, clean design with a focus on readability and accessibility. The Post component should have a white background, rounded corners, and a subtle shadow effect to give it a sense of depth. The component should be responsive and adapt to different screen sizes.
components:
- PostCard: (Standalone): A standalone component that represents a single post. It has a white background, rounded corners, and a subtle shadow effect.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><PostCard/></div>
component html:
PostCard:
<div class=""bg-white rounded-lg shadow-md p-4""><h2 class=""text-lg font-bold"">{post_title}</h2><p class=""text-gray-600"">{post_text}</p></div>"
Featured Image Grid,"description:
The UI should be a responsive image grid that showcases featured images. The grid should be mobile-first, with images stacked on top of each other on small screens and arranged in a grid on larger screens. Each image should have a subtle shadow and rounded corners.
components:
- ImageGrid: A container component that takes children. Represents the entire image grid.
- ImageCard: A standalone component that represents an individual image card.
html:
<div class=""container mx-auto p-4 md:p-6""><ImageGrid><ImageCard/><ImageCard/><ImageCard/><!-- Add more ImageCard components as needed --></ImageGrid></div>
component html:
ImageGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
ImageCard:
<div class=""bg-white rounded-md shadow-md""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-lg font-bold"">{image_title}</h2><p class=""text-gray-600"">{image_description}</p></div></div>"
Footer Social Media Link,"description:
The UI should be a responsive footer with social media links. The links should be aligned horizontally on desktop and vertically on mobile. Each link should have an icon representing the social media platform.
components:
- SocialMediaLink: (standalone) - A single social media link with an icon.
- Footer: (takes children) - The footer component containing the social media links.
html:
<footer class=""bg-gray-200 h-screen p-4 md:p-6 lg:p-8""><div class=""max-w-md mx-auto""><Footer><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></Footer></div></footer>
component html:
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener"" aria-label=""{social_media_name}""><i class=""fab fa-{social_media_icon} text-2xl mx-2 text-gray-600 hover:text-gray-900 transition duration-300""></i></a>
Footer:
<div class=""flex flex-wrap justify-center md:flex-no-wrap"">{children}</div>"
Sponsorship packages display,"description:
The UI should display a list of sponsorship packages, each with a title, description, and price. The list should be responsive, with a single column on mobile devices and multiple columns on larger screens. Each package should have a clear title, a brief description, and a prominent price display.
components:
- SponsorshipPackage: A standalone component that displays a single sponsorship package.
- SponsorshipPackageList: A component that takes children (a list of `SponsorshipPackage` components).
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-3xl font-bold mb-4"">Sponsorship Packages</h2><SponsorshipPackageList><SponsorshipPackage/><SponsorshipPackage/><SponsorshipPackage/></SponsorshipPackageList></div>
component html:
SponsorshipPackage:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{packageName}</h3><p class=""text-gray-600"">{packageDescription}</p><p class=""text-lg font-bold"">{packagePrice}</p></div>
SponsorshipPackageList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
"A ""Popular posts"" component that includes a heading and a list of preview images with a white background and a subtle border","description:
The ""Popular posts"" component should have a clear heading, a list of preview images, and a clean design that showcases the most popular content. The component should be responsive, with the layout adapting to different screen sizes. On larger screens, the preview images should be displayed in a grid, while on smaller screens, they should be displayed in a list.
components:
- PopularPosts: (Takes Children): A container component that holds the heading and the list of preview images.
- PopularPostsHeading: (Standalone): A heading component that displays the title of the section.
- PreviewImage: (Standalone): A component that displays a preview image with a subtle border and a white background.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><PopularPosts><PopularPostsHeading/><ul class=""flex flex-wrap -mx-2 lg:flex-wrap""><li class=""w-full md:w-1/2 xl:w-1/3 p-2""><PreviewImage/></li><!-- Add more list items with PreviewImage components --></ul></PopularPosts></div>
component html:
PopularPosts:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-12"">{children}</div>
PopularPostsHeading:
<h2 class=""text-2xl font-bold mb-4"">{popular_posts_heading_text}</h2>
PreviewImage:
<div class=""bg-white border border-gray-200 rounded p-2""><img src={preview_image_src} alt={preview_image_alt} class=""w-full h-48 object-cover""></div>"
Attachment upload button with file browser,"description:
The UI should be a responsive button that allows users to upload a file. The button should be styled with a background color, border, and hover effect. When clicked, it should open a file browser for the user to select a file.
components:
- UploadButton: Standalone component that renders a button with a label and a file input.
- FileInputLabel: Standalone component that renders a label for the file input.
html:
<div class=""flex justify-center""><UploadButton/></div>
component html:
UploadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><FileInputLabel/><input type=""file"" class=""hidden""/></button>
FileInputLabel:
<span>Choose a file...</span>"
Tags,"description:
A horizontal list of tags, each tag being a small rectangle with a label and an optional close icon.
components:
- Tag: A single tag component, takes children (the tag label).
- TagList: A container component for multiple tags, takes children (array of `Tag` components).
html:
<TagList><Tag>Java</Tag><Tag>Python</Tag><Tag>JavaScript</Tag></TagList>
component html:
Tag:
<span class=""bg-gray-200 py-1 px-2 rounded"">{children}<!-- tag label --><button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">× </button></span>
TagList:
<ul class=""flex flex-wrap items-center"">{children}<!-- array of Tag components --></ul>"
Breadcrumb Separator Icon,"description:
The UI should display a breadcrumb separator icon, which is a right arrow (>), connecting a series of breadcrumbs. The separator should be vertically centered with the surrounding breadcrumbs.
components:
- BreadcrumbSeparatorIcon: Standalone
html:
<nav aria-label=""Breadcrumb""><ol class=""flex""><li class=""breadcrumb-item"">Home</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">category</li><BreadcrumbSeparatorIcon/><li class=""breadcrumb-item"">subcategory</li></ol></nav>
component html:
BreadcrumbSeparatorIcon:
<span class=""text-neutral-500"" aria-hidden=""true"">&gt;</span>"
"Recipe card component with an image, title, and short description, displayed on a white background with a subtle shadow effect","description:
The UI should feature a clean and modern design, with a prominent image, a clear title, and a concise description. The white background will provide a clean canvas, while the subtle shadow effect will add depth to the card. On smaller screens, the image will be centered, and the title and description will be stacked vertically. As the screen size increases, the image will move to the left, and the title and description will be displayed side-by-side.
components:
- RecipeCard: (Takes Children): A container for the recipe information, featuring an image, title, and description.
- RecipeImage: (Standalone): Displays the recipe image with a subtle shadow effect.
- RecipeTitle: (Takes Children): Displays the recipe title in a clear and prominent font.
- RecipeDescription: (Takes Children): Displays a brief description of the recipe.
html:
<div class=""max-w-md mx-auto p-4 bg-white shadow-md rounded""><RecipeCard><RecipeImage/><RecipeTitle>{recipe_title}</RecipeTitle><RecipeDescription>{recipe_description}</RecipeDescription></RecipeCard></div>
component html:
RecipeCard:
<div class=""flex flex-wrap md:flex-no-wrap justify-center md:justify-start"">{children}</div>
RecipeImage:
<img src={image_src} alt={image_alt} class=""w-full md:w-1/2 md:mr-4 shadow-md hover:shadow-lg rounded"">
RecipeTitle:
<h2 class=""text-lg font-bold"">{children}</h2>
RecipeDescription:
<p class=""text-sm"">{children}</p>"
Star rating component with 5 empty stars that can be filled in with a yellow color,"description:
The UI should display 5 empty stars that can be filled in with a yellow color to indicate a rating. The stars should be evenly spaced and horizontal, with equal distances between each star. On smaller screens, the stars should be smaller and more compact, while on larger screens, they should be larger and more spread out.
components:
- StarRating: (Takes Children): A container component that displays the rating stars.
- RatingStar: (Standalone): A single star component that can be empty or filled with a yellow color.
html:
<StarRating><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></StarRating>
component html:
StarRating:
<div class=""flex justify-center mb-4 md:mb-6 lg:mb-8"">{children}</div>
RatingStar:
<i class=""fas fa-star text-yellow-400 text-lg md:text-xl lg:text-2xl"" style=""`--star-filled: {filled ? '100%' : '0%'};""}></i>"
Privacy policy link,"description:
A simple link to a privacy policy page, visible on all screen sizes.
components:
- PrivacyPolicyLink: (standalone)
html:
<footer class=""flex justify-center pb-4""><PrivacyPolicyLink/></footer>
component html:
PrivacyPolicyLink:
<a href=""/privacy-policy"" class=""text-sm text-gray-600 hover:text-gray-900"">Privacy Policy</a>"
Repository File Navigation System,"description:
The UI should be a responsive, mobile-first, and accessible repository file navigation system. It should display a tree-like structure of files and directories, allowing users to navigate and explore the repository. The UI should be clean, simple, and easy to use.
components:
- FileTree: A component that takes children, representing a file or directory and its children.
- BreadCrumb: A standalone component that displays the current navigation path.
html:
<div class=""max-w-md mx-auto p-4""><BreadCrumb/><FileTree><!-- files and directories will be inserted here --></FileTree></div>
component html:
FileTree:
<ul class=""pl-4"">{children}</ul>
BreadCrumb:
<nav class=""flex items-center mb-4""><ol class=""list-none p-0 m-0""><li class=""inline-flex items-center""><a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">{breadcrumb_path}</a></li></ol></nav>"
Mentions dropdown with user and role mentions,"description:
The UI should be a dropdown menu that displays a list of user mentions with their corresponding roles. The dropdown should be triggered by a button with a user icon. Each mention should display the user's name, role, and a faint border around the mention.
components:
- UserMentionDropdown: A dropdown menu that wraps the user mention list. (takes children)
- TriggerButton: A button that triggers the dropdown menu. (standalone)
html:
<div class=""relative""><TriggerButton/><UserMentionDropdown><!-- user mention list --></UserMentionDropdown></div>
component html:
UserMentionDropdown:
<div class=""absolute z-10 w-48 bg-white rounded shadow-md"">{children}</div>
TriggerButton:
<button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded""><i class=""fas fa-user""></i></button>"
"Game card component with an image, title, rating, and short description","description:
The game card component should be a visually appealing and easily readable container that holds essential information about a game. It should be responsive, accessible, and follow a consistent color palette throughout. The layout should guide the user's attention, making it easy to navigate the UI.
components:
- GameCard: (Takes Children): A container component that wraps around the game's image, title, rating, and short description.
- GameImage: (Standalone): Displays the game's image.
- GameTitle: (Standalone): Displays the game's title.
- GameRating: (Standalone): Displays the game's rating.
- GameDescription: (Standalone): Displays a short description of the game.
html:
<div class=""flex flex-wrap justify-center""><GameCard><!-- Game card content will be rendered here --></GameCard></div>
component html:
GameCard:
<div class=""bg-white shadow-md rounded-md p-4 w-full md:w-1/2 lg:w-1/3 xl:w-1/4"">{children}</div>
GameImage:
<img src={image_url} alt={game_title} class=""w-full h-48 object-cover rounded-t-md""/>
GameTitle:
<h3 class=""text-lg font-bold"">{game_title}</h3>
GameRating:
<p class=""text-gray-600"">{rating}/ 10</p>
GameDescription:
<p class=""text-gray-600"">{description}</p>"
Corner radius controls,"description:
The UI should be a simple slider component that allows users to adjust the corner radius of an element. The slider should have a range of values from 0 to 20 pixels, with a default value of 5 pixels. The component should also display the current corner radius value in pixels.
components:
- CornerRadiusSlider: standalone component
- RadiusValueDisplay: standalone component
html:
<div class=""flex flex-col justify-center p-4""><div class=""mb-2""><CornerRadiusSlider/></div><RadiusValueDisplay/></div>
component html:
CornerRadiusSlider:
<input type=""range"" min=""0"" max=""20"" value={cornerRadius} class=""w-full h-2 bg-gray-200 rounded-md"" onChange={(e) =>{/* handle onChange event */ }/>
RadiusValueDisplay:
<p class=""text-sm"">Corner Radius: {cornerRadius}px</p>"
A company logo component that displays a company's logo with a hover effect,"description:
The company logo component should display a company's logo prominently, with a subtle hover effect to draw attention to it. The logo should be easily readable and recognizable on various screen sizes.
components:
- CompanyLogo: (Standalone): This component will display a company's logo with a hover effect.
html:
<CompanyLogo/>
component html:
CompanyLogo:
<div class=""flex justify-center mb-4""><img src=""{logo_url}"" alt=""{company_name} logo"" class=""rounded-full w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40 hover:shadow-lg transition duration-300 ease-in-out""/></div>"
Compare products,"description:
The UI should display a table with two or more products, allowing users to compare their features and specifications side-by-side. The table should have a clear and simple layout, with easy-to-read headers and data.
components:
- ProductComparer: The top-level component that renders the comparison table. Takes children.
- ComparisonTable: Renders the table that displays the product comparisons. Takes children.
- TableHeader: Renders the table headers. Standalone.
- ProductRow: Renders a single row in the table, displaying a product's features and specifications. Takes children.
- FeatureCell: Renders a single cell in the table, displaying a product's feature or specification. Standalone.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><ProductComparer><ComparisonTable><TableHeader/><ProductRow><FeatureCell/></ProductRow><ProductRow><FeatureCell/></ProductRow><!-- Add more ProductRow components as needed --></ComparisonTable></ProductComparer></div>
component html:
ProductComparer:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8"">{children}</div>
ComparisonTable:
<table class=""w-full table-auto border-collapse"">{children}</table>
TableHeader:
<thead><tr><th class=""px-4 py-2"">Product</th><th class=""px-4 py-2"">Feature 1</th><th class=""px-4 py-2"">Feature 2</th><!-- Add more table headers as needed --></tr></thead>
ProductRow:
<tr><td class=""px-4 py-2"">{product_name}</td>{children}</tr>
FeatureCell:
<td class=""px-4 py-2"">{feature_value}</td>"
Pagination component with previous and next buttons,"description:
The pagination component should be a simple and intuitive way to navigate through a list of items. It should be responsive, accessible, and easy to use on different screen sizes. The component should have a clear visual hierarchy, with the previous and next buttons standing out. The UI should scale well on different screen sizes, with the buttons becoming larger and more prominent on smaller screens.
components:
- Pagination: (Takes Children): A container component that holds the previous and next buttons.
- PreviousButton: (Standalone): A button component that allows the user to navigate to the previous page.
- NextButton: (Standalone): A button component that allows the user to navigate to the next page.
html:
<div class=""flex justify-center mb-4""><Pagination><PreviousButton/><NextButton/></Pagination></div>
component html:
Pagination:
<div class=""flex justify-center mb-4"">{children}</div>
PreviousButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Previous</button>
NextButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next</button>"
A pet profile image gallery with a lightbox effect,"description:
The UI will consist of a responsive image gallery with a lightbox effect. The gallery will display a grid of pet profile images, with a maximum of 3 columns on large screens and 2 columns on smaller screens. When an image is clicked, a lightbox effect will be triggered, displaying the full-size image with a darkened background and a.close button.
components:
- PetGallery: (Takes Children): A container component that holds a collection of `PetImage` components. It will display a grid of images on desktop and a stacked list on mobile.
- PetImage: (Standalone): A component that displays a single pet profile image with a lightbox effect when clicked.
- Lightbox: (Takes Children): A modal component that displays a full-size image with a darkened background and a close button.
html:
<div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><PetGallery><!-- PetImage components will be rendered here --></PetGallery></div>
component html:
PetGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>
PetImage:
<div class=""cursor-pointer"" onClick={lightboxToggle}><img src={image_url} alt={pet_name} class=""w-full h-40 object-cover rounded-lg shadow-md""/></div>
Lightbox:
<div class=""fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center"" onClick={lightboxToggle}><div class=""max-w-md mx-auto p-4 pt-6 lg:p-6 lg:pt-12"">{children} </div><button class=""absolute top-2 right-2 text-2xl font-bold"" onClick={lightboxToggle}>×</button></div>"
Grid layout displaying smaller versions of images or content,"description:
The UI should display a grid layout of smaller versions of images or content, with a responsive design that adapts to different screen sizes. Each grid item should have a consistent size and spacing between them.
components:
- GridGallery: (standalone): The main component that wraps the grid items.
- GridItem: (takes children): A single item in the grid, containing the smaller version of an image or content.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><GridGallery/></div>
component html:
GridGallery:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{/* Grid items will be inserted here */ }</div>
GridItem:
<div class=""w-full h-48 md:h-64 lg:h-80 overflow-hidden rounded"">{children} <!-- Image or content will be inserted here --></div>"
Collection of thumbnail images that users can click to view full-size versions,"description:
The UI should display a grid of thumbnail images that are responsive to different screen sizes. When a user clicks on a thumbnail, the full-size version of the image should be displayed.
components:
- ImageThumbnail: standalone component that displays a thumbnail image
- ImageGallery: component that takes children (`ImageThumbnail` components) and displays them in a grid
html:
<main class=""container mx-auto max-w-md p-4""><h1 class=""text-2xl font-bold mb-4"">Image Gallery</h1><ImageGallery><ImageThumbnail/><ImageThumbnail/><!-- repeat ImageThumbnail components for each image --></ImageGallery></main>
component html:
ImageThumbnail:
<div class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md cursor-pointer""/></div>
ImageGallery:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
"Product card component that includes a product image, product title, product description, and price","description:
The product card should have a clean and modern design, with a prominent product image, clear typography, and a concise description. The price should be displayed prominently at the bottom of the card. The card should be responsive and adapt to different screen sizes, with a maximum width to prevent it from becoming too wide.
components:
- ProductCard: (Takes Children): A container component that wraps the product image, title, description, and price.
- ProductImage: (Standalone): Displays the product image.
- ProductTitle: (Standalone): Displays the product title.
- ProductDescription: (Standalone): Displays the product description.
- ProductPrice: (Standalone): Displays the product price.
html:
<div class=""max-w-md xl:max-w-lg mx-auto p-4""><ProductCard><ProductImage/><ProductTitle/><ProductDescription/><ProductPrice/></ProductCard></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded-lg overflow-hidden"">{children}</div>
ProductImage:
<img src={image_url} alt={image_alt} class=""w-full object-cover h-48 xl:h-64""/>
ProductTitle:
<h2 class=""text-lg xl:text-xl font-bold"">{title}</h2>
ProductDescription:
<p class=""text-sm xl:text-base"">{description}</p>
ProductPrice:
<p class=""text-lg xl:text-xl font-bold"">{price}</p>"
Map filters,"description:
The UI should be a compact, responsive map filter component that allows users to select specific filters to narrow down their search. It should have a toggle button to expand and collapse the filter options.
components:
- FilterToggle: Standalone component that toggles the filter options.
- FilterList: Component that takes children (FilterOption components) and renders them in a list.
html:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><FilterToggle/><FilterList><!-- Filter options will be rendered here --></FilterList></div>
component html:
FilterToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{toggle_label}</button>
FilterList:
<ul class=""list-none mb-0"">{children}</ul>"
"Login/registrarion form component with a white background, blue text, and a ""Log in"" or ""Register"" button","description:
The UI should be a simple and clean form component that allows users to log in or register. The background should be white, with blue text to provide good contrast and make the text easy to read. The form fields should be spaced out nicely and have a clear hierarchy, with the ""Log in"" or ""Register"" button standing out as a call-to-action. The UI should be responsive and adapt to different screen sizes, with the form fields stacking vertically on smaller screens.
components:
- LoginFormComponent: (Takes Children): A container component that wraps the entire form.
- SubmitButtonComponent: (Standalone): The ""Log in"" or ""Register"" button.
- FormDataComponent: (Takes Children): A container component that wraps the form fields and the submit button.
html:
<LoginFormComponent><FormDataComponent><!-- form fields and submit button here --></FormDataComponent></LoginFormComponent>
component html:
LoginFormComponent:
<div class=""bg-white p-4 md:p-6 lg:p-8 XL:p-12"">{children}</div>
SubmitButtonComponent:
<button class=""bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
FormDataComponent:
<div class=""flex flex-col items-center"">{children}</div>"
Speaker profiles display,"description:
The UI should display a list of speaker profiles, each containing a profile picture, name, title, and a brief bio. The layout should be responsive, with a single column on mobile devices and a grid layout on larger screens.
components:
- SpeakerProfileCard: A standalone component that displays a single speaker's profile information.
- SpeakerProfilesList: A component that takes children (multiple `SpeakerProfileCard`s) and displays them in a responsive grid layout.
html:
<div class=""max-w-md mx-auto p-4""><SpeakerProfilesList><SpeakerProfileCard/><SpeakerProfileCard/><!-- Add more SpeakerProfileCard components here --></SpeakerProfilesList></div>
component html:
SpeakerProfileCard:
<div class=""bg-white shadow-md p-4 mb-4""><img src=""{profile_picture_url}"" alt=""{speaker_name}"" class=""w-20 h-20 rounded-full mb-2""/><h2 class=""text-lg"">{speaker_name}</h2><p class=""text-sm"">{title}</p><p class=""text-sm"">{bio}</p></div>
SpeakerProfilesList:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Dropdown Menu Item Style,"description:
A dropdown menu item with a caret icon indicating that it has a submenu. The item should be clickable and have a hover effect.
components:
- DropdownMenuItem: standalone, contains text and a caret icon.
- CaretIcon: standalone, a small triangle icon indicating a submenu.
html:
<nav class=""flex justify-center mb-4""><ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4""><DropdownMenuItem/></li></ul></nav>
component html:
DropdownMenuItem:
<li class=""inline-flex items-center text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><a class=""dropdown-item py-2 px-4"">{menuItemText}</a><CaretIcon/></li>
CaretIcon:
<span class=""inline-block align-middle text-gray-600""><i class=""fas fa-caret-down mr-2""></i></span>"
Guided tours,"description:
The UI should display a list of guided tours, with each tour featuring an image, title, description, and a ""Book Now"" button. The design should be responsive, mobile-first, and accessible.
components:
- GuidedToursList: A component that takes children, representing a list of guided tours.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Guided Tours</h1><GuidedToursList><!-- list of GuidedTourCard components will be rendered here --></GuidedToursList></div>
component html:
GuidedToursList:
<ul class=""flex flex-wrap justify-center -mx-2"">{children}</ul>"
Product Price Currency,"description:
The UI should display the price of a product with its corresponding currency in a responsive and accessible way.
components:
- ProductPriceCurrency: A standalone component that displays the price and currency of a product.
html:
<div class=""flex items-center""><ProductPriceCurrency/></div>
component html:
ProductPriceCurrency:
<span class=""text-lg font-bold"">{price} {currency}</span>"
Popular Tags: Cloud of frequently used keywords,"description:
A cloud of popular tags, where each tag has a different size and color based on its frequency of use. The tags should be arranged in a way that creates a visually appealing and organic shape.
components:
- PopularTagCloud: standalone component that contains all the popular tags
- Tag: standalone component that represents a single popular tag
html:
<div class=""md:max-w-md mx-auto p-4""><PopularTagCloud/></div>
component html:
PopularTagCloud:
<div class=""flex flex-wrap justify-center mb-4"">{tags}</div>
Tag:
<a href=""{tag_url}"" class=""inline-block px-2 py-1 rounded {tag_color} text-lg mb-2 mr-2 hover:underline"">{tag_name} <span class=""text-sm"">({tag_frequency})</span></a>"
Price component that renders the product price in a green font,"description:
The Price component should be a simple text element that displays the product price in a prominent green font, making it stand out from the rest of the UI. The font size should scale up or down depending on the screen size to ensure it remains readable on different devices.
components:
- PriceComponent: (Standalone): This component renders the product price in a green font. On small screens (sm:), the font size is 18px, on medium screens (md:), it's 20px, and on large screens (lg:), it's 22px.
html:
<PriceComponent/>
component html:
PriceComponent:
<p class=""text-lg text-green-600"">{price}</p>"
Make a simple round avatar icon for event organizers,"description:
The UI should display a round avatar icon with a subtle gradient effect to give it a slight 3D appearance. The avatar should be a circular shape with a soft, rounded border. The background color should be a soft, pastel blue color (#87CEEB) to evoke a sense of trust and professionalism. The text color should be a contrasting dark blue color (#212121) to ensure readability. The avatar should scale nicely on different screen sizes, with a minimum size of 40px on mobile devices and up to 60px on larger screens.
components:
- AvatarIcon: (Standalone): A round avatar icon with a subtle gradient effect and text overlay.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<div class=""rounded-full bg-gradient-to-r from-{bg_color} to-{bg_color_dark} w-{size} h-{size} flex justify-center items-center""><span class=""text-{text_color} font-bold"">{initials}</span></div>"
"Overlay that covers the entire screen, often used for modal dialogs or notifications","description:
The UI should be a full-screen overlay that covers the entire screen, often used for modal dialogs or notifications. It should be darkened in the background to bring focus to the modal content.
components:
- FullScreenOverlay: a standalone component that covers the entire screen with a darkened background.
- ModalContent: a component that takes children and wraps the content of the modal dialog.
html:
<div class=""fixed inset-0 z-50 flex items-center justify-center""><FullScreenOverlay/><ModalContent><!-- modal content goes here --></ModalContent></div>
component html:
FullScreenOverlay:
<div class=""absolute inset-0 bg-gray-700 opacity-50""></div>
ModalContent:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Color picker palette,"description:
A color picker palette with a grid of colored squares, each representing a different color. The palette should be responsive and accessible.
components:
- ColorSquare: A standalone component representing a single colored square.
- ColorPalette: A component that takes children, containing the grid of colored squares.
html:
<ColorPalette><ColorSquare/><ColorSquare/>...
</ColorPalette>
component html:
ColorSquare:
<div class=""w-8 h-8 rounded-full {color}"" role=""button"" aria-label=""{color_name}""><!-- empty --></div>
ColorPalette:
<div class=""grid grid-cols-5 gap-2 md:grid-cols-10 lg:grid-cols-15"">{children}</div>"
Simple round avatar icon for event creators,"description:
The UI should be a circular avatar icon that displays the event creator's initials or a small image. The avatar should be responsive, accessible, and visually appealing. It should stand out with a highlight color and a subtle shadow to give it depth.
components:
- Avatar: (Standalone): A circular avatar icon that displays the event creator's initials or a small image.
html:
<div class=""flex justify-center mb-4""><Avatar/></div>
component html:
Avatar:
<div class=""rounded-full w-12 h-12 bg-orange-200 shadow-md flex justify-center items-center text-lg text-gray-700"">{initials}</div>"
Dropdown Menu Divider,"description:
A horizontal divider line within a dropdown menu, separating menu items into logical groups.
components:
- DropdownMenuDivider: (standalone)
html:
<div class=""dropdown-menu""><!-- Menu items above the divider --><DropdownMenuDivider/><!-- Menu items below the divider --></div>
component html:
DropdownMenuDivider:
<hr class=""mx-4 my-2 border-t border-gray-200""/>"
Simple round avatar icon for customer reviews,"description:
The UI should display a simple round avatar icon for customer reviews, with a clean and minimal design. The avatar should be circular, with a solid-colored background and a white border. The avatar should scale down on smaller screens to maintain its circular shape.
components:
- CustomerAvatar: (Standalone): A simple round avatar icon with a solid-colored background and a white border.
html:
<div class=""flex justify-center mb-4""><CustomerAvatar/><!-- customer review content here --></div>
component html:
CustomerAvatar:
<div class=""w-12 h-12 bg-orange-500 rounded-full border-2 border-white overflow-hidden""><img src=""{avatar_url}"" alt=""Customer Avatar"" class=""w-full h-full object-cover rounded-full""/></div>"
Featured Product Price,"description:
The UI should display a prominent product price with a discount badge and a strikethrough original price, if applicable. The price should be large and centered, with a subtle background color to draw attention.
components:
- ProductPrice: Standalone component that displays the price of a product.
- DiscountBadge: Standalone component that displays a badge indicating a discount.
html:
<div class=""max-w-md mx-auto p-4 bg-gray-100 rounded""><div class=""flex justify-center mb-4""><DiscountBadge/><ProductPrice/></div><p class=""text-gray-500 text-sm"">{originalPrice}</p></div>
component html:
ProductPrice:
<p class=""text-2xl font-bold"">{price}</p>
DiscountBadge:
<span class=""bg-orange-100 text-orange-500 text-xs px-2 rounded"">{discountBadgeText}</span>"
**Article Image**: A rectangular image component that displays the news article's image,"description:
The Article Image component will be a rectangular image that displays the news article's image. It should be responsive, taking up the full width of the container on smaller screens and scaling down to a maximum width on larger screens. The image will have a subtle border and a slight drop shadow to give it some depth. On hover, the image will have a slight zoom effect to make it more engaging.
components:
- ArticleImage: (Standalone)
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><ArticleImage/></div>
component html:
ArticleImage:
<img src={image_url} alt={image_alt} class=""w-full md:max-w-md lg:max-w-lg rounded-md border border-gray-200 shadow-md hover:scale-105 duration-300""/>"
"Logo with a stylized ""TS"" monogram in neon green","description:
The UI should feature a prominent logo with a stylized ""TS"" monogram in neon green. The logo should be circular in shape, with the ""TS"" monogram centered and stylized in a futuristic, modern font. The neon green color should be bright and eye-catching, with a slight glow effect to give it a high-tech feel. The logo should be large enough to be prominent on the screen, but not so large that it overpowers the rest of the UI.
components:
- LogoComponent: (Standalone): A circular logo featuring a stylized ""TS"" monogram in neon green.
html:
<div class=""flex justify-center h-screen""><LogoComponent/></div>
component html:
LogoComponent:
<div class=""rounded-full w-48 h-48 bg-gradient-to-r from-green-300 to-green-500 p-4""><svg><!-- ts monogram --></svg></div>"
"A hero image component with a background image of a person exercising, overlaid with white text and a call-to-action button","description:
The UI should be a hero section with a full-width background image of a person exercising, with a modern and vibrant color scheme. The image should be responsive and adapt to different screen sizes. On top of the image, there should be white text with a subtle shadow to make it stand out. The text should be centered horizontally and vertically on the image. Below the text, there should be a call-to-action button with a bright accent color to grab the user's attention. The button should be rounded and have a subtle shadow. The UI should be mobile-first, with the image and text scaling down on smaller screens.
components:
- HeroTextComponent: (Standalone): A text component with a subtle shadow to make it stand out on the hero image.
- CallToActionButtonComponent: (Standalone): A call-to-action button with a bright accent color and a subtle shadow.
html:
<section class=""h-screen bg-cover bg-center"" style=""background-image: url('{image_url}')""><div class=""container mx-auto p-4""><HeroTextComponent/><CallToActionButtonComponent/></div></section>
component html:
HeroTextComponent:
<p class=""text-3xl text-white font-bold shadow-md"">{hero_text}</p>
CallToActionButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Opportunity Tracker: Monitor sales pipelines,"description:
The Opportunity Tracker UI should display a list of sales opportunities, with each opportunity showing its name, stage, and probability of closing. The UI should be responsive, with a card-based layout on larger screens and a list view on smaller screens.
components:
- OpportunityList: A component that takes children (a list of `OpportunityCard` components) and displays them in a responsive grid or list.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Opportunity Tracker</h1><OpportunityList><!-- List of OpportunityCard components will be rendered here --></OpportunityList></div>
component html:
OpportunityList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
"A footer section with a dark blue background and white text, featuring links to social media, terms and conditions, and contact information","description:
The footer section should have a dark blue background with white text, making it easily readable. The section should be divided into three columns on larger screens, with social media links on the left, terms and conditions in the center, and contact information on the right. On smaller screens, the columns should stack vertically to ensure ease of use.
components:
- FooterSection: (Takes Children): The top-level footer component that wraps all the other components.
- SocialMediaLinks: (Standalone): A list of links to social media platforms.
- TermsAndConditions: (Standalone): A link to the terms and conditions page.
- ContactInfo: (Standalone): A component displaying contact information, including address, phone number, and email.
html:
<footer class=""bg-dark-blue py-12""><FooterSection><div class=""lg:flex lg:flex-row lg:justify-between lg:items-center md:flex md:flex-col sm:flex sm:flex-col""><SocialMediaLinks/><TermsAndConditions/><ContactInfo/></div></FooterSection></footer>
component html:
FooterSection:
<div class=""container mx-auto p-4"">{children}</div>
SocialMediaLinks:
<ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4""><a href=""{twitter_url}"" class=""text-white hover:text-yellow-400""><i class=""fab fa-twitter""></i></a></li><li class=""mr-4""><a href=""{facebook_url}"" class=""text-white hover:text-yellow-400""><i class=""fab fa-facebook-f""></i></a></li><!-- Add more social media links here --></ul>
TermsAndConditions:
<p class=""text-white mb-4""><a href=""{terms_and_conditions_url}"" class=""hover:text-yellow-400"">Terms and Conditions </a></p>
ContactInfo:
<div class=""text-white mb-4""><p>{address}</p><p>Phone: {phone_number}</p><p>Email: <a href=""mailto:{email}"" class=""hover:text-yellow-400"">{email}</a></p></div>"
Order summary and subtotal display,"description:
The UI should display an order summary with a subtotal, taxes, and a total. The design should be responsive, with a mobile-first approach, and follow accessibility guidelines.
components:
- OrderSummaryComponent: (standalone) - displays the order summary
- SubtotalComponent: (standalone) - displays the subtotal
- TaxComponent: (standalone) - displays the tax
- TotalComponent: (standalone) - displays the total
html:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-2"">Order Summary</h2><OrderSummaryComponent/><div class=""flex justify-between mb-2""><SubtotalComponent/><TaxComponent/></div><TotalComponent/></section>
component html:
OrderSummaryComponent:
<ul class=""list-none mb-4""><li class=""flex justify-between mb-2"">{item_name} x {item_quantity}</li><!-- repeat for each item in the order --></ul>
SubtotalComponent:
<p>Subtotal: <span class=""font-bold"">{subtotal_amount}</span></p>
TaxComponent:
<p>Tax ({tax_percentage}%): <span class=""font-bold"">{tax_amount}</span></p>
TotalComponent:
<p class=""text-lg font-bold"">Total: <span class=""text-lg font-bold"">{total_amount}</span></p>"
Testimonial Quote Font,"description:
The UI should display a quote in a prominent font style, suitable for a testimonial section. The quote should be resizable and legible on various devices.
components:
- QuoteText: A standalone component that displays the quote text.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><blockquote class=""quote""><QuoteText/></blockquote></div>
component html:
QuoteText:
<p class=""text-lg md:text-xl lg:text-2xl font-serif italic"">{quote_text}</p>"
"A header image component that displays a large, high-quality image with a subtle overlay effect","description:
The Header Image component should display a large, high-quality image that takes up the full width of the screen, with a subtle overlay effect to add depth and dimension. The image should scale responsively to fit different screen sizes, with the overlay effect adjusting accordingly. On larger screens, the image should be more prominent, while on smaller screens, the image should be smaller and more compact.
components:
- HeaderImage: (Takes Children): A component that displays a large, high-quality image with a subtle overlay effect.
html:
<HeaderImage><!-- Header Image content --></HeaderImage>
component html:
HeaderImage:
<div class=""relative h-screen w-full bg-cover bg-center"" style=""`background-image: url({image_url});""}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div>{children}</div>"
Footers,"description:
The UI should include a responsive footer section that is typically found at the bottom of a webpage. It should contain three segments: contact information, quick links, and social media links. Each segment should be clearly labeled and easy to navigate. On mobile devices, the segments should stack vertically, while on larger screens, they should be displayed in a horizontal layout.
components:
- ContactInfo: (Standalone): Displays business contact details like phone number, email, and address.
- QuickLinks: (Standalone): Shows links to important pages such as Home, About Us, Services, etc.
- SocialMediaLinks: (Standalone): Displays icons or textual links to social media profiles.
html:
<footer class=""bg-gray-800 text-white p-5""><div class=""max-w-screen-lg mx-auto flex flex-col md:flex-row justify-between""><ContactInfo/><QuickLinks/><SocialMediaLinks/></div></footer>
component html:
ContactInfo:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Contact Us</h4><p>{phoneNumber}</p><p>{emailAddress}</p><p>{postalAddress}</p></div>
QuickLinks:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Quick Links</h4><ul class=""space-y-2""><li><a href=""{homePageLink}"" class=""hover:text-gray-300"">Home</a></li><li><a href=""{aboutUsLink}"" class=""hover:text-gray-300"">About Us</a></li><li><a href=""{servicesLink}"" class=""hover:text-gray-300"">Services</a></li><li><a href=""{contactLink}"" class=""hover:text-gray-300"">Contact</a></li></ul></div>
SocialMediaLinks:
<div class=""mb-5 md:mb-0""><h4 class=""font-bold text-lg mb-3"">Follow Us</h4><ul class=""flex space-x-4""><li><a href=""{facebookLink}"" class=""hover:text-gray-300"">Facebook</a></li><li><a href=""{twitterLink}"" class=""hover:text-gray-300"">Twitter</a></li><li><a href=""{instagramLink}"" class=""hover:text-gray-300"">Instagram</a></li></ul></div>"
"A headline component with a large font size, bold font weight, and a subtle text shadow effect","description:
The UI should have a simple and clean design, with a prominent headline that grabs the user's attention. The headline should have a large font size, bold font weight, and a subtle text shadow effect to make it stand out.
components:
- HeadlineComponent: (Standalone): This component displays a headline with a large font size, bold font weight, and a subtle text shadow effect. On small screens (sm:), the headline font size should be 24px. On medium screens (md:), the headline font size should be 36px. On large screens (lg:), the headline font size should be 48px.
html:
<div class=""max-w-md mx-auto p-4""><HeadlineComponent/></div>
component html:
HeadlineComponent:
<h1 class=""text-3xl font-bold text-gray-800 shadow-md"">{headline_text}</h1>"
"Small, circular Loader icon with a subtle animation","description:
The Loader icon should be a small, circular element with a subtle animation to indicate loading. The icon should be centered and take up a minimal amount of space. On smaller screens, the icon should be smaller and more compact, while on larger screens, it can be slightly larger.
components:
- LoaderIcon: (Standalone): A small, circular Loader icon with a subtle animation.
html:
<div class=""flex justify-center""><LoaderIcon/></div>
component html:
LoaderIcon:
<div class=""w-6 h-6 border-2 border-gray-300 border-dashed rounded-full animate-spin""><!-- animation will be handled through the `animate-spin` utility class --></div>"
"A component that displays a list of latest news articles with title, image, and short description","description:
The UI should display a list of latest news articles in a clean and organized manner, with each article showing a title, image, and short description. The layout should be responsive, with a card-based design that scales well on different screen sizes. The UI should use a consistent color palette with highlight colors to make different parts of the UI stand out.
components:
- NewsList: (Takes Children): A container component that displays a list of news articles. It should have a maximum width and margin on larger screens, and take up the full width on small screens.
html:
<div class=""max-w-md mx-auto p-4 pt-6""><NewsList><!-- list of news articles will be rendered here --></NewsList></div>
component html:
NewsList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Featured Video Play Button,"description:
The UI should display a play button overlaid on a featured video thumbnail, encouraging users to play the video.
components:
- FeaturedVideoThumbnail: standalone, displays the video thumbnail.
- PlayButton: standalone, displays a play button icon.
html:
<div class=""relative w-full h-full flex justify-center""><FeaturedVideoThumbnail/><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><PlayButton/></div></div>
component html:
FeaturedVideoThumbnail:
<img src={video_thumbnail_url} alt=""Featured Video Thumbnail"" class=""w-full h-full object-cover rounded-lg""/>
PlayButton:
<button aria-label=""Play Video"" class=""bg-white rounded-full p-4 text-3xl font-bold""><i class=""fas fa-play text-lg"" aria-hidden=""true""></i></button>"
A chart component that displays a line graph with financial data,"description:
The chart component should display a clean and minimalistic line graph with financial data. The graph should be responsive and scalable to fit different screen sizes. The UI should have a consistent color palette with highlight colors to make different parts of the graph stand out. The graph should have a subtle gradient effect to add depth and dimension. The chart should also have a clear legend and axes labels to make the data easy to understand.
components:
- FinancialChart: (Takes Children): A container component that wraps the line graph and its related elements.
- LineGraph: (Standalone): A component that displays the line graph with financial data.
- Legend: (Standalone): A component that displays the legend for the graph.
- AxesLabels: (Standalone): A component that displays the labels for the x and y axes.
html:
<FinancialChart><LineGraph/><Legend/><AxesLabels/><!-- additional chart information --><p>{financial_data_info}</p></FinancialChart>
component html:
FinancialChart:
<div class=""max-w-md mx-auto p-4 bg-white shadow-md rounded"">{children}</div>
LineGraph:
<svg><!-- line graph path --></svg>
Legend:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><svg><!-- circle --></svg><span>{legend_label_1}</span></li><li class=""mr-4""><svg><!-- square --></svg><span>{legend_label_2}</span></li></ul>
AxesLabels:
<div class=""flex justify-between mb-4""><span>{x_axis_label}</span><span>{y_axis_label}</span></div>"
Counter control,"description:
The UI should feature a numeric display of the current counter value and two buttons: one to increment and one to decrement the counter. It should be easy to use on both desktop and mobile devices, with clearly labeled buttons.
components:
- CounterDisplay: (Standalone)**: Displays the current count.
- IncrementButton: (Standalone)**: Button to increase the count.
- DecrementButton: (Standalone)**: Button to decrease the count.
html:
<div class=""flex flex-col items-center space-y-4""><!-- Counter display area --><CounterDisplay/><!-- Button controls for counter --><div class=""flex space-x-2""><DecrementButton/><IncrementButton/></div></div>
component html:
CounterDisplay:
<div class=""text-xl font-semibold"" aria-live=""polite"">{current_count}</div>
IncrementButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Increase count"">Increase</button>
DecrementButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Decrease count"">Decrease</button>"
Footer Copyright Symbol,"description:
The UI should be a simple footer with a copyright symbol and the year.
components:
- Footer: component (standalone)
html:
<footer class=""bg-gray-200 h-screen p-4""><Footer/></footer>
component html:
Footer:
<p class=""text-sm text-gray-600"">{year} &copy; {site_name}</p>"
Direct message conversation list with online status,"description:
The UI should be a list of direct message conversations, each displaying the conversation title, the last message, and the online status of the other user. The list should be responsive, with a maximum width and scrollable on smaller screens.
components:
- ConversationItem: (standalone): Represents a single conversation item in the list.
- OnlineStatusIndicator: (standalone): Indicates whether the other user is online or offline.
html:
<div class=""max-w-md overflow-y-auto mx-auto p-4""><!-- Conversation list --><ul><ConversationItem/><ConversationItem/><!-- ... --></ul></div>
component html:
ConversationItem:
<li class=""py-4 border-b border-gray-200""><div class=""flex items-center""><img src={user_avatar_url} alt=""User avatar"" class=""w-10 h-10 rounded-full mr-3""/><div class=""flex-1""><h5 class=""text-lg"">{conversation_title}</h5><p class=""text-gray-600"">{last_message_preview}</p></div><OnlineStatusIndicator/></div></li>
OnlineStatusIndicator:
<span class={online ? 'text-green-500' : 'text-gray-400'}>{online ? 'Online' : 'Offline'}</span>"
Email list view with sender and subject,"description:
The UI should display a list of emails, with each email showing the sender's name and the subject of the email. The list should be responsive, with each email item taking up the full width of the screen on mobile devices and becoming a compact list item on larger screens.
components:
- EmailListItem: (standalone): A single email item in the list, displaying the sender and subject.
- EmailList: (takes children): A container for the list of email items.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-2xl font-bold mb-4"">Emails</h1><EmailList><EmailListItem/><EmailListItem/><!-- add more EmailListItem components here --></EmailList></div>
component html:
EmailListItem:
<div class=""flex justify-between mb-4 p-4 bg-white shadow-md rounded""><div><p class=""text-lg font-bold"">{senderName}</p><p class=""text-gray-600"">{subject}</p></div><div class=""text-right""><p class=""text-gray-600"">{receivedAt}</p></div></div>
EmailList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Game Reviews and Ratings,"description:
The UI should display a list of game reviews with their corresponding ratings, along with the game title, reviewer's name, and the review text.
components:
- GameReviewCard: standalone component that displays a single game review.
- GameReviewList: takes children (a list of `GameReviewCard` components).
html:
<div class=""container mx-auto p-4""><h2 class=""text-2xl mb-4"">Game Reviews</h2><GameReviewList/></div>
component html:
GameReviewCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg"">{gameTitle}</h3><p>By {reviewerName}</p><p class=""text-gray-600"">{reviewText}</p><p>Rating: {rating}/5</p></div>
GameReviewList:
<ul class=""list-none"">{children}</ul>"
Code Review and Approval Workflow,"description:
The UI should display a vertical timeline of code review and approval workflow, with each step represented by a circular icon and a brief description. The timeline should be responsive and adaptable to different screen sizes.
components:
- CodeReviewStep: A standalone component representing a single step in the code review process.
- Timeline: A component that takes children, which are `CodeReviewStep` components.
html:
<div class=""max-w-md mx-auto p-4""><Timeline><CodeReviewStep/><CodeReviewStep/><CodeReviewStep/><!-- Add more CodeReviewStep components as needed --></Timeline></div>
component html:
CodeReviewStep:
<div class=""flex items-center mb-4""><div class=""w-8 h-8 bg-orange-500 rounded-full text-white text-lg"">{step_icon}</div><div class=""ml-4""><p class=""text-lg"">{step_description}</p><small class=""text-gray-600"">{step_status}</small></div></div>
Timeline:
<div class=""flex flex-col items-center"">{children}</div>"
Subscription management for channel updates,"description:
The UI should be a responsive subscription management panel for channel updates. It should display a list of channels with toggle buttons to manage subscription status. The panel should be accessible, responsive, and easy to use.
components:
- SubscriptionToggle: A standalone component that renders a toggle button to manage subscription status.
- ChannelList: A component that takes children (a list of `ChannelSubscriptionCard` components).
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Subscription Management</h2><ChannelList><!-- list of ChannelSubscriptionCard components will be rendered here --></ChannelList></div>
component html:
SubscriptionToggle:
<label class=""inline-flex items-center""><input type=""checkbox"" checked=""{isSubscribed}"" class=""form-checkbox""/><span class=""ml-2"">{isSubscribed ? 'Unsubscribe' : 'Subscribe'}</span></label>
ChannelList:
<ul class=""list-none mb-0"">{children}</ul>"
Breadcrumb Navigation,"description:
A horizontal list of links, with each item separated by a forward slash (/), and the current page highlighted.
components:
- BreadcrumbItem: (standalone): represents a single item in the breadcrumb navigation
- BreadcrumbNavigation: (takes children): contains a list of breadcrumb items
html:
<nav class=""flex flex-wrap mb-4 text-sm"" aria-label=""Breadcrumb""><BreadcrumbNavigation><BreadcrumbItem/><BreadcrumbItem/><BreadcrumbItem/></BreadcrumbNavigation></nav>
component html:
BreadcrumbItem:
<li class=""mr-2""><a href=""{href}"" class=""text-gray-600 hover:text-gray-900"">{label}</a><span class=""mx-2"">/</span></li>
BreadcrumbNavigation:
<ul class=""list-none p-0 m-0 flex flex-wrap"">{children}</ul>"
Customer Review Stars,"description:
The UI should display a customer review with a rating system represented by stars, with a text description of the review.
components:
- Reviewstars: (standalone): displays the rating system using stars
- ReviewText: (standalone): displays the text description of the review
html:
<div class=""flex flex-wrap mb-4""><Reviewstars/><ReviewText/></div>
component html:
Reviewstars:
<div class=""flex text-lg"">{[1, 2, 3, 4, 5].map((star, index) =>( <span class={index < rating ? 'text-yellow-400' : 'text-gray-400'}>&#9733; </span>))}</div>
ReviewText:
<p class=""text-lg"">{review_text}</p>"
File upload controls,"description:
The UI should consist of a file input field, a button to trigger file selection, and a text indicator showing the selected file name. The component should be responsive and adapt to different screen sizes.
components:
- FileUploader: A standalone component that wraps the file input field and button.
- FileSelectorButton: A standalone component that represents the button to trigger file selection.
- SelectedFileInfo: A standalone component that displays the selected file name.
html:
<div class=""flex flex-col md:flex-row items-center mb-4""><FileUploader/><SelectedFileInfo/></div>
component html:
FileUploader:
<div class=""flex items-center""><input type=""file"" id=""file-input"" class=""hidden""/><FileSelectorButton/><label for=""file-input"" class=""sr-only"">Select a file</label></div>
FileSelectorButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Select a file</button>
SelectedFileInfo:
<p class=""text-gray-600"">{selected_file_name}</p>"
Featured Image Slider,"description:
The UI should display a responsive, mobile-first, and accessible featured image slider that showcases a collection of images with navigation controls. The slider should be visually appealing, with a clear and prominent display of the images.
components:
- ImageSlide: A standalone component representing a single image slide in the slider.
- ImageSliderNavigation: A standalone component providing navigation controls (previous and next buttons) for the slider.
- FeaturedImageSlider: A container component that takes children (ImageSlide components) and renders the slider with navigation controls.
html:
<div class=""max-w-md mx-auto mt-4 rounded-md overflow-hidden""><FeaturedImageSlider><!-- Image slides will be inserted here --><ImageSlide/><ImageSlide/><ImageSlide/></FeaturedImageSlider><ImageSliderNavigation/></div>
component html:
ImageSlide:
<div class=""w-full h-48 md:h-64 xl:h-80 bg-cover bg-center"" style=""backgroundImage: url({imageUrl});""}/>
ImageSliderNavigation:
<div class=""flex justify-between mt-2 md:mt-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Previous</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Next</button></div>
FeaturedImageSlider:
<div class=""relative"">{children} <ImageSliderNavigation/></div>"
"A profile picture component featuring a round avatar and an ""Edit Profile"" button","description:
The Profile Picture component should feature a round avatar with a subtle shadow to give it a 3D effect. The avatar should be large on smaller screens and smaller on larger screens. Below the avatar, an ""Edit Profile"" button should be displayed with a subtle gradient effect to make it stand out.
components:
- ProfileAvatar: (Standalone): A rounded image component that displays the user's profile picture.
- EditProfileButton: (Standalone): A button with a gradient effect that allows the user to edit their profile.
html:
<div class=""flex flex-col items-center""><ProfileAvatar/><EditProfileButton/></div>
component html:
ProfileAvatar:
<img src={profilePictureUrl} alt=""Profile Picture"" class=""rounded-full w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40 shadow-md""/>
EditProfileButton:
<button class=""bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold py-2 px-4 rounded"">Edit Profile</button>"
A header component with a light gray background that includes:,"description:
The header component should have a light gray background and a fixed position at the top of the screen. It should be responsive and adapt to different screen sizes. On smaller screens, the header should take up the full width of the screen, and on larger screens, it should have a maximum width and be centered.
components:
- Header: (Standalone): The top-level header component with a light gray background.
html:
<Header/>
component html:
Header:
<header class=""fixed top-0 left-0 w-full md:max-w-md md:mx-auto bg-gray-200 p-4""><!-- header content will go here --></header>"
Progress Bars/Steps,"description:
The UI should be a series of steps or progress bars that visually represent a multi-step process. Each step should have a distinct visual indicator of completeness, such as a checkmark or a filled progress bar. The UI should be responsive and adapt to different screen sizes.
components:
- StepIndicator: A standalone component that represents a single step in the process, displaying a visual indicator of completeness.
- ProgressBar: A component that takes children, wrapping multiple `StepIndicator` components to form a cohesive progress bar.
html:
<div class=""md:w-full lg:w-3/4 xl:w-1/2 mx-auto p-4""><ProgressBar><StepIndicator/><StepIndicator/><StepIndicator/><!-- Add more StepIndicator components as needed --></ProgressBar></div>
component html:
StepIndicator:
<div class=""flex items-center mb-2""><div class=""w-6 h-6 bg-{step_status} rounded-full mr-2"" aria-hidden=""true""></div><p>{step_label}</p></div>
ProgressBar:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Header Search Icon,"description:
A search icon in the header that is accessible and responsive.
components:
- SearchIcon: A standalone component that displays a search icon.
html:
<header class=""container mx-auto p-4 flex justify-between items-center""><!-- Search Icon --><SearchIcon/><!-- other header elements --></header>
component html:
SearchIcon:
<a href=""#"" class=""text-gray-600 hover:text-gray-900 transition duration-300""><span class=""sr-only"">Search</span><i class=""fas fa-search text-lg"" aria-hidden=""true""></i></a>"
"Product card component with a white background, rounded corners, and a subtle shadow effect","description:
The Product Card component should have a clean and modern design, with a white background, rounded corners, and a subtle shadow effect to give it some depth. The component should be responsive, with a max width of 300px on larger screens and a full-width layout on smaller screens.
components:
- ProductCard: (Takes Children): This component represents a product card, with a white background, rounded corners, and a subtle shadow effect. It takes children elements as its content.
html:
<div class=""max-w-md md:max-w-lg lg:max-w-xl mx-auto p-4""><ProductCard><!-- children elements here --></ProductCard></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded-md p-4"">{children}</div>"
"Input field for entering tags or keywords, often with auto-suggestion functionality","description:
The UI should be a text input field with a dropdown list of suggested tags or keywords below it. The input field should be responsive and adapt to different screen sizes. The dropdown list should be hidden by default and only appear when the user starts typing in the input field.
components:
- TagInput: A standalone component that includes the input field and dropdown list.
- DropdownList: A component that displays a list of suggested tags or keywords, takes children.
html:
<div class=""max-w-md mx-auto p-4""><TagInput/></div>
component html:
TagInput:
<div class=""relative""><input type=""text"" class=""w-full pl-4 pr-10 text-sm"" placeholder=""Enter tags or keywords""/><DropdownList>{suggestedTags}</DropdownList></div>
DropdownList:
<ul class=""absolute bg-white shadow-md w-full rounded-b-md"">{children}</ul>"
Sponsorship opportunities display,"description:
- The UI should present a clean and organized display of various sponsorship opportunities. Each opportunity should be clearly separated, possibly in card format, displaying key information such as the title of the sponsorship, benefits, and a call-to-action button for more details or to apply.
components:
- SponsorshipCard: A standalone component. It displays information about a single sponsorship opportunity and includes a button for further actions.
- Button: A standalone component. It represents a reusable button used for actions like learning more or applying for the sponsorship.
html:
<main class=""p-4""><h1 class=""text-xl font-bold text-center mb-6"">Sponsorship Opportunities</h1><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4""><SponsorshipCard/><SponsorshipCard/><SponsorshipCard/><!-- Add further SponsorshipCard components depending on the number of opportunities --></div></main>
component html:
SponsorshipCard:
<div class=""max-w-sm rounded overflow-hidden shadow-lg p-4""><h2 class=""font-bold text-lg mb-2"">{sponsorship_title}</h2><p class=""text-gray-700 text-base mb-4"">{benefits_summary}</p><Button/></div>
Button:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Learn More </button>"
Animation effect controls,"description:
The UI should be a responsive, mobile-first control panel that allows users to adjust animation effects. It should consist of a wrapper container with three main sections: effect type, animation speed, and playback controls. The effect type section should display a list of available animation effects, allowing users to select one. The animation speed section should include a slider to adjust the animation speed. The playback controls section should include buttons to play, pause, and reset the animation.
components:
- EffectTypeSelector: (standalone): A dropdown menu to select the animation effect type.
- SpeedSlider: (standalone): A slider to adjust the animation speed.
- PlaybackControls: (standalone): A container with play, pause, and reset buttons for controlling the animation playback.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Animation Effect Controls</h2><div class=""flex flex-wrap -mx-4 mb-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><EffectTypeSelector/></div><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><SpeedSlider/></div></div><div class=""text-right""><PlaybackControls/></div></div>
component html:
EffectTypeSelector:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value="""">{effect_type}</option><!-- more options --></select>
SpeedSlider:
<div class=""relative""><input type=""range"" class=""w-full h-2 p-0 bg-gray-200 rounded-lg appearance-none"" min=""0"" max=""100"" value=""{speed_value}""/><span class=""absolute left-0 bottom-0 text-sm"">{speed_value}%</span></div>
PlaybackControls:
<div class=""flex justify-end""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-play"" aria-hidden=""true""></i></button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-pause"" aria-hidden=""true""></i></button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-undo"" aria-hidden=""true""></i></button></div>"
Rating and Review Systems,"description:
The UI should display a rating system with 5 stars, allowing users to select a rating from 1 to 5. Below the rating system, there should be a text area for users to leave a review. The review section should also display the overall rating and the total number of reviews.
components:
- RatingSystem: Standalone component that displays the 5-star rating system.
- ReviewInput: Standalone component that displays a text area for users to leave a review.
- ReviewSummary: Standalone component that displays the overall rating and the total number of reviews.
- ReviewSection: Component that takes children, which contains the `ReviewInput` and `ReviewSummary` components.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12 bg-white shadow-md rounded""><RatingSystem/><ReviewSection><ReviewInput/><ReviewSummary/></ReviewSection></div>
component html:
RatingSystem:
<div class=""flex justify-center mb-4"">{stars}.map((star, index) =>( <i class={`cursor-pointer {index <= rating ? 'text-yellow-400' : 'text-gray-400'} fas fa-star`}/>)) <p class=""text-sm text-gray-600"">{rating} out of 5</p></div>
ReviewInput:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Leave a review""></textarea>
ReviewSummary:
<div class=""flex justify-between mb-4""><p class=""text-sm text-gray-600"">{overall_rating} out of 5</p><p class=""text-sm text-gray-600"">{review_count} reviews</p></div>
ReviewSection:
<div class=""p-4 pt-2"">{children}</div>"
Image gallery controls,"description:
The UI for the image gallery controls should consist of simple navigation buttons that allow users to move forward to the next image, backward to the previous image, and possibly a close button to exit the gallery view. These controls should be visually identifiable, accessible, and responsive, adapting gracefully across devices.
components:
- GalleryButton: Standalone – Represents a button used for navigation within the gallery (next, previous, close).
- GalleryControls: Takes children – A container that groups all the gallery buttons together.
html:
<div class=""flex justify-center space-x-4 p-4""><GalleryButton/><GalleryButton/><GalleryButton/></div>
component html:
GalleryButton:
<button type=""button"" class=""p-2 text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md"">{button_label}</button>
GalleryControls:
<div class=""flex justify-center space-x-4 p-4"">{children}</div>"
Header Navigation Icon,"description:
- The UI should feature a header with a navigational icon, typically displayed as a hamburger menu on mobile views. This icon is usually represented by three horizontal lines.
components:
- Header: This is a standalone component that includes other components such as the NavigationIcon.
- NavigationIcon: This is a standalone component that visually represents the menu icon usually used to open a navigation drawer or menu.
html:
<Header/>
component html:
Header:
<header class=""bg-gray-800 text-white p-3""><NavigationIcon/></header>
NavigationIcon:
<button aria-label=""Menu"" class=""h-6 w-6 flex flex-col justify-around items-center""><span class=""block w-full h-0.5 bg-white""></span><span class=""block w-full h-0.5 bg-white""></span><span class=""block w-full h-0.5 bg-white""></span></button>"
Countdown Timers,"description:
The UI should display a countdown timer showing days, hours, minutes, and seconds until a specific date and time.
components:
- CountdownTimer: (standalone): The main countdown timer component.
- DayCounter: (standalone): Displays the number of days.
- HourCounter: (standalone): Displays the number of hours.
- MinuteCounter: (standalone): Displays the number of minutes.
- SecondCounter: (standalone): Displays the number of seconds.
html:
<div class=""flex justify-center""><CountdownTimer/></div>
component html:
CountdownTimer:
<div class=""flex gap-4""><DayCounter/><span>:</span><HourCounter/><span>:</span><MinuteCounter/><span>:</span><SecondCounter/></div>
DayCounter:
<div class=""text-4xl"">{days} <span>days</span></div>
HourCounter:
<div class=""text-4xl"">{hours} <span>hours</span></div>
MinuteCounter:
<div class=""text-4xl"">{minutes} <span>minutes</span></div>
SecondCounter:
<div class=""text-4xl"">{seconds} <span>seconds</span></div>"
"Large, prominently displayed image at the top of a webpage","description:
A large, prominent image at the top of a webpage, taking up the full width of the screen on desktop and tablet devices, and the full screen height on mobile devices.
components:
- HeroImage: (standalone): A large, prominent image at the top of a webpage.
html:
<header><HeroImage/></header>
component html:
HeroImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-screen object-cover lg:h-full lg:w-full""/><!-- The w-full and h-screen classes make the image take up the full width and height of the screen on mobile devices. The lg:h-full and lg:w-full classes make the image take up the full height and width of the screen on desktop and tablet devices. The object-cover class ensures the image is fully visible and scaled to cover the entire container. -->"
Tweet analytics for engagement metrics,"description:
The UI should be a dashboard displaying tweet analytics for engagement metrics. It should show the number of likes, retweets, replies, and engagements for a tweet.
components:
- TweetAnalyticsCard: standalone component displaying the tweet analytics
- MetricItem: takes children, displays a single metric (e.g. likes, retweets, etc.)
html:
<div class="" container mx-auto p-4 pt-6 md:p-6""><TweetAnalyticsCard/></div>
component html:
TweetAnalyticsCard:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold"">Tweet Analytics</h2><ul class=""list-none mb-0""><MetricItem>Likes: {likes} </MetricItem><MetricItem>Retweets: {retweets} </MetricItem><MetricItem>Replies: {replies} </MetricItem><MetricItem>Engagements: {engagements} </MetricItem></ul></div>
MetricItem:
<li class=""flex items-center mb-2""><span class=""mr-2"">{icon}</span><span>{children}</span></li>"
Callout Box Border Style,"description:
A callout box with a border style, usually used to highlight important information.
components:
- CalloutBox: A standalone component that contains the callout box content.
html:
<div class=""container mx-auto p-4 md:p-6""><CalloutBox/></div>
component html:
CalloutBox:
<div class=""bg-yellow-100 border-l-4 border-orange-500 p-4 rounded-md""><p>{callout_message}</p></div>"
Header Logo Image,"description:
The UI should display a logo image in the header section of the website. The logo image should be responsive and centered within its container.
components:
- HeaderLogo: A standalone component that displays a logo image.
html:
<header class=""mx-auto p-4""><HeaderLogo/></header>
component html:
HeaderLogo:
<img src={logo_url} alt=""Logo"" class=""h-8 md:h-12 w-auto mx-auto""/>"
A search bar with a white input field and a blue magnifying glass icon on the right,"description:
The UI should be a simple search bar with a white input field and a blue magnifying glass icon on the right. The search bar should be responsive and adjust its size based on the screen size. On smaller screens, the search bar should be narrower and taller, while on larger screens, it should be wider and shorter. The blue magnifying glass icon should be prominent and eye-catching.
components:
- SearchBar: (Takes Children): A container for the search input field and the magnifying glass icon.
- SearchInput: (Standalone): A white input field for the user to enter their search query.
- SearchIcon: (Standalone): A blue magnifying glass icon that serves as a button to submit the search query.
html:
<div class=""flex justify-center mx-auto max-w-md p-4 lg:max-w-lg""><SearchBar><SearchInput/><SearchIcon/></SearchBar></div>
component html:
SearchBar:
<div class=""flex items-center border border-gray-300 rounded-md"">{children}</div>
SearchInput:
<input type=""text"" class=""w-full px-2 py-1 bg-white border-none rounded-md""/>
SearchIcon:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md""><svg><!-- magnifying glass --></svg></button>"
Product Feature List Title,"description:
The UI should be a title section that displays a heading for a list of product features. It should be responsive, accessible, and SEO-friendly.
components:
- FeatureTitle: a standalone component that displays a title for the product feature list.
html:
<header><FeatureTitle/></header>
component html:
FeatureTitle:
<h2 class=""text-3xl font-bold mb-4"">{title_text}</h2>"
Responsive Post Formatting,"description:
The UI should display a responsive post format that adapts to different screen sizes, with a clear separation between the post's title, metadata, content, and action buttons. The post format should be mobile-first, accessible, and SEO-friendly.
components:
- PostHeader: (standalone): Displays the post's title and metadata.
- PostContent: (standalone): Displays the post's content.
- PostActions: (standalone): Displays the post's action buttons (e.g., like, comment, share).
- PostContainer: (takes children): Wraps the entire post format.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostContainer><PostHeader/><PostContent/><PostActions/></PostContainer></div>
component html:
PostHeader:
<header class=""flex justify-between mb-4""><h2 class=""text-2xl font-bold"">{post_title}</h2><p class=""text-sm text-gray-600"">{posted_at} by {author_name}</p></header>
PostContent:
<div class=""text-lg leading-relaxed mb-4"">{post_content}</div>
PostActions:
<div class=""flex justify-between mb-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Like </button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Comment </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Share </button></div>
PostContainer:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
Tooltip/Hovercard Previews,"description:
The UI should be a hovercard preview that appears when a user hovers over a trigger element, providing additional information about the trigger element. The hovercard should be responsive, mobile-friendly, and accessible.
components:
- HovercardTrigger: Standalone component that triggers the hovercard preview when hovered over.
- HovercardPreview: Component that takes children, displaying the additional information about the trigger element.
html:
<div class=""flex justify-center""><HovercardTrigger/><HovercardPreview><!-- hovercard content goes here --></HovercardPreview></div>
component html:
HovercardTrigger:
<a href=""#"" class=""inline-block p-2 hover:underline"">Trigger Text</a>
HovercardPreview:
<div class=""absolute z-10 bg-white shadow-md p-4 rounded""><h5 class=""text-lg font-bold"">{header_text}</h5><p class=""text-gray-600"">{preview_text}</p>{children}</div>"
Callout Box Button,"description:
A Callout Box Button is a responsive, mobile-first UI component that displays a prominent button with a callout box containing additional information when hovered or focused. The callout box should be positioned above the button and have a subtle animation when appearing/dissappearing.
components:
- CalloutBoxButton: Standalone component containing a button and a callout box.
- CalloutBox: Standalone component containing the additional information.
- Button: Standalone component displaying the prominent button.
html:
<div class=""flex justify-center""><CalloutBoxButton/></div>
component html:
CalloutBoxButton:
<div class=""relative inline-block""><Button/><CalloutBox/></div>
CalloutBox:
<div class=""absolute bg-white p-4 rounded-md shadow-md text-sm text-gray-600"">{callout_text}</div>
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg"">{button_text}</button>"
Parallax controls,"description:
The UI should include a vertically arranged set of sections, each having a distinct content area with overlaid text or images that appear to move at a different speed than the rest of the scrollable content as the user scrolls down the page, creating a parallax effect.
components:
- ParallaxSection: (Standalone): A section of the parallax page which contains background and foreground content.
- ForegroundContent: (Standalone): Contains the text or images visible at normal scroll speed.
- BackgroundImage: (Standalone): Contains the slower moving background image.
html:
<div class=""parallax-container""><ParallaxSection/><ParallaxSection/><ParallaxSection/></div>
component html:
ParallaxSection:
<section class=""relative""><BackgroundImage/><ForegroundContent/></section>
ForegroundContent:
<div class=""absolute inset-0 flex items-center justify-center""><div class=""p-4 bg-white bg-opacity-75 rounded md:max-w-lg text-center""><h2 class=""text-2xl font-bold mb-2"">{headline_text}</h2><p class=""text-lg"">{description_text}</p></div></div>
BackgroundImage:
<div class=""absolute inset-0""><div class=""w-full h-full bg-cover bg-center"" style=""background-image: url('{background_image_url}');""></div></div>"
Label attached to content to categorize or organize it,"description:
The UI should display a label attached to content to categorize or organize it. The label should be visually separate from the content and should be easily readable.
components:
- ContentLabel: a standalone component that displays the label text.
- LabeledContent: a component that takes children and wraps them with a `ContentLabel`.
html:
<div class=""max-w-md mx-auto p-4""><LabeledContent><!-- content goes here --><p>{content_text}</p></LabeledContent></div>
component html:
ContentLabel:
<span class=""bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded"">{label_text}</span>
LabeledContent:
<div class=""flex items-center mb-2""><ContentLabel/><div class=""ml-2"">{children}</div></div>"
Horizontal strip displaying links to key sections of the website,"description:
The UI should be a horizontal strip displaying links to key sections of the website. The strip should be responsive, taking up the full width of the screen on mobile devices and becoming narrower on larger screens. The links should be evenly spaced and have a subtle hover effect.
components:
- NavigationBar: (standalone)
html:
<nav class=""w-full bg-gray-100 py-4""><NavigationBar/></nav>
component html:
NavigationBar:
<ul class=""flex justify-between md:flex-wrap""><li class=""px-4""><a href=""#home"" class=""hover:text-gray-600"">{home_label}</a></li><li class=""px-4""><a href=""#about"" class=""hover:text-gray-600"">{about_label}</a></li><li class=""px-4""><a href=""#contact"" class=""hover:text-gray-600"">{contact_label}</a></li><!-- Add more list items as needed --></ul>"
Tutorials,"description:
The UI should display a list of tutorials, each with a title, description, and a call-to-action (CTA) button. The list should be responsive, with a max width and padding to create a comfortable reading experience.
components:
- TutorialCard: A standalone component representing a single tutorial item, containing a title, description, and CTA button.
- TutorialList: A component that takes children, rendering a list of `TutorialCard`s.
html:
<div class=""max-w-lg mx-auto p-4""><h1>Tutorials</h1><TutorialList><TutorialCard/><TutorialCard/><!-- Add more TutorialCard components as needed --></TutorialList></div>
component html:
TutorialCard:
<div class=""bg-white shadow-md p-4 mb-4""><h2>{tutorial_title}</h2><p>{tutorial_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Start Tutorial</button></div>
TutorialList:
<ul class=""list-none m-0 p-0"">{children}</ul>"
"Design a product details component with a white background, product image, product name, price, description, and specifications table","description:
The product details component should have a clean and minimalist design with a white background, making the product image and text stand out. The layout should be responsive, with a single column on small screens and a two-column layout on larger screens. The product image should be prominently displayed, with the product name, price, and description below. The specifications table should be easily readable and scannable.
components:
- ProductDetails: (Takes Children): The top-level component that contains all the product details.
- ProductImage: (Standalone): Displays the product image.
- ProductName: (Standalone): Displays the product name.
- ProductPrice: (Standalone): Displays the product price.
- ProductDescription: (Standalone): Displays the product description.
- SpecificationsTable: (Takes Children): Displays the product specifications in a table format.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ProductDetails><div class=""flex flex-col md:flex-row""><ProductImage/><div class=""md:ml-4""><ProductName/><ProductPrice/><ProductDescription/><SpecificationsTable>{ specifications }
</SpecificationsTable></div></div></ProductDetails></div>
component html:
ProductDetails:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-12"">{children}</div>
ProductImage:
<img src={product_image_url} alt={product_name} class=""w-full md:w-1/2 lg:w-1/3 mx-auto mb-4""/>
ProductName:
<h1 class=""text-3xl font-bold mb-2"">{product_name}</h1>
ProductPrice:
<p class=""text-lg font-bold"">{product_price}</p>
ProductDescription:
<p class=""text-lg mb-4"">{product_description}</p>
SpecificationsTable:
<table class=""w-full mb-4""><thead><tr><th class=""text-left"">Specification</th><th class=""text-left"">Value</th></tr></thead><tbody>{children} </tbody></table>"
Cover Photo Upload: Input field for uploading a cover photo,"description:
The UI should be a simple input field with a label and a button to upload a cover photo. The input field should be responsive and accessible.
components:
- CoverPhotoUploadField: A standalone component that contains the input field and upload button.
- UploadButton: A standalone component that is the upload button.
html:
<div class=""max-w-md mx-auto p-4""><label for=""cover-photo"" class=""block mb-2"">Cover Photo</label><CoverPhotoUploadField/></div>
component html:
CoverPhotoUploadField:
<div class=""flex items-center""><input type=""file"" id=""cover-photo"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/><UploadButton/></div>
UploadButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Upload</button>"
Loading spinner with animation and progress circle,"description:
The UI should be a responsive, mobile-first loading spinner with an animation and a progress circle. The progress circle should show the percentage of completion.
components:
- LoadingSpinner: a standalone component that displays the loading animation and progress circle.
html:
<div class=""flex justify-center""><LoadingSpinner/></div>
component html:
LoadingSpinner:
<div class=""relative w-12 h-12 mx-auto""><!-- animation --><div class=""animate-spin h-12 w-12 border-4 border-gray-200 rounded-full border-t-transparent""></div><!-- progress circle --><div class=""absolute top-0 left-0 w-12 h-12 text-lg text-gray-600""><span>{progress}%</span></div></div>"
Code editors,"description:
A simple code editor UI with an editor area, a menu, and a status bar. The menu should have options for file, edit, and help. The editor area should take up most of the screen space. The status bar should display the current cursor position and some other information.
components:
- Menu: standalone, displays the menu items
- Editor: standalone, displays the code editing area
- StatusBar: standalone, displays the current cursor position and other information
- MenuItem: takes children, represents an individual menu item
html:
<div class=""h-screen flex flex-col""><Menu/><Editor/><StatusBar/></div>
component html:
Menu:
<div class=""bg-gray-200 h-10 flex justify-between items-center""><ul class=""flex""><li><MenuItem>File</MenuItem></li><li><MenuItem>Edit</MenuItem></li><li><MenuItem>Help</MenuItem></li></ul></div>
Editor:
<div class=""flex-1 overflow-auto""><!-- code editing area --><textarea class=""w-full h-full p-4"">{code}</textarea></div>
StatusBar:
<div class=""bg-gray-300 p-2 text-sm""><span>{cursor_position}</span><span class=""mx-4"">|</span><span>{other_info}</span></div>
MenuItem:
<a class=""px-4 py-2 hover:bg-gray-300"">{children}</a>"
Control for adjusting a value within a range by dragging a handle along a track,"description:
The UI should display a slider with a handle that can be dragged along a track to adjust a value within a range. The slider should have a clear minimum and maximum value indication, and the current value should be displayed next to the slider.
components:
- SliderTrack: A standalone component that renders the track of the slider.
- SliderHandle: A standalone component that renders the draggable handle of the slider.
- SliderValueDisplay: A standalone component that displays the current value of the slider.
- RangeSlider: A component that wraps the entire slider UI and takes children (`SliderTrack`, `SliderHandle`, and `SliderValueDisplay`).
html:
<div class=""flex items-center""><RangeSlider><SliderTrack/><SliderHandle/><SliderValueDisplay/></RangeSlider></div>
component html:
SliderTrack:
<div class=""w-full h-1 rounded-full bg-gray-200 relative""><!-- track background --><div class=""h-full bg-gray-400 absolute"" style=""width: {trackProgress}%;""}></div></div>
SliderHandle:
<div class=""w-6 h-6 rounded-full bg-gray-800 absolute"" style=""left: {handleLeft}px;""}></div>
SliderValueDisplay:
<p class=""text-gray-600"">{currentValue}</p>
RangeSlider:
<div class=""flex items-center"">{children}</div>"
Comment display for conversation threads,"description:
The UI should display comments in a conversation thread format. Each comment will be styled as a card with padding, slight shadow, and vertical stacking for readability. For better organization, replies to comments should be indented.
components:
- CommentCard: (Standalone): Displays an individual comment. Includes the commenter’s name, timestamp, and the comment text.
- ReplyCard: (Standalone): Similar to CommentCard but intended for replies and indented for visual hierarchy.
html:
<div class=""max-w-4xl mx-auto p-4""><h1 class=""text-xl font-bold mb-4"">Conversation Thread</h1><div class=""space-y-2""><CommentCard/><div class=""pl-4""><ReplyCard/><ReplyCard/></div><CommentCard/></div></div>
component html:
CommentCard:
<div class=""bg-white p-4 rounded-lg shadow-sm""><div class=""font-bold"">{commenter_name}</div><div class=""text-sm text-gray-500 mb-2"">{timestamp}</div><p>{comment_text}</p></div>
ReplyCard:
<div class=""bg-white p-3 rounded-lg shadow-sm mt-2""><div class=""font-bold"">{commenter_name}</div><div class=""text-sm text-gray-500 mb-2"">{timestamp}</div><p>{comment_text}</p></div>"
"A hero section featuring a large, high-quality gaming-related background image with a subtle overlay effect","description:
The UI should have a visually striking hero section that immediately grabs the user's attention. The background image should be a high-quality, gaming-related image that sets the tone for the rest of the UI. To add depth and dimension, a subtle overlay effect can be applied to the background image. The overlay effect should be tasteful and not overpower the background image. The hero section should scale well on different screen sizes, with the background image taking up the full width and height of the section. On smaller screens, the background image should be compressed to fit the screen size while maintaining its aspect ratio.
components:
- HeroSection: (Takes Children): The top-level component for the hero section. It contains the background image, overlay effect, and any additional content.
- BackgroundImage: (Standalone): Renders the high-quality gaming-related background image.
- OverlayEffect: (Standalone): Applies a subtle overlay effect to the background image.
- HeroContent: (Takes Children): Contains any additional content that should be displayed on top of the background image.
html:
<div class=""h-screen w-full relative""><HeroSection><BackgroundImage/><OverlayEffect/><HeroContent><!-- Hero content will be rendered here --></HeroContent></HeroSection></div>
component html:
HeroSection:
<div class=""h-screen w-full relative"">{children}</div>
BackgroundImage:
<img src=""{background_image_src}"" alt=""{background_image_alt}"" class=""absolute w-full h-full object-cover""/>
OverlayEffect:
<div class=""absolute w-full h-full bg-gray-900 opacity-50""></div>
HeroContent:
<div class=""absolute w-full h-full flex justify-center items-center"">{children}</div>"
Navigation controls for indicating the current position within a carousel or slideshow,"description:
The UI should display a series of small, clickable indicators that represent the different slides in a carousel or slideshow. The indicator for the current slide should be visually distinct from the others.
components:
- CarouselIndicatorList: A container component that holds the indicators for each slide. (Takes children)
- CarouselIndicator: A single indicator component that represents a slide. (Standalone)
html:
<nav class=""flex justify-center mb-4""><CarouselIndicatorList><!-- indicators will be inserted here --></CarouselIndicatorList></nav>
component html:
CarouselIndicatorList:
<ul class=""flex items-center"">{children}</ul>
CarouselIndicator:
<li class=""mx-2""><button class=""w-4 h-4 rounded-full {isActive ? 'bg-primary-500' : 'bg-gray-300'}"" aria-current={isActive ? 'step' : undefined}></button></li>"
Currency and Language Switchers,"description:
The UI should display two dropdown menus, one for currency and one for language, side by side. The menus should be responsive and accessible.
components:
- CurrencySwitcher: a standalone component that displays a dropdown menu of currencies.
- LanguageSwitcher: a standalone component that displays a dropdown menu of languages.
- DropdownItem: a component that takes a child (the option text) and is used by both `CurrencySwitcher` and `LanguageSwitcher`.
html:
<div class=""flex justify-center mb-4""><CurrencySwitcher/><LanguageSwitcher/></div>
component html:
CurrencySwitcher:
<div class=""relative inline-block""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 border border-gray-400 rounded"">{selectedCurrency} <span class=""caret ml-2""></span></button><ul class=""absolute bg-white border border-gray-400 z-10"">{currencies.map((currency, index) =>( <li key={index}><DropdownItem>{currency}</DropdownItem></li>))} </ul></div>
LanguageSwitcher:
<div class=""relative inline-block ml-4""><button class=""bg-white hover:bg-gray-100 text-gray-800 py-2 px-4 border border-gray-400 rounded"">{selectedLanguage} <span class=""caret ml-2""></span></button><ul class=""absolute bg-white border border-gray-400 z-10"">{languages.map((language, index) =>( <li key={index}><DropdownItem>{language}</DropdownItem></li>))} </ul></div>
DropdownItem:
<li><a href=""#"" class=""block py-2 px-4 hover:bg-gray-100"">{children}</a></li>"
Featured Product Image,"description:
The featured product image should be a large, high-quality image that showcases the product from the front. It should be responsive, taking up the full width of the container on mobile devices and scaling down on larger screens. The image should have a subtle box shadow to give it depth.
components:
- FeaturedProductImage: standalone
html:
<div class=""flex justify-center mb-4""><FeaturedProductImage/></div>
component html:
FeaturedProductImage:
<img src=""{image_url}"" alt=""{product_name}"" class=""w-full rounded-md shadow-md lg:w-1/2 xl:w-1/3""/>"
Navigation Dropdown Icon,"description:
The UI should be a navigation dropdown icon that expands when clicked, displaying a list of navigation links. The icon should be a responsive, mobile-first, accessible, and SEO-friendly dropdown menu.
components:
- DropdownToggle: (standalone) - the clickable icon that expands the dropdown menu
- DropdownMenu: (takes children) - the container for the navigation links
- DropdownLink: (standalone) - an individual navigation link within the dropdown menu
html:
<nav><DropdownToggle/><DropdownMenu><ul><li><DropdownLink/></li><li><DropdownLink/></li><!-- more links here --></ul></DropdownMenu></nav>
component html:
DropdownToggle:
<button class=""w-8 h-8 flex justify-center items-center bg-gray-200 hover:bg-gray-300 rounded-full""><!-- icon here, e.g. <span>▼</span>-->{toggle_icon}</button>
DropdownMenu:
<div class=""absolute bg-white py-2 rounded-md shadow-md"">{children}</div>
DropdownLink:
<a href={link_href} class=""block px-4 py-2 text-gray-600 hover:text-gray-900"">{link_text}</a>"
"Company profile component with a white background, company name, location, and company description","description:
The company profile component should have a clean and minimalistic design with a white background, making it easy to read and understand. The company name should be prominently displayed in a larger font size, followed by the location and company description in a smaller font size. The component should be responsive and adapt to different screen sizes, with the text and elements rearranging themselves to fit the available space.
components:
- CompanyProfile: (Takes Children): This is the top-level component that contains the company name, location, and company description.
html:
<CompanyProfile><!-- company profile content goes here --></CompanyProfile>
component html:
CompanyProfile:
<div class=""bg-white p-4 lg:p-6 xl:p-8""><h2 class=""text-2xl lg:text-3xl xl:text-4xl"">{company_name}</h2><p class=""text-gray-600"">{location}</p><p class=""text-gray-600"">{company_description}</p>{children}</div>"
"Create a section that displays a list of customer testimonials with images, names, and quotes","description:
The UI should display a list of customer testimonials with images, names, and quotes. The section should have a clean and modern design, with a focus on showcasing the testimonials in a way that's easy to read and visually appealing. The section should be responsive, with a layout that adapts to different screen sizes.
components:
- TestimonialList: (Takes Children): A container that holds a list of `TestimonialCard` components.
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">What Our Customers Say</h2><TestimonialList><!-- child components will be rendered here --></TestimonialList></section>
component html:
TestimonialList:
<ul class=""flex flex-wrap justify-center -mx-4"">{children}</ul>"
"Product category component with a category name, description, and a ""Shop Now"" button","description:
The UI should have a clean and modern design, with a focus on showcasing the category name, description, and a call-to-action (CTA) button. The component should be responsive and adaptable to different screen sizes. The design should use a consistent color palette, with a highlight color to draw attention to the CTA button.
components:
- CategoryHeader: (Standalone): Displays the category name in a larger font size, with a subtle gradient effect to give it a premium feel.
- CategoryDescription: (Standalone): Shows the category description in a smaller font size, with a slight padding to separate it from the header.
- ShopNowButton: (Standalone): A CTA button with a prominent highlight color to draw attention, with a slight shadow effect to give it depth.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-8 xl:p-10""><CategoryHeader/><CategoryDescription/><ShopNowButton/></div>
component html:
CategoryHeader:
<h2 class=""text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold"">{category_name}</h2>
CategoryDescription:
<p class=""text-sm md:text-base lg:text-lg xl:text-xl"">{category_description}</p>
ShopNowButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Shop Now</button>"
Provider Profiles,"description:
The Provider Profiles UI should display a list of provider profiles, including their names, images, and short descriptions. The UI should be responsive, mobile-first, and accessible.
components:
- ProviderProfileCard: (standalone) - a single provider profile card
- ProviderProfileList: (takes children) - a list of provider profile cards
html:
<section class=""max-w-md mx-auto p-4 pt-6 pb-8""><h2 class=""text-2xl font-bold mb-4"">Provider Profiles</h2><ProviderProfileList><ProviderProfileCard/><ProviderProfileCard/><!-- add more ProviderProfileCard components here --></ProviderProfileList></section>
component html:
ProviderProfileCard:
<article class=""bg-white shadow-md rounded p-4 mb-4""><img src={profile_image_url} alt={provider_name} class=""w-24 h-24 rounded-full mx-auto mb-4""/><h3 class=""text-lg font-bold"">{provider_name}</h3><p class=""text-gray-600"">{provider_description}</p></article>
ProviderProfileList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
"Background image featuring a blurred fitness-related image, used throughout the website","description:
The background image should be a blurred fitness-related image that takes up the full height and width of the viewport. The image should be responsive and scale accordingly on different screen sizes.
components:
- BackgroundImage: (Standalone)
html:
<div class=""h-screen w-screen bg-cover bg-center"" style=""`background-image: url('{background_image_url}');""}><!-- Rest of the UI components will go here --></div>
component html:
BackgroundImage:
<div class=""h-screen w-screen bg-cover bg-center"" style=""`background-image: url('{background_image_url}');""}></div>"
Responsive Video Embeds,"description:
A responsive video embed that adjusts to different screen sizes, with a maximum width of 800px and a height that scales accordingly.
components:
- VideoEmbed: standalone component, contains the video iframe and styling.
html:
<div class=""max-w-md mx-auto p-4""><VideoEmbed/></div>
component html:
VideoEmbed:
<!-- wrapper div for video iframe --><div class=""aspect-w-16 aspect-h-9""><!-- iframe with video content --><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>"
Hover Effects/Animations,"description:
The UI should display a box that changes its background color and text color when hovered over, along with a scaling effect.
components:
- HoverEffectBox: A standalone component that displays a box with hover effects.
html:
<div class=""flex justify-center h-screen""><HoverEffectBox/></div>
component html:
HoverEffectBox:
<div class=""bg-orange-300 hover:bg-orange-500 transition duration-300 ease-in-out p-10 rounded-md cursor-pointer hover:scale-110""><p class=""text-lg text-orange-800 hover:text-white"">{hover_text}</p></div>"
Popup overlay that requires user interaction before returning to the main interface,"description:
A modal popup overlay that covers the entire screen, with a darkened background and a centered box containing content that requires user interaction. The popup should be responsive, accessible, and SEO-friendly.
components:
- PopupOverlay: (standalone): The main overlay that covers the entire screen.
- PopupContainer: (takes children): The centered box that contains the content.
- PopupContent: (takes children): The content that requires user interaction.
html:
<div class=""fixed inset-0 overflow-hidden""><PopupOverlay/><PopupContainer><PopupContent><!-- content that requires user interaction --></PopupContent></PopupContainer></div>
component html:
PopupOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50""></div>
PopupContainer:
<div class=""fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-w-md p-6 bg-white rounded shadow-lg"">{children}</div>
PopupContent:
<!-- content that requires user interaction -->{children}"
Text component with a serif font and a medium font size,"description:
The UI should have a clean and simple design with a Serif font to give it a classic and sophisticated look. The text component should have a medium font size to make it easily readable.
components:
- SerifText: (Takes Children): This component renders a paragraph of text in a Serif font with a medium font size. On small screens, the font size will be smaller to adjust to the screen size. On medium screens and above, the font size will be medium.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><SerifText>{children}</SerifText></div>
component html:
SerifText:
<p class=""text-lg md:text-base lg:text-lg font-serif"">{children}</p>"
Product grid layout,"description:
The UI should display a responsive grid of products, with each product showing its image, name, price, and a call-to-action button. The grid should adapt to different screen sizes, with a maximum of 3 columns on larger screens and 1 column on smaller screens.
components:
- ProductCard: (standalone): represents a single product in the grid
- ProductGrid: (takes children): wraps the product cards in a responsive grid container
html:
<div class=""max-w-md mx-auto px-4 sm:px-6 lg:max-w-7xl lg:px-8""><ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4""><img src={product_image} alt=""Product image"" class=""h-48 w-full object-cover rounded-t""/><h2 class=""text-lg"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-lg font-bold"">{product_price}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div>
ProductGrid:
<div class=""grid gap-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1"">{children}</div>"
Add to cart and wishlist buttons,"description:
The UI should be a simple container with two buttons, one for adding to cart and one for adding to wishlist. The buttons should be responsive and accessible.
components:
- AddToCartButton: standalone
- AddToWishlistButton: standalone
- ButtonContainer: takes children
html:
<div class=""flex justify-center mb-4""><ButtonContainer><AddToCartButton/><AddToWishlistButton/></ButtonContainer></div>
component html:
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button>
AddToWishlistButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">Add to Wishlist</button>
ButtonContainer:
<div class=""flex justify-center"">{children}</div>"
Survey/poll voting options,"description:
A responsive survey/poll voting options UI with a list of options, each with a radio button and a label. The UI should be easily accessible on various devices and screen sizes.
components:
- VotingOption: (standalone): A single voting option with a radio button and a label.
- VotingOptionsList: (takes children): A container for a list of voting options.
html:
<VotingOptionsList><VotingOption/><VotingOption/><!-- Add more VotingOption components as needed --></VotingOptionsList>
component html:
VotingOption:
<div class=""mb-4 sm:m-2""><input type=""radio"" id=""{option_id}"" name=""voting_option""/><label for=""{option_id}"" class=""text-lg"">{option_label}</label></div>
VotingOptionsList:
<div class=""flex flex-col sm:flex-row sm:flex-wrap justify-center"">{children}</div>"
Thread controls,"description:
The UI should be a compact thread control with buttons to reply, edit, and delete a comment or post. It should be responsive and accessible.
components:
- ThreadControl: standalone component that contains all thread control buttons.
- ReplyButton: standalone component that represents the reply button.
- EditButton: standalone component that represents the edit button.
- DeleteButton: standalone component that represents the delete button.
html:
<div class=""flex justify-end mb-4""><ThreadControl/></div>
component html:
ThreadControl:
<div class=""flex items-center space-x-2""><ReplyButton/><EditButton/><DeleteButton/></div>
ReplyButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Reply</button>
EditButton:
<button class=""bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Edit</button>
DeleteButton:
<button class=""bg-red-100 hover:bg-red-200 text-red-800 font-semibold py-2 px-4 border border-red-400 rounded"">Delete</button>"
"Create a footer with a simple layout, including links to terms of service, privacy policy, and contact information","description:
The footer should be a simple, compact section at the bottom of the page that provides links to important pages and contact information. On smaller screens, the links and contact information should be stacked vertically to ensure readability. On larger screens, the links and contact information can be arranged horizontally to take advantage of the additional space.
components:
- FooterLinks: (Takes Children): A container for the links to terms of service, privacy policy, and other important pages. Should be flexible enough to accommodate different numbers of links.
- FooterContact: (Standalone): A component that displays the contact information, such as an address, phone number, and email.
html:
<footer class=""bg-gray-100 h-screen md:h-auto py-12 md:py-6""><div class=""max-w-md mx-auto px-4 md:px-6 lg:px-8""><FooterLinks><!-- Links will be rendered here --></FooterLinks><FooterContact/></div></footer>
component html:
FooterLinks:
<ul class=""flex flex-wrap justify-center md:justify-start mb-4 md:mb-0"">{children}</ul>
FooterContact:
<div class=""text-sm text-gray-600""><p>{address}</p><p>{phone_number}</p><p><a href={`mailto:{email}?subject=Contact`}>{email}</a></p></div>"
"A simple, rounded avatar icon with a white outline","description:
The avatar icon should be a rounded circle with a white outline, giving it a clean and modern look. The icon should be responsive, scaling up or down depending on the screen size. On smaller screens, the icon should be smaller, and on larger screens, it should be larger.
components:
- AvatarIcon: (Standalone): A simple, rounded avatar icon with a white outline. The component should have a fixed aspect ratio, maintaining a circular shape on all screen sizes.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<div class=""rounded-full bg-orange-500 p-2""><div class=""w-12 h-12 rounded-full bg-gray-200 overflow-hidden"">{avatar_image} </div><div class=""rounded-full border-2 border-white w-12 h-12 absolute top-0 left-0""></div></div>"
"Header with a logo (a stylized letter ""G"" in a circle)","description:
The header should have a clean and modern design, with a prominent logo that stands out. The logo should be a stylized letter ""G"" in a circle, with a bold and vibrant color scheme to make it easily recognizable. The header should scale well on different screen sizes, with the logo size and padding adjusting accordingly.
components:
- Logo: (Standalone): A component that renders the stylized letter ""G"" in a circle. On small screens, the logo should be 32px in diameter, with a padding of 8px on all sides. On medium screens, the logo should be 40px in diameter, with a padding of 12px on all sides. On large screens, the logo should be 48px in diameter, with a padding of 16px on all sides.
- Header: (Takes Children): A component that wraps the logo and any additional header content. It should have a background color that gradates from a light blue to a dark blue, giving a sense of depth. On small screens, the header should have a height of 56px, with a padding of 16px on all sides. On medium screens, the header should have a height of 64px, with a padding of 20px on all sides. On large screens, the header should have a height of 72px, with a padding of 24px on all sides.
html:
<header class=""h-screen w-full bg-gradient-to-b from-light-blue-500 to-dark-blue-700 py-4 lg:py-6 xl:py-8""><Logo/><!-- additional header content --></header>
component html:
Logo:
<div class=""rounded-full bg-white p-2 lg:p-3 xl:p-4""><span class=""text-3xl lg:text-4xl xl:text-5xl font-bold"">{logo_icon}</span></div>
Header:
<header class=""h-screen w-full bg-gradient-to-b from-light-blue-500 to-dark-blue-700 py-4 lg:py-6 xl:py-8"">{children}</header>"
Header that remains visible at the top of the viewport as users scroll,"description:
The UI should be a sticky header that remains fixed at the top of the viewport as users scroll down the page. The header should be responsive and adaptable to different screen sizes.
components:
- HeaderBar: A standalone component that represents the sticky header.
html:
<div class=""h-screen overflow-y-scroll""><HeaderBar/><!-- page content here --></div>
component html:
HeaderBar:
<nav class=""fixed top-0 left-0 w-full h-16 bg-white shadow-md""><div class=""max-w-md mx-auto p-4""><!-- header content here, e.g. logo, navigation --><h1>{header_title}</h1></div></nav>"
Product Showcase with Animated Cards,"description:
The UI should be a product showcase with a grid of animated cards. Each card should have a hover effect and display a product image, title, and description. The grid should be responsive and adjust to different screen sizes.
components:
- ProductCard: (standalone): A single product card with a hover effect.
- ProductGrid: (takes children): A grid container that wraps multiple `ProductCard` components.
html:
<div class=""max-w-md mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></ProductGrid></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded overflow-hidden transition duration-500 hover:scale-105""><img src={product_image} alt={product_name} class=""w-full h-48 object-cover rounded-t""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_description}</p></div></div>
ProductGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Right-to-Left (RTL) Support,"description:
The UI should be a simple HTML page that demonstrates Right-to-Left (RTL) language support. It should have a header, a paragraph of text, and a button that is aligned to the right side of the page.
components:
- Header: standalone component
- RtlParagraph: standalone component
- RtlButton: standalone component
html:
<html dir=""rtl""><head><title>RTL Support</title><link rel=""stylesheet"" href=""styles.css""/></head><body class=""h-screen flex flex-col justify-center items-center""><header><Header/></header><main class=""max-w-md mx-auto""><RtlParagraph/><RtlButton/></main></body></html>
component html:
Header:
<header class=""text-3xl font-bold text-right"">{header_title}</header>
RtlParagraph:
<p class=""text-lg text-right"">{paragraph_text}</p>
RtlButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Footer that remains fixed at the bottom of the page as users scroll,"description:
The UI should have a footer that remains fixed at the bottom of the page as users scroll. The footer should have a darker background color and contain some basic information like copyright text and social media links.
components:
- Footer: standalone component that contains copyright text and social media links.
html:
<!-- Main page content --><main class=""h-screen overflow-y-auto""><!-- page content here --></main><!-- Fixed footer --><Footer/>
component html:
Footer:
<footer class=""fixed bottom-0 left-0 w-full h-20 bg-gray-800 text-gray-200""><div class=""container mx-auto p-4""><p>&copy; {current_year} {website_name}. All rights reserved.</p><ul class=""flex justify-center""><li><a href={facebook_url} target=""_blank"" rel=""noopener noreferrer"">Facebook</a></li><li><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer"">Twitter</a></li><li><a href={instagram_url} target=""_blank"" rel=""noopener noreferrer"">Instagram</a></li></ul></div></footer>"
Unobtrusive JavaScript,"description:
A simple webpage with a heading, a paragraph of text, and a button that changes the text when clicked.
components:
- PageHeader: standalone
- PageContent: takes children
html:
<div class=""h-screen flex flex-col justify-center items-center""><PageHeader/><PageContent><p id=""text"">{initial_text}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Click me!</button></PageContent></div>
component html:
PageHeader:
<header class=""mb-4""><h1 class=""text-3xl font-bold"">Unobtrusive JavaScript</h1></header>
PageContent:
<div class=""p-4"">{children}</div>"
CAPTCHA verification box,"description:
The UI should be a simple verification box with a image-based CAPTCHA, a text input for the user to enter the CAPTCHA code, and a submit button.
components:
- CaptchaImage: a standalone component that displays the CAPTCHA image.
- CaptchaTextInput: a standalone component that provides a text input for the user to enter the CAPTCHA code.
- SubmitButton: a standalone component that provides a submit button to verify the CAPTCHA code.
- CaptchaVerificationBox: a component that takes children and wraps the CAPTCHA image, text input, and submit button.
html:
<div class=""max-w-md mx-auto p-4""><CaptchaVerificationBox><CaptchaImage/><CaptchaTextInput/><SubmitButton/></CaptchaVerificationBox></div>
component html:
CaptchaImage:
<img src=""{captcha_image_url}"" alt=""CAPTCHA Image"" class=""w-full h-24 object-cover mb-4""/>
CaptchaTextInput:
<input type=""text"" id=""captcha-input"" class=""px-4 py-2 w-full border border-gray-300 rounded-md""/>
SubmitButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md"">Verify</button>
CaptchaVerificationBox:
<div class=""bg-white p-4 rounded-md shadow-md"">{children}</div>"
Warning message displayed within the context of a form or interface element,"description:
The UI should display a warning message in a distinctive style to grab the user's attention, within the context of a form or interface element. The warning message should be easily readable and accessible.
components:
- WarningMessage: A standalone component that displays a warning message.
html:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8""><!-- Form or interface element content --><WarningMessage/><!-- Rest of the form or interface element content --></div>
component html:
WarningMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 mb-4"" role=""alert""><p class=""mb-2"">{warning_message}</p></div>"
Scroll-to-top button with smooth animation,"description:
The UI should be a scroll-to-top button that appears when the user scrolls down a certain distance from the top of the page. When clicked, it should smoothly animate back to the top of the page. The button should be circular, with an upward arrow icon and a subtle background color. It should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- ScrollToTopButton: (standalone): a circular button with an upward arrow icon that, when clicked, scrolls the page back to the top.
html:
<!-- main content of the page --><main><!-- page content here --></main><!-- scroll-to-top button --><ScrollToTopButton/>
component html:
ScrollToTopButton:
<button class=""fixed bottom-4 right-4 z-50 p-4 bg-gray-100 hover:bg-gray-200 rounded-full shadow-md transition duration-300"" title=""Scroll to top""><i class=""fas fa-chevron-up"" aria-hidden=""true""></i><span class=""sr-only"">Scroll to top</span></button>"
Quote captions,"description:
- The UI should feature a centered quote with its respective caption directly below it. The quote should be prominently displayed, perhaps in a larger or italicized font, to distinguish it from the caption. The caption, which provides attribution or context to the quote, should be smaller or in a regular font style. The overall design should be minimalist, focusing on text readability.
components:
- QuoteBlock: A standalone component that includes the quote and the caption.
html:
<div class=""flex justify-center items-center h-screen""><QuoteBlock/></div>
component html:
QuoteBlock:
<div class=""max-w-xl p-4""><p class=""text-xl italic text-gray-800"">""{quote_text}""</p><p class=""text-right text-sm text-gray-600"">— {author_name}</p></div>"
Attendee list display,"description:
The UI should display a list of attendees with their names, job titles, and company names. The list should be responsive, mobile-first, and accessible. Each attendee's information should be displayed in a clear and readable format.
components:
- AttendeeList: A component that takes children and displays a list of attendees.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Attendee List</h2><AttendeeList><!-- attendee cards will be inserted here --></AttendeeList></div>
component html:
AttendeeList:
<ul class=""list-none mb-0""><!-- attendee cards will be inserted here -->{children}</ul>"
Shopping cart summary,"description:
The UI should be a compact summary of the shopping cart, displaying the total items, total cost, and a call-to-action to proceed to checkout. The design should be clean, simple, and easy to read on various devices.
components:
- ShoppingCartSummary: standalone component that displays the shopping cart summary.
- CartTotal: standalone component that displays the total cost of the items in the cart.
- CheckoutButton: standalone component that displays a call-to-action button to proceed to checkout.
html:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><ShoppingCartSummary/><CartTotal/><CheckoutButton/></div>
component html:
ShoppingCartSummary:
<div class=""flex justify-between mb-4""><p>{item_count} items in cart</p><p>Subtotal: <span class=""font-bold"">{subtotal_amount}</span></p></div>
CartTotal:
<p class=""text-lg font-bold mb-2"">Total: <span>{total_amount}</span></p>
CheckoutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Checkout</button>"
A motivational quote component with a bold font and subtle background texture,"description:
The motivational quote component should be a visually appealing and inspirational element that grabs the user's attention. It should have a bold font to emphasize the motivational message, and a subtle background texture to add depth and interest. The component should be responsive, making it easy to read and engage with on different screen sizes.
components:
- MotivationalQuote: (Takes Children): A component that displays a motivational quote. On small screens, the quote should be centered and take up the full width of the screen. On medium screens and above, the quote should be displayed in a card with a subtle background texture.
html:
<MotivationalQuote>{children}</MotivationalQuote>
component html:
MotivationalQuote:
<div class=""md:flex md:flex-col md:p-4 md:shadow-md md:bg-gray-100""><p class=""text-lg font-bold"">{children}</p><div class=""bg-gray-50 bg-opacity-50 md:bg-gradient-to-r md:from-gray-50 md:via-gray-100 md:to-gray-50""><!-- subtle background texture --></div></div>"
Copyright text with a small font size and light font weight,"description:
The UI should have a small, lightweight copyright text at the bottom of the page with a light font weight and small font size. The text should be centered and have a subtle background color to make it stand out from the rest of the page.
components:
- CopyrightText: (Standalone): A small, lightweight copyright text component that displays a copyright message.
html:
<div class=""min-h-screen flex justify-center""><!-- other page content --><CopyrightText/></div>
component html:
CopyrightText:
<p class=""text-xs text-gray-300 font-light text-center"">{copyright_message}</p>"
Tweet display for individual posts,"description:
The UI should display an individual tweet in a compact, readable format. It should include the user's profile picture, username, tweet text, and timestamp. The tweet text should be the primary focus, with the user's profile picture and username secondary. The timestamp should be displayed lightly.
components:
- UserProfilePicture: standalone component to display the user's profile picture.
- Username: standalone component to display the user's username.
- TweetText: standalone component to display the tweet text.
- Timestamp: standalone component to display the timestamp.
- Tweet: takes children, a container component to display the entire tweet.
html:
<div class=""max-w-md mx-auto p-4 mb-4 bg-white rounded shadow-md""><Tweet><UserProfilePicture/><div class=""flex items-center""><Username/><Timestamp/></div><TweetText/></Tweet></div>
component html:
UserProfilePicture:
<img src=""{profile_picture_url}"" alt=""User profile picture"" class=""w-12 h-12 rounded-full mr-2""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
TweetText:
<p class=""text-lg"">{tweet_text}</p>
Timestamp:
<small class=""text-gray-500"">{timestamp}</small>
Tweet:
<div class=""flex flex-wrap"">{children}</div>"
Walkthroughs,"description:
The walkthrough UI should be a step-by-step guide that displays a series of instructions or tips. It should be responsive, mobile-first, and accessible.
components:
- WalkthroughCard: A standalone component that represents a single step in the walkthrough.
- Walkthrough: A component that takes children (multiple WalkthroughCard components) and displays them in a vertical layout.
html:
<section class=""max-w-md mx-auto p-4""><Walkthrough><WalkthroughCard/><WalkthroughCard/><!-- Add more WalkthroughCard components here --></Walkthrough></section>
component html:
WalkthroughCard:
<div class=""bg-white p-4 rounded shadow-md""><h3 class=""text-lg font-bold"">{title}</h3><p>{description}</p><!-- Add additional elements, such as images or buttons, as needed --></div>
Walkthrough:
<div class=""flex flex-col gap-4"">{children}</div>"
Blog Post Preview Card,"description:
The UI should be a blog post preview card that displays a title, a brief summary, and a ""Read More"" button. The card should be responsive and adjust to different screen sizes. It should have a clean and minimalistic design.
components:
- BlogPostPreviewCard: standalone component that contains all the elements of the blog post preview card.
- BlogPostTitle: standalone component that displays the title of the blog post.
- BlogPostSummary: standalone component that displays a brief summary of the blog post.
- ReadMoreButton: standalone component that displays a ""Read More"" button.
html:
<div class=""max-w-md mx-auto bg-white rounded shadow-md overflow-hidden md:max-w-2xl""><BlogPostPreviewCard/></div>
component html:
BlogPostPreviewCard:
<div class=""p-4""><BlogPostTitle/><BlogPostSummary/><ReadMoreButton/></div>
BlogPostTitle:
<h2 class=""text-lg font-bold"">{title}</h2>
BlogPostSummary:
<p class=""text-gray-600"">{summary}</p>
ReadMoreButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Read More</button>"
Form divided into multiple steps or sections for a streamlined user experience,"description:
The UI should be a multi-step form divided into sections for a streamlined user experience. Each section should have a heading, and the user should be able to navigate through the sections using ""Next"" and ""Previous"" buttons.
components:
- StepIndicator: A standalone component that displays the current step and total steps.
- FormSection: A component that takes children, which represents a single section of the form.
- FormNav: A standalone component that contains the ""Next"" and ""Previous"" buttons.
- FormContent: A component that takes children, which represents the content of a single form section.
html:
<!-- The outer container for the form --><div class=""max-w-md mx-auto p-4 pt-6""><!-- The step indicator --><StepIndicator/><!-- The form sections --><FormSection><FormContent><!-- Content of the first form section --></FormContent></FormSection><FormSection><FormContent><!-- Content of the second form section --></FormContent></FormSection><!-- Add more form sections here --><!-- The form navigation --><FormNav/></div>
component html:
StepIndicator:
<!-- The step indicator display --><div class=""flex justify-center mb-4""><p>Step {current_step} of {total_steps}</p></div>
FormSection:
<!-- A single form section --><div class=""mb-4""><h2>{section_title}</h2>{children}</div>
FormNav:
<!-- The form navigation buttons --><div class=""flex justify-between""><button class=""btn btn-secondary"" disabled={is_first_step}>Previous</button><button class=""btn btn-primary"">Next</button></div>
FormContent:
<!-- The content of a single form section --><div>{children}</div>"
Intercept Page/Modal Dialogs,"description:
The Intercept Page/Modal Dialog UI should be a centered modal dialog that appears over a slightly dimmed background, making the underlying page content less visible and non-interactive. The modal should be responsive, adapting its size and position based on the viewport size. It should contain a title, a close button, a content area for text or other elements, and an action area with one or more buttons.
components:
- Overlay: (Standalone)**: This component serves as the background dimming effect that lays over the main content when the modal is active.
- ModalDialog: (Takes children)**: The main container for the modal content which includes styling for responsiveness and positioning.
- ModalHeader: (Standalone)**: Contains the title of the modal and a close button.
- ModalBody: (Takes children)**: A section for the main content of the modal.
- ModalFooter: (Takes children)**: Contains action buttons like 'Cancel' or 'Confirm'.
html:
<div class=""fixed inset-0 bg-gray-600 bg-opacity-75 flex justify-center items-center""><Overlay/><div class=""bg-white rounded-lg shadow-lg overflow-hidden max-w-md w-full m-4""><ModalDialog><ModalHeader/><ModalBody><p>{modalContent}</p></ModalBody><ModalFooter><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"" type=""button"">Confirm
</button><button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"" type=""button"">Cancel
</button></ModalFooter></ModalDialog></div></div>
component html:
Overlay:
<div class=""fixed inset-0 bg-gray-600 bg-opacity-75""></div>
ModalDialog:
<div role=""dialog"" aria-labelledby=""modalTitle"" aria-modal=""true"" class=""relative bg-white rounded-lg shadow-lg"">{children} </div>
ModalHeader:
<div class=""px-4 py-2 border-b border-gray-200""><h2 id=""modalTitle"" class=""text-lg leading-6 font-medium text-gray-900"">Modal Title</h2><button aria-label=""Close"" class=""absolute top-0 right-0 p-4"">X </button></div>
ModalBody:
<div class=""p-4"">{children} </div>
ModalFooter:
<div class=""px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse"">{children} </div>"
"A simple, white footer with links to social media and a copyright notice","description:
The footer should have a clean and minimalistic design, with a white background that provides a clear contrast to the rest of the UI. The footer should be responsive, adjusting its layout and font sizes to fit different screen sizes. On smaller screens, the links and copyright notice should be stacked vertically to ensure readability.
components:
- FooterContainer: (Takes Children): A container that wraps the entire footer.
- SocialMediaLink: (Standalone): A single link to a social media platform.
- CopyrightNotice: (Standalone): A paragraph element displaying the copyright notice.
html:
<FooterContainer><div class=""flex justify-center mb-4""><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></div><CopyrightNotice/></FooterContainer>
component html:
FooterContainer:
<div class=""bg-white py-4 md:py-6 lg:py-8"">{children}</div>
SocialMediaLink:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""mr-4 text-gray-600 hover:text-gray-900 transition duration-300""><i class=""fab {social_media_icon}""></i></a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">{copyright_year} {company_name}. All rights reserved.</p>"
"Overlay window that focuses attention on a specific piece of content, often an image or video","description:
The UI should be a modal window that appears over the main content, dimming the background to focus attention on the overlay's content. It should have a close button, and the content area should be flexible to accommodate different types of content such as images, videos, or text.
components:
- ModalOverlay: standalone, a container for the modal window
- ModalContent: takes children, a container for the content of the modal window
- CloseButton: standalone, a button to close the modal window
html:
<div class=""fixed inset-0 flex justify-center items-center""><ModalOverlay/><ModalContent><!-- Content goes here --></ModalContent><CloseButton/></div>
component html:
ModalOverlay:
<div class=""absolute inset-0 bg-gray-900 opacity-50"" aria-hidden=""true""></div>
ModalContent:
<div class=""w-full max-w-2xl p-4 bg-white rounded shadow-md"">{children}</div>
CloseButton:
<button class=""absolute top-0 right-0 p-4 text-gray-600 hover:text-gray-900"" aria-label=""Close"">×</button>"
Testimonial Quote Text,"description:
The UI should display a testimonial quote with a quote text, an author name, and an optional occupation and organization. The quote text should be displayed prominently, and the author information should be displayed below the quote text.
components:
- TestimonialQuote: Standalone component that displays the quote text.
- AuthorInfo: Component that displays the author name, occupation, and organization. Takes children.
- AuthorName: Standalone component that displays the author name.
- AuthorDetails: Standalone component that displays the occupation and organization.
html:
<div class=""flex flex-col items-center""><TestimonialQuote/><AuthorInfo><AuthorName/><AuthorDetails/></AuthorInfo></div>
component html:
TestimonialQuote:
<blockquote class=""text-lg font-serif italic mb-4"">{quote_text}</blockquote>
AuthorInfo:
<div class=""flex items-center mb-2"">{children}</div>
AuthorName:
<p class=""text-base font-bold"">{author_name}</p>
AuthorDetails:
<p class=""text-sm text-gray-600"">{occupation} at {organization}</p>"
Image uploader with progress,"description:
A simple image uploader with a progress bar that shows the upload progress. The UI should be responsive and accessible.
components:
- ImageUploader: A standalone component that contains the upload input, progress bar, and upload button.
- ProgressBar: A component that takes children (the progress percentage) and displays a progress bar.
- UploadButton: A standalone component that displays an upload button.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ImageUploader/></div>
component html:
ImageUploader:
<div class=""flex flex-col items-center""><input type=""file"" id=""file-input"" class=""hidden""/><label for=""file-input"" class=""cursor-pointer""><UploadButton/></label><ProgressBar>{progressPercentage}%</ProgressBar><p class=""text-sm text-gray-600"">{uploadStatus}</p></div>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-2""><div class=""bg-blue-600 h-2"" style=""width: {children}%;""}></div></div>
UploadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Upload Image</button>"
A simple header with a logo and a search bar,"description:
The UI should have a simple and clean design, with a prominent logo on the left and a search bar on the right. The logo should be easily recognizable and scalable on different screen sizes. The search bar should be easily accessible and visually appealing.
components:
- LogoComponent: (Standalone): A simple logo component that displays the application's logo. The logo should be a rectangular shape with a maximum width of 120px on larger screens.
- SearchBarComponent: (Takes Children): A search bar component that allows users to input search queries. The search bar should have a rounded corners and a subtle shadow effect to give it a sense of depth.
html:
<header class=""flex justify-between items-center py-4""><LogoComponent/><SearchBarComponent><input type=""search"" placeholder=""Search..."" class=""px-4 py-2 rounded-lg shadow-md""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button></SearchBarComponent></header>
component html:
LogoComponent:
<img src=""{logo_url}"" alt=""Logo"" class=""w-24 md:w-32 lg:w-40 xl:w-48""/>
SearchBarComponent:
<div class=""flex justify-end md:w-1/2 lg:w-1/3 xl:w-1/4"">{children}</div>"
Blog categories display,"description:
The UI should display a list of categories with their respective icons and number of associated blog posts. The categories should be displayed in a grid on larger screens and in a vertical list on smaller screens.
components:
- CategoryList: (takes children): displays a list of categories
html:
<div class=""container mx-auto p-4""><h1>Blog Categories</h1><CategoryList><!-- category cards will be inserted here --></CategoryList></div>
component html:
CategoryList:
<ul class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</ul>"
A component to display a grid of sports teams with logos and names,"description:
The UI should display a grid of sports teams, with each team represented by its logo and name. The grid should be responsive, with a maximum of 3-4 teams per row on larger screens and 1-2 teams per row on smaller screens. The logos should be displayed prominently, with the team names below them. The entire grid should be scrollable if there are more teams than can fit on the screen. The UI should also be accessible, with clear focus states and keyboard navigation.
components:
- TeamGrid: (Takes Children): A container component that displays a grid of teams.
- TeamCard: (Takes Children): A component that represents a single sports team, displaying its logo and name.
html:
<div class=""flex flex-col h-screen overflow-y-auto p-4 md:p-6 lg:p-8""><TeamGrid><!-- Team cards will be rendered here --></TeamGrid></div>
component html:
TeamGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children}</div>
TeamCard:
<div class=""flex flex-col items-center p-4 border border-gray-200 rounded""><img src=""{teamLogoUrl}"" alt=""{teamName}"" class=""w-12 h-12 mb-2""/><p class=""text-lg"">{teamName}</p>{children}</div>"
Testimonial Slider: Showcase social proof from happy customers,"description:
The Testimonial Slider should display quotes from happy customers with their names and photos, enclosed in a container that can be navigated using previous and next buttons. The slider should be responsive, adapting to different screen sizes and devices.
components:
- TestimonialSlider: A container component that wraps the entire slider, including navigation buttons and testimonial items. (Takes children: TestimonialItem)
- TestimonialItem: A single testimonial item that displays a customer's quote, name, and photo. (Standalone)
- SliderNavigation: A component that contains previous and next buttons for navigating the slider. (Standalone)
html:
<div class=""container mx-auto p-4 lg:p-8""><TestimonialSlider><TestimonialItem/><TestimonialItem/><!-- Add more TestimonialItem components as needed --></TestimonialSlider><SliderNavigation/></div>
component html:
TestimonialSlider:
<div class=""flex flex-wrap justify-center mb-4""><div class=""flex-1"">{children}</div><SliderNavigation/></div>
TestimonialItem:
<div class=""flex flex-col mb-4""><img src=""{photo_url}"" alt=""{customer_name}"" class=""rounded-full w-16 h-16 mb-2""/><p class=""text-lg"">{quote}</p><p class=""text-sm"">{customer_name}</p></div>
SliderNavigation:
<div class=""flex justify-between mb-4""><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Previous</button><button class=""bg-gray-200 hover:bg-gray-300 py-2 px-4 rounded"">Next</button></div>"
"A component to display event details, including:","description:
The UI should display event details in a clear and concise manner, with a prominent display of the event title, date, time, and location. The design should be responsive, using a mobile-first approach to ensure accessibility on smaller screens. A highlight color scheme can be used to draw attention to important details, such as the event title and location. A clean and minimalistic design will help guide the user's attention and make it easy to navigate the UI.
components:
- EventHeader: (Standalone): Displays the event title, date, and time.
- EventLocation: (Standalone): Displays the event location.
- EventDescription: (Takes Children): Displays a brief description of the event.
- EventCallToAction: (Standalone): Displays a call-to-action button, such as ""Learn More"" or ""Register"".
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><EventHeader/><EventLocation/><EventDescription>{event_description}
</EventDescription><EventCallToAction/></div>
component html:
EventHeader:
<div class=""flex flex-col mb-4 md:flex-row md:items-center""><h2 class=""text-lg font-bold text-{highlight_color}"">{event_title}</h2><div class=""text-sm text-gray-600""><span>{event_date}</span><span class=""mx-1"">·</span><span>{event_time}</span></div></div>
EventLocation:
<div class=""text-sm text-gray-600 mb-4""><i class=""fas fa-map-marker-alt mr-2""></i>{event_location}</div>
EventDescription:
<p class=""text-sm text-gray-600"">{children}</p>
EventCallToAction:
<button class=""bg-{highlight_color} hover:bg-{highlight_color_hover} text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Page Content Image,"description:
The UI should display an image with a caption below it. The image should take up the full width of the container and have a maximum height. The caption should be centered below the image.
components:
- ImageContent: standalone component
- ImageCaption: standalone component
html:
<div class=""max-w-md mx-auto p-4""><ImageContent/><ImageCaption/></div>
component html:
ImageContent:
<img src={image_src} alt={image_alt} class=""w-full h-64 object-cover""/>
ImageCaption:
<p class=""text-lg text-center"">{caption_text}</p>"
A tag component with a small rectangular background and a label,"description:
The UI should have a small rectangular background with a subtle gradient effect to give it a soft, rounded look. The label text should be centered horizontally and vertically within the tag. The tag should be responsive, so it scales down on smaller screens.
components:
- Tag: (Standalone): A small rectangular tag component with a label.
html:
<div class=""flex flex-wrap justify-center""><Tag/><Tag/><!-- more tags here --></div>
component html:
Tag:
<span class=""py-1 px-2 rounded-md bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-800 text-sm"">{label}</span>"
A loading indicator component with a circular animation and a light grey background,"description:
The loading indicator component should have a circular animation that suggests progress or loading. The animation should be centered within a light grey background. The component should be responsive and accessible on different screen sizes.
components:
- LoadingIndicator: (Standalone): A loading indicator component that displays a circular animation on a light grey background.
html:
<div class=""h-screen w-screen flex justify-center items-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""bg-gray-200 h-48 w-48 rounded-full flex justify-center items-center""><div class=""animate-spin h-12 w-12 border-4 border-solid border-gray-400 border-t-transparent rounded-full""></div></div>"
Community Forum and Chat Tools,"description:
The UI should be a responsive community forum and chat tools page that allows users to discuss topics, ask questions, and interact with each other through a chat system. The page should be divided into two main sections: a forum section that displays a list of discussion topics, and a chat section that allows users to send messages to each other.
components:
- ForumTopicList: A component that takes children (a list of **ForumTopicCard** components) and displays them in a scrollable list.
- ChatInput: A standalone component that allows users to input and send messages.
- ChatMessage: A standalone component that displays a single chat message, including the sender's username and message text.
- ChatMessageList: A component that takes children (a list of **ChatMessage** components) and displays them in a scrollable list.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Community Forum</h1><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-2/3 xl:w-2/3 px-4 mb-4""><ForumTopicList/></div><div class=""w-full md:w-1/3 xl:w-1/3 px-4 mb-4""><h2 class=""text-2xl font-bold mb-4"">Chat</h2><ChatMessageList/><ChatInput/></div></div></div>
component html:
ForumTopicList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>
ChatInput:
<form class=""flex mb-4""><input type=""text"" class=""w-full p-2 pl-10 text-gray-700"" placeholder=""Type a message...""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>
ChatMessage:
<div class=""mb-4 p-4 border border-gray-200 rounded""><p class=""text-gray-600"">{username}</p><p class=""text-gray-600"">{messageText}</p></div>
ChatMessageList:
<div class=""overflow-y-auto max-h-screen"">{children}</div>"
"Category navigation menu with a white background and bold, black font","description:
The category navigation menu should have a clean and minimalistic design with a white background and bold, black font. The menu should be responsive and adaptable to different screen sizes. On smaller screens, the menu should be compact and easy to navigate, while on larger screens, it should have more breathing room and be easy to read.
components:
- CategoryNavItem: (Takes Children): A single category item in the navigation menu. It should display the category name in bold, black font and have a hover effect to indicate interactivity.
- CategoryNav: (Takes Children): The top-level navigation menu component that contains multiple CategoryNavItem components.
html:
<CategoryNav><CategoryNavItem>Category 1</CategoryNavItem><CategoryNavItem>Category 2</CategoryNavItem><CategoryNavItem>Category 3</CategoryNavItem><!-- more CategoryNavItem components here --></CategoryNav>
component html:
CategoryNavItem:
<a href={category_link} class=""block py-2 px-4 rounded hover:bg-gray-100 transition duration-300 ease-in-out""><span class=""font-bold text-lg"">{children}</span></a>
CategoryNav:
<nav class=""bg-white shadow-md rounded py-4 px-6 md:px-12 lg:px-24""><ul class=""flex flex-wrap justify-center md:justify-start"">{children}</ul></nav>"
Quote players,"description:
The UI should display a list of quotes with their respective authors. Each quote should be displayed on a separate line with the author's name on a new line below the quote. The quotes should be displayed in a responsive list, with a maximum width to prevent the text from becoming too wide.
components:
- QuotePlayerList: A component that takes children, which are `QuotePlayerCard` components, and displays them in a responsive list.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Quote Players</h1><QuotePlayerList><!-- List of quotes will be inserted here --></QuotePlayerList></div>
component html:
QuotePlayerList:
<ul class=""list-none mb-0"">{children}</ul>"
A avatar component that displays a circle image of a user or chef,"description:
The Avatar component should display a circular image of a user or chef. The image should be rounded to create a circular shape. The component should be responsive, meaning it should adjust its size based on the screen size.
components:
- Avatar: (Standalone): A circular image of a user or chef.
html:
<Avatar/>
component html:
Avatar:
<div class=""rounded-full overflow-hidden w-12 h-12 md:w-16 md:h-16 lg:w-20 lg:h-20""><img src=""{image_src}"" alt=""{alt_text}"" class=""object-cover w-full h-full""/></div>"
A profile header with a cover photo and a profile picture,"description:
The profile header should have a cover photo that spans the entire width of the screen, with a profile picture overlaid on top of it. The profile picture should be circular and have a slight shadow to give it depth. There should be a clear hierarchy of information, with the most important details (username and bio) prominently displayed. The header should be responsive, with the cover photo scaling down on smaller screens and the profile picture moving below the cover photo on mobile devices.
components:
- ProfileHeader: (Takes Children): The top-level component that contains the cover photo, profile picture, and profile information.
- CoverPhoto: (Standalone): The background image that spans the entire width of the screen.
- ProfilePicture: (Standalone): The circular profile picture that overlays the cover photo.
- ProfileInfo: (Takes Children): The component that contains the username and bio.
html:
<div class=""flex flex-col justify-center md:flex-row""><ProfileHeader><CoverPhoto/><ProfilePicture/><ProfileInfo><h2>{username}</h2><p>{bio}</p></ProfileInfo></ProfileHeader></div>
component html:
ProfileHeader:
<div class=""relative w-full sm:h-64 md:h-48 lg:h-64 xl:h-80"">{children}</div>
CoverPhoto:
<img src={cover_photo_url} class=""w-full h-full object-cover rounded-t-lg"" alt=""Cover Photo""/>
ProfilePicture:
<img src={profile_picture_url} class=""w-24 h-24 rounded-full absolute top-12 md:top-20 lg:top-24 xl:top-32 left-4 md:left-8 lg:left-12 xl:left-16 shadow-md"" alt=""Profile Picture""/>
ProfileInfo:
<div class=""px-4 md:px-8 lg:px-12 xl:px-16 pt-4 md:pt-8 lg:pt-12 xl:pt-16"">{children}</div>"
Product details page with:,"description:
The product details page should have a clean and modern design with a focus on showcasing the product. The page should be divided into sections to provide a clear and organized layout. The header should contain the product name and a call-to-action (CTA) button. The product image should be large and centered, with a white background to make it stand out. The product description should be brief and concise, with a ""Read more"" link to expand the text. The specifications, reviews, and related products sections should be tabbed to reduce clutter. The page should be responsive, with the layout adapting to different screen sizes.
components:
- ProductHeader: (Standalone): A header component that displays the product name and a call-to-action button. Should be full-width on large screens and stacked on smaller screens.
- ProductImage: (Standalone): A component that displays the product image. Should be centered and responsive, with a maximum width on large screens.
- ProductDescription: (Takes Children): A component that displays a brief product description with a ""Read more"" link. Should be stacked on small screens and side-by-side on larger screens.
- TabbedSection: (Takes Children): A component that displays tabbed content (specifications, reviews, related products). Should be full-width on large screens and stacked on smaller screens.
- SpecSheet: (Takes Children): A component that displays a table of product specifications. Should be full-width on large screens and stacked on smaller screens.
- Reviews: (Takes Children): A component that displays customer reviews. Should be full-width on large screens and stacked on smaller screens.
- RelatedProducts: (Takes Children): A component that displays related products. Should be full-width on large screens and stacked on smaller screens.
html:
<div class=""container mx-auto p-4 pt-6 lg:p-6 lg:pt-12""><ProductHeader/><ProductImage/><ProductDescription><p>{product_description}</p><a href=""#"" class=""text-blue-600 hover:text-blue-900"">Read more</a></ProductDescription><TabbedSection><SpecSheet><table class=""w-full""><tr><th>Specification</th><th>Value</th></tr><tr><td>Weight</td><td>{weight}</td></tr><tr><td>Dimensions</td><td>{dimensions}</td></tr></table></SpecSheet><Reviews><h2 class=""text-lg font-bold"">Customer Reviews</h2><ul><li>{review_1}</li><li>{review_2}</li><!-- more reviews --></ul></Reviews><RelatedProducts><h2 class=""text-lg font-bold"">Related Products</h2><ul><li>{related_product_1}</li><li>{related_product_2}</li><!-- more products --></ul></RelatedProducts></TabbedSection></div>
component html:
ProductHeader:
<header class=""flex justify-between mb-4 lg:mb-6""><h1 class=""text-3xl font-bold"">{product_name}</h1><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></header>
ProductImage:
<div class=""flex justify-center mb-4 lg:mb-6""><img src={product_image_url} alt={product_name} class=""max-w-md mx-auto rounded-lg shadow-lg""/></div>
ProductDescription:
<div class=""flex flex-wrap mb-4 lg:mb-6""><div class=""w-full lg:w-2/3"">{children} </div></div>
TabbedSection:
<div class=""flex flex-wrap mb-4 lg:mb-6""><ul class=""flex mb-4 lg:mb-6""><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Specifications</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Reviews</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">Related Products</a></li></ul><div class=""w-full"">{children}</div></div>
SpecSheet:
<div class=""w-full mb-4 lg:mb-6""><table class=""w-full"">{children} </table></div>
Reviews:
<div class=""w-full mb-4 lg:mb-6""><h2 class=""text-lg font-bold"">Customer Reviews</h2><ul>{children} </ul></div>
RelatedProducts:
<div class=""w-full mb-4 lg:mb-6""><h2 class=""text-lg font-bold"">Related Products</h2><ul>{children} </ul></div>"
A progress bar component that displays a user's progress towards their fitness goals,"description:
The progress bar should be a horizontal bar that fills up as the user progresses towards their fitness goals. The bar should be colored with a bright, motivational color to encourage the user to reach their goals. A subtle gradient effect can be added to give the bar some depth and dimension. The bar should also have a clear label indicating the user's progress, such as ""60% complete"".
components:
- ProgressBar: (Takes Children): A horizontal progress bar that fills up as the user progresses towards their fitness goals.
- ProgressBarLabel: (Standalone): A text label that displays the user's progress as a percentage.
html:
<div class=""flex flex-col items-center p-4 mb-4""><ProgressBar><ProgressBarLabel/></ProgressBar></div>
component html:
ProgressBar:
<div class=""h-4 rounded-full bg-gradient-to-r from-{primary_color} to-{secondary_color} overflow-hidden""><div class=""h-full bg-{highlight_color} w-{progress_percentage}%""/>{children}</div>
ProgressBarLabel:
<p class=""text-lg font-bold text-{text_color}"">{progress_percentage}% complete</p>"
"Game card component with a game title, image, rating, and short description","description:
The game card component should have a clean and modern design that showcases the game's title, image, rating, and short description. The component should be responsive and scale well on different screen sizes. The design should be visually appealing, with a clear hierarchy of information and sufficient whitespace to make the content easy to read.
components:
- GameCard: (Takes Children): The top-level component that wraps the game card content.
- GameTitle: (Standalone): Displays the title of the game.
- GameImage: (Standalone): Displays the image of the game.
- GameRating: (Standalone): Displays the rating of the game.
- GameDescription: (Standalone): Displays a short description of the game.
html:
<div class=""max-w-md mx-auto md:max-w-lg lg:max-w-xl bg-white shadow-md rounded-lg p-4""><GameCard><GameImage/><GameTitle/><GameRating/><GameDescription/></GameCard></div>
component html:
GameCard:
<div class=""flex flex-col p-4 md:p-6 lg:p-8"">{children}</div>
GameTitle:
<h2 class=""text-lg font-bold mb-2"">{game_title}</h2>
GameImage:
<img src=""{image_url}"" alt={game_title} class=""w-full h-48 object-cover rounded-lg mb-4""/>
GameRating:
<div class=""flex items-center mb-2""><span class=""text-xs text-gray-600"">{rating}/ 5</span><svg><!-- rating stars svg --></svg></div>
GameDescription:
<p class=""text-sm text-gray-600"">{game_description}</p>"
Email subscription popup,"description:
- The UI should be a modal popup that appears centrally on the screen. It should have a light background and a close button at the top-right corner for dismissing the popup. The main content includes a headline, a brief description or prompt to encourage subscription, an email input field, and a submit button. The popup should be overlaid on a semi-transparent background that covers the entire viewport, suggesting focus on the subscription form.
components:
- ModalOverlay: Standalone component. It serves as a semi-transparent backdrop for the modal.
- SubscriptionModal: Takes children. This component is the central popup that contains the subscription form.
- CloseButton: Standalone component. A button for closing the popup.
- SubscriptionForm: Takes children. Holds the input field and submit button for the email subscription.
html:
<ModalOverlay/><SubscriptionModal><CloseButton/><h2>Subscribe to Our Newsletter</h2><p>Get the latest news and updates right in your inbox. Join our mailing list.</p><SubscriptionForm><label for=""email"">Email:</label><input type=""email"" id=""email"" required placeholder=""Enter your email""/><button type=""submit"">Subscribe</button></SubscriptionForm></SubscriptionModal>
component html:
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50""></div>
SubscriptionModal:
<div class=""fixed inset-0 flex items-center justify-center p-4""><div class=""bg-white rounded-lg shadow-lg p-8 max-w-md mx-auto relative"">{children} </div></div>
CloseButton:
<button class=""absolute top-2 right-2 text-black"" aria-label=""Close modal"">&#x2715; </button>
SubscriptionForm:
<form class=""mt-4"">{children} </form>"
Testimonial Author Profile,"description:
The UI should display a testimonial author's profile information, including their name, role, and photo, along with a quote and a rating. The component should be responsive, mobile-first, and accessible.
components:
- TestimonialAuthorProfile: A standalone component that displays the author's profile information and testimonial.
- AuthorAvatar: A standalone component that displays the author's photo.
- Rating: A standalone component that displays the rating.
- TestimonialQuote: A standalone component that displays the testimonial quote.
html:
<div class=""max-w-md mx-auto mb-4 md:mb-8""><TestimonialAuthorProfile/></div>
component html:
TestimonialAuthorProfile:
<div class=""flex flex-col md:flex-row items-center mb-4""><AuthorAvatar/><div class=""md:ml-4""><p class=""text-lg font-bold"">{author_name}</p><p class=""text-gray-600"">{author_role}</p><Rating/></div></div><TestimonialQuote/>
AuthorAvatar:
<img class=""w-24 h-24 rounded-full"" src={author_photo_url} alt={author_name}/>
Rating:
<div class=""flex mb-2"">{rating_out_of_five} <i class=""fas fa-star text-yellow-500""></i></div>
TestimonialQuote:
<blockquote class=""text-lg italic mb-4"">{testimonial_quote}</blockquote>"
"A simple, rounded avatar icon to display the author's photo","description:
The avatar icon should be a rounded circle with a subtle shadow to give it some depth. The avatar should scale according to the screen size, but maintain a consistent aspect ratio to ensure the photo is not distorted. On smaller screens, the avatar should be smaller to conserve vertical space.
components:
- Avatar: (Standalone): A circular avatar icon that displays the author's photo.
html:
<div class=""flex justify-center mb-4""><Avatar/></div>
component html:
Avatar:
<img src={author_photo_url} alt=""Author Photo"" class=""rounded-full h-12 w-12 md:h-16 md:w-16 lg:h-20 lg:w-20 shadow-md""/>"
"A logo component with a simple, white icon and a custom font for the logotype","description:
The logo component should be a compact, rectangular element that contains a simple, white icon alongside a custom font for the logotype. The icon should be prominently displayed on the left side of the component, with the logotype text aligned vertically alongside it. The component should scale well on different screen sizes, with the icon and logotype text resizing proportionally to fit the available space.
components:
- LogoComponent: (Standalone): A self-contained component that renders a logo with an icon and logotype text.
html:
<div class=""flex justify-center mb-4""><LogoComponent/></div>
component html:
LogoComponent:
<div class=""flex items-center rounded-md shadow-md bg-{brand_color} p-2""><div class=""w-6 h-6 text-white""><!-- icon --><i class=""fas fa-{icon_name}""></i></div><span class=""text-lg font-bold text-white"">{logotype_text}</span></div>"
Pricing table,"description:
The UI should be a responsive pricing table with three columns representing different pricing plans. Each column should display the plan name, price, features, and a call-to-action (CTA) button. The table should be mobile-first, accessible, and SEO-friendly.
components:
- PricingTable: standalone component that contains the entire pricing table
- PricingPlan: standalone component that represents a single pricing plan
- Price: standalone component that displays the price of a pricing plan
- FeaturesList: standalone component that displays the features of a pricing plan
- CallToActionButton: standalone component that displays a CTA button
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PricingTable/></div>
component html:
PricingTable:
<div class=""flex flex-wrap justify-center mb-4""><PricingPlan/><PricingPlan/><PricingPlan/></div>
PricingPlan:
<div class=""w-full md:w-1/3 xl:w-1/3 p-4 mb-4""><h3 class=""text-lg"">{plan_name}</h3><Price/><FeaturesList/><CallToActionButton/></div>
Price:
<p class=""text-2xl"">{price_text}</p>
FeaturesList:
<ul class=""list-none mb-4""><li>{feature_1}</li><li>{feature_2}</li><li>{feature_3}</li></ul>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">{cta_text}</button>"
Customer review and rating summaries,"description:
The UI should display a summary of customer reviews, including the average rating and total number of reviews. It should be responsive, mobile-first, and accessible.
components:
- CustomerReviewSummary: standalone component
- RatingSummary: standalone component
- ReviewCount: standalone component
html:
<div class=""max-w-md mx-auto py-4""><CustomerReviewSummary/><div class=""flex justify-between mb-4""><RatingSummary/><ReviewCount/></div></div>
component html:
CustomerReviewSummary:
<div class=""text-lg font-bold"">{average_rating} out of 5 stars</div>
RatingSummary:
<div class=""flex items-center""><span class=""text-yellow-500"">{rating_icon}</span><span class=""ml-2"">{average_rating}</span></div>
ReviewCount:
<p>{review_count} reviews</p>"
Cards with a dark background and white text to display featured articles,"description:
The UI should consist of a grid of cards, each featuring a highlighted article. The cards should have a dark background and white text to make the text stand out. The cards should be responsive, scaling to fit different screen sizes. On mobile devices, the cards should be stacked vertically, while on larger screens, they should be arranged in a grid.
components:
- FeaturedArticleCard: (Takes Children): This component represents a single featured article card. It should have a dark background and white text. On mobile devices, it should take up the full width of the screen, while on larger screens, it should be arranged in a grid with other cards.
- FeaturedArticleGrid: (Takes Children): This component represents the grid of featured article cards. It should be responsive, scaling to fit different screen sizes.
html:
<div class=""container mx-auto p-4""><FeaturedArticleGrid><FeaturedArticleCard><!-- article 1 content --></FeaturedArticleCard><FeaturedArticleCard><!-- article 2 content --></FeaturedArticleCard><!-- more cards here --></FeaturedArticleGrid></div>
component html:
FeaturedArticleCard:
<div class=""bg-dark text-white p-4 rounded-md shadow-md mb-4""><h2 class=""text-lg font-bold"">{article_title}</h2><p>{article_summary}</p><div class=""flex justify-end""><svg><!-- bookmark --></svg><svg><!-- share --></svg></div>{children}</div>
FeaturedArticleGrid:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Login/Registration Forms,"description:
The UI should consist of two separate forms: one for login and another for registration. The design should be clean, with inputs clearly labeled and a noticeable button for submission. The login form will include fields for the user's email and password, as well as a submission button. The registration form will also have fields for the user's email, password, and a confirmation password field, along with a submit button. Error messages should display if input validation fails.
components:
- LoginForm: (Standalone): A form for users to input their email and password to log into their account.
- RegistrationForm: (Standalone): A form for new users to register by entering their email, password, and confirming their password.
html:
<div class=""flex flex-col space-y-12""><LoginForm/><RegistrationForm/></div>
component html:
LoginForm:
<!-- LoginForm: Allow users to enter their credentials to log in --><form class=""space-y-6 bg-white rounded-lg p-4 shadow-md""><h2 class=""text-lg font-semibold text-gray-900"">Login</h2><div><label for=""loginEmail"" class=""block text-sm font-medium text-gray-700"">Email</label><input id=""loginEmail"" name=""email"" type=""email"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""loginPassword"" class=""block text-sm font-medium text-gray-700"">Password</label><input id=""loginPassword"" name=""password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><button type=""submit"" class=""w-full py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"">Log In</button></form>
RegistrationForm:
<!-- RegistrationForm: Allow new users to register by entering their details --><form class=""space-y-6 bg-white rounded-lg p-4 shadow-md""><h2 class=""text-lg font-semibold text-gray-900"">Register</h2><div><label for=""registerEmail"" class=""block text-sm font-medium text-gray-700"">Email</label><input id=""registerEmail"" name=""email"" type=""email"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""registerPassword"" class=""block text-sm font-medium text-gray-700"">Password</label><input id=""registerPassword"" name=""password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><div><label for=""confirmPassword"" class=""block text-sm font-medium text-gray-700"">Confirm Password</label><input id=""confirmPassword"" name=""confirm_password"" type=""password"" required class=""mt-1 p-2 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500""></div><button type=""submit"" class=""w-full py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"">Register</button></form>"
Clickable text that navigates to another page or resource,"description:
The UI will have a simple clickable text element, which is commonly referred to as a ""link"". This element will be styled to look distinct from regular text, perhaps with a different color or underline, to indicate that it is interactive and navigates to another page or resource when clicked.
components:
- ClickableLink: (Standalone)**: This component represents a hyperlink that users can click to navigate to a specific URL.
html:
<div class=""container mx-auto px-4""><ClickableLink/></div>
component html:
ClickableLink:
<!-- ClickableLink: A simple hyperlink for navigation --><a href=""{target_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">Click here</a>"
Messaging and Chat Systems,"description:
The UI should resemble a modern messaging or chat system with a thread of messages, where each message is displayed in a bubble-like format, with the sender's name and message text. The UI should be responsive, mobile-first, and accessible.
components:
- MessageThread: a component that takes children (an array of `MessageBox` components) and displays them in a scrolling container.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-10""><div class=""flex flex-col overflow-y-auto h-screen md:h-auto""><MessageThread><!-- Messages will be rendered here --></MessageThread></div></div>
component html:
MessageThread:
<div class=""flex flex-col overflow-y-auto h-full pb-4"">{children}</div>"
Footer content,"description:
The footer should be a simple, responsive section that contains copyright information and a link to a terms of service page. It should be accessible on all devices and screen readers.
components:
- FooterContent: (standalone)
- Copyright: (standalone)
- TermsLink: (standalone)
html:
<footer class=""bg-gray-200 h-screen md:h-auto md:flex md:justify-center md:py-4""><FooterContent/></footer>
component html:
FooterContent:
<div class=""max-w-md mx-auto px-4 md:px-0""><Copyright/><TermsLink/></div>
Copyright:
<p class=""text-sm text-gray-600"">{copyright_text}</p>
TermsLink:
<p class=""text-sm text-gray-600""><a href={terms_url} class=""underline"">Terms of Service</a></p>"
"A ""Categories"" component that includes a list of category names with a white background and a subtle border","description:
The UI should have a clean and simple design with a white background and a subtle border. The categories list should be responsive and adapt to different screen sizes. On larger screens, the list should be displayed horizontally, while on smaller screens, it should be displayed vertically.
components:
- CategoriesComponent: (Takes Children): A component that displays a list of categories.
- CategoryComponent: (Standalone): A component that displays a single category.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><CategoriesComponent><!-- Categories list will be rendered here --></CategoriesComponent></div>
component html:
CategoriesComponent:
<ul class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8"">{children}</ul>
CategoryComponent:
<li class=""px-4 py-2 border-b border-gray-200 hover:bg-gray-100""><a href=""#"" class=""text-gray-800 hover:text-gray-900"">{category_name}</a></li>"
Recommended products display,"description:
The UI should be a responsive, mobile-first gallery of recommended products, displaying 2-3 products per row on desktop and 1 product per row on mobile. Each product should have a product name, price, and call-to-action (CTA) button.
components:
- ProductCard: (standalone) - a single product card
- ProductGallery: (takes children) - a container for multiple product cards
html:
<div class=""max-w-md mx-auto px-4 py-8""><h2 class=""text-2xl font-bold mb-4"">Recommended Products</h2><ProductGallery><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCards here --></ProductGallery></div>
component html:
ProductCard:
<div class=""bg-white shadow-md rounded px-4 py-6 mb-4 w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5""><h3 class=""text-lg font-bold"">{productName}</h3><p class=""text-gray-600"">{productDescription}</p><p class=""text-lg font-bold"">{productPrice}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div>
ProductGallery:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Sliders/Ranges/Scalars,"description:
The UI should have a range slider component that allows users to select a value within a specified range. The slider should be responsive, accessible, and easy to use on both desktop and mobile devices.
components:
- RangeSlider: A standalone component that renders a range slider input.
- SliderThumb: A standalone component that renders a thumb element that can be dragged to select a value.
- SliderTrack: A standalone component that renders the track on which the slider thumb moves.
html:
<div class=""w-full max-w-md mx-auto p-4""><RangeSlider/></div>
component html:
RangeSlider:
<div class=""flex justify-center mb-4""><SliderTrack/><SliderThumb/><span class=""ml-2"">{ sliderValue }</span></div>
SliderThumb:
<div class=""w-4 h-4 rounded-full bg-gray-800 shadow-md -ml-1""></div>
SliderTrack:
<div class=""w-full h-1 rounded-full bg-gray-200""></div>"
A dark background component to serve as the website's main background,"description:
The UI should have a dark background that spans the entire screen, providing a consistent and cohesive look throughout the website. The dark background should be responsive, adjusting to different screen sizes, and should have a subtle gradient effect to add depth and dimension.
components:
- DarkBackground: (Standalone): A dark background component that serves as the website's main background. It should have a dark color scheme and a subtle gradient effect. On smaller screens, the background should take up the full height and width of the screen. On larger screens, the background should maintain a consistent aspect ratio while scaling to fit the screen size.
html:
<div class=""h-screen w-full flex""><DarkBackground/></div>
component html:
DarkBackground:
<div class=""h-screen w-full bg-gradient-to-r from-dark-900 to-dark-700 rounded-none lg:rounded-lg shadow-md"">{/* Background is empty, just a dark background */ }</div>"
"A search bar with a white input field and a blue ""Search"" button","description:
The UI should be a simple search bar with a prominent ""Search"" button. The input field should be white with a subtle border, and the ""Search"" button should be a contrasting blue color to draw attention. The layout should be responsive, with the input field and button aligning horizontally on larger screens and stacking vertically on smaller screens.
components:
- SearchBar: (Takes Children): A container component for the search input field and button.
- SearchInput: (Standalone): A white input field for entering search queries.
- SearchButton: (Standalone): A blue ""Search"" button.
html:
<div class=""max-w-md mx-auto p-4""><SearchBar><SearchInput/><SearchButton/></SearchBar></div>
component html:
SearchBar:
<div class=""flex flex-wrap items-center mb-4 md:flex-nowrap"">{children}</div>
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"" placeholder=""Search..."">
SearchButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md"">Search</button>"
Header with a FIT HIVE logo in green and white,"description:
The UI should have a clean and modern design with a prominent FIT HIVE logo in green and white. The header should be responsive and take up the full width of the screen, with the logo on the left and some empty space on the right. On smaller screens, the logo should shrink to fit the screen size.
components:
- FitHiveLogo: (Standalone): A green and white FIT HIVE logo that should be displayed prominently in the header.
- Header: (Takes Children): A container element for the header that takes the logo and any other elements as children.
html:
<header class=""flex justify-between items-center h-16 md:h-20 lg:h-24""><FitHiveLogo/><!-- Empty space on the right --><div class=""flex-grow""></div></header>
component html:
FitHiveLogo:
<a href=""#"" class=""text-white hover:text-white focus:text-white transition duration-300 ease-in-out""><svg><!-- fit hive --></svg></a>
Header:
<header class=""flex justify-between items-center h-16 md:h-20 lg:h-24 bg-white shadow-md"">{children}</header>"
A simple breadcrumbs component to display the current page location,"description:
The breadcrumbs component should be a horizontal list of links that indicate the current page location. It should be easy to read and understand, with sufficient spacing between each item. On smaller screens, the breadcrumbs should wrap to a new line to ensure readability. The active item should be highlighted to indicate the current page.
components:
- Breadcrumbs: (Takes Children): The top-level breadcrumbs component that contains a list of breadcrumb items.
- BreadcrumbItem: (Standalone): An individual breadcrumb item that displays the text and link to a page.
html:
<nav class=""md:flex justify-between items-center mb-4""><ol class=""list-none p-0 m-0 flex flex-wrap""><!-- Breadcrumbs items will be rendered here --></ol></nav>
component html:
Breadcrumbs:
<nav class=""md:flex justify-between items-center mb-4""><ol class=""list-none p-0 m-0 flex flex-wrap"">{children} </ol></nav>
BreadcrumbItem:
<li class=""mr-2 md:mr-4""><a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{href}"">{text} </a><span class=""text-gray-400 mx-2"">›</span></li>"
Custom Field Builder: Create tailored data fields,"description:
The UI should be a responsive, mobile-first, and accessible interface for building custom data fields. It should consist of a header, a field-type selection section, and a field configuration section. The header should display the title ""Custom Field Builder"" and have an optional ""Save"" button. The field-type selection section should display a list of available field types (e.g., text, number, date, etc.). The field configuration section should display fields depending on the selected field type.
components:
- HeaderComponent: (standalone): Displays the title and optional save button.
- FieldTypeSelectorComponent: (standalone): Displays a list of available field types.
- FieldConfiguratorComponent: (takes children): Displays fields depending on the selected field type.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><HeaderComponent/><div class=""flex flex-wrap -mx-4""><div class=""w-full md:w-1/2 xl:w-1/3 p-4""><FieldTypeSelectorComponent/></div><div class=""w-full md:w-1/2 xl:w-2/3 p-4""><FieldConfiguratorComponent><!-- field configuration fields will be rendered here --></FieldConfiguratorComponent></div></div></div>
component html:
HeaderComponent:
<header class=""flex justify-between mb-4""><h1 class=""text-lg font-bold"">Custom Field Builder</h1><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></header>
FieldTypeSelectorComponent:
<ul class=""list-none mb-4""><li><input type=""radio"" id=""text-field"" name=""field-type"" value=""text""/><label for=""text-field"">Text</label></li><li><input type=""radio"" id=""number-field"" name=""field-type"" value=""number""/><label for=""number-field"">Number</label></li><li><input type=""radio"" id=""date-field"" name=""field-type"" value=""date""/><label for=""date-field"">Date</label></li><!-- more field types will be rendered here --></ul>
FieldConfiguratorComponent:
<!-- field configuration fields will be rendered here based on the selected field type -->{children}"
Backdrop controls,"description:
The Backdrop Controls UI will feature a main control panel that provides users with interactive controls such as toggle switches or buttons. This overlay will appear above the application's main content area with a backdrop that dims the background to focus user attention on the control elements.
components:
- Backdrop: A standalone component that renders a semi-transparent layer between the main content and the control panel.
- ControlPanel: A standalone component that hosts the interactive controls like toggles or buttons.
html:
<!-- Main Container for Backdrop Controls --><div class=""relative z-10""><!-- Backdrop Overlay --><Backdrop/><!-- Control Panel with interactive controls --><ControlPanel/></div>
component html:
Backdrop:
<!-- Semi-transparent backdrop to dim the content behind the control panel --><div class=""fixed inset-0 bg-black bg-opacity-50""></div>
ControlPanel:
<!-- Container for holding the control elements --><div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 p-4 bg-white shadow-lg rounded-md""><button type=""button"" class=""py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-700"">Toggle</button><button type=""button"" class=""ml-4 py-2 px-4 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"">Close</button></div>"
Comments,"description:
A comments section with a list of comments, each with a username, comment text, and a ""Like"" button.
components:
- Comment: (standalone): A single comment with a username, comment text, and a ""Like"" button
- CommentsSection: (takes children): A container for the list of comments
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Comments</h2><CommentsSection><Comment/><Comment/><!-- Add more Comment components here --></CommentsSection></div>
component html:
Comment:
<div class=""flex mb-4""><img class=""w-8 h-8 rounded-full mr-4"" src=""{user_avatar_url}"" alt=""{username}'s profile picture""/><div class=""flex-1""><p class=""text-sm"">{username}</p><p class=""text-base"">{comment_text}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Like</button></div></div>
CommentsSection:
<div class=""divide-y divide-gray-200"">{children}</div>"
Service offerings display,"description:
The UI should display a list of service offerings in a responsive, mobile-first layout. Each service offering should have a title, a brief description, and an icon. The layout should be accessible and SEO-friendly.
components:
- ServiceOfferingList: A component that takes children, which will be a list of `ServiceOfferingCard` components.
html:
<main class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Our Services</h1><ServiceOfferingList><!-- Service offering cards will be rendered here --></ServiceOfferingList></main>
component html:
ServiceOfferingList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
"Create a section that displays a list of related products with images, names, and prices","description:
The UI should display a list of related products in a grid layout, with each product showcased in a card-like format. The card should contain the product image, name, and price. The layout should be responsive, with the cards adjusting their size and arrangement based on the screen size. On smaller screens, the cards should stack vertically, while on larger screens, they should arrange in a grid with multiple columns.
components:
- RelatedProductsSection: (Takes Children): A container component that holds the list of related products.
html:
<RelatedProductsSection><!-- List of ProductCard components will be rendered here --></RelatedProductsSection>
component html:
RelatedProductsSection:
<section class=""max-w-md mx-auto lg:max-w-2xl xl:max-w-3xl p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Related Products</h2><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children} </div></section>"
Product title text with a medium font size and medium font weight,"description:
The UI should have a clear and readable product title that stands out with a medium font size and medium font weight. The title should be easily readable on different screen sizes and should adapt to the available screen space.
components:
- ProductTitle: (Takes Children): A component that displays the product title with a medium font size and medium font weight. On smaller screens (sm:), the font size should be adjusted to ensure readability. On larger screens (lg:), the font size can be slightly larger to accommodate more screen space.
html:
<div class=""container mx-auto p-4""><ProductTitle>{product_title}</ProductTitle></div>
component html:
ProductTitle:
<span class=""text-lg md:text-xl font-medium"">{children}</span>"
Featured Video Poster,"description:
The UI should display a featured video poster with a background image, a title, a description, and a play button. The poster should be responsive and adjust to different screen sizes.
components:
- FeaturedVideoPoster: a standalone component that displays the featured video poster.
- PosterBackgroundImage: a standalone component that displays the background image of the poster.
- PosterTitle: a standalone component that displays the title of the video.
- PosterDescription: a standalone component that displays the description of the video.
- PlayButton: a standalone component that displays the play button.
html:
<div class=""max-w-md mx-auto""><FeaturedVideoPoster/></div>
component html:
FeaturedVideoPoster:
<div class=""relative mb-4""><PosterBackgroundImage/><div class=""absolute bottom-0 left-0 p-4""><PosterTitle/><PosterDescription/><PlayButton/></div></div>
PosterBackgroundImage:
<img src={video_poster_image_url} alt={video_title} class=""w-full h-64 object-cover object-center""/>
PosterTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>
PosterDescription:
<p class=""text-sm"">{video_description}</p>
PlayButton:
<button class=""px-4 py-2 bg-orange-500 text-white rounded"">Play</button>"
A call-to-action button with a white outline,"description:
The UI should be a simple call-to-action button with a white outline. The button should be prominent and easy to click on different screen sizes. The white outline should provide sufficient contrast with the background, making it accessible.
components:
- OutlineButton: (Takes Children): A button with a white outline that wraps around its child content.
html:
<div class=""flex justify-center""><OutlineButton>{children}</OutlineButton></div>
component html:
OutlineButton:
<button class=""bg-black hover:bg-gray-800 text-white py-2 px-4 border-2 border-white rounded"">{children}</button>"
Call-to-Action Buttons,"description:
The UI will feature three call-to-action (CTA) buttons, each designed with visually engaging styles and hover effects. These buttons will be centered on the page and will scale responsively for mobile devices.
components:
- ActionButton: Standalone component. This is a reusable button component styled with TailwindCSS for a consistent and attractive look.
html:
<div class=""flex flex-col items-center justify-center space-y-4 md:space-y-0 md:flex-row md:space-x-4 p-6""><ActionButton/><ActionButton/><ActionButton/></div>
component html:
ActionButton:
<button class=""bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow hover:bg-blue-600 transition-colors duration-300 focus:outline-none"">{button_text}</button>"
Search bar with a blue border and a magnifying glass icon,"description:
The search bar should have a prominent blue border to draw the user's attention. The magnifying glass icon should be placed inside the input field to hint to the user that it's a search function. The search bar should be responsive and adapt to different screen sizes.
components:
- SearchBar: (Takes Children): A text input field with a blue border and a magnifying glass icon inside the input field. On small screens, the input field should take up the full width, and the icon should be smaller. On medium screens and up, the input field should be narrower and the icon should be larger.
- MagnifyingGlassIcon: (Standalone): A small icon of a magnifying glass.
html:
<SearchBar><input type=""text"" placeholder=""Search...""/><MagnifyingGlassIcon/></SearchBar>
component html:
SearchBar:
<div class=""flex items-center border-2 border-blue-500 rounded-md p-2"">{children}</div>
MagnifyingGlassIcon:
<span class=""text-lg sm:text-xl md:text-2xl xl:text-3xl""><i class=""fas fa-search""></i></span>"
"A motivational quote component that displays a rotating quote on a black background with white, italicized text","description:
The UI should be a simple, yet striking component that displays a motivational quote on a black background with white, italicized text. The quote should rotate every few seconds to keep the user engaged and motivated. The component should be responsive, taking up the full width of the screen on mobile devices and scaling up to a maximum width on larger screens.
components:
- MotivationalQuote: (Standalone): Displays a motivational quote on a black background with white, italicized text. Rotates quotes every few seconds.
html:
<MotivationalQuote/>
component html:
MotivationalQuote:
<div class=""h-screen w-full bg-black text-white italic text-lg md:text-xl lg:text-2xl flex justify-center items-center""><blockquote class=""text-center"">{motivational_quote}</blockquote></div>"
On/off control that users can slide to change a setting or state,"description:
The UI should be a toggle switch that can be slid to change a setting or state. It should have a clear visual indicator of the current state (on or off) and be easily accessible on various devices and screen sizes.
components:
- ToggleSwitch: A standalone component that represents the toggle switch.
html:
<div class=""flex items-center mb-4""><!-- Label for the toggle switch --><label class=""mr-4"">{label}</label><ToggleSwitch/></div>
component html:
ToggleSwitch:
<!-- The toggle switch container --><div class=""inline-block align-middle transition duration-200 ease-in-out""><!-- The toggle switch button --><button aria-label=""Toggle Switch"" aria-checked={isChecked} class=""w-12 h-6 flex items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2""><!-- The slider button inside the toggle switch --><span class={`w-5 h-5 rounded-full shadow-md {isChecked ? 'bg-green-500' : 'bg-gray-400'}`}></span></button></div>"
Rating Systems/Reviews,"description:
The UI should display a rating system with a maximum of 5 stars, accompanied by a numerical rating and a review text. The UI should be responsive and adapt to different screen sizes.
components:
- RatingStars: (standalone): Displays a row of rating stars
- RatingText: (standalone): Displays the numerical rating
- ReviewText: (standalone): Displays the review text
- RatingContainer: (takes children): Wraps around the rating components
html:
<div class=""flex flex-col md:flex-row justify-center mb-4""><RatingContainer><RatingStars/><RatingText/><ReviewText/></RatingContainer></div>
component html:
RatingStars:
<div class=""flex items-center""><!-- 5 stars -->{/* repeat the star icon 5 times */ } <i class=""fa fa-star text-yellow-400"" aria-hidden=""true""></i>{/* end repeat */ }</div>
RatingText:
<p class=""text-sm"">{rating_value} out of 5 stars</p>
ReviewText:
<p class=""text-sm"">{review_text}</p>
RatingContainer:
<div class=""flex flex-col md:flex-row items-center"">{children}</div>"
Drag-and-Drop Interfaces,"description:
A drag-and-drop interface with a drop zone, a list of draggable items, and a button to clear the drop zone.
components:
- DraggableItem: - standalone: A single item that can be dragged and dropped.
- DropZone: - takes children: The area where items can be dropped.
- ClearButton: - standalone: A button to clear the drop zone.
html:
<div class=""flex h-screen""><div class=""flex-1 overflow-y-auto""><!-- List of draggable items --><ul class=""space-y-2""><DraggableItem/><DraggableItem/><DraggableItem/></ul></div><div class=""flex-1 border""><!-- Drop zone --><DropZone><!-- dropped items will be rendered here --></DropZone></div><ClearButton/></div>
component html:
DraggableItem:
<div class=""bg-white shadow-md p-2 rounded""><p>{item_name}</p></div>
DropZone:
<div class=""h-full p-4 border-dashed border-2"">{children}</div>
ClearButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Clear</button>"
Pattern (repeating) controls,"description:
- The UI consists of a set of controls arranged in a repeating pattern or grid-like layout. Each control group features a label and an interactive element like a button or input. The overall design is clean and spaced evenly for clarity and accessibility.
components:
- ControlGroup: (Standalone): A component that represents one control unit consisting of a label and an interactive element.
- Button: (Standalone): A simple button component for user interaction.
- TextInput: (Standalone): A text input field for user data entry.
html:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4""><ControlGroup/><ControlGroup/><ControlGroup/><!-- Additional ControlGroup elements as needed --></div>
component html:
ControlGroup:
<div class=""flex flex-col space-y-2""><label for=""{control_id}"" class=""text-sm font-medium text-gray-700"">{label_text}</label><!-- Use Button or TextInput based on specific use case --><Button/><!-- or <TextInput/>--></div>
Button:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">{button_text} </button>
TextInput:
<input id=""{control_id}"" type=""text"" placeholder=""{placeholder_text}"" class=""shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md""/>"
Social media feed with latest posts and images,"description:
The UI should be a social media feed that displays the latest posts and images in a responsive, mobile-first layout. The feed should be accessible and SEO-friendly, with alt text for images and semantic HTML5 elements.
components:
- PostCard: A standalone component that displays a single post with an image, post text, and post author.
- PostImage: A standalone component that displays an image with alt text.
- PostText: A standalone component that displays the post text.
- PostAuthor: A standalone component that displays the post author's name.
- SocialMediaFeed: A component that takes children (multiple PostCard components) and displays them in a feed layout.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SocialMediaFeed><PostCard/><PostCard/><!-- Repeat PostCard components for each post in the feed --></SocialMediaFeed></div>
component html:
PostCard:
<article class=""flex flex-col mb-4 md:mb-6 lg:mb-12""><PostImage/><PostText/><PostAuthor/></article>
PostImage:
<img src=""{image_url}"" alt=""{image_alt_text}"" class=""w-full h-48 object-cover rounded-md"">
PostText:
<p class=""text-lg"">{post_text}</p>
PostAuthor:
<p class=""text-sm text-gray-600"">{post_author_name}</p>
SocialMediaFeed:
<div class=""flex flex-col divide-y divide-gray-200"">{children}</div>"
A call-to-action (CTA) button with a green background and white text,"description:
The UI should have a prominent call-to-action (CTA) button that stands out on the page. The button should have a green background and white text to draw attention. The button should be responsive, meaning it should adjust its size and layout accordingly on different screen sizes.
components:
- CallToAction: (Standalone): A prominent button that encourages the user to take a specific action. The button should have a green background and white text.
html:
<div class=""h-screen flex justify-center items-center""><CallToAction/></div>
component html:
CallToAction:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Customer Testimonial with Profile Picture,"description:
The UI should display a customer testimonial with a profile picture, name, and job title. The profile picture should be circular and have a border radius. The testimonial text should be wrapped in a quote blockquote element. The name and job title should be displayed below the testimonial text.
components:
- ProfilePicture: (standalone): displays a circular profile picture
- TestimonialBlock: (takes children): displays a blockquote with the testimonial text
- NameAndJobTitle: (standalone): displays the customer's name and job title
html:
<div class=""flex justify-center mb-12""><ProfilePicture/><div class=""ml-4""><TestimonialBlock><!-- testimonial text will be inserted here --></TestimonialBlock><NameAndJobTitle/></div></div>
component html:
ProfilePicture:
<img src={profile_picture_url} alt={customer_name} class=""w-24 h-24 rounded-full border-2 border-gray-300 object-cover""/>
TestimonialBlock:
<blockquote class=""text-lg font-light"">{children}</blockquote>
NameAndJobTitle:
<p class=""text-lg font-bold"">{customer_name}</p><p class=""text-gray-600"">{job_title}</p>"
Video transitions,"description:
The UI should display a series of video transitions, with each transition showing a before and after state. The video transitions should be responsive, accessible, and easy to navigate.
components:
- VideoTransition: a standalone component that displays a single video transition.
- VideoTransitionsList: a component that takes children, which is a list of `VideoTransition` components.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Video Transitions</h1><VideoTransitionsList><VideoTransition/><VideoTransition/><VideoTransition/><!-- Add more VideoTransition components here --></VideoTransitionsList></div>
component html:
VideoTransition:
<div class=""flex flex-col mb-4""><h2 class=""text-lg font-bold"">{transition_name}</h2><div class=""flex justify-between mb-2""><div class=""w-1/2 bg-gray-200 h-48 rounded-md overflow-hidden""><!-- Before state --><video src={before_video_src} class=""w-full h-full object-cover""></video></div><div class=""w-1/2 bg-gray-200 h-48 rounded-md overflow-hidden""><!-- After state --><video src={after_video_src} class=""w-full h-full object-cover""></video></div></div><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">Watch Video</button></div>
VideoTransitionsList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Dividers/Section Separators,"description:
The UI should have a horizontal divider/section separator that visually separates content sections. The divider should be a thin, horizontal line that takes up the full width of its parent container. On smaller screens, the divider should be slightly thicker to ensure visibility.
components:
- SectionSeparator: a standalone component that renders a horizontal divider
html:
<div class=""container mx-auto p-4""><!-- content above the divider --><SectionSeparator/><!-- content below the divider --></div>
component html:
SectionSeparator:
<hr class=""border border-solid border-gray-300 w-full my-4 md:my-6""/>"
Download and Installation Tools,"description:
The UI should be a responsive, mobile-first design that displays a list of download and installation tools with their respective logos, names, and brief descriptions. The UI should be accessible, SEO-friendly, and well-documented.
components:
- DownloadToolCard: A standalone component that displays a single download and installation tool's information.
- ToolsList: A component that takes children and displays a list of `DownloadToolCard` components.
html:
<section class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Download and Installation Tools</h1><ToolsList><DownloadToolCard/><DownloadToolCard/><DownloadToolCard/><!-- Add more DownloadToolCard components as needed --></ToolsList></section>
component html:
DownloadToolCard:
<div class=""flex gap-4 mb-4 p-4 border border-gray-200 rounded""><img src=""{tool_logo_url}"" alt=""{tool_name} logo"" class=""w-12 h-12""><div class=""flex-1""><h2 class=""text-lg font-bold"">{tool_name}</h2><p class=""text-gray-600"">{tool_description}</p><a href=""{tool_download_url}"" class=""text-blue-600 hover:text-blue-800"">Download</a></div></div>
ToolsList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Product filtering and sorting controls,"description:
The UI should display a set of filtering and sorting controls for products, allowing users to narrow down their search results by category, price range, and rating. The controls should be responsive, accessible, and easy to use on various devices.
components:
- FilterCategorySelect: A standalone dropdown component for selecting a product category.
- PriceRangeSlider: A standalone component for selecting a price range.
- RatingFilterButtons: A standalone component for selecting a rating filter.
- SortBySelect: A standalone dropdown component for selecting a sorting option.
- FilterControls: A container component that takes children ( FilterCategorySelect, PriceRangeSlider, RatingFilterButtons, and SortBySelect ).
html:
<div class=""max-w-md mx-auto p-4""><FilterControls><FilterCategorySelect/><PriceRangeSlider/><RatingFilterButtons/><SortBySelect/></FilterControls></div>
component html:
FilterCategorySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">{category_placeholder}</option><!-- Option list will be populated dynamically --></select>
PriceRangeSlider:
<div class=""flex items-center mb-4""><span class=""mr-2"">Min: {min_price}</span><input type=""range"" min=""0"" max=""100"" value=""50"" class=""w-full""/><span class=""ml-2"">Max: {max_price}</span></div>
RatingFilterButtons:
<div class=""flex mb-4""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">4+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">3+</button><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">2+</button></div>
SortBySelect:
<select class=""bg-white border border-gray-300 rounded-full text-gray-600 py-2 px-4 w-full""><option value="""">Sort by</option><option value=""price_asc"">Price: Low to High</option><option value=""price_desc"">Price: High to Low</option><option value=""rating_desc"">Rating: High to Low</option></select>
FilterControls:
<div class=""flex flex-wrap justify-between mb-4"">{children}</div>"
360-degree image viewer,"description:
The UI should be a interactive 360-degree image viewer that allows users to rotate an image by dragging or clicking on the image. The image should be displayed in a responsive container that adapts to different screen sizes.
components:
- ImageCanvas: component (standalone): Displays the 360-degree image.
- DragIndicator: component (standalone): Displays a visual indicator to hint to the user that they can drag the image.
- NavigationButtons: component (standalone): Displays previous and next buttons to navigate through the 360-degree image.
html:
<div class=""container mx-auto p-4""><div class=""flex justify-center mb-4""><DragIndicator/></div><ImageCanvas/><NavigationButtons/></div>
component html:
ImageCanvas:
<div class=""relative overflow-hidden w-full h-full""><img src={imageName} class=""w-full h-full object-contain""/><div class=""absolute top-0 left-0 w-full h-full""><!-- image rotation logic will go here --></div></div>
DragIndicator:
<div class=""text-gray-500 text-sm"">Drag to rotate</div>
NavigationButtons:
<div class=""flex justify-center""><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded""><i class=""fas fa-chevron-left""></i></button><button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded""><i class=""fas fa-chevron-right""></i></button></div>"
Advertisement display,"description:
The UI should be a rectangular advertisement display with a background image, a headline, and a call-to-action (CTA) button. The CTA button should be prominent and centered at the bottom of the advertisement. The headline should be large and centered at the top of the advertisement.
components:
- AdDisplay: (standalone): The main advertisement display component.
- AdBackgroundImage: (standalone): The background image component within the AdDisplay.
- AdHeadline: (standalone): The headline component within the AdDisplay.
- AdCallToActionButton: (standalone): The call-to-action button component within the AdDisplay.
html:
<div class=""container mx-auto p-4""><AdDisplay/></div>
component html:
AdDisplay:
<div class=""bg-cover h-screen w-full flex flex-col items-center justify-center""><AdBackgroundImage/><AdHeadline/><AdCallToActionButton/></div>
AdBackgroundImage:
<div class=""absolute top-0 left-0 w-full h-screen bg-center bg-cover"" style=""`background-image: url({background_image_url});""}></div>
AdHeadline:
<h2 class=""text-3xl font-bold text-white"">{headline_text}</h2>
AdCallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_button_text}</button>"
"Circular button that performs a primary action, typically found in mobile interfaces","description:
The UI should be a circular button that performs a primary action, typically found in mobile interfaces. The button should be prominent, round, and have a clear call-to-action.
components:
- CircleButton: (standalone): A circular button that performs a primary action.
html:
<button class=""fixed bottom-0 right-0 mb-4 mr-4""><CircleButton/></button>
component html:
CircleButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{primary_action_text}</button>"
"A simple navigation bar with a logo, menu items, and a search icon","description:
The navigation bar should be a horizontal bar that spans the full width of the screen. It should have a logo on the left, a search icon on the right, and menu items in between. The logo should be prominent and have a subtle shadow effect. The menu items should be spaced evenly and have a subtle hover effect. The search icon should be a simple magnifying glass icon. The navigation bar should be responsive, and the logo and menu items should be centered on mobile devices.
components:
- NavBar: (Takes Children): The top-level navigation bar component that contains the logo, menu items, and search icon.
- Logo: (Standalone): The logo component that displays the application's logo.
- MenuItem: (Takes Children): A single menu item component that displays a link or a dropdown menu.
- SearchIcon: (Standalone): The search icon component that displays a magnifying glass icon.
html:
<NavBar><Logo/><MenuItem>Menu Item 1</MenuItem><MenuItem>Menu Item 2</MenuItem><MenuItem>Menu Item 3</MenuItem><SearchIcon/></NavBar>
component html:
NavBar:
<nav class=""flex justify-between items-center py-4 px-6 sm:px-12 lg:px-24"">{children}</nav>
Logo:
<img src=""{logo_url}"" alt=""Logo"" class=""h-8 w-8 sm:h-12 sm:w-12 lg:h-16 lg:w-16 shadow-md rounded-full""/>
MenuItem:
<a href=""{menu_item_url}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{children}</a>
SearchIcon:
<i class=""fas fa-search text-gray-600 hover:text-gray-900 transition duration-300""></i>"
Contact directory display,"description:
The UI should display a list of contacts, with each contact showing their name, email, and phone number. The list should be responsive and accessible, with a clear visual hierarchy.
components:
- ContactDirectory: A container component that takes children (a list of **ContactCard** components).
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Contact Directory</h1><ContactDirectory><!-- list of ContactCard components will be rendered here --></ContactDirectory></div>
component html:
ContactDirectory:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Animated icon indicating that content is loading or processing,"description:
A simple, animated icon indicating that content is loading or processing. The icon should be a spinning circle with a subtle animation effect.
components:
- LoadingIndicator: A standalone component representing the animated loading icon.
html:
<div class=""flex justify-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-blue-600""></div>"
Hero Background Color,"description:
The UI should have a hero section with a background color that takes up the full width of the screen.
components:
- HeroBackground: a standalone component that displays a background color.
html:
<section class=""h-screen w-full""><HeroBackground/></section>
component html:
HeroBackground:
<div class=""h-full w-full bg-{background_color}""></div>"
Company Address Map,"description:
The UI should display a company address along with a map to help users locate the company. The address should be clearly visible, and the map should be interactive, allowing users to zoom in and out.
components:
- CompanyAddress: (standalone): Displays the company address.
- Map: (standalone): Displays an interactive map.
- CompanyAddressMap: (takes children): A container component that holds the company address and map components.
html:
<div class=""mx-auto p-4 max-w-md""><CompanyAddressMap><CompanyAddress/><Map/></CompanyAddressMap></div>
component html:
CompanyAddress:
<div class=""mb-4""><h5 class=""text-lg font-bold"">{company_name}</h5><p>{street_address}</p><p>{city}, {state} {zip_code}</p><p>Phone: {phone_number}</p><p>Email: {email_address}</p></div>
Map:
<div class=""h-64 w-full rounded-md overflow-hidden""><!-- map will be rendered here --></div>
CompanyAddressMap:
<div class=""flex flex-col md:flex-row""><div class=""md:w-1/2 md:pr-4"">{children} </div><div class=""md:w-1/2 md:pl-4"">{children} </div></div>"
Dropdown Menu Item Text,"description:
The UI should be a dropdown menu item text which is a clickable text that displays a dropdown menu when clicked. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- DropdownMenuItemText: Standalone component that displays the text of the dropdown menu item.
html:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li class="" dropdown relative""><DropdownMenuItemText/></li></ul></nav>
component html:
DropdownMenuItemText:
<a href=""#"" class="" block w-full py-2 pl-8 pr-4 text-gray-700 hover:bg-gray-100"">{menu_item_text}</a>"
Timestamp display for post timing,"description:
The UI should display the timestamp of a post in a readable format, such as ""2 hours ago"" or ""Yesterday at 10:45 AM"".
components:
- PostTimestamp: A standalone component that displays the timestamp of a post.
html:
<div class=""flex items-center text-xs text-gray-500""><PostTimestamp/></div>
component html:
PostTimestamp:
<span class=""whitespace-nowrap"">{timestamp_text}</span>"
A call-out section highlighting a specific workout or recipe with a larger image and text,"description:
The call-out section should be a prominent and attention-grabbing element on the page, with a large image that showcases the specific workout or recipe being highlighted. The text should be clear and easy to read, with a clear hierarchy of information to guide the user's attention. The section should scale well on different screen sizes, with the image resizing to fit the available space.
components:
- HighlightCallout: (Takes Children): A container component for the call-out section, which includes a large image and text.
- HighlightImage: (Standalone): A component for displaying the large image.
- HighlightText: (Takes Children): A component for displaying the text accompanying the image.
html:
<div class=""max-w-md mx-auto py-12 px-4""><HighlightCallout><HighlightImage/><HighlightText>{/* text content */}
</HighlightText></HighlightCallout></div>
component html:
HighlightCallout:
<div class=""flex flex-col lg:flex-row items-center lg:items-start py-8"">{children}</div>
HighlightImage:
<img src={image_src} alt={image_alt} class=""w-full lg:w-1/2 mb-4 lg:mb-0""/>
HighlightText:
<div class=""lg:w-1/2 p-4""><h2 class=""text-2xl mb-2"">{title}</h2><p class=""text-lg"">{description}</p>{children}</div>"
Modals,"description:
- The UI will consist of a modal (popup dialog) that appears over the main content of the page. The modal will contain some text, a title, and two buttons: one to close the modal and another optional button that can perform another action (like ""Learn more"" or ""Confirm"").
   - The modal should have a background overlay to slightly obscure the main page content and bring focus to the modal dialog.
   - The modal should be centered on the screen and styled to be visually distinct from the rest of the page.
components:
- Overlay: Standalone component that renders a semi-transparent background overlay.
- Modal: Takes children. This component represents the modal dialog which contains the content and action buttons.
- ModalHeader: Standalone component for the heading section of the modal.
- ModalBody: Takes children. Used for the content area of the modal.
- ModalFooter: Takes children. Contains the action buttons of the modal.
- Button: Standalone component for the buttons.
html:
<div><Overlay/><Modal><ModalHeader/><ModalBody><p>{modalContent}</p></ModalBody><ModalFooter><Button/><Button/></ModalFooter></Modal></div>
component html:
Overlay:
<!-- This component creates a full-screen overlay --><div class=""fixed inset-0 bg-black bg-opacity-50 z-40""></div>
Modal:
<!-- This is the main container for the modal which includes the content placed within --><div class=""fixed inset-0 z-50 flex justify-center items-center p-4""><div class=""bg-white rounded-lg shadow-lg max-w-lg w-full p-6"">{children} </div></div>
ModalHeader:
<!-- Modal header contains the title --><div class=""border-b pb-4""><h2 class=""text-lg font-semibold"">{modalTitle}</h2></div>
ModalBody:
<!-- Modal body will house the main content --><div class=""py-4"">{children}</div>
ModalFooter:
<!-- Footer area for placing action buttons --><div class=""flex justify-end space-x-2 pt-4"">{children}</div>
Button:
<!-- Reusable button component --><button class=""px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"">{buttonText}</button>"
Category badges with a neon green background and white text,"description:
The UI should consist of a series of category badges that are easily readable and visually appealing. Each badge should have a neon green background and white text to make them stand out. The badges should be responsive and scale well on different screen sizes.
components:
- CategoryBadge: (Takes Children): A badge component that displays a category name with a neon green background and white text. On small screens (sm:), the badge should be about 1/2 of the screen width. On medium screens (md:), it should be about 1/3 of the screen width. On large screens (lg:), it should be about 1/4 of the screen width.
- BadgeList: (Takes Children): A list component that contains multiple `CategoryBadge` components. The list should be horizontal on large screens and vertical on smaller screens.
html:
<BadgeList><CategoryBadge>Category 1</CategoryBadge><CategoryBadge>Category 2</CategoryBadge><CategoryBadge>Category 3</CategoryBadge><!-- Add more badges here --></BadgeList>
component html:
CategoryBadge:
<span class=""bg-neonGreen text-white rounded px-2 py-1 text-sm"">{children}</span>
BadgeList:
<ul class=""flex flex-wrap md:flex-nowrap lg:flex-nowrap justify-center md:justify-start lg:justify-start gap-2"">{children}</ul>"
Condensed menu or navigation bar with minimal space between items,"description:
A condensed navigation bar with minimal space between items, responsive and mobile-first.
components:
- CondensedNavItem: ` ( standalone ): A single item in the navigation bar.
- CondensedNav: ` ( takes children ): The navigation bar that contains all the items.
html:
<nav class=""flex flex-wrap justify-center md:flex-nowrap""><CondensedNav><CondensedNavItem/><CondensedNavItem/><CondensedNavItem/><!-- Add more items here --></CondensedNav></nav>
component html:
CondensedNavItem:
<a href=""{item_url}"" class=""px-4 py-2 mx-1 text-sm hover:text-gray-600 transition duration-300 ease-in-out"">{item_name}</a>
CondensedNav:
<div class=""flex flex-wrap justify-center md:flex-nowrap"">{children}</div>"
Call-to-action button with a green background and white text,"description:
The UI should feature a prominent call-to-action (CTA) button that stands out from the rest of the UI. The button should have a bright green background and white text to draw the user's attention. The button should be large enough to be easily clickable on mobile devices and should scale down slightly on larger screen sizes.
components:
- CallToActionButton: (Takes Children): A button component that displays a call-to-action message. It should have a bright green background and white text. On smaller screens (sm:), the button should take up the full width of the screen. On larger screens (md:), the button should be slightly smaller and centered horizontally.
html:
<div class=""h-screen flex justify-center items-center""><CallToActionButton>Take Action Today!</CallToActionButton></div>
component html:
CallToActionButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full md:w-1/2 lg:w-1/3"">{children}</button>"
"A review component with a profile picture, rating, and text","description:
The review component should have a clean and modern design, with a prominent profile picture, a clear rating system, and a concise review text. The component should be responsive, with a card-like design that adapts to different screen sizes.
components:
- ProfilePicture: (Standalone): A circular profile picture with a subtle shadow effect. On mobile screens, the picture should be 40px in diameter, and on larger screens, it should be 60px.
- Rating: (Standalone): A rating system with 5 stars, with a gold color for filled stars and a gray color for empty stars. The rating system should be 20px in height on mobile screens and 30px on larger screens.
- ReviewText: (Takes Children): A text component that displays the review text. The text should be wrapped in a container with a subtle shadow effect, and the text should be limited to 2 lines on mobile screens and 3 lines on larger screens.
- ReviewComponent: (Takes Children): A container component that holds the profile picture, rating, and review text. The container should have a subtle shadow effect and a white background.
html:
<div class=""flex flex-wrap justify-center mb-4""><ReviewComponent><ProfilePicture/><Rating/><ReviewText>{review_text}</ReviewText></ReviewComponent></div>
component html:
ProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-10 h-10 rounded-full shadow-md""/>
Rating:
<div class=""flex"">{Array(5).fill(0).map((_, index) =>( <i key={index} class={`fas fa-star {index < rating ? 'text-yellow-400' : 'text-gray-300'}`}/>))}</div>
ReviewText:
<p class=""text-gray-600 text-sm"">{children}</p>
ReviewComponent:
<div class=""bg-white rounded shadow-md p-4"">{children}</div>"
A search bar component with a placeholder text and a magnifying glass icon,"description:
A simple search bar component with a placeholder text and a magnifying glass icon. The search bar should be responsive, with the input field and icon scaling up and down according to the screen size. The icon should be prominently displayed on the right side of the input field. The input field should have a subtle border and a smooth transition effect when focused.
components:
- SearchBar: (Takes Children): A container component that wraps the input field and icon.
- SearchInput: (Standalone): The input field component with a placeholder text.
- SearchIcon: (Standalone): The magnifying glass icon component.
html:
<div class=""flex justify-center""><SearchBar><SearchInput/><SearchIcon/></SearchBar></div>
component html:
SearchBar:
<div class=""flex items-center border rounded-md shadow-md p-2"">{children}</div>
SearchInput:
<input type=""search"" placeholder={placeholder_text} class=""w-full p-2 pl-4 border-none rounded-md focus:outline-none focus:shadow-md""/>
SearchIcon:
<svg><!-- magnifying glass --></svg>"
Hero Overlay Text,"description:
The Hero Overlay Text component should be a full-bleed hero section with a centered overlay text that can be used to highlight a key message or title.
components:
- HeroOverlay: (standalone): The container component for the hero section.
- OverlayText: (standalone): The centered overlay text component.
html:
<section class=""h-screen w-full relative""><HeroOverlay/><OverlayText/></section>
component html:
HeroOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style=""backgroundImage: url({heroBackgroundImage});""}><!-- Hero background image --></div>
OverlayText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-4xl lg:text-5xl xl:text-6xl font-bold tracking-wide text-center"">{heroOverlayText}</div>"
Transitions,"description:
The UI should feature a simple layout displaying a list of transition effects. Each transition effect should have a name and a brief description. Given that this is a UI design, transitions between elements when interacted with are implied. The design should maintain clarity and allow easy readability, ensuring that each transition effect is distinctly presented, perhaps with subtle hover effects to demonstrate the transition.
components:
- TransitionItem: Standalone component. Displays the name and description of a single transition effect.
- TransitionList: Component that takes children. This component acts as a container for multiple TransitionItem components.
html:
<div class=""p-4""><h1 class=""text-2xl font-bold text-center mb-4"">Available Transitions</h1><TransitionList><TransitionItem/><TransitionItem/><TransitionItem/><!-- Additional TransitionItem components could be added here --></TransitionList></div>
component html:
TransitionItem:
<div class=""rounded-lg p-2 hover:bg-gray-100 transition duration-300 ease-in-out""><h2 class=""font-semibold text-lg"">{transition_name}</h2><p class=""text-gray-600"">{transition_description}</p></div>
TransitionList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Nested Comment Threads,"description:
The UI should display a nested comment thread with multiple levels of nesting. Each comment should have a username, timestamp, and comment text. The comments should be displayed in a threaded layout, with replies indented underneath their parent comments. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- CommentThread: The top-level component that displays a nested comment thread. Takes children.
- Comment: Displays a single comment with a username, timestamp, and comment text. Takes children.
- CommentReply: Displays a reply to a comment, with a username, timestamp, and comment text. Takes children.
html:
<CommentThread><Comment><!-- comment content --><CommentReply><!-- reply content --><CommentReply><!-- nested reply content --></CommentReply></CommentReply></Comment><Comment><!-- comment content --></Comment></CommentThread>
component html:
CommentThread:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4"">{children}</div>
Comment:
<div class=""flex items-center mb-4""><img src={user_avatar} alt={username} class=""h-8 w-8 rounded-full mr-2""/><div><p class=""text-sm"">{username}</p><p class=""text-xs text-gray-600"">{timestamp}</p></div><p class=""text-sm"">{comment_text}</p><div class=""ml-10"">{children} </div></div>
CommentReply:
<div class=""ml-10 mb-4""><img src={user_avatar} alt={username} class=""h-8 w-8 rounded-full mr-2""/><div><p class=""text-sm"">{username}</p><p class=""text-xs text-gray-600"">{timestamp}</p></div><p class=""text-sm"">{comment_text}</p><div class=""ml-10"">{children} </div></div>"
Interactions,"description:
The UI should be a simple interaction card that displays the interaction type (e.g. ""Like"", ""Comment"", ""Share""), the user who performed the interaction, and a timestamp for when the interaction occurred.
components:
- InteractionCard: standalone component that displays a single interaction
- InteractionType: standalone component that displays the type of interaction (e.g. ""Like"", ""Comment"", ""Share"")
- UserProfile: standalone component that displays the user who performed the interaction
- Timestamp: standalone component that displays the timestamp of the interaction
html:
<div class=""max-w-md p-4 mx-auto mt-4 mb-8 bg-white rounded shadow-md""><InteractionCard/></div>
component html:
InteractionCard:
<div class=""flex items-center mb-2""><InteractionType/><UserProfile/><Timestamp/></div>
InteractionType:
<span class=""text-sm text-gray-600"">{interaction_type}</span>
UserProfile:
<span class=""text-sm text-gray-600"">{user_name}</span>
Timestamp:
<span class=""text-sm text-gray-400"">{timestamp}</span>"
Username display for other users,"description:
The UI should display a user's username, profile picture, and a badge indicating their online status.
components:
- UserProfileDisplay: standalone component that displays the user's profile picture and username.
- OnlineBadge: standalone component that displays the online status badge.
html:
<div class=""flex items-center""><UserProfileDisplay/><OnlineBadge/></div>
component html:
UserProfileDisplay:
<div class=""flex items-center""><img src={profile_picture_url} class=""w-8 h-8 rounded-full""/><p class=""ml-2"">{username}</p></div>
OnlineBadge:
<div class={`w-3 h-3 rounded-full {is_online ? 'bg-green-500' : 'bg-gray-500'}`}></div>"
Breadcrumbs component with a list of links to previous pages,"description:
The UI should have a horizontal list of links, with each link representing a previous page in the navigation path. The links should be displayed in a horizontal row, with a separator (e.g. `/`) between each link. The current page should be highlighted in some way, such as with a different color or font weight.
components:
- BreadcrumbItem: (Takes Children): A single link in the breadcrumb list. It should display the text of the link and a separator (e.g. `/`) after the link, unless it's the last item in the list.
- Breadcrumbs: (Takes Children): The top-level component that contains the list of breadcrumb items. It should have a maximum width and be centered horizontally on larger screens.
html:
<Breadcrumbs><BreadcrumbItem>{item1}</BreadcrumbItem><BreadcrumbItem>{item2}</BreadcrumbItem><BreadcrumbItem>{item3}</BreadcrumbItem><!-- Add more BreadcrumbItem components as needed --></Breadcrumbs>
component html:
BreadcrumbItem:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{href}"">{children} { separator && <span class=""mx-2"">/</span>}</a>
Breadcrumbs:
<div class=""max-w-lg mx-auto flex justify-center flex-wrap mb-4"">{children}</div>"
"Event teaser component that displays an event image, title, date, location, and category","description:
The Event Teaser component should be a compact, visually appealing representation of an event. It should display an image, title, date, location, and category in a clear and concise manner. The component should scale well on different screen sizes, with a focus on mobile devices. The design should incorporate highlights and shadows to add depth and dimension.
components:
- EventImage: (Standalone): A responsive image component that displays the event image.
- EventDetails: (Takes Children): A container component that wraps the event title, date, location, and category.
- EventTitle: (Standalone): A heading component that displays the event title.
- EventMeta: (Takes Children): A container component that wraps the event date, location, and category.
html:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><EventImage/><EventDetails><EventTitle/><EventMeta><div>{event_date}</div><div>{event_location}</div><div>{event_category}</div></EventMeta></EventDetails></div>
component html:
EventImage:
<img src={event_image_url} alt=""Event Image"" class=""w-full md:w-48 h-32 object-cover rounded-lg shadow-md""/>
EventDetails:
<div class=""flex-1 pl-4 md:pl-0 md:pr-4"">{children}</div>
EventTitle:
<h3 class=""text-lg font-bold"">{event_title}</h3>
EventMeta:
<div class=""flex flex-wrap justify-between"">{children}</div>"
Comments/Review Section,"description:
The UI should display a list of reviews with author names, review texts, and ratings. The design should be clean, minimal, and easy to read.
components:
- ReviewList: (takes children): Displays a list of reviews.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Reviews</h2><ReviewList><!-- review cards will be inserted here --></ReviewList></section>
component html:
ReviewList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Product Description Textarea,"description:
The UI should be a responsive, mobile-first, and accessible textarea component for entering product descriptions. It should have a clear and concise design, with a clear label and sufficient space for user input.
components:
- ProductDescriptionTextarea: A standalone component representing the textarea for entering product descriptions.
html:
<div class=""max-w-md mx-auto p-4""><label for=""product-description"" class=""block mb-2 text-lg"">Product Description</label><ProductDescriptionTextarea/></div>
component html:
ProductDescriptionTextarea:
<textarea id=""product-description"" class=""block w-full p-2 pl-10 text-lg text-gray-700 bg-gray-50 rounded"" placeholder=""Enter product description...""/>"
Product title and rating display,"description:
The UI should display a product title and its corresponding rating, with the title in a larger font size and the rating displayed as a fraction of 5.
components:
- ProductTitle: standalone component that displays the product title
- ProductRating: standalone component that displays the product rating
html:
<div class=""flex flex-wrap justify-center mb-4""><ProductTitle/><ProductRating/></div>
component html:
ProductTitle:
<h2 class=""text-3xl font-bold"">{productName}</h2>
ProductRating:
<p class=""text-lg"">{rating}/5</p>"
Product features,"description:
The UI should display a list of product features in a clean and responsive layout, with a clear hierarchy of information and sufficient whitespace. Each feature should have an icon, a heading, and a short description.
components:
- FeatureItem: A standalone component that represents a single feature.
- FeaturesList: A component that takes children and represents the list of features.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl mb-4"">Product Features</h2><FeaturesList><FeatureItem/><FeatureItem/><FeatureItem/></FeaturesList></div>
component html:
FeatureItem:
<div class=""flex items-center mb-4""><i class=""far fa-{feature_icon} text-2xl mr-2"" aria-hidden=""true""></i><div><h3 class=""text-lg"">{feature_heading}</h3><p class=""text-gray-600"">{feature_description}</p></div></div>
FeaturesList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Navigation menu with white text and neon hover effects,"description:
The navigation menu should be a horizontal bar that spans the full width of the screen. It should have a dark background color with white text, and each menu item should have a neon hover effect that changes the text color to a bright, high-contrast color. The menu should be responsive and adapt to different screen sizes.
components:
- NavigationMenu: (Takes Children): A horizontal navigation menu that spans the full width of the screen.
- NavigationMenuItem: (Takes Children): A single menu item within the navigation menu.
html:
<nav class=""w-full h-16 bg-gray-900 text-white""><NavigationMenu><NavigationMenuItem>Home</NavigationMenuItem><NavigationMenuItem>Features</NavigationMenuItem><NavigationMenuItem>Pricing</NavigationMenuItem><NavigationMenuItem>About</NavigationMenuItem></NavigationMenu></nav>
component html:
NavigationMenu:
<ul class=""flex justify-between w-full h-full"">{children}</ul>
NavigationMenuItem:
<li class=""px-4 py-2 hover:text-teal-400 transition duration-300 ease-in-out""><a href=""#"" class=""text-white"">{children}</a></li>"
Gradients,"description:
The UI should display a set of gradient cards, showcasing different colors and styles. Each card should have a unique gradient effect, with a subtle hover effect to give it a dynamic look. The cards should be arranged in a responsive grid, with 3 columns on larger screens and 1 column on smaller screens.
components:
- GradientCard: (standalone) - A single gradient card component.
- GradientCardContainer: (takes children) - A container component that wraps around the gradient cards and provides the responsive grid layout.
html:
<div class=""max-w-md mx-auto p-4""><GradientCardContainer><GradientCard/><GradientCard/><GradientCard/><!-- Add more GradientCard components here --></GradientCardContainer></div>
component html:
GradientCard:
<div class=""bg-gradient-to-r from-{color1} to-{color2} hover:bg-gradient-to-r hover:from-{hoverColor1} hover:to-{hoverColor2} p-4 rounded-md shadow-md""><h2 class=""text-lg font-bold"">{title}</h2><p>{description}</p></div>
GradientCardContainer:
<div class=""grid gap-4 grid-cols-1 md:grid-cols-3"">{children}</div>"
Map effects,"description:
The UI should feature an interactive map with various buttons or controls that allow users to apply different visual effects to the map. These effects could be things like color adjustments, brightness, or overlay filters. The UI will be simple, with a map display area and a tool section for the effect controls.
components:
- MapContainer: (Standalone): This component will hold the interactive map.
- EffectControls: (Standalone): This component will contain different buttons or sliders for applying effects to the map.
html:
<div class=""container mx-auto px-4""><!-- Map display area --><div class=""map-area mb-6""><MapContainer/></div><!-- Controls for applying effects --><div class=""effect-controls""><EffectControls/></div></div>
component html:
MapContainer:
<div class=""relative w-full h-64 sm:h-96""><!-- Placeholder for the map (should be replaced with actual map implementation) --><div class=""absolute inset-0 bg-gray-200 flex items-center justify-center""><span>{mapPlaceholder}</span></div></div>
EffectControls:
<div class=""flex flex-wrap justify-center space-x-4""><!-- Each button applies an effect to the map --><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Filter 1 </button><button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Filter 2 </button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Filter 3 </button></div>"
Related Posts: Suggestions for further reading,"description:
A section displaying a list of 3-5 related posts with their titles and a brief summary.
components:
- RelatedPostCard: (standalone): A single related post card displaying the post title and summary.
- RelatedPostsSection: (takes children): The container for the list of related posts.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Related Posts</h2><RelatedPostsSection><RelatedPostCard/><RelatedPostCard/><RelatedPostCard/></RelatedPostsSection></section>
component html:
RelatedPostCard:
<article class=""w-full md:w-1/2 xl:w-1/3 p-2""><h3 class=""text-lg font-bold mb-2"">{post_title}</h3><p class=""text-gray-600"">{post_summary}</p></article>
RelatedPostsSection:
<div class=""flex flex-wrap justify-center -mx-2"">{children}</div>"
Vision statement display,"description:
The UI should display a brief vision statement in a prominent and visually appealing way, ideally on a hero section of a website or landing page.
components:
- VisionStatement: standalone component that displays the vision statement text.
- HeroSection: component that takes children, and wraps the `VisionStatement` component, adding a hero section layout and styling.
html:
<section class=""h-screen bg-cover bg-center"" style=""background-image: url('{background_image_url}')""><HeroSection><VisionStatement/></HeroSection></section>
component html:
VisionStatement:
<h1 class=""text-3xl md:text-5xl lg:text-6xl font-bold"">{vision_statement_text}</h1><p class=""text-lg"">{vision_statement_subtext}</p>
HeroSection:
<div class=""container mx-auto p-4 pt-8 md:p-8 lg:p-12"">{children}</div>"
Account settings page,"description:
The UI should be a responsive, mobile-first settings page that displays the user's account information and allows them to update their settings. The page should have a simple and clean design, with clear headings and labels for each setting.
components:
- AccountHeader: a standalone component that displays the user's account information (e.g. name, email)
- SettingSection: a component that takes children, representing a group of related settings
- SettingItem: a component that takes children, representing a single setting (e.g. password, language)
- UpdateButton: a standalone component that triggers an update action
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><AccountHeader/><section class=""mb-8""><h2 class=""text-lg font-bold mb-4"">Account Settings</h2><SettingSection><SettingItem><label for=""username"">Username:</label><input type=""text"" id=""username"" value={username}/></SettingItem><SettingItem><label for=""email"">Email:</label><input type=""email"" id=""email"" value={email}/></SettingItem></SettingSection><SettingSection><SettingItem><label for=""password"">Password:</label><input type=""password"" id=""password"" value={password}/></SettingItem><SettingItem><label for=""language"">Language:</label><select id=""language""><option value=""en"">English</option><option value=""es"">Spanish</option><!-- more options --></select></SettingItem></SettingSection><UpdateButton/></section></div>
component html:
AccountHeader:
<header class=""flex justify-between mb-4""><h1>{username}</h1><p>{email}</p></header>
SettingSection:
<section class=""mb-4"">{children}</section>
SettingItem:
<div class=""mb-2"">{children}</div>
UpdateButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Update Settings</button>"
Page Content Paragraph,"description:
The UI should display a paragraph of text with a clear hierarchy, suitable for a content page.
components:
- Paragraph: A standalone component that displays a paragraph of text.
html:
<div class=""max-w-prose mx-auto p-4 lg:p-6""><Paragraph/></div>
component html:
Paragraph:
<p class=""text-lg leading-relaxed"">{paragraph_text}</p>"
API Explorer: Discover APIs and endpoints,"description:
The UI should display a sidebar with a list of APIs, and a main content area that shows the details of the selected API, including its endpoints.
components:
- ApiSidebar: a standalone component that displays a list of APIs
- ApiDetails: a component that takes children, displaying details about a selected API
- ApiEndpoint: a standalone component that displays a single API endpoint
html:
<div class=""flex h-screen""><ApiSidebar/><div class=""flex-1 p-4""><ApiDetails><h1>{api_name}</h1><p>{api_description}</p><ul><!-- list of endpoints --><ApiEndpoint/><ApiEndpoint/><!-- ... --></ul></ApiDetails></div></div>
component html:
ApiSidebar:
<nav class=""w-64 p-4 bg-gray-100""><h2>APIs</h2><ul><!-- list of APIs --><li><a href=""#"" class=""block p-2"">{api_name}</a></li><!-- ... --></ul></nav>
ApiDetails:
<div>{children}</div>
ApiEndpoint:
<li class=""p-2 border-b border-gray-200""><h3>{endpoint_method} {endpoint_path}</h3><p>{endpoint_description}</p></li>"
Traveler Reviews and Ratings,"description:
The UI should display a list of traveler reviews and ratings, with each review including a rating (e.g. 5/5), username, review text, and date. The UI should be responsive, with a card-based layout that adapts to different screen sizes.
components:
- TravelerReviewCard: a standalone component that displays a single traveler review
- TravelerReviewList: a component that takes children and displays a list of traveler reviews
html:
<div class=""container mx-auto p-4 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">Traveler Reviews and Ratings</h2><TravelerReviewList><TravelerReviewCard/><TravelerReviewCard/><!-- Add more reviews here --></TravelerReviewList></div>
component html:
TravelerReviewCard:
<div class=""bg-white rounded-lg p-4 mb-4 shadow-md""><div class=""flex justify-between mb-2""><h3 class=""text-lg font-bold"">{username}</h3><span class=""text-sm"">{rating}/5</span></div><p class=""text-gray-600"">{review_text}</p><p class=""text-sm text-gray-400"">{date}</p></div>
TravelerReviewList:
<ul class=""flex flex-wrap justify-center -mx-2"">{children}</ul>"
Textures,"description:
The UI should display a collection of texture images, each accompanied by a brief title and description. The layout will be a responsive grid that adjusts to the screen size, presenting textures in a visually appealing and accessible manner.
components:
- TextureCard: (Standalone): A card-like component that displays a texture image, its title, and a short description.
- TextureGrid: (Takes children): A grid container that organizes multiple TextureCard components in a responsive layout.
html:
<main><h1>Explore Textures</h1><TextureGrid><TextureCard/><TextureCard/><TextureCard/><!-- More TextureCard components could be added here --></TextureGrid></main>
component html:
TextureCard:
<article class=""p-4 bg-white shadow rounded-lg""><img src=""{texture_image_url}"" alt=""{texture_image_alt}"" class=""w-full h-48 object-cover rounded-t-lg""><div class=""py-2""><h2 class=""text-lg font-semibold"">{texture_title}</h2><p class=""text-sm text-gray-600"">{texture_description}</p></div></article>
TextureGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children} </div>"
"A celebrity profile component with a large profile picture (300x400px), bio, and filmography list","description:
The UI should have a clear hierarchy of information, with the profile picture as the main focal point. The bio and filmography list should be organized in a clear and concise manner, with ample whitespace to avoid clutter. The layout should be responsive, with the profile picture and bio adjusting to fit different screen sizes.
components:
- CelebrityProfile: (Takes Children): The top-level component that contains the profile picture, bio, and filmography list.
- ProfilePicture: (Standalone): A large image component that displays the celebrity's profile picture.
- Bio: (Takes Children): A component that displays the celebrity's bio, with optional formatting for paragraphs and links.
- Filmography: (Takes Children): A component that displays a list of the celebrity's filmography, with optional filtering and sorting.
html:
<CelebrityProfile><div class=""flex flex-wrap justify-center md:justify-start""><ProfilePicture/><div class=""md:ml-4""><Bio>{bio_text}</Bio><Filmography>{filmography_list}
</Filmography></div></div></CelebrityProfile>
component html:
CelebrityProfile:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 md:p-8"">{children}</div>
ProfilePicture:
<img src=""{profile_picture_url}"" alt=""Celebrity Profile Picture"" class=""w-full md:w-3/4 lg:w-1/2 xl:w-1/3 rounded-lg shadow-md""/>
Bio:
<div class=""mt-4 md:mt-6 text-lg leading-relaxed"">{children}</div>
Filmography:
<ul class=""list-none mb-4"">{children}</ul>"
Gradients (linear),"description:
The UI should display a container with a linear gradient background, with two colors transitioning from top to bottom.
components:
- GradientContainer: a standalone component that displays a linear gradient background.
html:
<div class=""h-screen w-full""><GradientContainer/></div>
component html:
GradientContainer:
<div class=""bg-gradient-to-b from-{top_color} to-{bottom_color} h-full w-full""></div>"
Footer Newsletter Success,"description:
The UI should be a success message for a newsletter subscription, displayed in the footer of a website. It should be responsive, mobile-friendly, and accessible.
components:
- FooterNewsletterSuccess: standalone component
html:
<footer><FooterNewsletterSuccess/></footer>
component html:
FooterNewsletterSuccess:
<div class=""flex flex-wrap justify-center p-4 mb-4 bg-green-100 rounded""><h5 class=""text-xl text-green-600"">{success_message}</h5><p class=""text-sm text-gray-600"">{thank_you_message}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{unsubscribe_text} </button></div>"
Simple list component with pet names and avatars,"description:
The UI should be a simple list component that displays a list of pet names and avatars. The list should be responsive, accessible, and visually appealing. The pet names should be displayed in a clear and readable font, and the avatars should be circular and displayed to the left of the pet names. The list should be scalable on different screen sizes, with a maximum of 2 columns on large screens and 1 column on smaller screens.
components:
- PetListItem: (Takes Children): A list item that displays a pet name and avatar.
- PetList: (Takes Children): A container component that wraps the list of pet list items.
html:
<PetList><PetListItem><!-- list item content --></PetListItem><PetListItem><!-- list item content --></PetListItem><!-- more list items --></PetList>
component html:
PetListItem:
<li class=""flex items-center mb-4""><img src=""{avatarUrl}"" alt=""{petName}"" class=""w-12 h-12 rounded-full mr-4""/><span class=""text-lg"">{petName}</span>{children}</li>
PetList:
<ul class=""flex flex-wrap justify-center lg:flex-no-wrap"">{children}</ul>"
A star rating component with 5 stars that can be filled in with a gold color,"description:
The UI should be a horizontal row of 5 stars, with the ability to fill in a certain number of stars with a gold color to represent the rating. The stars should be large enough to be easily clickable on mobile devices, and should scale down on smaller screens. The gold color should be a bright, vibrant yellow-orange (#F7DC6F) to make the rating stand out.
components:
- StarRating: (Takes Children): This component represents the entire rating system, and contains 5 Star components.
- Star: (Standalone): This component represents a single star, which can be either filled or unfilled.
html:
<StarRating><Star/><Star/><Star/><Star/><Star/></StarRating>
component html:
StarRating:
<div class=""flex flex-wrap justify-center mb-2"">{children}</div>
Star:
<svg><!-- star --></svg>"
Product description and details section,"description:
The UI should display a product description and details section. It should be a responsive, mobile-friendly, and accessible component that displays product information in a clear and organized manner.
components:
- ProductDescription: Standalone component that displays a brief summary of the product.
- ProductDetails: Standalone component that displays detailed information about the product, such as features, specifications, and reviews.
- ProductInfoSection: Takes children. A container component that wraps around the product description and details components.
html:
<section class=""mx-auto p-4 md:p-8""><ProductInfoSection><ProductDescription/><ProductDetails/></ProductInfoSection></section>
component html:
ProductDescription:
<p class=""text-lg md:text-xl"">{product_summary}</p>
ProductDetails:
<ul class=""list-none mb-4""><li class=""mb-2""><strong>Features:</strong>{features}</li><li class=""mb-2""><strong>Specifications:</strong>{specifications}</li><li class=""mb-2""><strong>Reviews:</strong>{reviews}</li></ul>
ProductInfoSection:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Arrangement of content in a series of rows and columns for easy scanning,"description:
The UI should display a series of rows and columns that allow for easy scanning of content. The layout should be responsive, with columns stacking on top of each other on smaller screens.
components:
- GridItem: A standalone component representing an individual item in the grid.
- GridContainer: A component that takes children and wraps them in a container with a grid layout.
html:
<GridContainer><GridItem/><GridItem/><GridItem/><!-- Add more GridItem components as needed --></GridContainer>
component html:
GridItem:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">{title}</h2><p class=""text-gray-600"">{description}</p><!-- Add more content as needed --></div>
GridContainer:
<div class=""container mx-auto p-4 lg:p-6""><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children} </div></div>"
"A component that displays a grid of sports news articles with images, headlines, and short summaries","description:
The UI should display a grid of sports news articles with images, headlines, and short summaries in a responsive and accessible manner. On larger screens, the grid should have multiple columns, while on smaller screens, it should adapt to a single column layout. The layout should scale to fit different screen sizes, with a consistent color palette and highlight colors to make different parts of the UI stand out. Shadows and gradients can be used to add depth and dimension to the UI.
components:
- SportsNewsGrid: (Takes Children): A grid component that displays a collection of sports news articles.
- SportsNewsArticle: (Standalone): A single sports news article component that displays an image, headline, and short summary.
html:
<section class=""container mx-auto p-4 md:p-6 lg:p-8""><SportsNewsGrid><!-- Articles will be rendered here --></SportsNewsGrid></section>
component html:
SportsNewsGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children}</div>
SportsNewsArticle:
<div class=""bg-white shadow-md rounded-lg p-4 mb-4 md:mb-6 lg:mb-8""><img src=""{article_image_url}"" alt=""{article_headline}"" class=""w-full h-48 object-cover rounded-t-lg""/><h2 class=""font-bold text-lg mb-2"">{article_headline}</h2><p class=""text-gray-600"">{article_summary}</p></div>"
Train ticket booking form,"description:
The UI should be a responsive form with the following elements: 
- A header with a title and a brief description
- A section for selecting the journey date and time
- A section for selecting the origin and destination stations
- A section for selecting the number of passengers and class of travel
- A section for passenger details
- A call-to-action button to submit the form
The form should be mobile-first, accessible, and SEO-friendly.
components:
- HeaderSection: Standalone component
- JourneyDetails: Standalone component
- StationSelect: Standalone component
- PassengerDetails: Standalone component
- SubmitButton: Standalone component
- FormSection: Takes children
html:
<div class=""max-w-md mx-auto p-4 pt-6""><HeaderSection/><FormSection><JourneyDetails/><StationSelect/><PassengerDetails/></FormSection><SubmitButton/></div>
component html:
HeaderSection:
<div class=""flex mb-4""><h1 class=""text-2xl font-bold"">{header_title}</h1><p class=""text-sm"">{header_description}</p></div>
JourneyDetails:
<fieldset class=""mb-4""><legend class=""text-lg"">Journey Details</legend><label for=""journey_date"" class=""block mb-2"">Journey Date:</label><input type=""date"" id=""journey_date"" class=""w-full p-2 pl-10 text-sm""/><label for=""journey_time"" class=""block mb-2"">Journey Time:</label><input type=""time"" id=""journey_time"" class=""w-full p-2 pl-10 text-sm""/></fieldset>
StationSelect:
<fieldset class=""mb-4""><legend class=""text-lg"">Station Select</legend><label for=""origin_station"" class=""block mb-2"">Origin Station:</label><select id=""origin_station"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Station</option>{origin_station_options} </select><label for=""destination_station"" class=""block mb-2"">Destination Station:</label><select id=""destination_station"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Station</option>{destination_station_options} </select></fieldset>
PassengerDetails:
<fieldset class=""mb-4""><legend class=""text-lg"">Passenger Details</legend><label for=""num_passengers"" class=""block mb-2"">Number of Passengers:</label><select id=""num_passengers"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Number</option>{num_passenger_options} </select><label for=""class_of_travel"" class=""block mb-2"">Class of Travel:</label><select id=""class_of_travel"" class=""w-full p-2 pl-10 text-sm""><option value="""">Select Class</option>{class_of_travel_options} </select></fieldset>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book Now</button>
FormSection:
<section class=""mb-4"">{children}</section>"
"A navigation menu component with a dark background, white text, and a subtle hover effect","description:
The navigation menu component should have a dark background, white text, and a subtle hover effect. The component should be responsive and accessible on different screen sizes. On smaller screens, the menu items should be stacked vertically, while on larger screens, they should be displayed horizontally. The hover effect should be a subtle gradient that adds depth to the menu item.
components:
- NavigationBar: (Takes Children): A container component that wraps around the navigation menu items. It should have a dark background and a subtle shadow to add depth.
- NavigationItem: (Takes Children): A component that represents a single menu item. It should have white text and a subtle hover effect.
html:
<NavigationBar><NavigationItem>Menu Item 1</NavigationItem><NavigationItem>Menu Item 2</NavigationItem><NavigationItem>Menu Item 3</NavigationItem></NavigationBar>
component html:
NavigationBar:
<nav class=""bg-dark-500 shadow-md rounded-lg p-4 md:flex justify-between items-center"">{children}</nav>
NavigationItem:
<a class=""text-white hover:bg-gray-700 hover:shadow-md transition duration-300 ease-in-out py-2 px-4 rounded-lg"" href=""{item_url}"">{children}</a>"
A dark-mode toggle button with a moon icon and a white circle around it,"description:
The UI should be a small, circular toggle button that switches between light and dark modes. In the dark mode, the background of the button should be dark, and the icon should be a white moon. In the light mode, the background of the button should be light, and the icon should be a dark-colored moon. The button should be easily clickable on different screen sizes, including mobile devices.
components:
- DarkModeToggle: (Standalone): A toggle button that switches between light and dark modes.
html:
<div class=""flex justify-center mb-4""><DarkModeToggle/></div>
component html:
DarkModeToggle:
<button class=""w-10 h-10 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2"" :class=""{ 'bg-dark-mode-toggle darken-500': {is_dark_mode}, 'bg-light-mode-toggle lighten-500': !{is_dark_mode} }""><svg><!-- moon --></svg></button>"
"A title component with a large, bold font size and a white background.","description:
The UI should have a clean and simple design, with a prominent title component that grabs the user's attention. The title component should have a large, bold font size and a white background, making it stand out from the rest of the UI.
components:
- WithTitle: (Takes Children): A component that wraps its children in a container with a white background and a large, bold font size. On small screens, the font size should be 24px, on medium screens 36px, and on large screens 48px.
html:
<div class=""min-h-screen flex justify-center""><WithTitle><!-- title content will go here --></WithTitle></div>
component html:
WithTitle:
<div class=""bg-white p-4 md:p-8 lg:p-12 text-3xl md:text-4xl lg:text-5xl font-bold"">{children}</div>"
A profile picture component that is a circular avatar with a white border,"description:
The Profile Picture component should display a circular avatar with a white border. The avatar should be centered and take up a significant portion of the container. The white border should be thick enough to provide good contrast with the background.
components:
- ProfilePicture: (Standalone): A circular avatar with a white border.
html:
<div class=""flex justify-center mb-4""><ProfilePicture/></div>
component html:
ProfilePicture:
<img src={imageSrc} alt=""Profile Picture"" class=""rounded-full border-4 border-white w-24 h-24 object-cover""/>"
Pagination/Infinite Scroll,"description:
- The UI should feature a list of items displayed in a grid or list format. Below the list, there should be a pagination control consisting of previous, next, and numbered page buttons to navigate through pages. Alternatively, an infinite scroll mechanism can load more items automatically as the user scrolls down.
components:
- ListDisplay: (Standalone): A component that displays items in a list format.
- PaginationControl: (Standalone): A component containing navigation buttons for paging through items.
html:
<div class=""container max-w-6xl mx-auto px-4""><!-- Grid or List Display for showing items --><ListDisplay/><!-- Pagination Controls --><PaginationControl/></div>
component html:
ListDisplay:
<ul class=""space-y-4""><li class=""p-4 border rounded-lg"">{itemContent}</li><!-- More list items as needed --></ul>
PaginationControl:
<div class=""flex justify-center space-x-2 mt-4""><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">Previous</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">1</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">2</button><button class=""px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"">Next</button></div>"
Navigation trail displaying the user's current location within the website's hierarchy,"description:
A horizontal navigation trail showing the user's current location within the website's hierarchy, with each crumb separated by a slash (/) or a greater-than symbol (>), and the current page highlighted.
components:
- BreadcrumbsTrail: A component taking children, representing the navigation trail itself.
html:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex flex-wrap mb-4""><BreadcrumbsTrail><!-- breadcrumbs will be inserted here --></BreadcrumbsTrail></ol></nav>
component html:
BreadcrumbsTrail:
<ol class=""flex flex-wrap mb-4"">{children}</ol>"
"Icon for event categories (e.g. music, food, sports) with a white fill color","description:
The UI should display an icon representing an event category (e.g., music, food, sports) with a white fill color. The icon should be easily recognizable and scalable on different screen sizes. The white fill color should be prominent and attention-grabbing.
components:
- EventCategoryIcon: (Standalone): This component displays an icon representing an event category (e.g., music, food, sports) with a white fill color. The icon should be easily recognizable and scalable on different screen sizes.
html:
<div class=""flex justify-center mb-4""><EventCategoryIcon/></div>
component html:
EventCategoryIcon:
<svg><!-- {category_icon} --></svg>"
Audio thumbnails,"description:
The UI should consist of a grid of square thumbnails, each representing an audio file. Each thumbnail should display a playable audio icon, the title of the audio file, and the duration of the audio file.
components:
- AudioThumbnail: (standalone): A single audio thumbnail component.
- AudioThumbnailGrid: (takes children): A grid container for multiple `AudioThumbnail` components.
html:
<AudioThumbnailGrid><AudioThumbnail/><AudioThumbnail/><!-- more AudioThumbnail components --></AudioThumbnailGrid>
component html:
AudioThumbnail:
<div class=""w-24 h-24 bg-gray-200 rounded flex justify-center items-center""><i class=""fas fa-play text-lg text-gray-500""></i><div class=""absolute bottom-0 left-0 p-1 text-xs text-gray-600"">{audio_title}</div><div class=""absolute bottom-0 right-0 p-1 text-xs text-gray-600"">{audio_duration}</div></div>
AudioThumbnailGrid:
<div class=""grid grid-cols-2 gap-4 justify-items-center"">{children}</div>"
"A featured pet-sitter section with rounded profile pictures, names, ratings, and brief descriptions","description:
The UI should display a section featuring pet-sitters with their profiles, ratings, and brief descriptions. The section should have a clean and modern design, with rounded profile pictures, names, ratings, and brief descriptions. The layout should be responsive and accessible on different screen sizes.
components:
- FeaturedPetSitterCard: (Takes Children): Displays a single pet-sitter's profile, including their picture, name, rating, and brief description.
- PetSitterProfilePicture: (Standalone): A rounded profile picture of the pet-sitter.
- PetSitterRating: (Standalone): Displays the pet-sitter's rating as a numbered score.
- PetSitterDescription: (Standalone): A brief description of the pet-sitter's services.
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-2xl md:text-3xl lg:text-4xl mb-4"">Featured Pet-Sitters</h2><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><FeaturedPetSitterCard><!-- child components go here --></FeaturedPetSitterCard><FeaturedPetSitterCard><!-- child components go here --></FeaturedPetSitterCard><!-- add more cards here --></div></section>
component html:
FeaturedPetSitterCard:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><PetSitterProfilePicture/><h3 class=""text-lg md:text-xl lg:text-2xl font-bold"">{petSitterName}</h3><PetSitterRating/><PetSitterDescription/>{children}</div>
PetSitterProfilePicture:
<img class=""w-20 h-20 rounded-full object-cover"" src=""{profilePictureUrl}"" alt=""{petSitterName}'s profile picture""/>
PetSitterRating:
<p class=""text-sm md:text-base lg:text-lg"">{rating}/ 5</p>
PetSitterDescription:
<p class=""text-sm md:text-base lg:text-lg"">{briefDescription}</p>"
Callout Box Title,"description:
The UI should be a callout box with a title that grabs the user's attention. It should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- CalloutBoxTitle: A standalone component that displays a title.
html:
<div class=""max-w-md mx-auto p-4 bg-yellow-100 rounded""><CalloutBoxTitle/><!-- Callout box content goes here --></div>
component html:
CalloutBoxTitle:
<h2 class=""text-lg font-bold"">{callout_box_title}</h2>"
Related Project Suggestions,"description:
The UI should be a list of suggested projects, each with a title, description, and a ""View Project"" button. The list should be displayed in a grid format, with 2-3 columns on larger screens and 1 column on smaller screens.
components:
- ProjectSuggestionCard: a standalone component that displays a single project suggestion.
- ProjectSuggestionsList: a component that takes children, displaying a list of `ProjectSuggestionCard`s.
html:
<div class=""max-w-md mx-auto pt-4""><h2 class=""text-lg font-bold mb-4"">Related Projects</h2><ProjectSuggestionsList><ProjectSuggestionCard/><ProjectSuggestionCard/><ProjectSuggestionCard/></ProjectSuggestionsList></div>
component html:
ProjectSuggestionCard:
<div class=""bg-white p-4 rounded shadow-md""><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-gray-600"">{project_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View Project</button></div>
ProjectSuggestionsList:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Social Sharing Buttons,"description:
The UI should display a horizontal row of social media buttons, with each button representing a different social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be responsive, mobile-friendly, and accessible.
components:
- SocialMediaButton: (standalone): a single social media button
- SocialSharingButtons: (takes children): a container for multiple social media buttons
html:
<div class=""flex justify-center mb-4""><SocialSharingButtons><SocialMediaButton/><SocialMediaButton/><SocialMediaButton/><!-- Add more SocialMediaButton components here --></SocialSharingButtons></div>
component html:
SocialMediaButton:
<a href={social_media_url} target=""_blank"" rel=""noopener noreferrer"" class=""w-8 h-8 rounded-full bg-{social_media_color} mr-2 hover:bg-{social_media_hover_color}""><i class={`fa fa-{social_media_icon} text-lg text-white`}></i></a>
SocialSharingButtons:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Product support,"description:
The UI for product support should feature a clean, user-friendly layout with clear sections including a frequently asked questions (FAQ) list, a contact form for direct inquiries, and a backlink to the main product page for users who may need additional information or resources. It should be easy to navigate and aesthetically pleasing with a structured layout ensuring a good mobile and desktop experience.
components:
- FAQSection: (Standalone)**: A component that lists frequently asked questions and their answers.
- ContactForm: (Standalone)**: A form where users can submit their queries or issues directly.
- BackToProductLink: (Standalone)**: A hyperlink that takes users back to the main product page.
html:
<div class=""container mx-auto px-4""><h1 class=""text-xl font-bold text-center my-5"">Product Support</h1><FAQSection/><ContactForm/><BackToProductLink/></div>
component html:
FAQSection:
<section class=""my-8""><h2 class=""text-lg font-semibold mb-4"">Frequently Asked Questions</h2><div class=""space-y-4""><div><h3 class=""font-medium"">How do I install the product?</h3><p>Follow the step-by-step guide available in the installation section of our website or refer to the included installation manual.</p></div><div><h3 class=""font-medium"">Who do I contact for technical support?</h3><p>You can fill out our contact form below or reach us directly via the contact details provided on our Contact Us page.</p></div></div></section>
ContactForm:
<section class=""my-8""><h2 class=""text-lg font-semibold mb-4"">Get in Touch</h2><form action=""{formSubmissionUrl}"" method=""POST"" class=""space-y-4""><input type=""text"" placeholder=""Your Name"" name=""name"" class=""px-4 py-2 border rounded-md w-full"" required><input type=""email"" placeholder=""Your Email"" name=""email"" class=""px-4 py-2 border rounded-md w-full"" required><textarea rows=""4"" placeholder=""Your Message"" name=""message"" class=""px-4 py-2 border rounded-md w-full"" required></textarea><button type=""submit"" class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form></section>
BackToProductLink:
<div class=""text-center my-8""><a href=""{productPageUrl}"" class=""text-blue-500 hover:underline"">Back to product page</a></div>"
Shadows (drop),"description:
The UI should display a dropdown menu with a shadow effect when the dropdown is opened. The dropdown should be responsive and accessible.
components:
- DropdownButton: standalone component that triggers the dropdown menu.
- DropdownMenu: takes children, contains the dropdown menu items.
html:
<div class=""relative""><DropdownButton/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
component html:
DropdownButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded"">{button_text}</button>
DropdownMenu:
<div class=""absolute z-10 bg-white shadow-md rounded px-4 py-2"">{children}</div>"
Language translation tool,"description:
A simple and intuitive language translation tool with a source language input, a target language dropdown, and a translate button. The translated text is displayed below the input fields.
components:
- LanguageInput: standalone, input field for source language text
- LanguageSelector: standalone, dropdown for selecting target language
- TranslateButton: standalone, button to initiate translation
- TranslatedText: standalone, displays the translated text
- TranslationTool: takes children, container for the entire translation tool
html:
<div class=""max-w-md mx-auto p-4 pt-6 pb-8 mb-4 bg-white rounded shadow-md""><TranslationTool><LanguageInput/><LanguageSelector/><TranslateButton/><TranslatedText/></TranslationTool></div>
component html:
LanguageInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter text to translate""/>
LanguageSelector:
<select class=""w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select language</option><!-- options will be populated dynamically --><option value=""{language_code}"">{language_name}</option></select>
TranslateButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Translate</button>
TranslatedText:
<p class=""text-gray-600"">{translated_text}</p>
TranslationTool:
<div class=""flex flex-col space-y-4"">{children}</div>"
Location map display,"description:
The UI should display a location map with a marker indicating a specific location. The map should be responsive and adapt to different screen sizes. It should also be accessible and SEO-friendly.
components:
- LocationMap: (standalone): The container element for the map.
- MapMarker: (standalone): The marker indicating a specific location.
- MapContainer: (takes children): The container element that wraps the map and marker.
html:
<div class=""flex justify-center""><MapContainer><LocationMap/><MapMarker/></MapContainer></div>
component html:
LocationMap:
<div class=""h-screen w-full overflow-hidden""><div id=""map"" class=""h-full w-full""></div></div>
MapMarker:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2""><div class=""bg-red-500 rounded-full w-6 h-6""></div></div>
MapContainer:
<div class=""relative"">{children}</div>"
Modal dialog prompting users to confirm an action before proceeding,"description:
- The UI should feature a modal dialog that appears centered on the screen with a dimmed background to focus attention on the dialog.
   - The modal will contain:
     - A title indicating the action to confirm.
     - A descriptive message explaining what the action entails or the consequences of proceeding.
     - Two buttons: one to confirm the action (""Confirm"") and another to cancel or close the dialog (""Cancel"").
components:
- ModalOverlay: (Standalone):** A full-screen semi-transparent overlay that dims the background content.
- ModalDialog: (Contains children):** A center-aligned container for modal content including text and buttons.
- ConfirmButton: (Standalone):** A button styled prominently to encourage confirmation.
- CancelButton: (Standalone):** A less prominent button intended for closing the dialog or cancelling the action.
html:
<div><ModalOverlay/><ModalDialog><h2>{modalTitle}</h2><p>{modalDescription}</p><div class=""flex justify-end space-x-4 mt-4""><CancelButton/><ConfirmButton/></div></ModalDialog></div>
component html:
ModalOverlay:
<div class=""fixed inset-0 bg-black bg-opacity-50""></div>
ModalDialog:
<div class=""fixed inset-0 flex items-center justify-center p-4""><div class=""bg-white rounded-lg shadow-lg max-w-sm mx-auto p-6 space-y-4"">{children} </div></div>
ConfirmButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Confirm</button>
CancelButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-black py-2 px-4 rounded"">Cancel</button>"
Call-to-Action (CTA) Button: Encourage visitors to take action,"description:
A prominent, responsive, and accessible call-to-action (CTA) button that encourages visitors to take action.
components:
- CallToActionButton: Standalone component that renders a CTA button.
html:
<main class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- Hero section with CTA button --><section class=""md:flex justify-center""><!-- CTA button --><CallToActionButton/></section></main>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Time Pickers/Clock Icons,"description:
The UI should display a clock icon with a dropdown list of time options. When a time option is selected, the clock icon should display the selected time.
components:
- ClockIcon: A standalone component that displays a clock icon.
- TimeOption: A component that takes children (the time option text) and is used to render each time option in the dropdown list.
html:
<div class=""flex items-center""><ClockIcon/><select class=""ml-2""><TimeOption>12:00 AM</TimeOption><TimeOption>12:30 AM</TimeOption><!-- more time options here --></select></div>
component html:
ClockIcon:
<i class=""fas fa-clock text-gray-500 text-lg"" aria-hidden=""true""></i>
TimeOption:
<option>{children}</option>"
"A pagination component with small, circular page number indicators and a grey border (#CCCCCC)","description:
The pagination component should have a clean and simple design that is easy to use. It should be responsive and adapt to different screen sizes. The component should have small, circular page number indicators with a grey border (#CCCCCC). The indicators should be spaced evenly apart and have a subtle shadow to give them depth. The current page indicator should be highlighted with a bright color to draw attention to it.
components:
- Pagination: (Takes Children): A container component for the pagination indicators.
- PaginationIndicator: (Standalone): A small, circular indicator that represents a page.
- PaginationCurrentIndicator: (Standalone): A small, circular indicator that represents the current page.
html:
<div class=""flex justify-center mb-4""><Pagination>{children}
</Pagination></div>
component html:
Pagination:
<nav class=""flex justify-center mb-4""><ul class=""flex flex-wrap justify-center"">{children}</ul></nav>
PaginationIndicator:
<li class=""mx-2""><button class=""w-6 h-6 rounded-full border border-gray-400 hover:bg-gray-200 transition ease-in-out duration-200"" type=""button"">{pageNumber} </button></li>
PaginationCurrentIndicator:
<li class=""mx-2""><button class=""w-6 h-6 rounded-full border border-gray-400 bg-teal-500 hover:bg-teal-700 transition ease-in-out duration-200"" type=""button"">{pageNumber} </button></li>"
Tag cloud component with a list of popular tags,"description:
The Tag Cloud component should display a collection of popular tags in a visually appealing and organized manner. The tags should be displayed in a flexible grid that adjusts to different screen sizes, with larger tags representing more popular tags. The component should have a clean and modern design, with a consistent color palette and typography throughout. The tags should be easy to read and understand, with sufficient whitespace to prevent clutter.
components:
- TagCloud: (Takes Children): The top-level component that contains the list of tags.
- TagItem: (Standalone): A single tag item that displays the tag name and popularity indicator.
html:
<div class=""max-w-lg mx-auto p-4 md:p-6 lg:p-8""><TagCloud><!-- Tag items will be rendered here --></TagCloud></div>
component html:
TagCloud:
<div class=""flex flex-wrap justify-center mb-4 md:mb-6 lg:mb-8"">{children}</div>
TagItem:
<a href=""#"" class=""text-sm md:text-base lg:text-lg font-bold text-purple-600 hover:text-purple-800 transition duration-300 ease-in-out""><span class=""mr-2"">{tagName}</span><span class=""text-gray-500"">{popularityIndicator}</span></a>"
Company Email Address,"description:
The UI should display a company email address in a clean and readable format. The email address should be clickable, allowing users to send an email to the company. The component should be responsive, adapting to different screen sizes and devices.
components:
- EmailAddress: (standalone)
html:
<div class=""max-w-md mx-auto p-4""><p class=""text-lg font-bold"">Get in touch with us:</p><EmailAddress/></div>
component html:
EmailAddress:
<a href=""mailto: {company_email_address}"" class=""text-blue-600 hover:text-blue-900"">{company_email_address}</a>"
Create a call-to-action button with a white outline and dark background,"description:
The UI should be a prominent call-to-action button that stands out on the page. It should have a dark background and a white outline to make it easily visible. The button should be responsive and scale nicely on different screen sizes.
components:
- CallToActionButton: (Standalone): This component is a standalone button that contains a call-to-action text.
html:
<CallToActionButton/>
component html:
CallToActionButton:
<button class=""lg:w-full md:w-1/2 sm:w-full bg-dark-900 rounded-lg py-4 px-6 text-lg text-white border-2 border-white hover:border-white hover:bg-dark-800 focus:outline-none focus:shadow-outline"">{call_to_action_text}</button>"
Dark mode toggle,"description:
The UI should be a toggle button that allows users to switch between light and dark modes. The button should be responsive, accessible, and have a clear visual indicator of its state (i.e., whether dark mode is on or off).
components:
- DarkModeToggle: A standalone component that renders a toggle button to switch between light and dark modes.
html:
<button class=""flex justify-center w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600 transition duration-300 ease-in-out""><DarkModeToggle/></button>
component html:
DarkModeToggle:
<div class=""flex items-center justify-center w-full h-full""><span class=""text-lg"">{darkMode ? ""🌃"" : ""☀️""} </span><input type=""checkbox"" id=""dark-mode-toggle"" class=""hidden""/><label htmlFor=""dark-mode-toggle"" class=""w-full h-full text-lg""><span class=""sr-only"">{darkMode ? ""Turn off dark mode"" : ""Turn on dark mode""}</span></label></div>"
Dropdown Menu Item Icon Color,"description:
The UI should be a dropdown menu item with an icon, where the icon's color can be customized.
components:
- DropdownMenuItemIcon: A standalone component that displays an icon with a customizable color.
- DropdownMenuItem: A component that takes children, wraps the `DropdownMenuItemIcon` component, and displays a dropdown menu item with text.
html:
<nav class=""flex justify-center""><ul class=""flex flex-col""><li><DropdownMenuItem><DropdownMenuItemIcon/><span>Menu Item 1</span></DropdownMenuItem></li></ul></nav>
component html:
DropdownMenuItemIcon:
<i class=""w-4 h-4 {icon_color}"" aria-hidden=""true"">{icon_name}</i>
DropdownMenuItem:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
Testimonial Quote Style,"description:
The UI should display a quote from a customer or user, along with their name and title. The quote should be displayed prominently, with the name and title in smaller text below.
components:
- TestimonialQuote: Standalone component that displays a quote.
- TestimonialAuthor: Standalone component that displays the author's name and title.
- Testimonial: Parent component that contains the quote and author information. Takes children.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 bg-white rounded shadow-md""><Testimonial><TestimonialQuote/><TestimonialAuthor/></Testimonial></div>
component html:
TestimonialQuote:
<blockquote class=""text-lg italic"">{quote_text}</blockquote>
TestimonialAuthor:
<p class=""text-base"">{author_name}, <span class=""text-sm"">{author_title}</span></p>
Testimonial:
<div class=""flex flex-col"">{children}</div>"
Header Navigation Toggle,"description:
The UI should be a responsive header navigation toggle, which is a common design pattern for mobile-first navigation. The toggle should be accessible and SEO-friendly.
components:
- Header: standalone component
- NavToggle: standalone component
- Nav: takes children
html:
<header class=""bg-gray-200 py-4 lg:py-8""><div class=""container mx-auto px-4 lg:px-8""><Header/><NavToggle/><Nav><!-- navigation items will be inserted here --></Nav></div></header>
component html:
Header:
<h1 class=""text-2xl font-bold"">{site_title}</h1>
NavToggle:
<button class=""lg:hidden"" aria-label=""Navigation toggle""><span class=""sr-only"">Toggle navigation</span><i class=""fas fa-bars text-lg""></i></button>
Nav:
<nav class=""lg:flex lg:flex-wrap lg:justify-end"">{children}</nav>"
Search Input Placeholder,"description:
The UI should be a simple search input field with a placeholder text that says ""Search...""
components:
- SearchInput: A standalone component that renders a search input field with a placeholder text.
html:
<div class=""flex justify-center mx-auto max-w-md""><SearchInput/></div>
component html:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg leading-tight text-gray-700 bg-gray-200 rounded-md"" placeholder=""{placeholder_text}""/>"
Search Result Item,"description:
- The UI should display a search result item which includes a title, a brief description, and a link to read more. It should be formatted neatly, ensuring it's clearly distinguishable as an individual search result within a list.
components:
- SearchResultItem: (Standalone): Displays the search result including the title, description, and a ""Read More"" link.
html:
<div class=""container mx-auto px-4""><ul class=""list-none""><li><SearchResultItem/></li><!-- Add more SearchResultItem components as needed --></ul></div>
component html:
SearchResultItem:
<div class=""p-4 max-w-xl bg-white rounded-lg border border-gray-200 shadow-md hover:bg-gray-100""><h2 class=""text-lg font-bold tracking-tight text-gray-900"">{title}</h2><p class=""font-light text-gray-600"">{description}</p><a href=""{more_info_url}"" class=""text-indigo-600 hover:text-indigo-900"">Read More</a></div>"
Page Content Header Tag,"description:
The UI will feature a content header tag that typically appears at the top of a content section. It's designed to provide a clear, concise title or heading for the content that follows, making it easier for users to understand what the content is about. The header should be visually prominent and accessible.
components:
- PageHeader: Standalone component. This component will display the title of the content in a larger, bold font to stand out as the primary heading of a page or a section.
html:
<!-- Main container for the Page Header --><div class=""container mx-auto px-4""><PageHeader/></div>
component html:
PageHeader:
<!-- PageHeader Component: Displays the content header --><h1 class=""text-2xl md:text-4xl font-bold my-2 text-gray-800"">{page_title} </h1>"
Project showcase display,"description:
The UI should be a responsive, mobile-first, and accessible grid of project cards, with each card displaying a project's title, description, and tags.
components:
- ProjectCard: A standalone component displaying a single project's information.
- ProjectGrid: A container component taking `ProjectCard` children, displaying them in a responsive grid.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Project Showcase</h2><ProjectGrid><ProjectCard/><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectGrid></div>
component html:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h3 class=""text-lg font-bold"">{project_title}</h3><p	class=""text-gray-600"">{project_description}</p><ul class=""flex flex-wrap"">{tags.map((tag) =>( <li key={tag} class=""mr-2"">{tag}</li>))} </ul></div>
ProjectGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Statistics Section: Showcase impressive metrics and data,"description:
The Statistics Section should display impressive metrics and data in a visually appealing way, with clear headings, easy-to-read fonts, and sufficient whitespace to make the numbers stand out.
components:
- StatisticCard: a standalone component that displays a single metric, consisting of a title, value, and optional description.
- StatisticsSection: a component that takes children, wrapping multiple `StatisticCard`s in a container with a heading.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Key Statistics</h2><StatisticsSection><StatisticCard/><StatisticCard/><StatisticCard/></StatisticsSection></section>
component html:
StatisticCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{statistic_title}</h3><p class=""text-3xl font-bold"">{statistic_value}</p><p class=""text-gray-600"">{statistic_description}</p></div>
StatisticsSection:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Team member profiles,"description:
The UI should display a list of team member profiles, each profile containing a photo, name, title, bio, and social media links. The profiles should be displayed in a grid layout, with 2 columns on desktop and 1 column on mobile. Each profile should have a clean and minimalistic design, with a subtle hover effect.
components:
- TeamMemberProfile: (standalone) - displays a single team member's profile information
- TeamGrid: (takes children) - a grid container that holds multiple `TeamMemberProfile` components
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TeamGrid><TeamMemberProfile/><TeamMemberProfile/><!-- add more profiles here --></TeamGrid></div>
component html:
TeamMemberProfile:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><img src={profile_image_url} alt={name} class=""w-24 h-24 rounded-full mx-auto""/><h2 class=""text-lg font-bold"">{name}</h2><p class=""text-sm"">{title}</p><p class=""text-sm"">{bio}</p><ul class=""flex justify-center mb-4""><li><a href={linkedin_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-linkedin""></i></a></li><li><a href={twitter_url} target=""_blank"" rel=""noopener noreferrer""><i class=""fab fa-twitter""></i></a></li><!-- add more social media links here --></ul></div>
TeamGrid:
<div class=""grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2"">{children}</div>"
Career opportunities display,"description:
The UI should display a list of career opportunities with their respective details, such as job title, location, and brief description. The list should be responsive, accessible, and easy to navigate on various devices.
components:
- CareerOpportunityCard: A standalone component to display a single career opportunity.
- CareerOpportunitiesList: A component that takes children, which will be a list of `CareerOpportunityCard` components.
html:
<section class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Career Opportunities</h1><CareerOpportunitiesList/></section>
component html:
CareerOpportunityCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg font-bold"">{jobTitle}</h2><p class=""text-gray-600"">{location}</p><p class=""text-gray-600"">{briefDescription}</p><a class=""text-blue-600 hover:text-blue-800"" href=""{jobUrl}"">Learn More</a></div>
CareerOpportunitiesList:
<ul class=""list-none mb-0 p-0"">{children}</ul>"
Product lists,"description:
The UI should display a list of products, with each product showing its image, title, price, and a ""Add to Cart"" button. The list should be responsive, with multiple columns on larger screens and a single column on smaller screens.
components:
- ProductCard: (standalone): displays a single product
- ProductList: (takes children): wraps multiple `ProductCard` components
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Products</h1><ProductList><ProductCard/><ProductCard/><!-- Add more ProductCard components here --></ProductList></div>
component html:
ProductCard:
<div class=""bg-white rounded-lg shadow-md p-4 mb-4""><img src=""{product_image_url}"" alt=""{product_title}"" class=""w-full mb-2""/><h2 class=""text-lg font-bold"">{product_title}</h2><p class=""text-gray-600"">{product_description}</p><p class=""text-lg font-bold"">{product_price}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to Cart</button></div>
ProductList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Small pop-up box that provides additional information when users hover over an element,"description:
A small, rectangular box with a subtle background color and rounded corners, appearing on hover over a specific element. The box will contain a short text providing additional information.
components:
- TooltipComponent: (standalone): The entire tooltip box, containing the text.
- TriggerElement: (takes children): The element that triggers the tooltip to appear on hover, e.g., a button or a link. Its child is the text or element that the user will hover over.
html:
<TriggerElement><!-- the element that triggers the tooltip -->Hover over me!
<TooltipComponent/></TriggerElement>
component html:
TooltipComponent:
<div class=""bg-gray-100 rounded-md p-2 text-sm text-gray-600 absolute top-full left-1/2 -translate-x-1/2 hidden group-hover:block"">{tooltip_text}</div>
TriggerElement:
<span class=""cursor-pointer relative"">{children}</span>"
Product Feature Icon,"description:
A small icon with a brief description, indicating a key feature of a product.
components:
- FeatureIcon: A standalone component representing a single feature icon.
- FeatureDescription: A standalone component representing a brief description of a feature.
html:
<div class=""flex items-center mb-4""><FeatureIcon/><FeatureDescription/></div>
component html:
FeatureIcon:
<i class=""fas fa-{icon_name} text-lg mr-2"" aria-hidden=""true""></i>
FeatureDescription:
<p class=""text-sm"">{feature_description}</p>"
Table cell,"description:
A single table cell that can be used to build a table. The cell should be responsive and adapt to different screen sizes.
components:
- TableCell: (standalone)
html:
<table><tr><TableCell/></tr></table>
component html:
TableCell:
<td>{cell_content}</td>"
Navigation Menu Toggle,"description:
The UI should be a responsive navigation menu toggle button that can be used to expand or collapse a navigation menu. On mobile devices, it should be a hamburger icon, and on larger screens, it should be a text label indicating whether the menu is open or closed.
components:
- NavigationToggle: Standalone component that renders a toggle button for the navigation menu.
- NavigationMenu: Component that takes children, renders the navigation menu and handles the toggle state.
html:
<nav><NavigationToggle/><NavigationMenu><!-- navigation menu items here --></NavigationMenu></nav>
component html:
NavigationToggle:
<button class=""lg:hidden w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md flex justify-center items-center"" aria-label=""Toggle navigation menu""><!-- hamburger icon --><span class=""sr-only"">Menu</span><span class=""block lg:hidden"" aria-hidden=""true""><span class=""sr-only"">Open</span>❌ </span><span class=""hidden lg:block"" aria-hidden=""true""><span class=""sr-only"">Close</span>Menu </span></button>
NavigationMenu:
<div class=""lg:flex lg:flex-wrap lg:justify-center lg:pb-4 lg:w-full lg:bg-white lg:shadow-md lg:rounded-md"" aria-labelledby=""navigation-menu"">{children}</div>"
"A section divider with a thin, grey horizontal line","description:
A simple, yet elegant section divider with a thin, grey horizontal line that separates sections of content. The divider should be responsive, scalable, and accessible on different screen sizes.
components:
- SectionDivider: (Standalone): A thin, grey horizontal line that separates sections of content.
html:
<SectionDivider/>
component html:
SectionDivider:
<div class=""w-full h-px bg-gray-200""></div>"
Search bar with a white outline and a magnifying glass icon,"description:
The search bar should have a clean and minimalistic design, with a white border and a magnifying glass icon to the left of the input field. The search bar should be responsive, scaling down on smaller screens to fit within the available width. The magnifying glass icon should be a prominent feature, making it clear that this is a search bar.
components:
- SearchBar: (Takes Children): a container component that wraps the search input and icon.
- SearchIcon: (Standalone): a component that renders a magnifying glass icon.
- SearchInput: (Standalone): a component that renders the search input field.
html:
<div class=""flex justify-center md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto""><SearchBar><SearchIcon/><SearchInput/></SearchBar></div>
component html:
SearchBar:
<div class=""flex border-2 border-white rounded-md overflow-hidden"">{children}</div>
SearchIcon:
<i class=""fas fa-search text-gray-500 mr-2""/>
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 pl-10 text-sm"" placeholder=""Search...""/>"
A footer with a black background and white text,"description:
The footer should have a black background with white text, making it easily readable. It should be fully responsive and accessible on all devices. On smaller screens, the footer should take up the full width of the screen, while on larger screens, it can be narrower.
components:
- FooterComponent: (Standalone): This component will contain the footer content and will be displayed at the bottom of the page.
html:
<footer class=""bg-black text-white py-4""><FooterComponent/></footer>
component html:
FooterComponent:
<footer class=""container mx-auto p-4""><p>{footer_text}</p></footer>"
Callout Box Background Image,"description:
The UI should be a callout box with a background image, having a heading, description, and a call-to-action button. The background image should be responsive and adapt to different screen sizes.
components:
- CalloutBox: A standalone component that wraps the entire callout box.
- CalloutHeader: A standalone component that contains the heading and description.
- CalloutButton: A standalone component that contains the call-to-action button.
html:
<div class=""container mx-auto p-4""><CalloutBox/></div>
component html:
CalloutBox:
<div class=""relative bg-cover bg-center h-full"" style=""backgroundImage: url({background_image_url});""}><div class=""absolute inset-0 bg-gray-900 bg-opacity-50""></div><CalloutHeader/><CalloutButton/></div>
CalloutHeader:
<div class=""absolute bottom-0 left-0 p-4 mb-4""><h2 class=""text-2xl font-bold"">{heading}</h2><p class=""text-lg"">{description}</p></div>
CalloutButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Sharrre and Social Sharing,"description:
The UI should display a set of social media icons with their respective share buttons. The icons should be evenly spaced and centered horizontally. On mobile devices, the icons should stack vertically.
components:
- SocialMediaIcon: (standalone) - An individual social media icon with a share button.
- SocialSharing: (takes children) - The container for the social media icons.
html:
<div class=""container mx-auto p-4""><SocialSharing><SocialMediaIcon/><SocialMediaIcon/><SocialMediaIcon/></SocialSharing></div>
component html:
SocialMediaIcon:
<a href=""{social_media_url}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-block p-2""><i class=""fab fa-{social_media_icon_name}"" aria-hidden=""true""/><span class=""sr-only"">{social_media_name}</span></a>
SocialSharing:
<div class=""flex flex-wrap justify-center md:flex-nowrap"">{children}</div>"
Project Favorites and Bookmarking,"description:
The UI should display a list of favorite items with a bookmarking system. Each item should have a title, description, and an option to bookmark or unbookmark. The UI should be responsive, mobile-first, and accessible.
components:
- BookmarkButton: Standalone component that handles bookmarking and unbookmarking.
html:
<main class=""max-w-md mx-auto p-4 pt-6 pb-8""><h1 class=""text-2xl font-bold mb-4"">Favorites</h1><ul class=""list-none mb-4"">{favorites_list}
</ul></main>
component html:
BookmarkButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_bookmarked ? ""Unbookmark"" : ""Bookmark""}</button>"
A component to display a list of sports news with a white background and a title with a bold font,"description:
The UI should be a clean and simple list of sports news with a bold title and a white background. The title should stand out with a bold font and a larger font size. The list of news should be easily readable with a comfortable font size and line spacing.
components:
- SportsNewsList: (Takes Children): A container component to display a list of sports news with a white background and a title with a bold font.
html:
<div class=""bg-white p-4 md:p-8 lg:p-12""><SportsNewsList><!-- list of news items will be rendered here --></SportsNewsList></div>
component html:
SportsNewsList:
<div class=""bg-white p-4 md:p-8 lg:p-12""><h2 class=""text-lg font-bold mb-4"">{title}</h2><ul>{children} </ul></div>"
AI-powered recommendations,"description:
The UI should display a list of recommended items, such as products or articles, with a brief description and a link to learn more. The list should be responsive, easy to read, and accessible on various devices.
components:
- RecommendationCard: (standalone) - A single recommended item with a title, description, and link.
- RecommendationList: (takes children) - A container for a list of recommended items.
html:
<div class=""container mx-auto p-4""><h2 class=""text-3xl font-bold mb-4"">Recommended for you</h2><RecommendationList><RecommendationCard/><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationList></div>
component html:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><a class=""text-blue-600 hover:text-blue-900"" href=""{link}"">Learn more</a></div>
RecommendationList:
<ul class=""list-none mb-4"">{children}</ul>"
Real-time Updates/Feeds,"description:
The UI should display a real-time updates/feed section, showcasing a list of updates/feeds in a card-like layout. Each card should display the title, description, and timestamp of the update. The UI should be responsive, accessible, and mobile-first.
components:
- FeedList: A component that renders a list of `FeedCard`s and takes children.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Real-time Updates/Feeds</h2><FeedList><!-- Feed cards will be rendered here --></FeedList></div>
component html:
FeedList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
"A hero image component that displays a large, high-quality food image with a subtle overlay text","description:
The UI should feature a prominent hero image that takes up the majority of the screen on larger screen sizes, with a subtle overlay text that doesn't distract from the image. The hero image should be high-quality and showcase a delicious food item. The overlay text should be easy to read and not overwhelm the image.
components:
- HeroImage: (Takes Children): This component will display a large hero image with a subtle overlay text. The overlay text will be the child element of this component.
html:
<div class=""h-screen w-full bg-cover bg-center"" style=""backgroundImage: url({heroImageUrl});""}><HeroImage><p class=""text-3xl lg:text-5xl text-white"">{overlayText}</p></HeroImage></div>
component html:
HeroImage:
<div class=""absolute inset-0 flex items-center justify-center"">{children} <div class=""absolute inset-0 bg-black bg-opacity-50""></div></div>"
Post Content: Main text and media of article,"description:
The Post Content UI should have a main text area and a media area (e.g. images, videos) that is responsive and accessible on various devices.
components:
- PostContent: standalone, contains the main text and media areas
- MediaArea: standalone, contains the media (images, videos) of the post
- PostText: standalone, contains the main text of the post
html:
<div class=""container mx-auto p-4""><PostContent/></div>
component html:
PostContent:
<div class=""flex flex-wrap -mx-4""><PostText/><MediaArea/></div>
MediaArea:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4""><img src=""{media_url}"" alt=""{media_alt_text}"" class=""w-full h-full object-cover""/></div>
PostText:
<div class=""w-full lg:w-1/2 xl:w-2/3 p-4""><h2 class=""text-lg font-bold"">{post_title}</h2><p>{post_text}</p></div>"
"Text or icon that, when clicked, navigates to another page or resource","description:
- A simple clickable text or icon that serves as a hyperlink. This should be visually distinct enough to indicate that it's interactive, such as a different color, underline, or accompanied by an icon.
components:
- LinkButton: Standalone component. This component renders a clickable element which can be text or an icon wrapped in an anchor (`<a>`) tag.
html:
<div class=""container mx-auto px-4""><LinkButton/></div>
component html:
LinkButton:
<!-- LinkButton: A clickable text or icon that acts as a hyperlink --><a href=""{target_url}"" class=""text-blue-600 hover:text-blue-800 visited:text-purple-600"">{link_text} </a>"
Settings icon with dropdown menu options,"description:
The UI should be a settings icon with a dropdown menu that appears when clicked. The settings icon should be a toggleable dropdown menu with a few options.
components:
- SettingsIcon: A standalone component that displays a settings icon and toggles the dropdown menu when clicked.
- DropdownMenu: A component that takes children and displays a dropdown menu with options.
- DropdownMenuItem: A standalone component that displays a single option in the dropdown menu.
html:
<div class=""relative""><SettingsIcon/><DropdownMenu><DropdownMenuItem/><DropdownMenuItem/><DropdownMenuItem/></DropdownMenu></div>
component html:
SettingsIcon:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow""><i class=""fas fa-cog""></i></button>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded-md overflow-hidden shadow-md"">{children}</div>
DropdownMenuItem:
<a href=""#"" class=""block px-4 py-2 text-gray-700 hover:bg-gray-100"">{option_text}</a>"
Navigation Menu Toggle Icon,"description:
The UI should be a navigation menu toggle icon that is responsive, mobile-first, accessible, SEO-friendly, and well-documented. The toggle icon should be a hamburger menu icon () that changes to a close icon (×) when the navigation menu is opened.
components:
- NavigationToggle: (standalone) - The navigation toggle icon component.
html:
<nav><NavigationToggle/><!-- Navigation menu will be inserted here --></nav>
component html:
NavigationToggle:
<button class=""w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"" aria-label=""Toggle navigation"" aria-expanded=""false""><span class=""sr-only"">Toggle navigation</span><span class=""block w-5 h-0.5 bg-gray-600""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span><span class=""block w-5 h-0.5 bg-gray-600 mt-1.5""></span></button>"
Customer review component that displays:,"description:
The customer review component should display a concise summary of the customer's experience, with a clear rating, name, and brief review text. It should be easily readable on various screen sizes, with a clear hierarchy of information. The background should have a subtle gradient to give it a subtle depth effect. The rating should be highlighted with a distinct color to draw attention.
components:
- CustomerReview: (Takes Children): A container component that displays a customer review. It consists of a `Rating`, `ReviewerName`, and `ReviewText`.
- Rating: (Standalone): A small component that displays the customer's rating as a series of stars.
- ReviewerName: (Standalone): A component that displays the name of the customer who left the review.
- ReviewText: (Standalone): A component that displays the brief review text.
html:
<div class=""flex flex-col p-4 bg-gradient-to-r from-slate-100 to-slate-200 rounded-lg shadow-md""><CustomerReview><Rating/><ReviewerName/><ReviewText/></CustomerReview></div>
component html:
CustomerReview:
<div class=""flex flex-col p-2"">{children}</div>
Rating:
<div class=""flex text-yellow-400 mb-2"">{rating}/5 <svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg></div>
ReviewerName:
<p class=""text-lg font-bold"">{reviewer_name}</p>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Design a shopping cart icon with a white background and black text that displays the number of items in the cart,"description:
The shopping cart icon should be a circular icon with a white background and black text that displays the number of items in the cart. The icon should be easily accessible and visible on different screen sizes.
components:
- CartIconButton: (Standalone): A circular icon displaying the number of items in the cart.
html:
<nav class=""flex justify-end md:justify-start md:w-1/2 xl:w-1/3 p-4""><CartIconButton/></nav>
component html:
CartIconButton:
<div class=""bg-white rounded-full shadow-md p-2""><span class=""text-black font-bold"">{item_count}</span><i class=""fas fa-shopping-cart text-black"" aria-hidden=""true""></i></div>"
Partner offers display,"description:
The UI should be a section that displays multiple partner offers in a grid layout, with each offer showing an image, title, and description. The grid should be responsive, adapting to different screen sizes and devices.
components:
- PartnerOffer: A standalone component that represents a single partner offer, consisting of an image, title, and description.
- PartnerOfferGrid: A component that takes children (multiple PartnerOffer components) and lays them out in a grid.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Partner Offers</h2><PartnerOfferGrid><PartnerOffer/><PartnerOffer/><!-- Add more PartnerOffer components here --></PartnerOfferGrid></section>
component html:
PartnerOffer:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src={image_url} alt={image_alt} class=""w-full h-48 object-cover rounded-t""/><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p></div>
PartnerOfferGrid:
<div class=""grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
"A product details page with a large product image, product description, price, and ""Add to cart"" button","description:
The product details page should have a clean and modern design with a focus on showcasing the product image. The layout should be responsive and accessible on various screen sizes. The page should have a clear hierarchy of information, with the product image being the main focus, followed by the product description, price, and ""Add to cart"" button. The design should use a consistent color palette with highlight colors to draw attention to important elements.
components:
- ProductImage: (Standalone): Displays the product image. On small screens, the image should take up the full width of the screen. On larger screens, the image should be displayed at a maximum width of 500px and centered horizontally.
- ProductDescription: (Takes Children): Displays the product description. On small screens, the description should be displayed in a single column. On larger screens, the description should be displayed in two columns.
- ProductPrice: (Standalone): Displays the product price. The price should be displayed prominently with a large font size and highlighted with a slightly different background color.
- AddToCartButton: (Standalone): Displays the ""Add to cart"" button. The button should be displayed prominently with a high contrast background color and a clear call-to-action text.
html:
<div class=""flex flex-col md:flex-row max-w-md mx-auto p-4""><ProductImage/><div class=""flex flex-col md:flex-row md:justify-between""><ProductDescription>{children}</ProductDescription><div class=""flex flex-col md:flex-row md:items-center""><ProductPrice/><AddToCartButton/></div></div></div>
component html:
ProductImage:
<img src={image_url} class=""max-w-full md:max-w-md mx-auto""/>
ProductDescription:
<div class=""flex flex-col md:flex-row md:flex-wrap"">{children}</div>
ProductPrice:
<p class=""text-2xl font-bold bg-yellow-100 p-2"">{price}</p>
AddToCartButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Add to cart</button>"
"A job search bar component with a text input field, dropdown menus for location and category, and a search button","description:
The Job Search Bar component should be a compact, responsive, and accessible element that allows users to efficiently search for jobs based on location and category. The component should have a clean and modern design, with a prominent search button that encourages users to take action.
components:
- JobSearchBar: (Takes Children): The top-level component that contains the search input field, dropdown menus, and search button.
- SearchInput: (Standalone): A text input field where users can enter their search query.
- LocationDropdown: (Standalone): A dropdown menu that allows users to select a location for their job search.
- CategoryDropdown: (Standalone): A dropdown menu that allows users to select a category for their job search.
- SearchButton: (Standalone): A prominent button that triggers the search action.
html:
<div class=""flex flex-wrap justify-center pt-4""><JobSearchBar><SearchInput/><LocationDropdown/><CategoryDropdown/><SearchButton/></JobSearchBar></div>
component html:
JobSearchBar:
<div class=""flex flex-wrap justify-center bg-white shadow-md rounded-lg py-2 px-4"">{children}</div>
SearchInput:
<input type=""text"" class=""w-full px-4 py-2 text-lg rounded-l-lg border-2 border-gray-300"" placeholder=""Search for a job""/>
LocationDropdown:
<div class=""relative""><select class=""w-full px-4 py-2 text-lg rounded-lg border-2 border-gray-300""><option value="""">Select a location</option><!-- list of locations --></select><svg><!-- chevron down --></svg></div>
CategoryDropdown:
<div class=""relative""><select class=""w-full px-4 py-2 text-lg rounded-lg border-2 border-gray-300""><option value="""">Select a category</option><!-- list of categories --></select><svg><!-- chevron down --></svg></div>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg"">Search</button>"
Audio player with progress,"description:
The UI should display a simple audio player with a progress bar that updates as the audio plays. It should have a play/pause button, and a progress bar that shows the current position of the audio.
components:
- AudioPlayer: A standalone component that renders the entire audio player UI.
- PlayPauseButton: A standalone component that renders the play/pause button.
- ProgressBar: A standalone component that renders the progress bar.
html:
<div class=""flex flex-col items-center p-4""><AudioPlayer/></div>
component html:
AudioPlayer:
<div class=""flex flex-col items-center mb-4""><PlayPauseButton/><ProgressBar/><p class=""text-sm"">{currentTime}/ {duration}</p></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{isPlaying ? 'Pause' : 'Play'}</button>
ProgressBar:
<div class=""w-full bg-gray-200 h-2 mb-4""><div class=""bg-orange-500 h-2"" style=""width: {progress}%;""}/></div>"
"A ""Tags"" component that includes a list of tag names with a white background and a subtle border","description:
The ""Tags"" component should display a list of tag names in a clean and organized manner. The component should have a white background to provide contrast with the tag names. A subtle border should be added to give the component a sense of depth. The layout should be responsive, with the tags wrapping to the next line on smaller screen sizes.
components:
- Tags: (Takes Children): A container component that holds a list of `TagName` components. The component should have a maximum width and be centered on larger screen sizes.
html:
<div class=""max-w-lg mx-auto p-4 md:p-6 lg:p-8""><Tags><!-- TagName components will be rendered here --></Tags></div>
component html:
Tags:
<div class=""flex flex-wrap justify-center"">{children}</div>"
A component to display a list of user testimonials with a white background and a quote bubble,"description:
The UI should display a list of user testimonials in a clean and modern design. Each testimonial should have a quote bubble with a white background, making it stand out from the rest of the UI. The layout should be responsive, with a maximum width of 1200px on larger screens and a single-column layout on smaller screens.
components:
- TestimonialList: (Takes Children): A container component that holds a list of testimonial items. It should have a max-width of 1200px on larger screens and a single-column layout on smaller screens.
- TestimonialItem: (Standalone): A component that displays a single testimonial with a quote bubble. It should have a white background and a circular profile picture of the user.
html:
<div class=""max-w-1200 mx-auto p-6 lg:p-12""><TestimonialList><!-- Testimonial items will be rendered here --></TestimonialList></div>
component html:
TestimonialList:
<div class=""flex flex-wrap justify-center"">{children}</div>
TestimonialItem:
<div class=""bg-white p-6 mb-6 rounded-lg shadow-md""><img src=""{profile_picture_url}"" alt=""{user_name}"" class=""w-12 h-12 rounded-full mb-4""><blockquote class=""pl-4 border-l-4 border-blue-500""><p>{testimonial_text}</p><cite>{user_name}</cite></blockquote></div>"
Share buttons,"description:
The UI should be a horizontal row of social media share buttons, with each button featuring the logo of a popular social media platform (e.g. Facebook, Twitter, LinkedIn, etc.). The buttons should be equally spaced and have a subtle hover effect. The UI should be responsive and adapt to different screen sizes.
components:
- ShareButton: a standalone component that represents a single share button
- ShareButtonContainer: a component that takes children, which will be a group of `ShareButton` components
html:
<div class=""flex justify-center mb-4""><ShareButtonContainer><ShareButton/><ShareButton/><ShareButton/><!-- Add more ShareButton components for each social media platform --></ShareButtonContainer></div>
component html:
ShareButton:
<a href=""{share_url}"" class=""inline-block p-2 rounded-full hover:bg-gray-200 transition duration-300""><img src=""{social_media_logo_url}"" alt=""{social_media_name} Share"" class=""w-6 h-6""/></a>
ShareButtonContainer:
<div class=""flex justify-center space-x-2"">{children}</div>"
Micro-interactions,"description:
The UI should display a button with a hover effect, a loading animation, and a success state animation.
components:
- ButtonComponent: (standalone) - A button with a hover effect.
- LoadingAnimationComponent: (standalone) - A loading animation component.
- SuccessStateComponent: (standalone) - A success state animation component.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ButtonComponent/><LoadingAnimationComponent/><SuccessStateComponent/></div>
component html:
ButtonComponent:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>
LoadingAnimationComponent:
<div class=""flex justify-center mb-4""><div class=""animate-spin h-5 w-5 bg-gray-200 rounded-full border-2 border-gray-400""></div></div>
SuccessStateComponent:
<div class=""text-green-600""><i class=""fas fa-check-circle""></i><p>{success_message}</p></div>"
A call-to-action button with a white background and black text,"description:
The UI will consist of a single call-to-action button with a white background and black text. The button will be responsive and scale on different screen sizes. On smaller screens, the button will take up the full width of the screen, while on larger screens, it will have a max width to prevent it from becoming too large.
components:
- CallToActionButton: (Standalone): This is the main call-to-action button. It will have a white background and black text. On smaller screens, it will take up the full width of the screen, and on larger screens, it will have a max width.
html:
<div class=""min-h-screen flex items-center justify-center""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-white text-black py-4 px-6 rounded-md shadow-md hover:shadow-lg transition duration-200"">{call_to_action_text}</button>"
Order history display,"description:
The UI should display a list of orders with their corresponding dates, order numbers, and total costs. Each order should be displayed in a card-like format with clear typography and sufficient whitespace. The UI should be responsive and adapt to different screen sizes.
components:
- OrderList: A component that takes children (`OrderCard` components) and displays them in a list.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Order History</h1><OrderList><!-- Orders will be rendered here --></OrderList></div>
component html:
OrderList:
<ul class=""list-none mb-0"">{children}</ul>"
Product reviews,"description:
The UI should display a list of product reviews with the reviewer's name, rating, review text, and date of review. The reviews should be sorted in reverse chronological order, with the most recent review at the top. The UI should be responsive, mobile-first, and accessible.
components:
- ReviewList: A component that takes children, which are multiple `ReviewCard` components.
html:
<div class=""container max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Product Reviews</h2><ReviewList><!-- Review cards will be rendered here --></ReviewList></div>
component html:
ReviewList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Location map with markers,"description:
The UI should be a responsive map with markers indicating specific locations. The map should be zoomable and pannable, with a clear distinction between the map and the markers.
components:
- LocationMap: (standalone): The main map component that renders the map and markers.
- MapMarker: (takes children): An individual marker on the map, which can have a label or other details.
html:
<div class=""h-screen w-full overflow-hidden""><LocationMap/></div>
component html:
LocationMap:
<div class=""h-full w-full overflow-hidden""><div class=""h-full w-full"" id=""map""><!-- map will be rendered here -->{markers} </div></div>
MapMarker:
<div class=""absolute"" style=""top: {marker_top}px; left: {marker_left}px;""><div class=""bg-red-500 h-4 w-4 rounded-full cursor-pointer""/>{children}</div>"
Category dropdown menu,"description:
A dropdown menu that displays a list of categories when the user clicks on a dropdown toggle button. The menu should be responsive and accessible.
components:
- DropdownToggle: A standalone component that displays a button to toggle the dropdown menu.
- DropdownMenu: A component that takes children, displaying a list of categories.
- CategoryItem: A standalone component that displays a single category item.
html:
<div class=""flex justify-center mb-4""><DropdownToggle/><DropdownMenu><CategoryItem/><CategoryItem/><!-- Add more CategoryItem components here --></DropdownMenu></div>
component html:
DropdownToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Categories <i class=""fas fa-angle-down"" aria-hidden=""true""></i></button>
DropdownMenu:
<ul class=""absolute bg-white shadow-md mt-2 w-48 rounded"">{children}</ul>
CategoryItem:
<li class=""py-2 px-4 border-b border-gray-200"">{category_name}</li>"
"A review component with a user's name, rating, and review text","description:
The review component should have a clear hierarchy of information, with the user's name and rating prominently displayed, followed by the review text. The component should be responsive, with a compact layout on mobile devices and a more spacious layout on larger screens. The UI should use a consistent color palette with highlight colors to draw attention to the rating.
components:
- ReviewComponent: (Takes Children): This is the top-level component that contains the review information.
- ReviewerName: (Standalone): Displays the user's name.
- Rating: (Standalone): Displays the rating (e.g., 4.5/5).
- ReviewText: (Standalone): Displays the review text.
html:
<div class=""flex flex-col md:flex-row items-center mb-4""><ReviewComponent><!-- Reviewer name, rating, and review text will be rendered here --></ReviewComponent></div>
component html:
ReviewComponent:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>
ReviewerName:
<p class=""text-lg font-bold"">{reviewerName}</p>
Rating:
<div class=""flex items-center""><span class=""text-yellow-400"">{rating}/5</span><span class=""text-gray-600 text-sm"">({ratingCount} {ratingCount === 1 ? 'rating' : 'ratings'})</span></div>
ReviewText:
<p class=""text-gray-600"">{reviewText}</p>"
Italic text,"description:
- The UI should feature a simple text display in italics.
components:
- ItalicText: A standalone component that displays any provided text in italics.
html:
<div class=""p-4""><ItalicText/></div>
component html:
ItalicText:
<p class=""italic"">{text}</p>"
Grid-Based Product Gallery Section,"description:
The UI should display a responsive grid of product cards, with each card featuring a product image, title, and price. The grid should have a maximum of 3 columns on larger screens and adapt to 2 columns on smaller screens and 1 column on mobile devices.
components:
- ProductCard: A standalone component that displays a product's image, title, and price.
- ProductGallery: A component that takes children (i.e., multiple `ProductCard` components) and renders them in a responsive grid.
html:
<section class=""container mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Product Gallery</h2><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProductGallery><ProductCard/><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGallery></div></section>
component html:
ProductCard:
<div class=""bg-white rounded shadow-md overflow-hidden""><img src={imageUrl} alt={productName} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{productName}</h3><p class=""text-gray-600"">{price}</p></div></div>
ProductGallery:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Course Recommendations,"description:
The UI should display course recommendations in a card layout, with each card showing the course title, description, and rating. The cards should be arranged in a grid, with multiple cards per row.
components:
- CourseCard: A standalone component that displays a course's information, including title, description, and rating.
- CourseRecommendationsGrid: A component that takes children (multiple `CourseCard` components) and arranges them in a grid layout.
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold"">Course Recommendations</h1><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><CourseRecommendationsGrid><CourseCard/><CourseCard/><CourseCard/><!-- Add more CourseCard components as needed --></CourseRecommendationsGrid></div></div>
component html:
CourseCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{course_title}</h2><p>{course_description}</p><p>Rating: {rating}/5</p></div>
CourseRecommendationsGrid:
<!-- Children will be placed here -->{children}"
A component to display the date and time a news story was published,"description:
The UI should display the date and time a news story was published in a concise and readable format. It should be easily accessible and visible on different screen sizes. The component should have a subtle highlight color to draw attention to the publication date and time.
components:
- PublicationDateTime: (Standalone): This component displays the date and time a news story was published.
html:
<div class=""flex flex-wrap justify-center mb-4""><PublicationDateTime/></div>
component html:
PublicationDateTime:
<div class=""text-sm text-gray-500""><time datetime=""{publication_date_time}"">{publication_date_time} </time></div>"
Outline (fill) controls,"description:
The UI for outline (fill) controls should be clean and intuitive, typically used to adjust parameters such as contour thickness, opacity, and color of a graphic element in a design tool. The controls might include sliders for thickness and opacity, a color picker for color selection, and labels or icons to indicate the function of each control.
components:
- SliderControl: (Standalone): This component represents a slider used to adjust values like thickness and opacity.
- ColorPicker: (Standalone): A component that allows users to select a color. This typically involves some form of color wheel or color grid.
- Label: (Standalone): Displays text, such as a description or value next to sliders or color pickers.
html:
<div class=""p-4""><div class=""flex flex-col space-y-4""><div class=""flex items-center""><Label/><SliderControl/></div><div class=""flex items-center""><Label/><SliderControl/></div><div class=""flex items-center""><Label/><ColorPicker/></div></div></div>
component html:
SliderControl:
<!-- Slider for values like thickness or opacity --><input type=""range"" class=""w-32 md:w-48"" min=""{min_value}"" max=""{max_value}"" step=""{step_value}""/>
ColorPicker:
<!-- Dropdown color picker UI --><input type=""color"" class=""w-16 h-16"" value=""{default_color}""/>
Label:
<!-- Label for each control --><label class=""mr-2 text-sm md:text-base"">{label_text}</label>"
Follow button to subscribe to users,"description:
A simple button with a follow/unfollow toggle. The button should be responsive and accessible.
components:
- FollowButton: standalone component
html:
<div class=""max-w-md mx-auto p-4""><FollowButton/></div>
component html:
FollowButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{is_following ? 'Unfollow' : 'Follow'}</button>"
"Divider component with a thin, neon-colored line","description:
The Divider component should be a thin, horizontal line that visually separates different sections of the UI. It should be a neon-colored line to make it stand out. The line should be thin and not take up too much vertical space. On smaller screens, the line should be even thinner to ensure it doesn't overwhelm the UI.
components:
- Divider: (Standalone): This component represents a horizontal line that separates different sections of the UI. It should be a thin, neon-colored line.
html:
<div class=""container mx-auto p-4""><!-- content above the divider --><Divider/><!-- content below the divider --></div>
component html:
Divider:
<hr class=""border-none h-px bg-gradient-to-r from-{neon_color} to-{neon_color} mx-4 md:mx-6 lg:mx-8 xl:mx-10""/>"
Testimonial Author Image,"description:
A circular image of the testimonial author, displayed to the left of their quote, with a subtle border and shading to give it a slight 3D effect.
components:
- TestimonialAuthorImage: Standalone component
html:
<div class=""flex items-center mb-4""><TestimonialAuthorImage/><blockquote class=""ml-4"">{testimonial_quote}</blockquote></div>
component html:
TestimonialAuthorImage:
<img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full border-2 border-gray-200 shadow-md""/>"
Event calendar,"description:
The UI should be a calendar that displays events for a specific month. It should be responsive, mobile-friendly, and accessible. It should have a header with the month and year, a grid of days with events listed below each day, and a navigation section to move to the previous or next month.
components:
- CalendarHeader: (standalone): Displays the month and year
- CalendarGrid: (takes children): A grid of days in the month
- DayCell: (takes children): An individual day in the grid with events listed below
- Event: (standalone): An individual event on a day
- Navigation: (standalone): Navigation section to move to the previous or next month
html:
<div class=""container mx-auto pt-4""><CalendarHeader/><CalendarGrid><DayCell><Event/></DayCell><DayCell><Event/><Event/></DayCell>...
</CalendarGrid><Navigation/></div>
component html:
CalendarHeader:
<h1 class=""text-2xl"">{month} {year}</h1>
CalendarGrid:
<div class=""grid grid-cols-7 gap-2"">{children}</div>
DayCell:
<div class=""flex flex-col p-2""><p class=""text-lg"">{day}</p><ul class=""list-none mb-2"">{children}</ul></div>
Event:
<li class=""py-2"">{event_name} ({event_time})</li>
Navigation:
<nav class=""flex justify-between py-4""><button class=""btn btn-prev"" disabled={is_first_month}>Prev</button><button class=""btn btn-next"" disabled={is_last_month}>Next</button></nav>"
"Hero section with a large background image, headline, and call-to-action button","description:
The Hero section should be a prominent, full-width section that immediately grabs the user's attention. It should feature a large background image that scales responsively to fit different screen sizes. The headline should be large, bold, and centered, with a clear call-to-action (CTA) button below it. The CTA button should be prominent and stand out from the rest of the section. The Hero section should be easy to navigate on both desktop and mobile devices.
components:
- HeroBackground: (Standalone): A full-width, full-height component that displays a large background image.
- HeroHeadline: (Standalone): A large, bold headline that displays the main title of the Hero section.
- CallToActionButton: (Standalone): A prominent button that encourages the user to take action.
html:
<div class=""h-screen w-full overflow-hidden""><HeroBackground/><div class=""container mx-auto p-4 sm:p-6 lg:p-12 xl:p-16""><HeroHeadline/><CallToActionButton/></div></div>
component html:
HeroBackground:
<div class=""absolute top-0 left-0 h-full w-full bg-cover bg-center"" style=""backgroundImage: url({backgroundImage});""}></div>
HeroHeadline:
<h1 class=""text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold text-white"">{headlineText}</h1>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaButtonText}</button>"
Wishlist/favorites feature,"description:
The UI should display a list of favorite items with a ""Remove from wishlist"" button next to each item. Each item should display a title, a short description, and a ""View details"" link.
components:
- WishlistItem: (standalone): A single favorite item in the list
- Wishlist: (takes children): The container for the list of favorite items
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">My Wishlist</h2><Wishlist><WishlistItem/><WishlistItem/><!-- ... more WishlistItem components here ... --></Wishlist></div>
component html:
WishlistItem:
<li class=""mb-4""><h3 class=""text-lg font-bold"">{itemName}</h3><p class=""text-gray-600"">{itemDescription}</p><p><a href=""{itemUrl}"" class=""text-blue-600 hover:text-blue-900"">View details</a></p><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Remove from wishlist</button></li>
Wishlist:
<ul class=""list-none mb-0"">{children}</ul>"
"Visual representation of user ratings, often displayed as a row of stars","description:
The UI should display a row of stars, with some of them filled and some of them empty, to visually represent a user's rating. The number of filled stars should be proportional to the user's rating. For example, if the user has a rating of 4 out of 5, four stars should be filled and one should be empty.
components:
- Rating: standalone component that displays the row of stars
- Star: standalone component that displays a single star, either filled or empty
html:
<Rating/>
component html:
Rating:
<div class=""flex justify-center mb-4"">{ stars }</div>
Star:
<i class=""fas {filled ? 'fa-star' : 'fa-star-o'} text-lg""></i>"
A hero image with a subtle gradient overlay,"description:
The UI should feature a large hero image with a subtle gradient overlay to add depth and visual interest. The gradient should be a light, translucent overlay that doesn't overpower the image. The layout should be responsive and scale to fit different screen sizes.
components:
- HeroImage: (Takes Children): A hero image component that includes a background image and a gradient overlay. The component should take a child element that contains the image URL and alt text.
- GradientOverlay: (Standalone): A standalone component that adds a gradient overlay to the hero image.
html:
<div class=""h-screen w-full relative""><HeroImage><img src=""{hero_image_url}"" alt=""{hero_image_alt_text}""/></HeroImage></div>
component html:
HeroImage:
<div class=""absolute top-0 left-0 h-full w-full""><GradientOverlay/>{children}</div>
GradientOverlay:
<div class=""absolute top-0 left-0 h-full w-full bg-gradient-to-r from-gray-50 to-gray-200 opacity-50""></div>"
Header Navigation Links,"description:
The UI should be a horizontal navigation bar with links to different pages. It should be responsive, accessible, and follow a mobile-first approach.
components:
- HeaderNav: standalone component that contains the navigation links.
- NavLink: a component that takes children (the link text) and represents a single navigation link.
html:
<header><nav class=""flex justify-between mb-4 lg:mb-0""><div class=""flex-1""><HeaderNav/></div></nav></header>
component html:
HeaderNav:
<ul class=""flex flex-wrap justify-center lg:flex-nowrap lg:justify-start""><li class=""mr-6 lg:mr-12""><NavLink>Home</NavLink></li><li class=""mr-6 lg:mr-12""><NavLink>About</NavLink></li><li><NavLink>Contact</NavLink></li></ul>
NavLink:
<a href=""{href}"" class=""text-lg hover:text-{hover_color}"">{children}</a>"
Counter controls,"description:
The UI consists of a simple counter feature with three main elements:
   - A display section that shows the current count.
   - A ""+"" button to increment the count.
   - A ""-"" button to decrement the count.

   The design should be visually straightforward, with large text for the count and easily clickable buttons for incrementing and decrementing. It should be optimized for accessibility, ensuring the buttons are accessible for keyboard navigation and screen readers.
components:
- CounterDisplay: (Standalone): Displays the current count.
- IncrementButton: (Standalone): A button designed to increase the count.
- DecrementButton: (Standalone): A button designed to decrease the count.
html:
<div class=""flex flex-col items-center space-y-3 p-5""><CounterDisplay/><div class=""flex space-x-2""><IncrementButton/><DecrementButton/></div></div>
component html:
CounterDisplay:
<div class=""text-2xl font-semibold"" aria-live=""polite"">{count} </div>
IncrementButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Increment count"">+ </button>
DecrementButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Decrement count"">- </button>"
Webcam/Camera Interfaces,"description:
The UI should display a webcam/video camera interface with a live feed, a capture button, and a toggle switch to switch between the front and rear cameras.
components:
- WebcamFeed: (standalone) - displays the live webcam feed
- CaptureButton: (standalone) - a button to capture a photo/video
- CameraToggle: (standalone) - a toggle switch to switch between the front and rear cameras
html:
<div class=""flex flex-col items-center h-screen""><WebcamFeed/><div class=""flex justify-center mb-4""><CaptureButton/><CameraToggle/></div></div>
component html:
WebcamFeed:
<div class=""w-full h-full""><video class=""w-full h-full object-cover"" id=""video""></video></div>
CaptureButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Capture</button>
CameraToggle:
<label class=""switch""><input type=""checkbox""/><span class=""slider round""></span>Front/Rear</label>"
Page Content Header,"description:
The UI should be a header section that displays the title of the page content, with a responsive design that adapts to different screen sizes. It should have a clean and simple layout that makes the title stand out.
components:
- PageTitle: a standalone component that displays the title of the page content.
html:
<header class=""max-w-md mx-auto p-4""><PageTitle/></header>
component html:
PageTitle:
<h1 class=""text-3xl font-bold"">{pageTitle}</h1>"
Profile completion progress,"description:
The UI should display a circular progress bar indicating the user's profile completion progress, along with a percentage text.
components:
- ProfileCompletionProgressBar: standalone component that displays a circular progress bar.
- ProfileCompletionPercentageText: standalone component that displays the percentage text.
html:
<!-- Profile completion progress container --><div class=""flex justify-center mb-4""><!-- Profile completion progress bar --><ProfileCompletionProgressBar/><!-- Profile completion percentage text --><ProfileCompletionPercentageText/></div>
component html:
ProfileCompletionProgressBar:
<!-- Circular progress bar --><div class=""w-20 h-20 border-4 border-gray-300 border-solid rounded-full""><!-- Progress indicator --><div class=""w-20 h-20 bg-blue-500 rounded-full"" style=""width: {progressPercentage}%;""}></div></div>
ProfileCompletionPercentageText:
<!-- Percentage text --><p class=""text-lg text-gray-600"">{completion_percentage}%</p>"
Case Study and Description Text,"description:
The UI should display a section that showcases a case study with a description text. The layout should be responsive, with the description text wrapping to the next line on smaller screens.
components:
- CaseStudySection: (standalone)
- DescriptionText: (takes children)
html:
<section class=""max-w-md mx-auto p-4 pt-6 mb-4 bg-white rounded shadow-md""><CaseStudySection/><DescriptionText/></section>
component html:
CaseStudySection:
<h2 class=""text-3xl font-bold"">{case_study_title}</h2>
DescriptionText:
<p class=""text-lg leading-relaxed"">{children}</p>"
Sidebars/Dockable Panels,"description:
The UI should have a main content area with a dockable panel on the left side. The panel can be toggled open or closed. When open, it should take up a third of the screen width on larger screens and be fully visible on smaller screens.
components:
- SidebarPanel: A standalone component that contains the dockable panel content.
- MainContent: A component that takes children and wraps the main content area.
- ToggleSidebarButton: A standalone component that toggles the sidebar panel open or closed.
html:
<!-- Main container --><div class=""flex h-screen""><!-- Toggle sidebar button --><ToggleSidebarButton/><!-- Sidebar panel --><SidebarPanel/><!-- Main content area --><MainContent><!-- Main content goes here --></MainContent></div>
component html:
SidebarPanel:
<!-- Sidebar panel content --><div class=""bg-gray-200 p-4 w-64 md:w-full md:relative md:flex-grow""><!-- Panel content goes here --></div>
MainContent:
<!-- Main content area --><div class=""flex-grow p-4"">{children}</div>
ToggleSidebarButton:
<!-- Toggle sidebar button --><button class=""bg-gray-200 p-2 rounded""><i class=""fas fa-bars""></i></button>"
Error message popup with retry and cancel buttons,"description:
The UI should be a popup with an error message, a retry button, and a cancel button. The popup should have a red background to indicate an error. The retry button should be blue and have a retry icon, while the cancel button should be gray. The popup should be centered on the screen and have a slight shadow to give it depth.
components:
- ErrorPopup: Standalone component that contains the error message and buttons.
- RetryButton: Standalone component that represents the retry button.
- CancelButton: Standalone component that represents the cancel button.
html:
<!-- Error popup container --><div class=""fixed top-0 left-0 w-full h-screen bg-red-500 bg-opacity-75 flex justify-center items-center""><ErrorPopup/></div>
component html:
ErrorPopup:
<div class=""max-w-md bg-white p-4 rounded shadow-md""><p class=""text-lg font-bold text-red-700"">{error_message}</p><div class=""flex justify-between mt-4""><RetryButton/><CancelButton/></div></div>
RetryButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-redo mr-2""></i>{retry_text}</button>
CancelButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{cancel_text}</button>"
"A large, bold headline component to display the title of the featured story","description:
The UI should have a prominent headline component that grabs the user's attention, making it clear what the featured story is about. The headline should be large, bold, and centered on the screen, with a highlight color to make it stand out. On smaller screens, the headline should be slightly smaller to fit the available space.
components:
- HeadlineComponent: (Standalone): A large, bold headline component to display the title of the featured story.
html:
<div class=""container mx-auto p-4""><HeadlineComponent/></div>
component html:
HeadlineComponent:
<h1 class=""text-4xl font-bold text-blue-600 sm:text-3xl md:text-4xl lg:text-5xl"">{headline_text}</h1>"
"Green call-to-action (CTA) button with white text ""Get Started""","description:
The UI should have a prominent green call-to-action (CTA) button with white text ""Get Started"". The button should be large enough to grab the user's attention and easy to tap on mobile devices. The green color should be a highlight color to make the button stand out.
components:
- GetStartedButton: (Standalone): A green CTA button with white text ""Get Started"".
html:
<div class=""h-screen flex justify-center items-center bg-gray-50""><GetStartedButton/></div>
component html:
GetStartedButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Get Started</button>"
"Visual indicator, often a number, displaying pending notifications or messages","description:
The UI should be a small, circular or rectangular badge with a number or text indicating the number of pending notifications or messages. It should be visually striking to grab the user's attention.
components:
- Badge: component (standalone)
html:
<span class=""inline-block""><!-- notification icon --><i class=""fas fa-bell text-lg""></i><Badge/></span>
component html:
Badge:
<span class=""bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full"">{notification_count}</span>"
"A blog post component that displays a title, image, and short summary of a blog post","description:
The blog post component should be a visually appealing and informative summary of a blog post. It should display a title, image, and short summary of the post. The UI should be responsive, accessible, and easy to navigate.
components:
- BlogPostCard: (Takes Children): This component represents a single blog post. It will contain a title, image, and short summary of the post.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><BlogPostCard><!-- blog post content --></BlogPostCard></div>
component html:
BlogPostCard:
<div class=""bg-white shadow-md rounded p-4 md:p-6 lg:p-8""><h2 class=""text-2xl font-bold mb-4"">{title}</h2><img src={image_url} alt={title} class=""w-full mb-4""/><p class=""text-gray-700"">{summary}</p>{children}</div>"
"Simple, rounded profile picture avatar","description:
The UI should feature a simple, rounded profile picture avatar that is visually appealing and easy to use. The avatar should be responsive, accessible, and well-documented. It should use a consistent color palette and subtle shadows to add depth and dimension. The layout should scale nicely on different screen sizes, using Tailwind's mobile-first approach to ensure responsiveness and accessibility on mobile devices.
components:
- UserProfileAvatar: (Standalone): A rounded profile picture avatar that displays the user's profile picture.
html:
<!-- UserProfileAvatar component --><UserProfileAvatar/>
component html:
UserProfileAvatar:
<img src={profile_picture_url} alt=""User Profile Picture"" class=""rounded-full h-16 w-16 sm:h-24 sm:w-24 md:h-32 md:w-32 lg:h-40 lg:w-40 shadow-md bg-gray-50""/>"
Notification bell with unread count badge,"description:
The UI should display a notification bell icon with a small badge displaying the number of unread notifications. The badge should be positioned top-right of the bell icon.
components:
- NotificationBell: standalone component representing the notification bell icon.
- UnreadCountBadge: standalone component displaying the number of unread notifications.
html:
<div class=""flex items-center""><NotificationBell/><UnreadCountBadge/></div>
component html:
NotificationBell:
<i class=""fa fa-bell text-lg text-gray-600""></i>
UnreadCountBadge:
<div class=""bg-red-500 text-white rounded-full text-xs p-1"">{unread_count}</div>"
Span element,"description:
The UI will feature a simple span element that is designed to display inline text. This span can be used for small pieces of text such as labels, or as a part of a larger text block.
components:
- SimpleSpan: A standalone component that will render text within a span element.
html:
<div><SimpleSpan/></div>
component html:
SimpleSpan:
<!-- Simple span for displaying inline text --><span class=""text-base text-gray-700"">{textContent}</span>"
Carousel-like element for browsing through a series of images,"description:
The UI should resemble a carousel, with a series of images displayed in a horizontal row. The user can navigate through the images using previous and next buttons or by clicking on dots that represent each image. The carousel should be responsive, with the images resizing to fit the container width. On smaller screens, the carousel should display a single image at a time, with navigation controls to swipe through the images.
components:
- ImageSlide: A standalone component that displays a single image.
- CarouselDots: A standalone component that displays a series of dots, one for each image in the carousel.
- CarouselNav: A standalone component that displays previous and next navigation buttons.
- CarouselContainer: A component that takes children (ImageSlide components) and displays them in a horizontal row.
html:
<div class=""max-w-md mx-auto p-4 sm:p-6 lg:p-8""><CarouselContainer><ImageSlide/><ImageSlide/><ImageSlide/><!-- Add more ImageSlide components here --></CarouselContainer><CarouselNav/><CarouselDots/></div>
component html:
ImageSlide:
<div class=""w-full h-64 bg-cover bg-center"" style=""backgroundImage: url({image_url});""}></div>
CarouselDots:
<div class=""flex justify-center mb-4"">{num_images} dots, where each dot is a `<span class=""w-2 h-2 bg-gray-300 rounded-full mx-1"">`</div>
CarouselNav:
<div class=""flex justify-between mb-4""><button class=""text-gray-600 hover:text-gray-900"">Previous</button><button class=""text-gray-600 hover:text-gray-900"">Next</button></div>
CarouselContainer:
<div class=""flex overflow-x-hidden"">{children}</div>"
Mission statement display,"description:
A clean and simple section that prominently displays the mission statement of an organization, with a background image and a call-to-action button.
components:
- MissionStatementBackground: standalone
- MissionStatementContent: takes children
- CallToActionButton: standalone
html:
<section class=""relative h-screen""><MissionStatementBackground/><div class=""absolute inset-0 flex items-center justify-center""><MissionStatementContent><!-- mission statement content goes here --></MissionStatementContent><CallToActionButton/></div></section>
component html:
MissionStatementBackground:
<div class=""absolute inset-0 bg-noise bg-cover""></div>
MissionStatementContent:
<div class=""max-w-md text-lg text-center leading-relaxed"">{children}</div>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button>"
Page Content Header Image,"description:
The UI should display a full-width header image with a responsive design, ensuring it looks good on all devices and screen sizes. The image should be centered horizontally and take up the full width of the screen.
components:
- PageContentHeaderImage: Standalone component, displays a full-width image.
html:
<header><PageContentHeaderImage/></header>
component html:
PageContentHeaderImage:
<div class=""h-screen w-full relative""><img src=""{header_image_url}"" alt=""{header_image_alt}"" class=""w-full h-full object-cover object-center""/></div>"
Navigation Breadcrumb Link,"description:
A navigation breadcrumb link should be a small, clickable element that displays a navigation path. It should be responsive, accessible, and easy to read.
components:
- BreadcrumbLink: (standalone) - a single link in the breadcrumb navigation
- Breadcrumb: (takes children) - the container for the breadcrumb links
html:
<nav aria-label=""Breadcrumb navigation""><ol class=""flex""><Breadcrumb><BreadcrumbLink/><BreadcrumbLink/><BreadcrumbLink/></Breadcrumb></ol></nav>
component html:
BreadcrumbLink:
<li class=""mr-2""><a href=""{href}"" class=""text-gray-600 hover:text-gray-900"">{label}</a><span class=""text-gray-600"">›</span></li>
Breadcrumb:
<ul class=""flex"">{children}</ul>"
Help center link,"description:
The UI should display a link to the help center. The link should be accessible, visible, and responsive on different devices.
components:
- HelpCenterLink: a standalone component that renders a link to the help center.
html:
<nav class=""md:flex md:items-center md:justify-between p-4""><!-- other navigation links --><HelpCenterLink/></nav>
component html:
HelpCenterLink:
<a href=""{help_center_url}"" class=""text-blue-600 hover:text-blue-900 transition duration-300 ease-in-out"">Help Center</a>"
Customer Review Text,"description:
The UI should display a customer review in a clean and readable format, with the customer's name, rating, and review text.
components:
- CustomerReview: a standalone component that displays a single customer review.
- Rating: a standalone component that displays a rating (e.g., 5 stars).
- ReviewText: a standalone component that displays the review text.
html:
<div class=""flex flex-col p-4""><CustomerReview/></div>
component html:
CustomerReview:
<div class=""flex flex-col mb-4""><Rating/><h5 class=""mb-1"">{customer_name}</h5><ReviewText/></div>
Rating:
<div class=""flex mb-2"">{/* 5 star rating icons */ } <span class=""ml-2 text-sm"">{rating}/5</span></div>
ReviewText:
<p class=""text-gray-600"">{review_text}</p>"
Footer Newsletter Input,"description:
The UI should be a simple footer newsletter input field with a submit button, responsive and accessible, with a clean and minimalistic design.
components:
- FooterNewsletterInput: standalone component that contains the input field and submit button.
- NewsletterInputField: standalone component that is the input field for the newsletter email address.
- SubmitButton: standalone component that is the submit button.
html:
<footer class=""bg-gray-200 h-screen pt-12 pb-4""><div class=""container mx-auto p-4 md:p-6""><FooterNewsletterInput/></div></footer>
component html:
FooterNewsletterInput:
<div class=""w-full max-w-md mx-auto mb-4""><NewsletterInputField/><SubmitButton/></div>
NewsletterInputField:
<input type=""email"" class=""block w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Footer Sitemap Icon,"description:
The Footer Sitemap Icon UI will be a simple and clean icon at the bottom of a webpage, typically used to link to the sitemap of the website. It may include a minimalist icon to symbolize navigation (like a grid or map icon) accompanied by a small label that reads ""Sitemap.""
components:
- SitemapIcon: (Standalone)**: Represents the icon linked to the sitemap. This component encapsulates both the icon and the label.
html:
<footer class=""bg-gray-800 text-white p-4""><div class=""container mx-auto text-center""><!-- SitemapIcon component inserted here --><SitemapIcon/></div></footer>
component html:
SitemapIcon:
<a href=""{sitemap_url}"" class=""inline-flex items-center space-x-2 hover:text-gray-400""><div class=""w-6 h-6 bg-gray-700 rounded-full flex items-center justify-center""><!-- Assuming a symbol representing the sitemap; use a simple placeholder here --><span class=""text-xs text-white"">🌐</span></div><span class=""text-sm"">Sitemap</span></a>"
Company Phone Number,"description:
A simple phone number display component with a clear label and a responsive design that adapts to different screen sizes.
components:
- PhoneNumberComponent: (standalone)
html:
<div class=""flex flex-wrap justify-center mb-4""><PhoneNumberComponent/></div>
component html:
PhoneNumberComponent:
<p class=""text-lg font-medium"">Phone: <span class=""text-primary"">{phone_number}</span></p>"
A loading indicator animation that displays a spinning circle,"description:
The UI should display a spinning circle animation to indicate that the application is loading. The circle should be large enough to grab the user's attention but not overwhelm the screen. The animation should be smooth and fluid to convey a sense of progress. The color scheme should be consistent with the rest of the application, with a highlight color to make the loading indicator stand out.
components:
- LoadingIndicator: (Standalone): A spinning circle animation that indicates the application is loading.
html:
<div class=""h-screen w-screen flex justify-center items-center""><LoadingIndicator/></div>
component html:
LoadingIndicator:
<div class=""animate-spin rounded-full h-12 w-12 border-4 border-t-4 border-blue-500 border-r-gray-200""><div class=""h-full w-full rounded-full bg-gray-200""/></div>"
User Comments and Feedback,"description:
The UI should display a list of user comments and feedback, with each comment showing the user's name, profile picture, comment text, and a timestamp. The UI should also include a form for users to submit new comments.
components:
- CommentCard: (Standalone): Displays a single comment, including the user's name, profile picture, comment text, and timestamp.
- CommentForm: (Standalone): Provides a form for users to submit new comments.
- CommentList: (Takes Children): Displays a list of `CommentCard` components.
- UserProfilePicture: (Standalone): Displays a user's profile picture.
html:
<div class=""max-w-md mx-auto p-4""><CommentForm/><CommentList><CommentCard/><CommentCard/><!-- more CommentCard components here --></CommentList></div>
component html:
CommentCard:
<div class=""flex mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-600"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex mb-4""><input type=""text"" placeholder=""Enter your comment..."" class=""w-full p-2""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
CommentList:
<ul class=""list-none mb-4"">{children}</ul>
UserProfilePicture:
<img src={profile_picture_url} class=""w-12 h-12 rounded-full"" alt=""User Profile Picture""/>"
Social Media Feed Footer,"description:
The Social Media Feed Footer should be a responsive footer section that displays social media links and a copyright notice. On larger screens, the social media links should be aligned to the right, while on smaller screens, they should stack vertically.
components:
- SocialMediaLink: A standalone component that displays a single social media link.
- CopyrightNotice: A standalone component that displays a copyright notice.
- SocialMediaFeedFooter: A component that takes children and displays the social media links and copyright notice.
html:
<footer class=""flex flex-wrap justify-center md:justify-end py-4""><SocialMediaFeedFooter><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/><CopyrightNotice/></SocialMediaFeedFooter></footer>
component html:
SocialMediaLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"" href=""{social_media_url}"">{social_media_icon} {social_media_name}</a>
CopyrightNotice:
<p class=""text-sm text-gray-600"">&copy; {year} {company_name}. All rights reserved.</p>
SocialMediaFeedFooter:
<div class=""flex flex-wrap justify-center md:flex-row md:justify-end"">{children}</div>"
"Divider component with a thin, neon green line","description:
The Divider component should be a thin, neon green line that separates different sections of the UI. It should be responsive and adapt to different screen sizes.
components:
- DividerComponent: (Standalone): A thin, neon green line that separates different sections of the UI.
html:
<!-- The top level UI might contain multiple DividerComponents to separate sections --><div class=""flex flex-col gap-4""><!-- Add some spacing between sections --><!-- Section 1 --><div>Section 1 content</div><DividerComponent/><!-- Separate Section 1 from Section 2 --><!-- Section 2 --><div>Section 2 content</div><DividerComponent/><!-- Separate Section 2 from Section 3 --><!-- Section 3 --><div>Section 3 content</div></div>
component html:
DividerComponent:
<!-- A thin, neon green line with some margin to separate sections --><hr class=""h-px bg-green-400 mx-4""/>"
A simple round avatar icon for instructors,"description:
The instructor avatar icon should be a circular element that displays the instructor's initials or a small profile picture. The avatar should be responsive and scale well on different screen sizes. It should also have a subtle highlight color to make it stand out.
components:
- Avatar: (Standalone): A circular element that displays the instructor's initials or a small profile picture.
html:
<div class=""flex justify-center mb-4""><Avatar/></div>
component html:
Avatar:
<div class=""w-12 h-12 rounded-full bg-gray-100 shadow-md flex justify-center items-center""><span class=""text-lg font-bold"">{instructorInitials}</span></div>"
Navigation menu displayed in a vertical column alongside the main content,"description:
The UI should display a navigation menu in a vertical column alongside the main content. The navigation menu should be responsive, and the layout should adapt to different screen sizes.
components:
- SideNav: A standalone component that contains the navigation menu items.
- NavItem: A component that takes children (the link text) and represents a single navigation menu item.
- MainContent: A standalone component that contains the main content of the page.
html:
<div class=""flex h-screen""><SideNav/><MainContent/></div>
component html:
SideNav:
<nav class=""w-64 bg-gray-100 p-4""><NavItem>Menu Item 1</NavItem><NavItem>Menu Item 2</NavItem><NavItem>Menu Item 3</NavItem><!-- Add more NavItems here --></nav>
NavItem:
<a href=""{nav_item_link}"" class=""block p-2 hover:bg-gray-200"">{children}</a>
MainContent:
<div class=""flex-1 p-4""><!-- Main content goes here -->{main_content_text}</div>"
Role-Based Access: Control user permissions,"description:
The UI should display a list of users with their corresponding roles and permissions. The list should be responsive, accessible, and easy to navigate. Each user's information should be displayed in a consistent and clear format.
components:
- RoleBadge: standalone component that displays a role's name and color
- PermissionList: standalone component that displays a list of permissions
- UserList: component that takes children, displays a list of users
html:
<main class=""max-w-md mx-auto p-4 pt-6""><h1 class=""text-2xl font-bold mb-4"">Role-Based Access Control</h1><UserList><!-- User list will be inserted here --></UserList></main>
component html:
RoleBadge:
<span class=""bg-{role_color} text-white px-2 py-1 rounded"">{role_name}</span>
PermissionList:
<ul class=""list-disc pl-4"">{permissions.map(permission =>( <li key={permission}>{permission}</li>))}</ul>
UserList:
<ul class=""divide-y divide-gray-200"">{children}</ul>"
Quote carousels,"description:
The UI should be a quote carousel that displays a series of quotes with images and attributions. The carousel should be responsive, mobile-first, and accessible.
components:
- QuoteCarousel: A component that takes children (an array of `QuoteCard` components) and displays them in a carousel layout.
html:
<div class=""container mx-auto p-4""><QuoteCarousel><!-- Quotes will be rendered here --></QuoteCarousel></div>
component html:
QuoteCarousel:
<div class=""carousel"">{children} <!-- Navigation buttons will be rendered here --><button class=""prev-button"" aria-label=""Previous slide"">«</button><button class=""next-button"" aria-label=""Next slide"">»</button></div>"
QR code generator/display,"description:
The UI should display a QR code generator with a text input field to enter the text to be encoded, a button to generate the QR code, and a display area to show the generated QR code. The UI should be responsive, mobile-first, and accessible.
components:
- QrCodeGenerator: A standalone component that contains the text input field and generate button.
- QrCodeDisplay: A component that takes children (the generated QR code) and displays it.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><QrCodeGenerator/><QrCodeDisplay><img src=""{qrcode_url}"" alt=""Generated QR code""/></QrCodeDisplay></div>
component html:
QrCodeGenerator:
<div class=""flex flex-col mb-4""><input type=""text"" id=""qr-code-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter text to encode""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Generate QR Code</button></div>
QrCodeDisplay:
<div class=""flex justify-center mb-4"">{children}</div>"
Image slider,"description:
The UI should be a responsive image slider that displays multiple images in a carousel-like format. It should be accessible and have a mobile-first design.
components:
- ImageSlide: A standalone component that displays a single image.
- ImageSlider: A component that takes children (multiple **ImageSlide** components) and renders them in a carousel-like format.
html:
<div class=""container mx-auto p-4""><ImageSlider><ImageSlide/><ImageSlide/><ImageSlide/></ImageSlider></div>
component html:
ImageSlide:
<div class=""w-full h-64 overflow-hidden rounded-lg""><img src={image_url} alt={image_alt} class=""w-full h-full object-cover object-center""/></div>
ImageSlider:
<div class=""relative flex justify-center""><button class=""absolute left-0 z-10"">‹</button><div class=""flex overflow-x-auto snap-x"">{children} </div><button class=""absolute right-0 z-10"">›</button></div>"
Direct message button for private chats,"description:
The UI should be a small, circular button with a messaging icon inside. When hovered, the button should change color to indicate interactivity. The button should be accessible on both desktop and mobile devices.
components:
- DirectMessageButton: A standalone component representing the direct message button.
html:
<button class=""rounded-full bg-gray-200 hover:bg-gray-300 py-2 px-4 text-lg""><DirectMessageButton/></button>
component html:
DirectMessageButton:
<!-- Direct message icon --><i class=""fas fa-comment-dots text-xl text-gray-600""></i>"
Testimonial Quote Author,"description:
The UI should be a testimonial quote component that displays a quote, the author's name, and their title. The component should be responsive and mobile-friendly, with a clean and simple design.
components:
- TestimonialQuote: (standalone): The main testimonial quote component.
- QuoteText: (standalone): The quote text component.
- AuthorInfo: (standalone): The author's name and title component.
html:
<div class=""flex flex-col mb-4""><TestimonialQuote/></div>
component html:
TestimonialQuote:
<blockquote class=""px-4 py-2 bg-gray-100 rounded-lg""><QuoteText/><AuthorInfo/></blockquote>
QuoteText:
<p class=""text-lg font-bold"">{quote_text}</p>
AuthorInfo:
<p class=""text-sm text-gray-600"">{author_name}, {author_title}</p>"
"A component to display a list of event categories (e.g. music, comedy, sports)","description:
The UI should be a list of categorizations with clear labels and icons to differentiate between each category. The list should be responsive, with each item taking up the full width on smaller screens and displaying inline on larger screens. The active category should be highlighted with a distinctive background and text color.
components:
- EventCategoryList: (Takes Children): A container for the list of event categories.
- EventCategoryItem: (Takes Children): A single item in the list, displaying the category name and icon.
html:
<EventCategoryList><EventCategoryItem>Music</EventCategoryItem><EventCategoryItem>Comedy</EventCategoryItem><EventCategoryItem>Sports</EventCategoryItem><!-- Add more categories here --></EventCategoryList>
component html:
EventCategoryList:
<ul class=""flex flex-wrap justify-center sm:flex-row"">{children}</ul>
EventCategoryItem:
<li class=""px-4 py-2 cursor-pointer hover:bg-orange-100 hover:text-orange-600""><span class=""inline-flex items-center""><svg><!-- icon for the category, e.g. music note, laughing face, etc. --></svg><span>{children}</span></span></li>"
Call to Action Link Text,"description:
A call to action link text that is responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- CallToActionLink: A standalone component that renders a call to action link text.
html:
<a href={link_href} class=""text-sm md:text-base lg:text-lg font-bold text-primary-600 hover:text-primary-800""><CallToActionLink/></a>
component html:
CallToActionLink:
<span>{call_to_action_text}</span>"
A thumbnail image component with a white border and a faint shadow effect,"description:
The thumbnail image component should be a rectangular container with a white border and a faint shadow effect to give it a subtle 3D appearance. The image should be centered within the container, and the border should be thin and consistent on all sides. On smaller screens, the component should be more compact, and on larger screens, it should be slightly larger to accommodate more detail.
components:
- ThumbnailImage: (Takes Children): A rectangular container with a white border and a faint shadow effect that contains an image.
html:
<div class=""flex justify-center mb-4 md:mb-6 lg:mb-8""><ThumbnailImage>{children}
</ThumbnailImage></div>
component html:
ThumbnailImage:
<div class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 bg-white rounded-md overflow-hidden shadow-md border border-white"">{children}</div>"
"User profile component, featuring a round avatar icon, username, and user bio","description:
The UI should have a clean and modern design, with a focus on showcasing the user's profile information. The avatar icon should be prominently displayed, with the username and bio placed below it. The layout should be responsive, with the avatar icon and text elements adjusting size and layout based on screen size.
components:
- UserProfile: (Takes Children): This component will contain the entire user profile UI.
- AvatarIcon: (Standalone): A round icon displaying the user's avatar image.
- Username: (Standalone): A text element displaying the user's username.
- UserBio: (Standalone): A text element displaying the user's bio.
html:
<UserProfile><div class=""flex flex-col items-center p-4 md:p-6 lg:p-8""><AvatarIcon/><Username/><UserBio/></div></UserProfile>
component html:
UserProfile:
<div class=""max-w-md mx-auto"">{children}</div>
AvatarIcon:
<img src=""{avatar_url}"" alt=""User Avatar"" class=""w-24 h-24 rounded-full object-cover shadow-md""/>
Username:
<h2 class=""text-xl font-bold"">{username}</h2>
UserBio:
<p class=""text-gray-600"">{bio}</p>"
Table transitions,"description:
A table with transitioning rows when they are added or removed.
components:
- TableRow: A single row in the table, standalone.
- TableBody: The container for the table rows, takes children.
html:
<table class=""table-auto""><thead><tr><th>Column 1</th><th>Column 2</th></tr></thead><TableBody><TableRow/><!-- More TableRow components here --></TableBody></table>
component html:
TableRow:
<tr class=""transition duration-300 ease-in-out""><td>{cell1}</td><td>{cell2}</td></tr>
TableBody:
<tbody>{children}</tbody>"
"A hero section with a high-quality background image, a headline, and a call-to-action button","description:
The hero section should be visually appealing, with a high-quality background image that sets the tone for the rest of the UI. The headline should be prominent and easily readable, and the call-to-action button should be prominent and inviting. The layout should scale well on different screen sizes.
components:
- HeroBackground: (Standalone): A container element that holds the background image.
- HeroContent: (Takes Children): A container element that holds the headline and call-to-action button.
- HeroHeadline: (Standalone): A heading element that displays the main headline.
- HeroCTA: (Standalone): A button element that serves as the call-to-action.
html:
<section class=""h-screen relative overflow-hidden""><HeroBackground/><HeroContent><HeroHeadline/><HeroCTA/></HeroContent></section>
component html:
HeroBackground:
<div class=""absolute inset-0 w-full h-full bg-cover bg-center"" style=""background-image: url('{background_image_url}');""></div>
HeroContent:
<div class=""container mx-auto p-4 lg:p-8 xl:p-12"">{children}</div>
HeroHeadline:
<h1 class=""text-4xl lg:text-5xl xl:text-6xl font-bold text-white"">{headline_text}</h1>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Simple product listing with thumbnails,"description:
A grid of product thumbnails with a title and price overlay.
components:
- ProductThumbnail: standalone
- ProductListing: takes children (`ProductThumbnail` components)
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><h1>Product Listing</h1><div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4""><ProductThumbnail/><ProductThumbnail/><ProductThumbnail/><!-- repeat ProductThumbnail components here --></div></div>
component html:
ProductThumbnail:
<div class=""relative overflow-hidden shadow-md rounded-lg""><img src=""{product_image}"" alt=""{product_name}"" class=""w-full h-48 object-cover""/><div class=""absolute bottom-0 left-0 p-4 text-white""><h5>{product_name}</h5><p>{product_price}</p></div></div>
ProductListing:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8"">{children}</div>"
"A simple navigation bar with links to main sections (Workouts, Community, Profile)","description:
The navigation bar should be a prominent feature at the top of the screen, with a clean and simple design that adapts to different screen sizes. On smaller screens, the links should stack vertically to ensure readability, while on larger screens, they should be horizontal to save space. The navigation bar should have a subtle background gradient to add depth, and the links should have a hover effect to indicate interactivity.
components:
- NavBar: (Takes Children): A container for the navigation links.
- NavLink: (Takes Children): A single navigation link with a hover effect.
html:
<NavBar><NavLink>Workouts</NavLink><NavLink>Community</NavLink><NavLink>Profile</NavLink></NavBar>
component html:
NavBar:
<nav class=""fixed top-0 left-0 w-full h-16 bg-gradient-to-r from-gray-200 to-gray-300 shadow-md""><div class=""container mx-auto p-4 flex justify-between"">{children}</div></nav>
NavLink:
<a class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">{children}</a>"
Breadcrumb Separator Line,"description:
The UI should be a horizontal line that separates each breadcrumb item, providing visual separation between them.
components:
- BreadcrumbSeparator: (standalone)
html:
<nav aria-label=""Breadcrumb""><!-- breadcrumb items go here --><BreadcrumbSeparator/><!-- breadcrumb items go here --></nav>
component html:
BreadcrumbSeparator:
<span class=""w-1 h-1 bg-gray-300 rounded-full inline-block mx-2"" aria-hidden=""true""></span>"
"A component that displays a list of featured games with title, image, and short description","description:
The UI should display a list of featured games with a title, image, and short description for each game. The list should be responsive, adjustable to different screen sizes, and easily accessible on mobile devices. The games should be presented in a grid layout on larger screens and a stacked layout on smaller screens. Each game item should have a clear visual hierarchy, with the title and image standing out, and the description providing additional context.
components:
- FeaturedGamesList: (Takes Children): A container component that wraps the list of featured games.
- FeaturedGameItem: (Takes Children): A component that represents a single featured game, including its title, image, and description.
html:
<div class=""container mx-auto p-4 lg:p-6""><h2 class=""text-2xl font-bold mb-4"">Featured Games</h2><FeaturedGamesList><!-- Featured game items will be rendered here --></FeaturedGamesList></div>
component html:
FeaturedGamesList:
<ul class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</ul>
FeaturedGameItem:
<li class=""flex flex-col mb-4""><img src=""{gameImage}"" alt=""{gameTitle}"" class=""w-full mb-2""/><h3 class=""text-lg font-bold"">{gameTitle}</h3><p class=""text-gray-600"">{gameDescription}</p>{children}</li>"
Featured Image Lightbox,"description:
The UI should display a featured image with a lightbox effect, meaning when the image is clicked, it opens in a full-screen overlay. The image should be responsive and adaptable to different screen sizes. The lightbox overlay should have a darkened background and a close button.
components:
- FeaturedImage: standalone component that displays the featured image
- Lightbox: component that takes a child element (the featured image) and displays it in a full-screen overlay
- LightboxCloseButton: standalone component that displays a close button for the lightbox overlay
html:
<div class=""container mx-auto p-4 lg:p-6""><FeaturedImage/></div><div class=""hidden lg:block fixed top-0 left-0 w-full h-full bg-black bg-opacity-75"" id=""lightbox""><Lightbox><FeaturedImage/></Lightbox><LightboxCloseButton/></div>
component html:
FeaturedImage:
<img src={image_src} alt={image_alt} class=""w-full h-64 object-cover rounded-md lg:h-96""/>
Lightbox:
<div class=""fixed top-0 left-0 w-full h-full p-4 lg:p-6"">{children}</div>
LightboxCloseButton:
<button class=""absolute top-0 right-0 p-4 text-2xl text-white"" aria-label=""Close lightbox"">&times;</button>"
"Featured pet component with large image, name, and short description","description:
The Featured Pet component should be a prominent section on the page, showcasing a pet's image, name, and short description. The image should be large and take up most of the space, with the name and description displayed below the image. The component should be responsive, with the image and text scaling properly on different screen sizes.
components:
- FeaturedPet: (Takes Children): A component that displays a large image of a pet, along with its name and short description.
- PetImage: (Standalone): An image component that displays the pet's photo.
- PetName: (Standalone): A component that displays the pet's name in a prominent font.
- PetDescription: (Standalone): A component that displays a short description of the pet.
html:
<FeaturedPet><PetImage/><PetName/><PetDescription/></FeaturedPet>
component html:
FeaturedPet:
<div class=""md:flex md:flex-col lg:flex-row items-center p-4 lg:p-8"">{children}</div>
PetImage:
<img src={petImageUrl} alt={petName} class=""w-full md:w-1/2 lg:w-2/3 xl:w-3/4 rounded-md shadow-md""/>
PetName:
<h2 class=""text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold"">{petName}</h2>
PetDescription:
<p class=""text-lg md:text-xl lg:text-2xl xl:text-3xl"">{petDescription}</p>"
Header User Profile Picture,"description:
The UI should display a circular user profile picture with a dropdown menu that appears when the user clicks on the profile picture.
components:
- UserProfilePicture: (standalone): Displays the user's profile picture.
- DropdownMenu: (takes children): Displays a dropdown menu with user profile options.
html:
<nav class=""flex justify-end""><UserProfilePicture/><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></nav>
component html:
UserProfilePicture:
<div class=""rounded-full h-10 w-10 overflow-hidden""><img src=""{profile_picture_url}"" alt=""User Profile Picture"" class=""object-cover h-full w-full""/></div>
DropdownMenu:
<div class=""absolute right-0 mt-2 w-48 bg-white rounded shadow-md"">{children}</div>"
Contact list with avatar and online status,"description:
A list of contacts with their avatars and online status indicators. The list should be responsive, with each contact item taking up the full width on mobile devices and arranging horizontally on larger screens.
components:
- ContactItem: A standalone component representing a single contact.
- Avatar: A standalone component representing the avatar image of a contact.
- OnlineStatus: A standalone component indicating the online status of a contact.
html:
<main class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Contacts</h2><ul class=""flex flex-wrap justify-center""><ContactItem/><ContactItem/><ContactItem/></ul></main>
component html:
ContactItem:
<li class=""flex items-center mb-4""><Avatar/><div class=""ml-2""><p class=""text-lg"">{contact_name}</p><OnlineStatus/></div></li>
Avatar:
<img src={avatar_url} alt=""{contact_name}'s avatar"" class=""w-12 h-12 rounded-full""/>
OnlineStatus:
<span class={`text-{online_status === 'online' ? 'green-500' : 'gray-500'}`}>{online_status === 'online' ? 'Online' : 'Offline'}</span>"
Personal quote or mantra with fade-in animation,"description:
The UI should display a personal quote or mantra in a prominent and visually appealing way. The quote should fade in when the component is rendered.
components:
- QuoteComponent: (standalone) - displays the quote with a fade-in animation.
html:
<div class=""container mx-auto p-4 max-w-md""><QuoteComponent/></div>
component html:
QuoteComponent:
<p class=""text-2xl font-bold animate-fade-in"">{quote_text}</p>"
Product Price Original,"description:
The UI should display the original price of a product, with a strikethrough and a discounted price alongside.
components:
- ProductPriceOriginal: (standalone)
- DiscountedPrice: (standalone)
html:
<div class=""flex items-center""><ProductPriceOriginal/><DiscountedPrice/></div>
component html:
ProductPriceOriginal:
<p class=""text-lg line-through"">{originalPrice}</p><!-- original price with a strikethrough -->
DiscountedPrice:
<p class=""text-lg"">{discountedPrice}</p><!-- discounted price -->"
Social Media Embedded Posts,"description:
The UI should display a list of social media embedded posts, with each post showing the social media platform's icon, the post's content, and any additional metadata such as the author's name and timestamp. The UI should be responsive, accessible, and SEO-friendly.
components:
- SocialMediaPost: a standalone component representing a single social media post.
- SocialMediaIcon: a standalone component representing a social media platform's icon.
- PostContent: a component that takes children, representing the content of a social media post.
- PostMetadata: a component that takes children, representing the metadata of a social media post.
html:
<div class=""container mx-auto p-4 md:p-8""><h2 class=""text-2xl font-bold mb-4"">Social Media Embedded Posts</h2><ul class=""list-none mb-0""><li class=""mb-4""><SocialMediaPost/></li><!-- Add more list items for each social media post --></ul></div>
component html:
SocialMediaPost:
<li class=""flex mb-4""><SocialMediaIcon/><div class=""flex-1 ml-4""><PostContent>{post_content}</PostContent><PostMetadata>{author_name} - {timestamp}</PostMetadata></div></li>
SocialMediaIcon:
<img src={social_media_icon_url} alt={social_media_platform_name} class=""h-8 w-8 mr-2""/>
PostContent:
<p>{children}</p>
PostMetadata:
<p class=""text-gray-600 text-sm"">{children}</p>"
A grid of movie/TV show posters with rounded corners and a subtle shadow effect,"description:
The UI should be a responsive grid of movie/TV show posters with rounded corners and a subtle shadow effect. The grid should scale well on different screen sizes, with a maximum of 3 columns on large screens and 1 column on small screens. The posters should have a hover effect to highlight the title and rating.
components:
- PosterGrid: (Takes Children): A grid of posters that scales based on screen size.
html:
<div class=""container mx-auto p-4 lg:p-8""><PosterGrid><!-- multiple Poster components will be rendered here --></PosterGrid></div>
component html:
PosterGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Sidebar that remains fixed as users scroll through content,"description:
The UI should have a fixed sidebar that remains stationary as the user scrolls through the content. The sidebar should be positioned on the left side of the screen and should not move even when the user scrolls vertically.
components:
- Sidebar: (standalone): The sidebar component that remains fixed as the user scrolls.
- ContentArea: (takes children): The content area where the main content is displayed.
html:
<div class=""flex h-screen""><Sidebar/><ContentArea><!-- content goes here --></ContentArea></div>
component html:
Sidebar:
<div class=""fixed top-0 left-0 w-64 h-screen bg-gray-100 p-4""><!-- sidebar content goes here --></div>
ContentArea:
<div class=""ml-64 p-4"">{children}</div>"
Error message display,"description:
The UI should be a simple error message display that shows an error message in a red box with a clear and concise message.
components:
- ErrorMessageDisplay: (standalone) - displays an error message
- ErrorBox: (takes children) - a red box that contains the error message
html:
<ErrorMessageDisplay/>
component html:
ErrorMessageDisplay:
<div class=""bg-red-500 text-white p-4 rounded""><ErrorBox>{errorMessage}</ErrorBox></div>
ErrorBox:
<p class=""text-lg"">{children}</p>"
A title header with a large font size and bold font weight,"description:
The title header component should have a large font size and bold font weight to grab the user's attention. It should be centered on the screen and have a subtle shadow to add depth. On smaller screens, the font size should be slightly reduced to fit the screen width.
components:
- TitleHeader: (Standalone): This component displays a large, bold title.
html:
<div class=""flex justify-center mb-4""><TitleHeader/></div>
component html:
TitleHeader:
<h1 class=""text-4xl font-bold drop-shadow-md text-emerald-500"">{title_text}</h1>"
A brief summary text in a smaller font size and a lighter grey color,"description:
A brief summary text in a smaller font size and a lighter grey color, making it easy to scan and distinguish from other content on the page.
components:
- SummaryText: (Standalone): A brief summary text in a smaller font size and a lighter grey color.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><SummaryText/></div>
component html:
SummaryText:
<p class=""text-sm text-gray-400"">{summary_text}</p>"
A search bar component with a white background and a magnifying glass icon,"description:
The search bar component should have a white background, a magnifying glass icon on the left, and a text input field on the right. The component should be responsive, with the input field growing or shrinking based on the screen size. On smaller screens, the icon and input field should be stacked vertically to ensure accessibility.
components:
- SearchBar: (Takes Children): A container component that wraps the search icon and input field.
- SearchIcon: (Standalone): A component that displays a magnifying glass icon.
- SearchInput: (Standalone): A component that renders a text input field.
html:
<SearchBar><SearchIcon/><SearchInput/></SearchBar>
component html:
SearchBar:
<div class=""bg-white flex flex-wrap items-center py-2 px-4 rounded-md"">{children}</div>
SearchIcon:
<i class=""fas fa-search text-gray-500 p-2""></i>
SearchInput:
<input type=""text"" class=""px-2 py-1 rounded-md border-none w-full"" placeholder=""Search..."">"
Newsletter archive display,"description:
The UI for the Newsletter Archive display should be simplistic and organized. It should present a list of newsletter entries, each with a title, a short description, and a link to view the full newsletter. These should be arranged in a chronological order, likely with the newest entries at the top. The layout needs to be responsive, scaling well from mobile views to desktop displays.
components:
- NewsletterEntry: (Standalone)**: This component represents a single newsletter item. It includes a title, a description, and a ""Read More"" link.
- NewsletterList: (Takes children)**: This component acts as a container for multiple NewsletterEntry components.
html:
<main class=""p-4""><h1 class=""text-xl font-bold text-center my-4"">Newsletter Archive</h1><NewsletterList><NewsletterEntry/><NewsletterEntry/><NewsletterEntry/><!-- Additional NewsletterEntry components can be added here --></NewsletterList></main>
component html:
NewsletterEntry:
<div class=""border p-2 mb-2 rounded-lg""><h2 class=""text-lg font-semibold"">{newsletter_title}</h2><p class=""text-gray-600"">{newsletter_description}</p><a href=""{newsletter_link}"" class=""text-blue-500 hover:underline"">Read More</a></div>
NewsletterList:
<div class=""space-y-3"">{children} </div>"
"Hero section with a high-quality image of a person exercising, overlaid with a motivational quote in white text","description:
The hero section should be a prominent, visually appealing section that immediately grabs the user's attention. It should feature a high-quality image of a person exercising, with a motivational quote overlaid on top of the image. The quote should be in white text to provide sufficient contrast with the image. The image should be responsive, scaling up or down depending on the screen size. The quote should be easy to read and understand, even on smaller screen sizes.
components:
- HeroImage: (Standalone): A responsive image component that scales up or down depending on the screen size.
- MotivationalQuote: (Takes Children): A component that displays a motivational quote in white text.
html:
<section class=""h-screen flex justify-center items-center relative""><HeroImage/><MotivationalQuote>{motivational_quote_text}</MotivationalQuote></section>
component html:
HeroImage:
<img class=""object-cover h-full w-full"" src=""{hero_image_url}""/>
MotivationalQuote:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl text-white"">{children}</div>"
"A ""Designer of the Month"" section with a photo, name, and short bio","description:
The UI should feature a prominent display of the designer's photo, with their name and bio displayed prominently below. The design should be clean and modern, with a focus on showcasing the designer's information. The UI should scale well on different screen sizes, with the photo and text resizing to fit different devices.
components:
- DesignerProfile: (Takes Children): A container component that holds the designer's photo, name, and bio.
- ProfilePicture: (Standalone): A component that displays the designer's photo.
- DesignerInfo: (Takes Children): A component that displays the designer's name and bio.
html:
<section class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><DesignerProfile><ProfilePicture/><DesignerInfo><h2 class=""text-3xl leading-tight"">{designer_name}</h2><p class=""text-lg"">{designer_bio}</p></DesignerInfo></DesignerProfile></section>
component html:
DesignerProfile:
<div class=""flex flex-col lg:flex-row items-center justify-center"">{children}</div>
ProfilePicture:
<img src={profile_picture_url} alt=""Designer Profile Picture"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 rounded-full object-cover"">
DesignerInfo:
<div class=""ml-0 lg:ml-4"">{children}</div>"
Collaborator Permission Management System,"description:
The UI for a Collaborator Permission Management System should feature a main dashboard where permissions for different collaborators can be managed. It would typically include:
   - A header with the system’s name or logo.
   - A sidebar for navigation through different sections such as Home, Users, Settings, etc.
   - A main content area where the list of collaborators with their respective permissions are displayed.
   - Each collaborator entry might have an action button to edit permissions.
   - A footer with additional information or links relevant to the management system.
components:
- Header: (Standalone)**: Contains the logo or name of the system.
- Sidebar: (Standalone)**: Navigation links to various parts of the system.
- CollaboratorList: (Standalone)**: Displays the list of collaborators and their permissions.
- Footer: (Standalone)**: Contains copyright and other pertinent links.
html:
<!DOCTYPE html><html lang=""en""><head><meta charset=""UTF-8""><meta name=""viewport"" content=""width=device-width, initial-scale=1.0""><title>Collaborator Permission Management</title></head><body class=""flex flex-col h-screen""><header class=""bg-gray-800 text-white p-4""><Header/></header><div class=""flex flex-1""><aside class=""bg-gray-700 w-64 p-6 text-white""><Sidebar/></aside><main class=""flex-1 p-6""><CollaboratorList/></main></div><footer class=""bg-gray-800 text-white p-4""><Footer/></footer></body></html>
component html:
Header:
<!-- Simple header displaying system name --><h1 class=""text-xl font-bold"">Collaborator Management System</h1>
Sidebar:
<!-- Navigation sidebar with links to system's sections --><nav><ul><li><a href=""{home_url}"" class=""block py-2"">Home</a></li><li><a href=""{users_url}"" class=""block py-2"">Users</a></li><li><a href=""{settings_url}"" class=""block py-2"">Settings</a></li></ul></nav>
CollaboratorList:
<!-- List of collaborators with their permissions --><div class=""overflow-auto""><table class=""min-w-full text-sm text-left""><thead class=""text-xs uppercase""><tr><th class=""p-4"">Name</th><th class=""p-4"">Permissions</th><th class=""p-4"">Actions</th></tr></thead><tbody><tr><td class=""p-4"">{user1_name}</td><td class=""p-4"">{user1_permissions}</td><td class=""p-4""><button class=""bg-blue-500 hover:bg-blue-700 text-white py-1 px-3 rounded"">Edit</button></td></tr>{/* More rows can be added similarly */} </tbody></table></div>
Footer:
<!-- Footer showing copyright and other information --><p>© {current_year} Collaborator Permission Management. All rights reserved.</p>"
Social Media Feed Header,"description:
The Social Media Feed Header should be a horizontal bar that displays the social media platform's logo, a title, and a navigation menu. It should be responsive, adapting to different screen sizes and devices.
components:
- SocialMediaLogo: A standalone component that displays the social media platform's logo.
- FeedTitle: A standalone component that displays the title of the social media feed.
- NavMenu: A component that takes children, which are navigation menu items.
html:
<header class=""container mx-auto p-4 flex justify-between items-center""><SocialMediaLogo/><FeedTitle/><NavMenu><!-- navigation menu items will be inserted here --></NavMenu></header>
component html:
SocialMediaLogo:
<img src={logo_url} alt=""Social Media Logo"" class=""h-8 w-8 mr-2""/>
FeedTitle:
<h1 class=""text-2xl font-bold"">{feed_title}</h1>
NavMenu:
<nav class=""flex justify-end"">{children}</nav>"
"Links to the website's social media profiles, often displayed as small icons","description:
The UI should display a row of small icons representing the website's social media profiles. The icons should be evenly spaced and centered horizontally. On smaller screens, the icons should wrap to the next line if necessary.
components:
- SocialMediaLinks: (takes children): A container for multiple `SocialMediaLink` components
html:
<nav class=""flex justify-center""><ul class=""flex flex-wrap justify-center""><SocialMediaLinks><!-- Social media links will be inserted here --></SocialMediaLinks></ul></nav>
component html:
SocialMediaLinks:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Error/Success Messages,"description:
The UI should display error or success messages in a clear and concise manner, with a clear visual indicator of the message type (error or success). The message should be easily readable and accessible on various devices.
components:
- ErrorMessage: standalone component to display an error message
- SuccessMessage: standalone component to display a success message
- MessageType: standalone component to display a generic message (can be used for error or success messages)
html:
<div class=""flex justify-center""><ErrorMessage/><!-- or --><SuccessMessage/><!-- or --><MessageType/></div>
component html:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{error_message}</strong><span class=""block"">{error_details}</span></div>
SuccessMessage:
<div class=""bg-green-100 border border-green-500 text-green-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{success_message}</strong><span class=""block"">{success_details}</span></div>
MessageType:
<div class=""bg-{message_color}-100 border border-{message_color}-500 text-{message_color}-700 px-4 py-3 rounded relative""><strong class=""font-bold"">{message}</strong><span class=""block"">{message_details}</span></div>"
Thumbnail generator for video previews,"description:
A responsive grid of video thumbnails with a preview image, video title, and duration. Each thumbnail should have a hover effect and be accessible.
components:
- VideoThumbnail: A standalone component representing a single video thumbnail.
- ThumbnailGrid: A container component that takes children, which are `VideoThumbnail` components.
html:
<div class=""container mx-auto p-4""><ThumbnailGrid><VideoThumbnail/><VideoThumbnail/><VideoThumbnail/><!-- Add more VideoThumbnail components as needed --></ThumbnailGrid></div>
component html:
VideoThumbnail:
<div class=""bg-gray-200 hover:bg-gray-300 rounded-md overflow-hidden shadow-md transition duration-300 ease-in-out""><img src={thumbnail_url} alt={video_title} class=""w-full h-40 object-cover""/><div class=""p-2""><h5 class=""text-lg font-bold"">{video_title}</h5><p class=""text-sm text-gray-600"">{duration}</p></div></div>
ThumbnailGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Reviews,"description:
The UI should display a list of reviews with author names, ratings, and review text. The reviews should be displayed in a card layout with a maximum width of 800px and centered horizontally on larger screens.
components:
- ReviewCard: A standalone component that displays a single review.
- ReviewList: A component that takes children ( ReviewCard components ) and displays them in a list.
html:
<div class=""max-w-2xl mx-auto p-4""><ReviewList><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewList></div>
component html:
ReviewCard:
<div class=""bg-white shadow-md p-4 mb-4""><h4 class=""text-lg font-bold"">{author_name}</h4><div class=""flex items-center""><span class=""text-yellow-500"">{rating}/5</span><!-- rating stars icon --></div><p class=""text-gray-600"">{review_text}</p></div>
ReviewList:
<ul class=""list-none"">{children}</ul>"
A featured image component with a subtle shadow effect,"description:
The featured image component should have a subtle shadow effect to give it a sense of depth and dimension. The image should be responsive and scale nicely on different screen sizes. On smaller screens, the image should take up the full width of the screen, and on larger screens, it should have a maximum width to prevent it from looking too large.
components:
- FeaturedImage: (Takes Children): This component will render an image with a subtle shadow effect. On smaller screens, it will take up the full width of the screen, and on larger screens, it will have a maximum width.
html:
<div class=""max-w-md mx-auto""><FeaturedImage><!-- Image content will be rendered here --></FeaturedImage></div>
component html:
FeaturedImage:
<div class=""shadow-md rounded-lg overflow-hidden""><img src=""{image_src}"" alt=""{image_alt}"" class=""w-full h-full object-cover""/>{children}</div>"
Timer display,"description:
The timer display should show the hours, minutes, and seconds in a responsive and mobile-first design. The timer should be easily readable and accessible.
components:
- TimerDisplay: (standalone): The main timer display component.
- TimeUnit: (takes children): A component to display a single time unit (hours, minutes, seconds).
html:
<div class=""flex justify-center p-4""><TimerDisplay/></div>
component html:
TimerDisplay:
<div class=""flex items-center text-3xl""><TimeUnit>{hours}</TimeUnit>: <TimeUnit>{minutes}</TimeUnit>: <TimeUnit>{seconds}</TimeUnit></div>
TimeUnit:
<span class=""mx-2"">{children}</span>"
Recommendations and 'You Might Like',"description:
The UI should display a list of recommendations and ""You Might Like"" suggestions, with each item having a title, description, and a call-to-action button. The UI should be responsive, mobile-first, and accessible, with clear headings and sufficient spacing between elements.
components:
- RecommendationCard: A standalone component that displays a single recommendation with a title, description, and a call-to-action button.
- RecommendationsList: A component that takes children, which are multiple `RecommendationCard` components, and displays them in a list.
html:
<div class=""max-w-lg mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Recommendations</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList><h2 class=""text-xl font-bold mb-4 mt-8"">You Might Like</h2><RecommendationsList><RecommendationCard/><RecommendationCard/><!-- Add more RecommendationCard components here --></RecommendationsList></div>
component html:
RecommendationCard:
<div class=""bg-white shadow-md p-4 mb-4""><h3 class=""text-lg font-bold"">{title}</h3><p class=""text-gray-600"">{description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
RecommendationsList:
<ul class=""list-none mb-0"">{children}</ul>"
Animated Counter Statistics Section,"description:
The UI should be a responsive, mobile-first statistics section that showcases animated counter statistics. It should have a clean and modern design, with a neutral color scheme and clear typography. The section should be divided into multiple columns, with each column representing a different statistic. Each statistic should have a heading, a animated counter, and a brief description.
components:
- StatisticCard: (standalone) - A single statistic card component that displays a heading, an animated counter, and a brief description.
- StatisticsSection: (takes children) - A container component that holds multiple `StatisticCard` components.
html:
<section class=""container mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-3xl font-bold mb-4"">Statistics</h2><div class=""flex flex-wrap -mx-4""><StatisticsSection><StatisticCard/><StatisticCard/><StatisticCard/></StatisticsSection></div></section>
component html:
StatisticCard:
<div class=""w-full md:w-1/2 xl:w-1/3 p-4""><h3 class=""text-lg font-bold"">{statistic_heading}</h3><p class=""text-4xl font-bold"">{animated_counter}</p><p class=""text-sm"">{statistic_description}</p></div>
StatisticsSection:
<div class=""flex flex-wrap"">{children}</div>"
Category List: Links to categorized content,"description:
The UI should display a list of categories, with each category having a title and a link to the corresponding content.
components:
- CategoryLink: A standalone component representing a single category with a link.
- CategoryList: A component that takes children (multiple `CategoryLink` components) to display a list of categories.
html:
<div class=""container mx-auto p-4""><h2 class=""text-xl font-bold mb-4"">Categories</h2><ul class=""list-none mb-0""><CategoryList><CategoryLink/><CategoryLink/><!-- Add more CategoryLink components here --></CategoryList></ul></div>
component html:
CategoryLink:
<li class=""mb-2""><a href=""{categoryLink}"" class=""text-blue-600 hover:text-blue-900 transition duration-300"">{categoryName}</a></li>
CategoryList:
<ul class=""list-none mb-0"">{children}</ul>"
A job title component that displays the job title with a hover effect,"description:
The UI should display the job title in a prominent font size and weight, with a subtle hover effect to indicate interactivity. On larger screens, the job title should be centered and have more padding around it. On smaller screens, the job title should take up the full width and have less padding.
components:
- JobTitle: (Takes Children): Displays the job title with a hover effect.
html:
<div class=""max-w-md mx-auto p-4 md:p-8 lg:p-12""><JobTitle>{job_title}</JobTitle></div>
component html:
JobTitle:
<span class=""text-lg md:text-xl lg:text-2xl font-bold hover:text-blue-600 transition duration-300 ease-in-out"">{children}</span>"
Create a hero image component with a full-width background image and a green overlay,"description:
The hero image component should be a full-width section with a background image that scales responsively to fit different screen sizes. It should have a green overlay to add visual interest and make the text on top of it more readable. The component should be easily accessible and readable on all devices, including mobile devices.
components:
- HeroImage: (Takes Children): A hero image component with a full-width background image and a green overlay.
html:
<section class=""hero""><HeroImage><!-- Hero image content will go here --></HeroImage></section>
component html:
HeroImage:
<div class=""h-screen w-full relative bg-cover bg-center"" style=""`background-image: url({background_image_url});""}><div class=""absolute inset-0 bg-green-700 opacity-50""></div><div class=""container mx-auto p-4 pt-8"">{children} </div></div>"
Archives: List of past articles by date,"description:
The UI should display a list of past articles, grouped by year and month, with each article title linked to its corresponding page. The list should be responsive, with a compact layout on mobile devices and a more spacious layout on larger screens.
components:
- ArchiveList: (standalone): The main component that renders the list of archives.
- ArchiveYear: (standalone): A component that renders a single year's worth of archives.
- ArchiveMonth: (standalone): A component that renders a single month's worth of archives within an `ArchiveYear`.
- ArchiveArticle: (standalone): A component that renders a single article within an `ArchiveMonth`.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-3xl font-bold mb-4"">Archives</h1><ArchiveList/></div>
component html:
ArchiveList:
<ul class=""list-none mb-4"">{yearList}</ul>
ArchiveYear:
<li class=""py-2 border-b border-gray-200""><h2 class=""text-lg font-bold"">{year}</h2><ul class=""list-none mb-4"">{monthList} </ul></li>
ArchiveMonth:
<li class=""py-2""><h3 class=""text-md font-bold"">{monthName} {year}</h3><ul class=""list-none mb-4"">{articleList} </ul></li>
ArchiveArticle:
<li class=""py-2""><a href=""{articleUrl}"" class=""text-blue-600 hover:text-blue-900"">{articleTitle} </a><p class=""text-gray-600"">{articleDate}</p></li>"
Character counter for tweet length,"description:
A simple text input with a character count display below it, indicating the number of characters remaining for a tweet (out of 280 characters).
components:
- TextAreaInput: a standalone component for the text input field
- CharacterCountDisplay: a standalone component for displaying the character count
html:
<div class=""flex flex-col w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><TextAreaInput/><CharacterCountDisplay/></div>
component html:
TextAreaInput:
<textarea class=""w-full p-2 text-lg"" placeholder=""What's on your mind?""/>
CharacterCountDisplay:
<p class=""text-sm text-gray-600"">{remaining_characters} characters remaining</p>"
A search bar with a white background and neon green borders,"description:
The search bar will have a clean and modern design with a white background and neon green borders to make it stand out. The search bar will be responsive and adjust its width and padding according to the screen size.
components:
- SearchBar: (Takes Children): A container component for the search bar with a white background and neon green borders. On small screens, it will take up the full width of the screen. On medium screens and above, it will have a maximum width of 30rem and be horizontally centered.
html:
<div class=""flex justify-center md:max-w-md""><SearchBar><!-- SearchBar content will go here --></SearchBar></div>
component html:
SearchBar:
<div class=""bg-white border-2 border-neon-green rounded-md p-2 md:w-full md:max-w-md"">{children}</div>"
Sidebar Widget Title,"description:
The UI should be a responsive, standalone title component that can be used in a sidebar. It should have a large font size, be bold, and have a light gray text color on a white background.
components:
- SidebarWidgetTitle: (standalone)
html:
<div class=""w-full px-4 py-2 bg-white""><SidebarWidgetTitle/></div>
component html:
SidebarWidgetTitle:
<h2 class=""text-lg font-bold text-gray-300"">{title}</h2>"
Instructor/Author Profiles,"description:
The UI should display the profile information of an instructor or author, including their name, profile picture, bio, and a list of their courses or publications.
components:
- ProfileHeader: A standalone component that displays the profile picture and name of the instructor/author.
- BioSection: A standalone component that displays the bio of the instructor/author.
- CourseList: A component that takes children, displaying a list of courses or publications.
html:
<div class=""flex flex-col items-center p-4""><ProfileHeader/><BioSection/><h2 class=""text-lg font-bold mb-2"">Courses</h2><CourseList><!-- Course items will be rendered here --></CourseList></div>
component html:
ProfileHeader:
<div class=""flex items-center mb-4""><img src=""{profile_picture_url}"" alt=""{name}"" class=""w-24 h-24 rounded-full mr-4""/><h1 class=""text-2xl font-bold"">{name}</h1></div>
BioSection:
<div class=""mb-4""><p class=""text-lg"">{bio}</p></div>
CourseList:
<ul class=""list-none mb-4"">{children}</ul>"
"An event card component with a white background, event title, date, and location","description:
The event card component should have a clean and modern design, with a white background to make the content stand out. The event title should be prominent, with a larger font size and a slightly darker gray color to contrast with the white background. The date and location should be displayed in a smaller font size and a lighter gray color to provide secondary information. The component should be responsive, with the layout adjusting to fit different screen sizes.
components:
- EventCard: (Takes Children): A container component that holds the event title, date, and location.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8 bg-white rounded shadow-md""><EventCard><!-- event title, date, and location will be rendered here --></EventCard></div>
component html:
EventCard:
<div class=""p-4 md:p-6 lg:p-8""><h2 class=""text-lg md:text-xl lg:text-2xl text-gray-800"">{eventTitle}</h2><p class=""text-sm md:text-base lg:text-lg text-gray-600"">{eventDate} - {eventLocation}</p>{children}</div>"
Headings 3,"description:
The UI should display three headings: a large title, a smaller subtitle, and a smaller header. The title should be the largest and most prominent, with the subtitle and header decreasing in size and importance.
components:
- HeadingTitle: - standalone
- HeadingSubtitle: - standalone
- HeadingHeader: - standalone
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-12""><HeadingTitle/><HeadingSubtitle/><HeadingHeader/></div>
component html:
HeadingTitle:
<h1 class=""text-4xl md:text-5xl lg:text-6xl font-bold"">{title_text}</h1>
HeadingSubtitle:
<h2 class=""text-2xl md:text-3xl lg:text-4xl font-medium"">{subtitle_text}</h2>
HeadingHeader:
<h3 class=""text-xl md:text-2xl lg:text-3xl font-medium"">{header_text}</h3>"
Alert Close Button,"description:
A small, rounded button with an ""X"" icon, typically used to close an alert or notification.
components:
- AlertCloseButton: (Standalone)
html:
<button class=""alert-close-button""><AlertCloseButton/></button>
component html:
AlertCloseButton:
<button class=""p-2 rounded text-gray-500 hover:text-gray-800 transition""><span aria-hidden=""true"">×</span></button>"
A section header component with a faint background color and a simple font,"description:
The UI should have a simple and clean design, with a subtle background color and a clear font that makes the section header stand out. The component should scale well on different screen sizes, with a maximum width on larger screens and a full-width design on smaller screens.
components:
- SectionHeader: (Standalone): A simple header component with a faint background color and a clear font.
html:
<SectionHeader/>
component html:
SectionHeader:
<div class=""bg-gray-100 py-4 mb-4 lg:max-w-md mx-auto lg:mx-0""><h2 class=""text-lg font-bold"">{header_text}</h2></div>"
"Horizontal strip typically used for displaying badges, labels, or status indicators","description:
A horizontal strip with a colored background and text, often used to display badges, labels, or status indicators.
components:
- StatusIndicator: A standalone component that displays a colored strip with text.
html:
<div class=""flex justify-center mb-4""><StatusIndicator/></div>
component html:
StatusIndicator:
<span class=""inline-block bg-{color} px-2 py-1 text-sm text-white rounded"">{label}</span>"
Create a call-to-action button with a gradient background and white text,"description:
The UI should have a prominent call-to-action button that stands out from the rest of the UI. The button should have a gradient background that scales well on different screen sizes and white text that's easy to read.
components:
- GradientButton: (Standalone): A button with a gradient background and white text. On smaller screens (sm:), the button should be block-level and centered on the screen. On larger screens (md:], the button should be inline-block and take up about one-third of the screen width.
html:
<div class=""flex justify-center mt-4""><GradientButton/></div>
component html:
GradientButton:
<button class=""bg-gradient-to-r from-{primary_color} to-{secondary_color} text-white font-bold py-2 px-4 rounded-full hover:shadow-lg"">{button_text}</button>"
Forums,"description:
The UI should display a list of forum topics with their titles, descriptions, and the number of replies and views. Each topic should be displayed in a card layout with a clear hierarchy of information. The UI should be responsive and adapt to different screen sizes.
components:
- ForumTopicList: (takes children) - contains a list of `ForumTopicCard` components
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Forum Topics</h1><ForumTopicList><!-- list of forum topics will be rendered here --></ForumTopicList></div>
component html:
ForumTopicList:
<ul class=""list-none mb-0"">{children}</ul>"
Product Rating Average,"description:
The UI should display the average rating of a product, with a maximum rating of 5 stars. The rating should be displayed visually using 5 stars, with filled stars representing the average rating and unfilled stars representing the remaining rating. The average rating should be displayed as a numerical value next to the stars.
components:
- RatingStars: (standalone): Displays the 5 stars, with some filled and some unfilled to represent the average rating.
- AverageRatingText: (standalone): Displays the numerical average rating next to the stars.
html:
<div class=""flex items-center""><RatingStars/><AverageRatingText/></div>
component html:
RatingStars:
<div class=""flex text-yellow-400"">{filledStarCount}<i class=""fas fa-star""></i>{unfilledStarCount}<i class=""far fa-star""></i></div>
AverageRatingText:
<p class=""text-gray-600"">{averageRating}/5</p>"
Responsive design layout,"description:
A basic responsive design layout with a header, navigation, main content area, and footer. The layout should adapt to different screen sizes, with a mobile-friendly design for small screens and a more extensive layout for larger screens.
components:
- HeaderBar: A standalone component for the header section.
- NavigationBar: A component that takes children (nav items) and displays them horizontally on larger screens and vertically on smaller screens.
- MainContent: A component that takes children (content) and displays them in a responsive layout.
- FooterSection: A standalone component for the footer section.
html:
<body><HeaderBar/><NavigationBar><!-- nav items will be inserted here --></NavigationBar><MainContent><!-- main content will be inserted here --></MainContent><FooterSection/></body>
component html:
HeaderBar:
<header class=""flex items-center justify-center py-4 md:py-6""><h1 class=""text-lg md:text-2xl"">{header_title}</h1></header>
NavigationBar:
<nav class=""flex flex-wrap justify-center md:flex-nowrap mb-4 md:mb-0""><ul class=""flex flex-wrap md:flex-nowrap"">{children} </ul></nav>
MainContent:
<main class=""max-w-md mx-auto px-4 md:px-0 mb-4 md:mb-6"">{children}</main>
FooterSection:
<footer class=""bg-gray-200 py-4 md:py-6""><p class=""text-sm text-gray-600"">{footer_text}</p></footer>"
Blog posts,"description:
The UI should display a list of blog posts, with each post showing the title, excerpt, and a ""Read more"" link. The posts should be listed in a grid on larger screens, and in a single column on smaller screens.
components:
- BlogPostList: A component that takes children (i.e., `BlogPostCard` components) and displays them in a grid or list.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Blog Posts</h1><BlogPostList><!-- Blog post cards will be inserted here --></BlogPostList></div>
component html:
BlogPostList:
<ul class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</ul>"
Header with a black background and neon green accents,"description:
The UI should have a header with a black background and neon green accents. The header should be responsive and scalable on different screen sizes. On mobile devices, the header should take up the full width of the screen, and on larger screens, it should be fixed to the top of the page.
components:
- NavigationBar: (Takes Children): A navigation bar that contains links to different sections of the application. On mobile devices, it should be collapsed and expandable. On larger screens, it should be always visible and horizontal.
- Logo: (Standalone): A logo component that displays the application's logo. It should be centered on mobile devices and aligned to the left on larger screens.
html:
<header class=""bg-black h-screen md:h-16 fixed top-0 left-0 w-full md:w-auto""><Logo/><NavigationBar><!-- links to different sections of the application --></NavigationBar></header>
component html:
NavigationBar:
<nav class=""flex flex-wrap justify-center md:flex-nowrap md:justify-start"">{children}</nav>
Logo:
<img src={logo_src} alt=""Application Logo"" class=""h-8 md:h-12 mx-auto md:mx-0""/>"
Terms and conditions checkbox,"description:
A checkbox with a label that says ""I agree to the terms and conditions"" and a link to the terms and conditions page.
components:
- TermsAndConditionsCheckbox: standalone component that includes a checkbox and a label.
- TermsLink: standalone component that is a link to the terms and conditions page.
html:
<div class=""flex items-center""><TermsAndConditionsCheckbox/><TermsLink/></div>
component html:
TermsAndConditionsCheckbox:
<input type=""checkbox"" id=""terms-and-conditions-checkbox"" class=""mr-2""/><label for=""terms-and-conditions-checkbox"" class=""text-sm"">I agree to the {terms_and_conditions_text}</label>
TermsLink:
<a href=""{terms_and_conditions_url}"" class=""text-sm text-blue-600 hover:text-blue-900"">Read terms and conditions</a>"
Countdowns,"description:
The UI will display multiple countdown timers, each representing a different event. Each countdown will show the days, hours, minutes, and seconds left until the event occurs. The timers should be listed in a clear, easy-to-read format, with the event title above each countdown.
components:
- CountdownList: (Standalone)**: This is the parent component that groups all individual CountdownItem components.
- CountdownItem: (Takes Children)**: This component displays the countdown for a single event, including the event title and the time left until the event (days, hours, minutes, and seconds).
html:
<div class=""container mx-auto p-4""><h1 class=""text-xl font-bold text-center mb-4"">Upcoming Events Countdown</h1><CountdownList/></div>
component html:
CountdownList:
<ul class=""space-y-4""><CountdownItem><h2 class=""text-lg font-semibold"">{event_title_one}</h2><p>{days_one} days, {hours_one} hours, {minutes_one} minutes, {seconds_one} seconds</p></CountdownItem><CountdownItem><h2 class=""text-lg font-semibold"">{event_title_two}</h2><p>{days_two} days, {hours_two} hours, {minutes_two} minutes, {seconds_two} seconds</p></CountdownItem><!-- Additional CountdownItem components can be added here --></ul>
CountdownItem:
<li class=""border p-3 shadow rounded"">{children} </li>"
A footer component with copyright text and social media links,"description:
The footer component should be a responsive, accessible, and well-documented UI element that provides copyright information and social media links. It should be placed at the bottom of the page and should scale well on different screen sizes. The footer should have a subtle background gradient to add depth and dimension. The copyright text should be centered and have a medium font size. The social media links should be aligned horizontally and have a small font size.
components:
- Footer: (Takes Children): The main footer component that contains the copyright text and social media links.
- CopyrightText: (Standalone): Displays the copyright text.
- SocialMediaLinks: (Takes Children): Contains the social media links.
html:
<div class=""flex flex-col justify-center py-4 bg-gradient-to-b from-gray-100 to-gray-200""><Footer><CopyrightText/><SocialMediaLinks>{social_media_links}
</SocialMediaLinks></Footer></div>
component html:
Footer:
<div class=""container mx-auto p-4"">{children}</div>
CopyrightText:
<p class=""text-center text-sm"">{copyright_text}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
Product Description List,"description:
The UI should be a list of product descriptions, each containing a title, a short description, and optional additional details. The list should be responsive and adapt to different screen sizes. Each list item should have a clean and minimal design, with sufficient spacing between items.
components:
- ProductDescriptionListItem: (standalone): A single list item containing a title, description, and optional additional details.
- ProductDescriptionList: (takes children): A container component that wraps the list of product descriptions.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Product Descriptions</h2><ProductDescriptionList><ProductDescriptionListItem/><ProductDescriptionListItem/><!-- Add more list items here --></ProductDescriptionList></section>
component html:
ProductDescriptionListItem:
<div class=""p-4 mb-4 border-b border-gray-200""><h3 class=""text-sm font-bold"">{title}</h3><p class=""text-sm text-gray-600"">{description}</p>{additionalDetails && ( <ul class=""list-disc pl-4""><li>{additionalDetails}</li></ul>)}</div>
ProductDescriptionList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Lesson/List View of Content,"description:
A list view of lessons, with each lesson displaying its title, description, and a button to view more details.
components:
- LessonComponent: (standalone): displays a single lesson
- LessonsListComponent: (takes children): a container for a list of lessons
html:
<div class=""container mx-auto p-4""><h1 class=""text-3xl font-bold mb-4"">Lessons</h1><LessonsListComponent><LessonComponent/><LessonComponent/><!-- add more LessonComponents here --></LessonsListComponent></div>
component html:
LessonComponent:
<li class=""mb-4""><h2 class=""text-lg font-bold"">{lesson_title}</h2><p>{lesson_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">View More</button></li>
LessonsListComponent:
<ul class=""list-none mb-4"">{children}</ul>"
Hero/Banner Images,"description:
The UI should display a responsive hero/banner image with a adjustable height that takes the full width of the screen. The image should be centered and have a subtle overlay effect for better readability.
components:
- HeroImage: Standalone component that contains the hero/banner image.
html:
<div class=""container mx-auto p-4 pt-6 md:pt-12 lg:pt-20""><HeroImage/></div>
component html:
HeroImage:
<div class=""h-full w-full md:h-96 lg:h-128 relative overflow-hidden""><img src=""{hero_image_url}"" alt=""{hero_image_alt}"" class=""w-full h-full object-cover object-center""/><div class=""absolute inset-0 bg-gray-900 opacity-50""></div><!-- Add overlay text or other elements here --></div>"
Year/Month Picker Calendars,"description:
The UI should display a responsive, mobile-first calendar picker that allows users to select a year and month. The calendar should be accessible and SEO-friendly.
components:
- YearMonthPicker: a standalone component that contains the year and month pickers.
- YearPicker: a standalone component that allows users to select a year.
- MonthPicker: a standalone component that allows users to select a month.
- CalendarHeader: a standalone component that displays the current year and month.
html:
<div class=""max-w-md mx-auto p-4""><YearMonthPicker/></div>
component html:
YearMonthPicker:
<div class=""flex flex-col""><CalendarHeader/><div class=""flex justify-center mb-4""><YearPicker/><MonthPicker/></div><table class=""w-full""><!-- calendar table goes here --></table></div>
YearPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{year1}"">{year1}</option><option value=""{year2}"">{year2}</option><!-- more options --></select>
MonthPicker:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value=""{month1}"">{month1}</option><option value=""{month2}"">{month2}</option><!-- more options --></select>
CalendarHeader:
<div class=""flex justify-center mb-4""><h2 class=""text-lg"">{current_year} {current_month}</h2></div>"
A grid component to display a collection of images with a consistent gap between them,"description:
The UI should display a grid of images with a consistent gap between them. The grid should be responsive and adapt to different screen sizes, with a maximum of 3 columns on larger screens and 1 column on smaller screens. The images should be arranged in a grid with a consistent gap of 1rem between them. The images should scale to fit the grid cell, maintaining their aspect ratio.
components:
- ImageGrid: (Takes Children): A container component that displays a grid of images with a consistent gap between them.
- GridImage: (Standalone): A component that displays a single image within the grid.
html:
<div class=""container mx-auto p-4 lg:p-6""><ImageGrid><!-- Children will be rendered here --></ImageGrid></div>
component html:
ImageGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"">{children}</div>
GridImage:
<div class=""rounded overflow-hidden shadow-md""><img src=""{imageSrc}"" alt=""{imageAlt}"" class=""w-full h-full object-cover""/></div>"
"Styled quotation displayed within the flow of text, often with distinct formatting","description:
The UI should display a quotation in a distinct style, often with an italic font, and possibly with quotation marks. The quotation should be displayed within the flow of text.
components:
- Quotation: A standalone component that displays a quotation.
html:
<p>This is a sample text with a <Quotation/>within.
</p>
component html:
Quotation:
<span class=""italic font-semibold text-lg"">{quotation_text}</span>"
Product success,"description:
A product success page that displays a congratulatory message, a brief description of the product, and a call-to-action (CTA) button.
components:
- SuccessHeader: A standalone component that displays a congratulatory message.
- ProductDescription: A standalone component that displays a brief description of the product.
- CallToActionButton: A standalone component that displays a CTA button.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><SuccessHeader/><ProductDescription/><CallToActionButton/></div>
component html:
SuccessHeader:
<h1 class=""text-3xl font-bold mb-4"">{congratulatory_message}</h1>
ProductDescription:
<p class=""text-lg mb-6"">{product_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
"Search bar with a magnifying glass icon (white background, black text)","description:
The search bar should be a prominent element on the page, easily accessible and visible on all screen sizes. It should have a clean and simple design, with a white background and black text to provide high contrast and readability. The magnifying glass icon should be on the left side of the input field, serving as a clear indicator of the search functionality. The search bar should be responsive, adapting to different screen sizes and devices.
components:
- SearchBar: (Takes Children): The main search bar component, containing the input field and the magnifying glass icon.
html:
<div class=""container mx-auto p-4""><SearchBar><!-- SearchBar children will be rendered here --></SearchBar></div>
component html:
SearchBar:
<div class=""bg-white shadow-md rounded-full flex items-center justify-between p-2""><span class=""text-gray-600""><i class=""fas fa-search""></i></span><input type=""search"" placeholder=""Search..."" class=""w-full pl-2 text-lg text-gray-800""/>{children}</div>"
User profile summary and bio,"description:
The UI should display a user's profile summary and bio, including their profile picture, name, and bio information.
components:
- UserProfileSummary: standalone component that displays the user's profile summary information.
- UserProfileBio: standalone component that displays the user's bio information.
- UserProfilePicture: standalone component that displays the user's profile picture.
html:
<div class=""flex flex-col gap-4 p-4""><div class=""flex justify-center""><UserProfilePicture/></div><UserProfileSummary/><UserProfileBio/></div>
component html:
UserProfileSummary:
<div class=""flex flex-col gap-2""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-500"">{user_title}</p></div>
UserProfileBio:
<p class=""text-gray-500"">{bio_text}</p>
UserProfilePicture:
<img src={profile_picture_url} alt=""Profile Picture"" class=""w-24 h-24 rounded-full object-cover object-center""/>"
A rating component that displays 1-5 stars,"description:
The rating component should display 1-5 stars, with the option to highlight a certain number of stars to indicate the rating. The stars should be spaced evenly and aligned horizontally. On smaller screens, the stars should be smaller to fit the available space. On larger screens, the stars can be larger and more prominent.
components:
- Rating: (Takes Children): The top-level rating component that contains the star icons.
- Star: (Standalone): A single star icon that can be highlighted or unhighlighted.
html:
<Rating><Star/><Star/><Star/><Star/><Star/></Rating>
component html:
Rating:
<div class=""flex flex-wrap justify-center md:justify-start"">{children}</div>
Star:
<i class=""fas fa-star text-lg text-yellow-400 hover:text-yellow-600 transition duration-300 ease-in-out""></i>"
Search Bar,"description:
The UI should be a simple search bar with a input field and a submit button. It should be responsive and mobile-friendly.
components:
- SearchBarContainer: (standalone): The outer container for the search bar.
- SearchInput: (standalone): The input field for the search query.
- SearchButton: (standalone): The submit button for the search.
html:
<div class=""flex justify-center mb-4""><SearchBarContainer/></div>
component html:
SearchBarContainer:
<div class=""flex w-full max-w-md mx-auto rounded-md shadow-md""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" id=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Sidebar: Important links and widgets,"description:
The UI should be a responsive sidebar that contains important links and widgets. It should be accessible, mobile-first, and SEO-friendly.
components:
- Sidebar: (standalone) : The main sidebar component that contains all the links and widgets.
- SidebarLink: (takes children) : A link component that displays a link with an icon.
- SidebarWidget: (takes children) : A widget component that displays a title and content.
html:
<aside class=""lg:w-64 xl:w-80 p-4 bg-white shadow-md""><Sidebar/></aside>
component html:
Sidebar:
<nav class=""flex flex-col""><SidebarLink><i class=""fas fa-home""/>{sidebar_link_1_text}</SidebarLink><SidebarLink><i class=""fas fa-book""/>{sidebar_link_2_text}</SidebarLink><!-- Add more links here --><SidebarWidget><h5 class=""text-lg"">{widget_title}</h5><p>{widget_content}</p></SidebarWidget><!-- Add more widgets here --></nav>
SidebarLink:
<a href=""{link_url}"" class=""flex items-center p-2 hover:bg-gray-100"">{children} <span class=""ml-2"">{link_text}</span></a>
SidebarWidget:
<div class=""p-4 mt-4 bg-gray-100""><h5 class=""text-lg"">{children}</h5><p>{widget_content}</p></div>"
Payment and Invoicing Tools,"description:
The UI should display a list of payment and invoicing tools with their respective logos, names, and descriptions. The list should be responsive and accessible on various devices.
components:
- PaymentToolCard: A standalone component that displays a single payment tool's information.
- PaymentToolList: A component that takes children, which are multiple `PaymentToolCard` components.
html:
<!-- Payment and Invoicing Tools Section --><section class=""max-w-md mx-auto p-4 lg:p-6""><h2 class=""text-3xl font-bold mb-4"">Payment and Invoicing Tools</h2><PaymentToolList/></section>
component html:
PaymentToolCard:
<!-- Individual Payment Tool Card --><div class=""bg-white shadow-md rounded p-4 mb-4""><img src=""{logo_url}"" alt=""{tool_name}"" class=""w-10 h-10 mr-4""><div class=""flex-1""><h3 class=""text-lg font-bold"">{tool_name}</h3><p class=""text-gray-600"">{tool_description}</p></div></div>
PaymentToolList:
<!-- List of Payment Tools --><ul class=""list-none mb-0"">{children}</ul>"
"Button that performs an action within the flow of content, often used for quick actions","description:
A small, inline button that is often used for quick actions within a flow of content. It should be styled to stand out slightly from the surrounding text, but not too much.
components:
- InlineActionButton: A standalone component that renders a small button that performs an action within a flow of content.
html:
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <InlineActionButton/>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
component html:
InlineActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-1 px-2 rounded"">{action_text}</button>"
Tooltips for information,"description:
The UI should display a tooltip when hovering over an icon or text, providing additional information to the user. The tooltip should be responsive, accessible, and styled with Tailwind CSS.
components:
- TooltipTrigger: (standalone): The component that triggers the tooltip when hovered.
- TooltipContent: (takes children): The component that displays the tooltip content.
html:
<!-- A button that triggers the tooltip --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><TooltipTrigger/><TooltipContent>Tooltip information</TooltipContent></button>
component html:
TooltipTrigger:
<!-- Tooltip trigger icon --><i class=""fas fa-info-circle""></i>
TooltipContent:
<!-- The tooltip content with a tailwindcss tooltip class --><div class=""tooltip absolute z-10 p-2 text-lg text-gray-600 bg-gray-100 rounded"">{children}</div>"
Game Trailer and Video Embeds,"description:
The UI should consist of a full-bleed video trailer section that takes up the full width and height of the screen, with a responsive design that adapts to different screen sizes. The video trailer should be embedded in an iframe with a 16:9 aspect ratio. There should be a placeholder for a game title and a call-to-action button below the video.
components:
- VideoTrailerSection: (standalone): A full-bleed section that contains the video trailer.
- GameTitle: (standalone): A heading element that displays the game title.
- CallToActionButton: (standalone): A button element that displays a call-to-action.
html:
<div class=""container mx-auto p-4 md:p-8""><VideoTrailerSection/><div class=""flex justify-center mb-4""><GameTitle/></div><div class=""flex justify-center""><CallToActionButton/></div></div>
component html:
VideoTrailerSection:
<div class=""aspect-w-16 aspect-h-9 mb-4""><iframe src=""{video_url}"" frameborder=""0"" allowfullscreen></iframe></div>
GameTitle:
<h1 class=""text-3xl font-bold"">{game_title}</h1>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Author Bio/Profile,"description:
The Author Bio/Profile component should display a concise summary of the author's information, including their name, profile picture, bio, and social media links. The component should be responsive, displaying the content in a vertical layout on mobile devices and a horizontal layout on larger screens.
components:
- AuthorProfilePicture: (standalone): a circular image component to display the author's profile picture.
- AuthorName: (standalone): a heading component to display the author's name.
- AuthorBio: (standalone): a paragraph component to display the author's bio.
- AuthorSocialMediaLinks: (takes children): a container component to display the author's social media links.
html:
<div class=""flex flex-wrap justify-center xl:flex-nowrap xl:justify-between mb-4""><AuthorProfilePicture/><div class=""xl:ml-4 xl:w-1/2""><AuthorName/><AuthorBio/><AuthorSocialMediaLinks><!-- social media links will be inserted here --></AuthorSocialMediaLinks></div></div>
component html:
AuthorProfilePicture:
<img src=""{profile_picture_url}"" alt=""{author_name}"" class=""rounded-full w-24 h-24 xl:w-32 xl:h-32 object-cover""/>
AuthorName:
<h2 class=""text-lg xl:text-xl font-bold"">{author_name}</h2>
AuthorBio:
<p class=""text-sm xl:text-base"">{author_bio}</p>
AuthorSocialMediaLinks:
<ul class=""list-none xl:flex xl:justify-between xl:items-center"">{children}</ul>"
Page Content List Item,"description:
A list item that displays a brief summary of a piece of content, such as a blog post or a tutorial. The UI should be responsive, mobile-friendly, and accessible.
components:
- PageContentListItem: Standalone component that displays a brief summary of a piece of content.
- ContentThumbnail: Standalone component that displays a thumbnail image for the content.
- ContentSummary: Standalone component that displays a brief summary of the content.
html:
<ul class=""flex flex-wrap justify-center mb-4""><PageContentListItem/><!-- More list items... --></ul>
component html:
PageContentListItem:
<li class=""flex flex-wrap w-full md:w-1/2 xl:w-1/3 p-4""><ContentThumbnail/><div class=""flex-1 pl-4""><h2 class=""text-lg"">{title}</h2><ContentSummary/><p class=""text-sm text-gray-600"">{brief_description}</p></div></li>
ContentThumbnail:
<img src={thumbnail_url} alt={title} class=""w-24 h-24 object-cover rounded-sm""/>
ContentSummary:
<p class=""text-sm"">{summary}</p>"
Image cropper tool,"description:
The UI should be a simple, intuitive image cropper tool that allows users to upload an image and crop a specific region of the image. The UI should have a responsive design, making it accessible on various devices.
components:
- ImageUploader: (standalone): A component that allows users to upload an image.
- ImagePreview: (takes children): A component that displays the uploaded image and allows users to select a region to crop.
- CropSelect: (standalone): A component that displays the selected crop region.
- CropButton: (standalone): A button that triggers the cropping action.
html:
<div class=""container mx-auto p-4""><ImageUploader/><ImagePreview><CropSelect/></ImagePreview><CropButton/></div>
component html:
ImageUploader:
<input type=""file"" id=""imageUploader""/><label for=""imageUploader"">Upload Image</label><p>{uploaded_image_name}</p>
ImagePreview:
<img src=""{uploaded_image_url}"" alt=""Uploaded Image""/><div class=""crop-overlay"">{children}</div>
CropSelect:
<div class=""crop-select"" style=""x: {crop_x}; y: {crop_y}; width: {crop_width}; height: {crop_height};""}></div>
CropButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Crop Image</button>"
Feed/List View of Posts,"description:
The UI should be a responsive list view of posts, displaying the title, content, and metadata of each post. On smaller screens, the list items should be stacked vertically, and on larger screens, they should be displayed in a grid with multiple columns.
components:
- PostListItem: (standalone): a single list item representing a post
- PostList: (takes children): a container for the list of posts, which wraps the PostListItem components
html:
<main class=""container mx-auto p-4""><PostList><PostListItem/><PostListItem/><!-- add more PostListItem components here --></PostList></main>
component html:
PostListItem:
<article class=""mb-4 bg-white rounded-lg shadow-md p-4""><h2 class=""text-lg"">{post_title}</h2><p class=""text-gray-600"">{post_excerpt}</p><p class=""text-sm text-gray-500"">{post_author} | {post_date}</p></article>
PostList:
<ul class=""flex flex-wrap justify-center lg:justify-start"">{children}</ul>"
Loaders (animated),"description:
The UI should display an animated loader that indicates the system is processing or loading data. The loader should be visually appealing, accessible, and responsive.
components:
- LoaderRing: (standalone): Displays an animated ring to indicate loading.
html:
<div class=""flex h-screen justify-center items-center""><LoaderRing/></div>
component html:
LoaderRing:
<div class=""relative w-12 h-12""><div class=""absolute top-0 left-0 w-12 h-12 rounded-full border-4 border-dashed border-blue-400 animate-spin""></div></div>"
A horizontal line to separate different sections of the page,"description:
A horizontal line that separates different sections of the page. The line should be thin, subtle, and adapt to different screen sizes.
components:
- SectionSeparator: (Standalone)
html:
<div class=""max-w-md mx-auto p-4""><!-- Section 1 --><SectionSeparator/><!-- Section 2 --><SectionSeparator/><!-- Section 3 --></div>
component html:
SectionSeparator:
<hr class=""h-px bg-gray-200 border-none""/>"
Image overlays,"description:
The UI should have an image with an overlay that appears on hover. The overlay should have a semi-transparent background and display some text.
components:
- ImageWithOverlay: (standalone)
html:
<div class=""max-w-md mx-auto""><ImageWithOverlay/></div>
component html:
ImageWithOverlay:
<div class=""relative overflow-hidden""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-64 object-cover""/><div class=""absolute inset-0 bg-gray-800 bg-opacity-50 hidden group-hover:block""><p class=""text-lg text-white"">{overlay_text}</p></div></div>"
"Menu that expands or ""flies out"" from a navigation item when clicked or hovered over","description:
The UI should display a navigation menu item that, when clicked or hovered over, expands to show a fly-out menu with additional options.
components:
- NavigationItem: Standalone component representing a single navigation item.
- FlyoutMenu: Component that takes children, representing the fly-out menu that appears when the navigation item is clicked or hovered over.
- MenuItem: Standalone component representing a single item in the fly-out menu.
html:
<nav class=""flex justify-center""><NavigationItem/><!-- more navigation items --></nav>
component html:
NavigationItem:
<a href=""#"" class=""px-4 py-2 hover:bg-gray-100 hover:text-gray-900 transition duration-300 ease-in-out""><span>{navigation_item_label}</span><FlyoutMenu/></a>
FlyoutMenu:
<div class=""absolute bg-white border shadow-md rounded-lg p-4 hidden group-hover:block"">{children}</div>
MenuItem:
<a href=""#"" class=""block px-4 py-2 hover:bg-gray-100 hover:text-gray-900 transition duration-300 ease-in-out""><span>{menu_item_label}</span></a>"
Vacation package booking form,"description:
The UI should be a responsive, mobile-first, and accessible vacation package booking form that allows users to select their travel dates, destination, and package type. The form should be easy to use and provide a seamless user experience.
components:
- TravelDatePicker: Standalone component that allows users to select their travel dates.
- DestinationSelect: Standalone component that allows users to select their destination.
- PackageTypeSelect: Standalone component that allows users to select their package type.
- PassengerInfo: Component that takes children to display passenger information.
- BookingForm: Component that takes children to wrap the entire booking form.
html:
<BookingForm><h1>Vacation Package Booking Form</h1><TravelDatePicker/><DestinationSelect/><PackageTypeSelect/><PassengerInfo><label>First Name:</label><input type=""text""/><br/><label>Last Name:</label><input type=""text""/><!-- Add more passenger info fields as needed --></PassengerInfo><button type=""submit"">Book Now</button></BookingForm>
component html:
TravelDatePicker:
<div class=""mb-4""><label for=""travel-dates"">Travel Dates:</label><input type=""date"" id=""travel-dates""/></div>
DestinationSelect:
<div class=""mb-4""><label for=""destination"">Destination:</label><select id=""destination""><option value="""">Select a destination</option><option value=""{destination_option_1}"">{destination_option_1}</option><!-- Add more destination options as needed --></select></div>
PackageTypeSelect:
<div class=""mb-4""><label for=""package-type"">Package Type:</label><select id=""package-type""><option value="""">Select a package type</option><option value=""{package_type_option_1}"">{package_type_option_1}</option><!-- Add more package type options as needed --></select></div>
PassengerInfo:
<div class=""flex flex-wrap -mx-3 mb-4"">{children}</div>
BookingForm:
<form class=""max-w-md mx-auto p-4 pt-6 mb-4"">{children}</form>"
Sorters,"description:
The UI should be a sorter component that allows users to sort a list of items in ascending or descending order. The sorter should be displayed as a dropdown with ascending and descending options.
components:
- SorterDropdown: (standalone) - The dropdown component that contains the sorter options.
- SorterOption: (takes children) - An individual sorter option that can be either ascending or descending.
html:
<div class=""flex justify-center""><SorterDropdown/></div>
component html:
SorterDropdown:
<div class=""relative inline-block""><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Sort by <span class=""caret ml-2""></span></button><ul class=""absolute bg-white border border-gray-400 rounded shadow-md w-40""><SorterOption>Ascending</SorterOption><SorterOption>Descending</SorterOption></ul></div>
SorterOption:
<li class=""py-2 px-4 hover:bg-gray-100"">{children}</li>"
A background image component with a subtle parallax effect,"description:
The UI should feature a full-bleed background image that takes up the entire screen. As the user scrolls, the background image should have a subtle parallax effect, creating a sense of depth. The background image should be responsive and scale accordingly on different screen sizes.
components:
- BackgroundImage: (Takes Children): A component that displays a background image with a parallax effect. It takes children, which can be other UI elements that will be layered on top of the background image.
html:
<BackgroundImage><!-- Other UI elements will go here, layered on top of the background image --></BackgroundImage>
component html:
BackgroundImage:
<div class=""fixed inset-0 -z-10"" style=""backgroundImage: url({background_image_url}); backgroundSize: cover; backgroundPosition: center; transform: translateY({parallax_offset}px);""}>{children}</div>"
Product feedback,"description:
The UI should display a product feedback section with a rating system, a comment box, and a ""Submit"" button.
components:
- RatingStars: A standalone component that displays a rating system with 5 stars.
- CommentBox: A standalone component that contains a text area for users to leave comments.
- SubmitButton: A standalone component that displays a submit button.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Leave Your Feedback</h2><RatingStars/><CommentBox/><SubmitButton/></div>
component html:
RatingStars:
<div class=""flex mb-4"">{Array(5).fill(0).map((_, i) =>( <i key={i} class={`fas fa-star {i < rating ? 'text-yellow-400' : 'text-gray-400'}`}/>))} <span class=""ml-2 text-gray-600"">{rating}/ 5</span></div>
CommentBox:
<textarea class=""w-full p-4 mb-4 border border-gray-300 rounded"" placeholder=""Leave your comment..."" rows={5}></textarea>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button>"
Search bar with autocomplete suggestions,"description:
The UI consists of a search bar where a user can type in their query. Below the search bar, as the user types, a list of autocomplete suggestions should appear. These suggestions are dynamically updated based on the user's input. Each suggestion is selectable. The layout should be clean and simple, with clear visual separation between suggestions.
components:
- SearchInput: Standalone component where users can type their search queries.
- AutocompleteList: Component that takes children. It displays the list of suggestions.
- SuggestionItem: Component that takes children. It represents a single suggestion within the list.
html:
<div class=""p-4""><SearchInput/><AutocompleteList><SuggestionItem>Example Suggestion 1</SuggestionItem><SuggestionItem>Example Suggestion 2</SuggestionItem><SuggestionItem>Example Suggestion 3</SuggestionItem></AutocompleteList></div>
component html:
SearchInput:
<!-- Search input allowing user to type queries --><input type=""text"" aria-label=""Search"" placeholder=""Type to search..."" class=""w-full p-2 border border-gray-300 rounded-md""/>
AutocompleteList:
<!-- Container for autocomplete suggestions --><ul class=""list-none mt-1 bg-white border border-gray-200 rounded-md overflow-hidden"">{children} </ul>
SuggestionItem:
<!-- Individual suggestion item --><li class=""p-2 hover:bg-gray-100 cursor-pointer"">{children} </li>"
Course Progress Bars,"description:
The UI should display a progress bar indicating the completion percentage of a course, with a label showing the percentage complete. The progress bar should be responsive, mobile-friendly, and accessible.
components:
- ProgressBar: (standalone) - displays the progress bar with a percentage complete label
- CourseLabel: (standalone) - displays the course name and completion percentage
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- course information --><CourseLabel/><!-- progress bar --><ProgressBar/></div>
component html:
ProgressBar:
<div class=""w-full h-4 rounded bg-gray-200""><div class=""h-4 bg-blue-500 rounded"" style=""width: {progressPercentage}%;""}></div><p class=""text-lg"">{progressPercentage}% Complete</p></div>
CourseLabel:
<h2 class=""text-lg"">{courseName} - {completionPercentage}% Complete</h2>"
Status indicator controls,"description:
The UI should display a status indicator control that shows the current status of a task or process. The control should have different states (e.g., success, error, warning, progress) and be responsive for various screen sizes.
components:
- StatusIndicator: A standalone component that displays the status indicator.
- StatusLabel: A standalone component that displays a brief text label for the status.
html:
<div class=""flex flex-wrap justify-center mb-4""><StatusIndicator/><StatusLabel/></div>
component html:
StatusIndicator:
<span class=""inline-block w-4 h-4 rounded-full {status_color}""><!-- status icon or symbol --></span>
StatusLabel:
<span class=""text-sm text-gray-600"">{status_label}</span>"
"A footer component with a black background, white text, and links to about, contact, and FAQ pages","description:
The footer should have a black background with white text, making it easily readable. The links to the about, contact, and FAQ pages should be highlighted with a contrasting color to make them stand out. On smaller screens, the links should be stacked vertically to make them easy to tap.
components:
- FooterComponent: (Standalone): This component will contain links to the about, contact, and FAQ pages.
html:
<!-- The FooterComponent is a standalone component --><FooterComponent/>
component html:
FooterComponent:
<footer class=""bg-black h-screen pt-8 pb-12""><div class=""max-w-md mx-auto""><ul class=""flex flex-wrap justify-center mb-4""><li class=""mr-4""><a href=""/about"" class=""text-white hover:text-purple-400 transition duration-300 ease-in-out"">About</a></li><li class=""mr-4""><a href=""/contact"" class=""text-white hover:text-purple-400 transition duration-300 ease-in-out"">Contact</a></li><li><a href=""/faq"" class=""text-white hover:text-purple-400 transition duration-300 ease-in-out"">FAQ</a></li></ul><!-- Add more links or content here if needed --></div></footer>"
Skeleton Screens/Loading,"description:
A loading UI with a loading animation and a set of skeleton screens for a list of items. The loading animation is a simple rotating wheel and the skeleton screens display a set of rectangles with a slight animation.
components:
- LoadingIndicator: a standalone component that displays a rotating wheel
- SkeletonScreen: a standalone component that displays a rectangle that animates to simulate loading
- SkeletonList: a component that takes children, which are a set of `SkeletonScreen` components
html:
<div class=""flex justify-center mt-20""><LoadingIndicator/><SkeletonList><SkeletonScreen/><SkeletonScreen/><SkeletonScreen/></SkeletonList></div>
component html:
LoadingIndicator:
<div class=""inline-block""><div class=""animate-spin h-8 w-8 border-2 border-gray-50 rounded-full border-t-2 border-t-gray-200""><!-- rotating wheel animation --></div></div>
SkeletonScreen:
<div class=""bg-gray-100 animate-pulse h-12 w-64 rounded-lg mt-2""><!-- animated rectangle --></div>
SkeletonList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Footer Social Links,"description:
The UI should display a row of social media links at the bottom of the page, with each link represented by an icon. The links should be spaced evenly and be accessible on various devices.
components:
- SocialLink: (standalone): Displays an individual social media link with an icon.
- FooterSocialLinks: (takes children): A container component that holds a row of social media links.
html:
<footer class=""bg-gray-200 h-screen p-4""><FooterSocialLinks><SocialLink/><SocialLink/><SocialLink/><!-- Add more SocialLink components as needed --></FooterSocialLinks></footer>
component html:
SocialLink:
<a href `{social_media_url}` target=""_blank"" rel=""noopener noreferrer""><i class={`w-6 h-6 text-gray-600 hover:text-gray-900 {social_media_icon_class}`}></i></a>
FooterSocialLinks:
<div class=""flex justify-center mb-4"">{children}</div>"
Search bar with a rounded corner and a white border,"description:
The search bar should be a rectangular input field with a rounded corner and a white border. The border should be 1px thick and the corners should have a 0.5rem radius. The background of the input field should be a light gray color (#F7F7F7) and the text color should be a dark gray color (#333). The search bar should be responsive and adjust its width based on the screen size.
components:
- SearchBar: (Takes Children): A search bar component that takes a input field and a search button as children. It should have a rounded corner and a white border.
html:
<div class=""max-w-md mx-auto p-4""><SearchBar><input type=""text"" placeholder=""Search..."" class=""w-full p-2 pl-10 text-gray-700""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button></SearchBar></div>
component html:
SearchBar:
<div class=""bg-gray-100 border border-white rounded"">{children}</div>"
Ratings and Reviews,"description:
The UI should display a rating system with an average rating and the number of reviews. It should also display a list of individual reviews from users.
components:
- RatingIndicator: Standalone component to display the average rating.
- ReviewList: Component that takes children (individual reviews).
- ReviewItem: Standalone component to display a single review.
html:
<div class=""flex flex-col gap-4""><RatingIndicator/><p>{review_count} reviews</p><ReviewList><ReviewItem/><!-- more ReviewItem components here --></ReviewList></div>
component html:
RatingIndicator:
<div class=""flex items-center gap-2""><span class=""text-xl"">{average_rating}/5</span><i class=""fa fa-star text-yellow-500""></i><span class=""text-gray-500"">{rating_count} ratings</span></div>
ReviewList:
<ul class=""list-none py-4"">{children}</ul>
ReviewItem:
<li class=""py-2 border-b border-gray-200""><div class=""flex items-center justify-between""><div><span class=""text-lg"">{reviewer_name}</span><span class=""text-sm text-gray-500"">{review_date}</span></div><div><i class=""fa fa-star text-yellow-500""></i><span class=""text-sm"">{rating}/5</span></div></div><p class=""text-sm text-gray-600"">{review_text}</p></li>"
User Profile and Reputation Systems,"description:
A user profile and reputation system that displays the user's profile information, reputation score, and badges earned.
components:
- UserProfileCard: standalone component
- BadgeList: takes children
html:
<div class=""max-w-md mx-auto px-4 py-8""><UserProfileCard/><div class=""mt-4""><h2 class=""text-lg font-bold"">Reputation</h2><BadgeList><!-- badges will be inserted here --></BadgeList></div></div>
component html:
UserProfileCard:
<div class=""bg-white shadow-md p-4 rounded""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p><p class=""text-sm text-gray-500"">{joined_at}</p></div>
BadgeList:
<ul class=""flex flex-wrap"">{children}</ul>"
"Post list with title, score, and comments","description:
A list of posts with each item displaying the title, score, and number of comments. The list should be responsive, with a maximum of 3 items per row on larger screens and 1 item per row on smaller screens.
components:
- PostList: A component that takes children, wrapping the list of post items.
html:
<div class=""max-w-md mx-auto p-4""><h1 class=""text-2xl font-bold mb-4"">Post List</h1><PostList><!-- list of post items --></PostList></div>
component html:
PostList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
Featured Video Controls Bar,"description:
The featured video controls bar should be a horizontal bar that appears below the featured video. It should have a play/pause button, a timer, and a volume control button. The bar should be responsive and adapt to different screen sizes.
components:
- VideoControlsBar: A standalone component that contains all video controls.
- PlayPauseButton: A standalone button that toggles the video playback state.
- VideoTimer: A standalone component that displays the video playback time.
- VolumeControlButton: A standalone button that controls the video volume.
html:
<div class=""flex justify-center mb-4""><VideoControlsBar/></div>
component html:
VideoControlsBar:
<div class=""flex justify-between p-2 bg-gray-200 rounded""><PlayPauseButton/><VideoTimer/><VolumeControlButton/></div>
PlayPauseButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{play_pause_button_text}</button>
VideoTimer:
<p class=""text-gray-600"">{video_current_time}/ {video_duration}</p>
VolumeControlButton:
<button class=""bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"">{volume_button_text}</button>"
Social Media Feed Item,"description:
A social media feed item that displays a user's profile picture, name, timestamp, and a brief text message. The item should be responsive, mobile-first, and accessible.
components:
- UserProfilePicture: Standalone component that displays a user's profile picture.
- UsernameAndTimestamp: Standalone component that displays a user's name and timestamp.
- MessageText: Standalone component that displays a brief text message.
- SocialMediaFeedItem: Component that takes children (UserProfilePicture, UsernameAndTimestamp, and MessageText).
html:
<div class=""flex gap-2 p-4""><SocialMediaFeedItem><UserProfilePicture/><UsernameAndTimestamp/><MessageText/></SocialMediaFeedItem></div>
component html:
UserProfilePicture:
<img class=""w-10 h-10 rounded-full"" src={profilePictureUrl} alt=""User Profile Picture""/>
UsernameAndTimestamp:
<div class=""flex flex-col""><p class=""font-bold"">{userName}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div>
MessageText:
<p class=""text-sm"">{messageText}</p>
SocialMediaFeedItem:
<div class=""flex flex-wrap"">{children}</div>"
Navigation bar that remains fixed at the top of the page as users scroll,"description:
The UI should have a navigation bar that remains fixed at the top of the page as users scroll. The navigation bar should be responsive, with items stacking vertically on smaller screens.
components:
- NavigationBar: A standalone component that contains navigation items.
- NavItem: A component that takes children, representing a single navigation item.
html:
<header class=""fixed top-0 left-0 w-full bg-gray-800 py-4""><NavigationBar/></header>
component html:
NavigationBar:
<nav class=""container mx-auto p-4 flex justify-between""><NavItem>Home</NavItem><NavItem>About</NavItem><NavItem>Contact</NavItem></nav>
NavItem:
<a class=""text-white hover:text-gray-200 transition duration-300 ease-in-out"">{children}</a>"
Recommended videos carousel,"description:
The UI should be a responsive carousel that displays a list of recommended videos, with each video preview displayed as a card with a thumbnail, title, and duration. The carousel should have navigation arrows to navigate through the list of videos.
components:
- VideoCard: A standalone component that represents a single video preview card.
- Carousel: A component that takes children (`VideoCard`s) and renders a carousel with navigation arrows.
- CarouselNavigation: A standalone component that represents the navigation arrows (previous and next) for the carousel.
html:
<div class=""container mx-auto p-4 lg:p-6""><Carousel><VideoCard/><VideoCard/><VideoCard/><!-- Add more VideoCard components here --></Carousel><CarouselNavigation/></div>
component html:
VideoCard:
<div class=""bg-white rounded shadow-md overflow-hidden""><img src=""{video_thumbnail_url}"" alt=""Video Thumbnail"" class=""w-full""/><div class=""p-4""><h2 class=""text-lg font-bold"">{video_title}</h2><p class=""text-gray-600"">{video_duration}</p></div></div>
Carousel:
<div class=""carousel relative""><div class=""carousel-inner relative overflow-hidden"">{children} </div><CarouselNavigation/></div>
CarouselNavigation:
<div class=""carousel-navigation absolute top-1/2 -translate-y-1/2""><button class=""prev btn btn-prev"" aria-label=""Previous""><span class=""sr-only"">Previous</span><svg><!-- Replace with an icon --></svg></button><button class=""next btn btn-next"" aria-label=""Next""><span class=""sr-only"">Next</span><svg><!-- Replace with an icon --></svg></button></div>"
Accessibility options,"description:
The UI should be a simple accessibility options panel with features such as font size adjustment, color scheme toggle, and high contrast mode.
components:
- AccessibilityOptionsPanel: standalone
- FontSizeAdjuster: standalone
- ColorSchemeToggle: standalone
- HighContrastModeToggle: standalone
html:
<div class=""max-w-md mx-auto p-4 pt-6 bg-white rounded-md shadow-md""><h2 class=""text-lg font-bold mb-4"">Accessibility Options</h2><AccessibilityOptionsPanel/></div>
component html:
AccessibilityOptionsPanel:
<div class=""flex flex-col space-y-4""><FontSizeAdjuster/><ColorSchemeToggle/><HighContrastModeToggle/></div>
FontSizeAdjuster:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""font-size"">Font Size:</label><select class=""px-2 py-1"" id=""font-size""><option value=""small"">Small</option><option value=""medium"">Medium</option><option value=""large"">Large</option></select></div>
ColorSchemeToggle:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""color-scheme"">Color Scheme:</label><span class=""mr-2"">{current_scheme}</span><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" onClick={toggleColorScheme}>Toggle</button></div>
HighContrastModeToggle:
<div class=""flex items-center""><label class=""mr-2"" htmlFor=""high-contrast"">High Contrast:</label><input type=""checkbox"" id=""high-contrast"" defaultChecked={high_contrast_enabled} onChange={toggleHighContrastMode}/><span class=""ml-2"">{high_contrast_mode_label}</span></div>"
Hero Overlay Opacity,"description:
The UI should be a full-width hero section with a dark overlay that overlays a background image. The overlay should have a subtle opacity, allowing the background image to still be visible.
components:
- HeroSection: (standalone): The main hero section component that contains the background image and overlay.
- HeroOverlay: (standalone): The dark overlay component that overlays the background image.
html:
<section class=""h-screen w-full""><HeroSection/></section>
component html:
HeroSection:
<div class=""h-full w-full relative""><img src=""{background_image_url}"" alt=""Background Image"" class=""absolute h-full w-full object-cover""/><HeroOverlay/></div>
HeroOverlay:
<div class=""absolute h-full w-full bg-gray-900 opacity-50""></div>"
"Prominent banner encouraging users to take a specific action, often displayed at the top of the page","description:
The UI should be a prominent banner that encourages users to take a specific action, often displayed at the top of the page. It should have a clear call-to-action (CTA) and be visually appealing.
components:
- HeroBanner: A standalone component that contains a heading, a paragraph, and a call-to-action button.
html:
<!-- Hero Banner --><div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8""><HeroBanner/></div>
component html:
HeroBanner:
<!-- Hero Banner Component --><div class=""bg-orange-500 py-4 md:py-6 lg:py-8""><div class=""container mx-auto p-4""><h2 class=""text-2xl md:text-3xl lg:text-4xl font-bold text-white"">{heading}</h2><p class=""text-lg md:text-xl lg:text-2xl text-white"">{description}</p><button class=""bg-white hover:bg-gray-100 text-orange-500 font-bold py-2 px-4 rounded"">{cta_text}</button></div></div>"
"A Call-to-Action (CTA) button with a bright orange color (#FFC107) and white text, encouraging users to sign up or enroll in a course","description:
The UI should have a prominent CTA button that grabs the user's attention. The button should have a bright orange color (#FFC107) and white text to create a high contrast and make it easily readable. The button should be large enough to be easily clickable on mobile devices. On larger screen sizes, the button should have more padding to make it more prominent.
components:
- CallToAction: (Standalone): A button that encourages users to sign up or enroll in a course.
html:
<div class=""flex justify-center""><CallToAction/></div>
component html:
CallToAction:
<button class=""bg-#{ffc107} text-white font-bold py-2 px-4 rounded-lg shadow-md hover:shadow-lg"">{cta_text}</button>"
Header bar with logo and navigation,"description:
The UI should have a header bar with a logo on the left side and a navigation menu on the right side. The navigation menu should be responsive and hide behind a hamburger menu on smaller screens.
components:
- NavigationBar: (standalone): contains the navigation links
- Logo: (standalone): displays the logo
- HeaderBar: (takes children): contains the logo and navigation
html:
<header class=""container mx-auto p-4""><HeaderBar><Logo/><NavigationBar/></HeaderBar></header>
component html:
NavigationBar:
<nav class=""hidden sm:flex justify-between""><ul class=""flex flex-wrap justify-between""><li><a href=""{nav_link_1}"">{nav_link_1_text}</a></li><li><a href=""{nav_link_2}"">{nav_link_2_text}</a></li><!-- add more list items for more navigation links --><li class=""sm:hidden""><button class=""flex justify-center w-full""><svg><!-- icon --></svg></button></li></ul></nav>
Logo:
<a href=""/"" class=""text-2xl font-bold""><span class=""hidden sm:inline"">{logo_text}</span><img src=""{logo_image}"" alt=""{logo_alt_text}"" class=""h-8 w-8 sm:h-10 sm:w-10""/></a>
HeaderBar:
<div class=""flex justify-between items-center"">{children}</div>"
JSON Data Visualization,"description:
The UI should display a hierarchical representation of the JSON data, with collapsible sections for objects and arrays. Each key-value pair should be displayed with the key on the left and the value on the right. The UI should be responsive and adapt to different screen sizes.
components:
- JsonViewer: The top-level component that renders the JSON data visualization. This component takes children.
- JsonObject: Renders a single JSON object with its key-value pairs. This component takes children.
- JsonArray: Renders a single JSON array with its elements. This component takes children.
- KeyValue: Renders a single key-value pair. This component is standalone.
html:
<div class=""container mx-auto p-4""><JsonViewer><!-- JSON data visualization will be rendered here --></JsonViewer></div>
component html:
JsonViewer:
<div class=""bg-white shadow-md rounded p-4"">{children}</div>
JsonObject:
<div class=""flex flex-wrap justify-between mb-2""><span class=""text-gray-600"">{key}</span><div class=""ml-2"">{children}</div></div>
JsonArray:
<ul class=""list-none mb-2"">{children}</ul>
KeyValue:
<div class=""flex flex-wrap justify-between mb-2""><span class=""text-gray-600"">{key}</span><span class=""ml-2"">{value}</span></div>"
Switches/Toggles/Buttons,"description:
A toggle button, a switch, and a button, each with a different style, layout, and purpose.
components:
- ToggleSwitch: A toggle switch component that can be either on or off. Standalone.
- SwitchButton: A switch button component that can be either enabled or disabled. Standalone.
- ActionButton: A button component that can be clicked to perform an action. Standalone.
html:
<div class=""flex flex-col gap-4 p-4""><ToggleSwitch/><SwitchButton/><ActionButton/></div>
component html:
ToggleSwitch:
<label class=""inline-flex items-center""><input type=""checkbox"" class=""hidden""/><span class=""toggle-slider round""></span></label>
SwitchButton:
<button class=""bg-{color}-500 hover:bg-{color}-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white hover:text-white py-2 px-4 rounded"">{label}</button>"
"Ahero section with a large background image of a sports stadium or a famous athlete, overlaid with a headline and a call-to-action button","description:
The Hero section should have a large background image of a sports stadium or a famous athlete, overlaid with a headline and a call-to-action button. The background image should be responsive and scale nicely on different screen sizes. The headline should be large and prominent, with a clear and concise message. The call-to-action button should stand out with a contrasting color and a clear action. The layout should be simple, clean, and easy to navigate.
components:
- HeroSection: (Takes Children): A container component that wraps the background image, headline, and call-to-action button.
- HeroBackground: (Standalone): A component that displays the background image.
- HeroHeadline: (Standalone): A component that displays the headline text.
- HeroCTA: (Standalone): A component that displays the call-to-action button.
html:
<HeroSection><HeroBackground/><HeroHeadline/><HeroCTA/></HeroSection>
component html:
HeroSection:
<section class=""h-screen flex justify-center items-center relative"">{children}</section>
HeroBackground:
<div class=""absolute top-0 left-0 w-full h-full bg-cover bg-center"" style=""backgroundImage: url({heroBackgroundImage});""}></div>
HeroHeadline:
<h1 class=""text-4xl lg:text-6xl font-bold text-white"">{heroHeadlineText}</h1>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroCTAText} </button>"
Variable,"description:
- The UI should feature a display area that shows a label ""Variable Name"" alongside its corresponding variable value, which can dynamically change.
   - It should be clear, minimalist, and easy to read, with a focus on presenting the variable in a visually accessible manner.
components:
- VariableDisplay: (Standalone)**: This component displays the variable name and its value.
html:
<div class=""container mx-auto px-4 py-6""><VariableDisplay/></div>
component html:
VariableDisplay:
<!-- VariableDisplay: Displays the variable name and current value --><div class=""bg-gray-100 p-4 rounded-lg shadow""><h2 class=""font-semibold"">Variable Name:</h2><p class=""text-lg"">{variable_value}</p></div>"
Product documentation,"description:
The UI should display a product documentation page with a navigation menu, a section for the product description, and a section for the technical specifications.
components:
- NavigationBar: A standalone component that displays a navigation menu with links to different sections of the documentation.
- ProductDescription: A standalone component that displays the product description.
- TechnicalSpecifications: A standalone component that displays the technical specifications of the product.
html:
<div class=""container mx-auto p-4 lg:p-8""><NavigationBar/><main class=""flex flex-col lg:flex-wrap lg:flex-row""><ProductDescription/><TechnicalSpecifications/></main></div>
component html:
NavigationBar:
<nav class=""flex justify-center mb-4 lg:mb-8""><ul class=""list-none p-0 m-0 flex flex-wrap justify-center lg:justify-start""><li class=""mr-4 lg:mr-8 mb-2 lg:mb-0""><a href=""#description"" class=""text-blue-600 hover:text-blue-900"">{nav_link_text}</a></li><li class=""mr-4 lg:mr-8 mb-2 lg:mb-0""><a href=""#technical-specifications"" class=""text-blue-600 hover:text-blue-900"">{nav_link_text}</a></li></ul></nav>
ProductDescription:
<section id=""description"" class=""mb-8 lg:mb-12""><h2 class=""text-2xl lg:text-3xl mb-2"">{description_title}</h2><p class=""text-lg"">{description_text}</p></section>
TechnicalSpecifications:
<section id=""technical-specifications"" class=""mb-8 lg:mb-12""><h2 class=""text-2xl lg:text-3xl mb-2"">{technical_specifications_title}</h2><ul class=""list-none p-0 m-0""><li class=""mb-2"">{specification_item}</li><!-- Add more list items as needed --></ul></section>"
"A comment component that stands out from the dark background, with:","description:
The comment component should have a bright background to stand out from the dark background. It should also have a subtle shadow to give it some depth. The text should be easily readable and have a slight opacity to give it a soft look.
components:
- Comment: (Takes Children): This component represents a single comment. It should have a bright background and a subtle shadow. On smaller screens, it should take up the full width of the screen, and on larger screens, it should be limited to a maximum width.
html:
<div class=""flex flex-col gap-4""><!-- multiple Comment components here --><Comment>{children}</Comment></div>
component html:
Comment:
<div class=""bg-yellow-100 shadow-md p-4 rounded-md""><p class=""text-lg text-gray-700"">{children}</p><!-- optional reply button --><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md"">{replyText}</button></div>"
"A card component with a soft shadow, rounded corners, and a subtle gradient effect","description:
The UI should be a card component with a soft shadow, rounded corners, and a subtle gradient effect. The card should have a clean and modern design, with a subtle gradient that adds depth and dimension. The rounded corners should make the card feel friendly and approachable. The soft shadow should give the card a sense of elevation and make it stand out from the background.
components:
- CardContent: (Takes Children): This component contains the content of the card, and can contain any type of content (e.g. text, images, etc.). On small screens, the content should be stacked vertically. On medium screens and above, the content should be displayed in a horizontal row.
- CardShadow: (Standalone): This component adds a soft shadow to the card, giving it a sense of elevation.
- CardGradient: (Standalone): This component adds a subtle gradient effect to the card, adding depth and dimension.
html:
<div class=""bg-white rounded-lg overflow-hidden shadow-md""><CardShadow/><CardGradient/><CardContent>{children}</CardContent></div>
component html:
CardContent:
<div class=""p-4 md:flex md:justify-between"">{children}</div>
CardShadow:
<div class=""absolute -inset-1 shadow-lg""/>
CardGradient:
<div class=""absolute -inset-1 gradient-to-r from-gray-100 to-gray-200 opacity-50""/>"
Integrations Hub: Connect third-party apps,"description:
The UI should be a card-based layout that displays a list of integrations. Each card should have a logo of the third-party app, a brief description, and a Connect button. The layout should be responsive, with the cards stacking vertically on mobile devices and displaying in a grid on larger screens.
components:
- IntegrationCard: A standalone component that represents a single integration.
- IntegrationsList: A component that takes children (IntegrationCard components) and displays them in a responsive grid.
html:
<section class=""container mx-auto p-4 pt-6 pb-10""><h1 class=""text-3xl font-bold mb-4"">Integrations Hub</h1><IntegrationsList><IntegrationCard/><IntegrationCard/><!-- Repeat IntegrationCard components for each integration --></IntegrationsList></section>
component html:
IntegrationCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 hover:shadow-lg""><div class=""flex items-center mb-2""><img src=""{integration_logo_url}"" alt=""{integration_name}"" class=""w-8 h-8 mr-2""/><h2 class=""text-lg font-bold"">{integration_name}</h2></div><p class=""text-gray-600"">{integration_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Connect</button></div>
IntegrationsList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Review/comment sections,"description:
The UI should display a list of reviews/comments with the reviewer's name, rating, and comment text. The reviewer's name and rating should be displayed above the comment text. The UI should be responsive and adapt to different screen sizes.
components:
- ReviewCard: A standalone component that displays a single review/comment.
- ReviewList: A component that takes children and displays a list of reviews/comments.
html:
<div class=""max-w-md mx-auto p-4""><ReviewList><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewList></div>
component html:
ReviewCard:
<div class=""bg-white p-4 rounded-md shadow-md mb-4""><h4 class=""text-lg font-bold"">{reviewerName}</h4><div class=""flex justify-between mb-2""><span class=""text-sm text-gray-500"">{rating}/5</span><span class=""text-sm text-gray-500"">{datePosted}</span></div><p class=""text-sm"">{commentText}</p></div>
ReviewList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
A horizontal divider with a subtle drop shadow,"description:
The UI should have a horizontal divider with a subtle drop shadow to separate sections of content. The divider should be visually appealing and responsive, adjusting its size and style based on the screen size.
components:
- HorizontalDivider: (Standalone): A horizontal divider with a subtle drop shadow.
html:
<div class=""flex flex-col justify-center items-center h-screen""><!-- content above the divider --><HorizontalDivider/><!-- content below the divider --></div>
component html:
HorizontalDivider:
<div class=""h-px bg-gray-200 shadow-md""></div><!-- subtle drop shadow --><div class=""h-0.5 bg-gray-100 shadow-sm""></div></div>"
Related articles display,"description:
The UI should display a list of related articles in a compact, easily readable format. The list should be responsive, with articles displayed in a single column on mobile devices and in multiple columns on larger screens.
components:
- RelatedArticlesList: A component that takes children and displays a list of related articles.
html:
<section class=""container max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Related Articles</h2><RelatedArticlesList><!-- list of ArticleTeaser components will be inserted here --></RelatedArticlesList></section>
component html:
RelatedArticlesList:
<ul class=""list-none mb-0"">{children}</ul>"
"Image cards with a soft, rounded corner and a 1-pixel border","description:
The UI should consist of a grid of image cards with soft, rounded corners and a 1-pixel border. The cards should have a subtle shadow to give them depth. On smaller screens, the cards should stack vertically, and on larger screens, they should be arranged in a grid. The cards should have a consistent spacing between them, and the grid should have a maximum width to prevent the cards from becoming too wide.
components:
- ImageGrid: (Takes Children): A grid component that arranges `ImageCard` components in a responsive grid.
html:
<div class=""max-w-xl mx-auto p-4 lg:p-6""><ImageGrid><!-- Image cards will be rendered here --></ImageGrid></div>
component html:
ImageGrid:
<div class=""grid gap-4 lg:gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Trust Badges: Establish credibility with security badges,"description:
The UI should display a horizontal row of trust badges, each representing a security feature or certification. The badges should be evenly spaced and center-aligned, with sufficient padding between each badge to maintain a clean and organized design.
components:
- TrustBadge: (standalone): A single trust badge component that displays a security feature or certification.
- TrustBadgeList: (takes children): A container component that wraps a collection of `TrustBadge` components.
html:
<div class=""flex justify-center flex-wrap""><TrustBadgeList><TrustBadge/><TrustBadge/><TrustBadge/><!-- Add more TrustBadge components here --></TrustBadgeList></div>
component html:
TrustBadge:
<div class=""bg-white shadow-md rounded p-4""><img src=""{badge_image}"" alt=""{badge_alt_text}"" class=""w-12 h-12 mr-4""><div class=""text-lg"">{badge_text}</div></div>
TrustBadgeList:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Footer with copyright information and disclaimer,"description:
The UI should be a footer section that displays copyright information and a disclaimer. It should be responsive, mobile-first, and accessible.
components:
- FooterComponent: (standalone): The main footer component that wraps the copyright information and disclaimer.
- CopyrightComponent: (standalone): Displays the copyright information.
- DisclaimerComponent: (standalone): Displays the disclaimer.
html:
<footer class=""bg-gray-200 h-screen pt-4 pb-4""><FooterComponent/></footer>
component html:
FooterComponent:
<div class=""max-w-md mx-auto px-4 lg:px-8""><CopyrightComponent/><DisclaimerComponent/></div>
CopyrightComponent:
<p class=""text-sm text-gray-600"">&copy; {copyright_year} {company_name}. All rights reserved.</p>
DisclaimerComponent:
<p class=""text-sm text-gray-600"">{disclaimer_text}</p>"
Icon Fonts/SVG Sprites,"description:
The UI should display a set of icons, each representing a specific action or concept. The icons should be accessible, responsive, and mobile-first.
components:
- IconComponent: (standalone) - A single icon element with a specific class for styling.
- IconSet: (takes children) - A container element that holds multiple `IconComponent`s.
html:
<div class=""flex flex-wrap justify-center""><IconSet><IconComponent/><IconComponent/><IconComponent/><!-- more icons --></IconSet></div>
component html:
IconComponent:
<i aria-hidden=""true"" class=""text-lg {icon_class}""/>
IconSet:
<div class=""flex flex-wrap justify-center"">{children}</div>"
A search bar component featuring a magnifying glass icon and a white input field on a black background,"description:
The search bar component should be a rectangular box with a black background, a white input field, and a magnifying glass icon on the left side of the input field. The component should be responsive, with the input field and icon adjusting sizes based on the screen size. The component should have a shadow to give it a slight 3D effect.
components:
- SearchBar: (Takes Children): A container component that includes the input field and the magnifying glass icon.
- SearchInput: (Standalone): The input field where the user can type their search query.
- SearchIcon: (Standalone): The magnifying glass icon that appears next to the input field.
html:
<div class=""bg-black rounded-lg p-2 shadow-md""><SearchBar><SearchIcon/><SearchInput/></SearchBar></div>
component html:
SearchBar:
<div class=""flex items-center"">{children}</div>
SearchInput:
<input type=""search"" placeholder={search_placeholder} class=""bg-white p-2 pl-8 w-full rounded-lg text-lg""/>
SearchIcon:
<i class=""fas fa-search text-white text-lg mr-2""/>"
Alert message display,"description:
The UI should display a message with a background color and text color that indicates the type of alert (e.g. success, error, warning, info). The message should be dismissible and have a close button.
components:
- AlertMessage: A standalone component that displays an alert message.
- CloseButton: A standalone component that displays a close button.
html:
<div class=""max-w-md p-4 mx-auto mt-4""><AlertMessage/><CloseButton/></div>
component html:
AlertMessage:
<div class=""bg-{alert_color}-100 border-{alert_color}-400 text-{alert_color}-700 p-4 rounded-md mb-4"">{message}</div>
CloseButton:
<button class=""absolute top-0 right-0 px-4 py-2 text-gray-600 hover:text-gray-900""><i class=""fas fa-times""></i></button>"
Vertical or horizontal bar for scrolling through content that doesn't fit within the viewport,"description:
The UI should have a scrollbar that allows users to scroll through content that exceeds the viewport's width or height. The scrollbar should be responsive, mobile-friendly, and accessible.
components:
- ScrollbarContainer: (standalone): A container that wraps the scrollbar and its associated content.
- Scrollbar: (standalone): The scrollbar component that allows users to scroll through content.
- ScrollbarThumb: (standalone): The draggable thumb of the scrollbar that indicates the scrolled position.
html:
<div class=""overflow-auto h-screen""><ScrollbarContainer/><!-- content that exceeds the viewport's width or height --><div>Long content...</div></div>
component html:
ScrollbarContainer:
<div class=""fixed right-0 top-0 h-full""><Scrollbar/></div>
Scrollbar:
<div class=""w-2 bg-gray-300 rounded-lg""><ScrollbarThumb/></div>
ScrollbarThumb:
<div class=""bg-gray-500 rounded-full w-full h-4"">{scrollbar_thumb_size}</div>"
Texture controls,"description:
A simple, responsive texture controls UI with a toggle button to switch between two texture modes. The UI should be accessible and easy to use on mobile and desktop devices.
components:
- TextureToggle: (standalone) - a toggle button to switch between two texture modes
- TextureModeButton: (standalone) - a button representing a texture mode
html:
<div class=""flex justify-center mx-auto py-4""><TextureToggle/></div>
component html:
TextureToggle:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded""><span>{textureModeTitle}</span><span class=""ml-2""><!-- toggle indicator --><span class=""bg-gray-400 hover:bg-gray-500 w-4 h-4 rounded-full inline-block""></span></span></button>
TextureModeButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">{textureModeLabel}</button>"
Button for submitting a new post or comment,"description:
A primary button with a submit icon, with a responsive design that adapts to different screen sizes.
components:
- SubmitButton: standalone component
html:
<div class=""flex justify-center mb-4""><SubmitButton/></div>
component html:
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-paper-plane mr-2"" aria-hidden=""true""></i>Submit</button>"
"Workout routine card component with an image, title, and short description, displayed on a white background with a subtle shadow effect","description:
The UI should display a workout routine card with an image, title, and short description on a white background with a subtle shadow effect. The card should be responsive, accessible, and visually appealing, with a consistent color palette throughout. The layout should guide the user's attention and make it easy to navigate.
components:
- WorkoutCard: (Takes Children): A container component that holds the workout routine card's content.
- ImageThumbnail: (Standalone): A component that displays the workout routine's image.
- WorkoutTitle: (Standalone): A component that displays the workout routine's title.
- WorkoutDescription: (Standalone): A component that displays the workout routine's short description.
html:
<div class=""max-w-md bg-white shadow-md rounded-md p-4 md:p-6 lg:p-8""><WorkoutCard><ImageThumbnail/><WorkoutTitle/><WorkoutDescription/></WorkoutCard></div>
component html:
WorkoutCard:
<div class=""flex flex-col p-4 md:p-6 lg:p-8"">{children}</div>
ImageThumbnail:
<img src=""{image_url}"" alt=""Workout Routine Image"" class=""w-full h-48 object-cover rounded-md""/>
WorkoutTitle:
<h2 class=""text-lg md:text-xl lg:text-2xl font-bold"">{workout_title}</h2>
WorkoutDescription:
<p class=""text-gray-600"">{workout_description}</p>"
Button Group Container,"description:
A responsive button group container that can hold multiple buttons and is accessible on various devices.
components:
- Button: (standalone) - A single button component.
- ButtonGroupContainer: (takes children) - A container that holds multiple buttons.
html:
<div class=""flex flex-wrap justify-center""><ButtonGroupContainer><Button/><!-- Button 1 --><Button/><!-- Button 2 --><Button/><!-- Button 3 --></ButtonGroupContainer></div>
component html:
Button:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_label}</button>
ButtonGroupContainer:
<div class=""flex flex-wrap justify-center"">{children}</div>"
"Sorting options for posts by top, new, and hot","description:
The UI should be a horizontal navigation bar with three options: ""Top"", ""New"", and ""Hot"". Each option should be a tab-like button that indicates the selected sorting option.
components:
- SortingOption: (standalone): A single sorting option button.
- SortingNavigation: (takes children): A horizontal navigation bar that contains multiple `SortingOption` components.
html:
<nav class=""flex justify-center mb-4""><SortingNavigation><SortingOption/><SortingOption/><SortingOption/></SortingNavigation></nav>
component html:
SortingOption:
<button type=""button"" class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{sort_label}</button>
SortingNavigation:
<nav class=""flex justify-center"">{children}</nav>"
Compose email button with dropdown menu,"description:
The UI should be a button that says ""Compose Email"" with a dropdown arrow on the right side. When clicked, a dropdown menu should appear below the button, containing a list of email composition options.
components:
- ComposeEmailButton: Standalone component that displays the ""Compose Email"" button with a dropdown arrow.
- DropdownMenu: Component that takes children, representing the dropdown menu items.
html:
<div class=""flex justify-center""><ComposeEmailButton/></div><div class=""absolute""><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu></div>
component html:
ComposeEmailButton:
<button class=""bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"">Compose Email <span class=""ml-2 text-lg"">{caret_down_icon}</span></button>
DropdownMenu:
<ul class=""bg-white shadow-md py-1"">{children}</ul>"
Toast/Notification Messages,"description:
The UI should display a notification message that appears at the top of the screen, with a background color indicating the type of message (e.g. success, error, warning). The message should be easily readable and have a close button to dismiss it.
components:
- NotificationMessage: standalone component that displays a single notification message.
- NotificationCloseButton: standalone component that renders a close button for the notification message.
html:
<div class=""fixed top-0 left-0 w-full p-4""><NotificationMessage/></div>
component html:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"" role=""alert""><p>{message}</p><NotificationCloseButton/></div>
NotificationCloseButton:
<button aria-label=""Close notification"" class=""text-orange-500 hover:text-orange-700 transition duration-300"">×</button>"
"A destination card component with a rectangular image, title, and short description","description:
The destination card should have a visually appealing design that showcases a rectangular image, title, and short description. The image should be prominent and take up most of the card's space. The title should be bold and attention-grabbing, while the description should be concise and easy to read. The card should be responsive, with a layout that adapts to different screen sizes.
components:
- DestinationCard: (Takes Children): A container component that holds the image, title, and description.
- ImageContainer: (Standalone): A component that wraps the image.
- CardContent: (Takes Children): A component that contains the title and description.
html:
<div class=""flex flex-wrap justify-center mb-4""><DestinationCard><!-- card content will be rendered here --></DestinationCard></div>
component html:
DestinationCard:
<div class=""md:flex md:flex-wrap bg-white rounded-lg shadow-md p-4"">{children}</div>
ImageContainer:
<img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 object-cover rounded-t-lg""/>
CardContent:
<div class=""p-4""><h2 class=""text-lg font-bold mb-2"">{title}</h2><p class=""text-gray-600"">{description}</p>{children}</div>"
Header: Site title and navigation links,"description:
The UI should be a header section at the top of the webpage, featuring a site title on the left side and navigation links on the right side. The site title should be prominent and centered on mobile devices, while the navigation links should be stacked on top of each other on mobile devices and aligned horizontally on larger screens.
components:
- SiteTitle: (standalone): displays the title of the site
- NavLink: (standalone): displays a single navigation link
- NavLinks: (takes children): a container for multiple `NavLink` components
- Header: (takes children): the top-level component that contains the site title and navigation links
html:
<header><Header><SiteTitle/><NavLinks><NavLink/><NavLink/><!-- Add more NavLink components as needed --></NavLinks></Header></header>
component html:
SiteTitle:
<h1 class=""text-3xl font-bold"">{site_title}</h1>
NavLink:
<a href=""{nav_link_url}"" class=""text-lg"">{nav_link_text}</a>
NavLinks:
<nav class=""flex flex-wrap justify-end md:flex-row"">{children}</nav>
Header:
<div class=""container mx-auto p-4 md:flex md:justify-between"">{children}</div>"
Personalized Dashboard with Project Insights,"description:
The UI should be a responsive, mobile-first dashboard that displays personalized project insights to the user. The dashboard should have a clean and modern design, with clear typography and adequate whitespace. The layout should adapt to different screen sizes, with a maximum width of 1200px.
components:
- ProjectCard: A standalone component that displays a single project's details, including its name, description, and progress metrics.
- MetricCard: A standalone component that displays a single metric, such as project completion percentage or task count.
- ProjectList: A component that takes children, which are a list of `ProjectCard` components.
- Header: A standalone component that displays the dashboard title and any additional header elements.
- Sidebar: A standalone component that displays navigation links and other sidebar elements.
html:
<div class=""flex h-screen""><Sidebar/><div class=""flex-1 overflow-y-auto""><Header/><div class=""px-4 pt-4""><h1 class=""text-2xl font-bold"">{dashboard_title}</h1><div class=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4""><ProjectList><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ProjectList></div></div></div></div>
component html:
ProjectCard:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg font-bold"">{project_name}</h2><p class=""text-gray-600"">{project_description}</p><div class=""flex justify-between mt-2""><MetricCard/><MetricCard/></div></div>
MetricCard:
<div class=""bg-white shadow-md rounded p-2""><p class=""text-lg font-bold"">{metric_value}</p><p class=""text-gray-600"">{metric_label}</p></div>
ProjectList:
<!-- This component will render child ProjectCard components -->{children}
Header:
<header class=""bg-gray-100 py-4""><nav class=""container mx-auto flex justify-between""><h1 class=""text-lg font-bold"">{dashboard_title}</h1><ul class=""flex""><li class=""mr-4""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li></ul></nav></header>
Sidebar:
<aside class=""w-64 bg-gray-100 p-4""><nav><ul><li class=""mb-2""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_1}</a></li><li><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{nav_link_2}</a></li></ul></nav></aside>"
"Product description component that renders the product description in a smaller, regular font","description:
The ProductDescription component should be a simple text component that displays a brief product description in a smaller, regular font. The text should be easily readable and should not draw attention away from the product title or other important information.
components:
- ProductDescription: (Takes Children): This component takes a string of text as its child element, which is the product description.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><!-- Other product information components here --><ProductDescription>{product_description_text}
</ProductDescription></div>
component html:
ProductDescription:
<p class=""text-sm text-gray-600"">{children}</p>"
"A component that displays a list of user testimonials with avatars, names, and quotes","description:
The UI should feature a responsive grid of testimonials with avatars, names, and quotes. The testimonials should be organized in a masonry layout, with each testimonial having a max-width to ensure readability. On smaller screens, the testimonials should stack vertically, and on larger screens, they should be arranged in a grid. The UI should have a clean, minimalistic design with ample whitespace to guide the user's attention.
components:
- TestimonialsGrid: (Takes Children): A grid of TestimonialCards that arranges them in a masonry layout.
html:
<div class=""container mx-auto p-4 lg:p-6""><TestimonialsGrid><!-- Testimonials will be rendered here --></TestimonialsGrid></div>
component html:
TestimonialsGrid:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Roadmap/Gantt Charts,"description:
The UI should display a Gantt chart with a roadmap layout, showing a timeline of tasks and their dependencies. The chart should be responsive, mobile-friendly, and accessible.
components:
- RoadmapHeader: (standalone): displays the title and description of the roadmap
- GanttChart: (takes children): renders the Gantt chart with tasks and dependencies
- TaskCard: (standalone): represents a single task on the Gantt chart
- DependencyLine: (standalone): connects dependent tasks on the Gantt chart
- TimelineMarkers: (standalone): displays the timeline labels and grid lines
html:
<div class=""max-w-md mx-auto p-4""><RoadmapHeader/><GanttChart><TaskCard/><TaskCard/><TaskCard/><DependencyLine/><DependencyLine/></GanttChart><TimelineMarkers/></div>
component html:
RoadmapHeader:
<h1 class=""text-3xl font-bold"">{roadmap_title}</h1><p class=""text-lg"">{roadmap_description}</p>
GanttChart:
<div class=""flex flex-wrap justify-center"">{children}</div>
TaskCard:
<div class=""bg-white shadow-md rounded p-2""><h2 class=""text-lg"">{task_name}</h2><p class=""text-sm"">{task_description}</p><p class=""text-xs"">{task_duration} days</p></div>
DependencyLine:
<div class=""border-l-2 border-dashed border-gray-300""></div>
TimelineMarkers:
<div class=""flex justify-between""><p class=""text-sm"">{start_date}</p><p class=""text-sm"">{end_date}</p><p class=""text-sm"">{today_date}</p></div>"
Outline (stroke) controls,"description:
The UI should display a group of outline controls, each consisting of a checkbox and a label. The label displays the outline style (e.g., ""Solid"", ""Dashed"", ""Dotted""). The controls should be responsive, accessible, and SEO-friendly.
components:
- OutlineControlItem: (standalone): A single outline control item consisting of a checkbox and a label.
- OutlineControlGroup: (takes children): A container for a group of outline control items.
html:
<div class=""flex flex-wrap justify-center mb-4""><OutlineControlGroup><OutlineControlItem/><OutlineControlItem/><OutlineControlItem/></OutlineControlGroup></div>
component html:
OutlineControlItem:
<div class=""flex items-center mr-4 mb-2""><input type=""checkbox"" id={`outlineControlItem{_id}`} class=""mr-2""/><label htmlFor={`outlineControlItem{_id}`}>{outline_style}</label></div>
OutlineControlGroup:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Footer Section: Provide additional resources and links,"description:
The footer section should be a responsive, mobile-first section that provides additional resources and links. It should be divided into three columns: one for resources, one for links, and one for a newsletter sign-up form. The section should have a dark background with white text.
components:
- FooterResources: A standalone component that lists out additional resources.
- FooterLinks: A standalone component that lists out links.
- FooterNewsletter: A standalone component that contains a newsletter sign-up form.
- FooterColumn: A component that takes children and is used to style a column in the footer section.
html:
<footer class=""bg-dark-900 pt-12 pb-4""><div class=""max-w-md mx-auto px-4 lg:max-w-2xl""><div class=""flex flex-wrap -mx-4""><FooterColumn><FooterResources/></FooterColumn><FooterColumn><FooterLinks/></FooterColumn><FooterColumn><FooterNewsletter/></FooterColumn></div></div></footer>
component html:
FooterResources:
<ul class=""list-none mb-4""><li><a href=""{resource1_url}"" class=""text-white hover:text-gray-200"">{resource1_name}</a></li><li><a href=""{resource2_url}"" class=""text-white hover:text-gray-200"">{resource2_name}</a></li><!-- add more list items as needed --></ul>
FooterLinks:
<ul class=""list-none mb-4""><li><a href=""{link1_url}"" class=""text-white hover:text-gray-200"">{link1_name}</a></li><li><a href=""{link2_url}"" class=""text-white hover:text-gray-200"">{link2_name}</a></li><!-- add more list items as needed --></ul>
FooterNewsletter:
<form class=""flex flex-wrap mb-4""><input type=""email"" placeholder=""Enter your email"" class=""bg-gray-200 py-2 px-4 w-full""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4"">Subscribe</button></form>
FooterColumn:
<div class=""w-full md:w-1/3 xl:w-1/3 p-4"">{children}</div>"
A feed component that displays a list of updates with a white background and dark text,"description:
The UI should be a simple feed component that displays a list of updates with a white background and dark text. The component should be responsive and scale well on different screen sizes. It should have a clean and minimalistic design with sufficient spacing between updates to make it easy to read and navigate.
components:
- UpdateCard: (Takes Children): A card component that displays a single update. It should have a white background and dark text. On small screens (sm:), the card should take up the full width of the screen. On medium screens (md:) and above, the card should have a maximum width of 600px and be horizontally centered.
- Feed: (Takes Children): The top-level component that displays a list of updates. It should have a white background and dark text. The component should use a max-width of 800px on large screens (lg:) and above, and be horizontally centered.
html:
<Feed><UpdateCard>{children}</UpdateCard><UpdateCard>{children}</UpdateCard><!-- Add more UpdateCards here --></Feed>
component html:
UpdateCard:
<div class=""bg-white p-4 sm:w-full md:max-w-md lg:max-w-lg xl:max-w-xl shadow-md rounded"">{children}</div>
Feed:
<div class=""max-w-2xl mx-auto p-4 bg-white"">{children}</div>"
"Background image components with a blurred, fitness-related image","description:
The UI should have a background image component that takes up the full height and width of the screen. The background image should be a blurred, fitness-related image that sets the tone for a motivational and active atmosphere. The image should be responsive and scale accordingly on different screen sizes.
components:
- BackgroundImage: (Standalone): This component displays a blurred, fitness-related image as the background.
html:
<div class=""h-screen w-screen""><BackgroundImage/></div>
component html:
BackgroundImage:
<div class=""h-screen w-screen bg-cover bg-center"" style=""backgroundImage: url({fitnessImage});""}><!-- blurred fitness-related image --></div>"
Responsive Table Layout,"description:
The UI should display a responsive table layout with a header row, multiple data rows, and columns that adjust their width based on the screen size.
components:
- ResponsiveTable: The main container for the responsive table layout. Takes children.
- TableHeader: The header row of the table. Takes children.
- TableRow: A single row in the table. Takes children.
- TableCell: A single cell in the table. Takes children.
html:
<ResponsiveTable><TableHeader><TableCell><span>Column 1</span></TableCell><TableCell><span>Column 2</span></TableCell><TableCell><span>Column 3</span></TableCell></TableHeader><TableRow><TableCell>{cellData1}</TableCell><TableCell>{cellData2}</TableCell><TableCell>{cellData3}</TableCell></TableRow><!-- More TableRow components here --></ResponsiveTable>
component html:
ResponsiveTable:
<div class=""overflow-x-auto""><table class=""w-full border-collapse"">{children} </table></div>
TableHeader:
<thead><tr class=""bg-gray-100"">{children} </tr></thead>
TableRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"">{children}</tr>
TableCell:
<td class=""px-4 py-2"">{children}</td>"
Destination and Hotel Cards,"description:
The UI should display a grid of cards, each representing a destination or hotel. The cards should have a title, an image, and some brief information. The layout should be responsive and adapt to different screen sizes.
components:
- DestinationCard: A standalone component that displays information about a destination.
- HotelCard: A standalone component that displays information about a hotel.
- CardGrid: A component that takes children and displays them in a grid layout.
html:
<div class=""container mx-auto p-4""><CardGrid><DestinationCard/><DestinationCard/><HotelCard/><HotelCard/></CardGrid></div>
component html:
DestinationCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={destination_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{destination_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
HotelCard:
<div class=""bg-white rounded overflow-hidden shadow-md""><img src={image_url} alt={hotel_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h3 class=""text-lg font-bold"">{hotel_name}</h3><p>{description}</p></div><div class=""p-4 bg-gray-100""><p>{price} per night</p></div></div>
CardGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Price and Discount Badges,"description:
The UI should display two types of badges: a price badge and a discount badge. The price badge shows the original price, and the discount badge shows the discount percentage. The badges should be responsive, mobile-first, and accessible.
components:
- PriceBadge: a standalone component that displays the original price.
- DiscountBadge: a standalone component that displays the discount percentage.
html:
<div class=""flex flex-wrap justify-center mb-4""><PriceBadge/><DiscountBadge/></div>
component html:
PriceBadge:
<span class=""bg-gray-200 px-2 py-1 rounded-full text-sm""><p>{original_price}</p></span>
DiscountBadge:
<span class=""bg-orange-200 px-2 py-1 rounded-full text-sm""><p>{discount_percentage}% Off</p></span>"
Resume download button with print option,"description:
A download button with an adjacent print option, styled with a modern and minimalistic design.
components:
- ResumeDownloadButton: standalone component for the download button
- PrintOption: standalone component for the print option
html:
<div class=""flex gap-2""><ResumeDownloadButton/><PrintOption/></div>
component html:
ResumeDownloadButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Download Resume ({file_size})</button>
PrintOption:
<button class=""bg-gray-500 hover:bg-gray-700 text-gray-100 font-bold py-2 px-4 rounded"">Print</button>"
"A section separator component that divides different sections of the website with a thin, light-gray line","description:
The section separator component should be a thin, light-gray horizontal line that divides different sections of the website. It should be responsive and adjust its width to fit the screen size. On smaller screens, the line should be slightly thicker to ensure it's still visible.
components:
- SectionSeparator: (Standalone): A thin, light-gray horizontal line that divides different sections of the website.
html:
<SectionSeparator/>
component html:
SectionSeparator:
<hr class=""border border-gray-300 h-px w-full md:w-11/12 lg:w-10/12 xl:w-9/12 mx-auto""/>"
"A hero section with a large, high-quality background image that takes up the full width of the screen, overlaid with a white, semi-transparent overlay and a brief introductory text in a clean, sans-serif font","description:
The hero section should have a large, high-quality background image that takes up the full width of the screen, creating an immersive experience for the user. The image should be overlaid with a semi-transparent white overlay to provide contrast and make the text more readable. The introductory text should be brief and concise, displayed in a clean, sans-serif font to provide a modern and professional look.
components:
- HeroSection: (Takes Children): This component will contain the background image, overlay, and text.
- HeroBackgroundImage: (Standalone): This component will render the background image.
- HeroOverlay: (Standalone): This component will render the semi-transparent white overlay.
- HeroText: (Takes Children): This component will render the introductory text.
html:
<div class=""h-screen w-full relative""><HeroSection><HeroBackgroundImage/><HeroOverlay/><HeroText>{introductory_text}</HeroText></HeroSection></div>
component html:
HeroSection:
<div class=""h-screen w-full relative"">{children}</div>
HeroBackgroundImage:
<img src={background_image_url} alt=""Hero Background Image"" class=""absolute w-full h-full object-cover""/>
HeroOverlay:
<div class=""absolute w-full h-full bg-white opacity-50""></div>
HeroText:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-lg md:text-2xl lg:text-3xl xl:text-4xl font-sans font-bold text-white"">{children}</div>"
Table error,"description:
The UI should display a table error message in a responsive, mobile-first design. The error message should be accessible and SEO-friendly.
components:
- ErrorMessage: A standalone component that displays an error message.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><ErrorMessage/></div>
component html:
ErrorMessage:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><span class=""block sm:inline"">{errorMessage}</span></div>"
Currency converter widget,"description:
The UI should be a simple, responsive form that allows users to select a currency, enter an amount, and see the converted amount in a target currency. The UI should be easily accessible on desktop and mobile devices.
components:
- CurrencySelect: (standalone): A dropdown select element that allows users to choose a currency.
- AmountInput: (standalone): A text input element that allows users to enter an amount.
- ConversionResult: (takes children): A container element that displays the converted amount and target currency.
- CurrencyConverterWidget: (takes children): The top-level container element that wraps the entire UI.
html:
<CurrencyConverterWidget><h2>Currency Converter</h2><form><label><span>Select a currency:</span><CurrencySelect/></label><label><span>Enter an amount:</span><AmountInput/></label><ConversionResult><p>{converted_amount} {target_currency}</p></ConversionResult></form></CurrencyConverterWidget>
component html:
CurrencySelect:
<select class=""block w-full p-2 pl-10 text-sm text-gray-700""><option value="""">Select a currency</option>{currency_options}</select>
AmountInput:
<input type=""number"" class=""block w-full p-2 pl-10 text-sm text-gray-700""/>
ConversionResult:
<div class=""py-4"">{children}</div>
CurrencyConverterWidget:
<div class=""max-w-md p-4 mx-auto bg-white shadow-md rounded"">{children}</div>"
Service/Gig Cards,"description:
The UI should be a grid of service/gig cards, each showcasing a service or gig with a title, description, price, and a call-to-action button. The cards should be responsive, spanning the full width on mobile devices and arranged in a grid on larger screens.
components:
- ServiceCard: a standalone component representing a single service/gig card.
- ServiceGrid: a component that takes children, representing the grid of service/gig cards.
html:
<div class=""container mx-auto p-4 lg:p-6""><ServiceGrid><ServiceCard/><ServiceCard/><ServiceCard/><!-- Add more ServiceCard components as needed --></ServiceGrid></div>
component html:
ServiceCard:
<div class=""bg-white shadow-md rounded-md p-4 mb-4""><h2 class=""text-lg font-bold"">{serviceName}</h2><p class=""text-gray-600"">{serviceDescription}</p><p class=""text-lg font-bold"">{servicePrice}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{ctaButtonText} </button></div>
ServiceGrid:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Chat/messaging interface,"description:
The UI should display a list of chat messages, with each message showing the sender's name, the message text, and a timestamp. The UI should also include a text input field for composing new messages and a ""Send"" button to send the message.
components:
- ChatInput: A standalone component that contains a text input field and a ""Send"" button for composing new messages.
- ChatList: A component that takes children (i.e., multiple `ChatMessage` components) and displays them in a list.
html:
<div class=""flex h-screen max-h-screen overflow-hidden""><div class=""flex-1 overflow-y-auto p-4""><ChatList><!-- content will be inserted here --></ChatList></div><ChatInput/></div>
component html:
ChatInput:
<div class=""fixed bottom-0 left-0 w-full bg-white p-4""><input type=""text"" class=""w-full p-2"" placeholder=""Type a message...""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send </button></div>
ChatList:
<div class=""space-y-2"">{children}</div>"
WebSocket/Real-time Updates,"description:
The UI should display real-time updates from a WebSocket connection. It should have a simple layout with a header, a main content area, and a footer. The main content area should display a list of updates in real-time.
components:
- WebSocketUpdateList: (standalone): A list of WebSocket updates.
- UpdateTimestamp: (standalone): The timestamp of an update item.
html:
<div class=""min-h-screen flex flex-col""><header class=""bg-gray-200 py-4""><h1 class=""text-3xl font-bold text-gray-800"">Real-time Updates</h1></header><main class=""flex-1 p-4""><WebSocketUpdateList/></main><footer class=""bg-gray-200 py-4""><p class=""text-sm text-gray-600"">&copy; 2023 Real-time Updates</p></footer></div>
component html:
WebSocketUpdateList:
<ul class=""list-none mb-4""><!-- Update items will be rendered here --></ul>
UpdateTimestamp:
<p class=""text-sm text-gray-600"">{update_timestamp}</p>"
Discussion Forums and Comments,"description:
A discussion forum with a list of comments and a form to add new comments. Each comment should display the user's name, the comment text, and a timestamp. The UI should have a clean and modern design, with adequate spacing and clear typography.
components:
- CommentCard: (standalone): Displays a single comment with user name, comment text, and timestamp.
- CommentForm: (standalone): A form to add a new comment.
- CommentList: (takes children): A container for a list of comments.
- DiscussionForum: (takes children): The main container for the discussion forum.
html:
<!-- The main discussion forum container --><div class=""max-w-md mx-auto p-4""><DiscussionForum><CommentList><!-- List of comments will be rendered here --><CommentCard/><CommentCard/><!-- ... --></CommentList><CommentForm/></DiscussionForum></div>
component html:
CommentCard:
<div class=""flex gap-2 mb-4""><img src=""{user_avatar_url}"" alt=""User Avatar"" class=""w-10 h-10 rounded-full""/><div class=""flex-1""><h5 class=""text-lg font-bold"">{username}</h5><p>{comment_text}</p><p class=""text-sm text-gray-500"">{timestamp}</p></div></div>
CommentForm:
<form class=""flex gap-2 mb-4""><input type=""text"" placeholder=""Add a comment..."" class=""flex-1 p-2""/><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4"">Comment</button></form>
CommentList:
<!-- This component will render a list of CommentCards --><div class=""space-y-4"">{children}</div>
DiscussionForum:
<!-- This component will render the entire discussion forum UI --><div class=""rounded-lg overflow-hidden shadow-md"">{children}</div>"
"A recipe card component featuring an image of the dish, a brief description, and a ""Get Recipe"" button","description:
The UI should be a clean and modern recipe card that showcases a delicious dish. It should have a prominent image of the dish, a brief description, and a call-to-action (CTA) button to encourage users to get the recipe. The card should be responsive, with a minimum width of 300px and a maximum width of 400px. The layout should be flexible to accommodate different screen sizes.
components:
- RecipeCard: (Takes Children): This is the top-level component that contains the image, description, and CTA button.
- RecipeImage: (Standalone): Displays the image of the dish.
- RecipeDescription: (Standalone): Displays a brief description of the dish.
- GetRecipeButton: (Standalone): A call-to-action button to encourage users to get the recipe.
html:
<RecipeCard><RecipeImage/><RecipeDescription/><GetRecipeButton/></RecipeCard>
component html:
RecipeCard:
<div class=""bg-white rounded-lg shadow-md p-4 lg:p-6 xl:p-8"">{children}</div>
RecipeImage:
<img src={image_url} alt={dish_name} class=""w-full h-48 object-cover rounded-t-lg""/>
RecipeDescription:
<p class=""text-lg text-gray-700"">{description}</p>
GetRecipeButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Get Recipe</button>"
Newsletter signup form,"description:
The UI should be a simple newsletter signup form with a input field for the email address and a submit button. The form should be responsive, meaning it should adapt to different screen sizes and devices. The form should also be accessible, meaning it should be usable by everyone, regardless of their abilities.
components:
- NewsletterInput: a standalone component for the email input field
- SubmitButton: a standalone component for the submit button
- NewsletterForm: a component that takes children, which will contain the `NewsletterInput` and `SubmitButton`
html:
<main class=""max-w-md mx-auto p-4""><NewsletterForm><NewsletterInput/><SubmitButton/></NewsletterForm></main>
component html:
NewsletterInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""email"" placeholder=""Enter your email address"" aria-label=""Enter your email address""/>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>
NewsletterForm:
<form class=""flex flex-wrap -mx-3 mb-6"">{children}</form>"
Hero section background image that takes up the full width of the screen,"description:
The hero section should be a full-width, high-impact section that grabs the user's attention. It should have a background image that takes up the full width of the screen, with a subtle overlay to improve text readability. The section should be responsive, with the background image scaling to fit different screen sizes.
components:
- HeroSection: (Takes Children): This component is the top-level hero section that contains the background image and overlay.
- HeroBackground: (Standalone): This component is the background image that takes up the full width of the screen.
- HeroOverlay: (Takes Children): This component is the overlay that sits on top of the background image, containing the hero section's content.
html:
<div class=""h-screen w-full relative""><HeroSection><HeroBackground/><HeroOverlay><!-- hero section content goes here --></HeroOverlay></HeroSection></div>
component html:
HeroSection:
<div class=""h-screen w-full relative"">{children}</div>
HeroBackground:
<div class=""absolute top-0 left-0 h-screen w-full bg-cover bg-center"" style=""backgroundImage: url({heroImage});""}/>
HeroOverlay:
<div class=""absolute top-0 left-0 h-screen w-full flex items-center justify-center text-white"">{children}</div>"
Recently visited pages,"description:
A list of recently visited pages, with each page showing its title, URL, and a ""remove"" button to remove it from the list.
components:
- VisitedPagesList: component that takes children (a list of `VisitedPage` components)
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Recently Visited Pages</h2><VisitedPagesList><!-- list of VisitedPage components will be rendered here --></VisitedPagesList></div>
component html:
VisitedPagesList:
<ul class=""list-none mb-0"">{children}</ul>"
About us section,"description:
The ""About Us"" section should have a header with the title ""About Us"", a paragraph of text that describes the company, and a photo of the company's team. The section should be responsive, with the text and image layout adjusting for different screen sizes.
components:
- AboutUsHeader: standalone component that displays the title ""About Us""
- AboutUsText: standalone component that displays a paragraph of text
- AboutUsImage: standalone component that displays an image
- AboutUsContainer: component that takes children, wraps the `AboutUsHeader`, `AboutUsText`, and `AboutUsImage` components
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12 mb-6 lg:mb-12""><AboutUsContainer><AboutUsHeader/><AboutUsText/><AboutUsImage/></AboutUsContainer></section>
component html:
AboutUsHeader:
<h2 class=""text-2xl lg:text-3xl font-bold mb-4"">{about_us_title}</h2>
AboutUsText:
<p class=""text-lg lg:text-xl mb-6"">{about_us_text}</p>
AboutUsImage:
<img src={about_us_image_src} alt=""About Us team photo"" class=""w-full mb-4 lg:mb-6""/>
AboutUsContainer:
<div class=""flex flex-col md:flex-row"">{children}</div>"
Tag Clouds/Folksonomy,"description:
The UI should display a collection of tags-cloud, with each tag having a size and color that represents its importance or frequency of use. The tags should be organized in a responsive layout that adapts to different screen sizes.
components:
- Tag: (standalone): A single tag element that displays the tag text, with a size and color that represents its importance.
- TagCloud: (takes children): A container component that wraps multiple **Tag** components and lays them out in a responsive layout.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Tag Cloud</h2><TagCloud><Tag/><Tag/>...
</TagCloud></div>
component html:
Tag:
<a href=""{tag_url}"" class=""inline-block text-sm px-2 py-1 rounded {tag_color} {tag_size}"">{tag_text}</a>
TagCloud:
<div class=""flex flex-wrap justify-center"">{children}</div>"
"A post detail component that displays the title, date, and author of an article, along with a large image and detailed content","description:
The UI should have a clear hierarchy of elements, with the title and image standing out prominently. The date and author information should be secondary but still easy to read. The detailed content should be easy to read and formatted nicely.

On smaller screens, the image should be stacked above the text content, with the title and date/author information below. On larger screens, the image can be placed beside the text content, with the title and date/author information above.
components:
- PostTitle: (Standalone): Displays the title of the post in a large, bold font.
- PostMeta: (Standalone): Displays the date and author information for the post.
- PostImage: (Standalone): Displays a large image related to the post.
- PostContent: (Takes Children): Displays the detailed content of the post.
- PostDetail: (Takes Children): The top-level component that wraps all the other components.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><PostDetail><PostImage/><div class=""flex flex-wrap md:flex-no-wrap justify-between mb-4""><PostTitle/><PostMeta/></div><PostContent>{children}
</PostContent></PostDetail></div>
component html:
PostTitle:
<h1 class=""text-3xl font-bold"">{post_title}</h1>
PostMeta:
<p class=""text-sm text-gray-600"">{post_date} by {post_author}</p>
PostImage:
<img src=""{post_image_url}"" alt=""{post_image_alt}"" class=""w-full mb-4 md:w-1/2 lg:w-1/3 xl:w-1/4""/>
PostContent:
<div class=""prose max-w-full mx-auto"">{children}</div>
PostDetail:
<div class=""rounded shadow-md overflow-hidden"">{children}</div>"
Two-Factor Auth/QR Codes,"description:
The UI should display a QR code and a text-based code for 2-factor authentication. The QR code should be large enough to be easily scannable, and the text-based code should be displayed below the QR code. The UI should be simple, clean, and easy to use.
components:
- TwoFactorAuth: The main component that holds the QR code and text-based code. (Standalone)
- QrCode: Displays the QR code. (Standalone)
- CodeText: Displays the text-based code. (Standalone)
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><TwoFactorAuth/></div>
component html:
TwoFactorAuth:
<div class=""flex flex-col items-center""><QrCode/><CodeText/></div>
QrCode:
<img src={qr_code_src} alt=""QR Code"" class=""w-48 h-48 md:w-64 md:h-64 lg:w-80 lg:h-80 mb-4""/>
CodeText:
<p class=""text-lg md:text-xl lg:text-2xl"">{code_text}</p>"
"A call-to-action (CTA) button with a bold, sans-serif font and a subtle gradient effect","description:
The CTA button should be a prominent element on the page, with a bold, sans-serif font and a subtle gradient effect to draw attention. It should be responsive, with a larger size on larger screens and a smaller size on smaller screens.
components:
- CallToActionButton: (Standalone): This component represents the CTA button. It should have a bold, sans-serif font and a subtle gradient effect.
html:
<CallToActionButton/>
component html:
CallToActionButton:
<button class=""bg-gradient-to-r from-{highlight_color} to-{ secondary_highlight_color} text-white font-bold py-2 px-4 rounded-lg sm:text-lg sm:py-3 sm:px-6 md:text-xl md:py-4 md:px-8 lg:text-2xl lg:py-5 lg:px-10 xl:text-3xl xl:py-6 xl:px-12"">{button_text}</button>"
Alert Close Button Icon,"description:
The UI should be a close button icon for an alert message. It should be a small, clickable icon with a cross symbol, allowing users to close the alert message.
components:
- AlertCloseButton: A standalone component representing the close button icon.
html:
<div class=""alert""><!-- alert message content --><AlertCloseButton/></div>
component html:
AlertCloseButton:
<button class=""absolute right-0 top-0 bg-transparent border-0 text-gray-400 hover:text-gray-900""><span aria-hidden=""true"">&times;</span></button>"
"A statistic component that displays a large, bold number and a brief description","description:
The statistic component should be visually appealing and easy to read. It should display a large, bold number and a brief description. The component should be responsive and adapt to different screen sizes. On smaller screens, the component should take up the full width, and on larger screens, it should be limited in width to maintain a clean and uncluttered design.
components:
- StatisticComponent: (Takes Children): Displays a large, bold number and a brief description.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><StatisticComponent><!-- Statistic content will be rendered here --></StatisticComponent></div>
component html:
StatisticComponent:
<div class=""flex flex-col items-center mb-6 md:mb-12 lg:mb-20""><p class=""text-5xl font-bold"">{value}</p><p class=""text-lg"">{label}</p>{children}</div>"
Modal window with project details and images,"description:
The UI should be a modal window that appears when a user clicks on a project. The modal window should have a title with the project name, a brief description of the project, and a grid of images related to the project. The modal window should be responsive and accessible.
components:
- ProjectModal: The main modal window component. Takes children.
- ProjectTitle: Displays the title of the project. Standalone.
- ProjectDescription: Displays a brief description of the project. Standalone.
- ProjectImageGrid: A grid of images related to the project. Takes children.
- ProjectImage: A single image related to the project. Standalone.
html:
<div class=""fixed top-0 left-0 w-full h-full bg-black bg-opacity-50""><div class=""flex justify-center h-full""><ProjectModal><ProjectTitle/><ProjectDescription/><ProjectImageGrid><ProjectImage/><ProjectImage/><!-- add more ProjectImage components here --></ProjectImageGrid></ProjectModal></div></div>
component html:
ProjectModal:
<div class=""bg-white rounded-lg p-4"">{children}</div>
ProjectTitle:
<h2 class=""text-2xl font-bold"">{project_name}</h2>
ProjectDescription:
<p>{project_description}</p>
ProjectImageGrid:
<ul class=""flex flex-wrap justify-center"">{children}</ul>
ProjectImage:
<li class=""w-1/2 p-2""><img src={image_url} alt={image_alt} class=""w-full h-full object-cover rounded-lg""/></li>"
"Testimonial component that displays a quote, user avatar, and user name","description:
The UI should display a testimonial component that showcases a quote, user avatar, and user name in a clean and visually appealing way. The component should be responsive, accessible, and easy to navigate. The layout should scale well on different screen sizes, with a mobile-first approach. The color palette should be consistent throughout, with highlight colors used to draw attention to specific parts of the UI.
components:
- TestimonialCard: (Takes Children): A container component that holds the testimonial content.
- Avatar: (Standalone): Displays the user's avatar image.
- UserName: (Standalone): Displays the user's name.
- Quote: (Standalone): Displays the testimonial quote.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><TestimonialCard><Avatar/><UserName/><Quote/></TestimonialCard></div>
component html:
TestimonialCard:
<div class=""bg-white shadow-md rounded-lg p-4 md:p-6 lg:p-8"">{children}</div>
Avatar:
<img src=""{avatarUrl}"" alt=""{userName}"" class=""w-12 h-12 rounded-full mr-4""/>
UserName:
<p class=""text-lg font-bold"">{userName}</p>
Quote:
<p class=""text-gray-600"">{quoteText}</p>"
Reviews component that displays a list of customer reviews and ratings,"description:
The Reviews component should display a list of customer reviews and ratings in a clean and organized manner. It should be easy to read and understand, with clear visual hierarchy and separation between each review. The component should also be responsive and adapt to different screen sizes.
components:
- Rating: (Standalone): A rating component that displays the customer's rating as a series of stars.
- ReviewList: (Takes Children): A list of review cards.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold mb-4"">Customer Reviews</h2><ReviewList><!-- review cards will be rendered here --></ReviewList></div>
component html:
Rating:
<span class=""text-yellow-400"">{rating} ({rating_count} ratings) { Array(5).fill(0).map((_, i) =>( <span key={i} class={`inline-block w-4 h-4 {i < rating ? 'text-yellow-400' : 'text-gray-300'}`}>&#9733;</span>)) }</span>
ReviewList:
<ul class=""list-none mb-4"">{children}</ul>"
Featured Image Caption,"description:
The UI should display a featured image with a caption below it. The image should be responsive and take up the full width of its container. The caption should be centered and displayed in a readable font size.
components:
- FeaturedImage: A standalone component that displays an image.
- ImageCaption: A component that displays a caption, takes a string as a child.
html:
<div class=""max-w-md mx-auto p-4""><FeaturedImage/><ImageCaption/></div>
component html:
FeaturedImage:
<img src={image_url} alt={image_alt_text} class=""w-full h-64 object-cover rounded-lg""/>
ImageCaption:
<p class=""text-center text-lg"">{children}</p>"
Retweet button to share tweets,"description:
The UI should consist of a button labeled ""Retweet"" with a simple icon suggestive of sharing or retweeting (we'll simulate this with text since SVGs are not allowed). The button should be visually appealing and easy to spot, ideally with a contrasting color to stand out.
components:
- RetweetButton: Standalone. This component will represent the retweet button, including visual styles and the labeled text.
html:
<div class=""retweet-container""><RetweetButton/></div>
component html:
RetweetButton:
<!-- Retweet button with a 'retweet' label; uses TailwindCSS for styling --><button class=""bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded inline-flex items-center""><span class=""mr-2"">🔁</span><span>Retweet</span></button>"
Theme selector,"description:
The UI should be a dropdown menu that allows users to select a theme (e.g., light, dark, system) for the application. The dropdown should be responsive, accessible, and SEO-friendly.
components:
- ThemeSelector: (standalone): The main component that contains the dropdown menu.
- ThemeOption: (takes children): Represents a single theme option in the dropdown menu.
html:
<div class=""relative inline-block""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">Select Theme
</button><ul class=""absolute z-10 bg-white border border-gray-400 rounded""><ThemeSelector/></ul></div>
component html:
ThemeSelector:
<ul class=""px-2 py-1""><ThemeOption>Light</ThemeOption><ThemeOption>Dark</ThemeOption><ThemeOption>System</ThemeOption></ul>
ThemeOption:
<li class=""py-1 px-2 hover:bg-gray-100"">{children}</li>"
Footer Copyright Information,"description:
The UI should be a simple footer section with a copyright information text. It should be displayed at the bottom of the page and should be responsive, readable, and accessible.
components:
- FooterCopyright: A standalone component that displays the copyright information.
html:
<footer class=""pt-12 pb-4 bg-gray-200""><FooterCopyright/></footer>
component html:
FooterCopyright:
<p class=""text-sm text-gray-500 text-center"">&copy; {year} {company_name}. All rights reserved.</p>"
Time pickers,"description:
A simple time picker with hour and minute inputs, and an AM/PM toggle.
components:
- TimePicker: a standalone component that contains the entire time picker UI
- HourInput: a standalone component that contains a numeric input for the hour
- MinuteInput: a standalone component that contains a numeric input for the minute
- AmPmToggle: a standalone component that contains a toggle button for AM/PM selection
html:
<div class=""flex flex-wrap items-center justify-center""><TimePicker/></div>
component html:
TimePicker:
<div class=""flex items-center""><HourInput/><span>:</span><MinuteInput/><AmPmToggle/></div>
HourInput:
<input type=""number"" min=""1"" max=""12"" value={hour} class=""py-2 px-4 border""/>
MinuteInput:
<input type=""number"" min=""0"" max=""59"" value={minute} class=""py-2 px-4 border""/>
AmPmToggle:
<button class=""px-4 py-2 border rounded {am_pm === 'am' ? 'bg-gray-200' : 'bg-white'}"">{am_pm}</button>"
Search Input Field,"description:
A simple search input field with a placeholder text and a submit button.
components:
- SearchInput: standalone component that renders a search input field.
- SearchButton: standalone component that renders a submit button.
html:
<div class=""flex flex-wrap justify-center mb-4""><SearchInput/><SearchButton/></div>
component html:
SearchInput:
<input type=""search"" class=""w-full px-4 py-2 text-lg text-gray-700 placeholder-gray-600"" placeholder=""Search..."" aria-label=""Search input field""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Search</button>"
"A comment component with a light grey background, featuring a profile picture, username, and comment text","description:
The comment component should have a light grey background with a subtle shadow to give it a slight depth. The profile picture should be a circular avatar with a white border, placed on the left side of the component. The username should be displayed in a bold font, followed by the comment text in a regular font. The component should be responsive, with the profile picture and text adjusting size according to the screen size.
components:
- CommentComponent: (Takes Children): This is the top-level component that contains the profile picture, username, and comment text.
html:
<CommentComponent><!-- Profile picture, username, and comment text will be rendered here --></CommentComponent>
component html:
CommentComponent:
<div class=""bg-gray-100 p-4 rounded shadow-md flex""><img src={profilePictureUrl} alt=""Profile picture"" class=""w-12 h-12 rounded-full border-2 border-white mr-4""><div class=""flex-1""><p class=""font-bold"">{username}</p><p>{children}</p></div></div>"
Project Cards/Grids,"description:
The UI should be a responsive grid of project cards, with each card displaying a project's title, description, and a call-to-action (CTA) button. The grid should be mobile-first, with cards stacking on top of each other on smaller screens and rearranging into a grid on larger screens.
components:
- ProjectCard: (standalone): a single project card component
- ProjectGrid: (takes children): a container component that wraps the project cards in a grid
html:
<body><main class=""max-w-md mx-auto p-4 lg:p-6""><ProjectGrid><ProjectCard/><ProjectCard/><ProjectCard/><!-- add more ProjectCard components here --></ProjectGrid></main></body>
component html:
ProjectCard:
<div class=""bg-white rounded shadow-md p-4""><h2 class=""text-lg font-bold"">{project_title}</h2><p class=""text-gray-600"">{project_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
ProjectGrid:
<div class=""grid gap-4 lg:grid-cols-2 xl:grid-cols-3"">{children}</div>"
Alert Notification Style,"description:
The UI should consist of a notification alert box that is visible on the screen, with a bold title, a brief message, and a close button. The UI should be responsive, mobile-first, accessible, SEO-friendly, and well-documented.
components:
- AlertNotification: standalone component that contains the title, message, and close button.
- AlertTitle: standalone component that displays the bold title.
- AlertMessage: standalone component that displays the brief message.
- CloseButton: standalone component that displays the close button.
html:
<div class="" flex justify-center mb-4""><AlertNotification/></div>
component html:
AlertNotification:
<div class=""bg-orange-100 border border-orange-500 text-orange-700 px-4 py-3 rounded relative""><AlertTitle/><AlertMessage/><CloseButton/></div>
AlertTitle:
<p class=""font-bold"">{alert_title}</p>
AlertMessage:
<p>{alert_message}</p>
CloseButton:
<button class=""absolute top-0 right-0 text-gray-400 hover:text-gray-600 transition duration-300"">×</button>"
Invoice generator form,"description:
The Invoice Generator Form should offer a user-friendly interface for inputting key details to generate an invoice. This includes fields for the sender's information, client's information, a date selector for the invoice date, line items for services or products with their descriptions, quantities, and prices, and a submit button to generate the invoice.
components:
- InputField: (Standalone) - This component represents an individual input field with a label.
- DateSelector: (Standalone) - This is a specific input for selecting dates.
- LineItem: (Takes children) - This component handles entries for products or services with fields for description, quantity, and price.
- SubmitButton: (Standalone) - A button to submit the form data.
html:
<form class=""max-w-4xl mx-auto p-4""><InputField/><InputField/><DateSelector/><!-- Sender's Information --><InputField/><InputField/><!-- Client's Information --><InputField/><InputField/><!-- Line Items for invoice details --><LineItem><InputField/><InputField/><InputField/></LineItem><!-- Section for additional line items if necessary --><LineItem><InputField/><InputField/><InputField/></LineItem><SubmitButton/></form>
component html:
InputField:
<div class=""mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"">{label}</label><input type=""{input_type}"" class=""shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"" placeholder=""{placeholder}""/></div>
DateSelector:
<div class=""mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"">{label}</label><input type=""date"" class=""shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline""/></div>
LineItem:
<div class=""bg-gray-100 p-3 my-2"">{children}</div>
SubmitButton:
<button type=""submit"" class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"">{button_text}</button>"
Blog Post Author Name,"description:
The UI should display the author's name in a readable font size, with a slight emphasis to indicate that it's the author's name. The text should be dark-colored on a light background.
components:
- AuthorName: standalone component that displays the author's name.
html:
<div class=""flex justify-center mb-4""><AuthorName/></div>
component html:
AuthorName:
<p class=""text-lg font-bold"">{authorName}</p>"
Product benefits,"description:
The UI should display a list of benefits of a product in a clean and concise manner, with each benefit highlighted in a separate section. The UI should be responsive, mobile-first, and accessible.
components:
- ProductBenefit: (standalone) - A single benefit of the product, including an icon, title, and description.
- BenefitList: (takes children) - A container for a list of `ProductBenefit` components.
html:
<div class=""max-w-md mx-auto p-4""><BenefitList><ProductBenefit/><ProductBenefit/><ProductBenefit/></BenefitList></div>
component html:
ProductBenefit:
<div class=""flex items-center mb-4""><div class=""w-12 h-12 bg-orange-100 rounded-full flex justify-center items-center mr-4""><i class=""fal fa-{icon_name} text-xl text-orange-500""></i></div><div><h5 class=""text-lg font-bold"">{benefit_title}</h5><p class=""text-gray-600"">{benefit_description}</p></div></div>
BenefitList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Contact information,"description:
The contact information UI should display the company's address, phone number, and email address in a clean and organized manner. It should be responsive, mobile-first, and accessible.
components:
- ContactInfo: A standalone component that displays the contact information.
- Address: A standalone component that displays the company's address.
- PhoneNumber: A standalone component that displays the company's phone number.
- EmailAddress: A standalone component that displays the company's email address.
html:
<div class=""max-w-md mx-auto p-4""><ContactInfo/></div>
component html:
ContactInfo:
<div class=""flex flex-col gap-4""><Address/><PhoneNumber/><EmailAddress/></div>
Address:
<p>{street_address}</p><p>{city_state_zip}</p>
PhoneNumber:
<p>Phone: {phone_number}</p>
EmailAddress:
<p>Email: <a href={`mailto:{email_address}`}>{email_address}</a></p>"
Like/Comment/Share Buttons,"description:
A horizontal row of three buttons for liking, commenting, and sharing, with each button having an icon and a count for likes/comments/shares.
components:
- LikeButton: (standalone): represents the like button with a like count
- CommentButton: (standalone): represents the comment button with a comment count
- ShareButton: (standalone): represents the share button with a share count
html:
<div class=""flex items-center justify-center mb-4""><LikeButton/><CommentButton/><ShareButton/></div>
component html:
LikeButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{like_icon}</span><span>{like_count} likes</span></button>
CommentButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{comment_icon}</span><span>{comment_count} comments</span></button>
ShareButton:
<button class=""inline-flex items-center px-2 py-1 border border-gray-300 rounded-md""><span class=""mr-1"">{share_icon}</span><span>{share_count} shares</span></button>"
"A price component that displays the product price, with an option to display a discounted price","description:
The Price component should display the product price prominently, with an optional discounted price displayed beside it. On smaller screens, the discounted price should be displayed below the original price. The component should have sufficient padding and margin to make it stand out.
components:
- PriceComponent: (Takes Children): Displays the product price, with an optional discounted price.
html:
<div class=""flex justify-center mb-4 xl:mb-8""><PriceComponent><!-- Price content will be rendered here --></PriceComponent></div>
component html:
PriceComponent:
<div class=""flex items-center justify-center mb-2 xl:mb-4""><p class=""text-lg xl:text-2xl font-bold"">{originalPrice}</p>{discountedPrice ? ( <p class=""text-lg xl:text-2xl font-bold text-orange-500 ml-2""><s>{originalPrice}</s>{discountedPrice} </p>) : ( '' )} {children}</div>"
A decorative separator line with a subtle wave design,"description:
The UI should have a horizontal separator line with a subtle wave design to add visual interest and separate different sections of content. The wave design should be subtle to avoid overwhelming the user. The separator line should be responsive, scalable, and accessible on different screen sizes.
components:
- WavySeparator: (Standalone): A decorative separator line with a subtle wave design. The component should have a consistent height and width that scales with the screen size.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><!-- content above the separator --><WavySeparator/><!-- content below the separator --></div>
component html:
WavySeparator:
<div class=""relative h-1 bg-gray-200 overflow-hidden""><svg><!-- wave --></svg></div>"
"A featured game slider component with large game images, titles, and platform icons","description:
The featured game slider component should be a visually appealing and interactive slider that showcases large game images, titles, and platform icons. It should be responsive, accessible, and easy to navigate. On larger screens, the slider should display multiple game cards side by side, while on smaller screens, it should display one game card at a time. The game cards should have a subtle shadow effect to give them a 3D look, and the platform icons should be easily recognizable and accessible.
components:
- FeaturedGameSlider: (Takes Children): A slider component that contains multiple `GameCard` components.
- GameCard: (Takes Children): A single game card component that contains the game image, title, and platform icons.
html:
<section class=""container mx-auto p-4 lg:p-8""><FeaturedGameSlider><GameCard><!-- game card content --></GameCard><GameCard><!-- game card content --></GameCard><!-- more GameCard components --></FeaturedGameSlider></section>
component html:
FeaturedGameSlider:
<div class=""flex overflow-x-auto snap-x scrollbar-none"">{children}</div>
GameCard:
<div class=""w-full lg:w-1/2 xl:w-1/3 p-4 lg:p-6 bg-white shadow-md rounded-md""><img src={game_image_url} alt={game_title} class=""w-full h-64 object-cover rounded-t-md""/><div class=""p-4""><h2 class=""text-2xl font-bold"">{game_title}</h2><ul class=""flex justify-center mb-4"">{platform_icons} </ul>{children} </div></div>"
Patterns (separate),"description:
- The UI will display a collection of patterns, each presented in a separate card-like component. Each pattern card will show a name, a short description, and some distinguishing graphic representation styled minimally with TailwindCSS.
components:
- PatternCard: (Standalone)**: Displays individual pattern information including a title, description, and a styled placeholder for a graphic.
- PatternsContainer: (Takes children)**: A container that holds all the PatternCard components, ensuring they are laid out in a responsive grid.
html:
<main><PatternsContainer><PatternCard/><PatternCard/><PatternCard/><!-- Additional PatternCard components can be added here --></PatternsContainer></main>
component html:
PatternCard:
<div class=""max-w-sm rounded overflow-hidden shadow-lg p-4 m-2 bg-white""><div class=""px-6 py-4""><div class=""font-bold text-xl mb-2"">{patternTitle}</div><p class=""text-gray-700 text-base"">{patternDescription}</p></div><div class=""px-6 pt-4 pb-2""><div class=""h-32 w-full bg-gray-200""></div><!-- Placeholder for pattern graphic representation --></div></div>
PatternsContainer:
<div class=""container mx-auto px-4 sm:px-6 lg:px-8""><div class=""flex flex-wrap justify-center"">{children} </div></div>"
Hero image with a subtle overlay to display a tagline and a call-to-action button,"description:
The UI should feature a prominent hero image that takes up the full height and width of the screen, with a subtle overlay that displays a tagline and a call-to-action button. The overlay should be semi-transparent to allow the hero image to shine through. The tagline should be short, catchy, and descriptive, while the call-to-action button should be prominent and encourage the user to take action. The UI should be responsive, with the hero image and overlay scaling to fit different screen sizes.
components:
- HeroImage: (Standalone): Displays a large background image that takes up the full height and width of the screen.
- Overlay: (Takes Children): A semi-transparent overlay that contains the `Tagline` and `CallToActionButton` components. The overlay should be positioned absolutely on top of the `HeroImage`.
- Tagline: (Standalone): A short, descriptive text that summarizes the main message.
- CallToActionButton: (Standalone): A prominent button that encourages the user to take action.
html:
<div class=""h-screen w-full relative""><HeroImage/><Overlay><Tagline/><CallToActionButton/></Overlay></div>
component html:
HeroImage:
<img src=""{hero_image_url}"" alt=""{hero_image_alt}"" class=""h-full w-full object-cover""/>
Overlay:
<div class=""absolute top-0 left-0 h-full w-full bg-gray-900 bg-opacity-50 p-4"">{children}</div>
Tagline:
<p class=""text-3xl text-white"">{tagline_text}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Call to Action</button>"
Availability and Pricing Calendars,"description:
The UI should display a calendar for availability and pricing, showing the dates and corresponding prices. It should have a title, a month selector, and a grid of days with prices.
components:
- CalendarTitle: Standalone component to display the title of the calendar.
- MonthSelector: Standalone component to select the month.
- AvailabilityGrid: Component that takes children to render the grid of days with prices.
- DayCell: Standalone component to render a single day with its price.
html:
<div class=""flex flex-col""><CalendarTitle/><MonthSelector/><AvailabilityGrid><!-- grid of days with prices --><DayCell/><DayCell/><DayCell/><!-- repeat for each day of the month --></AvailabilityGrid></div>
component html:
CalendarTitle:
<h2 class=""text-2xl font-bold"">{calendar_title}</h2>
MonthSelector:
<select class=""py-2 pl-2 pr-4 text-gray-700""><option value=""January"">{month_name}</option><!-- repeat for each month --></select>
AvailabilityGrid:
<table class=""w-full""><tbody><tr>{children} </tr></tbody></table>
DayCell:
<td class=""px-2 py-1 border border-gray-200""><span class=""text-sm"">{day_number}</span><span class=""text-xs"">{day_price}</span></td>"
Case studies display,"description:
A horizontal list of case studies, each with a title, description, and image. The list is responsive, with a max of 3 items per row on large screens, 2 items per row on medium screens, and 1 item per row on small screens.
components:
- CaseStudyCard: A standalone component representing a single case study, containing a title, description, and image.
- CaseStudyList: A component that takes children, wrapping a list of `CaseStudyCard`s.
html:
<div class=""container mx-auto p-4""><h2>Case Studies</h2><CaseStudyList><CaseStudyCard/><CaseStudyCard/><CaseStudyCard/><!-- Add more CaseStudyCard components as needed --></CaseStudyList></div>
component html:
CaseStudyCard:
<div class=""flex flex-col justify-center p-4""><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full mb-4 rounded-lg""/><h3 class=""text-lg font-bold mb-2"">{title}</h3><p class=""text-gray-600"">{description}</p></div>
CaseStudyList:
<ul class=""flex flex-wrap justify-center -mx-4"">{children}</ul>"
"Notification message displayed within the flow of content, often with a dismiss option","description:
The UI should display a notification message with an optional dismiss button, inline with the surrounding content. The notification message should have a subtle background color and padding to differentiate it from the surrounding content.
components:
- NotificationMessage: (standalone): Displays a notification message with an optional dismiss button.
- DismissButton: (standalone): A small button to dismiss the notification message.
html:
<div class=""max-w-md mx-auto mt-4 mb-4""><NotificationMessage/><!-- surrounding content --><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p></div>
component html:
NotificationMessage:
<div class=""bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4"">{message} <DismissButton/></div>
DismissButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out"">×</button>"
Border controls,"description:
The UI should consist of a form with two input fields for width and style, a dropdown for border style, and a preview area that shows the selected border.
components:
- InputBorder: A standalone component that renders a input field for border width.
- BorderStyleDropdown: A standalone component that renders a dropdown for selecting border style.
- BorderPreview: A standalone component that renders a preview of the selected border.
- BorderControlForm: A component that takes children and renders a form with the input field, dropdown, and preview area.
html:
<div class=""max-w-md mx-auto p-4""><BorderControlForm><InputBorder/><BorderStyleDropdown/><BorderPreview/></BorderControlForm></div>
component html:
InputBorder:
<input type=""number"" id=""border-width"" class=""w-full p-2 pl-10 text-sm border border-gray-200 rounded-md"" value=""{widthValue}""/>
BorderStyleDropdown:
<select id=""border-style"" class=""w-full p-2 pl-10 text-sm border border-gray-200 rounded-md""><option value=""solid"">Solid</option><option value=""dashed"">Dashed</option><option value=""dotted"">Dotted</option><!-- Add more options as needed --></select>
BorderPreview:
<div class=""bg-gray-100 p-4 border-{borderStyle} border-{widthValue}px""><!-- Preview area --></div>
BorderControlForm:
<form class=""flex flex-col gap-4"">{children}</form>"
Who to follow suggestions for users,"description:
The UI should display a list of user suggestions with their profile pictures, names, and a ""Follow"" button. The list should be scrollable and have a header with a title.
components:
- UserSuggestionCard: A standalone component that displays a single user suggestion.
- WhoToFollowList: A component that takes children, which is a list of `UserSuggestionCard` components.
html:
<div class=""max-h-screen overflow-y-scroll px-4 pt-4""><h2 class=""text-lg font-bold"">Who to follow</h2><WhoToFollowList><UserSuggestionCard/><UserSuggestionCard/><UserSuggestionCard/><!-- Add more UserSuggestionCard components here --></WhoToFollowList></div>
component html:
UserSuggestionCard:
<div class=""flex items-center mb-4""><img src={profile_picture_url} class=""w-12 h-12 rounded-full""/><div class=""ml-4""><p class=""text-lg"">{username}</p><p class=""text-gray-600"">{name}</p></div><button class=""ml-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Follow </button></div>
WhoToFollowList:
<ul class=""list-none mb-4"">{children}</ul>"
A star rating component to display course ratings,"description:
The star rating component should be a compact, visually appealing representation of a course's rating. It should be easily readable on various screen sizes and accessible to all users. The component will feature a row of stars, with the number of filled stars indicating the course's rating. The color scheme will include a highlight color for the filled stars and a secondary color for the unfilled stars.
components:
- StarRating: (Takes Children): A container for the star rating component.
- Star: (Standalone): An individual star in the rating system.
html:
<StarRating><!-- Star icons will be rendered here --></StarRating>
component html:
StarRating:
<div class=""flex justify-center items-center mb-2"">{children} <span class=""text-sm text-gray-500"">{average_rating}/ 5</span></div>
Star:
<div class=""w-4 h-4 mx-1"">{filled ? <span class=""text-yellow-400"">&#x2605;</span>: <span class=""text-gray-300"">&#x2605;</span>}</div>"
"A footer with copyright information, social media links, and a contact email","description:
The footer should have a clean and minimalistic design, with a subtle shadow to give it some depth. It should have a prominent copyright notice, followed by a row of social media links, and finally a contact email. The layout should be flexible to accommodate different screen sizes.
components:
- FooterSection: (Takes Children): A container component to house the footer content.
- CopyrightNotice: (Standalone): Displays the copyright information.
- SocialMediaLinks: (Standalone): A row of social media links.
- ContactInfo: (Standalone): Displays the contact email.
html:
<footer class=""bg-gray-100 py-12""><FooterSection><CopyrightNotice/><SocialMediaLinks/><ContactInfo/></FooterSection></footer>
component html:
FooterSection:
<div class=""max-w-md mx-auto px-4 sm:px-6 lg:px-8"">{children}</div>
CopyrightNotice:
<p class=""text-sm text-gray-500"">&copy; {current_year} {company_name}. All rights reserved.</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4""><li class=""mr-4""><a href=""{twitter_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- twitter --></svg></a></li><li class=""mr-4""><a href=""{facebook_url}"" target=""_blank"" rel=""noopener noreferrer""><svg><!-- facebook --></svg></a></li><!-- Add more social media links here --></ul>
ContactInfo:
<p class=""text-sm text-gray-500"">Contact us at <a href=""mailto:{contact_email}"" class=""text-blue-600 hover:text-blue-800"">{contact_email}</a></p>"
Password Strength Meters,"description:
The UI should display a password input field with a meter below it that indicates the strength of the password. The meter should have a color indicator (e.g., green for strong, yellow for medium, red for weak) and a text indicator (e.g., ""Strong"", ""Medium"", ""Weak"").
components:
- PasswordInput: standalone, a single-line text input field for entering a password
- PasswordStrengthMeter: takes children, displays the password strength meter with a color indicator and text indicator
- StrengthIndicator: standalone, a colored bar indicating the password strength
- StrengthText: standalone, a text indicator of the password strength (e.g., ""Strong"", ""Medium"", ""Weak"")
html:
<div class=""flex flex-col max-w-md mx-auto p-4""><PasswordInput/><PasswordStrengthMeter><StrengthIndicator/><StrengthText/></PasswordStrengthMeter></div>
component html:
PasswordInput:
<input type=""password"" class=""w-full p-2 border border-gray-300 rounded""/>
PasswordStrengthMeter:
<div class=""flex items-center mb-2"">{children}</div>
StrengthIndicator:
<div class=""h-2 w-full {strength_color} rounded""></div><!-- strength_color is a dynamic class that changes based on password strength -->
StrengthText:
<p class=""text-sm"">{strength_text}</p><!-- strength_text is a dynamic text that changes based on password strength -->"
A simple round avatar icon with a neon green border,"description:
The UI should be a simple round avatar icon with a neon green border. The avatar icon will be responsive, meaning it will scale down on smaller screens. The neon green border will add a pop of color and make the avatar stand out.
components:
- AvatarIcon: (Standalone): This component will display the avatar image. On small screens (up to `md` breakpoint), the avatar will be 40px in diameter. On medium screens (from `md` to `lg` breakpoint), the avatar will be 60px in diameter. On large screens (from `lg` breakpoint), the avatar will be 80px in diameter.
html:
<div class=""flex justify-center""><AvatarIcon/></div>
component html:
AvatarIcon:
<img class=""w-40 md:w-60 lg:w-80 h-40 md:h-60 lg:h-80 rounded-full border-4 border-neon-green"" src=""{avatar_url}""/>"
"Popover that appears in response to user actions, offering additional options or information","description:
A popover that appears in response to user actions, offering additional options or information. The popover should be responsive, mobile-first, and accessible, with a subtle animation effect when it appears and disappears. The popover should have a arrow pointing to the element that triggered it.
components:
- PopoverTrigger: standalone, represents the element that triggers the popover
- PopoverContent: takes children, represents the content of the popover
- PopoverArrow: standalone, represents the arrow pointing to the trigger element
html:
<div class=""relative inline-block""><PopoverTrigger/><!-- the element that triggers the popover --><div class=""absolute bg-white shadow-md rounded px-4 pt-2 pb-4""><PopoverArrow/><PopoverContent><!-- popover content goes here --></PopoverContent></div></div>
component html:
PopoverTrigger:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{trigger_text}</button>
PopoverContent:
<div class=""text-sm"">{children}</div>
PopoverArrow:
<div class=""absolute w-2 h-2 bg-white transform -rotate-45"" style=""top: 50%; left: 50%;""></div>"
Social Sharing Network,"description:
The UI should be a responsive, mobile-first layout that displays a feed of social media posts with user avatars, usernames, post content, and social media icons for sharing and liking. The UI should be accessible and SEO-friendly.
components:
- FeedItem: a standalone component that represents a single social media post.
- UserProfile: a standalone component that displays a user's avatar, username, and social media icons.
- PostContent: a standalone component that displays the content of a social media post.
- SocialMediaIcons: a standalone component that displays social media icons for sharing and liking.
- FeedList: a component that takes children and displays a list of `FeedItem` components.
html:
<div class=""container max-w-md mx-auto p-4 pt-6""><h1 class=""text-2xl font-bold mb-4"">Social Feed</h1><FeedList><FeedItem/><FeedItem/><!-- more FeedItem components here --></FeedList></div>
component html:
FeedItem:
<div class=""flex flex-wrap mb-4""><UserProfile/><PostContent/><SocialMediaIcons/></div>
UserProfile:
<div class=""w-12 h-12 flex-shrink-0 mr-3""><img src=""{user_avatar_url}"" alt=""{username}"" class=""w-12 h-12 rounded-full""/><span class=""text-lg"">{username}</span></div>
PostContent:
<p class=""text-lg"">{post_content}</p>
SocialMediaIcons:
<div class=""flex items-center justify-between""><a href=""{facebook_url}"" class=""text-lg mr-2""><i class=""fab fa-facebook-f""></i></a><a href=""{twitter_url}"" class=""text-lg mx-2""><i class=""fab fa-twitter""></i></a><a href=""{instagram_url}"" class=""text-lg ml-2""><i class=""fab fa-instagram""></i></a></div>
FeedList:
<ul class=""list-none p-0 mb-0"">{children}</ul>"
Button that switches between two states or options when clicked,"description:
A toggle button that changes its label and/or style when clicked, switching between two states or options. The button should be responsive, mobile-friendly, and accessible.
components:
- ToggleButtonItem: (standalone): Representing one toggle option.
- ToggleButtons: (takes children): Wraps multiple `ToggleButtonItem` components.
html:
<div class=""flex flex-wrap justify-center mb-4""><ToggleButtons><ToggleButtonItem/><ToggleButtonItem/></ToggleButtons></div>
component html:
ToggleButtonItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"" <!-- Add active or inactive styles based on the toggled state -->:class=""{ 'bg-gray-300': isActive, 'bg-gray-200': !isActive }"">{optionLabel}</button>
ToggleButtons:
<div class=""flex flex-nowrap"">{children}</div>"
Badge component with a colored background and a small font size,"description:
The UI should be a small, rounded rectangle with a colored background and a small font size. The badge should be easily readable and visually appealing.
components:
- Badge: (Takes Children): A small, colored badge with a small font size.
html:
<div class=""flex flex-wrap justify-center""><Badge>Label</Badge></div>
component html:
Badge:
<span class=""inline-flex items-center px-2 py-0.5 rounded-md text-sm bg-{color}-500 text-{color}-100"">{children}</span>"
Responsive Maps and Directions,"description:
The UI should include two principal sections:
   - A responsive map display area that adjusts to screen size.
   - A sidebar or an overlay section for entering directions which contains input fields for the start and end locations, and a submit button to fetch directions.
components:
- MapArea: Standalone. This component will display the map.
- DirectionsForm: Takes children. It will contain the form for inputting directions data.
- InputField: Standalone. This is used for creating text inputs within forms.
- ButtonSubmit: Standalone. A button specifically styled for form submissions.
html:
<div class=""container mx-auto px-4""><div class=""flex flex-col md:flex-row""><div class=""md:w-3/4 lg:w-4/5""><MapArea/></div><div class=""md:w-1/4 lg:w-1/5 mt-4 md:mt-0""><DirectionsForm><InputField/><InputField/><ButtonSubmit/></DirectionsForm></div></div></div>
component html:
MapArea:
<div id=""{map_container_id}"" class=""w-full h-64 md:h-auto""><!-- Map displays here --></div>
DirectionsForm:
<form class=""space-y-4 p-4 shadow-lg rounded-lg bg-white"">{children} </form>
InputField:
<input type=""text"" class=""form-input w-full rounded-md border-gray-300 shadow-sm"" placeholder=""{input_placeholder}""/>
ButtonSubmit:
<button type=""submit"" class=""w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"">Get Directions </button>"
Callout Box Text,"description:
The UI should be a rectangular box with a subtle background color, a bold title, and a brief text description. The text should be responsive, meaning it should adjust its size and layout according to the screen size.
components:
- CalloutBox: standalone component
- CalloutBoxTitle: standalone component
- CalloutBoxDescription: standalone component
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><CalloutBox/></div>
component html:
CalloutBox:
<div class=""bg-gray-100 rounded-lg p-4""><CalloutBoxTitle/><CalloutBoxDescription/></div>
CalloutBoxTitle:
<h2 class=""text-lg font-bold mb-2"">{title}</h2>
CalloutBoxDescription:
<p class=""text-sm"">{description}</p>"
Customizable Themes: Brand your interface,"description:
A menu with a list of theme options, where each option displays a preview of the theme and allows the user to select it.
components:
- ThemeOption: (standalone): a single theme option with a preview and a checkbox to select it
- ThemeSelector: (takes children): a container for a list of theme options
html:
<div class=""w-full p-4 bg-gray-100 rounded""><h2 class=""text-lg font-bold mb-2"">Customizable Themes</h2><ThemeSelector><ThemeOption/><ThemeOption/><ThemeOption/><!-- more theme options here --></ThemeSelector></div>
component html:
ThemeOption:
<div class=""flex items-center mb-2""><input type=""checkbox"" class=""mr-2""/><div class=""w-12 h-6 bg-{theme_color} mr-2""/><span class=""text-sm"">{theme_name}</span></div>
ThemeSelector:
<ul class=""list-none mb-0"">{children}</ul>"
Hero Section with Video,"description:
The UI should be a hero section with a background video that plays automatically when the page loads. The video should be muted and loop indefinitely. There should be a headline, subheading, and a call-to-action (CTA) button on top of the video. The UI should be responsive and adapt to different screen sizes.
components:
- HeroVideo: A standalone component that renders a background video.
- HeroContent: A component that takes children, which are the headline, subheading, and CTA button.
- HeroHeadline: A standalone component that renders the headline text.
- HeroSubheading: A standalone component that renders the subheading text.
- HeroCTA: A standalone component that renders the CTA button.
html:
<section class=""min-h-screen relative""><HeroVideo/><div class=""absolute inset-0 flex items-center justify-center""><HeroContent><HeroHeadline/><HeroSubheading/><HeroCTA/></HeroContent></div></section>
component html:
HeroVideo:
<video autoplay loop muted class=""w-full h-full object-cover""><source src=""{video_source}"" type=""video/mp4"">Your browser does not support the video tag.</video>
HeroContent:
<div class=""container mx-auto p-4 md:p-8"">{children}</div>
HeroHeadline:
<h1 class=""text-3xl md:text-5xl font-bold"">{headline_text}</h1>
HeroSubheading:
<p class=""text-lg md:text-2xl"">{subheading_text}</p>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Chatbot widget,"description:
The UI should be a chatbot widget that appears as a floating button on the bottom right corner of the screen. When clicked, it expands to a chat window with a header, input field, and a send button. The chat window should be responsive, mobile-friendly, and accessible.
components:
- ChatbotButton: (standalone): a floating button that triggers the chat window
- ChatWindow: (takes children): the chat window with a header, input field, and send button
- ChatHeader: (standalone): the header section of the chat window
- ChatInput: (standalone): the input field for user input
- SendButton: (standalone): the send button
html:
<div class=""fixed bottom-4 right-4""><ChatbotButton/></div><div class=""hidden md:flex fixed bottom-0 right-0 p-4 bg-white rounded-lg w-64 md:w-96""><ChatWindow><ChatHeader/><div class=""flex flex-col p-4""><ChatInput/><SendButton/></div></ChatWindow></div>
component html:
ChatbotButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full""><i class=""fas fa-comment""></i></button>
ChatWindow:
<div class=""flex flex-col p-4"">{children}</div>
ChatHeader:
<header class=""flex justify-between p-4""><h3 class=""text-lg"">Chatbot</h3><button class=""text-gray-600 hover:text-gray-900""><i class=""fas fa-times""></i></button></header>
ChatInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Type a message..."">
SendButton:
<button class=""bg-teal-500 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-full"">Send</button>"
Social media feed display,"description:
The UI should display a list of social media posts, each containing a profile picture, username, post text, likes, comments, and a timestamp. The feed should be scrollable and responsive, with a maximum of 3 posts per row on desktop and 1 post per row on mobile.
components:
- SocialMediaPost: (standalone): A single social media post
- SocialMediaFeed: (takes children): A container for a list of social media posts
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><SocialMediaFeed><SocialMediaPost/><SocialMediaPost/><SocialMediaPost/><!-- Add more posts here --></SocialMediaFeed></div>
component html:
SocialMediaPost:
<div class=""flex mb-4""><img src=""{profile_picture_url}"" alt=""Profile picture"" class=""w-12 h-12 rounded-full mr-4""/><div class=""flex-1""><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{post_text}</p><div class=""flex justify-between text-sm text-gray-600""><span>{likes} likes</span><span>{comments} comments</span><span>{timestamp}</span></div></div></div>
SocialMediaFeed:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Logo display,"description:
The UI should display a logo with a max width of 200px. On larger screens, the logo should be centered horizontally.
components:
- LogoDisplay: (standalone)
html:
<div class=""max-w-md mx-auto p-4 flex justify-center""><LogoDisplay/></div>
component html:
LogoDisplay:
<img src={logoUrl} alt={logoAlt} class=""max-w-full h-auto""/>"
Logo component with a white fill color and bold font,"description:
The Logo component should be a simple, yet prominent element that represents the brand identity. It should have a white fill color and bold font to make it stand out.
components:
- LogoComponent: (Standalone)
html:
<!-- The top level UI is just the Logo component --><LogoComponent/>
component html:
LogoComponent:
<!-- The Logo component has a white fill color and bold font --><div class=""text-white font-bold text-3xl lg:text-4xl xl:text-5xl"">{logo_text} <!-- Replace with the actual logo text --></div>"
Testimonial Quote Mark,"description:
A beautifully designed testimonial quote mark, usually a large quotation mark that surrounds a quote or review. It adds a touch of elegance and sophistication to the overall design.
components:
- TestimonialQuoteMark: Standalone component that renders a large quotation mark surrounding a quote or review.
html:
<div class=""flex items-center justify-center mb-4""><TestimonialQuoteMark/><p class=""text-lg font-bold"">{quote_text}</p><p class=""text-gray-600"">{author_name}</p></div>
component html:
TestimonialQuoteMark:
<span class=""text-6xl font-bold text-gray-400"">&ldquo;</span>"
Hotel and Attraction Photos,"description:
The UI should display a collection of images showcasing the hotel and its attractions. The images should be responsive, with a maximum width and height, and have a slight border radius to give them a clean, modern look. On larger screens, the images should be arranged in a grid, with multiple images per row. On smaller screens, the images should be stacked vertically.
components:
- HotelAttractionImage: A standalone component representing a single image of the hotel or attraction.
- HotelAttractionImageGallery: A component that takes children, responsible for displaying a collection of `HotelAttractionImage` components in a responsive grid.
html:
<div class=""max-w-md mx-auto""><HotelAttractionImageGallery><HotelAttractionImage/><HotelAttractionImage/><!-- additional HotelAttractionImage components here --></HotelAttractionImageGallery></div>
component html:
HotelAttractionImage:
<img src={imageSrc} alt={imageAlt} class=""w-full h-48 object-cover rounded-md border""/>
HotelAttractionImageGallery:
<div class=""flex flex-wrap justify-center"">{children}</div>"
Event listing,"description:
The event listing UI should display a list of events with essential details, such as the event title, date, location, and a brief description. It should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- EventListing: A component that takes children (a list of `EventCard` components) and displays them in a list.
html:
<main class=""container mx-auto p-4 pt-6 md:pt-12""><h1 class=""text-3xl font-bold mb-4"">Upcoming Events</h1><EventListing><!-- list of EventCard components will be rendered here --></EventListing></main>
component html:
EventListing:
<ul class=""list-none mb-0"">{children}</ul>"
"Comment component with a profile picture, username, and comment text","description:
The Comment component should be a compact, readable block that displays a profile picture, username, and comment text. The layout should be responsive, with the profile picture and username on top of the comment text on smaller screens, and side by side on larger screens. The component should have a subtle background color and a slight shadow to give it some depth.
components:
- Comment: (Takes Children): A single comment with a profile picture, username, and comment text.
html:
<section class=""max-w-md mx-auto p-4""><Comment><!-- comment content will be rendered here --></Comment></section>
component html:
Comment:
<div class=""bg-gray-100 shadow-md p-4 rounded""><div class=""flex items-center sm:flex-row flex-col""><img src={profile_picture} alt=""Profile picture"" class=""w-12 h-12 rounded-full mr-4""/><div class=""sm:ml-4""><span class=""text-gray-800"">{username}</span><p class=""text-gray-600"">{children}</p></div></div></div>"
"A footer component with links to about, terms, and privacy policy","description:
The footer component should be a compact, centered section at the bottom of the page, with three links to the about, terms, and privacy policy pages. The links should be small, but clear and easy to tap on mobile devices. On larger screens, the links should be arranged horizontally in a row. The footer should have a subtle background color and a slight shadow to distinguish it from the rest of the page.
components:
- FooterComponent: (Standalone): The top-level footer component that contains the links to about, terms, and privacy policy pages.
html:
<footer class=""bg-gray-200 py-4 lg:py-8""><FooterComponent/></footer>
component html:
FooterComponent:
<nav class=""flex flex-wrap justify-center lg:flex-nowrap lg:justify-between""><a href=""{about_url}"" class=""text-sm text-gray-600 hover:text-gray-800 transition duration-300"">{about_text}</a><a href=""{terms_url}"" class=""text-sm text-gray-600 hover:text-gray-800 transition duration-300"">{terms_text}</a><a href=""{privacy_url}"" class=""text-sm text-gray-600 hover:text-gray-800 transition duration-300"">{privacy_text}</a></nav>"
"A comment component that includes a user avatar, username, comment text, and timestamp","description:
The UI should display a comment component that showcases a user's avatar, username, comment text, and timestamp. The avatar should be circular and relatively small, with a subtle shadow to give it a sense of depth. The username should be displayed in a bold font, with a hover effect to highlight the username. The comment text should be displayed in a clean, readable font, with sufficient line spacing to make it easy to read. The timestamp should be displayed in a smaller font, with a subtle italic style to distinguish it from the comment text.

On smaller screens (sm and md breakpoints), the avatar and username should be stacked on top of each other, with the comment text and timestamp below. On larger screens (lg and xl breakpoints), the avatar and username should be displayed side by side, with the comment text and timestamp below.
components:
- CommentHeader: (Standalone): Displays the user avatar and username.
- CommentBody: (Takes Children): Displays the comment text and timestamp.
- Comment: (Takes Children): A container component that wraps the `CommentHeader` and `CommentBody` components.
html:
<Comment><CommentHeader/><CommentBody><p>{comment_text}</p><p class=""text-sm text-gray-500"">{timestamp}</p></CommentBody></Comment>
component html:
CommentHeader:
<div class=""flex items-center mb-2""><img src={avatar_url} class=""w-8 h-8 rounded-full shadow-sm""/><span class=""ml-2 font-bold"">{username}</span></div>
CommentBody:
<div class=""pl-10"">{children}</div>
Comment:
<div class=""mb-4 p-4 bg-white rounded-md shadow-md"">{children}</div>"
Vertical column on the side of the page containing additional navigation or information,"description:
The UI should feature a vertical column, typically placed on the left or right side of the page, which functions as a sidebar. This sidebar contains navigation links or additional information related to the main content, enhancing accessibility and ease of navigation within the site.
components:
- Sidebar: Standalone component
- NavigationLink: Component that takes children. It represents a single navigable link within the sidebar.
html:
<div class=""flex""><Sidebar/><main class=""flex-1""><!-- Main content goes here --><p>This is the main content area of the page.</p></main></div>
component html:
Sidebar:
<aside class=""w-64 h-full bg-gray-200 p-4""><ul><li><NavigationLink>Home</NavigationLink></li><li><NavigationLink>About</NavigationLink></li><li><NavigationLink>Services</NavigationLink></li><li><NavigationLink>Contact</NavigationLink></li></ul></aside>
NavigationLink:
<a href=""{link_href}"" class=""block p-2 hover:bg-gray-300"">{children}</a>"
Photo editor toolset,"description:
- The UI for a photo editor toolset should be a panel containing various tools (like crop, rotate, adjust brightness, etc.). Each tool could be represented by a button or icon that users can click to select and use that tool. The layout should be simple and straightforward, with the tool buttons laid out in a grid or a row, depending on the screen size.
components:
- ToolButton: Standalone component. Represents a single tool in the editor like crop or rotate.
- ToolPanel: Takes children. This is the container that holds all the **ToolButton** components.
html:
<div class=""tool-panel""><ToolButton/><ToolButton/><ToolButton/><!-- Add more ToolButton as per the number of tools available --></div>
component html:
ToolButton:
<!-- ToolButton represents a single tool in the photo editing toolset --><button class=""p-2 m-1 bg-gray-200 hover:bg-gray-300 focus:outline-none"">{tool_name} </button>
ToolPanel:
<!-- ToolPanel is the container for all the tool buttons --><div class=""flex flex-wrap justify-center items-center p-4 bg-white border border-gray-300"">{children} </div>"
Social Media Profile Picture,"description:
A circular profile picture with a username displayed below it, responsive and mobile-first.
components:
- UserProfilePic: (standalone): Displays a circular profile picture.
- UsernameText: (standalone): Displays the username as text.
html:
<div class=""flex flex-col items-center""><UserProfilePic/><UsernameText/></div>
component html:
UserProfilePic:
<img src=""{profile_picture_url}"" alt=""{username}"" class=""w-48 h-48 rounded-full""/>
UsernameText:
<p class=""text-lg font-bold"">{username}</p>"
Gallery/Image Lightboxes,"description:
The UI should consist of a grid layout displaying thumbnails of images. Each thumbnail can be clicked to open a larger view of that image, often referred to as a lightbox. This larger view typically darkens the rest of the screen and focuses the user’s attention on the viewed image. It may also provide navigation to move between images while in the enlarged mode and a close button to exit back to the gallery view.
components:
- Gallery: Standalone component that contains multiple `Thumbnail` components.
- Thumbnail: Component that takes children. Displays a small preview of an image and triggers the lightbox view on click.
- Lightbox: Component that takes children. Displays the enlarged image and includes UI for closing the view or navigating between images.
html:
<main class=""p-4""><h1 class=""text-xl font-bold text-center"">Image Gallery</h1><Gallery/></main>
component html:
Gallery:
<section class=""grid grid-cols-2 md:grid-cols-3 gap-4""><Thumbnail><img src=""{thumbnail_image_1}"" alt=""{image_description_1}"" class=""w-full h-auto""/></Thumbnail><Thumbnail><img src=""{thumbnail_image_2}"" alt=""{image_description_2}"" class=""w-full h-auto""/></Thumbnail><!-- Additional thumbnails can be added similarly --></section>
Thumbnail:
<div class=""relative group cursor-pointer"">{children} <!-- The thumbnail image --><div class=""absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity""><Lightbox><img src=""{thumbnail_image_large}"" alt=""{image_description_large}"" class=""max-w-full max-h-screen mx-auto my-8""/></Lightbox></div></div>
Lightbox:
<div class=""fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50"" role=""dialog""><button class=""absolute top-4 right-4 text-white text-3xl"" aria-label=""Close"">&#10005;</button>{children} <!-- The large image --></div>"
Pagination Links List,"description:
The UI should display a list of pagination links, with each link representing a page number. The active page should be highlighted, and the previous and next page links should be displayed. The UI should be responsive and adapt to different screen sizes.
components:
- PaginationLinksList: standalone component that contains the entire pagination links list.
- PaginationNav: standalone component that contains the previous and next page links.
html:
<nav aria-label=""Pagination""><PaginationNav/><PaginationLinksList/></nav>
component html:
PaginationLinksList:
<ul class=""flex flex-wrap justify-center mb-4"">{paginationLinks}</ul>
PaginationNav:
<div class=""flex justify-between mb-4""><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">{prevText}</button><button class=""bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"">{nextText}</button></div>"
Tag cloud for filtering,"description:
The UI should display a collection of tags in a cloud-like layout, with each tag having a varying font size and color to represent its importance or frequency. The tags should be clickable, allowing the user to filter content based on the selected tag.
components:
- TagCloud: The main component that contains all the tags. (Takes children)
- Tag: A single tag component that displays the tag text and is clickable. (Standalone)
html:
<div class=""max-w-md mx-auto pt-4""><h2 class=""text-lg font-bold mb-4"">Filter by Tag</h2><TagCloud><Tag/><Tag/><!-- ... additional Tag components --></TagCloud></div>
component html:
TagCloud:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>
Tag:
<li class=""mr-2 mb-2""><a href=""#"" class=""text-sm font-bold text-{tag_color} hover:text-{hover_tag_color}"">{tag_text} </a></li>"
Stepper control,"description:
The Stepper UI is a navigation component typically used in forms or setup processes to indicate the current step and allow users to move through a series of steps. It usually consists of numbered steps connected by lines, with the current step highlighted or differentiated. Each step may have a title and the current step might show additional details or actions.
components:
- StepCircle: (Standalone): Represents a circle with a number inside, used to indicate the step number.
- StepConnector: (Standalone): A line connecting two step circles to show the sequence.
- StepLabel: (Standalone): A label that displays the title of each step, usually placed below the step circle.
html:
<div class=""flex justify-between items-center p-4""><div class=""flex items-center""><StepCircle/><StepConnector/><StepCircle/><StepConnector/><StepCircle/></div><div class=""flex justify-between w-full mt-2""><StepLabel/><StepLabel/><StepLabel/></div></div>
component html:
StepCircle:
<div class=""w-8 h-8 rounded-full bg-blue-500 text-white flex justify-center items-center"">{stepNumber} </div>
StepConnector:
<div class=""flex-auto border-t-2 border-gray-300""></div>
StepLabel:
<div class=""text-center text-sm"">{stepTitle} </div>"
"Comment component with a white background, featuring a comment text, username, and timestamp","description:
The Comment component should have a white background with a subtle shadow to give it depth. The comment text should be in a readable font size and color, with the username and timestamp displayed in a smaller font size above the comment text. On smaller screens, the component should be full-width, and on larger screens, it should have a maximum width to prevent the text from becoming too wide.
components:
- Comment: (Takes Children): A comment component displaying a comment text, username, and timestamp.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Comment><!-- comment content will be rendered here --></Comment></div>
component html:
Comment:
<div class=""bg-white shadow-md p-4 rounded-md""><div class=""flex justify-between mb-2""><p class=""text-sm text-gray-600"">{username}</p><p class=""text-xs text-gray-500"">{timestamp}</p></div><p class=""text-base text-gray-800"">{children}</p></div>"
Networking opportunities display,"description:
The UI should display a list of networking opportunities, each with a title, description, and a call-to-action (CTA) button. The list should be responsive, with a maximum of 2 columns on larger screens. Each opportunity should have a clear title, a brief description, and a prominent CTA button.
components:
- NetworkingOpportunityCard: a standalone component that displays a single networking opportunity.
- NetworkingOpportunitiesList: a component that takes children, which are multiple `NetworkingOpportunityCard` components.
html:
<div class=""max-w-md mx-auto p-4 lg:max-w-2xl lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Networking Opportunities</h1><NetworkingOpportunitiesList><NetworkingOpportunityCard/><NetworkingOpportunityCard/><!-- Add more NetworkingOpportunityCard components here --></NetworkingOpportunitiesList></div>
component html:
NetworkingOpportunityCard:
<div class=""bg-white shadow-md rounded p-4 mb-4 w-full lg:w-1/2 lg:p-6""><h2 class=""text-lg font-bold"">{opportunity_title}</h2><p class=""text-gray-600"">{opportunity_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></div>
NetworkingOpportunitiesList:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Audio effects,"description:
The UI should display a list of audio effects, each with a name, description, and a toggle button to enable or disable the effect.
components:
- AudioEffectCard: A standalone component that represents a single audio effect.
- AudioEffectList: A component that takes children, which is a list of `AudioEffectCard` components.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold"">Audio Effects</h2><AudioEffectList><AudioEffectCard/><AudioEffectCard/><!-- Add more AudioEffectCard components as needed --></AudioEffectList></div>
component html:
AudioEffectCard:
<div class=""flex items-center justify-between mb-4 p-4 border border-gray-200 rounded""><div><h3 class=""text-lg font-bold"">{audio_effect_name}</h3><p class=""text-gray-600"">{audio_effect_description}</p></div><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-full"">{audio_effect_enabled ? 'Disable' : 'Enable'} </button></div>
AudioEffectList:
<ul class=""list-none mb-0"">{children}</ul>"
Designer/Studio Profiles,"description:
The UI should display a profile section for designers/studios, showcasing their information, projects, and skills. It should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- DesignerProfileHeader: A standalone component that displays the designer's/studio's name, profile picture, and tagline.
- ProjectCard: A standalone component that displays a project's information, including title, description, and image.
- SkillBadge: A standalone component that displays a skill with a title and icon.
- DesignerProfileSection: A component that takes children to display the designer's/studio's projects and skills.
html:
<section class=""max-w-md mx-auto p-4""><DesignerProfileHeader/><DesignerProfileSection><h2 class=""text-lg font-bold mb-4"">Projects</h2><ul class=""flex flex-wrap justify-center mb-4""><ProjectCard/><ProjectCard/><!-- Add more ProjectCard components here --></ul><h2 class=""text-lg font-bold mb-4"">Skills</h2><ul class=""flex flex-wrap justify-center""><SkillBadge/><SkillBadge/><!-- Add more SkillBadge components here --></ul></DesignerProfileSection></section>
component html:
DesignerProfileHeader:
<header class=""flex justify-center mb-4""><img src=""{profile_picture_url}"" alt=""{designer_name}"" class=""w-24 h-24 rounded-full""/><div class=""ml-4""><h1 class=""text-2xl font-bold"">{designer_name}</h1><p class=""text-sm"">{tagline}</p></div></header>
ProjectCard:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src=""{project_image_url}"" alt=""{project_title}"" class=""w-full h-48 object-cover rounded""/><h3 class=""text-lg font-bold"">{project_title}</h3><p class=""text-sm"">{project_description}</p></li>
SkillBadge:
<li class=""mr-4 mb-4""><span class=""bg-orange-100 text-orange-800 py-1 px-2 rounded"">{skill_title}</span><!-- Add icon here --><i class=""fas fa-{skill_icon}""></i></li>
DesignerProfileSection:
<!-- This component should render its children --><div class=""px-4"">{children}</div>"
User Management: Manage user accounts,"description:
The UI should display a list of user accounts with their profiles, and provide an option to edit or delete each account. The design should be responsive, with a mobile-first approach, and follow accessibility and SEO best practices.
components:
- UserAccountList: A component that takes children, rendering a list of `UserAccountCard` components.
- DeleteButton: A standalone component that displays a delete button for a user account.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><h1 class=""text-2xl font-bold mb-4"">Manage User Accounts</h1><UserAccountList><!-- List of user accounts will be rendered here --></UserAccountList></div>
component html:
UserAccountList:
<ul class=""divide-y divide-gray-200"">{children}</ul>
DeleteButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Delete</button>"
Post Text Editor: Input field for writing a new post,"description:
A minimalist text editor for writing a new post, consisting of a text input field with a subtle border, padding, and a hint of typography. The input field should be responsive, taking up the full width on mobile devices and shrinking to a comfortable size on larger screens.
components:
- TextInput: (standalone): A simple text input field with a label and minimal styling.
html:
<div class=""max-w-md mx-auto p-4""><TextInput/></div>
component html:
TextInput:
<div class=""flex flex-col mb-4""><label class=""text-sm text-gray-600"" for=""post-input"">Write a new post:</label><input id=""post-input"" class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" placeholder=""Start typing...""/></div>"
Support chat widget,"description:
The UI should be a floating chat widget typically positioned at the bottom right corner of the screen. It usually includes:
   - A button to open or close the chat interface.
   - A small panel that expands when the button is clicked, which includes:
     - A header with maybe a title or logo.
     - A scrollable area for chat messages.
     - An input area with a text box for typing messages and a button to send them.
components:
- ChatWidgetButton: (Standalone): A button that the user clicks to open or close the chat widget.
- ChatHeader: (Standalone): Displays the chat widget’s title or logo.
- ChatMessages: (Standalone): A scrollable container for displaying messages.
- MessageInput: (Standalone): An area containing a text box and a button for sending messages.
html:
<div class=""fixed bottom-4 right-4 flex flex-col items-end""><div class=""bg-white shadow-lg rounded-lg p-4 hidden""><!-- Chat header --><ChatHeader/><!-- Area to display messages --><ChatMessages/><!-- Input area for typing and sending messages --><MessageInput/></div><!-- Button to toggle chat widget visibility --><ChatWidgetButton/></div>
component html:
ChatWidgetButton:
<!-- Button to toggle chat widget, decorated to signify interactive function --><button class=""bg-blue-500 text-white rounded-full p-4 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"">Chat</button>
ChatHeader:
<!-- Displaying logo or title of the chat service --><div class=""border-b-2 py-2""><h2 class=""text-lg font-semibold"">Support Chat</h2></div>
ChatMessages:
<!-- Scrollable area for messages --><div class=""overflow-y-auto h-64 p-4""><div class=""text-sm text-gray-600"">Welcome to support! How can we assist you today?</div><!-- Placeholder where more messages would appear --></div>
MessageInput:
<!-- Area to input new messages --><div class=""pt-4 flex""><input type=""text"" class=""flex-1 border rounded-l-lg p-2 focus:border-blue-300 focus:outline-none"" placeholder=""Type your message...""/><button class=""bg-blue-500 text-white rounded-r-lg px-6 hover:bg-blue-600 focus:outline-none"">Send</button></div>"
"A footer component with links to the about page, terms and conditions, and privacy policy","description:
The footer component should have a simple and clean design, with three links to the about page, terms and conditions, and privacy policy. The links should be easy to read and navigate, even on smaller screens. The footer should be clearly separated from the rest of the content using a dividing line or a different background color. On larger screens, the links should be centered and have some space between them. On smaller screens, the links should be stacked vertically.
components:
- FooterComponent: (Standalone): A container component that holds the three links.
html:
<footer class=""bg-gray-200 py-4""><FooterComponent/></footer>
component html:
FooterComponent:
<div class=""max-w-md mx-auto text-center sm:flex sm:justify-center""><a href=""{aboutHref}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{aboutText}</a><span class=""mx-2"">|</span><a href=""{termsHref}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{termsText}</a><span class=""mx-2"">|</span><a href=""{privacyHref}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{privacyText}</a></div>"
SEO Meta Tags/Optimization,"description:
A basic SEO meta tags optimization setup with title, description, and keywords.
components:
- MetaTitle: - Standalone - Displays the title of the webpage.
- MetaDescription: - Standalone - Displays the meta description of the webpage.
- MetaKeywords: - Standalone - Displays the meta keywords of the webpage.
html:
<head><MetaTitle/><MetaDescription/><MetaKeywords/></head>
component html:
MetaTitle:
<title>{title}</title>
MetaDescription:
<meta name=""description"" content=""{description}""/>
MetaKeywords:
<meta name=""keywords"" content=""{keywords}""/>"
A breadcrumbs component with a trail of links to the current page,"description:
The breadcrumbs component should be a horizontal trail of links that indicate the current page's location in a hierarchical structure. It should be responsive, accessible, and easy to navigate. The UI should scale well on different screen sizes, with sufficient padding and margin to ensure readability.
components:
- Breadcrumbs: (Takes Children): A container component that holds the breadcrumbs trail.
- BreadcrumbItem: (Takes Children): An individual breadcrumb item that contains a link and optional separator.
html:
<nav aria-label=""Breadcrumbs"" class=""flex items-center mb-4""><Breadcrumbs><!-- breadcrumb items will be rendered here --></Breadcrumbs></nav>
component html:
Breadcrumbs:
<ul class=""flex items-center"">{children}</ul>
BreadcrumbItem:
<li class=""inline-flex items-center""><a href=""{href}"" class=""text-gray-600 hover:text-gray-900 transition duration-300"">{label}</a>{separator} {children}</li>"
"A component that displays a grid of financial metrics (e.g. account balances, investment values) with white text on a dark blue background","description:
The UI should be a responsive grid of financial metrics with white text on a dark blue background. The grid should have a maximum of 3 columns on large screens, 2 columns on medium screens, and 1 column on small screens. Each metric should have a bold label and a numerical value. The dark blue background should have a subtle gradient effect to add depth.
components:
- FinancialMetricsGrid: (Takes Children): A responsive grid of financial metrics.
- FinancialMetric: (Standalone): A single financial metric with a bold label and numerical value.
html:
<div class=""min-h-screen bg-gradient-to-b from-darkblue-900 to-darkblue-800 pt-12 pb-20""><FinancialMetricsGrid><!-- Child components will be rendered here --></FinancialMetricsGrid></div>
component html:
FinancialMetricsGrid:
<div class=""container mx-auto p-4 grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3"">{children}</div>
FinancialMetric:
<div class=""bg-darkblue-700 py-4 px-6 rounded shadow-md""><p class=""text-lg font-bold"">{label}</p><p class=""text-2xl"">{value}</p></div>"
Dropdown Menu Chevron,"description:
The UI should be a dropdown menu with a chevron icon that indicates the menu is expandable. The menu should be responsive and accessible.
components:
- DropdownMenu: Takes children, a container for the dropdown menu items
- ChevronIcon: Standalone, a chevron icon indicating the menu is expandable
html:
<div class=""w-full max-w-md mx-auto""><button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded""><DropdownMenu><!-- dropdown menu items will be inserted here --></DropdownMenu><ChevronIcon/></button></div>
component html:
DropdownMenu:
<div class=""bg-white border border-gray-200 w-full rounded"">{children}</div>
ChevronIcon:
<div class=""ml-2""><span class=""text-gray-500"">{chevron_icon}</span></div>"
Booking and Payment Forms,"description:
The UI should be a responsive and accessible booking and payment form that allows users to easily book a service and make a payment. The form should have a clean and simple design, with clear labels and input fields, and a prominent call-to-action (CTA) button to submit the booking and payment. The UI should be optimized for mobile devices, with a mobile-first approach.
components:
- BookingForm: A standalone component that contains the booking form fields (e.g., name, email, service selection, date, and time).
- PaymentForm: A standalone component that contains the payment form fields (e.g., credit card number, expiration date, and security code).
- SubmitButton: A standalone component that is used as the CTA button to submit the booking and payment.
- ErrorMessages: A standalone component that displays any error messages that occur during the booking and payment process.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl font-bold mb-4"">Book Your Service</h1><form><BookingForm/><PaymentForm/><SubmitButton/><ErrorMessages/></form></div>
component html:
BookingForm:
<div class=""flex flex-wrap mb-4""><label class=""block mb-2"" for=""name"">Name:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""name"" type=""text""/><label class=""block mb-2"" for=""email"">Email:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""email"" type=""email""/><!-- Add more form fields as needed --></div>
PaymentForm:
<div class=""flex flex-wrap mb-4""><label class=""block mb-2"" for=""card-number"">Card Number:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""card-number"" type=""tel""/><label class=""block mb-2"" for=""expiration-date"">Expiration Date:</label><input class=""w-full p-2 pl-10 text-sm text-gray-700"" id=""expiration-date"" type=""month""/><!-- Add more form fields as needed --></div>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Book and Pay</button>
ErrorMessages:
<p class=""text-red-500"">{error_message}</p>"
Blog Post Category Name,"description:
The UI should display a category name for a blog post, with a visually appealing design that is responsive, mobile-first, accessible, and SEO-friendly.
components:
- CategoryName: a standalone component that displays the category name of a blog post.
html:
<div class=""text-lg font-bold mb-2""><CategoryName/></div>
component html:
CategoryName:
<span class=""text-lg"">{category_name}</span>"
Product Price Tag,"description:
The UI should display a product price tag with the product name, price, and a ""Sale"" badge if the product is on sale.
components:
- ProductPriceTag: (standalone): Displays the product price tag information.
- ProductName: (standalone): Displays the product name.
- ProductPrice: (standalone): Displays the product price.
- SaleBadge: (standalone): Displays a ""Sale"" badge if the product is on sale.
html:
<div class=""flex items-center mb-4""><ProductPriceTag/></div>
component html:
ProductPriceTag:
<div class=""bg-gray-100 p-2 rounded""><ProductName/><ProductPrice/>{is_on_sale ? <SaleBadge/>: null}</div>
ProductName:
<p class=""text-lg font-bold"">{product_name}</p>
ProductPrice:
<p class=""text-lg font-bold text-gray-600"">{price}{price_amount}</p>
SaleBadge:
<span class=""bg-red-500 text-white px-2 py-1 rounded text-sm"">Sale</span>"
Cookie Banners,"description:
A cookie banner is a notification that appears at the top or bottom of a webpage, informing users about the use of cookies on the website. It should be a non-obtrusive, dismissible notification that contains a message, an accept button, and an optional link to learn more.
components:
- CookieBanner: Standalone component that contains the cookie banner message, accept button, and optional link.
- CookieButton: Standalone component that represents the accept button.
html:
<!-- Cookie banner container --><div class=""fixed bottom-0 left-0 right-0 p-4 bg-gray-100""><!-- Cookie banner content --><CookieBanner/></div>
component html:
CookieBanner:
<!-- Cookie banner content --><div class=""flex justify-between""><p class=""text-sm"">{cookie_message}</p><div class=""flex""><CookieButton/>{optional_link && ( <a href={optional_link.href} target=""_blank"" rel=""noopener noreferrer"" class=""text-sm underline ml-4"">{optional_link.text}</a>)} </div></div>
CookieButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Accept</button>"
User profile page with video history,"description:
The UI should display a user profile page with a header, profile information, and a video history section that lists the user's watched videos.
components:
- UserProfileHeader: standalone, displays the user's profile picture and name
- ProfileInfo: standalone, displays the user's bio and profile information
- VideoHistory: takes children, lists the user's video history
- VideoHistoryItem: standalone, displays a single video in the video history
html:
<div class=""container max-w-md mx-auto p-4""><UserProfileHeader/><ProfileInfo/><h2 class=""text-lg font-bold mb-2"">Video History</h2><VideoHistory><VideoHistoryItem/><VideoHistoryItem/><!-- more VideoHistoryItem components here --></VideoHistory></div>
component html:
UserProfileHeader:
<div class=""flex justify-center mb-4""><img src={profile_picture} class=""w-24 h-24 rounded-full""/><h1 class=""text-2xl font-bold"">{username}</h1></div>
ProfileInfo:
<div class=""mb-4""><p>{bio}</p><!-- other profile information here --></div>
VideoHistory:
<ul class=""list-none mb-4"">{children}</ul>
VideoHistoryItem:
<li class=""py-2 border-b border-gray-200""><img src={video_thumbnail} class=""w-12 h-12 rounded""/><div class=""ml-2""><h3>{video_title}</h3><p>{video_description}</p></div></li>"
"A section divider component with a thin, bright accent line to separate sections","description:
The section divider component should be a thin, horizontal line with a bright accent color to separate sections of content. The line should be thin and subtle, but still stand out enough to provide visual distinction between sections. The component should be responsive, with the line thickness and padding adjusting according to screen size.
components:
- SectionDivider: (Standalone)
html:
<main class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><!-- content before divider --><SectionDivider/><!-- content after divider --></main>
component html:
SectionDivider:
<hr class=""border-none h-px bg-accent-500""/>"
"Course card component with a thumbnail image, course title, and short description","description:
The Course Card component should have a clean and modern design, with a prominent thumbnail image, a clear course title, and a concise description. The component should be responsive, with a horizontal layout on larger screens and a stacked layout on smaller screens.
components:
- CourseCard: (Takes Children): A container component that holds the course information.
- CourseThumbnail: (Standalone): A component that displays the course thumbnail image.
- CourseTitle: (Standalone): A component that displays the course title.
- CourseDescription: (Standalone): A component that displays the course description.
html:
<div class=""max-w-md md:max-w-lg lg:max-w-xl mx-auto p-4 md:p-6 lg:p-8""><CourseCard><CourseThumbnail/><CourseTitle/><CourseDescription/></CourseCard></div>
component html:
CourseCard:
<div class=""flex flex-col md:flex-row items-center p-4 md:p-6 lg:p-8 rounded-lg shadow-md"">{children}</div>
CourseThumbnail:
<img class=""w-24 h-24 md:w-48 md:h-48 rounded-lg shadow-md"" src=""{thumbnail_url}"" alt=""{course_title} thumbnail""/>
CourseTitle:
<h2 class=""text-lg md:text-2xl lg:text-3xl font-bold"">{course_title}</h2>
CourseDescription:
<p class=""text-sm md:text-base lg:text-lg"">{course_description}</p>"
Product ratings,"description:
- The UI should display a product name, a visual representation of the rating (e.g., stars), and the number of reviews. It should be compact and clear, designed to be used in product listings or details pages.
components:
- ProductName: Standalone component displaying the name of the product.
- RatingStars: Standalone component that visually represents the rating using stars.
- ReviewCount: Standalone component that shows the number of reviews.
html:
<div class=""flex flex-col items-start""><ProductName/><div class=""flex items-center space-x-2""><RatingStars/><ReviewCount/></div></div>
component html:
ProductName:
<h3 class=""text-lg font-bold"">{product_name}</h3>
RatingStars:
<div class=""flex""><!-- Each 'i' element represents a star; 'filled' class could change based on actual rating --><i class=""text-yellow-400"">★</i><!-- Assuming ★ represents a star --><i class=""text-yellow-400"">★</i><i class=""text-yellow-400"">★</i><i class=""text-yellow-400"">★</i><i class=""text-gray-300"">★</i></div>
ReviewCount:
<span class=""text-gray-600 text-sm"">({review_count} reviews)</span>"
An event image component with a white border,"description:
The event image component should display an image with a white border around it. The image should be responsive and scale well on different screen sizes. The white border should be visible on all screen sizes, with a consistent width.
components:
- EventImage: (Takes Children): Displays an image with a white border around it. On small screens (sm:), the image should take up the full width of the screen. On medium screens (md:) and above, the image should have a maximum width of 300 pixels. The white border should be 4 pixels wide on all screen sizes.
html:
<div class=""max-w-md mx-auto""><EventImage><!-- image content will go here --></EventImage></div>
component html:
EventImage:
<div class=""border-4 border-white rounded-md overflow-hidden"">{children}</div>"
Make a hero banner that takes up the full width of the screen with a high-quality image of a nature landscape,"description:
The hero banner should be a visually striking element that takes up the full width of the screen, showcasing a high-quality image of a nature landscape. The image should be responsive, scaling down on smaller screen sizes while maintaining its aspect ratio. The banner should have a subtle gradient overlay to add depth and dimension.
components:
- HeroBanner: (Takes Children): A full-width banner component that displays a high-quality image of a nature landscape.
html:
<div class=""h-screen w-full relative""><HeroBanner><!-- Hero banner content will be placed here --></HeroBanner></div>
component html:
HeroBanner:
<div class=""h-screen w-full relative""><img src={hero_image_url} alt=""Nature landscape"" class=""w-full h-full object-cover absolute""/><div class=""absolute w-full h-full bg-gradient-to-b from-transparent to-gray-900 opacity-75""></div>{children}</div>"
"A testimonial component with a profile picture, quote, and name","description:
The testimonial component should have a profile picture, a quote, and the name of the person giving the testimonial. The profile picture should be circular and relatively small. The quote should be in a larger font size and have a subtle gradient background to make it stand out. The name of the person giving the testimonial should be in a smaller font size below the quote.
components:
- TestimonialComponent: (Takes Children): This is the top-level component that contains all the elements of the testimonial.
- ProfilePictureComponent: (Standalone): This component displays the profile picture of the person giving the testimonial.
- QuoteComponent: (Takes Children): This component displays the quote from the person giving the testimonial.
- NameComponent: (Standalone): This component displays the name of the person giving the testimonial.
html:
<TestimonialComponent><ProfilePictureComponent/><QuoteComponent>{children}</QuoteComponent><NameComponent/></TestimonialComponent>
component html:
TestimonialComponent:
<div class=""flex flex-col items-center md:flex-row md:items-start md:justify-between"">{children}</div>
ProfilePictureComponent:
<img src={profile_picture_url} alt={name} class=""h-12 w-12 rounded-full object-cover""/>
QuoteComponent:
<blockquote class=""bg-gradient-to-r from-yellow-200 to-yellow-500 p-2 rounded-md"">{children}</blockquote>
NameComponent:
<p class=""text-lg"">{name}</p>"
"Create a section header with a bright, glowing accent color and a bold, modern font","description:
The section header should have a bright, glowing accent color to draw attention and a bold, modern font to convey importance. The background of the header should be a dark, muted color to provide contrast to the accent color. The font should be large and bold on larger screens, and scale down to a smaller but still bold font on smaller screens.
components:
- SectionHeader: (Takes Children): This component represents the section header. It should have a bright, glowing accent color and a bold, modern font.
- AccentBar: (Standalone): This component is a horizontal bar that appears below the section header and provides a subtle glow effect.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-8 xl:p-10""><SectionHeader>{header_text}
</SectionHeader><AccentBar/><!-- Content below the section header -->{children}
</div>
component html:
SectionHeader:
<h2 class=""text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold text-white"">{children}</h2>
AccentBar:
<div class=""h-1 bg-accent-color rounded-full mb-4""></div>"
Search Bar: Input field for searching the site,"description:
The UI should be a simple search bar component that consists of a text input field and a search button. The search bar should be responsive, with the search button aligned to the right of the input field on larger screens, and stacked on top of each other on smaller screens.
components:
- SearchBar: standalone component that contains the entire search bar UI
- SearchInput: standalone component that represents the text input field
- SearchButton: standalone component that represents the search button
html:
<nav class=""max-w-md mx-auto p-4 flex justify-center""><SearchBar/></nav>
component html:
SearchBar:
<div class=""flex flex-wrap items-center""><SearchInput/><SearchButton/></div>
SearchInput:
<input type=""search"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/>
SearchButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-search""></i></button>"
Projects showcase with thumbnails and descriptions,"description:
A projects showcase with a grid of thumbnails, each with a description and a link to view more.
components:
- ProjectThumbnail: standalone component that displays a single project thumbnail.
- ProjectCard: takes children, a container component that displays a project thumbnail and description.
- ProjectShowcase: takes children, the main component that displays a grid of project cards.
html:
<div class=""container mx-auto p-4 pt-6 lg:p-6""><h1 class=""text-3xl font-bold mb-4"">Projects Showcase</h1><div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4""><ProjectShowcase><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><ProjectCard><ProjectThumbnail/></ProjectCard><!-- and so on... --></ProjectShowcase></div></div>
component html:
ProjectThumbnail:
<a href=""{project_url}"" class=""block mb-4""><img src=""{thumbnail_url}"" alt=""{project_name}"" class=""h-48 w-full object-cover rounded-md""/></a>
ProjectCard:
<div class=""p-4 md:p-6 bg-white rounded-md shadow-md"">{children} <h2 class=""text-lg font-bold"">{project_name}</h2><p>{project_description}</p></div>
ProjectShowcase:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
Footer navigation links,"description:
The UI should be a responsive footer navigation with links to various pages of a website. The links should be stacked vertically on mobile devices and horizontally on larger devices.
components:
- FooterNavItem: Standalone, represents a single navigation link in the footer.
- FooterNav: Takes children, represents the footer navigation container.
html:
<footer class=""bg-gray-200 h-screen p-4""><FooterNav><FooterNavItem/><FooterNavItem/><FooterNavItem/></FooterNav></footer>
component html:
FooterNavItem:
<a class=""text-gray-600 hover:text-gray-900 transition duration-500 ease-in-out"" href=""{link_url}"">{link_text}</a>
FooterNav:
<nav class=""flex flex-wrap justify-center md:flex-nowrap"">{children}</nav>"
Post/Tweet Box,"description:
A post/tweet box with a profile picture, username, input field, and a send button.
components:
- UserProfilePicture: Standalone component
- Username: Standalone component
- PostInput: Takes children
- SendButton: Standalone component
html:
<div class=""flex p-4""><UserProfilePicture/><div class=""flex-1 ml-4""><Username/><PostInput><PostInput/></PostInput><SendButton/></div></div>
component html:
UserProfilePicture:
<img class=""w-12 h-12 rounded-full"" src={profile_picture_url} alt=""Profile Picture""/>
Username:
<span class=""text-lg font-bold"">{username}</span>
PostInput:
<textarea class=""w-full p-2 pl-10 text-lg"" rows=""3"" placeholder=""What's on your mind?"">{children}</textarea>
SendButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Send</button>"
"A statistic component featuring a large, bold font and a colorful icon (e.g. a running shoe for ""Steps Taken"")","description:
The UI should feature a prominent statistic component that showcases a key metric, such as ""Steps Taken"", with a large, bold font and a colorful icon. The component should be responsive, accessible, and scalable on different screen sizes.
components:
- StatisticComponent: (Takes Children): This component will display a large, bold font statistic with a colorful icon. On smaller screens, the icon will be displayed above the statistic, while on larger screens, the icon will be displayed alongside the statistic.
html:
<div class=""min-h-screen flex justify-center""><StatisticComponent>{statistic_value} <span>{statistic_unit}</span></StatisticComponent></div>
component html:
StatisticComponent:
<div class=""flex flex-col lg:flex-row justify-center items-center mb-4""><span class=""text-6xl text-primary-500 mb-2 lg:mr-4"">{icon}</span><div class=""text-4xl font-bold"">{children}</div></div>"
Countdown display,"description:
The UI should display a countdown timer with days, hours, minutes, and seconds remaining until a specific date/time. The timer should be responsive, accessible, and SEO-friendly.
components:
- CountdownTimer: a standalone component that displays the countdown timer.
- TimeUnit: a component that takes children to display a single unit of time (e.g., days, hours, minutes, seconds).
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><CountdownTimer/></div>
component html:
CountdownTimer:
<div class=""flex justify-center mb-4""><TimeUnit>{days} days</TimeUnit><TimeUnit>{hours} hours</TimeUnit><TimeUnit>{minutes} minutes</TimeUnit><TimeUnit>{seconds} seconds</TimeUnit></div>
TimeUnit:
<div class=""inline-block mx-2 text-2xl""><span class=""font-bold"">{children}</span></div>"
Product Rating Stars,"description:
The UI should be a compact, accessible, and responsive product rating stars component, displaying a rating out of 5 stars, with the option to be hovered and clicked. The component should be mobile-first, with a clean and simple design.
components:
- RatingStarsContainer: (standalone): The outer container for the rating stars.
- RatingStar: (standalone): An individual star element within the rating stars container.
html:
<div class=""flex items-center""><RatingStarsContainer/><p class=""ml-2 text-sm"">{rating_text}</p></div>
component html:
RatingStarsContainer:
<div class=""flex""><RatingStar/><RatingStar/><RatingStar/><RatingStar/><RatingStar/></div>
RatingStar:
<span class=""inline-block w-4 h-4 text-yellow-500""><!-- star icon -->&#9733;</span>"
Inline Editing/CRUD,"description:
The UI should be a table with rows representing items that can be edited in-place. Each row should have a column for editing, with a text input and save/cancel buttons. When not editing, the row should display the item's value. The table should be responsive, with columns that adapt to smaller screens.
components:
- EditableTableRow: A table row with an editing state. Takes children.
- EditableTableCell: A table cell that contains an editable input. Takes children.
- EditButton: A button to enter edit mode. Standalone.
- CancelButton: A button to cancel editing. Standalone.
- SaveButton: A button to save changes. Standalone.
html:
<table class=""w-full overflow-hidden""><thead><tr><th class=""px-4 py-2"">Item</th><th class=""px-4 py-2"">Actions</th></tr></thead><tbody><EditableTableRow><EditableTableCell><!-- item value or input field goes here --></EditableTableCell><EditableTableCell><EditButton/><CancelButton/><SaveButton/></EditableTableCell></EditableTableRow><!-- more rows --></tbody></table>
component html:
EditableTableRow:
<tr class=""border-b border-gray-200 hover:bg-gray-100"" :class=""{ 'bg-orange-100': isEditing }"">{children}</tr>
EditableTableCell:
<td class=""px-4 py-2"" :class=""{ 'bg-orange-100': isEditing }"">{children}</td>
EditButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Edit</button>
CancelButton:
<button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Cancel</button>
SaveButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Save</button>"
Call-to-action button with animation effects,"description:
The UI should be a responsive call-to-action (CTA) button with animation effects that grab the user's attention. The button should be prominent on both light and dark backgrounds, have sufficient contrast for accessibility, and be large enough for mobile devices.
components:
- AnimatedCTAButton: (standalone): A button component with animation effects.
html:
<div class=""flex justify-center""><AnimatedCTAButton/></div>
component html:
AnimatedCTAButton:
<button class=""inline-block transition duration-300 ease-in-out hover:scale-110 hover:text-white hover:bg-orange-500 bg-orange-400 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Graphic element showing the progress of a task or process,"description:
A responsive, horizontal progress bar that displays the progress of a task or process. The bar should be divided into two sections: a completed section (filled with a color, e.g., blue) and a remaining section (filled with a lighter color, e.g., gray). The progress bar should be accessible and responsive, adapting to different screen sizes and devices.
components:
- ProgressBar: (standalone)
html:
<div class=""max-w-md mx-auto p-4""><ProgressBar/></div>
component html:
ProgressBar:
<div class=""h-2 bg-gray-200 rounded-full""><div class=""bg-blue-500 h-2 rounded-full"" style=""width: {progress_percent}%;""}></div><span class=""sr-only"">{progress_percent}% complete</span></div>"
"A testimonial component with a rounded profile picture, name, and quote","description:
The testimonial component should have a clean and modern design, with a rounded profile picture, a clear display of the person's name, and a quote that stands out. The component should be easily readable and visually appealing on various screen sizes.
components:
- ProfilePicture: (Standalone): A rounded profile picture with a white border and a shadow effect.
- TestimonialQuote: (Standalone): A quote from the person, displayed in a larger font size with a subtle gradient effect.
- PersonName: (Standalone): The name of the person, displayed in a smaller font size below the profile picture.
- Testimonial: (Takes Children): The top-level component that contains the profile picture, person's name, and quote.
html:
<Testimonial><ProfilePicture/><PersonName/><TestimonialQuote/></Testimonial>
component html:
ProfilePicture:
<img src={profile_picture_url} alt={person_name} class=""rounded-full w-24 h-24 border-4 border-white shadow-md""/>
TestimonialQuote:
<p class=""text-2xl font-bold"">{testimonial_quote}</p>
PersonName:
<p class=""text-lg"">{person_name}</p>
Testimonial:
<div class=""flex flex-col items-center p-4 md:p-8 lg:p-12"">{children}</div>"
Tooltip display,"description:
The UI should display a tooltip when the user hovers over an element. The tooltip should be a small box with a white background and black text, positioned above the element.
components:
- TooltipTrigger: Standalone component, represents the element that triggers the tooltip when hovered.
- TooltipContent: Takes children, represents the content of the tooltip.
html:
<div class=""relative""><TooltipTrigger/><TooltipContent/></div>
component html:
TooltipTrigger:
<span class=""cursor-help"">{trigger_text}</span>
TooltipContent:
<div class=""absolute bg-white p-2 rounded shadow-md whitespace-nowrap"">{children}</div>"
JavaScript code,"description:
- Since you mentioned JavaScript code, this suggests an interface that might highlight or present code snippets, ideally suited for tutorials, documentation, or code sharing platforms. This interface should feature a clean layout where code is easily readable and distinguishable from regular text.
components:
- CodeBlock: Standalone. This component displays a block of code with syntax highlighting styled for readability.
- PageContainer: Takes children. This component serves as the overall container that encapsulates other components, ensuring proper layout and spacing.
- Header: Standalone. Provides a labeled header to identify the type of code or the section's purpose.
html:
<div class=""PageContainer""><div class=""Header""></div><pre class=""CodeBlock""></pre></div>
component html:
CodeBlock:
<pre class=""bg-gray-800 text-white p-4 rounded-md overflow-auto text-sm md:text-base"">{code_snippet} </pre>
PageContainer:
<div class=""max-w-4xl mx-auto py-8 px-4 md:px-6"">{children} </div>
Header:
<h1 class=""text-xl font-semibold text-gray-900 my-4"">{header_text} </h1>"
Numbered lists,"description:
The UI should display a numbered list with items that can be wrapped in a container.
components:
- OrderedListItem: (standalone) - a single item in the numbered list
- OrderedList: (takes children) - the container for the ordered list
html:
<div class=""max-w-md mx-auto p-4""><OrderedList><OrderedListItem/><OrderedListItem/><!-- Add more list items here --></OrderedList></div>
component html:
OrderedListItem:
<li class=""mb-2"">{list_item_text}</li>
OrderedList:
<ol class=""list-decimal"">{children}</ol>"
A testimonial quote component with a background image and white text,"description:
The testimonial quote component should have a background image that fills the entire component, with a subtle gradient effect to add depth. The quote text should be in a large, bold font with a white color to provide high contrast with the background image. The component should be responsive, with the background image scaling to fit the component's width and height. On smaller screens, the component should take up the full width of the screen, while on larger screens, it should maintain a maximum width to prevent the text from becoming too spread out.
components:
- TestimonialQuote: (Takes Children): This component displays a quote from a satisfied customer. It has a background image and white text.
html:
<div class=""flex justify-center""><TestimonialQuote><!-- quote text will be rendered here --></TestimonialQuote></div>
component html:
TestimonialQuote:
<div class=""bg-cover bg-center h-full w-full lg:max-w-md xl:max-w-lg"" style=""`background-image: url({backgroundImage});""}><blockquote class=""py-8 px-4 lg:px-8 xl:px-12 text-white text-lg lg:text-xl xl:text-2xl font-bold"">{children} </blockquote></div>"
Skill meter with percentage counters,"description:
The UI should consist of a horizontal meter that fills up as the percentage increases. The meter should be divided into sections, each representing a different level of proficiency (e.g., beginner, intermediate, advanced). The current percentage should be displayed next to the meter.
components:
- SkillMeter: A standalone component that represents the meter.
- MeterSection: A component that represents a section of the meter, takes children (e.g., a label for the section).
- PercentageCounter: A standalone component that displays the current percentage.
html:
<div class=""flex flex-wrap justify-center""><SkillMeter/><PercentageCounter/></div>
component html:
SkillMeter:
<div class=""w-full bg-gray-200 h-4 rounded""><div class=""bg-blue-500 h-4 rounded"" style=""width: {progressPercentage}%;""}></div><div class=""flex justify-between mx-2""><!-- meter sections --><MeterSection>Beginner</MeterSection><MeterSection>Intermediate</MeterSection><MeterSection>Advanced</MeterSection></div></div>
MeterSection:
<div class=""text-xs"">{children}</div>
PercentageCounter:
<p class=""text-lg"">{progressPercentage}%</p>"
Search bar,"description:
The UI should be a simple search bar with a text input field and a submit button. The search bar should be responsive and adapt to different screen sizes.
components:
- SearchBar: standalone component that contains the search input field and submit button.
- SearchInput: standalone component that is the text input field.
- SubmitButton: standalone component that is the submit button.
html:
<div class=""max-w-md mx-auto p-4""><SearchBar/></div>
component html:
SearchBar:
<div class=""flex items-center mb-4""><SearchInput/><SubmitButton/></div>
SearchInput:
<input type=""search"" class=""w-full rounded-l p-2 pl-10 text-sm"" placeholder=""Search..."">
SubmitButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-r"">Search</button>"
"Create a logo with a neon green ""G"" icon on a black background","description:
The logo should be a circle with a black background and a neon green ""G"" icon inside. The circle should be responsive and scalable, with a consistent aspect ratio. On smaller screens, the logo should be smaller, while on larger screens, it should be larger.
components:
- LogoIcon: (Standalone): A simple icon component that contains the ""G"" icon. This component will be used inside the LogoCircle component.
- LogoCircle: (Takes Children): A circular component that contains the LogoIcon component. It will provide the black background and circular shape.
html:
<LogoCircle><LogoIcon/></LogoCircle>
component html:
LogoIcon:
<span class=""text-neon-green text-3xl"">{g_icon}</span>
LogoCircle:
<div class=""bg-black rounded-full h-16 w-16 md:h-24 md:w-24 lg:h-32 lg:w-32 xl:h-40 xl:w-40 flex justify-center items-center"">{children}</div>"
"A ""Apply Now"" button with a green background and white text","description:
The ""Apply Now"" button should be a prominent call-to-action that stands out on the page. It should have a green background to convey positivity and urgency, with white text to provide good contrast. The button should be rounded to give it a friendly and approachable feel. On smaller screens, the button should be full-width to make it easy to tap.
components:
- ApplyButton: (Standalone): A prominent call-to-action button with a green background and white text.
html:
<button class=""apply-button"">{children}</button>
component html:
ApplyButton:
<button class=""bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"">Apply Now</button>"
Editable Tables,"description:
A table that can be edited, with input fields for each cell, and a ""Save"" button at the bottom.
components:
- EditableTableCell: (takes children): a single table cell with an input field
- EditableTableRow: (takes children): a table row with editable cells
- EditableTable: (takes children): the entire editable table with multiple rows
html:
<div class=""max-w-md mx-auto p-4""><EditableTable><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><EditableTableRow><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell><EditableTableCell><input type=""text""/></EditableTableCell></EditableTableRow><!-- ... more rows ... --></EditableTable><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Save</button></div>
component html:
EditableTableCell:
<td class=""border p-2"">{children}</td>
EditableTableRow:
<tr class=""bg-white"">{children}</tr>
EditableTable:
<table class=""table-auto border-collapse w-full""><tbody>{children}</tbody></table>"
GloballyUniqueIdentifiableElements,"description:
The UI should display a list of globally unique identifiable elements, which can be items, products, or any other type of elements that require a unique identifier. The list should be responsive, mobile-first, and accessible, with proper semantic HTML and ARIA attributes for screen readers.
components:
- UniqueIdCard: (standalone) - a single card displaying a unique identifiable element
- UniqueIdList: (takes children) - a list of `UniqueIdCard` components
- UniqueIdHeader: (standalone) - a header component displaying a title and optional description
html:
<div class=""max-w-md mx-auto p-4""><UniqueIdHeader/><UniqueIdList><UniqueIdCard/><UniqueIdCard/><!-- Add more UniqueIdCard components here --></UniqueIdList></div>
component html:
UniqueIdCard:
<li class=""mb-4""><div class=""bg-white p-4 rounded shadow-md""><h2 class=""text-lg"">{element_name}</h2><p class=""text-gray-600"">{element_description}</p><p class=""text-sm"">ID: {element_id}</p></div></li>
UniqueIdList:
<ul class=""list-none mb-0"">{children}</ul>
UniqueIdHeader:
<header class=""mb-4""><h1 class=""text-2xl"">{header_title}</h1><p class=""text-gray-600"">{header_description}</p></header>"
Blog Post Comment Count,"description:
The UI should display the number of comments on a blog post, with a responsive design that adapts to different screen sizes. The comment count should be displayed in a subtle, yet readable font size, with sufficient padding to make it easily readable on both light and dark backgrounds.
components:
- CommentCount: A standalone component that displays the number of comments on a blog post.
html:
<div class=""flex justify-end mb-2""><CommentCount/></div>
component html:
CommentCount:
<span class=""text-sm text-gray-600"">{comment_count} comments</span>"
Poll/Voting Systems,"description:
A poll/voting system UI should display a question, several options to choose from, and the current voting results. It should also allow users to cast their votes.
components:
- PollQuestion: standalone, displays the question being asked
- PollOption: takes children, represents a single option with a vote count
- VoteButton: standalone, allows users to cast their vote
- VoteResults: takes children, displays the current voting results
html:
<div class=""flex flex-col gap-4""><PollQuestion/><div class=""flex flex-col gap-2""><PollOption>Option 1</PollOption><PollOption>Option 2</PollOption><PollOption>Option 3</PollOption></div><VoteButton/><VoteResults><p>Results:</p><ul><li>Option 1: {option1_votes} votes</li><li>Option 2: {option2_votes} votes</li><li>Option 3: {option3_votes} votes</li></ul></VoteResults></div>
component html:
PollQuestion:
<h2 class=""text-2xl"">{question_text}</h2>
PollOption:
<div class=""flex items-center gap-2""><input type=""radio"" name=""poll_option"" id={`option_{option_id}`}/><label for={`option_{option_id}`}>{children}</label><span class=""text-gray-500"">{vote_count} votes</span></div>
VoteButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Cast Your Vote</button>
VoteResults:
<div class=""bg-gray-100 p-4 rounded"">{children}</div>"
"Background image or pattern that fills the entire screen, with a subtle texture to give it some depth","description:
The UI should be a full-screen background component that fills the entire screen with a subtle texture to give it some depth. The background should be responsive and adapt to different screen sizes.
components:
- FullScreenBackground: (Standalone): A full-screen background component that fills the entire screen with a subtle texture.
html:
<FullScreenBackground/>
component html:
FullScreenBackground:
<div class=""h-screen w-screen bg-cover bg-no-repeat bg-center"" style=""backgroundImage: url({background_image_url});""}><!-- subtle texture or pattern here --><div class=""absolute inset-0 bg-gray-100 opacity-10""></div></div>"
Password strength meter,"description:
The password strength meter UI should consist of a input field for the user to enter their password, a bar that fills up to indicate the strength of the password, and a label to indicate the strength level (e.g. ""Weak"", ""Medium"", ""Strong"").
components:
- PasswordInput: (standalone): A input field for the user to enter their password.
- StrengthMeter: (takes children): A bar that fills up to indicate the strength of the password.
- StrengthLabel: (standalone): A label to indicate the strength level.
html:
<div class=""flex flex-col gap-4""><PasswordInput/><StrengthMeter><div class=""bg-gray-200 h-4 w-full rounded""></div></StrengthMeter><StrengthLabel/></div>
component html:
PasswordInput:
<input type=""password"" class=""p-2 pl-10 text-sm text-gray-700""/>
StrengthMeter:
<div class=""h-4 w-full bg-gray-200 rounded""><div class=""bg-{color} h-4 w-{width}"" style=""width: {width}%;""></div>{children}</div>
StrengthLabel:
<p class=""text-sm text-gray-600"">{strength_label}</p>"
Game Tiles and Grids,"description:
The UI should display a grid of game tiles. Each tile should have a unique background color, a number indicating the tile's value, and an optional ""locked"" indicator.
components:
- GameGrid: A standalone component that displays a grid of game tiles.
- GameTile: A component that takes children (the tile's value and optional ""locked"" indicator) and displays a single game tile.
html:
<div class=""grid grid-cols-4 gap-4""><GameGrid/></div>
component html:
GameGrid:
<div class=""flex flex-wrap justify-center"">{/* an 4x4 grid of GameTile components */ } <GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/><GameTile/></div>
GameTile:
<div class={`h-16 w-16 bg-{tile_color} rounded-md flex justify-center items-center`}><p class=""text-lg"">{tile_value}</p>{locked && <span class=""text-xs"">(Locked)</span>} {children}</div>"
Hero Image: High-resolution background image,"description:
The UI should be a full-bleed hero image that takes up the entire screen, with the image centered and scaled to fit the screen.
components:
- HeroImageContainer: Standalone component that wraps the hero image.
html:
<div class=""h-screen w-full""><HeroImageContainer/></div>
component html:
HeroImageContainer:
<div class=""h-full w-full bg-cover bg-center"" style=""backgroundImage: url({hero_image_url});""}><!-- Image will be displayed here --></div>"
Checkout process steps,"description:
The UI should be a sequential list of steps to complete the checkout process. Each step should have a title, a brief description, and a visual indicator to show progression.
components:
- CheckoutStep: (standalone) - represents a single step in the checkout process
- CheckoutSteps: (takes children) - contains a list of `CheckoutStep` components
html:
<nav aria-label=""Checkout process""><CheckoutSteps><CheckoutStep/><CheckoutStep/><CheckoutStep/></CheckoutSteps></nav>
component html:
CheckoutStep:
<div class=""flex items-center mb-4""><div class=""w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center mr-4""><span>{step_number}</span></div><div class=""flex-1""><h5 class=""uppercase text-lg"">{step_title}</h5><p class=""text-sm"">{step_description}</p></div></div>
CheckoutSteps:
<div class=""flex flex-wrap -mx-4"">{children}</div>"
Comment Input: Input field for writing a new comment,"description:
A simple input field with a placeholder text ""Write a comment..."" and a submit button.
components:
- CommentInput: (standalone) - The input field component.
- CommentSubmit: (standalone) - The submit button component.
html:
<div class=""flex justify-center mb-4""><CommentInput/><CommentSubmit/></div>
component html:
CommentInput:
<input type=""text"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Write a comment...""/>
CommentSubmit:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Post</button>"
Timers,"description:
A simple timer UI that displays the current time and allows the user to start, pause, and reset the timer.
components:
- TimerDisplay: Standalone component that displays the current time.
- TimerControls: Standalone component that contains the start, pause, and reset buttons.
- TimerContainer: Component that takes children and wraps the timer display and controls.
html:
<TimerContainer><TimerDisplay/><TimerControls/></TimerContainer>
component html:
TimerDisplay:
<p class=""text-3xl font-bold"">{currentTime}</p>
TimerControls:
<div class=""flex justify-between p-2""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Start</button><button class=""bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded"">Pause</button><button class=""bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"">Reset</button></div>
TimerContainer:
<div class=""flex justify-center p-4"">{children}</div>"
A dark grey background header that spans the entire width of the screen,"description:
The UI should have a dark grey background header that spans the entire width of the screen, with a clean and simple design that provides a nice contrast to the content that will be placed below it. The header should be fully responsive, taking into account different screen sizes, and should be accessible on mobile devices.
components:
- HeaderView: (Standalone): This component will render a dark grey background header that spans the entire width of the screen. The header will have a subtle shadow to give it some depth, and will take up the full width of the screen on all screen sizes.
html:
<div class=""h-screen w-full bg-darkGrey shadow-md""><HeaderView/></div>
component html:
HeaderView:
<header class=""h-20 w-full bg-darkGrey shadow-md flex justify-center items-center""><!--content will go here--></header>"
Blog Post Author Image,"description:
The UI should display an author's image, name, and bio in a concise and visually appealing way.
components:
- AuthorAvatar: standalone, displays the author's image
- AuthorInfo: takes children, displays the author's name and bio
html:
<div class=""flex items-center mb-4""><AuthorAvatar/><AuthorInfo><h5 class=""text-lg font-bold"">{authorName}</h5><p class=""text-gray-600"">{authorBio}</p></AuthorInfo></div>
component html:
AuthorAvatar:
<img src={authorImageUrl} alt={authorName} class=""w-12 h-12 rounded-full""/>
AuthorInfo:
<div class=""ml-4"">{children}</div>"
An image carousel component with a simple navigation (prev/next arrows) and a subtle animation effect,"description:
The UI should display a rotating carousel of images with a simple navigation system consisting of previous and next arrows. The carousel should have a subtle animation effect when transitioning between images. The component should be responsive and adapt to different screen sizes.
components:
- ImageCarousel: (Takes Children): The main carousel component containing the image slides and navigation.
- CarouselSlide: (Takes Children): An individual slide in the carousel, containing an image and optional caption.
- CarouselNavigation: (Standalone): The navigation component consisting of previous and next arrows.
html:
<ImageCarousel><CarouselSlide><img src={image1_src} alt=""Image 1""/><p>{image1_caption}</p></CarouselSlide><CarouselSlide><img src={image2_src} alt=""Image 2""/><p>{image2_caption}</p></CarouselSlide><!-- Add more CarouselSlide components as needed --><CarouselNavigation/></ImageCarousel>
component html:
ImageCarousel:
<div class=""flex flex-col lg:flex-row justify-center lg:justify-between py-4""><div class=""w-full lg:w-2/3 xl:w-1/2 p-4 lg:p-0"">{children}</div><CarouselNavigation/></div>
CarouselSlide:
<div class=""flex flex-col justify-center p-4 lg:p-6"">{children}</div>
CarouselNavigation:
<div class=""flex justify-between py-2 lg:py-4""><button class=""text-gray-500 hover:text-gray-800 transition duration-300""><svg><!-- left arrow --></svg></button><button class=""text-gray-500 hover:text-gray-800 transition duration-300""><svg><!-- right arrow --></svg></button></div>"
Live streaming tools with real-time chat,"description:
The UI should be a responsive, mobile-first layout that showcases a live streaming video player with a real-time chat interface below it. The video player should take up most of the screen, with the chat interface being a resizable panel that can be minimized or maximized as needed.
components:
- LiveStreamPlayer: standalone, displays the live streaming video
- RealTimeChat: standalone, displays the real-time chat interface
- ChatMessage: takes children, displays a single chat message
- ChatInput: standalone, allows users to input and send chat messages
html:
<div class=""flex h-screen overflow-hidden""><LiveStreamPlayer/><div class=""flex flex-col h-full overflow-hidden""><RealTimeChat/><ChatInput/></div></div>
component html:
LiveStreamPlayer:
<div class=""flex-grow w-full h-full overflow-hidden""><video src={videoSrc} class=""w-full h-full object-cover""/></div>
RealTimeChat:
<div class=""flex flex-col overflow-y-auto p-4"">{messages.map((message) =>( <ChatMessage>{message.text}</ChatMessage>))}</div>
ChatMessage:
<div class=""flex items-center py-2""><span class=""text-sm"">{children}</span></div>
ChatInput:
<form class=""flex p-4""><input type=""text"" class=""w-full px-4 py-2"" placeholder=""Type a message...""/><button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded"">Send</button></form>"
Quote lightboxes,"description:
The UI should display a quote with a lightbox effect. When the user clicks on the quote, a larger version of the quote appears in a lightbox overlay, with a close button to exit the lightbox.
components:
- QuoteDisplay: a standalone component that displays the quote
- Lightbox: a component that takes children (the quote text) and displays it in a lightbox overlay
html:
<div class=""container mx-auto p-4""><QuoteDisplay/></div>
component html:
QuoteDisplay:
<blockquote class=""quote mb-4 p-4 bg-yellow-100 rounded""><p class=""text-lg"">{quoteText}</p><cite class=""text-gray-600"">{author}</cite><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"" aria-label=""Open quote in lightbox"">Read more</button></blockquote>
Lightbox:
<div class=""fixed top-0 left-0 w-full h-screen bg-black bg-opacity-50 flex items-center justify-center"" aria-modal=""true"" role=""dialog""><div class=""bg-white p-4 rounded"">{children} <button class=""absolute top-0 right-0 text-gray-600 hover:text-gray-900"" aria-label=""Close lightbox"">&times;</button></div></div>"
"A navigation menu with a list of sports categories (e.g. NFL, NBA, MLB, etc.) with white text on a dark background","description:
The navigation menu should have a clean and modern design with a dark background and white text. The list of sports categories should be easy to read and navigate. The UI should be responsive and adapt to different screen sizes.
components:
- SportsNavbar: (Takes Children): A navigation bar that contains a list of sports categories. On small screens, it should be a vertical list. On medium screens and above, it should be a horizontal list.
- SportsCategory: (Standalone): A single sports category item in the navigation menu. It should have a hover effect and be accessible.
html:
<div class=""h-screen bg-dark.bg-gradient-to-r.from-gray-900.to-gray-800""><SportsNavbar><!-- Sports categories will be rendered here --></SportsNavbar></div>
component html:
SportsNavbar:
<nav class=""flex justify-center md:flex-row md:justify-start""><ul class=""flex flex-col md:flex-row"">{children}</ul></nav>
SportsCategory:
<li class=""py-2 md:px-4 hover:bg-gray-700 hover:text-white transition duration-300""><a href=""#"" class=""text-white"">{sportsCategoryName}</a></li>"
Certificates and Badges,"description:
The UI should display a list of certificates and badges earned by a person, with each item featuring an image, title, and issuing organization. The list should be responsive and adapt to different screen sizes.
components:
- CertificateBadge: A standalone component that displays a single certificate or badge.
- CertificatesList: A component that displays a list of certificates and badges, and takes children (i.e., multiple `CertificateBadge` components).
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Certificates and Badges</h2><CertificatesList><CertificateBadge/><CertificateBadge/><!-- Add more CertificateBadge components as needed --></CertificatesList></div>
component html:
CertificateBadge:
<div class=""flex items-center mb-4""><img src={badge_image_url} alt={badge_title} class=""w-16 h-16 mr-4""/><div><h3 class=""text-lg font-bold"">{badge_title}</h3><p>Issued by {issuing_organization}</p></div></div>
CertificatesList:
<ul class=""list-none mb-0"">{children}</ul>"
"Stats component, displaying various gaming-related statistics (e.g. ""100,000+ members"", ""500+ games reviewed"", etc.)","description:
The UI should display a collection of statistics in a clean and organized manner. It should be visually appealing, easy to navigate, and responsive across different screen sizes. The stats component should have a consistent color scheme, with highlight colors to draw attention to specific statistics. The layout should scale well on mobile devices, with a mobile-first approach.
components:
- StatsContainer: (Takes Children): This component wraps all the statistics and provides a consistent layout for the stats.
- StatItem: (Takes Children): Represents a single statistic, consisting of a label, value, and optional icon.
html:
<div class=""max-w-md mx-auto p-4""><StatsContainer><StatItem><span>100,000+</span>members</StatItem><StatItem><i class=""fas fa-gamepad""></i><span>500+</span>games reviewed</StatItem><StatItem><span>10,000+</span>hours played</StatItem><!-- Add more StatItem components as needed --></StatsContainer></div>
component html:
StatsContainer:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>
StatItem:
<div class=""flex items-center mb-2"">{children} <span class=""ml-2 text-lg font-bold"">{value}</span></div>"
"Product grid component that displays a list of products with images, prices, and ratings","description:
A clean and modern product grid component that showcases a list of products in a responsive and accessible manner. The UI should be visually appealing, with clear typography, ample whitespace, and a consistent color scheme. On smaller screens, the grid should adapt to a single-column layout, making it easy to navigate on mobile devices. On larger screens, the grid should expand to a multi-column layout, showcasing more products at once.
components:
- ProductGrid: (Takes Children): The top-level component that contains the product list.
- ProductCard: (Standalone): A single product item that displays the product image, price, and rating.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><ProductGrid><!-- Product cards will be rendered here --></ProductGrid></div>
component html:
ProductGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"">{children}</div>
ProductCard:
<div class=""bg-white shadow-md rounded overflow-hidden""><img src={product_image} alt={product_name} class=""w-full h-48 object-cover""/><div class=""p-4""><h2 class=""text-lg font-bold"">{product_name}</h2><p class=""text-gray-600"">{product_price}</p><div class=""flex items-center""><span class=""text-yellow-400"">{product_rating}/5</span><span class=""text-gray-600"">({product_reviews} reviews)</span></div></div></div>"
Secure payment information input,"description:
The UI should be a secure payment information input form, responsive and accessible, with clear labels and placeholders, and enough space for the user to input their payment details.
components:
- CardNumberInput: (standalone): a text input for the card number
- ExpirationDateInput: (standalone): a text input for the expiration date
- CvcInput: (standalone): a text input for the CVC code
- PaymentForm: (takes children): a container for the payment input fields
html:
<form class=""max-w-md mx-auto p-4 mt-4 mb-4 bg-white rounded shadow-md""><h2 class=""text-xl font-bold mb-4"">Secure Payment Information</h2><PaymentForm><CardNumberInput/><ExpirationDateInput/><CvcInput/></PaymentForm><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Submit</button></form>
component html:
CardNumberInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cardNumber"" placeholder=""Card Number"" required/>
ExpirationDateInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""expirationDate"" placeholder=""MM/YY"" required/>
CvcInput:
<input class=""w-full p-2 pl-10 text-sm text-gray-700"" type=""text"" id=""cvc"" placeholder=""CVC"" required/>
PaymentForm:
<div class=""flex flex-wrap -mx-3 mb-6"">{children}</div>"
"Create a list view component for displaying multiple events, including images, titles, and short descriptions","description:
The list view should have a clean and minimalistic design, with a focus on showcasing the events with prominent images, clear titles, and concise descriptions. The layout should be responsive, adapting to different screen sizes to ensure an optimal user experience. On larger screens, the list items should be displayed in a grid layout, while on smaller screens, they should stack vertically for easier scrolling.
components:
- EventList: (Takes Children): The top-level component that wraps the list of event items.
html:
<div class=""container mx-auto p-4 md:p-6 lg:p-8""><EventList><!-- event list items will be rendered here --></EventList></div>
component html:
EventList:
<ul class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 lg:gap-8"">{children}</ul>"
Pull Quotes/Testimonials,"description:
The UI should display a section of testimonials or pull quotes, featuring quotes from satisfied customers or users. The section should be responsive, with quotes stacking vertically on smaller screens and displaying in a grid on larger screens. Each quote should include a quote text, an author name, and an optional title or company.
components:
- QuoteCard: Standalone component that represents a single quote, containing a quote text, an author name, and an optional title or company.
- TestimonialsSection: Component that contains a heading and a wrapper for a list of Quote Cards, takes children.
html:
<section class=""max-w-md mx-auto py-12""><h2 class=""text-3xl font-bold mb-4"">What Our Customers Say</h2><TestimonialsSection><QuoteCard/><QuoteCard/><QuoteCard/></TestimonialsSection></section>
component html:
QuoteCard:
<div class=""flex flex-col mb-4 p-4 shadow-md rounded-md""><blockquote class=""text-lg"">{quote_text}</blockquote><p class=""text-sm text-gray-500"">{author_name}, {author_title}</p></div>
TestimonialsSection:
<div class=""grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"">{children}</div>"
E-commerce product filter,"description:
The UI should be a responsive, mobile-first filter component that allows users to filter products by category, price range, and rating. It should be accessible and SEO-friendly.
components:
- FilterCategory: (standalone): A dropdown list of categories to filter by.
- FilterPriceRange: (standalone): A range slider to filter by price.
- FilterRating: (standalone): A series of radio buttons to filter by rating.
- FilterButton: (standalone): A button to apply the filters.
- FilterClearButton: (standalone): A button to clear all filters.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-2"">Filter Products</h2><div class=""flex flex-wrap -mx-2 mb-4""><FilterCategory/><FilterPriceRange/><FilterRating/></div><div class=""flex justify-end mb-4""><FilterButton/><FilterClearButton/></div></div>
component html:
FilterCategory:
<div class=""w-full md:w-1/3 px-2 mb-4""><label for=""category"" class=""block text-sm font-bold mb-2"">Category</label><select id=""category"" class=""block w-full p-2""><option value="""">Select a category</option>{category_options} </select></div>
FilterPriceRange:
<div class=""w-full md:w-1/3 px-2 mb-4""><label for=""price-range"" class=""block text-sm font-bold mb-2"">Price Range</label><input type=""range"" id=""price-range"" min=""{min_price}"" max=""{max_price}"" value=""{initial_price}""/><p>Range: {min_price} - {max_price}</p></div>
FilterRating:
<div class=""w-full md:w-1/3 px-2 mb-4""><label class=""block text-sm font-bold mb-2"">Rating</label><div class=""flex justify-between mb-2""><input type=""radio"" id=""rating-1"" name=""rating"" value=""1""/><label for=""rating-1"">1 star</label></div><div class=""flex justify-between mb-2""><input type=""radio"" id=""rating-2"" name=""rating"" value=""2""/><label for=""rating-2"">2 stars</label></div><!-- repeat for 3-5 stars --></div>
FilterButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Filters</button>
FilterClearButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"">Clear Filters</button>"
Spinner/Loading Animations,"description:
The spinner/loading animation UI should be a circular loading indicator that fills up as the loading progress increases. It should be responsive, mobile-first, and accessible. The animation should be smooth and continuous.
components:
- SpinnerComponent: A standalone component that displays the circular loading indicator.
html:
<div class=""flex justify-center""><SpinnerComponent/></div>
component html:
SpinnerComponent:
<div class=""w-12 h-12 border-4 border-gray-200 border-solid rounded-full animate-spin""><div class=""w-full h-full border-4 border-gray-200 border-solid rounded-full"">{progress_bar}</div></div>"
Testimonial Quote Image,"description:
The UI should display a quote with an image of the person who said it, along with their name and title.
components:
- TestimonialCard: A standalone component that displays a quote, image, name, and title.
- QuoteText: A standalone component that displays the quote text.
- ImageAvatar: A standalone component that displays the image of the person who said the quote.
- PersonInfo: A standalone component that displays the name and title of the person who said the quote.
html:
<div class=""mx-auto max-w-md p-4""><TestimonialCard/></div>
component html:
TestimonialCard:
<div class=""flex flex-col md:flex-row items-center mb-4""><ImageAvatar/><div class=""md:ml-4""><QuoteText/><PersonInfo/></div></div>
QuoteText:
<blockquote class=""text-lg font-bold mb-2"">{quote_text}</blockquote>
ImageAvatar:
<img src={image_url} alt={person_name} class=""w-24 h-24 rounded-full mb-4 md:mb-0""/>
PersonInfo:
<p class=""text-lg"">{person_name}</p><p class=""text-sm"">{person_title}</p>"
Word break opportunity,"description:
The UI should display a paragraph of text that contains a long unbroken string which could potentially disrupt the layout on small screens. This string will have a visible break opportunity using CSS so it can break onto the next line if needed, ensuring the layout remains intact on devices with narrow screens.
components:
- TextContainer: (Standalone): A container that holds the text content.
html:
<div><TextContainer/></div>
component html:
TextContainer:
<!-- Text container that includes a long unbroken string with a word break opportunity --><p class=""overflow-wrap break-word"">This is a verylongunbrokenstringthatmightcausedisplayissuesonmobiledevices but thanks to CSS, it can appropriately break. </p>"
Hero Overlay Pattern,"description:
The UI should be a hero section with a full-width background image, overlaid with text content. The background image should be responsive and mobile-friendly. The text content should be centered and overlaid on top of the background image.
components:
- HeroComponent: Standalone component that renders the hero section with background image and overlaid text content.
- OverlayTextComponent: Standalone component that renders the text content overlaid on top of the background image.
html:
<div class=""h-screen w-full relative""><HeroComponent/></div>
component html:
HeroComponent:
<div class=""h-screen w-full bg-cover bg-center"" style=""`background-image: url({heroImage});""}><div class=""absolute inset-0 flex justify-center items-center""><OverlayTextComponent/></div></div>
OverlayTextComponent:
<div class=""text-white text-3xl md:text-5xl lg:text-6xl""><h1>{heroTitle}</h1><p>{heroDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{heroButtonText}</button></div>"
Alert/Banner Notifications,"description:
The UI should display a notification banner that appears at the top of the page, with a close button on the right side. The banner should be dismissible and have a colored background to draw attention. The notification text should be clear and readable.
components:
- NotificationBanner: (standalone) - the notification banner component
- CloseButton: (standalone) - the close button component
html:
<header><NotificationBanner/></header>
component html:
NotificationBanner:
<div class=""bg-orange-500 text-white py-2 px-4 rounded""><p>{notification_text}</p><CloseButton/></div>
CloseButton:
<button class=""text-white hover:text-orange-200 transition duration-300 ease-in-out"">&times;</button>"
"Button prompting users to take a specific action, like signing up or purchasing","description:
A prominent call-to-action (CTA) button that stands out on the page, encouraging users to take a specific action. The button should be responsive, mobile-friendly, and accessible.
components:
- ActionButton: a standalone component that renders a single button.
html:
<!-- The main container for the CTA button --><div class=""flex justify-center mb-4""><ActionButton/></div>
component html:
ActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{button_text}</button>"
Featured content section,"description:
The featured content section should be a prominent section that showcases a highlighted content item, such as a blog post, video, or product. It should be responsive, mobile-first, and accessible. The section should have a clear visual hierarchy, with the featured content item being the main focal point.
components:
- FeaturedContentSection: standalone component that contains the featured content item
- FeaturedContentItem: standalone component that represents the highlighted content item
- ContentMeta: standalone component that displays metadata about the featured content item, such as the date published or author
- CallToAction: standalone component that provides a clear call to action, such as ""Read More"" or ""Learn More""
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><FeaturedContentSection/></section>
component html:
FeaturedContentSection:
<div class=""bg-white rounded shadow-md p-4 md:p-6 lg:p-8""><FeaturedContentItem/><ContentMeta/><CallToAction/></div>
FeaturedContentItem:
<h2 class=""text-2xl md:text-3xl lg:text-4xl"">{title}</h2><img src=""{image_url}"" alt=""{image_alt}"" class=""w-full h-48 md:h-64 lg:h-80 object-cover rounded-t-md""><p class=""text-lg md:text-xl lg:text-2xl"">{excerpt}</p>
ContentMeta:
<ul class=""list-none mb-4""><li class=""inline-block mr-4"">{published_date}</li><li class=""inline-block mr-4"">{author}</li></ul>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Checkboxes,"description:
The UI consists of a list of checkboxes allowing users to select multiple options. Each checkbox is accompanied by a label to clearly indicate what the option is for. The layout should be clean and straightforward, aligning checkboxes vertically for clarity and ease of use.
components:
- CheckboxItem: (Standalone): Represents a single checkbox with a label.
- CheckboxList: (Takes children): A container component that groups multiple CheckboxItems.
html:
<CheckboxList><CheckboxItem/><CheckboxItem/><CheckboxItem/></CheckboxList>
component html:
CheckboxItem:
<div class=""flex items-center mb-4""><input type=""checkbox"" id=""{checkbox_id}"" class=""checked:bg-blue-600 focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded""/><label for=""{checkbox_id}"" class=""ml-2 text-sm font-medium text-gray-900"">{label_text}</label></div>
CheckboxList:
<div class=""p-4 bg-white shadow rounded-lg"">{children} </div>"
Header Search Suggestion,"description:
A search bar with a dropdown list of suggested search queries, which appears when the user starts typing in the search input field.
components:
- SearchBar: (standalone): A text input field with a search icon.
- SearchSuggestion: (takes children): A list of suggested search queries.
- SearchSuggestionItem: (standalone): A single suggested search query.
html:
<header class=""w-full flex justify-center""><SearchBar/><SearchSuggestion><SearchSuggestionItem/><!-- Repeat SearchSuggestionItem for each suggestion --></SearchSuggestion></header>
component html:
SearchBar:
<div class=""relative""><input type=""search"" class=""w-full pl-10 pr-4 py-2 text-sm text-gray-700"" placeholder={search_placeholder}/><span class=""absolute left-3 top-1/2 -translate-y-1/2""><i class=""fas fa-search text-gray-400"" aria-hidden=""true""></i></span></div>
SearchSuggestion:
<ul class=""absolute bg-white shadow-md w-full"">{children}</ul>
SearchSuggestionItem:
<li class=""px-4 py-2 hover:bg-gray-100""><a href={suggestion_url} class=""block"">{suggestion_text}</a></li>"
Leaderboard display,"description:
The UI should display a leaderboard with a heading, a list of ranks, and a table with user information. The leaderboard should be responsive, with a maximum width on large screens and a scrollable table on mobile devices.
components:
- LeaderboardHeader: A standalone component displaying the leaderboard heading.
- LeaderboardTable: A component taking children, displaying the leaderboard table with user information.
- LeaderboardTableRow: A component taking children, displaying a single row in the leaderboard table.
- UsernameColumn: A standalone component displaying a user's username.
- RankColumn: A standalone component displaying a user's rank.
html:
<div class=""max-w-3xl mx-auto p-4 lg:p-8""><LeaderboardHeader/><LeaderboardTable><LeaderboardTableRow><RankColumn/><UsernameColumn/><td>{points}</td></LeaderboardTableRow><!-- Repeat LeaderboardTableRow component for each user --></LeaderboardTable></div>
component html:
LeaderboardHeader:
<h1 class=""text-3xl font-bold mb-4"">Leaderboard</h1>
LeaderboardTable:
<table class=""w-full""><thead><tr><th class=""px-4 py-2"">Rank</th><th class=""px-4 py-2"">Username</th><th class=""px-4 py-2"">Points</th></tr></thead><tbody>{children} </tbody></table>
LeaderboardTableRow:
<tr class=""border-b border-gray-200"">{children}</tr>
UsernameColumn:
<td class=""px-4 py-2"">{username}</td>
RankColumn:
<td class=""px-4 py-2"">{rank}</td>"
"A hero section with a high-quality background image of a happy pet, overlayed with white text and a call-to-action button","description:
The hero section should be a high-impact, visually appealing section that grabs the user's attention and encourages them to take action. The background image of a happy pet should be high-quality and responsive, spanning the entire width of the screen. The white text overlay should be clear and easy to read, with a clear hierarchy of information. The call-to-action button should stand out and be prominently displayed. The UI should scale seamlessly across different screen sizes, with the background image adapting to fit the screen width.
components:
- HeroBackground: (Standalone): A full-width, responsive background image of a happy pet.
- HeroOverlay: (Takes Children): A container element that overlays the background image, containing the text and call-to-action button.
- HeroText: (Standalone): A heading element that displays the main title and subtitle of the hero section.
- HeroCTA: (Standalone): A call-to-action button that encourages the user to take action.
html:
<section class=""h-screen w-full relative""><HeroBackground/><HeroOverlay><HeroText/><HeroCTA/></HeroOverlay></section>
component html:
HeroBackground:
<div class=""absolute w-full h-full bg-cover bg-center"" style=""backgroundImage: url({background_image_url});""}></div>
HeroOverlay:
<div class=""absolute w-full h-full flex items-center justify-center"">{children}</div>
HeroText:
<h1 class=""text-4xl text-white"">{hero_title}</h1><p class=""text-2xl text-white"">{hero_subtitle}</p>
HeroCTA:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Get Started</button>"
Tags and Categories,"description:
The UI should display a list of tags and categories with a header and a horizontal divider separating the two. Each tag and category should be displayed as a badge with a background color and text.
components:
- TagsAndCategoriesHeader: standalone, displays the header text
- TagsAndCategoriesDivider: standalone, displays a horizontal divider
- TagBadge: takes children, displays a single tag or category as a badge
- TagsAndCategoriesList: takes children, displays a list of tags or categories
html:
<div class=""max-w-md mx-auto p-4""><TagsAndCategoriesHeader/><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- tags --><TagBadge>{tag_name}</TagBadge><TagBadge>{tag_name}</TagBadge><!-- ... --></TagsAndCategoriesList><TagsAndCategoriesDivider/><TagsAndCategoriesList><!-- categories --><TagBadge>{category_name}</TagBadge><TagBadge>{category_name}</TagBadge><!-- ... --></TagsAndCategoriesList></div>
component html:
TagsAndCategoriesHeader:
<h2 class=""text-lg font-bold mb-2"">Tags and Categories</h2>
TagsAndCategoriesDivider:
<hr class=""border-b border-gray-200""/>
TagBadge:
<span class=""bg-gray-200 text-gray-800 px-2 py-1 rounded"">{children}</span>
TagsAndCategoriesList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>"
Callout Box Padding,"description:
The UI should feature a Callout Box that draws attention to specific content. This box should be visually distinct, likely using padding, a border, and perhaps a different background color to stand out from the rest of the content.
components:
- CalloutBox: A standalone component that enhances the visibility of its content through styling.
html:
<div class=""main-content""><CalloutBox/></div>
component html:
CalloutBox:
<div class=""p-4 border-2 border-gray-200 bg-gray-50 rounded-md shadow-sm""><!-- Content inside the Callout Box --><p>{calloutMessage}</p></div>"
Featured Video Thumbnail,"description:
The UI should display a featured video thumbnail with a play button on top of it, and a title below the thumbnail.
components:
- FeaturedVideoThumbnail: (standalone)
- PlayButton: (standalone)
- VideoTitle: (standalone)
html:
<div class=""flex flex-col md:flex-row items-center""><FeaturedVideoThumbnail/><VideoTitle/></div>
component html:
FeaturedVideoThumbnail:
<div class=""relative""><img src={image_src} alt={alt_text} class=""w-full rounded-md object-cover""/><PlayButton/></div>
PlayButton:
<button class=""absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-full p-2""><i class=""fas fa-play""></i></button>
VideoTitle:
<h2 class=""text-lg font-bold"">{video_title}</h2>"
Game Information and Stats,"description:
The UI should display game information and stats in a clean and visually appealing way, with a mobile-first design. It should include the game's title, description, and stats such as playtime, players online, and ratings.
components:
- GameInfo: standalone component to display game title and description
- StatCard: standalone component to display a single stat (e.g. playtime, players online, ratings)
- StatSection: takes children component to display multiple stats
html:
<section class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><GameInfo/><StatSection><StatCard/><StatCard/><StatCard/></StatSection></section>
component html:
GameInfo:
<div class=""mb-4""><h2 class=""text-2xl font-bold"">{game_title}</h2><p class=""text-gray-600"">{game_description}</p></div>
StatCard:
<div class=""flex items-center mb-4""><span class=""text-3xl font-bold"">{stat_value}</span><p class=""text-gray-600"">{stat_label}</p></div>
StatSection:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
"A component that displays a list of user testimonials with quotes, names, and occupations","description:
The UI should display a list of user testimonials in a carousel-like fashion, with each testimonial featuring a quote, name, and occupation. The UI should be responsive, with the testimonials stacked vertically on smaller screens and displayed horizontally on larger screens. The backgrounds of the testimonials should have a subtle gradient effect to add depth, and the text should be easily readable with sufficient contrast. Highlights colors will be used to draw attention to the quotes and names.
components:
- TestimonialList: (Takes Children): A container component that displays a list of testimonial cards.
html:
<div class=""max-w-md mx-auto py-12""><TestimonialList><!-- List of TestimonialCard components will be rendered here --></TestimonialList></div>
component html:
TestimonialList:
<div class=""flex flex-wrap justify-center -mx-4"">{children}</div>"
Email composition window with formatting options,"description:
- The UI should feature a main area for typing out the email, surrounded by formatting tools such as font styles (bold, italics, underline), alignment options (left, center, right), and buttons for attaching files and sending the email. The layout must be clean and intuitive, with formatting tools accessible at the top or side of the composition area.
components:
- Toolbar: Standalone component. This will house all the formatting options like bold, italic, underline, and alignment.
- TextArea: Standalone component. A resizable textarea where the user can type the email.
- ActionButton: Standalone component. This will be used for buttons like 'Send' and 'Attach file'.
html:
<div class=""flex flex-col p-4""><!-- Toolbar with formatting options --><Toolbar/><!-- TextArea for email composition --><TextArea/><!-- Action buttons for sending and attaching files --><div class=""flex justify-end space-x-2 mt-4""><ActionButton/><ActionButton/></div></div>
component html:
Toolbar:
<div class=""flex gap-2 border-b py-2""><button class=""p-2 hover:bg-gray-200"">Bold</button><button class=""p-2 hover:bg-gray-200"">Italic</button><button class=""p-2 hover:bg-gray-200"">Underline</button><button class=""p-2 hover:bg-gray-200"">Left Align</button><button class=""p-2 hover:bg-gray-200"">Center Align</button><button class=""p-2 hover:bg-gray-200"">Right Align</button></div>
TextArea:
<textarea class=""mt-4 p-4 w-full h-64 border resize-none focus:ring-2 focus:ring-blue-300 outline-none"" placeholder=""Compose your email...""></textarea>
ActionButton:
<button class=""bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"">{button_text} </button>"
Blog Post Author Profile,"description:
The UI should display the author's profile information, including their name, profile picture, bio, and social media links. The profile picture should be circular and surrounded by a subtle border. The bio should be displayed in a readable font size, and the social media links should be displayed as icons with a subtle hover effect.
components:
- AuthorProfile: Standalone component that renders the author's profile information.
- UserProfilePicture: Standalone component that renders the author's profile picture.
- AuthorBio: Standalone component that renders the author's bio.
- SocialMediaLinks: Component that renders the author's social media links, takes children.
html:
<div class=""flex flex-wrap justify-center mb-4""><AuthorProfile/></div>
component html:
AuthorProfile:
<div class=""flex flex-wrap justify-center mb-4""><UserProfilePicture/><div class=""ml-4""><h5 class=""text-lg font-bold"">{authorName}</h5><AuthorBio/><SocialMediaLinks><!-- Social media links will be rendered here --></SocialMediaLinks></div></div>
UserProfilePicture:
<img src={profilePictureUrl} alt=""Author Profile Picture"" class=""w-20 h-20 rounded-full border-2 border-gray-200""/>
AuthorBio:
<p class=""text-lg"">{authorBio}</p>
SocialMediaLinks:
<ul class=""flex justify-center mb-4"">{children}</ul>"
"Featured product showcase component with a large background image, product title, and call-to-action","description:
The featured product showcase component should be a visually appealing section that showcases a prominent product, grabbing the user's attention. It should have a large background image that scales responsively, a prominent product title, and a clear call-to-action (CTA) button. The component should have a clean and modern design, with sufficient whitespace to guide the user's attention.
components:
- ProductShowcase: (Takes Children): This is the top-level component that wraps the entire featured product showcase.
- BackgroundImage: (Standalone): This component displays the large background image that scales responsively.
- ProductTitle: (Standalone): This component displays the title of the featured product.
- CallToAction: (Standalone): This component displays a prominent CTA button.
html:
<ProductShowcase><BackgroundImage/><div class=""container mx-auto p-4 lg:p-8""><ProductTitle/><CallToAction/></div></ProductShowcase>
component html:
ProductShowcase:
<div class=""relative h-screen lg:h-auto"">{children}</div>
BackgroundImage:
<img src=""{background_image_url}"" alt=""{product_name} Background"" class=""w-full h-full absolute inset-0 object-cover""/>
ProductTitle:
<h1 class=""text-3xl lg:text-5xl font-bold"">{product_title}</h1>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
"Sidebar component with a search bar, course categories, and popular courses list","description:
The UI should have a sidebar that is fixed to the left side of the screen. The sidebar should have a prominent search bar at the top, followed by a section for course categories and a section for popular courses. The categories and popular courses sections should be scrollable if they exceed the height of the viewport. On smaller screens, the sidebar should be collapsible to save screen real estate.
components:
- Sidebar: (Takes Children): The main sidebar component that contains the search bar, categories, and popular courses.
- SearchBar: (Standalone): A search bar component that is part of the sidebar.
- CourseCategories: (Takes Children): A component that displays a list of course categories.
- PopularCourses: (Takes Children): A component that displays a list of popular courses.
html:
<div class=""fixed h-screen w-64 md:w-80 lg:w-96 xl:w-128 bg-gray-100 shadow-md p-4""><Sidebar><SearchBar/><CourseCategories>{categories}</CourseCategories><PopularCourses>{popularCourses}</PopularCourses></Sidebar></div>
component html:
Sidebar:
<div class=""h-full flex flex-col justify-between"">{children}</div>
SearchBar:
<div class=""flex items-center bg-white border border-gray-300 rounded-md p-2""><input type=""search"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search courses""/><button class=""ml-2 text-gray-600 hover:text-gray-900""><i class=""fas fa-search""></i></button></div>
CourseCategories:
<ul class=""px-4 py-2"">{children}</ul>
PopularCourses:
<ul class=""px-4 py-2"">{children}</ul>"
Simple horizontal line separator,"description:
A simple horizontal line separator that separates content sections. The line should be thin, with a subtle shadow to give it some depth. On smaller screens, the line should be even thinner to save space.
components:
- HorizontalSeparator: (Standalone): A thin horizontal line that separates content sections.
html:
<div class=""flex flex-col max-w-md mx-auto p-4 md:p-8""><!-- content above the separator --><HorizontalSeparator/><!-- content below the separator --></div>
component html:
HorizontalSeparator:
<div class=""w-full h-px bg-gray-200 shadow-sm mb-4 md:mb-8""></div>"
"Job listing component with a white background, blue text, and a ""View Job"" button","description:
The UI should have a clean and modern design, with a clear hierarchy of information. The job listing component should have a white background to provide contrast and make the text stand out. The text should be blue to draw attention to the job title and details. The ""View Job"" button should be prominent and actionable. The component should be responsive and adapt to different screen sizes.
components:
- JobListing: (Takes Children): This component will contain the job title, company, location, and a brief description. It will also contain a ""View Job"" button. On small screens, the component should take up the full width of the screen. On medium screens and above, the component should have a maximum width of 500px and be centered horizontally.
html:
<div class=""max-w-md mx-auto bg-white p-4 rounded shadow-md""><JobListing><!-- Job listing content will be rendered here --></JobListing></div>
component html:
JobListing:
<div class=""flex flex-col justify-between h-full""><h2 class=""text-lg text-blue-600"">{job_title}</h2><p class=""text-sm text-gray-600"">{company} - {location}</p><p class=""text-sm text-gray-600"">{job_description}</p><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">View Job</button>{children}</div>"
Top/Bottom Navigation,"description:
The UI should consist of a top navigation bar and a bottom navigation bar. The top navigation bar should have a logo on the left and some navigation links on the right. The bottom navigation bar should have some navigation links.
components:
- TopNavigationBar: (standalone)
- BottomNavigationBar: (standalone)
- Logo: (standalone)
- Link: (takes children)
html:
<div class=""h-screen flex flex-col""><TopNavigationBar/><!-- main content here --><BottomNavigationBar/></div>
component html:
TopNavigationBar:
<nav class=""bg-gray-900 py-4""><Logo/><ul class=""flex justify-end""><li><Link>Link 1</Link></li><li><Link>Link 2</Link></li><li><Link>Link 3</Link></li></ul></nav>
BottomNavigationBar:
<nav class=""bg-gray-900 py-4""><ul class=""flex justify-between""><li><Link>Link 4</Link></li><li><Link>Link 5</Link></li><li><Link>Link 6</Link></li></ul></nav>
Logo:
<img src={logo_url} alt=""Logo"" class=""h-8 w-8""/>
Link:
<a href={href} class=""text-white hover:text-gray-200"">{children}</a>"
Product community,"description:
The UI should display a community section for a product, showcasing various metrics and information about the community. It should have a header section with the community name, a section for community metrics (e.g., members, topics, posts), and a section for featured community members.
components:
- CommunityHeader: standalone, displays the community name
- CommunityMetrics: standalone, displays community metrics (e.g., members, topics, posts)
- FeaturedMembers: takes children, displays a list of featured community members
- CommunityMember: standalone, displays information about a single community member
html:
<div class=""max-w-md mx-auto p-4""><CommunityHeader/><CommunityMetrics/><FeaturedMembers><CommunityMember/><CommunityMember/><!-- Add more CommunityMember components as needed --></FeaturedMembers></div>
component html:
CommunityHeader:
<h2 class=""text-3xl font-bold mb-2"">{community_name}</h2>
CommunityMetrics:
<ul class=""list-none mb-4""><li class=""mb-2"">{members_count} members</li><li class=""mb-2"">{topics_count} topics</li><li>{posts_count} posts</li></ul>
FeaturedMembers:
<h3 class=""text-2xl font-bold mb-2"">Featured Members</h3><ul class=""list-none flex flex-wrap mb-4"">{children}</ul>
CommunityMember:
<li class=""w-1/2 sm:w-1/3 xl:w-1/4 p-2""><img class=""w-16 h-16 rounded-full mb-2"" src=""{member_avatar}"" alt=""{member_name} avatar""/><p class=""text-lg font-bold"">{member_name}</p><p class=""text-gray-600"">{member_bio}</p></li>"
Event countdown timer,"description:
The UI should display a countdown timer showing the days, hours, minutes, and seconds until a specific event. The timer should be centered and prominent on the page, with a clear and easy-to-read font.
components:
- EventCountdownTimer: A standalone component that displays the countdown timer.
- CountdownSection: A component that displays a single section of the countdown timer (e.g. days, hours, minutes, seconds). Takes children.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><EventCountdownTimer/></div>
component html:
EventCountdownTimer:
<div class=""text-center text-4xl lg:text-6xl""><CountdownSection>{days} days</CountdownSection><CountdownSection>{hours} hours</CountdownSection><CountdownSection>{minutes} minutes</CountdownSection><CountdownSection>{seconds} seconds</CountdownSection></div>
CountdownSection:
<div class=""inline-block text-2xl lg:text-3xl mx-2"">{children}</div>"
Confetti controls,"description:
The UI should display a set of confetti controls with a toggle button to show or hide the confetti, a slider to control the confetti speed, and a color picker to change the confetti color. The UI should be responsive and adapt to different screen sizes.
components:
- ConfettiToggle: (standalone): A toggle button to show or hide the confetti.
- SpeedSlider: (standalone): A slider to control the confetti speed.
- ColorPicker: (standalone): A color picker to change the confetti color.
- ConfettiContainer: (takes children): A container that wraps the confetti elements.
html:
<div class=""flex flex-col justify-center p-4 lg:p-8""><ConfettiToggle/><div class=""flex justify-center mb-4""><SpeedSlider/><ColorPicker/></div><ConfettiContainer><!-- confetti elements will be rendered here --></ConfettiContainer></div>
component html:
ConfettiToggle:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{toggle_label}</button>
SpeedSlider:
<div class=""flex items-center mb-2""><label class=""mr-2"" for=""speed-slider"">Speed:</label><input id=""speed-slider"" type=""range"" min=""1"" max=""10"" value=""5"" class=""w-full""></div>
ColorPicker:
<input type=""color"" value=""{color_value}"" class=""w-full"">
ConfettiContainer:
<div class=""relative"">{children}</div>"
Featured Video Poster Image,"description:
The UI should be a responsive, mobile-first, accessible, and SEO-friendly featured video poster image component that displays a poster image, a play button, and optional video title and duration.
components:
- VideoPosterImage: standalone component that renders the poster image, play button, and optional video title and duration.
html:
<div class=""w-full h-full relative""><VideoPosterImage/></div>
component html:
VideoPosterImage:
<div class=""w-full h-full overflow-hidden rounded-lg shadow-md""><!-- poster image --><img src={poster_image_url} alt={video_title} class=""w-full h-full object-cover rounded-lg""/><!-- play button --><div class=""absolute bottom-4 left-4 flex justify-center""><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg""><i class=""fas fa-play""></i></button></div><!-- optional video title and duration --><div class=""absolute bottom-4 right-4 text-white text-sm""><p>{video_title}</p><p>{video_duration} minutes</p></div></div>"
Blog Post Category,"description:
A simple, responsive, and accessible blog post category UI that displays the category name and a brief description.
components:
- CategoryBadge: (standalone): A small badge that displays the category name.
- CategoryDescription: (standalone): A brief description of the category.
html:
<div class=""flex flex-wrap mb-4""><CategoryBadge/><CategoryDescription/></div>
component html:
CategoryBadge:
<span class=""bg-gray-200 py-1 px-2 rounded text-gray-700 text-xs"">{category_name}</span>
CategoryDescription:
<p class=""text-sm text-gray-600"">{category_description}</p>"
Flashcards for learning,"description:
The UI should display a flashcard with a term on one side and a definition on the other. The flashcard should be responsive, with a mobile-first design that adapts to different screen sizes. The UI should also be accessible, with clear typography and sufficient color contrast.
components:
- Flashcard: Standalone component that renders a flashcard with a term and definition.
- TermSide: Takes children (the term text).
- DefinitionSide: Takes children (the definition text).
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Flashcard/></div>
component html:
Flashcard:
<div class=""flex flex-col md:flex-row items-center justify-center h-screen""><TermSide>{term}</TermSide><DefinitionSide>{definition}</DefinitionSide><!-- toggle button to flip the flashcard --><button class=""absolute top-0 right-0 mt-2 mr-2 p-2 text-gray-500 hover:text-gray-800"">Flip </button></div>
TermSide:
<div class=""p-4 bg-yellow-100 text-lg"">{children}</div>
DefinitionSide:
<div class=""p-4 bg-white text-lg"">{children}</div>"
Quote effects,"description:
The UI should display a quote with a subtle background color, a large font size for the quote, and a smaller font size for the author. The quote and author should be centered on the screen. The background color should be a soft, calming color.
components:
- QuoteComponent: (standalone) - displays the quote
- AuthorComponent: (standalone) - displays the author's name
- QuoteEffectComponent: (takes children) - wraps the quote and author components, adding the background color and centering
html:
<div class=""flex h-screen justify-center items-center""><QuoteEffectComponent><QuoteComponent/><AuthorComponent/></QuoteEffectComponent></div>
component html:
QuoteComponent:
<p class=""text-4xl"">{quote_text}</p>
AuthorComponent:
<p class=""text-lg"">{author_name}</p>
QuoteEffectComponent:
<div class=""bg-gray-100 p-4 rounded"">{children}</div>"
Navigation Menu Item Icon,"description:
The UI should be a navigation menu item with an icon, which is a clickable element that represents a single item in a navigation menu. The icon should be displayed to the left of the text.
components:
- NavigationMenuItemIcon: A standalone component that represents a single item in a navigation menu.
html:
<nav><NavigationMenuItemIcon/><!-- more navigation menu items --></nav>
component html:
NavigationMenuItemIcon:
<li class=""flex items-center py-2""><i class=""fas fa-{icon_type} mr-2 text-lg"" aria-hidden=""true""></i><span>{menu_item_text}</span></li>"
A hero image of a happy pet on the homepage background,"description:
The UI should feature a large, high-quality hero image of a happy pet as the background of the homepage. The image should be visually appealing and convey a sense of joy and companionship. The hero image should take up the full height and width of the screen, with a subtle overlay to provide contrast for the overlaid content. The UI should be responsive, adapting to different screen sizes while maintaining the hero image as the focal point.
components:
- HeroImageContainer: (Takes Children): This component wraps the hero image and overlaid content. On small screens, the hero image should take up the full height and width of the screen, with the overlaid content centered. On medium screens and above, the hero image should be scaled down to allow for more negative space around the overlaid content.
- OverlaidContent: (Takes Children): This component contains the content overlaid on top of the hero image, such as headings, text, and buttons. On small screens, the content should be centered and stacked vertically. On medium screens and above, the content should be aligned to the left and arranged horizontally.
html:
<div class=""h-screen w-full flex justify-center items-center""><HeroImageContainer><img src={hero_image_url} alt=""Happy pet hero image"" class=""object-cover h-full w-full""/><OverlaidContent><!-- overlaid content will go here --></OverlaidContent></HeroImageContainer></div>
component html:
HeroImageContainer:
<div class=""h-screen w-full relative"">{children}</div>
OverlaidContent:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 md:relative md:flex md:flex-wrap md:justify-center md:items-center"">{children}</div>"
Featured Image Lightbox Image,"description:
The UI should be a lightbox that displays a large featured image with a darkened background and a closing button at the top right corner.
components:
- FeaturedImageLightbox: Takes children (the image and the closing button).
- ClosingButton: Standalone.
html:
<!-- Lightbox overlay --><div class=""fixed inset-0 z-50 overflow-y-auto""><div class=""flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0""><FeaturedImageLightbox><img class=""max-w-full h-auto"" src=""{image_url}"" alt=""{image_alt}""/><ClosingButton/></FeaturedImageLightbox></div></div>
component html:
FeaturedImageLightbox:
<!-- Container for the image and closing button --><div class=""relative max-w-md mx-auto bg-white rounded-lg shadow-lg"">{children}</div>
ClosingButton:
<!-- Button to close the lightbox --><button class=""absolute top-0 right-0 p-2 text-gray-600 hover:text-gray-900 transition duration-300 ease-in-out""><span aria-hidden=""true"">&times;</span></button>"
"A wide, rectangular button with a white background and black text","description:
The UI should have a clean and modern design. The rectangular button should be wide enough to fit on a single line on mobile devices and scale up to fill a maximum width on larger screens. The white background and black text will provide high contrast and make the button easily readable.
components:
- WideButton: (Takes Children): A wide, rectangular button with a white background and black text. On mobile devices (less than 768px wide), the button should have a minimum width of 100% and a maximum width of 300px. On larger screens (768px and up), the button should have a maximum width of 500px.
html:
<div class=""container mx-auto p-4""><WideButton>{button_text}</WideButton></div>
component html:
WideButton:
<button class=""bg-white text-black font-bold py-2 px-4 rounded-md"">{children}</button>"
Playlist/Audio Controls,"description:
The UI should display a playlist with audio controls, allowing users to play, pause, and navigate through the playlist. The controls should be responsive, easy to use, and accessible.
components:
- PlaylistComponent: Standalone, displays the playlist
- AudioControlItem: Standalone, displays a single audio control (play/pause, previous, next)
- AudioControlContainer: Takes children, wraps the audio controls
html:
<div class=""md:flex justify-center mb-4""><PlaylistComponent/><AudioControlContainer><AudioControlItem/><AudioControlItem/><AudioControlItem/></AudioControlContainer></div>
component html:
PlaylistComponent:
<ul class=""list-none mb-4"">{playlist_items}.map((item, index) =>( <li key={index} class=""mb-2""><span class=""text-lg"">{item.title}</span><span class=""text-sm"">{item.duration}</span></li>))}</ul>
AudioControlItem:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded"">{control_label}</button>
AudioControlContainer:
<div class=""flex justify-center mb-2"">{children}</div>"
Header User Profile,"description:
The UI should display a header with a user profile section on the right side, containing the user's profile picture, name, and a dropdown menu.
components:
- UserProfileHeader: standalone component that contains the user profile information and dropdown menu.
- UserProfilePicture: standalone component that displays the user's profile picture.
- UserName: standalone component that displays the user's name.
- DropdownMenu: standalone component that displays a dropdown menu with user options.
html:
<header class=""flex justify-between p-4""><nav>...</nav><UserProfileHeader/></header>
component html:
UserProfileHeader:
<div class=""flex items-center""><UserProfilePicture/><div class=""ml-2""><UserName/><DropdownMenu/></div></div>
UserProfilePicture:
<img src={user_profile_picture_url} alt={user_name} class=""w-8 h-8 rounded-full object-cover""/>
UserName:
<p class=""text-sm"">{user_name}</p>
DropdownMenu:
<div class=""relative""><button class=""text-gray-500 hover:text-gray-800 transition duration-300 ease-in-out""><span class=""caret""></span></button><ul class=""absolute right-0 w-48 bg-white shadow-md py-2""><li><a href=""#"" class=""block py-2 px-4"">My Profile</a></li><li><a href=""#"" class=""block py-2 px-4"">Logout</a></li></ul></div>"
Follow us buttons,"description:
The UI should display a row of social media buttons with the label ""Follow us"" above them. The buttons should be responsive, accessible, and stylized using Tailwind CSS.
components:
- FollowUs: A standalone component that displays the ""Follow us"" label and the social media buttons.
- SocialButton: A component that takes children (the social media platform's logo and link) and displays a button with the logo and links to the platform.
html:
<div class=""container mx-auto p-4""><FollowUs/></div>
component html:
FollowUs:
<div class=""flex flex-col items-center mb-4""><p class=""text-lg font-bold mb-2"">Follow us</p><div class=""flex justify-center mb-4""><SocialButton><i class=""fab fa-facebook-f"">{facebook_link}</i></SocialButton><SocialButton><i class=""fab fa-twitter"">{twitter_link}</i></SocialButton><SocialButton><i class=""fab fa-instagram"">{instagram_link}</i></SocialButton></div></div>
SocialButton:
<a href=""{link}"" target=""_blank"" rel=""noopener noreferrer"" class=""inline-flex items-center justify-center w-10 h-10 mx-2 rounded-full bg-gray-200 hover:bg-gray-300"">{children}</a>"
Alert Notification Text,"description:
The UI should display a notification text with a background color, text color, and optional close button.
components:
- NotificationText: standalone component that displays the notification text
- CloseButton: standalone component that displays a close button (optional)
html:
<div class=""bg-orange-100 border-l-4 border-orange-500 p-4 mb-4""><NotificationText/>{hasCloseButton && <CloseButton/>}
</div>
component html:
NotificationText:
<p class=""text-sm"">{notification_text}</p>
CloseButton:
<button class=""text-gray-600 hover:text-gray-900 transition duration-300"">×</button>"
Ability to edit text or data directly within its context on the page,"description:
The UI should have a text area that can be edited directly on the page. When the user clicks on the text, it should become an editable text area with a blue border. The user can then edit the text, and when they click away, the text should be updated.
components:
- EditableText: (standalone): A text area that can be edited directly on the page.
- TextEdit: (takes children): A container that wraps the editable text and provides editing functionality.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><TextEdit><EditableText/></TextEdit></div>
component html:
EditableText:
<textarea class=""w-full p-2 pl-10 text-sm text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"" rows=""4"">{text}</textarea>
TextEdit:
<div class=""relative""><div class=""absolute top-0 right-0 p-2 text-sm text-gray-500 hover:text-gray-900 transition duration-300 ease-in-out""><!-- editing icons, e.g. a checkmark and a cancel icon --></div>{children}</div>"
Floating action button,"description:
The UI should be a circular floating action button that appears in the bottom right corner of the screen. It should have a icon (e.g. a plus sign) and a subtle animation when hovered.
components:
- FloatingActionButton: A standalone component that renders a circular button with an icon.
html:
<div class=""fixed bottom-0 right-0 mb-4 mr-4""><FloatingActionButton/></div>
component html:
FloatingActionButton:
<button class=""bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded-full shadow-md""><i class=""fas fa-plus""></i></button>"
Product Feature List Item,"description:
The UI should be a list item that displays a product feature with an icon, a brief description, and a optional link to learn more. The component should be responsive and adaptable to different screen sizes.
components:
- ProductFeatureListItem: standalone component that displays a product feature.
- FeatureIcon: standalone component that displays an icon for the feature.
- LearnMoreLink: standalone component that displays a link to learn more about the feature.
html:
<ul class=""flex flex-col md:flex-row md:flex-wrap""><li class=""mb-4 md:w-1/2 xl:w-1/3""><ProductFeatureListItem/></li></ul>
component html:
ProductFeatureListItem:
<div class=""flex items-center mb-2""><FeatureIcon/><div class=""ml-4""><h5 class=""text-lg"">{feature_name}</h5><p class=""text-gray-600"">{feature_description}</p>{learn_more_url && <LearnMoreLink/>} </div></div>
FeatureIcon:
<i class=""fas fa-{feature_icon} text-2xl text-gray-600""></i>
LearnMoreLink:
<a href=""{learn_more_url}"" class=""text-blue-600 hover:text-blue-900"">Learn more</a>"
Progress bar,"description:
The UI should be a horizontal progress bar that shows the progression of a task. The progress bar should be responsive, accessible, and easy to use. It should have a filled portion that indicates the progress and an unfilled portion that indicates the remaining progress.
components:
- ProgressBar: A standalone component that represents the entire progress bar.
html:
<ProgressBar/>
component html:
ProgressBar:
<div class=""w-full h-4 rounded bg-gray-200""><div class=""bg-blue-500 h-4 rounded"" style=""`width: {progressPercentage}%;""}></div><span class=""sr-only"">{progressPercentage}% complete</span></div>"
Paging controls for navigating through posts,"description:
The UI should display a simple pagination control with a previous and next button, allowing users to navigate through a list of posts.
components:
- PaginationControl: standalone
- PreviousButton: standalone
- NextButton: standalone
html:
<nav class=""flex justify-center mb-4""><PaginationControl/></nav>
component html:
PaginationControl:
<div class=""flex items-center""><PreviousButton/><span class=""px-2"">{current_page} of {total_pages}</span><NextButton/></div>
PreviousButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">Previous</button>
NextButton:
<button class=""bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded"">Next</button>"
A review component with:,"description:
The Review component should have a clean and minimalistic design, with a focus on readability and accessibility. It should have a clear hierarchy of information, with the reviewer's name and rating prominent at the top, followed by the review text. The component should be responsive, with a single column layout on small screens and a two-column layout on larger screens.
components:
- ReviewHeader: (Standalone): Displays the reviewer's name, rating, and date of review.
- ReviewText: (Takes Children): Displays the review text.
- Rating: (Standalone): Displays the rating (e.g. 5 stars).
html:
<div class=""max-w-md mx-auto px-4 py-8 md:max-w-2xl lg:max-w-3xl""><ReviewHeader/><ReviewText>{children}</ReviewText></div>
component html:
ReviewHeader:
<div class=""flex items-center mb-2""><p class=""text-lg font-bold"">{reviewer_name}</p><Rating/><p class=""text-sm text-gray-600"">{review_date}</p></div>
ReviewText:
<p class=""text-lg"">{children}</p>
Rating:
<div class=""flex items-center"">{rating}/5 <svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg><svg><!-- star --></svg></div>"
Error Message: Displays error message with details,"description:
The UI should display an error message with details, such as an error title, error message, and possibly other details.
components:
- ErrorMessage: A standalone component that displays an error message with details.
html:
<div class=""bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative""><ErrorMessage/></div>
component html:
ErrorMessage:
<h5 class=""text-lg"">{error_title}</h5><p>{error_message}</p><p>{error_details}</p>"
Price and availability information,"description:
The UI should display price and availability information in a clean and easy-to-read format. The price should be prominent, and the availability information should be displayed below it.
components:
- PriceInfo: Standalone component to display the price information.
- AvailabilityInfo: Standalone component to display the availability information.
html:
<div class=""flex flex-col gap-2""><PriceInfo/><AvailabilityInfo/></div>
component html:
PriceInfo:
<p class=""text-lg font-bold"">{price_amount} {currency}</p>
AvailabilityInfo:
<p>Availability: {availability_status}</p><!-- availability_status can be ""In Stock"", ""Out of Stock"", etc. --><p>Ships in {shipping_time} from {warehouse_location}</p>"
Reporting Wizard: Simplify report creation,"description:
The UI should resemble a reporting wizard with a step-by-step guide to simplify report creation. It should have a header with a title, a navigation sidebar, and a main content area to display the current step. The UI should be responsive, mobile-first, and accessible.
components:
- ReportingWizardHeader: Standalone component that displays the title of the report creation wizard.
- ReportingWizardSidebar: Standalone component that displays the navigation menu for the wizard steps.
- WizardStep: Component that takes children to display the current step's content.
- WizardStepNavigation: Standalone component that displays the navigation buttons for the wizard steps.
html:
<div class=""flex h-screen""><ReportingWizardHeader/><aside class=""w-64 bg-gray-100 p-4""><ReportingWizardSidebar/></aside><main class=""flex-1 p-4""><WizardStep><!-- wizard step content will be inserted here --></WizardStep><WizardStepNavigation/></main></div>
component html:
ReportingWizardHeader:
<header class=""bg-white shadow-md p-4""><h1 class=""text-2xl font-bold"">{wizard_title}</h1></header>
ReportingWizardSidebar:
<nav class=""flex flex-col""><ul class=""list-none p-0 m-0"">{wizard_steps.map((step, index) =>( <li key={index} class=""py-2 pl-4 pr-2""><a href=""#"" class=""text-gray-600 hover:text-gray-900"">{step.title}</a></li>))} </ul></nav>
WizardStep:
<div class=""p-4"">{children}</div>
WizardStepNavigation:
<div class=""flex justify-between p-4""><button class=""bg-gray-100 hover:bg-gray-200 text-gray-600 py-2 px-4"">{previous_step_text}</button><button class=""bg-orange-500 hover:bg-orange-700 text-white py-2 px-4"">{next_step_text}</button></div>"
Arrangement of product images and details in a structured grid format,"description:
The UI should display a grid of product cards, each containing an image, product name, product description, and a call-to-action (CTA) button. The grid should be responsive, adapting to different screen sizes and devices.
components:
- ProductCard: A standalone component representing a single product, containing an image, product name, product description, and a CTA button.
- ProductGrid: A component that takes children, representing the grid of product cards.
html:
<div class=""container mx-auto p-4""><ProductGrid><ProductCard/><ProductCard/><!-- Add more ProductCard components as needed --></ProductGrid></div>
component html:
ProductCard:
<div class=""max-w-sm bg-white rounded-lg shadow-md""><img src={productImage} alt={productName} class=""w-full h-48 object-cover rounded-t-lg""/><div class=""p-4""><h5 class=""text-lg"">{productName}</h5><p class=""text-gray-600"">{productDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Buy Now</button></div></div>
ProductGrid:
<div class=""grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"">{children}</div>"
Footer Copyright Text,"description:
The UI should be a simple footer with a copyright text, displayed at the bottom of the page. The text should be centered and have a smaller font size.
components:
- FooterCopyright: standalone component
html:
<footer><FooterCopyright/></footer>
component html:
FooterCopyright:
<p class=""text-center text-sm text-gray-500"">&copy; {current_year} {copyright_holder}. All rights reserved.</p>"
Page Content Ordered List,"description:
The UI should display an ordered list of page content items, with each item containing a title and a short description. The list should be responsive, mobile-first, and accessible.
components:
- PageContentOrderedListItem: Standalone component, represents a single list item.
- PageContentOrderedList: Takes children, wraps the ordered list.
html:
<PageContentOrderedList><PageContentOrderedListItem/><PageContentOrderedListItem/><!-- Add more list items here --></PageContentOrderedList>
component html:
PageContentOrderedListItem:
<li class=""md:w-1/2 xl:w-1/3 p-4""><h3 class=""font-bold"">{item_title}</h3><p>{item_description}</p></li>
PageContentOrderedList:
<ol class=""list-decimal list-inside"">{children}</ol>"
Search Bar: Input field for searching content,"description:
The UI should be a simple search bar with an input field and a submit button. The input field should be responsive and adapt to different screen sizes. The search bar should be accessible, with a clear label and a submit button that can be clicked or pressed using the keyboard.
components:
- SearchInput: a standalone component that represents the input field.
- SearchButton: a standalone component that represents the submit button.
html:
<div class=""flex justify-center xl:w-1/2 md:w-2/3 w-full mx-auto mb-4""><form><SearchInput/><SearchButton/></form></div>
component html:
SearchInput:
<input type=""search"" id=""search-input"" class=""w-full pl-4 pr-10 text-sm text-gray-700"" placeholder=""Search..."" aria-label=""Search input""/>
SearchButton:
<button type=""submit"" class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_text}</button>"
Order confirmation page,"description:
The order confirmation page should display a success message, order details, and a call-to-action (CTA) to encourage customers to explore more products or log in to their account. The design should be clean, simple, and easy to read.
components:
- OrderConfirmationHeader: Standalone component to display the success message.
- OrderDetails: Takes children, displays order details such as order number, date, and total.
- OrderItem: Standalone component to display individual order items.
- CallToAction: Standalone component to display a CTA button.
html:
<main class=""container mx-auto p-4 md:p-6""><OrderConfirmationHeader/><section class=""flex flex-col md:flex-row gap-4""><OrderDetails><OrderItem/><!-- Add more OrderItem components here --></OrderDetails><CallToAction/></section></main>
component html:
OrderConfirmationHeader:
<h1 class=""text-3xl font-bold"">{confirmation_message}</h1>
OrderDetails:
<section class=""flex-1""><h2 class=""text-xl font-bold"">Order Details</h2><ul class=""divide-y divide-gray-200""><li class=""py-4"">{children}</li></ul></section>
OrderItem:
<li class=""flex justify-between""><span class=""text-gray-600"">{product_name}</span><span class=""text-gray-600"">{quantity} x {price}</span></li>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
Project management tool,"description:
The UI should resemble a typical project management tool, with a dashboard that displays various sections for managing projects, tasks, and team members. The design should be clean, minimalistic, and easy to navigate, with clear typography and ample whitespace.
components:
- ProjectCard: Standalone, displays project information such as name, description, and status.
- TaskList: Takes children, displays a list of tasks with checkboxes, task names, and due dates.
- TeamMemberCard: Standalone, displays team member information such as name, role, and profile picture.
- Sidebar: Takes children, displays a navigation menu with links to various sections of the tool.
- Header: Standalone, displays the application's logo and a search bar.
- DashboardGrid: Takes children, displays a grid layout for the main dashboard content.
html:
<header class=""bg-gray-100 py-4""><Header/></header><nav class=""lg:w-1/5 xl:w-1/6 py-4""><Sidebar><ul><li><a href=""#projects"">Projects</a></li><li><a href=""#tasks"">Tasks</a></li><li><a href=""#team"">Team</a></li></ul></Sidebar></nav><main class=""lg:w-4/5 xl:w-5/6 p-4""><DashboardGrid><section class=""grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4""><ProjectCard/><ProjectCard/><ProjectCard/></section><section class=""mt-4""><h2>Tasks</h2><TaskList><!-- task list items will be rendered here --></TaskList></section><section class=""mt-4""><h2>Team</h2><TeamMemberCard/><TeamMemberCard/><TeamMemberCard/></section></DashboardGrid></main>
component html:
ProjectCard:
<div class=""bg-white rounded shadow-md p-4""><h3 class=""text-lg"">{project_name}</h3><p class=""text-gray-600"">{project_description}</p><p class=""text-gray-600"">Status: {project_status}</p></div>
TaskList:
<ul class=""list-none mb-0"">{children}</ul>
TeamMemberCard:
<div class=""bg-white rounded shadow-md p-4""><img src={profile_picture} alt={name} class=""w-12 h-12 rounded-full mr-2""><div class=""text-lg"">{name}</div><div class=""text-gray-600"">{role}</div></div>
Sidebar:
<div class=""bg-gray-100 h-screen overflow-y-auto p-4"">{children}</div>
Header:
<div class=""flex justify-between items-center""><a href=""#"" class=""text-lg"">{app_name}</a><input type=""search"" placeholder=""Search"" class=""px-2 py-1 border""></div>
DashboardGrid:
<div class=""flex flex-wrap"">{children}</div>"
Video background,"description:
The UI should be a full-screen video background with a centered container that overlays on top of the video.
components:
- VideoBackground: standalone component that renders a full-screen video background.
- OverlayContainer: standalone component that renders a centered container that overlays on top of the video.
html:
<div class=""h-screen w-screen overflow-hidden""><VideoBackground/><OverlayContainer/></div>
component html:
VideoBackground:
<video class=""object-cover h-screen w-screen"" autoplay muted loop><source src={video_source} type=""video/mp4""/>Your browser does not support the video tag.</video>
OverlayContainer:
<div class=""absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center""><!-- add content here --></div>"
A call-to-action (CTA) button with a yellow background and white text,"description:
The UI should feature a prominent call-to-action (CTA) button with a yellow background and white text, making it stand out and grab the user's attention. The button should be responsive, scaling down in size on smaller screens while maintaining its prominence.
components:
- YellowCtaButton: (Standalone): A call-to-action button with a yellow background and white text. It should be large and prominent on large screens, scaling down to a smaller size on smaller screens.
html:
<div class=""flex justify-center h-screen""><YellowCtaButton/></div>
component html:
YellowCtaButton:
<button class=""bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded"">{cta_text}</button>"
"Footer with copyright information, social media links, and contact information","description:
The footer should have a simple and clean design, with a dark background to contrast with the rest of the UI. It should be divided into three sections: copyright information, social media links, and contact information. The layout should be responsive, with sections stacking on top of each other on smaller screens. The text should be easy to read, with sufficient contrast with the background.
components:
- FooterSection: (Takes Children): A container for each section of the footer. It should have a dark background and white text on larger screens, and a lighter background and dark text on smaller screens.
- CopyrightInfo: (Standalone): A component that displays the copyright information. It should be centered and have a smaller font size than the rest of the footer.
- SocialMediaLinks: (Takes Children): A component that displays a list of social media links. It should have a horizontal layout on larger screens, and a vertical layout on smaller screens.
- ContactInfo: (Standalone): A component that displays the contact information. It should be centered and have a smaller font size than the rest of the footer.
html:
<footer class=""bg-dark-900 text-white pt-12 pb-6 xl:pt-20 xl:pb-12""><FooterSection><CopyrightInfo/></FooterSection><FooterSection><SocialMediaLinks><!-- social media links will be rendered here --></SocialMediaLinks></FooterSection><FooterSection><ContactInfo/></FooterSection></footer>
component html:
FooterSection:
<div class=""px-4 xl:px-8 mb-4 xl:mb-8"">{children}</div>
CopyrightInfo:
<p class=""text-sm text-center"">&copy; {currentYear} {companyName}. All rights reserved.</p>
SocialMediaLinks:
<ul class=""flex flex-wrap justify-center xl:flex-nowrap xl:justify-start mb-4 xl:mb-0"">{children}</ul>
ContactInfo:
<p class=""text-sm text-center"">{contactAddress} <br/>{contactPhone} <br/>{contactEmail}</p>"
"Make a product category component with a green background, white text, and icon","description:
The Product Category component should have a green background, white text, and an icon. It should be a rectangular box with a subtle shadow to give it some depth. The icon should be displayed prominently on the left side, followed by the category name in white text. The component should be responsive, with the font size and padding adjusting based on the screen size.
components:
- ProductCategory: (Takes Children): This component represents a product category. It takes a single child element, which is the category name.
html:
<div class=""max-w-md mx-auto p-4""><ProductCategory>{categoryName}
</ProductCategory></div>
component html:
ProductCategory:
<div class=""bg-green-500 hover:bg-green-700 transition duration-300 ease-in-out rounded shadow-md p-4 flex items-center""><i class=""fas fa-tag text-white text-2xl mr-4""></i><span class=""text-white text-lg"">{children}</span></div>"
A breadcrumb component with a grey background and white text,"description:
The breadcrumb component should have a grey background and white text, making it easy to read and distinguish from the rest of the UI. It should be responsive, scaling down on smaller screen sizes to ensure the text remains legible.
components:
- BreadcrumbItem: (Takes Children): A single item in the breadcrumb trail, containing a link to a previous page and a separator (e.g., ""/"").
- Breadcrumb: (Takes Children): The container for the breadcrumb items, providing the grey background and styling.
html:
<Breadcrumb><BreadcrumbItem>{crumb1}</BreadcrumbItem><BreadcrumbItem>{crumb2}</BreadcrumbItem><BreadcrumbItem>{crumb3}</BreadcrumbItem></Breadcrumb>
component html:
BreadcrumbItem:
<a class=""text-white hover:text-gray-400 transition duration-300"" href=""{href}"">{children}</a><span class=""text-gray-400 mx-2"">/</span>
Breadcrumb:
<nav class=""flex items-center bg-gray-200 text-white py-2 px-4 rounded"">{children}</nav>"
Search Result Item Title,"description:
The UI should display a single search result item with a title that is accessible and responsive.
components:
- SearchResultItemTitle: standalone component that displays the title of a search result item.
html:
<div class=""flex flex-col md:flex-row items-center mb-4""><h2 class=""text-lg font-bold mb-2 md:mr-4""><SearchResultItemTitle/></h2><!-- other search result item details will go here --></div>
component html:
SearchResultItemTitle:
<a class=""text-lg font-bold text-gray-900 hover:text-gray-700"" href=""{result_item_url}"">{result_item_title}</a>"
"A notification component with a small, red circle icon and a subtle fade-in effect","description:
The UI should have a small, red circle icon with a notification symbol inside, and a subtle fade-in effect when the notification appears. The notification text should be short and concise, with a slight padding around it. On smaller screens, the notification should be stacked vertically to ensure readability.
components:
- NotificationBadge: (Standalone): A small, red circle icon with a notification symbol inside.
- NotificationText: (Takes Children): A short, concise text with a slight padding around it.
html:
<div class=""flex items-center justify-center max-w-md mx-auto""><NotificationBadge/><NotificationText>{notification_text}</NotificationText></div>
component html:
NotificationBadge:
<span class=""bg-red-500 w-6 h-6 rounded-full flex items-center justify-center text-white""><span class=""text-2xl"">&#x1F514;</span></span>
NotificationText:
<p class=""text-sm pl-2"">{children}</p>"
Bi-directional override,"description:
The UI should be a simple, responsive, and accessible toggle button that allows users to switch between two directional settings, such as RTL (Right-to-Left) and LTR (Left-to-Right). The toggle button should display the current direction and allow users to toggle between the two options.
components:
- DirectionToggle: A standalone component that renders a toggle button with two possible directions (RTL and LTR).
- DirectionIndicator: A standalone component that displays the current direction (RTL or LTR).
html:
<div class=""flex justify-center mb-4""><DirectionToggle/></div>
component html:
DirectionToggle:
<button class=""px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition duration-300 ease-in-out"" aria-pressed={direction === 'rtl' ? 'true' : 'false'} onClick={() =>setDirection(direction === 'rtl' ? 'ltr' : 'rtl')}><DirectionIndicator/><span class=""sr-only"">{direction === 'rtl' ? 'RTL' : 'LTR'}</span></button>
DirectionIndicator:
<span class={direction === 'rtl' ? 'text-right' : 'text-left'}>{direction === 'rtl' ? 'RTL' : 'LTR'}</span>"
Header Navigation Menu,"description:
The UI should feature a header navigation menu that stretches across the top of the screen. It should be responsive, collapsing into a more mobile-friendly format as needed. The header should contain a logo on the left and navigation links on the right. On smaller screens, the navigation links might collapse into a hamburger menu or a dropdown.
components:
- Logo: Standalone component that displays the brand's logo.
- Navbar: Standalone component that contains navigation links.
- NavLinks: Component that takes children; consists of individual links for navigation.
html:
<header class=""bg-white shadow-md p-4 fixed top-0 left-0 w-full z-10""><div class=""container mx-auto flex justify-between items-center""><Logo/><Navbar/></div></header>
component html:
Logo:
<div><a href=""{home_url}"" class=""text-lg font-bold text-gray-900"">{brand_name} </a></div>
Navbar:
<nav><ul class=""flex space-x-4""><NavLinks>Home</NavLinks><NavLinks>About</NavLinks><NavLinks>Services</NavLinks><NavLinks>Contact</NavLinks></ul></nav>
NavLinks:
<li><a href=""{link_url}"" class=""text-gray-600 hover:text-gray-900"">{children}</a></li>"
Blog Post Author Info,"description:
The UI should display the author's name, profile picture, and a short bio. It should be a compact, rectangular box with a subtle border and padding.
components:
- AuthorInfo: A standalone component that displays the author's information.
- Avatar: A standalone component that displays the author's profile picture.
- Bio: A standalone component that displays the author's bio.
html:
<div class=""max-w-md p-4 mx-auto bg-white rounded shadow-md""><AuthorInfo/></div>
component html:
AuthorInfo:
<div class=""flex items-center mb-2""><Avatar/><div class=""ml-2""><p class=""text-lg"">{authorName}</p><Bio/></div></div>
Avatar:
<img src={profilePictureUrl} class=""w-12 h-12 rounded-full"" alt=""{authorName}'s profile picture""/>
Bio:
<p class=""text-gray-600"">{authorBio}</p>"
Placeholder/Loading Text,"description:
The UI should be a simple loading text component that displays a placeholder text, indicating that content is loading.
components:
- LoadingText: (standalone): Displays a placeholder text.
html:
<div class=""flex justify-center""><LoadingText/></div>
component html:
LoadingText:
<p class=""text-lg text-gray-400 animate-pulse"">Loading...</p><!-- or --><p class=""text-lg text-gray-400 animate-pulse"">{loading_message}</p>"
Social media links with icons and tooltips,"description:
A horizontal list of social media links with icons and tooltips that appear on hover.
components:
- SocialMediaLink: (standalone) - a single social media link with an icon and tooltip
- SocialMediaLinks: (takes children) - a container for multiple social media links
html:
<nav class=""flex justify-center mb-4""><SocialMediaLinks><SocialMediaLink/><SocialMediaLink/><SocialMediaLink/></SocialMediaLinks></nav>
component html:
SocialMediaLink:
<li class=""inline-block mr-4""><a href=""{link_url}"" target=""_blank"" rel=""noopener noreferrer"" aria-label=""{tooltip_text}""><i class={`text-xl {icon_class}`}/></a><span class=""tooltip hidden group-hover:block"">{tooltip_text}</span></li>
SocialMediaLinks:
<ul class=""flex justify-center space-x-4"">{children}</ul>"
Trending Topics: List of popular hashtags and topics,"description:
The UI should display a list of trending topics, with each topic showing its name, a brief description, and the number of posts related to that topic. The list should be responsive, with a maximum of 3 columns on large screens, 2 columns on medium screens, and a single column on small screens.
components:
- TrendingTopicList: Container component that takes children, which are multiple **TrendingTopicCard** components.
html:
<div class=""container mx-auto p-4""><h2 class=""text-2xl font-bold mb-4"">Trending Topics</h2><TrendingTopicList><!-- List of trending topics will be rendered here --></TrendingTopicList></div>
component html:
TrendingTopicList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
"**Footer:** A dark gray rectangular component featuring three columns of text links (e.g., About, Recipes, Contact) on the left, a newsletter signup form in the center, and a set of social media icons on the right.","description:
The Footer component should have a dark gray background and be divided into three columns. The left column should contain a list of text links in a lighter gray color. The center column should feature a newsletter signup form with a subtle gradient effect to give it a slight 3D appearance. The right column should contain a set of social media icons in a horizontal row. The entire footer should be responsive, with the columns stacking vertically on smaller screens.
components:
- Footer: (Takes Children): A dark gray rectangular component containing three columns of content.
- FooterLinks: (Standalone): A list of text links in a lighter gray color.
- NewsletterSignup: (Standalone): A form component for signing up for a newsletter.
- SocialMediaIcons: (Standalone): A horizontal row of social media icons.
html:
<footer class=""bg-gray-800 h-screen pt-12 pb-6 md:pt-20 md:pb-12""><div class=""max-w-md mx-auto px-4 lg:max-w-2xl lg:px-8""><Footer><FooterLinks/><NewsletterSignup/><SocialMediaIcons/></Footer></div></footer>
component html:
Footer:
<div class=""flex flex-wrap justify-between mb-4 md:flex-no-wrap"">{children}</div>
FooterLinks:
<ul class=""flex flex-col mb-4 md:flex-row md:justify-between""><li class=""mb-2 md:mr-4""><a href=""#"" class=""text-gray-400 hover:text-gray-200"">{link_text}</a></li><!-- Repeat the above list item for each link --></ul>
NewsletterSignup:
<form class=""flex flex-col mb-4""><input type=""email"" class=""bg-gray-200 p-2 pl-10 text-sm"" placeholder=""Email address""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button></form>
SocialMediaIcons:
<ul class=""flex justify-between""><li class=""mr-4""><a href=""#"" class=""text-gray-400 hover:text-gray-200"">{social_media_icon}</a></li><!-- Repeat the above list item for each social media icon --></ul>"
A grid component to display a list of event cards,"description:
The UI should be a responsive grid that displays a list of event cards. The grid should have a maximum of 3 columns on large screens and scale down to 2 columns on medium screens and 1 column on small screens. Each event card should have a highlighted background color, a title, a description, and a call-to-action (CTA) button. The grid should have a max width and be centered on the page.
components:
- EventGrid: (Takes Children): A responsive grid that displays a list of event cards.
- EventCard: (Takes Children): A single event card that displays a title, description, and CTA button.
html:
<div class=""max-w-md mx-auto p-4""><EventGrid><!-- Event cards will be rendered here --></EventGrid></div>
component html:
EventGrid:
<div class=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-4"">{children}</div>
EventCard:
<div class=""bg-gray-100 hover:bg-gray-200 transition duration-300 ease-in-out rounded shadow-md p-4""><h2 class=""text-lg font-bold"">{eventName}</h2><p class=""text-gray-600"">{eventDescription}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button>{children}</div>"
Accordion/Toggle Components,"description:
The UI should be a toggleable accordion component that can be expanded or collapsed to show or hide its content. The component should have a header with a clickable toggle button, and a content area that is hidden or shown depending on the toggle state.
components:
- AccordionHeader: (standalone): The header component that contains the toggle button and the title of the accordion.
- AccordionContent: (takes children): The content component that contains the hidden or shown content of the accordion.
- AccordionToggle: (standalone): The toggle button component that toggles the accordion content.
html:
<div class=""accordion""><AccordionHeader/><AccordionContent><!-- accordion content here --></AccordionContent></div>
component html:
AccordionHeader:
<div class=""accordion-header flex items-center justify-between p-4""><h5 class=""text-lg"">{title}</h5><AccordionToggle/></div>
AccordionContent:
<div class=""accordion-content overflow-hidden transition-all duration-300"">{children}</div>
AccordionToggle:
<button class=""accordion-toggle w-6 h-6 p-1 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors duration-300""><span class=""sr-only"">Toggle accordion</span><svg><!-- icon for toggle button --></svg></button>"
Header Search Input,"description:
The UI should be a responsive header search input that is mobile-first, accessible, and SEO-friendly. It should have a search icon, a text input field, and a submit button.
components:
- SearchHeader: standalone component that wraps the entire search input.
- SearchInput: standalone component that contains the search icon, text input field, and submit button.
html:
<header class=""bg-white py-4""><SearchHeader/></header>
component html:
SearchHeader:
<div class=""container mx-auto p-4 flex justify-center""><SearchInput/></div>
SearchInput:
<div class=""flex justify-between w-full max-w-md""><span class=""inline-flex items-center justify-center w-12 h-12 bg-gray-100 text-gray-500""><i class=""fas fa-search""></i></span><input type=""search"" id=""search"" class=""flex-1 p-2 pl-10 text-sm text-gray-700"" placeholder=""{search_placeholder}""/><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{search_button_label} </button></div>"
A search bar with a gray border and a magnifying glass icon,"description:
The search bar should have a gray border and a magnifying glass icon to the left of the input field. The input field should be responsive, taking up the full width on mobile devices and shrinking to a reasonable width on larger screens. The magnifying glass icon should be a darker gray color to provide sufficient contrast with the lighter gray border. The search bar should have a subtle box shadow to give it some depth.
components:
- SearchBar: (Takes Children): A container for the search input field and magnifying glass icon.
- SearchIcon: (Standalone): A magnifying glass icon.
html:
<div class=""flex items-center w-full md:w-1/2 lg:w-1/3 xl:w-1/4 mx-auto p-4""><SearchBar><SearchIcon/><input type=""search"" class=""w-full pl-10"" placeholder=""Search...""/></SearchBar></div>
component html:
SearchBar:
<div class=""flex items-center border border-gray-200 rounded-md shadow-md p-2"">{children}</div>
SearchIcon:
<i class=""fas fa-search text-gray-600 mr-2""/>"
Message body text editor with formatting tools,"description:
The UI should be a text editor with a toolbar containing formatting tools such as bold, italic, underline, and font sizes. The text editor should be responsive and mobile-friendly, with a clean and minimalistic design.
components:
- TextEditor: (standalone): The main text editor component containing the text area and toolbar.
- Toolbar: (standalone): The toolbar component containing the formatting tools.
- ToolButton: (takes children): A single tool button in the toolbar, containing an icon and optional text.
html:
<div class=""flex flex-col h-screen max-h-screen overflow-y-auto p-4""><TextEditor/></div>
component html:
TextEditor:
<div class=""flex flex-col h-full w-full""><Toolbar/><textarea class=""w-full p-2 h-full overflow-y-auto resize-y""/></div>
Toolbar:
<div class=""flex justify-center mb-2""><ToolButton><i class=""fas fa-bold""/></ToolButton><ToolButton><i class=""fas fa-italic""/></ToolButton><ToolButton><i class=""fas fa-underline""/></ToolButton><ToolButton><span>Font size: {font_size}</span><select class=""pl-2""><option value=""10"">10px</option><option value=""12"">12px</option><option value=""14"">14px</option></select></ToolButton></div>
ToolButton:
<button class=""py-2 px-4 rounded-md hover:bg-gray-100"">{children}</button>"
"Comment component with a white background, dark text, and a slight shadow effect","description:
The Comment component should have a clean and minimalistic design with a white background, dark text, and a slight shadow effect to give it a subtle depth. On larger screens, the component should have a maximum width to prevent it from taking up too much horizontal space.
components:
- Comment: (Standalone): A single comment with a white background, dark text, and a slight shadow effect.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-8""><Comment/></div>
component html:
Comment:
<div class=""bg-white shadow-md p-4 rounded-md""><p class=""text-gray-800"">{comment_text}</p></div>"
"A hero banner with a large, high-quality background image and overlay text","description:
The hero banner should have a large, high-quality background image that scales well on different screen sizes. The overlay text should be prominent and easily readable. The UI should be responsive, accessible, and visually appealing.
components:
- HeroBanner: (Takes Children): This component represents the hero banner with a background image and overlay text. On small screens, the background image should be scaled down to fit the screen, and the overlay text should be centered horizontally. On larger screens, the background image should be scaled up to fill the screen, and the overlay text should be positioned at the bottom of the banner.
html:
<div class=""h-screen w-full relative""><HeroBanner><!-- Hero banner background image and overlay text will be rendered here --></HeroBanner></div>
component html:
HeroBanner:
<div class=""relative h-screen w-full overflow-hidden""><img src=""{background_image_url}"" class=""absolute top-0 left-0 object-cover w-full h-full""/><div class=""absolute bottom-0 left-0 p-4 text-white"">{children} <!-- Overlay text will be rendered here --></div></div>"
A component that displays a list of game screenshots with a neon green border,"description:
The UI should display a list of game screenshots with a neon green border. The list should be responsive, with the screenshots scaling down on smaller screens. The neon green border should stand out and draw the user's attention.
components:
- ScreenshotList: (Takes Children): A list of game screenshots with a neon green border.
- ScreenshotItem: (Standalone): A single game screenshot with a neon green border.
html:
<!-- The container for the screenshot list --><div class=""container mx-auto p-4""><!-- The screenshot list component --><ScreenshotList><!-- Screenshot items will be rendered here --></ScreenshotList></div>
component html:
ScreenshotList:
<!-- The screenshot list container with a max width --><div class=""max-w-md mx-auto""><!-- The list of screenshot items --><ul class=""flex flex-wrap justify-center"">{children}</ul></div>
ScreenshotItem:
<!-- A single screenshot item with a neon green border --><div class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-2""><img src=""{screenshot_url}"" alt=""Game Screenshot"" class=""border-4 border-neon-green rounded-lg""/></div>"
"A ""Call-to-Action"" button with a bright orange background and white text","description:
The UI should have a prominent call-to-action (CTA) button that grabs the user's attention. The button should have a bright orange background with white text to create high contrast and make it easily readable. The button should be large enough to be easily clickable on mobile devices. On larger screens, the button should be centered and have some breathing room around it to make it stand out.
components:
- CallToActionButton: (Standalone): A call-to-action button with a bright orange background and white text.
html:
<div class=""flex h-screen justify-center items-center bg-gray-100""><CallToActionButton/></div>
component html:
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Progress indicator spinner,"description:
A circular progress indicator spinner that fills up as progress is made. The spinner should be responsive and accessible.
components:
- ProgressSpinner: A standalone component that displays a circular progress indicator spinner.
html:
<div class=""flex justify-center mb-4""><ProgressSpinner/></div>
component html:
ProgressSpinner:
<div class=""w-12 h-12 border-4 border-gray-200 border-solid rounded-full animate-spin""><!-- Spinner icon --><div class=""w-full h-full border-2 border-gray-200 border-solid rounded-full""></div><!-- Progress fill --><div class=""absolute w-full h-full border-2 border-gray-200 border-solid rounded-full"" style=""`--progress: {progressPercentage}%;""}><div class=""w-full h-full border-2 border-gray-200 border-solid rounded-full""></div></div></div>"
Template element,"description:
The UI should feature a display of a standard template element which might include a title, description, and possibly a placeholder for dynamic content. This component is ideal for scenarios where a template is predefined but will be utilized dynamically for various content.
components:
- TemplateCard: Standalone component
- ContentPlaceholder: Component that takes children.
html:
<div class=""p-4 max-w-sm mx-auto""><TemplateCard/><ContentPlaceholder><p>This is placeholder content which will be dynamically replaced.</p></ContentPlaceholder></div>
component html:
TemplateCard:
<div class=""bg-white shadow-lg rounded-lg p-5""><h1 class=""text-xl font-bold mb-2"">{title}</h1><p class=""text-gray-700 mb-4"">{description}</p></div>
ContentPlaceholder:
<div class=""bg-gray-100 p-4 mt-4 rounded-lg"">{children} </div>"
Article Title: Headline of individual post,"description:
The UI should display a prominent headline of an individual post, with a clear and readable font, suitable for desktop and mobile devices.
components:
- PostHeadline: standalone component
html:
<header class=""max-w-md mx-auto p-4""><PostHeadline/></header>
component html:
PostHeadline:
<h1 class=""text-3xl font-bold mb-2"">{post_title}</h1>"
Transition controls,"description:
The UI should consist of a set of control elements to manage transitions, typical in multimedia applications. These controls typically include buttons for playing, pausing, stopping, and maybe sliders for controlling transition progress or speed.
components:
- PlayButton: (standalone): A button to start a transition.
- PauseButton: (standalone): A button to pause the ongoing transition.
- StopButton: (standalone): A button to stop the transition.
html:
<div class=""flex flex-col items-center space-y-4 p-4""><!-- Play button --><PlayButton/><!-- Pause button --><PauseButton/><!-- Stop button --><StopButton/></div>
component html:
PlayButton:
<button class=""bg-green-500 text-white p-2 rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"">Play </button>
PauseButton:
<button class=""bg-yellow-500 text-white p-2 rounded hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50"">Pause </button>
StopButton:
<button class=""bg-red-500 text-white p-2 rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"">Stop </button>"
"Design a card component for event listings, including an image, title, date, location, and short description","description:
The UI should display a clean and visually appealing card component that effectively communicates the essential details of an event. The card should be responsive, accessible, and easy to navigate on various screen sizes. The card's layout should scale smoothly on different devices, guiding the user's attention to the most important information.
components:
- EventCard: (Takes Children): A container component that wraps all the event details.
- EventImage: (Standalone): Displays the event's image.
- EventTitle: (Standalone): Displays the event's title.
- EventDetails: (Takes Children): A container component that wraps the event's date, location, and description.
- EventDate: (Standalone): Displays the event's date.
- EventLocation: (Standalone): Displays the event's location.
- EventDescription: (Standalone): Displays the event's short description.
html:
<div class=""max-w-md mx-auto bg-white rounded-lg shadow-md p-4""><EventCard><EventImage/><EventTitle/><EventDetails><EventDate/><EventLocation/><EventDescription/></EventDetails></EventCard></div>
component html:
EventCard:
<div class=""flex flex-col md:flex-row justify-between"">{children}</div>
EventImage:
<img src={image_url} alt={image_alt} class=""w-full md:w-48 h-48 object-cover rounded-lg""/>
EventTitle:
<h2 class=""font-bold text-lg"">{event_title}</h2>
EventDetails:
<div class=""flex flex-col xl:flex-row justify-between xl:items-center"">{children}</div>
EventDate:
<p class=""text-sm text-gray-600"">{event_date}</p>
EventLocation:
<p class=""text-sm text-gray-600"">{event_location}</p>
EventDescription:
<p class=""text-sm text-gray-600"">{event_description}</p>"
Trees,"description:
The UI should display a collection of trees, with each tree displayed as a card that shows its name, species, and a picture. The cards should be arranged in a grid, with multiple cards per row on larger screens and a single card per row on smaller screens.
components:
- TreeCard: a standalone component that displays a single tree, including its name, species, and picture.
- TreeGrid: a component that takes children, which are multiple `TreeCard` components, and arranges them in a grid.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><h1 class=""text-3xl mb-4"">Trees</h1><TreeGrid><TreeCard/><TreeCard/><!-- Add more TreeCard components here --></TreeGrid></div>
component html:
TreeCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><img src=""{tree_image_url}"" alt=""{tree_name}"" class=""w-full h-48 object-cover rounded-t""><h2 class=""text-lg"">{tree_name}</h2><p>Species: {tree_species}</p></div>
TreeGrid:
<div class=""grid gap-4 md:grid-cols-2 lg:grid-cols-3"">{children}</div>"
Like Button: Button for liking a post,"description:
The Like Button should be a small, clickable icon with a heart symbol. When the user clicks the button, the heart symbol should turn red to indicate that the post has been liked. The button should also display the number of likes next to the heart symbol.
components:
- LikeButton: standalone
- LikeCounter: standalone
html:
<div class=""flex gap-2""><LikeButton/><LikeCounter/></div>
component html:
LikeButton:
<button class=""p-2 rounded hover:bg-gray-200 active:bg-gray-300"">{liked ? <span class=""text-red-600"">♥</span>: <span>♥</span>}</button>
LikeCounter:
<p class=""text-sm text-gray-600"">{like_count} likes</p>"
Navigation menu with mailbox folders and labels,"description:
The UI should be a navigation menu with folder and label categories, each containing a list of items. The menu should be responsive, mobile-first, and accessible. It should have a clean and simple design, with clear typography and sufficient whitespace.
components:
- MailboxNavItem: Standalone component representing a single navigation item (e.g., folder or label).
- MailboxNavList: Component that contains a list of `MailboxNavItem`s, takes children.
- MailboxNav: Top-level component that contains the entire navigation menu, takes children.
html:
<nav class=""max-w-md mx-auto p-4 lg:p-6""><ul class=""flex flex-col lg:flex-row lg:items-center lg:justify-between""><MailboxNavList><MailboxNavItem/><!-- more navigation items --></MailboxNavList></ul><MailboxNav><MailboxNavList><MailboxNavItem/><!-- more navigation items --></MailboxNavList></MailboxNav></nav>
component html:
MailboxNavItem:
<li class=""py-2 lg:py-4""><a href=""{href}"" class=""block py-2 px-4"">{text}</a></li>
MailboxNavList:
<ul class=""flex flex-col lg:flex-row lg:items-center lg:justify-between"">{children}</ul>
MailboxNav:
<nav class=""max-w-md mx-auto p-4 lg:p-6"">{children}</nav>"
Comment Section,"description:
The comment section should display a list of comments with the commenter's name, profile picture, comment text, and a timestamp. The section should be responsive, with the profile picture and commenter's name on the same line on larger screens, and stacked on top of each other on smaller screens.
components:
- CommentCard: (standalone): A single comment with the commenter's name, profile picture, comment text, and timestamp.
- CommentList: (takes children): A list of `CommentCard` components.
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><h2 class=""text-lg font-bold mb-4"">Comments</h2><CommentList><CommentCard/><CommentCard/><!-- Add more CommentCard components here --></CommentList></div>
component html:
CommentCard:
<div class=""flex items-start mb-4""><img src=""{profile_picture_url}"" alt=""{commenter_name}"" class=""w-12 h-12 rounded-full mr-4""/><div><h3 class=""text-sm font-bold"">{commenter_name}</h3><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-500"">{timestamp}</p></div></div>
CommentList:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Footer Newsletter Label,"description:
The UI should be a responsive footer newsletter label that is easily readable on various devices. It should have a clean and simple design, with a subtle background color and a prominent call-to-action (CTA) button. The label should be accessible and SEO-friendly.
components:
- FooterNewsletterLabel: standalone
- NewsletterInput: standalone
- CTAButton: standalone
html:
<footer class=""bg-gray-200 py-12""><div class=""max-w-md mx-auto px-4""><FooterNewsletterLabel/><form><NewsletterInput/><CTAButton/></form></div></footer>
component html:
FooterNewsletterLabel:
<p class=""text-lg text-gray-600"">{newsletter_label_text}</p>
NewsletterInput:
<input type=""email"" class=""w-full p-2 pl-10 text-sm text-gray-700"" placeholder=""Enter your email address""/>
CTAButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Subscribe</button>"
Table pagination,"description:
The UI consists of a table displaying data with a set of pagination controls below it. The table should be clearly visible with headers that distinguish each column. The pagination controls will include buttons to navigate to the first, previous, next, and last pages, as well as input for jumping to a specific page.
components:
- DataTable: Standalone component containing the table with data.
- PaginationControls: Standalone component containing the pagination buttons and page input.
html:
<div class=""container mx-auto p-4""><DataTable/><PaginationControls/></div>
component html:
DataTable:
<table class=""min-w-full divide-y divide-gray-300""><thead class=""bg-gray-50""><tr><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 1 </th><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 2 </th><th scope=""col"" class=""px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"">Header 3 </th></tr></thead><tbody class=""bg-white divide-y divide-gray-200""><tr><td class=""px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"">Data 1</td><td class=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Data 2</td><td class=""px-6 py-4 whitespace-nowrap text-sm text-gray-500"">Data 3</td></tr><!-- Additional rows --></tbody></table>
PaginationControls:
<div class=""flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6""><div class=""flex justify-between flex-1 sm:hidden""><a href=""#"" class=""relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"">Previous</a><a href=""#"" class=""ml-3 relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"">Next</a></div><div class=""hidden sm:flex-1 sm:flex sm:items-center sm:justify-between""><div><p class=""text-sm text-gray-700"">Showing <span class=""font-medium"">{from}</span>to <span class=""font-medium"">{to}</span>of <span class=""font-medium"">{total}</span>results </p></div><div><nav class=""relative z-0 inline-flex rounded-md shadow-sm -space-x-px"" aria-label=""Pagination""><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50"">First </a><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50"">Previous </a><!-- Links for jumping to specific pages might be dynamically generated here --><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50"">Next </a><a href=""#"" class=""relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50"">Last </a></nav></div></div></div>"
Quote controls,"description:
A quote control should display a quote with an author, and possibly an image of the author. The quote should be the main focus, with the author's name and image as secondary information. The component should be responsive and accessible.
components:
- QuoteControl: standalone component that contains a quote, author, and optional author image.
- QuoteText: standalone component that displays the quote text.
- AuthorInfo: standalone component that displays the author's name and optional image.
html:
<section class=""max-w-md mx-auto p-4""><QuoteControl/></section>
component html:
QuoteControl:
<div class=""flex flex-col lg:flex-row items-center mb-8""><AuthorInfo/><QuoteText/></div>
QuoteText:
<blockquote class=""text-lg font-serif mb-4"">{quote_text}</blockquote>
AuthorInfo:
<div class=""flex flex-col lg:flex-row items-center"">{author_image_url && <img src={author_image_url} alt={author_name} class=""w-12 h-12 rounded-full mr-4""/>} <cite class=""text-sm"">{author_name}</cite></div>"
Sidebars,"description:
The UI should have a responsive sidebar that takes up the full height of the viewport. On smaller screens, the sidebar should collapse into a hamburger menu. When the hamburger menu is clicked, the sidebar should slide out from the left side of the screen.
components:
- Sidebar: A standalone component that contains the sidebar content.
- SidebarHeader: A standalone component that contains the header of the sidebar.
- SidebarLink: A component that takes children (i.e. the link text) and represents a single link in the sidebar.
html:
<div class=""flex h-screen""><Sidebar/><main class=""flex-1 p-4"">Main content</main></div>
component html:
Sidebar:
<div class=""h-screen p-4 bg-gray-100 w-64 fixed top-0 left-0""><SidebarHeader/><ul><li><SidebarLink>{link1_text}</SidebarLink></li><li><SidebarLink>{link2_text}</SidebarLink></li><!-- Add more links here --></ul><!-- Add a hamburger menu button for small screens --><button class=""lg:hidden absolute top-0 right-0 p-4"" aria-label=""Toggle sidebar""><span class=""sr-only"">Toggle sidebar</span><svg/* omitted for simplicity */></button></div>
SidebarHeader:
<header class=""text-lg font-bold mb-4"">{sidebar_header_text}</header>
SidebarLink:
<a class=""block p-2 hover:bg-gray-200"">{children}</a>"
"A testimonial component that displays a quote, reviewer's name, and a small image","description:
The testimonial component should have a clean and simple design, with a prominent quote, followed by the reviewer's name and a small image. The component should be responsive and adapt to different screen sizes. On smaller screens, the image should be small and circular, while on larger screens, it can be slightly larger. The quote should be in a large font size and the reviewer's name should be in a smaller font size.
components:
- TestimonialComponent: (Takes Children): This component contains a quote, reviewer's name, and a small image. It should have a max width and be centered on the screen.
- ReviewerInfo: (Standalone): This component displays the reviewer's name and a small image.
- ReviewerImage: (Standalone): This component displays a small circular image of the reviewer.
html:
<div class=""max-w-md mx-auto p-4 lg:p-6""><TestimonialComponent><!-- quote and reviewer info will go here --></TestimonialComponent></div>
component html:
TestimonialComponent:
<div class=""bg-white shadow-md rounded p-4 lg:p-6"">{children}</div>
ReviewerInfo:
<div class=""flex items-center mt-4 lg:mt-6""><ReviewerImage/><p class=""text-sm lg:text-base"">{reviewer_name}</p></div>
ReviewerImage:
<img src={reviewer_image_url} alt={reviewer_name} class=""w-12 h-12 rounded-full mr-2 lg:w-16 lg:h-16""/>"
Comment section,"description:
The comment section should display a list of comments with the author's name, profile picture, comment text, and timestamp. The profile picture should be a circular image. The comment text should be wrapped to the next line if it's too long. There should be a ""Reply"" button below each comment. The comment section should be responsive and adapt to different screen sizes.
components:
- CommentCard: A standalone component that displays a single comment.
- CommentList: A component that takes children (multiple `CommentCard`s) and displays them in a list.
html:
<div class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold"">Comments</h2><CommentList><CommentCard/><CommentCard/><!-- Add more CommentCard components here --></CommentList></div>
component html:
CommentCard:
<div class=""flex mb-4""><img src={avatar_url} alt=""Profile picture"" class=""w-12 h-12 rounded-full mr-4""/><div><h3 class=""text-sm font-bold"">{author_name}</h3><p class=""text-sm"">{comment_text}</p><p class=""text-xs text-gray-600"">{timestamp}</p><button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Reply </button></div></div>
CommentList:
<ul class=""list-none p-0"">{children}</ul>"
User Profiles and Achievements,"description:
The UI should display a user's profile information and achievements in a clean and modern layout. The profile section should show the user's name, profile picture, and bio. The achievements section should display a list of badges or icons representing the user's accomplishments.
components:
- UserProfileCard: A standalone component that displays the user's profile information.
- AchievementBadge: A standalone component that displays a single achievement badge.
- AchievementList: A component that takes children (a list of `AchievementBadge` components).
html:
<div class=""max-w-md mx-auto p-4""><UserProfileCard/><h2 class=""text-lg font-bold mb-2"">Achievements</h2><AchievementList><AchievementBadge/><AchievementBadge/><!-- more AchievementBadge components here --></AchievementList></div>
component html:
UserProfileCard:
<div class=""bg-white shadow-md rounded p-4""><img src={profile_picture_url} class=""w-16 h-16 rounded-full"" alt=""Profile Picture""/><h2 class=""text-lg font-bold"">{username}</h2><p class=""text-gray-600"">{bio}</p></div>
AchievementBadge:
<div class=""bg-yellow-100 rounded p-2""><img src={badge_icon_url} class=""w-8 h-8"" alt=""Achievement Badge""/><span class=""text-sm"">{badge_name}</span></div>
AchievementList:
<ul class=""flex flex-wrap justify-center"">{children}</ul>"
"A ""Popular Destinations"" section with a heading and a list of 5-6 destinations","description:
The UI should have a clear heading that stands out, followed by a list of destinations that are visually appealing and easy to scan. The layout should scale well on different screen sizes, with a single-column layout on mobile devices and a multi-column layout on larger screens.
components:
- DestinationList: (Takes Children): A container component that holds a list of destinations.
- DestinationItem: (Standalone): A single destination item in the list, containing a title, image, and description.
html:
<section class=""bg-gray-100 py-12""><h2 class=""text-3xl font-bold mb-4"">Popular Destinations</h2><DestinationList><!-- destination items will be rendered here --></DestinationList></section>
component html:
DestinationList:
<ul class=""flex flex-wrap justify-center mb-4"">{children}</ul>
DestinationItem:
<li class=""w-full md:w-1/2 lg:w-1/3 xl:w-1/4 p-4""><img src={image_url} alt={destination_title} class=""w-full h-48 object-cover mb-2""/><h3 class=""text-lg font-bold"">{destination_title}</h3><p class=""text-gray-600"">{destination_description}</p><button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Learn More</button></li>"
Investment portfolio tracker,"description:
The UI should be a responsive, mobile-first investment portfolio tracker that displays a list of investments with their respective details. The tracker should have a clean and minimalistic design, with clear typography and ample whitespace. On larger screens, the tracker should display a sidebar with filters and sorting options, while on smaller screens, the filters and sorting options should be accessible through a dropdown menu.
components:
- InvestmentCard: (standalone): Displays a single investment with its details.
- InvestmentList: (takes children): Displays a list of `InvestmentCard` components.
- FilterSidebar: (standalone): Displays filters and sorting options for the investments.
- FilterDropdown: (standalone): Displays filters and sorting options for the investments on smaller screens.
html:
<div class=""flex h-screen max-h-screen overflow-hidden""><aside class=""lg:w-64 xl:w-80 hidden lg:block""><FilterSidebar/></aside><div class=""lg:flex-1 xl:flex-1 p-4""><div class=""lg:hidden xl:hidden""><FilterDropdown/></div><InvestmentList><InvestmentCard/><InvestmentCard/><!-- more InvestmentCard components --></InvestmentList></div></div>
component html:
InvestmentCard:
<div class=""bg-white shadow-md rounded p-4 mb-4""><h2 class=""text-lg"">{investment_name}</h2><p class=""text-gray-600"">{investment_type}</p><p class=""text-gray-600"">{current_value} ({current_change}%)</p></div>
InvestmentList:
<div class=""flex flex-wrap -mx-4"">{children}</div>
FilterSidebar:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">Filters</h2><form><label class=""block text-gray-600"">Investment Type</label><select class=""block w-full p-2""><option value="""">All</option><option value=""stock"">Stock</option><option value=""bond"">Bond</option><!-- more options --></select><label class=""block text-gray-600"">Sort By</label><select class=""block w-full p-2""><option value="""">Alphabetical</option><option value=""current_value"">Current Value</option><option value=""current_change"">Current Change</option><!-- more options --></select></form></div>
FilterDropdown:
<div class=""bg-white shadow-md rounded p-4""><h2 class=""text-lg"">Filters</h2><form><label class=""block text-gray-600"">Investment Type</label><select class=""block w-full p-2""><option value="""">All</option><option value=""stock"">Stock</option><option value=""bond"">Bond</option><!-- more options --></select><label class=""block text-gray-600"">Sort By</label><select class=""block w-full p-2""><option value="""">Alphabetical</option><option value=""current_value"">Current Value</option><option value=""current_change"">Current Change</option><!-- more options --></select></form><button class=""block w-full p-2 bg-blue-500 hover:bg-blue-700 text-white font-bold"">Apply Filters</button></div>"
Slider/Carousel for Promotions,"description:
The UI should be a responsive slider/carousel that displays promotions or offers with images, headings, and descriptions. It should be accessible and easy to use on various devices.
components:
- PromotionSlide: A standalone component that represents a single slide in the carousel. It contains an image, heading, and description.
- PromotionCarousel: A component that takes children and renders a carousel of promotion slides.
html:
<section class=""max-w-md mx-auto p-4 pt-6""><h2 class=""text-lg font-bold mb-4"">Current Promotions</h2><PromotionCarousel><PromotionSlide/><PromotionSlide/><PromotionSlide/></PromotionCarousel></section>
component html:
PromotionSlide:
<div class=""flex flex-col md:flex-row items-center mb-4""><img src={image_url} alt={alt_text} class=""w-full md:w-1/2 object-cover""/><div class=""md:ml-4""><h3 class=""text-lg font-bold mb-2"">{heading}</h3><p class=""text-sm"">{description}</p></div></div>
PromotionCarousel:
<div class=""overflow-x-auto whitespace-nowrap"">{children}</div>"
Company Address Info,"description:
A compact, responsive section displaying a company's address information, including street address, city, state, zip, phone number, and email address.
components:
- AddressInfo: standalone component
- AddressLine: takes children
- ContactInfo: takes children
html:
<div class=""max-w-md mx-auto p-4 md:p-6 lg:p-12""><AddressInfo/></div>
component html:
AddressInfo:
<div class=""flex flex-wrap mb-4""><AddressLine>{street_address}</AddressLine><AddressLine>{city}, {state} {zip}</AddressLine><ContactInfo><a href={`tel:{phone_number}`} class=""text-indigo-600 hover:text-indigo-900"">{phone_number} </a><a href={`mailto:{email}`} class=""text-indigo-600 hover:text-indigo-900"">{email} </a></ContactInfo></div>
AddressLine:
<p class=""text-gray-600"">{children}</p>
ContactInfo:
<div class=""flex flex-wrap"">{children}</div>"
A hero section with a high-quality background image of a futuristic/technological scene,"description:
The hero section should have a high-quality background image of a futuristic/technological scene, taking up the full height and width of the screen. The image should be blurred and darkened to make the text and other elements stand out. The section should have a consistent color scheme with a dark blue or purple tone, with accents of bright blue and green to give it a futuristic feel. The text should be large and centered, with a bold font to grab the user's attention.
components:
- HeroSection: (Takes Children): This component will contain the background image, heading, and subheading.
- HeroBackground: (Standalone): This component will contain the background image.
- HeroContent: (Takes Children): This component will contain the heading and subheading.
html:
<div class=""h-screen w-full flex justify-center items-center""><HeroSection><HeroBackground/><HeroContent>{children}
</HeroContent></HeroSection></div>
component html:
HeroSection:
<div class=""absolute top-0 left-0 h-screen w-full flex justify-center items-center"">{children}</div>
HeroBackground:
<div class=""absolute top-0 left-0 h-screen w-full bg-cover bg-center"" style=""backgroundImage: url({heroBackgroundImage});""}/>
HeroContent:
<div class=""text-3xl text-white font-bold text-center""><h1 class=""mb-4"">{heroHeading}</h1><p class=""text-lg"">{heroSubheading}</p>{children}</div>"
Social Media Follow Count,"description:
The UI should display a list of social media platforms with their corresponding follow counts. Each platform should have an icon, the platform name, and the number of followers. The UI should be responsive, with a maximum width of 300px on desktop and stacked on mobile devices.
components:
- SocialMediaItem: (standalone): represents a single social media platform with its follow count
- SocialMediaList: (takes children): the container for the list of social media platforms
html:
<div class=""max-w-md mx-auto p-4""><SocialMediaList><SocialMediaItem/><SocialMediaItem/><SocialMediaItem/></SocialMediaList></div>
component html:
SocialMediaItem:
<div class=""flex items-center mb-4""><img src={icon_url} alt={platform_name} class=""w-8 h-8 mr-2""/><div><p class=""text-lg"">{platform_name}</p><p class=""text-sm"">{follower_count} followers</p></div></div>
SocialMediaList:
<ul class=""list-none mb-0"">{children}</ul>"
Job application form,"description:
The UI should be a simple, responsive job application form with fields for name, email, phone number, resume upload, and a message. It should be easily accessible and readable on various devices.
components:
- ApplicationHeader: (standalone): A header component displaying the title of the job application form.
- FormField: (takes children): A wrapper component for each form field, including labels and input fields.
- ResumeUpload: (standalone): A component for uploading a resume file.
- MessageField: (standalone): A textarea component for the applicant's message.
- SubmitButton: (standalone): A submit button component.
html:
<div class=""container mx-auto p-4 pt-6 md:p-6 lg:p-12""><ApplicationHeader/><form><FormField><label for=""name"">Name</label><input type=""text"" id=""name"" class=""w-full p-2""/></FormField><FormField><label for=""email"">Email</label><input type=""email"" id=""email"" class=""w-full p-2""/></FormField><FormField><label for=""phone"">Phone Number</label><input type=""tel"" id=""phone"" class=""w-full p-2""/></FormField><ResumeUpload/><FormField><label for=""message"">Message</label><MessageField/></FormField><SubmitButton/></form></div>
component html:
ApplicationHeader:
<h2 class=""text-2xl font-bold mb-4"">Job Application Form</h2>
FormField:
<div class=""mb-4""><label for=""{inputId}"" class=""block mb-2"">{label}</label>{children}</div>
ResumeUpload:
<div class=""mb-4""><label for=""resume"" class=""block mb-2"">Resume</label><input type=""file"" id=""resume"" class=""w-full p-2""/></div>
MessageField:
<textarea id=""message"" class=""w-full p-2 h-40"" placeholder=""Write a message...""></textarea>
SubmitButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Apply Now</button>"
"Game tile component with a rectangular shape, dark background, and neon green outline","description:
1. The game tile component should be a rectangular shape with a dark background and a neon green outline. It should be responsive and scale well on different screen sizes.
components:
- GameTile: (Takes Children): This component represents a single game tile. It should have a dark background, a neon green outline, and display the child content in a centered and vertically aligned manner.
html:
<div class=""flex flex-wrap justify-center mb-4""><GameTile><!-- child content --></GameTile><GameTile><!-- child content --></GameTile><!-- more GameTile components --></div>
component html:
GameTile:
<div class=""w-48 h-64 bg-dark-900 rounded-md p-4 border-2 border-neonGreen shadow-md""><div class=""flex h-full justify-center items-center"">{children} </div></div>"
Chart control,"description:
The UI for a Chart Control should display a chart and include interactive elements such as buttons or dropdowns to adjust the view of the chart (e.g., changing the chart type or the data displayed). This UI can consist of a chart area, a set of control buttons like 'Bar', 'Line', 'Pie' to change the chart type, and possibly a dropdown to select different data sets.
components:
- ChartArea: Standalone component where the chart itself is displayed.
- ControlBar: Standalone component that contains interactive elements such as buttons or dropdowns to manipulate the chart.
html:
<div class=""flex flex-col space-y-4""><ControlBar/><ChartArea/></div>
component html:
ChartArea:
<!-- Chart display area --><div class=""w-full h-64 bg-gray-200""><!-- Placeholder for the chart content --><p class=""text-center text-gray-500 pt-20"">Chart content goes here.</p></div>
ControlBar:
<!-- Control bar with buttons for changing the chart type --><div class=""flex justify-center space-x-2""><button class=""px-3 py-2 bg-blue-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-300"">Bar</button><button class=""px-3 py-2 bg-green-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-green-300"">Line</button><button class=""px-3 py-2 bg-purple-500 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-purple-300"">Pie</button></div>"
Visual representation of content loading progress,"description:
The UI should display a responsive, mobile-first, and accessible visual representation of content loading progress, indicating the percentage of completion. The UI should be aesthetically pleasing and provide a clear understanding of the loading progress.
components:
- LoadingBar: (standalone): A horizontal bar that fills up to represent the progress of content loading.
- ProgressLabel: (standalone): A label that displays the percentage of content loading progress.
html:
<div class=""flex justify-center mb-4""><LoadingBar/><ProgressLabel/></div>
component html:
LoadingBar:
<div class=""bg-gray-200 h-2 w-full rounded""><div class=""bg-orange-500 h-2 rounded"" style=""width: {progressPercentage}%;""}></div></div>
ProgressLabel:
<p class=""text-sm"">{progressPercentage}%</p>"
Pagination Previous Link,"description:
The UI should be a disabled or enabled previous link element for pagination, indicating the ability to navigate to the previous page. The link should be responsive, mobile-first, accessible, and SEO-friendly.
components:
- PaginationPreviousLink: Standalone component, indicates the ability to navigate to the previous page.
html:
<nav aria-label=""Pagination""><PaginationPreviousLink/><!-- Other pagination links will go here --></nav>
component html:
PaginationPreviousLink:
<a href=""{previous_page_url}"" class=""rounded-md py-2 px-4 {disabled ? 'cursor-not-allowed opacity-50' : 'bg-gray-100 hover:bg-gray-200'}"" aria-disabled={disabled ? 'true' : 'false'}>{disabled ? '« Previous' : '‹ Previous'}</a>"
Quote bubbles with a bright accent color and a subtle gradient effect for user testimonials,"description:
The UI should have a modern and clean design, with a bright accent color to draw attention to the testimonials. The quote bubbles should have a subtle gradient effect to add depth and dimension. The layout should be responsive and adaptable to different screen sizes.
components:
- TestimonialCard: (Takes Children): A component that wraps around a quote and the person's name and title. It should have a subtle gradient effect and a bright accent color. On mobile, it should take up the full width of the screen. On larger screens, it should have a maximum width of 500px and be centered horizontally.
- QuoteBubble: (Takes Children): A component that wraps around the quote text. It should have a bright accent color and a subtle gradient effect. On mobile, the font size should be 18px. On larger screens, the font size should be 24px.
- AuthorInfo: (Takes Children): A component that displays the person's name and title. It should be displayed below the quote bubble. On mobile, the font size should be 16px. On larger screens, the font size should be 18px.
html:
<div class=""flex flex-wrap justify-center mb-8""><TestimonialCard><QuoteBubble>{quote_text}</QuoteBubble><AuthorInfo>{author_name}, {author_title}</AuthorInfo></TestimonialCard></div>
component html:
TestimonialCard:
<div class=""max-w-md mx-auto bg-white shadow-md rounded-xl p-4"">{children}</div>
QuoteBubble:
<blockquote class=""relative p-4 text-lg md:text-2xl bg-gradient-to-r from-orange-400 to-orange-600 text-white rounded-xl""><span class=""absolute top-0 left-0 -ml-4 -mt-4"">{children}</span></blockquote>
AuthorInfo:
<p class=""text-gray-600 text-sm md:text-base"">{children}</p>"
Horizontal divider line to separate sections,"description:
The UI should feature a horizontal divider line that separates sections of content. The divider line should be visually appealing, accessibility-friendly, and responsive to different screen sizes.
components:
- HorizontalDivider: (Standalone): A horizontal divider line that separates sections of content. The divider line should have a subtle shadow to add depth and a light gray color to blend with the surrounding content.
html:
<div class=""container mx-auto p-4""><!-- Section 1 content --><HorizontalDivider/><!-- Section 2 content --></div>
component html:
HorizontalDivider:
<hr class=""border-none h-px bg-gray-200 shadow-md""/>"
Customer reviews section,"description:
The UI should display a list of customer reviews, each with a rating, name, review text, and date. The reviews should be responsive, with a mobile-first design, and accessible for screen readers.
components:
- ReviewCard: A standalone component representing a single customer review.
- ReviewSection: A component that takes child `ReviewCard` components and displays them in a list.
html:
<div class=""max-w-md mx-auto my-12""><h2 class=""text-2xl font-bold mb-4"">Customer Reviews</h2><ReviewSection><ReviewCard/><ReviewCard/><!-- Add more ReviewCard components here --></ReviewSection></div>
component html:
ReviewCard:
<div class=""bg-white p-4 mb-4 shadow-md""><div class=""flex items-center mb-2""><span class=""text-lg font-bold"">{rating}/ 5</span><span class=""text-gray-500 ml-2"">{date}</span></div><p class=""text-lg"">{review_text}</p><p class=""text-gray-500"">— {name}</p></div>
ReviewSection:
<ul class=""list-none p-0 m-0"">{children}</ul>"
Featured Story with Large Header Text,"description:
The UI should display a featured story with a large header text, accompanied by a brief description and a call-to-action button. The design should be responsive, mobile-first, and accessible.
components:
- FeaturedStoryHeader: Standalone, displays the large header text.
- StoryDescription: Standalone, displays a brief description of the story.
- CallToActionButton: Standalone, displays a call-to-action button.
html:
<section class=""container mx-auto p-4 md:p-6 lg:p-12""><div class=""flex justify-center mb-4""><FeaturedStoryHeader/></div><StoryDescription/><div class=""text-center""><CallToActionButton/></div></section>
component html:
FeaturedStoryHeader:
<h1 class=""text-3xl md:text-4xl lg:text-5xl"">{story_title}</h1>
StoryDescription:
<p class=""text-lg md:text-xl lg:text-2xl"">{story_description}</p>
CallToActionButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">{call_to_action_text}</button>"
Definition description,"description:
The UI should be a simple definition description component that displays a term and its description. The term should be in a larger font size and bold, and the description should be in a regular font size.
components:
- DefinitionTerm: (standalone): Displays the term in a larger font size and bold.
- DefinitionDescription: (standalone): Displays the description in a regular font size.
html:
<article class=""max-w-md mx-auto p-4""><DefinitionTerm/><DefinitionDescription/></article>
component html:
DefinitionTerm:
<h2 class=""text-lg font-bold"">{term}</h2>
DefinitionDescription:
<p class=""text-gray-600"">{description}</p>"
Table filters,"description:
The UI will consist of a table with multiple columns and data rows. Above the table, there will be filter inputs corresponding to each column. This allows users to enter filter criteria to refine the data displayed in the table.
components:
- FilterBar: Standalone component. Contains individual filters for each column of the table.
- DataTable: Takes children. This is the main component where the data rows are displayed under respective column headings.
- FilterInput: Standalone component. Used within the FilterBar for entering filter criteria for specific table columns.
html:
<div class=""container mx-auto p-4""><FilterBar/><DataTable><!-- Row entries go here --><tr><td>{data_entry_1}</td><td>{data_entry_2}</td><td>{data_entry_3}</td></tr><!-- Additional rows as needed --></DataTable></div>
component html:
FilterBar:
<div class=""flex justify-between py-2""><FilterInput/><FilterInput/><FilterInput/></div>
DataTable:
<table class=""min-w-full leading-normal""><thead><tr><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 1</th><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 2</th><th class=""px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider"">Column 3</th></tr></thead><tbody>{children} </tbody></table>
FilterInput:
<input type=""text"" class=""shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"" placeholder=""Filter..."" aria-label=""Filter""/>"
State/Province/Country Selects,"description:
A responsive form section with three connected selects for state/province, country, and an additional optional input for zip/postal code. The selects should be mobile-friendly and have accessible labels.
components:
- CountrySelect: Standalone, renders a select element for country selection
- StateSelect: Standalone, renders a select element for state/province selection, dependent on the country selection
- ZipInput: Standalone, renders an input element for zip/postal code
- LocationForm: Component that takes children, renders a div containing the country, state/province, and zip/postal code inputs
html:
<form><LocationForm><CountrySelect/><StateSelect/><ZipInput/></LocationForm></form>
component html:
CountrySelect:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""country"">Country</label><select class=""block w-full pl-10 text-sm text-gray-700"" id=""country"" name=""country"">{countryOptions} </select></div>
StateSelect:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""state_province"">State/Province</label><select class=""block w-full pl-10 text-sm text-gray-700"" id=""state_province"" name=""state_province"">{stateProvinceOptions} </select></div>
ZipInput:
<div class=""flex flex-col mb-4""><label class=""block text-gray-700 text-sm font-bold mb-2"" for=""zip_postal_code"">Zip/Postal Code</label><input class=""block w-full pl-10 text-sm text-gray-700"" id=""zip_postal_code"" name=""zip_postal_code"" type=""text"" inputmode=""numeric""/></div>
LocationForm:
<div class=""max-w-md mx-auto p-4 pt-6"">{children}</div>"
Post Feed List: Displays a list of user posts,"description:
A scrollable list of posts with each post displaying the user's profile picture, username, post content, and timestamp. The list should be responsive, with each post stretching across the full width on mobile devices and being arranged in a grid on larger screens.
components:
- PostListItem: A standalone component for each post item in the list.
- UserProfilePicture: A standalone component for displaying a user's profile picture.
- PostContent: A standalone component for displaying the content of a post.
- PostMetadata: A standalone component for displaying the timestamp and other metadata of a post.
html:
<div class=""max-w-md mx-auto p-4 pt-6 md:p-6 lg:p-12""><h2 class=""text-2xl font-bold"">Post Feed</h2><ul class=""divide-y divide-gray-200""><PostListItem/><PostListItem/><!-- More post list items --></ul></div>
component html:
PostListItem:
<li class=""py-4""><UserProfilePicture/><div class=""flex-1 ml-4""><PostContent/><PostMetadata/></div></li>
UserProfilePicture:
<img src=""{user_profile_picture_url}"" alt=""User Profile Picture"" class=""w-10 h-10 rounded-full mr-2""/>
PostContent:
<p class=""text-lg"">{post_content}</p>
PostMetadata:
<p class=""text-sm text-gray-600"">{timestamp} by <span class=""font-bold"">{username}</span></p>"
"A comment component with a white background, rounded corners, and a subtle shadow","description:
The Comment component should have a clean and minimalistic design, with a white background, rounded corners, and a subtle shadow to give it a soft, elevated look. On smaller screens, the component should be full-width, while on larger screens, it should have a maximum width to prevent it from taking up too much space.
components:
- Comment: (Takes Children): A single comment with a white background, rounded corners, and a subtle shadow.
html:
<Comment>{children}</Comment>
component html:
Comment:
<div class=""bg-white rounded-md shadow-sm p-4"">{children}</div>"
Quiz question display,"description:
The UI should display a quiz question with options to choose from. The question should be prominently displayed, and the options should be listed below it. The UI should be responsive and adapt to different screen sizes.
components:
- QuizQuestion: (standalone): Displays the quiz question.
- OptionList: (takes children): Lists the options for the quiz question.
- Option: (standalone): Displays a single option.
html:
<div class=""md:w-1/2 xl:w-1/3 mx-auto p-4""><QuizQuestion/><OptionList><Option/><Option/><Option/><!-- Add more options here --></OptionList></div>
component html:
QuizQuestion:
<h2 class=""text-2xl font-bold"">{question_text}</h2>
OptionList:
<ul class=""list-none mb-4"">{children}</ul>
Option:
<li class=""mb-2""><input type=""radio"" id=""{option_id}"" name=""option""/><label for=""{option_id}"" class=""ml-2"">{option_text}</label></li>"
Product Feature Icon List,"description:
The UI should be a list of icons with accompanying text that highlight key features of a product. The list should be responsive, with icons and text aligned horizontally on larger screens and stacked vertically on smaller screens.
components:
- FeatureIcon: A standalone component that displays an icon and associated text.
- FeatureIconList: A component that takes children and displays them in a list.
html:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start""><FeatureIconList><FeatureIcon/><FeatureIcon/><FeatureIcon/></FeatureIconList></ul>
component html:
FeatureIcon:
<li class=""lg:w-1/2 xl:w-1/3 md:w-full px-4 md:px-8 mb-8 md:mb-4""><i class=""fas fa-{icon_class} text-{icon_color}"">{icon_size}</i><p class=""text-lg"">{feature_text}</p></li>
FeatureIconList:
<ul class=""flex flex-wrap justify-center md:flex-row md:justify-start"">{children}</ul>"
Make a subtle loading animation with a spinning circle and gray fill,"description:
The loading animation should be a simple, subtle animation that indicates to the user that the app is processing or loading data. It should be a spinning circle with a gray fill color. The animation should be smooth and continuous, with a moderate speed to convey a sense of progress without being too distracting.
components:
- SpinningCircle: (Standalone): A spinning circle with a gray fill color. The circle should be moderately sized and centered horizontally.
html:
<div class=""flex h-screen justify-center items-center""><SpinningCircle/></div>
component html:
SpinningCircle:
<div class=""animate-spin rounded-full h-12 w-12 border-4 border-gray-300 border-solid""/>"
Personal interests and hobbies section with icons,"description:
The UI should display a list of personal interests and hobbies, each accompanied by an icon that represents the interest or hobby. The list should be responsive, with a maximum of 3 items per row on larger screens, and a single column on mobile devices.
components:
- InterestItem: (standalone): Represents a single interest or hobby, consisting of an icon and a label.
- InterestsList: (takes children): A container for a list of `InterestItem`s.
html:
<section class=""max-w-md mx-auto p-4""><h2 class=""text-lg font-bold mb-4"">Personal Interests and Hobbies</h2><InterestsList><InterestItem/><InterestItem/><InterestItem/><!-- Add more InterestItem components as needed --></InterestsList></section>
component html:
InterestItem:
<div class=""flex items-center mb-4""><i class={`w-6 h-6 text-lg {icon_class}`}></i><span class=""ml-2"">{interest_label}</span></div>
InterestsList:
<ul class=""flex flex-wrap justify-center md:flex-nowrap md:flex-row"">{children}</ul>"
A banner with a motivational quote and a call-to-action (CTA) to sign up for a free trial,"description:
The UI should be a hero banner that grabs the user's attention with a motivational quote, accompanied by a prominent call-to-action (CTA) to sign up for a free trial. The design should be clean, modern, and responsive, with a clear visual hierarchy to guide the user's attention.
components:
- HeroBanner: (Takes Children): A full-width banner that contains a quote and a CTA.
- Quote: (Standalone): Displays the motivational quote.
- CallToAction: (Standalone): A prominent button to sign up for a free trial.
html:
<HeroBanner><Quote/><CallToAction/></HeroBanner>
component html:
HeroBanner:
<section class=""h-screen bg-gradient-to-r from-blue-500 to-purple-500""><div class=""container mx-auto p-4 md:p-6 lg:p-8"">{children} </div></section>
Quote:
<blockquote class=""text-3xl font-bold text-white mb-4"">""{motivational_quote}""</blockquote>
CallToAction:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"">Sign up for a free trial</button>"
Typography/Font Styles,"description:
The UI should display a selection of typography/font styles, showcasing different font sizes, weights, and styles. The layout should be clean, minimal, and responsive.
components:
- TypographySample: a standalone component that displays a single typography sample with a specific font style.
- TypographySection: a component that takes children, which is a collection of `TypographySample` components.
html:
<div class=""max-w-md mx-auto p-4""><TypographySection><TypographySample/><TypographySample/><TypographySample/><!-- Add more TypographySample components here --></TypographySection></div>
component html:
TypographySample:
<p class=""text-{font_size} font-{font_weight} {font_style}"">{sample_text}</p>
TypographySection:
<div class=""flex flex-wrap justify-center mb-4"">{children}</div>"
Popular tags display,"description:
A horizontal list of popular tags, with each tag displayed as a pill or chip with the tag name and a count of how many times it's been used.
components:
- PopularTagsList: standalone component
- TagChip: takes children
html:
<div class=""flex flex-wrap gap-2 mb-4""><PopularTagsList/></div>
component html:
PopularTagsList:
<ul class=""list-none mb-0"">{tags.map((tag, index) =>( <li key={index} class=""inline-block mr-2 mb-2""><TagChip>{tag.name} ({tag.count})</TagChip></li>))}</ul>
TagChip:
<span class=""bg-gray-200 rounded-full px-4 py-1 text-sm"">{children}</span>"
Code snippet controls,"description:
A simple code snippet control with a copy button and an edit button.
components:
- CodeSnippetControl: - standalone component
- CopyButton: - standalone component
- EditButton: - standalone component
html:
<div class=""flex justify-end mb-2""><CopyButton/><EditButton/><CodeSnippetControl/></div>
component html:
CodeSnippetControl:
<pre class=""bg-gray-200 p-2 rounded""><code>{code_snippet}</code></pre>
CopyButton:
<button class=""bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-copy""></i>Copy</button>
EditButton:
<button class=""bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded""><i class=""fas fa-pencil-alt""></i>Edit</button>"
Hero Overlay Background,"description:
The UI should be a hero overlay background with a subtle gradient effect, overlaying a background image. The background image should be blurred to create a sense of depth, and the gradient overlay should have a subtle animation effect to make it stand out.
components:
- HeroBackground: A standalone component that displays the background image and gradient overlay.
- HeroGradientOverlay: A standalone component that displays the gradient overlay with animation effect.
html:
<div class=""min-h-screen relative""><HeroBackground/><HeroGradientOverlay/></div>
component html:
HeroBackground:
<div class=""absolute inset-0 bg-cover bg-center"" style=""`background-image: url({background_image});""}><div class=""absolute inset-0 bg-gray-900 opacity-50""></div></div>
HeroGradientOverlay:
<div class=""absolute inset-0""><div class=""absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 opacity-75 animate-pulse""></div></div>"
A loading indicator with a white spinning circle on a dark background,"description:
The loading indicator should be a simple, yet visually appealing component that indicates to the user that the application is loading. The indicator should be easily visible on different backgrounds and scalable for different screen sizes. The design should be minimalistic, with a white spinning circle on a dark background.
components:
- SpinningCircle: (Standalone): A white spinning circle that indicates loading. On small screens (sm), the circle should be 20px in diameter, on medium screens (md) it should be 30px, and on large screens (lg) it should be 40px.
- LoadingBackground: (Takes Children): A dark background that holds the spinning circle. The background should be dark gray (#333) and fill the entire screen.
html:
<div class=""flex h-screen justify-center items-center""><LoadingBackground><SpinningCircle/></LoadingBackground></div>
component html:
SpinningCircle:
<div class=""rounded-full animate-spin border-2 border-white h-{spinning_circle_size} w-{spinning_circle_size}""></div>
LoadingBackground:
<div class=""bg-gray-800 h-screen w-screen"">{children}</div>"
A product recommendation component that displays a list of related products,"description:
The product recommendation component should display a list of related products in a visually appealing way, making it easy for users to browse and discover new products. The component should be responsive, adapting to different screen sizes, and should use highlights and shadows to draw attention to individual products.
components:
- ProductRecommendation: (Takes Children): This component contains a list of related products. On smaller screens (sm:), it should display a single column of products, and on larger screens (md:), it should display multiple columns of products.
- ProductCard: (Standalone): This component displays a single product with its image, title, and description. On smaller screens (sm:), it should display a compact version with a smaller image and shorter description, and on larger screens (md:), it should display a larger image and more detailed description.
html:
<div class=""max-w-md mx-auto p-4 pt-6 lg:max-w-2xl lg:p-6""><ProductRecommendation><!-- list of ProductCard components will be rendered here --></ProductRecommendation></div>
component html:
ProductRecommendation:
<div class=""flex flex-wrap justify-center sm:justify-start"">{children}</div>
ProductCard:
<div class=""bg-white shadow-md rounded px-4 py-6 sm:p-6 lg:w-1/2 xl:w-1/3""><img src=""{product_image_url}"" alt=""{product_name}"" class=""w-full h-48 object-cover sm:h-64 lg:h-80""><h3 class=""text-lg font-bold"">{product_name}</h3><p class=""text-sm"">{product_description}</p></div>"
Product loading,"description:
The UI should be a loading indicator for a product, showing a spinning wheel and a ""Loading..."" text. It should be centered and take up the full width of its container.
components:
- LoadingIndicator: standalone
- LoadingText: standalone
html:
<div class=""flex h-screen justify-center items-center""><LoadingIndicator/><LoadingText/></div>
component html:
LoadingIndicator:
<div class=""w-12 h-12 border-4 border-dashed rounded-full animate-spin border-gray-500""></div>
LoadingText:
<p class=""text-lg text-gray-600"">{loading_text}</p>"
Blog Post Teaser,"description:
A compact, informative teaser for a blog post, featuring a headline, a brief summary, and a call-to-action to read more.
components:
- BlogPostTeaser: (standalone)
- PostHeadline: (standalone)
- PostSummary: (standalone)
- ReadMoreLink: (standalone)
html:
<div class=""flex flex-col md:flex-row md:items-center mb-4""><BlogPostTeaser/></div>
component html:
BlogPostTeaser:
<div class=""flex-1 md:w-2/3 xl:w-1/2""><PostHeadline/><PostSummary/><ReadMoreLink/></div>
PostHeadline:
<h2 class=""text-lg md:text-xl"">{post_title}</h2>
PostSummary:
<p class=""text-sm md:text-base"">{post_summary}</p>
ReadMoreLink:
<a href=""{post_permalink}"" class=""text-blue-600 hover:text-blue-700"">Read More &raquo;</a>"
"A simple, thin horizontal line to separate sections","description:
A thin, horizontal line that separates sections of content. The line should be responsive, adapting to different screen sizes. The line should be a subtle separator, not drawing attention away from the surrounding content.
components:
- SectionSeparator: (Standalone): A simple, horizontal line that separates sections of content.
html:
<!-- The top-level UI is just the SectionSeparator component --><SectionSeparator/>
component html:
SectionSeparator:
<!-- A thin, horizontal line that separates sections of content --><hr class=""w-full h-px bg-gray-200 dark:bg-gray-700""/>"
